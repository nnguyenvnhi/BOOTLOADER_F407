
BOOTLOADER_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eeb8  08020190  08020190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001434  0803f048  0803f048  0002f048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804047c  0804047c  00040200  2**0
                  CONTENTS
  4 .ARM          00000008  0804047c  0804047c  0003047c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08040484  08040484  00040200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08040484  08040484  00030484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08040488  08040488  00030488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0804048c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040200  2**0
                  CONTENTS
 10 .bss          00000984  20000200  20000200  00040200  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b84  20000b84  00040200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040200  2**0
                  CONTENTS, READONLY
 13 .debug_info   000263fb  00000000  00000000  00040230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c8a  00000000  00000000  0006662b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b78  00000000  00000000  0006b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019e8  00000000  00000000  0006ce30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026490  00000000  00000000  0006e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024320  00000000  00000000  00094ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7f1f  00000000  00000000  000b8fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00190ee7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000088c8  00000000  00000000  00190f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020190 <__do_global_dtors_aux>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4c05      	ldr	r4, [pc, #20]	; (80201a8 <__do_global_dtors_aux+0x18>)
 8020194:	7823      	ldrb	r3, [r4, #0]
 8020196:	b933      	cbnz	r3, 80201a6 <__do_global_dtors_aux+0x16>
 8020198:	4b04      	ldr	r3, [pc, #16]	; (80201ac <__do_global_dtors_aux+0x1c>)
 802019a:	b113      	cbz	r3, 80201a2 <__do_global_dtors_aux+0x12>
 802019c:	4804      	ldr	r0, [pc, #16]	; (80201b0 <__do_global_dtors_aux+0x20>)
 802019e:	f3af 8000 	nop.w
 80201a2:	2301      	movs	r3, #1
 80201a4:	7023      	strb	r3, [r4, #0]
 80201a6:	bd10      	pop	{r4, pc}
 80201a8:	20000200 	.word	0x20000200
 80201ac:	00000000 	.word	0x00000000
 80201b0:	0803f030 	.word	0x0803f030

080201b4 <frame_dummy>:
 80201b4:	b508      	push	{r3, lr}
 80201b6:	4b03      	ldr	r3, [pc, #12]	; (80201c4 <frame_dummy+0x10>)
 80201b8:	b11b      	cbz	r3, 80201c2 <frame_dummy+0xe>
 80201ba:	4903      	ldr	r1, [pc, #12]	; (80201c8 <frame_dummy+0x14>)
 80201bc:	4803      	ldr	r0, [pc, #12]	; (80201cc <frame_dummy+0x18>)
 80201be:	f3af 8000 	nop.w
 80201c2:	bd08      	pop	{r3, pc}
 80201c4:	00000000 	.word	0x00000000
 80201c8:	20000204 	.word	0x20000204
 80201cc:	0803f030 	.word	0x0803f030

080201d0 <strlen>:
 80201d0:	4603      	mov	r3, r0
 80201d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201d6:	2a00      	cmp	r2, #0
 80201d8:	d1fb      	bne.n	80201d2 <strlen+0x2>
 80201da:	1a18      	subs	r0, r3, r0
 80201dc:	3801      	subs	r0, #1
 80201de:	4770      	bx	lr

080201e0 <memchr>:
 80201e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201e4:	2a10      	cmp	r2, #16
 80201e6:	db2b      	blt.n	8020240 <memchr+0x60>
 80201e8:	f010 0f07 	tst.w	r0, #7
 80201ec:	d008      	beq.n	8020200 <memchr+0x20>
 80201ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201f2:	3a01      	subs	r2, #1
 80201f4:	428b      	cmp	r3, r1
 80201f6:	d02d      	beq.n	8020254 <memchr+0x74>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	b342      	cbz	r2, 8020250 <memchr+0x70>
 80201fe:	d1f6      	bne.n	80201ee <memchr+0xe>
 8020200:	b4f0      	push	{r4, r5, r6, r7}
 8020202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802020a:	f022 0407 	bic.w	r4, r2, #7
 802020e:	f07f 0700 	mvns.w	r7, #0
 8020212:	2300      	movs	r3, #0
 8020214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020218:	3c08      	subs	r4, #8
 802021a:	ea85 0501 	eor.w	r5, r5, r1
 802021e:	ea86 0601 	eor.w	r6, r6, r1
 8020222:	fa85 f547 	uadd8	r5, r5, r7
 8020226:	faa3 f587 	sel	r5, r3, r7
 802022a:	fa86 f647 	uadd8	r6, r6, r7
 802022e:	faa5 f687 	sel	r6, r5, r7
 8020232:	b98e      	cbnz	r6, 8020258 <memchr+0x78>
 8020234:	d1ee      	bne.n	8020214 <memchr+0x34>
 8020236:	bcf0      	pop	{r4, r5, r6, r7}
 8020238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802023c:	f002 0207 	and.w	r2, r2, #7
 8020240:	b132      	cbz	r2, 8020250 <memchr+0x70>
 8020242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020246:	3a01      	subs	r2, #1
 8020248:	ea83 0301 	eor.w	r3, r3, r1
 802024c:	b113      	cbz	r3, 8020254 <memchr+0x74>
 802024e:	d1f8      	bne.n	8020242 <memchr+0x62>
 8020250:	2000      	movs	r0, #0
 8020252:	4770      	bx	lr
 8020254:	3801      	subs	r0, #1
 8020256:	4770      	bx	lr
 8020258:	2d00      	cmp	r5, #0
 802025a:	bf06      	itte	eq
 802025c:	4635      	moveq	r5, r6
 802025e:	3803      	subeq	r0, #3
 8020260:	3807      	subne	r0, #7
 8020262:	f015 0f01 	tst.w	r5, #1
 8020266:	d107      	bne.n	8020278 <memchr+0x98>
 8020268:	3001      	adds	r0, #1
 802026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802026e:	bf02      	ittt	eq
 8020270:	3001      	addeq	r0, #1
 8020272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020276:	3001      	addeq	r0, #1
 8020278:	bcf0      	pop	{r4, r5, r6, r7}
 802027a:	3801      	subs	r0, #1
 802027c:	4770      	bx	lr
 802027e:	bf00      	nop

08020280 <__aeabi_drsub>:
 8020280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020284:	e002      	b.n	802028c <__adddf3>
 8020286:	bf00      	nop

08020288 <__aeabi_dsub>:
 8020288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802028c <__adddf3>:
 802028c:	b530      	push	{r4, r5, lr}
 802028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020296:	ea94 0f05 	teq	r4, r5
 802029a:	bf08      	it	eq
 802029c:	ea90 0f02 	teqeq	r0, r2
 80202a0:	bf1f      	itttt	ne
 80202a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80202a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80202aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80202ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80202b2:	f000 80e2 	beq.w	802047a <__adddf3+0x1ee>
 80202b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80202ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80202be:	bfb8      	it	lt
 80202c0:	426d      	neglt	r5, r5
 80202c2:	dd0c      	ble.n	80202de <__adddf3+0x52>
 80202c4:	442c      	add	r4, r5
 80202c6:	ea80 0202 	eor.w	r2, r0, r2
 80202ca:	ea81 0303 	eor.w	r3, r1, r3
 80202ce:	ea82 0000 	eor.w	r0, r2, r0
 80202d2:	ea83 0101 	eor.w	r1, r3, r1
 80202d6:	ea80 0202 	eor.w	r2, r0, r2
 80202da:	ea81 0303 	eor.w	r3, r1, r3
 80202de:	2d36      	cmp	r5, #54	; 0x36
 80202e0:	bf88      	it	hi
 80202e2:	bd30      	pophi	{r4, r5, pc}
 80202e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80202e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80202ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80202f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80202f4:	d002      	beq.n	80202fc <__adddf3+0x70>
 80202f6:	4240      	negs	r0, r0
 80202f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80202fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020308:	d002      	beq.n	8020310 <__adddf3+0x84>
 802030a:	4252      	negs	r2, r2
 802030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020310:	ea94 0f05 	teq	r4, r5
 8020314:	f000 80a7 	beq.w	8020466 <__adddf3+0x1da>
 8020318:	f1a4 0401 	sub.w	r4, r4, #1
 802031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020320:	db0d      	blt.n	802033e <__adddf3+0xb2>
 8020322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020326:	fa22 f205 	lsr.w	r2, r2, r5
 802032a:	1880      	adds	r0, r0, r2
 802032c:	f141 0100 	adc.w	r1, r1, #0
 8020330:	fa03 f20e 	lsl.w	r2, r3, lr
 8020334:	1880      	adds	r0, r0, r2
 8020336:	fa43 f305 	asr.w	r3, r3, r5
 802033a:	4159      	adcs	r1, r3
 802033c:	e00e      	b.n	802035c <__adddf3+0xd0>
 802033e:	f1a5 0520 	sub.w	r5, r5, #32
 8020342:	f10e 0e20 	add.w	lr, lr, #32
 8020346:	2a01      	cmp	r2, #1
 8020348:	fa03 fc0e 	lsl.w	ip, r3, lr
 802034c:	bf28      	it	cs
 802034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020352:	fa43 f305 	asr.w	r3, r3, r5
 8020356:	18c0      	adds	r0, r0, r3
 8020358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020360:	d507      	bpl.n	8020372 <__adddf3+0xe6>
 8020362:	f04f 0e00 	mov.w	lr, #0
 8020366:	f1dc 0c00 	rsbs	ip, ip, #0
 802036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020376:	d31b      	bcc.n	80203b0 <__adddf3+0x124>
 8020378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802037c:	d30c      	bcc.n	8020398 <__adddf3+0x10c>
 802037e:	0849      	lsrs	r1, r1, #1
 8020380:	ea5f 0030 	movs.w	r0, r0, rrx
 8020384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020388:	f104 0401 	add.w	r4, r4, #1
 802038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020394:	f080 809a 	bcs.w	80204cc <__adddf3+0x240>
 8020398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802039c:	bf08      	it	eq
 802039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80203a2:	f150 0000 	adcs.w	r0, r0, #0
 80203a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80203aa:	ea41 0105 	orr.w	r1, r1, r5
 80203ae:	bd30      	pop	{r4, r5, pc}
 80203b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80203b4:	4140      	adcs	r0, r0
 80203b6:	eb41 0101 	adc.w	r1, r1, r1
 80203ba:	3c01      	subs	r4, #1
 80203bc:	bf28      	it	cs
 80203be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80203c2:	d2e9      	bcs.n	8020398 <__adddf3+0x10c>
 80203c4:	f091 0f00 	teq	r1, #0
 80203c8:	bf04      	itt	eq
 80203ca:	4601      	moveq	r1, r0
 80203cc:	2000      	moveq	r0, #0
 80203ce:	fab1 f381 	clz	r3, r1
 80203d2:	bf08      	it	eq
 80203d4:	3320      	addeq	r3, #32
 80203d6:	f1a3 030b 	sub.w	r3, r3, #11
 80203da:	f1b3 0220 	subs.w	r2, r3, #32
 80203de:	da0c      	bge.n	80203fa <__adddf3+0x16e>
 80203e0:	320c      	adds	r2, #12
 80203e2:	dd08      	ble.n	80203f6 <__adddf3+0x16a>
 80203e4:	f102 0c14 	add.w	ip, r2, #20
 80203e8:	f1c2 020c 	rsb	r2, r2, #12
 80203ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80203f0:	fa21 f102 	lsr.w	r1, r1, r2
 80203f4:	e00c      	b.n	8020410 <__adddf3+0x184>
 80203f6:	f102 0214 	add.w	r2, r2, #20
 80203fa:	bfd8      	it	le
 80203fc:	f1c2 0c20 	rsble	ip, r2, #32
 8020400:	fa01 f102 	lsl.w	r1, r1, r2
 8020404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020408:	bfdc      	itt	le
 802040a:	ea41 010c 	orrle.w	r1, r1, ip
 802040e:	4090      	lslle	r0, r2
 8020410:	1ae4      	subs	r4, r4, r3
 8020412:	bfa2      	ittt	ge
 8020414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020418:	4329      	orrge	r1, r5
 802041a:	bd30      	popge	{r4, r5, pc}
 802041c:	ea6f 0404 	mvn.w	r4, r4
 8020420:	3c1f      	subs	r4, #31
 8020422:	da1c      	bge.n	802045e <__adddf3+0x1d2>
 8020424:	340c      	adds	r4, #12
 8020426:	dc0e      	bgt.n	8020446 <__adddf3+0x1ba>
 8020428:	f104 0414 	add.w	r4, r4, #20
 802042c:	f1c4 0220 	rsb	r2, r4, #32
 8020430:	fa20 f004 	lsr.w	r0, r0, r4
 8020434:	fa01 f302 	lsl.w	r3, r1, r2
 8020438:	ea40 0003 	orr.w	r0, r0, r3
 802043c:	fa21 f304 	lsr.w	r3, r1, r4
 8020440:	ea45 0103 	orr.w	r1, r5, r3
 8020444:	bd30      	pop	{r4, r5, pc}
 8020446:	f1c4 040c 	rsb	r4, r4, #12
 802044a:	f1c4 0220 	rsb	r2, r4, #32
 802044e:	fa20 f002 	lsr.w	r0, r0, r2
 8020452:	fa01 f304 	lsl.w	r3, r1, r4
 8020456:	ea40 0003 	orr.w	r0, r0, r3
 802045a:	4629      	mov	r1, r5
 802045c:	bd30      	pop	{r4, r5, pc}
 802045e:	fa21 f004 	lsr.w	r0, r1, r4
 8020462:	4629      	mov	r1, r5
 8020464:	bd30      	pop	{r4, r5, pc}
 8020466:	f094 0f00 	teq	r4, #0
 802046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802046e:	bf06      	itte	eq
 8020470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020474:	3401      	addeq	r4, #1
 8020476:	3d01      	subne	r5, #1
 8020478:	e74e      	b.n	8020318 <__adddf3+0x8c>
 802047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802047e:	bf18      	it	ne
 8020480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020484:	d029      	beq.n	80204da <__adddf3+0x24e>
 8020486:	ea94 0f05 	teq	r4, r5
 802048a:	bf08      	it	eq
 802048c:	ea90 0f02 	teqeq	r0, r2
 8020490:	d005      	beq.n	802049e <__adddf3+0x212>
 8020492:	ea54 0c00 	orrs.w	ip, r4, r0
 8020496:	bf04      	itt	eq
 8020498:	4619      	moveq	r1, r3
 802049a:	4610      	moveq	r0, r2
 802049c:	bd30      	pop	{r4, r5, pc}
 802049e:	ea91 0f03 	teq	r1, r3
 80204a2:	bf1e      	ittt	ne
 80204a4:	2100      	movne	r1, #0
 80204a6:	2000      	movne	r0, #0
 80204a8:	bd30      	popne	{r4, r5, pc}
 80204aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80204ae:	d105      	bne.n	80204bc <__adddf3+0x230>
 80204b0:	0040      	lsls	r0, r0, #1
 80204b2:	4149      	adcs	r1, r1
 80204b4:	bf28      	it	cs
 80204b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80204ba:	bd30      	pop	{r4, r5, pc}
 80204bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80204c0:	bf3c      	itt	cc
 80204c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80204c6:	bd30      	popcc	{r4, r5, pc}
 80204c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80204cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80204d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80204d4:	f04f 0000 	mov.w	r0, #0
 80204d8:	bd30      	pop	{r4, r5, pc}
 80204da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80204de:	bf1a      	itte	ne
 80204e0:	4619      	movne	r1, r3
 80204e2:	4610      	movne	r0, r2
 80204e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80204e8:	bf1c      	itt	ne
 80204ea:	460b      	movne	r3, r1
 80204ec:	4602      	movne	r2, r0
 80204ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80204f2:	bf06      	itte	eq
 80204f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80204f8:	ea91 0f03 	teqeq	r1, r3
 80204fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020500:	bd30      	pop	{r4, r5, pc}
 8020502:	bf00      	nop

08020504 <__aeabi_ui2d>:
 8020504:	f090 0f00 	teq	r0, #0
 8020508:	bf04      	itt	eq
 802050a:	2100      	moveq	r1, #0
 802050c:	4770      	bxeq	lr
 802050e:	b530      	push	{r4, r5, lr}
 8020510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020518:	f04f 0500 	mov.w	r5, #0
 802051c:	f04f 0100 	mov.w	r1, #0
 8020520:	e750      	b.n	80203c4 <__adddf3+0x138>
 8020522:	bf00      	nop

08020524 <__aeabi_i2d>:
 8020524:	f090 0f00 	teq	r0, #0
 8020528:	bf04      	itt	eq
 802052a:	2100      	moveq	r1, #0
 802052c:	4770      	bxeq	lr
 802052e:	b530      	push	{r4, r5, lr}
 8020530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802053c:	bf48      	it	mi
 802053e:	4240      	negmi	r0, r0
 8020540:	f04f 0100 	mov.w	r1, #0
 8020544:	e73e      	b.n	80203c4 <__adddf3+0x138>
 8020546:	bf00      	nop

08020548 <__aeabi_f2d>:
 8020548:	0042      	lsls	r2, r0, #1
 802054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020556:	bf1f      	itttt	ne
 8020558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020564:	4770      	bxne	lr
 8020566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802056a:	bf08      	it	eq
 802056c:	4770      	bxeq	lr
 802056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020572:	bf04      	itt	eq
 8020574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020578:	4770      	bxeq	lr
 802057a:	b530      	push	{r4, r5, lr}
 802057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020588:	e71c      	b.n	80203c4 <__adddf3+0x138>
 802058a:	bf00      	nop

0802058c <__aeabi_ul2d>:
 802058c:	ea50 0201 	orrs.w	r2, r0, r1
 8020590:	bf08      	it	eq
 8020592:	4770      	bxeq	lr
 8020594:	b530      	push	{r4, r5, lr}
 8020596:	f04f 0500 	mov.w	r5, #0
 802059a:	e00a      	b.n	80205b2 <__aeabi_l2d+0x16>

0802059c <__aeabi_l2d>:
 802059c:	ea50 0201 	orrs.w	r2, r0, r1
 80205a0:	bf08      	it	eq
 80205a2:	4770      	bxeq	lr
 80205a4:	b530      	push	{r4, r5, lr}
 80205a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80205aa:	d502      	bpl.n	80205b2 <__aeabi_l2d+0x16>
 80205ac:	4240      	negs	r0, r0
 80205ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80205b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80205b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80205ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80205be:	f43f aed8 	beq.w	8020372 <__adddf3+0xe6>
 80205c2:	f04f 0203 	mov.w	r2, #3
 80205c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205ca:	bf18      	it	ne
 80205cc:	3203      	addne	r2, #3
 80205ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205d2:	bf18      	it	ne
 80205d4:	3203      	addne	r2, #3
 80205d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80205da:	f1c2 0320 	rsb	r3, r2, #32
 80205de:	fa00 fc03 	lsl.w	ip, r0, r3
 80205e2:	fa20 f002 	lsr.w	r0, r0, r2
 80205e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80205ea:	ea40 000e 	orr.w	r0, r0, lr
 80205ee:	fa21 f102 	lsr.w	r1, r1, r2
 80205f2:	4414      	add	r4, r2
 80205f4:	e6bd      	b.n	8020372 <__adddf3+0xe6>
 80205f6:	bf00      	nop

080205f8 <__aeabi_dmul>:
 80205f8:	b570      	push	{r4, r5, r6, lr}
 80205fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80205fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020606:	bf1d      	ittte	ne
 8020608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802060c:	ea94 0f0c 	teqne	r4, ip
 8020610:	ea95 0f0c 	teqne	r5, ip
 8020614:	f000 f8de 	bleq	80207d4 <__aeabi_dmul+0x1dc>
 8020618:	442c      	add	r4, r5
 802061a:	ea81 0603 	eor.w	r6, r1, r3
 802061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802062a:	bf18      	it	ne
 802062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020638:	d038      	beq.n	80206ac <__aeabi_dmul+0xb4>
 802063a:	fba0 ce02 	umull	ip, lr, r0, r2
 802063e:	f04f 0500 	mov.w	r5, #0
 8020642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802064e:	f04f 0600 	mov.w	r6, #0
 8020652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020656:	f09c 0f00 	teq	ip, #0
 802065a:	bf18      	it	ne
 802065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802066c:	d204      	bcs.n	8020678 <__aeabi_dmul+0x80>
 802066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020672:	416d      	adcs	r5, r5
 8020674:	eb46 0606 	adc.w	r6, r6, r6
 8020678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020690:	bf88      	it	hi
 8020692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020696:	d81e      	bhi.n	80206d6 <__aeabi_dmul+0xde>
 8020698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802069c:	bf08      	it	eq
 802069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80206a2:	f150 0000 	adcs.w	r0, r0, #0
 80206a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80206aa:	bd70      	pop	{r4, r5, r6, pc}
 80206ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80206b0:	ea46 0101 	orr.w	r1, r6, r1
 80206b4:	ea40 0002 	orr.w	r0, r0, r2
 80206b8:	ea81 0103 	eor.w	r1, r1, r3
 80206bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80206c0:	bfc2      	ittt	gt
 80206c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80206c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80206ca:	bd70      	popgt	{r4, r5, r6, pc}
 80206cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80206d0:	f04f 0e00 	mov.w	lr, #0
 80206d4:	3c01      	subs	r4, #1
 80206d6:	f300 80ab 	bgt.w	8020830 <__aeabi_dmul+0x238>
 80206da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80206de:	bfde      	ittt	le
 80206e0:	2000      	movle	r0, #0
 80206e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80206e6:	bd70      	pople	{r4, r5, r6, pc}
 80206e8:	f1c4 0400 	rsb	r4, r4, #0
 80206ec:	3c20      	subs	r4, #32
 80206ee:	da35      	bge.n	802075c <__aeabi_dmul+0x164>
 80206f0:	340c      	adds	r4, #12
 80206f2:	dc1b      	bgt.n	802072c <__aeabi_dmul+0x134>
 80206f4:	f104 0414 	add.w	r4, r4, #20
 80206f8:	f1c4 0520 	rsb	r5, r4, #32
 80206fc:	fa00 f305 	lsl.w	r3, r0, r5
 8020700:	fa20 f004 	lsr.w	r0, r0, r4
 8020704:	fa01 f205 	lsl.w	r2, r1, r5
 8020708:	ea40 0002 	orr.w	r0, r0, r2
 802070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020718:	fa21 f604 	lsr.w	r6, r1, r4
 802071c:	eb42 0106 	adc.w	r1, r2, r6
 8020720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020724:	bf08      	it	eq
 8020726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802072a:	bd70      	pop	{r4, r5, r6, pc}
 802072c:	f1c4 040c 	rsb	r4, r4, #12
 8020730:	f1c4 0520 	rsb	r5, r4, #32
 8020734:	fa00 f304 	lsl.w	r3, r0, r4
 8020738:	fa20 f005 	lsr.w	r0, r0, r5
 802073c:	fa01 f204 	lsl.w	r2, r1, r4
 8020740:	ea40 0002 	orr.w	r0, r0, r2
 8020744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802074c:	f141 0100 	adc.w	r1, r1, #0
 8020750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020754:	bf08      	it	eq
 8020756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802075a:	bd70      	pop	{r4, r5, r6, pc}
 802075c:	f1c4 0520 	rsb	r5, r4, #32
 8020760:	fa00 f205 	lsl.w	r2, r0, r5
 8020764:	ea4e 0e02 	orr.w	lr, lr, r2
 8020768:	fa20 f304 	lsr.w	r3, r0, r4
 802076c:	fa01 f205 	lsl.w	r2, r1, r5
 8020770:	ea43 0302 	orr.w	r3, r3, r2
 8020774:	fa21 f004 	lsr.w	r0, r1, r4
 8020778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802077c:	fa21 f204 	lsr.w	r2, r1, r4
 8020780:	ea20 0002 	bic.w	r0, r0, r2
 8020784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802078c:	bf08      	it	eq
 802078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020792:	bd70      	pop	{r4, r5, r6, pc}
 8020794:	f094 0f00 	teq	r4, #0
 8020798:	d10f      	bne.n	80207ba <__aeabi_dmul+0x1c2>
 802079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802079e:	0040      	lsls	r0, r0, #1
 80207a0:	eb41 0101 	adc.w	r1, r1, r1
 80207a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80207a8:	bf08      	it	eq
 80207aa:	3c01      	subeq	r4, #1
 80207ac:	d0f7      	beq.n	802079e <__aeabi_dmul+0x1a6>
 80207ae:	ea41 0106 	orr.w	r1, r1, r6
 80207b2:	f095 0f00 	teq	r5, #0
 80207b6:	bf18      	it	ne
 80207b8:	4770      	bxne	lr
 80207ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80207be:	0052      	lsls	r2, r2, #1
 80207c0:	eb43 0303 	adc.w	r3, r3, r3
 80207c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80207c8:	bf08      	it	eq
 80207ca:	3d01      	subeq	r5, #1
 80207cc:	d0f7      	beq.n	80207be <__aeabi_dmul+0x1c6>
 80207ce:	ea43 0306 	orr.w	r3, r3, r6
 80207d2:	4770      	bx	lr
 80207d4:	ea94 0f0c 	teq	r4, ip
 80207d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80207dc:	bf18      	it	ne
 80207de:	ea95 0f0c 	teqne	r5, ip
 80207e2:	d00c      	beq.n	80207fe <__aeabi_dmul+0x206>
 80207e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207e8:	bf18      	it	ne
 80207ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207ee:	d1d1      	bne.n	8020794 <__aeabi_dmul+0x19c>
 80207f0:	ea81 0103 	eor.w	r1, r1, r3
 80207f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80207f8:	f04f 0000 	mov.w	r0, #0
 80207fc:	bd70      	pop	{r4, r5, r6, pc}
 80207fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020802:	bf06      	itte	eq
 8020804:	4610      	moveq	r0, r2
 8020806:	4619      	moveq	r1, r3
 8020808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802080c:	d019      	beq.n	8020842 <__aeabi_dmul+0x24a>
 802080e:	ea94 0f0c 	teq	r4, ip
 8020812:	d102      	bne.n	802081a <__aeabi_dmul+0x222>
 8020814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020818:	d113      	bne.n	8020842 <__aeabi_dmul+0x24a>
 802081a:	ea95 0f0c 	teq	r5, ip
 802081e:	d105      	bne.n	802082c <__aeabi_dmul+0x234>
 8020820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020824:	bf1c      	itt	ne
 8020826:	4610      	movne	r0, r2
 8020828:	4619      	movne	r1, r3
 802082a:	d10a      	bne.n	8020842 <__aeabi_dmul+0x24a>
 802082c:	ea81 0103 	eor.w	r1, r1, r3
 8020830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802083c:	f04f 0000 	mov.w	r0, #0
 8020840:	bd70      	pop	{r4, r5, r6, pc}
 8020842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802084a:	bd70      	pop	{r4, r5, r6, pc}

0802084c <__aeabi_ddiv>:
 802084c:	b570      	push	{r4, r5, r6, lr}
 802084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802085a:	bf1d      	ittte	ne
 802085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020860:	ea94 0f0c 	teqne	r4, ip
 8020864:	ea95 0f0c 	teqne	r5, ip
 8020868:	f000 f8a7 	bleq	80209ba <__aeabi_ddiv+0x16e>
 802086c:	eba4 0405 	sub.w	r4, r4, r5
 8020870:	ea81 0e03 	eor.w	lr, r1, r3
 8020874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802087c:	f000 8088 	beq.w	8020990 <__aeabi_ddiv+0x144>
 8020880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80208a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80208a4:	429d      	cmp	r5, r3
 80208a6:	bf08      	it	eq
 80208a8:	4296      	cmpeq	r6, r2
 80208aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80208ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80208b2:	d202      	bcs.n	80208ba <__aeabi_ddiv+0x6e>
 80208b4:	085b      	lsrs	r3, r3, #1
 80208b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80208ba:	1ab6      	subs	r6, r6, r2
 80208bc:	eb65 0503 	sbc.w	r5, r5, r3
 80208c0:	085b      	lsrs	r3, r3, #1
 80208c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80208c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80208ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80208ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80208d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208d6:	bf22      	ittt	cs
 80208d8:	1ab6      	subcs	r6, r6, r2
 80208da:	4675      	movcs	r5, lr
 80208dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80208e0:	085b      	lsrs	r3, r3, #1
 80208e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80208e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80208ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208ee:	bf22      	ittt	cs
 80208f0:	1ab6      	subcs	r6, r6, r2
 80208f2:	4675      	movcs	r5, lr
 80208f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80208f8:	085b      	lsrs	r3, r3, #1
 80208fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80208fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8020902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020906:	bf22      	ittt	cs
 8020908:	1ab6      	subcs	r6, r6, r2
 802090a:	4675      	movcs	r5, lr
 802090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020910:	085b      	lsrs	r3, r3, #1
 8020912:	ea4f 0232 	mov.w	r2, r2, rrx
 8020916:	ebb6 0e02 	subs.w	lr, r6, r2
 802091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802091e:	bf22      	ittt	cs
 8020920:	1ab6      	subcs	r6, r6, r2
 8020922:	4675      	movcs	r5, lr
 8020924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020928:	ea55 0e06 	orrs.w	lr, r5, r6
 802092c:	d018      	beq.n	8020960 <__aeabi_ddiv+0x114>
 802092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802094a:	d1c0      	bne.n	80208ce <__aeabi_ddiv+0x82>
 802094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020950:	d10b      	bne.n	802096a <__aeabi_ddiv+0x11e>
 8020952:	ea41 0100 	orr.w	r1, r1, r0
 8020956:	f04f 0000 	mov.w	r0, #0
 802095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802095e:	e7b6      	b.n	80208ce <__aeabi_ddiv+0x82>
 8020960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020964:	bf04      	itt	eq
 8020966:	4301      	orreq	r1, r0
 8020968:	2000      	moveq	r0, #0
 802096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802096e:	bf88      	it	hi
 8020970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020974:	f63f aeaf 	bhi.w	80206d6 <__aeabi_dmul+0xde>
 8020978:	ebb5 0c03 	subs.w	ip, r5, r3
 802097c:	bf04      	itt	eq
 802097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020986:	f150 0000 	adcs.w	r0, r0, #0
 802098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802098e:	bd70      	pop	{r4, r5, r6, pc}
 8020990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802099c:	bfc2      	ittt	gt
 802099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80209a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80209a6:	bd70      	popgt	{r4, r5, r6, pc}
 80209a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80209ac:	f04f 0e00 	mov.w	lr, #0
 80209b0:	3c01      	subs	r4, #1
 80209b2:	e690      	b.n	80206d6 <__aeabi_dmul+0xde>
 80209b4:	ea45 0e06 	orr.w	lr, r5, r6
 80209b8:	e68d      	b.n	80206d6 <__aeabi_dmul+0xde>
 80209ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80209be:	ea94 0f0c 	teq	r4, ip
 80209c2:	bf08      	it	eq
 80209c4:	ea95 0f0c 	teqeq	r5, ip
 80209c8:	f43f af3b 	beq.w	8020842 <__aeabi_dmul+0x24a>
 80209cc:	ea94 0f0c 	teq	r4, ip
 80209d0:	d10a      	bne.n	80209e8 <__aeabi_ddiv+0x19c>
 80209d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80209d6:	f47f af34 	bne.w	8020842 <__aeabi_dmul+0x24a>
 80209da:	ea95 0f0c 	teq	r5, ip
 80209de:	f47f af25 	bne.w	802082c <__aeabi_dmul+0x234>
 80209e2:	4610      	mov	r0, r2
 80209e4:	4619      	mov	r1, r3
 80209e6:	e72c      	b.n	8020842 <__aeabi_dmul+0x24a>
 80209e8:	ea95 0f0c 	teq	r5, ip
 80209ec:	d106      	bne.n	80209fc <__aeabi_ddiv+0x1b0>
 80209ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80209f2:	f43f aefd 	beq.w	80207f0 <__aeabi_dmul+0x1f8>
 80209f6:	4610      	mov	r0, r2
 80209f8:	4619      	mov	r1, r3
 80209fa:	e722      	b.n	8020842 <__aeabi_dmul+0x24a>
 80209fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020a00:	bf18      	it	ne
 8020a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020a06:	f47f aec5 	bne.w	8020794 <__aeabi_dmul+0x19c>
 8020a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020a0e:	f47f af0d 	bne.w	802082c <__aeabi_dmul+0x234>
 8020a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020a16:	f47f aeeb 	bne.w	80207f0 <__aeabi_dmul+0x1f8>
 8020a1a:	e712      	b.n	8020842 <__aeabi_dmul+0x24a>

08020a1c <__gedf2>:
 8020a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8020a20:	e006      	b.n	8020a30 <__cmpdf2+0x4>
 8020a22:	bf00      	nop

08020a24 <__ledf2>:
 8020a24:	f04f 0c01 	mov.w	ip, #1
 8020a28:	e002      	b.n	8020a30 <__cmpdf2+0x4>
 8020a2a:	bf00      	nop

08020a2c <__cmpdf2>:
 8020a2c:	f04f 0c01 	mov.w	ip, #1
 8020a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a40:	bf18      	it	ne
 8020a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020a46:	d01b      	beq.n	8020a80 <__cmpdf2+0x54>
 8020a48:	b001      	add	sp, #4
 8020a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020a4e:	bf0c      	ite	eq
 8020a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020a54:	ea91 0f03 	teqne	r1, r3
 8020a58:	bf02      	ittt	eq
 8020a5a:	ea90 0f02 	teqeq	r0, r2
 8020a5e:	2000      	moveq	r0, #0
 8020a60:	4770      	bxeq	lr
 8020a62:	f110 0f00 	cmn.w	r0, #0
 8020a66:	ea91 0f03 	teq	r1, r3
 8020a6a:	bf58      	it	pl
 8020a6c:	4299      	cmppl	r1, r3
 8020a6e:	bf08      	it	eq
 8020a70:	4290      	cmpeq	r0, r2
 8020a72:	bf2c      	ite	cs
 8020a74:	17d8      	asrcs	r0, r3, #31
 8020a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020a7a:	f040 0001 	orr.w	r0, r0, #1
 8020a7e:	4770      	bx	lr
 8020a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a88:	d102      	bne.n	8020a90 <__cmpdf2+0x64>
 8020a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020a8e:	d107      	bne.n	8020aa0 <__cmpdf2+0x74>
 8020a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a98:	d1d6      	bne.n	8020a48 <__cmpdf2+0x1c>
 8020a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020a9e:	d0d3      	beq.n	8020a48 <__cmpdf2+0x1c>
 8020aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020aa4:	4770      	bx	lr
 8020aa6:	bf00      	nop

08020aa8 <__aeabi_cdrcmple>:
 8020aa8:	4684      	mov	ip, r0
 8020aaa:	4610      	mov	r0, r2
 8020aac:	4662      	mov	r2, ip
 8020aae:	468c      	mov	ip, r1
 8020ab0:	4619      	mov	r1, r3
 8020ab2:	4663      	mov	r3, ip
 8020ab4:	e000      	b.n	8020ab8 <__aeabi_cdcmpeq>
 8020ab6:	bf00      	nop

08020ab8 <__aeabi_cdcmpeq>:
 8020ab8:	b501      	push	{r0, lr}
 8020aba:	f7ff ffb7 	bl	8020a2c <__cmpdf2>
 8020abe:	2800      	cmp	r0, #0
 8020ac0:	bf48      	it	mi
 8020ac2:	f110 0f00 	cmnmi.w	r0, #0
 8020ac6:	bd01      	pop	{r0, pc}

08020ac8 <__aeabi_dcmpeq>:
 8020ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020acc:	f7ff fff4 	bl	8020ab8 <__aeabi_cdcmpeq>
 8020ad0:	bf0c      	ite	eq
 8020ad2:	2001      	moveq	r0, #1
 8020ad4:	2000      	movne	r0, #0
 8020ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8020ada:	bf00      	nop

08020adc <__aeabi_dcmplt>:
 8020adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020ae0:	f7ff ffea 	bl	8020ab8 <__aeabi_cdcmpeq>
 8020ae4:	bf34      	ite	cc
 8020ae6:	2001      	movcc	r0, #1
 8020ae8:	2000      	movcs	r0, #0
 8020aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8020aee:	bf00      	nop

08020af0 <__aeabi_dcmple>:
 8020af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020af4:	f7ff ffe0 	bl	8020ab8 <__aeabi_cdcmpeq>
 8020af8:	bf94      	ite	ls
 8020afa:	2001      	movls	r0, #1
 8020afc:	2000      	movhi	r0, #0
 8020afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b02:	bf00      	nop

08020b04 <__aeabi_dcmpge>:
 8020b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b08:	f7ff ffce 	bl	8020aa8 <__aeabi_cdrcmple>
 8020b0c:	bf94      	ite	ls
 8020b0e:	2001      	movls	r0, #1
 8020b10:	2000      	movhi	r0, #0
 8020b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b16:	bf00      	nop

08020b18 <__aeabi_dcmpgt>:
 8020b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b1c:	f7ff ffc4 	bl	8020aa8 <__aeabi_cdrcmple>
 8020b20:	bf34      	ite	cc
 8020b22:	2001      	movcc	r0, #1
 8020b24:	2000      	movcs	r0, #0
 8020b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b2a:	bf00      	nop

08020b2c <__aeabi_dcmpun>:
 8020b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b34:	d102      	bne.n	8020b3c <__aeabi_dcmpun+0x10>
 8020b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020b3a:	d10a      	bne.n	8020b52 <__aeabi_dcmpun+0x26>
 8020b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b44:	d102      	bne.n	8020b4c <__aeabi_dcmpun+0x20>
 8020b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020b4a:	d102      	bne.n	8020b52 <__aeabi_dcmpun+0x26>
 8020b4c:	f04f 0000 	mov.w	r0, #0
 8020b50:	4770      	bx	lr
 8020b52:	f04f 0001 	mov.w	r0, #1
 8020b56:	4770      	bx	lr

08020b58 <__aeabi_d2iz>:
 8020b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020b60:	d215      	bcs.n	8020b8e <__aeabi_d2iz+0x36>
 8020b62:	d511      	bpl.n	8020b88 <__aeabi_d2iz+0x30>
 8020b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020b6c:	d912      	bls.n	8020b94 <__aeabi_d2iz+0x3c>
 8020b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8020b82:	bf18      	it	ne
 8020b84:	4240      	negne	r0, r0
 8020b86:	4770      	bx	lr
 8020b88:	f04f 0000 	mov.w	r0, #0
 8020b8c:	4770      	bx	lr
 8020b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020b92:	d105      	bne.n	8020ba0 <__aeabi_d2iz+0x48>
 8020b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020b98:	bf08      	it	eq
 8020b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020b9e:	4770      	bx	lr
 8020ba0:	f04f 0000 	mov.w	r0, #0
 8020ba4:	4770      	bx	lr
 8020ba6:	bf00      	nop

08020ba8 <__aeabi_d2uiz>:
 8020ba8:	004a      	lsls	r2, r1, #1
 8020baa:	d211      	bcs.n	8020bd0 <__aeabi_d2uiz+0x28>
 8020bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020bb0:	d211      	bcs.n	8020bd6 <__aeabi_d2uiz+0x2e>
 8020bb2:	d50d      	bpl.n	8020bd0 <__aeabi_d2uiz+0x28>
 8020bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020bbc:	d40e      	bmi.n	8020bdc <__aeabi_d2uiz+0x34>
 8020bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020bca:	fa23 f002 	lsr.w	r0, r3, r2
 8020bce:	4770      	bx	lr
 8020bd0:	f04f 0000 	mov.w	r0, #0
 8020bd4:	4770      	bx	lr
 8020bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020bda:	d102      	bne.n	8020be2 <__aeabi_d2uiz+0x3a>
 8020bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8020be0:	4770      	bx	lr
 8020be2:	f04f 0000 	mov.w	r0, #0
 8020be6:	4770      	bx	lr

08020be8 <__aeabi_d2f>:
 8020be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020bf0:	bf24      	itt	cs
 8020bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8020bfa:	d90d      	bls.n	8020c18 <__aeabi_d2f+0x30>
 8020bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020c10:	bf08      	it	eq
 8020c12:	f020 0001 	biceq.w	r0, r0, #1
 8020c16:	4770      	bx	lr
 8020c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020c1c:	d121      	bne.n	8020c62 <__aeabi_d2f+0x7a>
 8020c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020c22:	bfbc      	itt	lt
 8020c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8020c28:	4770      	bxlt	lr
 8020c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020c32:	f1c2 0218 	rsb	r2, r2, #24
 8020c36:	f1c2 0c20 	rsb	ip, r2, #32
 8020c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8020c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8020c42:	bf18      	it	ne
 8020c44:	f040 0001 	orrne.w	r0, r0, #1
 8020c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020c54:	ea40 000c 	orr.w	r0, r0, ip
 8020c58:	fa23 f302 	lsr.w	r3, r3, r2
 8020c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020c60:	e7cc      	b.n	8020bfc <__aeabi_d2f+0x14>
 8020c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020c66:	d107      	bne.n	8020c78 <__aeabi_d2f+0x90>
 8020c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020c6c:	bf1e      	ittt	ne
 8020c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020c76:	4770      	bxne	lr
 8020c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020c84:	4770      	bx	lr
 8020c86:	bf00      	nop

08020c88 <__aeabi_uldivmod>:
 8020c88:	b953      	cbnz	r3, 8020ca0 <__aeabi_uldivmod+0x18>
 8020c8a:	b94a      	cbnz	r2, 8020ca0 <__aeabi_uldivmod+0x18>
 8020c8c:	2900      	cmp	r1, #0
 8020c8e:	bf08      	it	eq
 8020c90:	2800      	cmpeq	r0, #0
 8020c92:	bf1c      	itt	ne
 8020c94:	f04f 31ff 	movne.w	r1, #4294967295
 8020c98:	f04f 30ff 	movne.w	r0, #4294967295
 8020c9c:	f000 b9a4 	b.w	8020fe8 <__aeabi_idiv0>
 8020ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8020ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020ca8:	f000 f83c 	bl	8020d24 <__udivmoddi4>
 8020cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020cb4:	b004      	add	sp, #16
 8020cb6:	4770      	bx	lr

08020cb8 <__aeabi_d2lz>:
 8020cb8:	b538      	push	{r3, r4, r5, lr}
 8020cba:	2200      	movs	r2, #0
 8020cbc:	2300      	movs	r3, #0
 8020cbe:	4604      	mov	r4, r0
 8020cc0:	460d      	mov	r5, r1
 8020cc2:	f7ff ff0b 	bl	8020adc <__aeabi_dcmplt>
 8020cc6:	b928      	cbnz	r0, 8020cd4 <__aeabi_d2lz+0x1c>
 8020cc8:	4620      	mov	r0, r4
 8020cca:	4629      	mov	r1, r5
 8020ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020cd0:	f000 b80a 	b.w	8020ce8 <__aeabi_d2ulz>
 8020cd4:	4620      	mov	r0, r4
 8020cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8020cda:	f000 f805 	bl	8020ce8 <__aeabi_d2ulz>
 8020cde:	4240      	negs	r0, r0
 8020ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020ce4:	bd38      	pop	{r3, r4, r5, pc}
 8020ce6:	bf00      	nop

08020ce8 <__aeabi_d2ulz>:
 8020ce8:	b5d0      	push	{r4, r6, r7, lr}
 8020cea:	4b0c      	ldr	r3, [pc, #48]	; (8020d1c <__aeabi_d2ulz+0x34>)
 8020cec:	2200      	movs	r2, #0
 8020cee:	4606      	mov	r6, r0
 8020cf0:	460f      	mov	r7, r1
 8020cf2:	f7ff fc81 	bl	80205f8 <__aeabi_dmul>
 8020cf6:	f7ff ff57 	bl	8020ba8 <__aeabi_d2uiz>
 8020cfa:	4604      	mov	r4, r0
 8020cfc:	f7ff fc02 	bl	8020504 <__aeabi_ui2d>
 8020d00:	4b07      	ldr	r3, [pc, #28]	; (8020d20 <__aeabi_d2ulz+0x38>)
 8020d02:	2200      	movs	r2, #0
 8020d04:	f7ff fc78 	bl	80205f8 <__aeabi_dmul>
 8020d08:	4602      	mov	r2, r0
 8020d0a:	460b      	mov	r3, r1
 8020d0c:	4630      	mov	r0, r6
 8020d0e:	4639      	mov	r1, r7
 8020d10:	f7ff faba 	bl	8020288 <__aeabi_dsub>
 8020d14:	f7ff ff48 	bl	8020ba8 <__aeabi_d2uiz>
 8020d18:	4621      	mov	r1, r4
 8020d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8020d1c:	3df00000 	.word	0x3df00000
 8020d20:	41f00000 	.word	0x41f00000

08020d24 <__udivmoddi4>:
 8020d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d28:	9d08      	ldr	r5, [sp, #32]
 8020d2a:	4604      	mov	r4, r0
 8020d2c:	468c      	mov	ip, r1
 8020d2e:	2b00      	cmp	r3, #0
 8020d30:	f040 8083 	bne.w	8020e3a <__udivmoddi4+0x116>
 8020d34:	428a      	cmp	r2, r1
 8020d36:	4617      	mov	r7, r2
 8020d38:	d947      	bls.n	8020dca <__udivmoddi4+0xa6>
 8020d3a:	fab2 f282 	clz	r2, r2
 8020d3e:	b142      	cbz	r2, 8020d52 <__udivmoddi4+0x2e>
 8020d40:	f1c2 0020 	rsb	r0, r2, #32
 8020d44:	fa24 f000 	lsr.w	r0, r4, r0
 8020d48:	4091      	lsls	r1, r2
 8020d4a:	4097      	lsls	r7, r2
 8020d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8020d50:	4094      	lsls	r4, r2
 8020d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8020d56:	0c23      	lsrs	r3, r4, #16
 8020d58:	fbbc f6f8 	udiv	r6, ip, r8
 8020d5c:	fa1f fe87 	uxth.w	lr, r7
 8020d60:	fb08 c116 	mls	r1, r8, r6, ip
 8020d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020d68:	fb06 f10e 	mul.w	r1, r6, lr
 8020d6c:	4299      	cmp	r1, r3
 8020d6e:	d909      	bls.n	8020d84 <__udivmoddi4+0x60>
 8020d70:	18fb      	adds	r3, r7, r3
 8020d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8020d76:	f080 8119 	bcs.w	8020fac <__udivmoddi4+0x288>
 8020d7a:	4299      	cmp	r1, r3
 8020d7c:	f240 8116 	bls.w	8020fac <__udivmoddi4+0x288>
 8020d80:	3e02      	subs	r6, #2
 8020d82:	443b      	add	r3, r7
 8020d84:	1a5b      	subs	r3, r3, r1
 8020d86:	b2a4      	uxth	r4, r4
 8020d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8020d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8020d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8020d98:	45a6      	cmp	lr, r4
 8020d9a:	d909      	bls.n	8020db0 <__udivmoddi4+0x8c>
 8020d9c:	193c      	adds	r4, r7, r4
 8020d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8020da2:	f080 8105 	bcs.w	8020fb0 <__udivmoddi4+0x28c>
 8020da6:	45a6      	cmp	lr, r4
 8020da8:	f240 8102 	bls.w	8020fb0 <__udivmoddi4+0x28c>
 8020dac:	3802      	subs	r0, #2
 8020dae:	443c      	add	r4, r7
 8020db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020db4:	eba4 040e 	sub.w	r4, r4, lr
 8020db8:	2600      	movs	r6, #0
 8020dba:	b11d      	cbz	r5, 8020dc4 <__udivmoddi4+0xa0>
 8020dbc:	40d4      	lsrs	r4, r2
 8020dbe:	2300      	movs	r3, #0
 8020dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8020dc4:	4631      	mov	r1, r6
 8020dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020dca:	b902      	cbnz	r2, 8020dce <__udivmoddi4+0xaa>
 8020dcc:	deff      	udf	#255	; 0xff
 8020dce:	fab2 f282 	clz	r2, r2
 8020dd2:	2a00      	cmp	r2, #0
 8020dd4:	d150      	bne.n	8020e78 <__udivmoddi4+0x154>
 8020dd6:	1bcb      	subs	r3, r1, r7
 8020dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020ddc:	fa1f f887 	uxth.w	r8, r7
 8020de0:	2601      	movs	r6, #1
 8020de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8020de6:	0c21      	lsrs	r1, r4, #16
 8020de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8020dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020df0:	fb08 f30c 	mul.w	r3, r8, ip
 8020df4:	428b      	cmp	r3, r1
 8020df6:	d907      	bls.n	8020e08 <__udivmoddi4+0xe4>
 8020df8:	1879      	adds	r1, r7, r1
 8020dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020dfe:	d202      	bcs.n	8020e06 <__udivmoddi4+0xe2>
 8020e00:	428b      	cmp	r3, r1
 8020e02:	f200 80e9 	bhi.w	8020fd8 <__udivmoddi4+0x2b4>
 8020e06:	4684      	mov	ip, r0
 8020e08:	1ac9      	subs	r1, r1, r3
 8020e0a:	b2a3      	uxth	r3, r4
 8020e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8020e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8020e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8020e18:	fb08 f800 	mul.w	r8, r8, r0
 8020e1c:	45a0      	cmp	r8, r4
 8020e1e:	d907      	bls.n	8020e30 <__udivmoddi4+0x10c>
 8020e20:	193c      	adds	r4, r7, r4
 8020e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8020e26:	d202      	bcs.n	8020e2e <__udivmoddi4+0x10a>
 8020e28:	45a0      	cmp	r8, r4
 8020e2a:	f200 80d9 	bhi.w	8020fe0 <__udivmoddi4+0x2bc>
 8020e2e:	4618      	mov	r0, r3
 8020e30:	eba4 0408 	sub.w	r4, r4, r8
 8020e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020e38:	e7bf      	b.n	8020dba <__udivmoddi4+0x96>
 8020e3a:	428b      	cmp	r3, r1
 8020e3c:	d909      	bls.n	8020e52 <__udivmoddi4+0x12e>
 8020e3e:	2d00      	cmp	r5, #0
 8020e40:	f000 80b1 	beq.w	8020fa6 <__udivmoddi4+0x282>
 8020e44:	2600      	movs	r6, #0
 8020e46:	e9c5 0100 	strd	r0, r1, [r5]
 8020e4a:	4630      	mov	r0, r6
 8020e4c:	4631      	mov	r1, r6
 8020e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e52:	fab3 f683 	clz	r6, r3
 8020e56:	2e00      	cmp	r6, #0
 8020e58:	d14a      	bne.n	8020ef0 <__udivmoddi4+0x1cc>
 8020e5a:	428b      	cmp	r3, r1
 8020e5c:	d302      	bcc.n	8020e64 <__udivmoddi4+0x140>
 8020e5e:	4282      	cmp	r2, r0
 8020e60:	f200 80b8 	bhi.w	8020fd4 <__udivmoddi4+0x2b0>
 8020e64:	1a84      	subs	r4, r0, r2
 8020e66:	eb61 0103 	sbc.w	r1, r1, r3
 8020e6a:	2001      	movs	r0, #1
 8020e6c:	468c      	mov	ip, r1
 8020e6e:	2d00      	cmp	r5, #0
 8020e70:	d0a8      	beq.n	8020dc4 <__udivmoddi4+0xa0>
 8020e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8020e76:	e7a5      	b.n	8020dc4 <__udivmoddi4+0xa0>
 8020e78:	f1c2 0320 	rsb	r3, r2, #32
 8020e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8020e80:	4097      	lsls	r7, r2
 8020e82:	fa01 f002 	lsl.w	r0, r1, r2
 8020e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020e8a:	40d9      	lsrs	r1, r3
 8020e8c:	4330      	orrs	r0, r6
 8020e8e:	0c03      	lsrs	r3, r0, #16
 8020e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8020e94:	fa1f f887 	uxth.w	r8, r7
 8020e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8020e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020ea0:	fb06 f108 	mul.w	r1, r6, r8
 8020ea4:	4299      	cmp	r1, r3
 8020ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8020eaa:	d909      	bls.n	8020ec0 <__udivmoddi4+0x19c>
 8020eac:	18fb      	adds	r3, r7, r3
 8020eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8020eb2:	f080 808d 	bcs.w	8020fd0 <__udivmoddi4+0x2ac>
 8020eb6:	4299      	cmp	r1, r3
 8020eb8:	f240 808a 	bls.w	8020fd0 <__udivmoddi4+0x2ac>
 8020ebc:	3e02      	subs	r6, #2
 8020ebe:	443b      	add	r3, r7
 8020ec0:	1a5b      	subs	r3, r3, r1
 8020ec2:	b281      	uxth	r1, r0
 8020ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8020ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8020ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020ed0:	fb00 f308 	mul.w	r3, r0, r8
 8020ed4:	428b      	cmp	r3, r1
 8020ed6:	d907      	bls.n	8020ee8 <__udivmoddi4+0x1c4>
 8020ed8:	1879      	adds	r1, r7, r1
 8020eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8020ede:	d273      	bcs.n	8020fc8 <__udivmoddi4+0x2a4>
 8020ee0:	428b      	cmp	r3, r1
 8020ee2:	d971      	bls.n	8020fc8 <__udivmoddi4+0x2a4>
 8020ee4:	3802      	subs	r0, #2
 8020ee6:	4439      	add	r1, r7
 8020ee8:	1acb      	subs	r3, r1, r3
 8020eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8020eee:	e778      	b.n	8020de2 <__udivmoddi4+0xbe>
 8020ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8020ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8020ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8020efc:	431c      	orrs	r4, r3
 8020efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8020f02:	fa01 f306 	lsl.w	r3, r1, r6
 8020f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8020f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8020f0e:	431f      	orrs	r7, r3
 8020f10:	0c3b      	lsrs	r3, r7, #16
 8020f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8020f16:	fa1f f884 	uxth.w	r8, r4
 8020f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8020f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8020f22:	fb09 fa08 	mul.w	sl, r9, r8
 8020f26:	458a      	cmp	sl, r1
 8020f28:	fa02 f206 	lsl.w	r2, r2, r6
 8020f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8020f30:	d908      	bls.n	8020f44 <__udivmoddi4+0x220>
 8020f32:	1861      	adds	r1, r4, r1
 8020f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8020f38:	d248      	bcs.n	8020fcc <__udivmoddi4+0x2a8>
 8020f3a:	458a      	cmp	sl, r1
 8020f3c:	d946      	bls.n	8020fcc <__udivmoddi4+0x2a8>
 8020f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8020f42:	4421      	add	r1, r4
 8020f44:	eba1 010a 	sub.w	r1, r1, sl
 8020f48:	b2bf      	uxth	r7, r7
 8020f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8020f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8020f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8020f56:	fb00 f808 	mul.w	r8, r0, r8
 8020f5a:	45b8      	cmp	r8, r7
 8020f5c:	d907      	bls.n	8020f6e <__udivmoddi4+0x24a>
 8020f5e:	19e7      	adds	r7, r4, r7
 8020f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8020f64:	d22e      	bcs.n	8020fc4 <__udivmoddi4+0x2a0>
 8020f66:	45b8      	cmp	r8, r7
 8020f68:	d92c      	bls.n	8020fc4 <__udivmoddi4+0x2a0>
 8020f6a:	3802      	subs	r0, #2
 8020f6c:	4427      	add	r7, r4
 8020f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020f72:	eba7 0708 	sub.w	r7, r7, r8
 8020f76:	fba0 8902 	umull	r8, r9, r0, r2
 8020f7a:	454f      	cmp	r7, r9
 8020f7c:	46c6      	mov	lr, r8
 8020f7e:	4649      	mov	r1, r9
 8020f80:	d31a      	bcc.n	8020fb8 <__udivmoddi4+0x294>
 8020f82:	d017      	beq.n	8020fb4 <__udivmoddi4+0x290>
 8020f84:	b15d      	cbz	r5, 8020f9e <__udivmoddi4+0x27a>
 8020f86:	ebb3 020e 	subs.w	r2, r3, lr
 8020f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8020f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8020f92:	40f2      	lsrs	r2, r6
 8020f94:	ea4c 0202 	orr.w	r2, ip, r2
 8020f98:	40f7      	lsrs	r7, r6
 8020f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8020f9e:	2600      	movs	r6, #0
 8020fa0:	4631      	mov	r1, r6
 8020fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020fa6:	462e      	mov	r6, r5
 8020fa8:	4628      	mov	r0, r5
 8020faa:	e70b      	b.n	8020dc4 <__udivmoddi4+0xa0>
 8020fac:	4606      	mov	r6, r0
 8020fae:	e6e9      	b.n	8020d84 <__udivmoddi4+0x60>
 8020fb0:	4618      	mov	r0, r3
 8020fb2:	e6fd      	b.n	8020db0 <__udivmoddi4+0x8c>
 8020fb4:	4543      	cmp	r3, r8
 8020fb6:	d2e5      	bcs.n	8020f84 <__udivmoddi4+0x260>
 8020fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8020fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8020fc0:	3801      	subs	r0, #1
 8020fc2:	e7df      	b.n	8020f84 <__udivmoddi4+0x260>
 8020fc4:	4608      	mov	r0, r1
 8020fc6:	e7d2      	b.n	8020f6e <__udivmoddi4+0x24a>
 8020fc8:	4660      	mov	r0, ip
 8020fca:	e78d      	b.n	8020ee8 <__udivmoddi4+0x1c4>
 8020fcc:	4681      	mov	r9, r0
 8020fce:	e7b9      	b.n	8020f44 <__udivmoddi4+0x220>
 8020fd0:	4666      	mov	r6, ip
 8020fd2:	e775      	b.n	8020ec0 <__udivmoddi4+0x19c>
 8020fd4:	4630      	mov	r0, r6
 8020fd6:	e74a      	b.n	8020e6e <__udivmoddi4+0x14a>
 8020fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8020fdc:	4439      	add	r1, r7
 8020fde:	e713      	b.n	8020e08 <__udivmoddi4+0xe4>
 8020fe0:	3802      	subs	r0, #2
 8020fe2:	443c      	add	r4, r7
 8020fe4:	e724      	b.n	8020e30 <__udivmoddi4+0x10c>
 8020fe6:	bf00      	nop

08020fe8 <__aeabi_idiv0>:
 8020fe8:	4770      	bx	lr
 8020fea:	bf00      	nop

08020fec <crc32>:
#include "CRC32.h"

uint32_t crc32( const uint8_t *buf, uint32_t len) {
 8020fec:	b480      	push	{r7}
 8020fee:	b087      	sub	sp, #28
 8020ff0:	af00      	add	r7, sp, #0
 8020ff2:	6078      	str	r0, [r7, #4]
 8020ff4:	6039      	str	r1, [r7, #0]
    const uint8_t *p;
    int nr;
    uint32_t crc;

    crc = 0;
 8020ff6:	2300      	movs	r3, #0
 8020ff8:	60fb      	str	r3, [r7, #12]
    for (nr = len, p = buf; nr--; ++p) {
 8020ffa:	683b      	ldr	r3, [r7, #0]
 8020ffc:	613b      	str	r3, [r7, #16]
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	617b      	str	r3, [r7, #20]
 8021002:	e00e      	b.n	8021022 <crc32+0x36>
        COMPUTE(crc, *p);
 8021004:	68fb      	ldr	r3, [r7, #12]
 8021006:	021a      	lsls	r2, r3, #8
 8021008:	68fb      	ldr	r3, [r7, #12]
 802100a:	0e1b      	lsrs	r3, r3, #24
 802100c:	6979      	ldr	r1, [r7, #20]
 802100e:	7809      	ldrb	r1, [r1, #0]
 8021010:	404b      	eors	r3, r1
 8021012:	4916      	ldr	r1, [pc, #88]	; (802106c <crc32+0x80>)
 8021014:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021018:	4053      	eors	r3, r2
 802101a:	60fb      	str	r3, [r7, #12]
    for (nr = len, p = buf; nr--; ++p) {
 802101c:	697b      	ldr	r3, [r7, #20]
 802101e:	3301      	adds	r3, #1
 8021020:	617b      	str	r3, [r7, #20]
 8021022:	693b      	ldr	r3, [r7, #16]
 8021024:	1e5a      	subs	r2, r3, #1
 8021026:	613a      	str	r2, [r7, #16]
 8021028:	2b00      	cmp	r3, #0
 802102a:	d1eb      	bne.n	8021004 <crc32+0x18>
    }

    for (; len != 0; len >>= 8) {
 802102c:	e00e      	b.n	802104c <crc32+0x60>
        COMPUTE(crc, len & 0xff);
 802102e:	68fb      	ldr	r3, [r7, #12]
 8021030:	021a      	lsls	r2, r3, #8
 8021032:	68fb      	ldr	r3, [r7, #12]
 8021034:	0e19      	lsrs	r1, r3, #24
 8021036:	683b      	ldr	r3, [r7, #0]
 8021038:	b2db      	uxtb	r3, r3
 802103a:	404b      	eors	r3, r1
 802103c:	490b      	ldr	r1, [pc, #44]	; (802106c <crc32+0x80>)
 802103e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021042:	4053      	eors	r3, r2
 8021044:	60fb      	str	r3, [r7, #12]
    for (; len != 0; len >>= 8) {
 8021046:	683b      	ldr	r3, [r7, #0]
 8021048:	0a1b      	lsrs	r3, r3, #8
 802104a:	603b      	str	r3, [r7, #0]
 802104c:	683b      	ldr	r3, [r7, #0]
 802104e:	2b00      	cmp	r3, #0
 8021050:	d1ed      	bne.n	802102e <crc32+0x42>
    }
    buf-=len;
 8021052:	683b      	ldr	r3, [r7, #0]
 8021054:	425b      	negs	r3, r3
 8021056:	687a      	ldr	r2, [r7, #4]
 8021058:	4413      	add	r3, r2
 802105a:	607b      	str	r3, [r7, #4]
    return(~crc);
 802105c:	68fb      	ldr	r3, [r7, #12]
 802105e:	43db      	mvns	r3, r3
 8021060:	4618      	mov	r0, r3
 8021062:	371c      	adds	r7, #28
 8021064:	46bd      	mov	sp, r7
 8021066:	f85d 7b04 	ldr.w	r7, [sp], #4
 802106a:	4770      	bx	lr
 802106c:	0803f43c 	.word	0x0803f43c

08021070 <Chacha20_Xor>:
FUNC(void, CHACHA20_PUBLIC_FUNCTION) Chacha20_Xor(uint8 keyStream[],
						  uint32 cell[],
						  uint8 textInput[],
						  uint16 size,
						  uint8 textOutput[])
{
 8021070:	b580      	push	{r7, lr}
 8021072:	b086      	sub	sp, #24
 8021074:	af02      	add	r7, sp, #8
 8021076:	60f8      	str	r0, [r7, #12]
 8021078:	60b9      	str	r1, [r7, #8]
 802107a:	607a      	str	r2, [r7, #4]
 802107c:	603b      	str	r3, [r7, #0]
	// C: call setCell
	ChaCha20_SetCell(cell, Gb_sulConstant, Gb_sculChachaKey, \
 802107e:	4b0a      	ldr	r3, [pc, #40]	; (80210a8 <Chacha20_Xor+0x38>)
 8021080:	9300      	str	r3, [sp, #0]
 8021082:	4b0a      	ldr	r3, [pc, #40]	; (80210ac <Chacha20_Xor+0x3c>)
 8021084:	4a0a      	ldr	r2, [pc, #40]	; (80210b0 <Chacha20_Xor+0x40>)
 8021086:	490b      	ldr	r1, [pc, #44]	; (80210b4 <Chacha20_Xor+0x44>)
 8021088:	68b8      	ldr	r0, [r7, #8]
 802108a:	f000 f815 	bl	80210b8 <ChaCha20_SetCell>
	                 Gb_sulBlockNumber, Gb_sulNonce);

	ChaCha20_FinalXor((uint8*)keyStream, (uint8*)cell, \
 802108e:	69bb      	ldr	r3, [r7, #24]
 8021090:	9300      	str	r3, [sp, #0]
 8021092:	683b      	ldr	r3, [r7, #0]
 8021094:	687a      	ldr	r2, [r7, #4]
 8021096:	68b9      	ldr	r1, [r7, #8]
 8021098:	68f8      	ldr	r0, [r7, #12]
 802109a:	f000 fa97 	bl	80215cc <ChaCha20_FinalXor>
	                  (uint8*)textInput, size, (uint8*)textOutput);
} /* END ChaCha20_Xor */
 802109e:	bf00      	nop
 80210a0:	3710      	adds	r7, #16
 80210a2:	46bd      	mov	sp, r7
 80210a4:	bd80      	pop	{r7, pc}
 80210a6:	bf00      	nop
 80210a8:	20000018 	.word	0x20000018
 80210ac:	20000010 	.word	0x20000010
 80210b0:	0803f83c 	.word	0x0803f83c
 80210b4:	20000000 	.word	0x20000000

080210b8 <ChaCha20_SetCell>:
FUNC(void, CHACHA20_PRIVATE_FUNCTION) ChaCha20_SetCell(uint32 cell[],
						       uint32 constant[],
						       const uint32 key[],
						       uint32 blockNumber[],
						       uint32 nonce[])
{
 80210b8:	b480      	push	{r7}
 80210ba:	b087      	sub	sp, #28
 80210bc:	af00      	add	r7, sp, #0
 80210be:	60f8      	str	r0, [r7, #12]
 80210c0:	60b9      	str	r1, [r7, #8]
 80210c2:	607a      	str	r2, [r7, #4]
 80210c4:	603b      	str	r3, [r7, #0]

	// L: setConstant, i = 0 -> 3
	for (uint8 i = 0; i < 4; i++)
 80210c6:	2300      	movs	r3, #0
 80210c8:	75fb      	strb	r3, [r7, #23]
 80210ca:	e00c      	b.n	80210e6 <ChaCha20_SetCell+0x2e>
		// C: Assign cell[i] = constant[i]
		cell[i] = constant[i];
 80210cc:	7dfb      	ldrb	r3, [r7, #23]
 80210ce:	009b      	lsls	r3, r3, #2
 80210d0:	68ba      	ldr	r2, [r7, #8]
 80210d2:	441a      	add	r2, r3
 80210d4:	7dfb      	ldrb	r3, [r7, #23]
 80210d6:	009b      	lsls	r3, r3, #2
 80210d8:	68f9      	ldr	r1, [r7, #12]
 80210da:	440b      	add	r3, r1
 80210dc:	6812      	ldr	r2, [r2, #0]
 80210de:	601a      	str	r2, [r3, #0]
	for (uint8 i = 0; i < 4; i++)
 80210e0:	7dfb      	ldrb	r3, [r7, #23]
 80210e2:	3301      	adds	r3, #1
 80210e4:	75fb      	strb	r3, [r7, #23]
 80210e6:	7dfb      	ldrb	r3, [r7, #23]
 80210e8:	2b03      	cmp	r3, #3
 80210ea:	d9ef      	bls.n	80210cc <ChaCha20_SetCell+0x14>

	// L: setkey, i = 4 -> 11
	for (uint8 i = 4; i < 12; i++)
 80210ec:	2304      	movs	r3, #4
 80210ee:	75bb      	strb	r3, [r7, #22]
 80210f0:	e00f      	b.n	8021112 <ChaCha20_SetCell+0x5a>

		// C: Assign cell[i] = key[i - 4]
		cell[i] = key[i - 4];
 80210f2:	7dbb      	ldrb	r3, [r7, #22]
 80210f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80210f8:	3b04      	subs	r3, #4
 80210fa:	009b      	lsls	r3, r3, #2
 80210fc:	687a      	ldr	r2, [r7, #4]
 80210fe:	441a      	add	r2, r3
 8021100:	7dbb      	ldrb	r3, [r7, #22]
 8021102:	009b      	lsls	r3, r3, #2
 8021104:	68f9      	ldr	r1, [r7, #12]
 8021106:	440b      	add	r3, r1
 8021108:	6812      	ldr	r2, [r2, #0]
 802110a:	601a      	str	r2, [r3, #0]
	for (uint8 i = 4; i < 12; i++)
 802110c:	7dbb      	ldrb	r3, [r7, #22]
 802110e:	3301      	adds	r3, #1
 8021110:	75bb      	strb	r3, [r7, #22]
 8021112:	7dbb      	ldrb	r3, [r7, #22]
 8021114:	2b0b      	cmp	r3, #11
 8021116:	d9ec      	bls.n	80210f2 <ChaCha20_SetCell+0x3a>

	// L: setBlockNumber, i = 12 -> 13
	for (uint8 i = 12; i < 14; i++)
 8021118:	230c      	movs	r3, #12
 802111a:	757b      	strb	r3, [r7, #21]
 802111c:	e00f      	b.n	802113e <ChaCha20_SetCell+0x86>

		// C: Assign cell[i] = blockNumber[i - 12]
		cell[i] = blockNumber[i - 12];
 802111e:	7d7b      	ldrb	r3, [r7, #21]
 8021120:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021124:	3b0c      	subs	r3, #12
 8021126:	009b      	lsls	r3, r3, #2
 8021128:	683a      	ldr	r2, [r7, #0]
 802112a:	441a      	add	r2, r3
 802112c:	7d7b      	ldrb	r3, [r7, #21]
 802112e:	009b      	lsls	r3, r3, #2
 8021130:	68f9      	ldr	r1, [r7, #12]
 8021132:	440b      	add	r3, r1
 8021134:	6812      	ldr	r2, [r2, #0]
 8021136:	601a      	str	r2, [r3, #0]
	for (uint8 i = 12; i < 14; i++)
 8021138:	7d7b      	ldrb	r3, [r7, #21]
 802113a:	3301      	adds	r3, #1
 802113c:	757b      	strb	r3, [r7, #21]
 802113e:	7d7b      	ldrb	r3, [r7, #21]
 8021140:	2b0d      	cmp	r3, #13
 8021142:	d9ec      	bls.n	802111e <ChaCha20_SetCell+0x66>

	// L: setBlockNumber, i = 14 -> 15
	for (uint8 i = 14; i < 16; i++)
 8021144:	230e      	movs	r3, #14
 8021146:	753b      	strb	r3, [r7, #20]
 8021148:	e00f      	b.n	802116a <ChaCha20_SetCell+0xb2>

		// C: Assign cell[i] = nonce[i - 12]
		cell[i] = nonce[i - 14];
 802114a:	7d3b      	ldrb	r3, [r7, #20]
 802114c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021150:	3b0e      	subs	r3, #14
 8021152:	009b      	lsls	r3, r3, #2
 8021154:	6a3a      	ldr	r2, [r7, #32]
 8021156:	441a      	add	r2, r3
 8021158:	7d3b      	ldrb	r3, [r7, #20]
 802115a:	009b      	lsls	r3, r3, #2
 802115c:	68f9      	ldr	r1, [r7, #12]
 802115e:	440b      	add	r3, r1
 8021160:	6812      	ldr	r2, [r2, #0]
 8021162:	601a      	str	r2, [r3, #0]
	for (uint8 i = 14; i < 16; i++)
 8021164:	7d3b      	ldrb	r3, [r7, #20]
 8021166:	3301      	adds	r3, #1
 8021168:	753b      	strb	r3, [r7, #20]
 802116a:	7d3b      	ldrb	r3, [r7, #20]
 802116c:	2b0f      	cmp	r3, #15
 802116e:	d9ec      	bls.n	802114a <ChaCha20_SetCell+0x92>
}/* END ChaCha20_SetCell */
 8021170:	bf00      	nop
 8021172:	bf00      	nop
 8021174:	371c      	adds	r7, #28
 8021176:	46bd      	mov	sp, r7
 8021178:	f85d 7b04 	ldr.w	r7, [sp], #4
 802117c:	4770      	bx	lr

0802117e <ChaCha20_Round>:
**
** Functions Invoked     : None
***********************************************************************************/
FUNC(void, CHACHA20_PRIVATE_FUNCTION) ChaCha20_Round(uint8 keyStream[],
						     uint32 cell[])
{
 802117e:	b480      	push	{r7}
 8021180:	b095      	sub	sp, #84	; 0x54
 8021182:	af00      	add	r7, sp, #0
 8021184:	6078      	str	r0, [r7, #4]
 8021186:	6039      	str	r1, [r7, #0]
	// C-DE: x-array for storing 16 cells KSG input
	uint32 x[16];

	//L: for storing 16 cells KSG input
	for (uint8 i = 0; i < 16; i++)
 8021188:	2300      	movs	r3, #0
 802118a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 802118e:	e012      	b.n	80211b6 <ChaCha20_Round+0x38>
		x[i] = cell[i];
 8021190:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8021194:	009b      	lsls	r3, r3, #2
 8021196:	683a      	ldr	r2, [r7, #0]
 8021198:	441a      	add	r2, r3
 802119a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 802119e:	6812      	ldr	r2, [r2, #0]
 80211a0:	009b      	lsls	r3, r3, #2
 80211a2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80211a6:	440b      	add	r3, r1
 80211a8:	f843 2c44 	str.w	r2, [r3, #-68]
	for (uint8 i = 0; i < 16; i++)
 80211ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80211b0:	3301      	adds	r3, #1
 80211b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80211b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80211ba:	2b0f      	cmp	r3, #15
 80211bc:	d9e8      	bls.n	8021190 <ChaCha20_Round+0x12>

	//Loop for mixing in Round function-------------
	for (uint8 i = 0; i < ROUNDS; i += 2)
 80211be:	2300      	movs	r3, #0
 80211c0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80211c4:	e184      	b.n	80214d0 <ChaCha20_Round+0x352>
	{
		//Odd rounds------------------------------
		QR(x[0], x[4], x[8], x[12]);
 80211c6:	68fa      	ldr	r2, [r7, #12]
 80211c8:	69fb      	ldr	r3, [r7, #28]
 80211ca:	4413      	add	r3, r2
 80211cc:	60fb      	str	r3, [r7, #12]
 80211ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80211d0:	68fb      	ldr	r3, [r7, #12]
 80211d2:	4053      	eors	r3, r2
 80211d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80211d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80211d8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80211dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80211de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80211e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80211e2:	4413      	add	r3, r2
 80211e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80211e6:	69fa      	ldr	r2, [r7, #28]
 80211e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211ea:	4053      	eors	r3, r2
 80211ec:	61fb      	str	r3, [r7, #28]
 80211ee:	69fb      	ldr	r3, [r7, #28]
 80211f0:	ea4f 5333 	mov.w	r3, r3, ror #20
 80211f4:	61fb      	str	r3, [r7, #28]
 80211f6:	68fa      	ldr	r2, [r7, #12]
 80211f8:	69fb      	ldr	r3, [r7, #28]
 80211fa:	4413      	add	r3, r2
 80211fc:	60fb      	str	r3, [r7, #12]
 80211fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021200:	68fb      	ldr	r3, [r7, #12]
 8021202:	4053      	eors	r3, r2
 8021204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021208:	ea4f 6333 	mov.w	r3, r3, ror #24
 802120c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802120e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021212:	4413      	add	r3, r2
 8021214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021216:	69fa      	ldr	r2, [r7, #28]
 8021218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802121a:	4053      	eors	r3, r2
 802121c:	61fb      	str	r3, [r7, #28]
 802121e:	69fb      	ldr	r3, [r7, #28]
 8021220:	ea4f 6373 	mov.w	r3, r3, ror #25
 8021224:	61fb      	str	r3, [r7, #28]
		QR(x[1], x[5], x[9], x[13]);
 8021226:	693a      	ldr	r2, [r7, #16]
 8021228:	6a3b      	ldr	r3, [r7, #32]
 802122a:	4413      	add	r3, r2
 802122c:	613b      	str	r3, [r7, #16]
 802122e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021230:	693b      	ldr	r3, [r7, #16]
 8021232:	4053      	eors	r3, r2
 8021234:	643b      	str	r3, [r7, #64]	; 0x40
 8021236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021238:	ea4f 4333 	mov.w	r3, r3, ror #16
 802123c:	643b      	str	r3, [r7, #64]	; 0x40
 802123e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021242:	4413      	add	r3, r2
 8021244:	633b      	str	r3, [r7, #48]	; 0x30
 8021246:	6a3a      	ldr	r2, [r7, #32]
 8021248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802124a:	4053      	eors	r3, r2
 802124c:	623b      	str	r3, [r7, #32]
 802124e:	6a3b      	ldr	r3, [r7, #32]
 8021250:	ea4f 5333 	mov.w	r3, r3, ror #20
 8021254:	623b      	str	r3, [r7, #32]
 8021256:	693a      	ldr	r2, [r7, #16]
 8021258:	6a3b      	ldr	r3, [r7, #32]
 802125a:	4413      	add	r3, r2
 802125c:	613b      	str	r3, [r7, #16]
 802125e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021260:	693b      	ldr	r3, [r7, #16]
 8021262:	4053      	eors	r3, r2
 8021264:	643b      	str	r3, [r7, #64]	; 0x40
 8021266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021268:	ea4f 6333 	mov.w	r3, r3, ror #24
 802126c:	643b      	str	r3, [r7, #64]	; 0x40
 802126e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021272:	4413      	add	r3, r2
 8021274:	633b      	str	r3, [r7, #48]	; 0x30
 8021276:	6a3a      	ldr	r2, [r7, #32]
 8021278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802127a:	4053      	eors	r3, r2
 802127c:	623b      	str	r3, [r7, #32]
 802127e:	6a3b      	ldr	r3, [r7, #32]
 8021280:	ea4f 6373 	mov.w	r3, r3, ror #25
 8021284:	623b      	str	r3, [r7, #32]
		QR(x[2], x[6], x[10], x[14]);
 8021286:	697a      	ldr	r2, [r7, #20]
 8021288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802128a:	4413      	add	r3, r2
 802128c:	617b      	str	r3, [r7, #20]
 802128e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021290:	697b      	ldr	r3, [r7, #20]
 8021292:	4053      	eors	r3, r2
 8021294:	647b      	str	r3, [r7, #68]	; 0x44
 8021296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021298:	ea4f 4333 	mov.w	r3, r3, ror #16
 802129c:	647b      	str	r3, [r7, #68]	; 0x44
 802129e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80212a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80212a2:	4413      	add	r3, r2
 80212a4:	637b      	str	r3, [r7, #52]	; 0x34
 80212a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80212a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80212aa:	4053      	eors	r3, r2
 80212ac:	627b      	str	r3, [r7, #36]	; 0x24
 80212ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212b0:	ea4f 5333 	mov.w	r3, r3, ror #20
 80212b4:	627b      	str	r3, [r7, #36]	; 0x24
 80212b6:	697a      	ldr	r2, [r7, #20]
 80212b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212ba:	4413      	add	r3, r2
 80212bc:	617b      	str	r3, [r7, #20]
 80212be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80212c0:	697b      	ldr	r3, [r7, #20]
 80212c2:	4053      	eors	r3, r2
 80212c4:	647b      	str	r3, [r7, #68]	; 0x44
 80212c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80212c8:	ea4f 6333 	mov.w	r3, r3, ror #24
 80212cc:	647b      	str	r3, [r7, #68]	; 0x44
 80212ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80212d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80212d2:	4413      	add	r3, r2
 80212d4:	637b      	str	r3, [r7, #52]	; 0x34
 80212d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80212d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80212da:	4053      	eors	r3, r2
 80212dc:	627b      	str	r3, [r7, #36]	; 0x24
 80212de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212e0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80212e4:	627b      	str	r3, [r7, #36]	; 0x24
		QR(x[3], x[7], x[11], x[15]);
 80212e6:	69ba      	ldr	r2, [r7, #24]
 80212e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80212ea:	4413      	add	r3, r2
 80212ec:	61bb      	str	r3, [r7, #24]
 80212ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80212f0:	69bb      	ldr	r3, [r7, #24]
 80212f2:	4053      	eors	r3, r2
 80212f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80212f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80212f8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80212fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80212fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021302:	4413      	add	r3, r2
 8021304:	63bb      	str	r3, [r7, #56]	; 0x38
 8021306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802130a:	4053      	eors	r3, r2
 802130c:	62bb      	str	r3, [r7, #40]	; 0x28
 802130e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021310:	ea4f 5333 	mov.w	r3, r3, ror #20
 8021314:	62bb      	str	r3, [r7, #40]	; 0x28
 8021316:	69ba      	ldr	r2, [r7, #24]
 8021318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802131a:	4413      	add	r3, r2
 802131c:	61bb      	str	r3, [r7, #24]
 802131e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021320:	69bb      	ldr	r3, [r7, #24]
 8021322:	4053      	eors	r3, r2
 8021324:	64bb      	str	r3, [r7, #72]	; 0x48
 8021326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021328:	ea4f 6333 	mov.w	r3, r3, ror #24
 802132c:	64bb      	str	r3, [r7, #72]	; 0x48
 802132e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021332:	4413      	add	r3, r2
 8021334:	63bb      	str	r3, [r7, #56]	; 0x38
 8021336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802133a:	4053      	eors	r3, r2
 802133c:	62bb      	str	r3, [r7, #40]	; 0x28
 802133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021340:	ea4f 6373 	mov.w	r3, r3, ror #25
 8021344:	62bb      	str	r3, [r7, #40]	; 0x28
		//Even rounds-------------------------
		QR(x[0], x[5], x[10], x[15]);
 8021346:	68fa      	ldr	r2, [r7, #12]
 8021348:	6a3b      	ldr	r3, [r7, #32]
 802134a:	4413      	add	r3, r2
 802134c:	60fb      	str	r3, [r7, #12]
 802134e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021350:	68fb      	ldr	r3, [r7, #12]
 8021352:	4053      	eors	r3, r2
 8021354:	64bb      	str	r3, [r7, #72]	; 0x48
 8021356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021358:	ea4f 4333 	mov.w	r3, r3, ror #16
 802135c:	64bb      	str	r3, [r7, #72]	; 0x48
 802135e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021362:	4413      	add	r3, r2
 8021364:	637b      	str	r3, [r7, #52]	; 0x34
 8021366:	6a3a      	ldr	r2, [r7, #32]
 8021368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802136a:	4053      	eors	r3, r2
 802136c:	623b      	str	r3, [r7, #32]
 802136e:	6a3b      	ldr	r3, [r7, #32]
 8021370:	ea4f 5333 	mov.w	r3, r3, ror #20
 8021374:	623b      	str	r3, [r7, #32]
 8021376:	68fa      	ldr	r2, [r7, #12]
 8021378:	6a3b      	ldr	r3, [r7, #32]
 802137a:	4413      	add	r3, r2
 802137c:	60fb      	str	r3, [r7, #12]
 802137e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021380:	68fb      	ldr	r3, [r7, #12]
 8021382:	4053      	eors	r3, r2
 8021384:	64bb      	str	r3, [r7, #72]	; 0x48
 8021386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021388:	ea4f 6333 	mov.w	r3, r3, ror #24
 802138c:	64bb      	str	r3, [r7, #72]	; 0x48
 802138e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021392:	4413      	add	r3, r2
 8021394:	637b      	str	r3, [r7, #52]	; 0x34
 8021396:	6a3a      	ldr	r2, [r7, #32]
 8021398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802139a:	4053      	eors	r3, r2
 802139c:	623b      	str	r3, [r7, #32]
 802139e:	6a3b      	ldr	r3, [r7, #32]
 80213a0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80213a4:	623b      	str	r3, [r7, #32]
		QR(x[1], x[6], x[11], x[12]);
 80213a6:	693a      	ldr	r2, [r7, #16]
 80213a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213aa:	4413      	add	r3, r2
 80213ac:	613b      	str	r3, [r7, #16]
 80213ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80213b0:	693b      	ldr	r3, [r7, #16]
 80213b2:	4053      	eors	r3, r2
 80213b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80213b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213b8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80213bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80213be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80213c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213c2:	4413      	add	r3, r2
 80213c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80213c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80213c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80213ca:	4053      	eors	r3, r2
 80213cc:	627b      	str	r3, [r7, #36]	; 0x24
 80213ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213d0:	ea4f 5333 	mov.w	r3, r3, ror #20
 80213d4:	627b      	str	r3, [r7, #36]	; 0x24
 80213d6:	693a      	ldr	r2, [r7, #16]
 80213d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213da:	4413      	add	r3, r2
 80213dc:	613b      	str	r3, [r7, #16]
 80213de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80213e0:	693b      	ldr	r3, [r7, #16]
 80213e2:	4053      	eors	r3, r2
 80213e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80213e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213e8:	ea4f 6333 	mov.w	r3, r3, ror #24
 80213ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80213ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80213f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213f2:	4413      	add	r3, r2
 80213f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80213f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80213f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80213fa:	4053      	eors	r3, r2
 80213fc:	627b      	str	r3, [r7, #36]	; 0x24
 80213fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021400:	ea4f 6373 	mov.w	r3, r3, ror #25
 8021404:	627b      	str	r3, [r7, #36]	; 0x24
		QR(x[2], x[7], x[8], x[13]);
 8021406:	697a      	ldr	r2, [r7, #20]
 8021408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802140a:	4413      	add	r3, r2
 802140c:	617b      	str	r3, [r7, #20]
 802140e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021410:	697b      	ldr	r3, [r7, #20]
 8021412:	4053      	eors	r3, r2
 8021414:	643b      	str	r3, [r7, #64]	; 0x40
 8021416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021418:	ea4f 4333 	mov.w	r3, r3, ror #16
 802141c:	643b      	str	r3, [r7, #64]	; 0x40
 802141e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021422:	4413      	add	r3, r2
 8021424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802142a:	4053      	eors	r3, r2
 802142c:	62bb      	str	r3, [r7, #40]	; 0x28
 802142e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021430:	ea4f 5333 	mov.w	r3, r3, ror #20
 8021434:	62bb      	str	r3, [r7, #40]	; 0x28
 8021436:	697a      	ldr	r2, [r7, #20]
 8021438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802143a:	4413      	add	r3, r2
 802143c:	617b      	str	r3, [r7, #20]
 802143e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021440:	697b      	ldr	r3, [r7, #20]
 8021442:	4053      	eors	r3, r2
 8021444:	643b      	str	r3, [r7, #64]	; 0x40
 8021446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021448:	ea4f 6333 	mov.w	r3, r3, ror #24
 802144c:	643b      	str	r3, [r7, #64]	; 0x40
 802144e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021452:	4413      	add	r3, r2
 8021454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802145a:	4053      	eors	r3, r2
 802145c:	62bb      	str	r3, [r7, #40]	; 0x28
 802145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021460:	ea4f 6373 	mov.w	r3, r3, ror #25
 8021464:	62bb      	str	r3, [r7, #40]	; 0x28
		QR(x[3], x[4], x[9], x[14]);
 8021466:	69ba      	ldr	r2, [r7, #24]
 8021468:	69fb      	ldr	r3, [r7, #28]
 802146a:	4413      	add	r3, r2
 802146c:	61bb      	str	r3, [r7, #24]
 802146e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021470:	69bb      	ldr	r3, [r7, #24]
 8021472:	4053      	eors	r3, r2
 8021474:	647b      	str	r3, [r7, #68]	; 0x44
 8021476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021478:	ea4f 4333 	mov.w	r3, r3, ror #16
 802147c:	647b      	str	r3, [r7, #68]	; 0x44
 802147e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021482:	4413      	add	r3, r2
 8021484:	633b      	str	r3, [r7, #48]	; 0x30
 8021486:	69fa      	ldr	r2, [r7, #28]
 8021488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802148a:	4053      	eors	r3, r2
 802148c:	61fb      	str	r3, [r7, #28]
 802148e:	69fb      	ldr	r3, [r7, #28]
 8021490:	ea4f 5333 	mov.w	r3, r3, ror #20
 8021494:	61fb      	str	r3, [r7, #28]
 8021496:	69ba      	ldr	r2, [r7, #24]
 8021498:	69fb      	ldr	r3, [r7, #28]
 802149a:	4413      	add	r3, r2
 802149c:	61bb      	str	r3, [r7, #24]
 802149e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80214a0:	69bb      	ldr	r3, [r7, #24]
 80214a2:	4053      	eors	r3, r2
 80214a4:	647b      	str	r3, [r7, #68]	; 0x44
 80214a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80214a8:	ea4f 6333 	mov.w	r3, r3, ror #24
 80214ac:	647b      	str	r3, [r7, #68]	; 0x44
 80214ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80214b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80214b2:	4413      	add	r3, r2
 80214b4:	633b      	str	r3, [r7, #48]	; 0x30
 80214b6:	69fa      	ldr	r2, [r7, #28]
 80214b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214ba:	4053      	eors	r3, r2
 80214bc:	61fb      	str	r3, [r7, #28]
 80214be:	69fb      	ldr	r3, [r7, #28]
 80214c0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80214c4:	61fb      	str	r3, [r7, #28]
	for (uint8 i = 0; i < ROUNDS; i += 2)
 80214c6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80214ca:	3302      	adds	r3, #2
 80214cc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80214d0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80214d4:	2b13      	cmp	r3, #19
 80214d6:	f67f ae76 	bls.w	80211c6 <ChaCha20_Round+0x48>
	}

	//Loop for adding KSG table input with output table of Round function
	for (uint8 i = 0, b = 0; i < 16; i++)
 80214da:	2300      	movs	r3, #0
 80214dc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80214e0:	2300      	movs	r3, #0
 80214e2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80214e6:	e066      	b.n	80215b6 <ChaCha20_Round+0x438>
	{
		x[i] += cell[i];
 80214e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80214ec:	009b      	lsls	r3, r3, #2
 80214ee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80214f2:	4413      	add	r3, r2
 80214f4:	f853 1c44 	ldr.w	r1, [r3, #-68]
 80214f8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80214fc:	009b      	lsls	r3, r3, #2
 80214fe:	683a      	ldr	r2, [r7, #0]
 8021500:	4413      	add	r3, r2
 8021502:	681a      	ldr	r2, [r3, #0]
 8021504:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8021508:	440a      	add	r2, r1
 802150a:	009b      	lsls	r3, r3, #2
 802150c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8021510:	440b      	add	r3, r1
 8021512:	f843 2c44 	str.w	r2, [r3, #-68]

		// Store keystream
		keyStream[b++] = x[i] & 0xFF;
 8021516:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 802151a:	009b      	lsls	r3, r3, #2
 802151c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8021520:	4413      	add	r3, r2
 8021522:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8021526:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 802152a:	1c59      	adds	r1, r3, #1
 802152c:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 8021530:	4619      	mov	r1, r3
 8021532:	687b      	ldr	r3, [r7, #4]
 8021534:	440b      	add	r3, r1
 8021536:	b2d2      	uxtb	r2, r2
 8021538:	701a      	strb	r2, [r3, #0]
		keyStream[b++] = (x[i] >> 8) & 0xFF;
 802153a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 802153e:	009b      	lsls	r3, r3, #2
 8021540:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8021544:	4413      	add	r3, r2
 8021546:	f853 3c44 	ldr.w	r3, [r3, #-68]
 802154a:	0a1a      	lsrs	r2, r3, #8
 802154c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8021550:	1c59      	adds	r1, r3, #1
 8021552:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 8021556:	4619      	mov	r1, r3
 8021558:	687b      	ldr	r3, [r7, #4]
 802155a:	440b      	add	r3, r1
 802155c:	b2d2      	uxtb	r2, r2
 802155e:	701a      	strb	r2, [r3, #0]
		keyStream[b++] = (x[i] >> 16) & 0xFF;
 8021560:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8021564:	009b      	lsls	r3, r3, #2
 8021566:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802156a:	4413      	add	r3, r2
 802156c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8021570:	0c1a      	lsrs	r2, r3, #16
 8021572:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8021576:	1c59      	adds	r1, r3, #1
 8021578:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 802157c:	4619      	mov	r1, r3
 802157e:	687b      	ldr	r3, [r7, #4]
 8021580:	440b      	add	r3, r1
 8021582:	b2d2      	uxtb	r2, r2
 8021584:	701a      	strb	r2, [r3, #0]
		keyStream[b++] = (x[i] >> 24) & 0xFF;
 8021586:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 802158a:	009b      	lsls	r3, r3, #2
 802158c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8021590:	4413      	add	r3, r2
 8021592:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8021596:	0e1a      	lsrs	r2, r3, #24
 8021598:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 802159c:	1c59      	adds	r1, r3, #1
 802159e:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 80215a2:	4619      	mov	r1, r3
 80215a4:	687b      	ldr	r3, [r7, #4]
 80215a6:	440b      	add	r3, r1
 80215a8:	b2d2      	uxtb	r2, r2
 80215aa:	701a      	strb	r2, [r3, #0]
	for (uint8 i = 0, b = 0; i < 16; i++)
 80215ac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80215b0:	3301      	adds	r3, #1
 80215b2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80215b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80215ba:	2b0f      	cmp	r3, #15
 80215bc:	d994      	bls.n	80214e8 <ChaCha20_Round+0x36a>
	}
}/* END ChaCha20_Round */
 80215be:	bf00      	nop
 80215c0:	bf00      	nop
 80215c2:	3754      	adds	r7, #84	; 0x54
 80215c4:	46bd      	mov	sp, r7
 80215c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215ca:	4770      	bx	lr

080215cc <ChaCha20_FinalXor>:
FUNC(void, CHACHA20_PRIVATE_FUNCTION) ChaCha20_FinalXor(uint8 keyStream[],
							uint8 cell[],
							uint8 textInput[],
							uint16 size,
							uint8 textOutput[])
{
 80215cc:	b580      	push	{r7, lr}
 80215ce:	b088      	sub	sp, #32
 80215d0:	af00      	add	r7, sp, #0
 80215d2:	60f8      	str	r0, [r7, #12]
 80215d4:	60b9      	str	r1, [r7, #8]
 80215d6:	607a      	str	r2, [r7, #4]
 80215d8:	603b      	str	r3, [r7, #0]
	// C: roundFunction
	ChaCha20_Round(keyStream, (uint32*)cell);
 80215da:	68b9      	ldr	r1, [r7, #8]
 80215dc:	68f8      	ldr	r0, [r7, #12]
 80215de:	f7ff fdce 	bl	802117e <ChaCha20_Round>

	// L: textInput and textOutput
	uint16 j = 0;
 80215e2:	2300      	movs	r3, #0
 80215e4:	61fb      	str	r3, [r7, #28]
	uint16 round = size/64;
 80215e6:	683b      	ldr	r3, [r7, #0]
 80215e8:	099b      	lsrs	r3, r3, #6
 80215ea:	613b      	str	r3, [r7, #16]
		   round += (size%64!=0)?1:0;
 80215ec:	683b      	ldr	r3, [r7, #0]
 80215ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	d001      	beq.n	80215fa <ChaCha20_FinalXor+0x2e>
 80215f6:	2301      	movs	r3, #1
 80215f8:	e000      	b.n	80215fc <ChaCha20_FinalXor+0x30>
 80215fa:	2300      	movs	r3, #0
 80215fc:	693a      	ldr	r2, [r7, #16]
 80215fe:	4413      	add	r3, r2
 8021600:	613b      	str	r3, [r7, #16]
//	while (textInput[j])
//	{
	for(int16 r = 0; r < round; r++){
 8021602:	2300      	movs	r3, #0
 8021604:	61bb      	str	r3, [r7, #24]
 8021606:	e020      	b.n	802164a <ChaCha20_FinalXor+0x7e>
		// L: keyStream
		for (uint8 i = 0; i < 64&&j<size; i++)
 8021608:	2300      	movs	r3, #0
 802160a:	75fb      	strb	r3, [r7, #23]
 802160c:	e013      	b.n	8021636 <ChaCha20_FinalXor+0x6a>
		{
			// C: xor cell8 and textInput8
			textOutput[j] = (keyStream[i] ^ textInput[j]);
 802160e:	7dfb      	ldrb	r3, [r7, #23]
 8021610:	68fa      	ldr	r2, [r7, #12]
 8021612:	4413      	add	r3, r2
 8021614:	7819      	ldrb	r1, [r3, #0]
 8021616:	687a      	ldr	r2, [r7, #4]
 8021618:	69fb      	ldr	r3, [r7, #28]
 802161a:	4413      	add	r3, r2
 802161c:	781a      	ldrb	r2, [r3, #0]
 802161e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021620:	69fb      	ldr	r3, [r7, #28]
 8021622:	4403      	add	r3, r0
 8021624:	404a      	eors	r2, r1
 8021626:	b2d2      	uxtb	r2, r2
 8021628:	701a      	strb	r2, [r3, #0]
			j++;
 802162a:	69fb      	ldr	r3, [r7, #28]
 802162c:	3301      	adds	r3, #1
 802162e:	61fb      	str	r3, [r7, #28]
		for (uint8 i = 0; i < 64&&j<size; i++)
 8021630:	7dfb      	ldrb	r3, [r7, #23]
 8021632:	3301      	adds	r3, #1
 8021634:	75fb      	strb	r3, [r7, #23]
 8021636:	7dfb      	ldrb	r3, [r7, #23]
 8021638:	2b3f      	cmp	r3, #63	; 0x3f
 802163a:	d803      	bhi.n	8021644 <ChaCha20_FinalXor+0x78>
 802163c:	69fa      	ldr	r2, [r7, #28]
 802163e:	683b      	ldr	r3, [r7, #0]
 8021640:	429a      	cmp	r2, r3
 8021642:	d3e4      	bcc.n	802160e <ChaCha20_FinalXor+0x42>
	for(int16 r = 0; r < round; r++){
 8021644:	69bb      	ldr	r3, [r7, #24]
 8021646:	3301      	adds	r3, #1
 8021648:	61bb      	str	r3, [r7, #24]
 802164a:	69bb      	ldr	r3, [r7, #24]
 802164c:	693a      	ldr	r2, [r7, #16]
 802164e:	429a      	cmp	r2, r3
 8021650:	d8da      	bhi.n	8021608 <ChaCha20_FinalXor+0x3c>
		}
	}

//	}
}/* END ChaCha20_FinalXor */
 8021652:	bf00      	nop
 8021654:	bf00      	nop
 8021656:	3720      	adds	r7, #32
 8021658:	46bd      	mov	sp, r7
 802165a:	bd80      	pop	{r7, pc}

0802165c <sd_init>:
#include "Frame.h"

HAL_StatusTypeDef sd_init(){
 802165c:	b580      	push	{r7, lr}
 802165e:	af00      	add	r7, sp, #0
	if(BSP_SD_Init() == MSD_OK ) return HAL_OK;
 8021660:	f016 fc30 	bl	8037ec4 <BSP_SD_Init>
 8021664:	4603      	mov	r3, r0
 8021666:	2b00      	cmp	r3, #0
 8021668:	d101      	bne.n	802166e <sd_init+0x12>
 802166a:	2300      	movs	r3, #0
 802166c:	e000      	b.n	8021670 <sd_init+0x14>
	else return HAL_ERROR;
 802166e:	2301      	movs	r3, #1
}
 8021670:	4618      	mov	r0, r3
 8021672:	bd80      	pop	{r7, pc}

08021674 <sd_mount>:

FRESULT sd_mount(FATFS *fatfs){
 8021674:	b580      	push	{r7, lr}
 8021676:	b082      	sub	sp, #8
 8021678:	af00      	add	r7, sp, #0
 802167a:	6078      	str	r0, [r7, #4]
	return f_mount(fatfs, "", 1);
 802167c:	2201      	movs	r2, #1
 802167e:	4904      	ldr	r1, [pc, #16]	; (8021690 <sd_mount+0x1c>)
 8021680:	6878      	ldr	r0, [r7, #4]
 8021682:	f018 fac1 	bl	8039c08 <f_mount>
 8021686:	4603      	mov	r3, r0
}
 8021688:	4618      	mov	r0, r3
 802168a:	3708      	adds	r7, #8
 802168c:	46bd      	mov	sp, r7
 802168e:	bd80      	pop	{r7, pc}
 8021690:	0803f048 	.word	0x0803f048

08021694 <sd_open>:

FRESULT sd_open(FIL *myfile, const char *file_name, uint8_t mode){
 8021694:	b580      	push	{r7, lr}
 8021696:	b084      	sub	sp, #16
 8021698:	af00      	add	r7, sp, #0
 802169a:	60f8      	str	r0, [r7, #12]
 802169c:	60b9      	str	r1, [r7, #8]
 802169e:	4613      	mov	r3, r2
 80216a0:	71fb      	strb	r3, [r7, #7]
	return f_open(myfile, file_name, mode);
 80216a2:	79fb      	ldrb	r3, [r7, #7]
 80216a4:	461a      	mov	r2, r3
 80216a6:	68b9      	ldr	r1, [r7, #8]
 80216a8:	68f8      	ldr	r0, [r7, #12]
 80216aa:	f018 faf3 	bl	8039c94 <f_open>
 80216ae:	4603      	mov	r3, r0
}
 80216b0:	4618      	mov	r0, r3
 80216b2:	3710      	adds	r7, #16
 80216b4:	46bd      	mov	sp, r7
 80216b6:	bd80      	pop	{r7, pc}

080216b8 <sd_write>:

UINT sd_write(FIL *myfile, const uint8_t *write_buf, uint16_t size){
 80216b8:	b580      	push	{r7, lr}
 80216ba:	b086      	sub	sp, #24
 80216bc:	af00      	add	r7, sp, #0
 80216be:	60f8      	str	r0, [r7, #12]
 80216c0:	60b9      	str	r1, [r7, #8]
 80216c2:	4613      	mov	r3, r2
 80216c4:	80fb      	strh	r3, [r7, #6]
		UINT bw;
		f_write (myfile, write_buf, size, &bw);
 80216c6:	88fa      	ldrh	r2, [r7, #6]
 80216c8:	f107 0314 	add.w	r3, r7, #20
 80216cc:	68b9      	ldr	r1, [r7, #8]
 80216ce:	68f8      	ldr	r0, [r7, #12]
 80216d0:	f018 fddd 	bl	803a28e <f_write>
		return bw;
 80216d4:	697b      	ldr	r3, [r7, #20]
}
 80216d6:	4618      	mov	r0, r3
 80216d8:	3718      	adds	r7, #24
 80216da:	46bd      	mov	sp, r7
 80216dc:	bd80      	pop	{r7, pc}

080216de <sd_read>:

uint32_t sd_read(FIL *myfile, uint8_t *read_buf, uint32_t size){
 80216de:	b580      	push	{r7, lr}
 80216e0:	b086      	sub	sp, #24
 80216e2:	af00      	add	r7, sp, #0
 80216e4:	60f8      	str	r0, [r7, #12]
 80216e6:	60b9      	str	r1, [r7, #8]
 80216e8:	607a      	str	r2, [r7, #4]
	uint32_t br = 0;
 80216ea:	2300      	movs	r3, #0
 80216ec:	617b      	str	r3, [r7, #20]
	f_read(myfile, read_buf, size,(UINT*) &br);
 80216ee:	f107 0314 	add.w	r3, r7, #20
 80216f2:	687a      	ldr	r2, [r7, #4]
 80216f4:	68b9      	ldr	r1, [r7, #8]
 80216f6:	68f8      	ldr	r0, [r7, #12]
 80216f8:	f018 fc8a 	bl	803a010 <f_read>
	return br;
 80216fc:	697b      	ldr	r3, [r7, #20]
}
 80216fe:	4618      	mov	r0, r3
 8021700:	3718      	adds	r7, #24
 8021702:	46bd      	mov	sp, r7
 8021704:	bd80      	pop	{r7, pc}

08021706 <sd_close>:

void sd_close(FIL *myfile){
 8021706:	b580      	push	{r7, lr}
 8021708:	b082      	sub	sp, #8
 802170a:	af00      	add	r7, sp, #0
 802170c:	6078      	str	r0, [r7, #4]
	f_close(myfile);
 802170e:	6878      	ldr	r0, [r7, #4]
 8021710:	f018 ffb0 	bl	803a674 <f_close>
}
 8021714:	bf00      	nop
 8021716:	3708      	adds	r7, #8
 8021718:	46bd      	mov	sp, r7
 802171a:	bd80      	pop	{r7, pc}

0802171c <Frame_SendResponseFrame>:

void Frame_SendResponseFrame(defResponseType response){
 802171c:	b580      	push	{r7, lr}
 802171e:	b086      	sub	sp, #24
 8021720:	af00      	add	r7, sp, #0
 8021722:	4603      	mov	r3, r0
 8021724:	71fb      	strb	r3, [r7, #7]
	defResponsePacket res_fr = {
 8021726:	f107 0308 	add.w	r3, r7, #8
 802172a:	2200      	movs	r2, #0
 802172c:	601a      	str	r2, [r3, #0]
 802172e:	605a      	str	r2, [r3, #4]
 8021730:	609a      	str	r2, [r3, #8]
 8021732:	60da      	str	r2, [r3, #12]
 8021734:	2303      	movs	r3, #3
 8021736:	727b      	strb	r3, [r7, #9]
 8021738:	f44f 7380 	mov.w	r3, #256	; 0x100
 802173c:	817b      	strh	r3, [r7, #10]
 802173e:	79fb      	ldrb	r3, [r7, #7]
 8021740:	733b      	strb	r3, [r7, #12]
 8021742:	2301      	movs	r3, #1
 8021744:	753b      	strb	r3, [r7, #20]
			.DataLength = {0x00, 0x01,},
			.Command = response,
			.Eof = EOF_SIGNAL,
	};

	res_fr.Crc.DataUint32 = crc32(&response, 1);
 8021746:	1dfb      	adds	r3, r7, #7
 8021748:	2101      	movs	r1, #1
 802174a:	4618      	mov	r0, r3
 802174c:	f7ff fc4e 	bl	8020fec <crc32>
 8021750:	4603      	mov	r3, r0
 8021752:	613b      	str	r3, [r7, #16]

	HAL_UART_Transmit(&MY_UART, (uint8_t*)&res_fr.Sof, 1, 1000);
 8021754:	f107 0108 	add.w	r1, r7, #8
 8021758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802175c:	2201      	movs	r2, #1
 802175e:	481b      	ldr	r0, [pc, #108]	; (80217cc <Frame_SendResponseFrame+0xb0>)
 8021760:	f014 fe47 	bl	80363f2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&MY_UART, (uint8_t*)&res_fr.Type, 1, 1000);
 8021764:	f107 0308 	add.w	r3, r7, #8
 8021768:	1c59      	adds	r1, r3, #1
 802176a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802176e:	2201      	movs	r2, #1
 8021770:	4816      	ldr	r0, [pc, #88]	; (80217cc <Frame_SendResponseFrame+0xb0>)
 8021772:	f014 fe3e 	bl	80363f2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&MY_UART, (uint8_t*)res_fr.DataLength, 2, 1000);
 8021776:	f107 0308 	add.w	r3, r7, #8
 802177a:	1c99      	adds	r1, r3, #2
 802177c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8021780:	2202      	movs	r2, #2
 8021782:	4812      	ldr	r0, [pc, #72]	; (80217cc <Frame_SendResponseFrame+0xb0>)
 8021784:	f014 fe35 	bl	80363f2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&MY_UART, (uint8_t*)&res_fr.Command, 1, 1000);
 8021788:	f107 0308 	add.w	r3, r7, #8
 802178c:	1d19      	adds	r1, r3, #4
 802178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8021792:	2201      	movs	r2, #1
 8021794:	480d      	ldr	r0, [pc, #52]	; (80217cc <Frame_SendResponseFrame+0xb0>)
 8021796:	f014 fe2c 	bl	80363f2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&MY_UART, (uint8_t*)res_fr.Crc.DataArray, 4, 1000);
 802179a:	f107 0308 	add.w	r3, r7, #8
 802179e:	f103 0108 	add.w	r1, r3, #8
 80217a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80217a6:	2204      	movs	r2, #4
 80217a8:	4808      	ldr	r0, [pc, #32]	; (80217cc <Frame_SendResponseFrame+0xb0>)
 80217aa:	f014 fe22 	bl	80363f2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&MY_UART, (uint8_t*)&res_fr.Eof, 1, 1000);
 80217ae:	f107 0308 	add.w	r3, r7, #8
 80217b2:	f103 010c 	add.w	r1, r3, #12
 80217b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80217ba:	2201      	movs	r2, #1
 80217bc:	4803      	ldr	r0, [pc, #12]	; (80217cc <Frame_SendResponseFrame+0xb0>)
 80217be:	f014 fe18 	bl	80363f2 <HAL_UART_Transmit>
}
 80217c2:	bf00      	nop
 80217c4:	3718      	adds	r7, #24
 80217c6:	46bd      	mov	sp, r7
 80217c8:	bd80      	pop	{r7, pc}
 80217ca:	bf00      	nop
 80217cc:	20000620 	.word	0x20000620

080217d0 <Frame_ReadStartFrame>:


defReturnType Frame_ReadStartFrame(){
 80217d0:	b580      	push	{r7, lr}
 80217d2:	b084      	sub	sp, #16
 80217d4:	af00      	add	r7, sp, #0
	uint8_t buf[COMMAND_FRAME_LENGHT] = {0,};
 80217d6:	2300      	movs	r3, #0
 80217d8:	607b      	str	r3, [r7, #4]
 80217da:	f107 0308 	add.w	r3, r7, #8
 80217de:	2200      	movs	r2, #0
 80217e0:	601a      	str	r2, [r3, #0]
 80217e2:	809a      	strh	r2, [r3, #4]

	HAL_UART_Receive(&MY_UART, buf, COMMAND_FRAME_LENGHT, 3000);
 80217e4:	1d39      	adds	r1, r7, #4
 80217e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80217ea:	220a      	movs	r2, #10
 80217ec:	480c      	ldr	r0, [pc, #48]	; (8021820 <Frame_ReadStartFrame+0x50>)
 80217ee:	f014 fe92 	bl	8036516 <HAL_UART_Receive>

	if(!((buf[0] == SOF_SIGNAL)&&(buf[COMMAND_FRAME_LENGHT - 1]  == EOF_SIGNAL)))
 80217f2:	793b      	ldrb	r3, [r7, #4]
 80217f4:	2b00      	cmp	r3, #0
 80217f6:	d102      	bne.n	80217fe <Frame_ReadStartFrame+0x2e>
 80217f8:	7b7b      	ldrb	r3, [r7, #13]
 80217fa:	2b01      	cmp	r3, #1
 80217fc:	d001      	beq.n	8021802 <Frame_ReadStartFrame+0x32>
		return HANDLE_FAILED;
 80217fe:	2301      	movs	r3, #1
 8021800:	e00a      	b.n	8021818 <Frame_ReadStartFrame+0x48>

	if(buf[1] != COMMAND_TYPE) return HANDLE_FAILED;
 8021802:	797b      	ldrb	r3, [r7, #5]
 8021804:	2b00      	cmp	r3, #0
 8021806:	d001      	beq.n	802180c <Frame_ReadStartFrame+0x3c>
 8021808:	2301      	movs	r3, #1
 802180a:	e005      	b.n	8021818 <Frame_ReadStartFrame+0x48>

	if(buf[4] != START_COMMAND) return HANDLE_FAILED;
 802180c:	7a3b      	ldrb	r3, [r7, #8]
 802180e:	2b00      	cmp	r3, #0
 8021810:	d001      	beq.n	8021816 <Frame_ReadStartFrame+0x46>
 8021812:	2301      	movs	r3, #1
 8021814:	e000      	b.n	8021818 <Frame_ReadStartFrame+0x48>

	return HANDLE_OK;
 8021816:	2300      	movs	r3, #0
}
 8021818:	4618      	mov	r0, r3
 802181a:	3710      	adds	r7, #16
 802181c:	46bd      	mov	sp, r7
 802181e:	bd80      	pop	{r7, pc}
 8021820:	20000620 	.word	0x20000620

08021824 <Frame_ReadStopFrame>:


defReturnType Frame_ReadStopFrame(){
 8021824:	b580      	push	{r7, lr}
 8021826:	b084      	sub	sp, #16
 8021828:	af00      	add	r7, sp, #0
	uint8_t buf[COMMAND_FRAME_LENGHT] = {0,};
 802182a:	2300      	movs	r3, #0
 802182c:	607b      	str	r3, [r7, #4]
 802182e:	f107 0308 	add.w	r3, r7, #8
 8021832:	2200      	movs	r2, #0
 8021834:	601a      	str	r2, [r3, #0]
 8021836:	809a      	strh	r2, [r3, #4]

	HAL_UART_Receive(&MY_UART, buf, COMMAND_FRAME_LENGHT, 3000);
 8021838:	1d39      	adds	r1, r7, #4
 802183a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 802183e:	220a      	movs	r2, #10
 8021840:	4804      	ldr	r0, [pc, #16]	; (8021854 <Frame_ReadStopFrame+0x30>)
 8021842:	f014 fe68 	bl	8036516 <HAL_UART_Receive>

	if(!((buf[0] = SOF_SIGNAL)&&(buf[COMMAND_FRAME_LENGHT - 1]  = EOF_SIGNAL)))
 8021846:	2300      	movs	r3, #0
 8021848:	713b      	strb	r3, [r7, #4]
		return HANDLE_FAILED;
 802184a:	2301      	movs	r3, #1
	if(buf[1] != COMMAND_TYPE) return HANDLE_FAILED;

	if(buf[4] != STOP_COMMAND) return HANDLE_FAILED;

	return HANDLE_OK;
}
 802184c:	4618      	mov	r0, r3
 802184e:	3710      	adds	r7, #16
 8021850:	46bd      	mov	sp, r7
 8021852:	bd80      	pop	{r7, pc}
 8021854:	20000620 	.word	0x20000620

08021858 <Frame_ReadHeaderFrame>:


defReturnType Frame_ReadHeaderFrame(){
 8021858:	b580      	push	{r7, lr}
 802185a:	b086      	sub	sp, #24
 802185c:	af00      	add	r7, sp, #0
	uint8_t buf[HEADER_FRAME_LENGHT] = {0,};
 802185e:	2300      	movs	r3, #0
 8021860:	607b      	str	r3, [r7, #4]
 8021862:	f107 0308 	add.w	r3, r7, #8
 8021866:	2200      	movs	r2, #0
 8021868:	601a      	str	r2, [r3, #0]
 802186a:	605a      	str	r2, [r3, #4]
 802186c:	721a      	strb	r2, [r3, #8]
	uint32To4Bytes crc_merge;
	HAL_UART_Receive(&MY_UART, (uint8_t *) buf, HEADER_FRAME_LENGHT, 3000);
 802186e:	1d39      	adds	r1, r7, #4
 8021870:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8021874:	220d      	movs	r2, #13
 8021876:	4816      	ldr	r0, [pc, #88]	; (80218d0 <Frame_ReadHeaderFrame+0x78>)
 8021878:	f014 fe4d 	bl	8036516 <HAL_UART_Receive>

	if(!((buf[0] == SOF_SIGNAL)&&(buf[HEADER_FRAME_LENGHT - 1]  == EOF_SIGNAL)))
 802187c:	793b      	ldrb	r3, [r7, #4]
 802187e:	2b00      	cmp	r3, #0
 8021880:	d102      	bne.n	8021888 <Frame_ReadHeaderFrame+0x30>
 8021882:	7c3b      	ldrb	r3, [r7, #16]
 8021884:	2b01      	cmp	r3, #1
 8021886:	d001      	beq.n	802188c <Frame_ReadHeaderFrame+0x34>
		return HANDLE_FAILED;
 8021888:	2301      	movs	r3, #1
 802188a:	e01d      	b.n	80218c8 <Frame_ReadHeaderFrame+0x70>

	crc_merge.DataArray[0] = buf[11];
 802188c:	7bfb      	ldrb	r3, [r7, #15]
 802188e:	703b      	strb	r3, [r7, #0]
	crc_merge.DataArray[1] = buf[10];
 8021890:	7bbb      	ldrb	r3, [r7, #14]
 8021892:	707b      	strb	r3, [r7, #1]
	crc_merge.DataArray[2] = buf[9];
 8021894:	7b7b      	ldrb	r3, [r7, #13]
 8021896:	70bb      	strb	r3, [r7, #2]
	crc_merge.DataArray[3] = buf[8];
 8021898:	7b3b      	ldrb	r3, [r7, #12]
 802189a:	70fb      	strb	r3, [r7, #3]

	if(buf[1] != HEADER_TYPE) return HANDLE_FAILED;
 802189c:	797b      	ldrb	r3, [r7, #5]
 802189e:	2b01      	cmp	r3, #1
 80218a0:	d001      	beq.n	80218a6 <Frame_ReadHeaderFrame+0x4e>
 80218a2:	2301      	movs	r3, #1
 80218a4:	e010      	b.n	80218c8 <Frame_ReadHeaderFrame+0x70>

	uint32_t crc_header = crc32((uint8_t*)(&buf[0] + 4), 4);
 80218a6:	1d3b      	adds	r3, r7, #4
 80218a8:	3304      	adds	r3, #4
 80218aa:	2104      	movs	r1, #4
 80218ac:	4618      	mov	r0, r3
 80218ae:	f7ff fb9d 	bl	8020fec <crc32>
 80218b2:	6178      	str	r0, [r7, #20]

	if(crc_header != crc_merge.DataUint32) return HANDLE_FAILED;
 80218b4:	683b      	ldr	r3, [r7, #0]
 80218b6:	697a      	ldr	r2, [r7, #20]
 80218b8:	429a      	cmp	r2, r3
 80218ba:	d001      	beq.n	80218c0 <Frame_ReadHeaderFrame+0x68>
 80218bc:	2301      	movs	r3, #1
 80218be:	e003      	b.n	80218c8 <Frame_ReadHeaderFrame+0x70>
	Frame_NumberOfKbyteData = buf[6]*256 + buf[7];
 80218c0:	7afa      	ldrb	r2, [r7, #11]
 80218c2:	4b04      	ldr	r3, [pc, #16]	; (80218d4 <Frame_ReadHeaderFrame+0x7c>)
 80218c4:	701a      	strb	r2, [r3, #0]

	return HANDLE_OK;
 80218c6:	2300      	movs	r3, #0
}
 80218c8:	4618      	mov	r0, r3
 80218ca:	3718      	adds	r7, #24
 80218cc:	46bd      	mov	sp, r7
 80218ce:	bd80      	pop	{r7, pc}
 80218d0:	20000620 	.word	0x20000620
 80218d4:	2000029c 	.word	0x2000029c

080218d8 <Frame_ReadDataFrame>:


defReturnType Frame_ReadDataFrame(uint8_t* data){
 80218d8:	b580      	push	{r7, lr}
 80218da:	b086      	sub	sp, #24
 80218dc:	af00      	add	r7, sp, #0
 80218de:	6078      	str	r0, [r7, #4]
	uint32To4Bytes crc_merge;
	uint8_t buf[4];
//	while(MY_UART.RxXferCount == 0);
	HAL_UART_Receive(&MY_UART, buf, 4, 1000);
 80218e0:	f107 010c 	add.w	r1, r7, #12
 80218e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80218e8:	2204      	movs	r2, #4
 80218ea:	4839      	ldr	r0, [pc, #228]	; (80219d0 <Frame_ReadDataFrame+0xf8>)
 80218ec:	f014 fe13 	bl	8036516 <HAL_UART_Receive>
	Frame_DataLenghtPerFrame = buf[2]*256 + buf[3];
 80218f0:	7bbb      	ldrb	r3, [r7, #14]
 80218f2:	b29b      	uxth	r3, r3
 80218f4:	021b      	lsls	r3, r3, #8
 80218f6:	b29a      	uxth	r2, r3
 80218f8:	7bfb      	ldrb	r3, [r7, #15]
 80218fa:	b29b      	uxth	r3, r3
 80218fc:	4413      	add	r3, r2
 80218fe:	b29a      	uxth	r2, r3
 8021900:	4b34      	ldr	r3, [pc, #208]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 8021902:	801a      	strh	r2, [r3, #0]

	HAL_UART_Receive(&MY_UART, data, Frame_DataLenghtPerFrame + 5, 3000);
 8021904:	4b33      	ldr	r3, [pc, #204]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 8021906:	881b      	ldrh	r3, [r3, #0]
 8021908:	3305      	adds	r3, #5
 802190a:	b29a      	uxth	r2, r3
 802190c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8021910:	6879      	ldr	r1, [r7, #4]
 8021912:	482f      	ldr	r0, [pc, #188]	; (80219d0 <Frame_ReadDataFrame+0xf8>)
 8021914:	f014 fdff 	bl	8036516 <HAL_UART_Receive>

	if(!((buf[0] == SOF_SIGNAL)&&(data[Frame_DataLenghtPerFrame + 5 - 1] == EOF_SIGNAL))) {
 8021918:	7b3b      	ldrb	r3, [r7, #12]
 802191a:	2b00      	cmp	r3, #0
 802191c:	d107      	bne.n	802192e <Frame_ReadDataFrame+0x56>
 802191e:	4b2d      	ldr	r3, [pc, #180]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 8021920:	881b      	ldrh	r3, [r3, #0]
 8021922:	3304      	adds	r3, #4
 8021924:	687a      	ldr	r2, [r7, #4]
 8021926:	4413      	add	r3, r2
 8021928:	781b      	ldrb	r3, [r3, #0]
 802192a:	2b01      	cmp	r3, #1
 802192c:	d00a      	beq.n	8021944 <Frame_ReadDataFrame+0x6c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 802192e:	2201      	movs	r2, #1
 8021930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021934:	4828      	ldr	r0, [pc, #160]	; (80219d8 <Frame_ReadDataFrame+0x100>)
 8021936:	f012 f81f 	bl	8033978 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 802193a:	20c8      	movs	r0, #200	; 0xc8
 802193c:	f011 f9e0 	bl	8032d00 <HAL_Delay>
		return HANDLE_FAILED;
 8021940:	2301      	movs	r3, #1
 8021942:	e040      	b.n	80219c6 <Frame_ReadDataFrame+0xee>
	}

	if(buf[1] != DATA_TYPE){
 8021944:	7b7b      	ldrb	r3, [r7, #13]
 8021946:	2b02      	cmp	r3, #2
 8021948:	d00a      	beq.n	8021960 <Frame_ReadDataFrame+0x88>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 802194a:	2201      	movs	r2, #1
 802194c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021950:	4821      	ldr	r0, [pc, #132]	; (80219d8 <Frame_ReadDataFrame+0x100>)
 8021952:	f012 f811 	bl	8033978 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8021956:	20c8      	movs	r0, #200	; 0xc8
 8021958:	f011 f9d2 	bl	8032d00 <HAL_Delay>
		return HANDLE_FAILED;
 802195c:	2301      	movs	r3, #1
 802195e:	e032      	b.n	80219c6 <Frame_ReadDataFrame+0xee>
	}

	crc_merge.DataArray[0] = data[Frame_DataLenghtPerFrame + 5 - 2];
 8021960:	4b1c      	ldr	r3, [pc, #112]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 8021962:	881b      	ldrh	r3, [r3, #0]
 8021964:	3303      	adds	r3, #3
 8021966:	687a      	ldr	r2, [r7, #4]
 8021968:	4413      	add	r3, r2
 802196a:	781b      	ldrb	r3, [r3, #0]
 802196c:	743b      	strb	r3, [r7, #16]
	crc_merge.DataArray[1] = data[Frame_DataLenghtPerFrame + 5 - 3];
 802196e:	4b19      	ldr	r3, [pc, #100]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 8021970:	881b      	ldrh	r3, [r3, #0]
 8021972:	3302      	adds	r3, #2
 8021974:	687a      	ldr	r2, [r7, #4]
 8021976:	4413      	add	r3, r2
 8021978:	781b      	ldrb	r3, [r3, #0]
 802197a:	747b      	strb	r3, [r7, #17]
	crc_merge.DataArray[2] = data[Frame_DataLenghtPerFrame + 5 - 4];
 802197c:	4b15      	ldr	r3, [pc, #84]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 802197e:	881b      	ldrh	r3, [r3, #0]
 8021980:	3301      	adds	r3, #1
 8021982:	687a      	ldr	r2, [r7, #4]
 8021984:	4413      	add	r3, r2
 8021986:	781b      	ldrb	r3, [r3, #0]
 8021988:	74bb      	strb	r3, [r7, #18]
	crc_merge.DataArray[3] = data[Frame_DataLenghtPerFrame + 5 - 5];
 802198a:	4b12      	ldr	r3, [pc, #72]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 802198c:	881b      	ldrh	r3, [r3, #0]
 802198e:	461a      	mov	r2, r3
 8021990:	687b      	ldr	r3, [r7, #4]
 8021992:	4413      	add	r3, r2
 8021994:	781b      	ldrb	r3, [r3, #0]
 8021996:	74fb      	strb	r3, [r7, #19]

	uint32_t crc_data = crc32((uint8_t*)(&data[0]), Frame_DataLenghtPerFrame);
 8021998:	4b0e      	ldr	r3, [pc, #56]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 802199a:	881b      	ldrh	r3, [r3, #0]
 802199c:	4619      	mov	r1, r3
 802199e:	6878      	ldr	r0, [r7, #4]
 80219a0:	f7ff fb24 	bl	8020fec <crc32>
 80219a4:	6178      	str	r0, [r7, #20]

	if(crc_data != crc_merge.DataUint32){
 80219a6:	693b      	ldr	r3, [r7, #16]
 80219a8:	697a      	ldr	r2, [r7, #20]
 80219aa:	429a      	cmp	r2, r3
 80219ac:	d00a      	beq.n	80219c4 <Frame_ReadDataFrame+0xec>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80219ae:	2201      	movs	r2, #1
 80219b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219b4:	4808      	ldr	r0, [pc, #32]	; (80219d8 <Frame_ReadDataFrame+0x100>)
 80219b6:	f011 ffdf 	bl	8033978 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80219ba:	20c8      	movs	r0, #200	; 0xc8
 80219bc:	f011 f9a0 	bl	8032d00 <HAL_Delay>
		return HANDLE_FAILED;
 80219c0:	2301      	movs	r3, #1
 80219c2:	e000      	b.n	80219c6 <Frame_ReadDataFrame+0xee>
	}

	return HANDLE_OK;
 80219c4:	2300      	movs	r3, #0
}
 80219c6:	4618      	mov	r0, r3
 80219c8:	3718      	adds	r7, #24
 80219ca:	46bd      	mov	sp, r7
 80219cc:	bd80      	pop	{r7, pc}
 80219ce:	bf00      	nop
 80219d0:	20000620 	.word	0x20000620
 80219d4:	2000029e 	.word	0x2000029e
 80219d8:	40020c00 	.word	0x40020c00

080219dc <Frame_InitFlash>:
	HAL_FLASH_Lock();
	return HANDLE_OK;
}


defReturnType Frame_InitFlash(uint8_t slot){
 80219dc:	b580      	push	{r7, lr}
 80219de:	b08a      	sub	sp, #40	; 0x28
 80219e0:	af00      	add	r7, sp, #0
 80219e2:	4603      	mov	r3, r0
 80219e4:	71fb      	strb	r3, [r7, #7]
	defReturnType ret;

	ret = HAL_FLASH_Unlock();
 80219e6:	f011 fba7 	bl	8033138 <HAL_FLASH_Unlock>
 80219ea:	4603      	mov	r3, r0
 80219ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(ret != (uint8_t)HAL_OK){
 80219f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80219f4:	2b00      	cmp	r3, #0
 80219f6:	d001      	beq.n	80219fc <Frame_InitFlash+0x20>
		return HANDLE_FAILED;
 80219f8:	2301      	movs	r3, #1
 80219fa:	e028      	b.n	8021a4e <Frame_InitFlash+0x72>
	}

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80219fc:	2300      	movs	r3, #0
 80219fe:	613b      	str	r3, [r7, #16]

	if(slot == 0x00){
 8021a00:	79fb      	ldrb	r3, [r7, #7]
 8021a02:	2b00      	cmp	r3, #0
 8021a04:	d102      	bne.n	8021a0c <Frame_InitFlash+0x30>
		EraseInitStruct.Sector        = FLASH_SECTOR_5;
 8021a06:	2305      	movs	r3, #5
 8021a08:	61bb      	str	r3, [r7, #24]
 8021a0a:	e00a      	b.n	8021a22 <Frame_InitFlash+0x46>
	}
	else if(slot == 0x01){
 8021a0c:	79fb      	ldrb	r3, [r7, #7]
 8021a0e:	2b01      	cmp	r3, #1
 8021a10:	d102      	bne.n	8021a18 <Frame_InitFlash+0x3c>
		EraseInitStruct.Sector        = FLASH_SECTOR_7;
 8021a12:	2307      	movs	r3, #7
 8021a14:	61bb      	str	r3, [r7, #24]
 8021a16:	e004      	b.n	8021a22 <Frame_InitFlash+0x46>
	}
	else if(slot == 0x02){
 8021a18:	79fb      	ldrb	r3, [r7, #7]
 8021a1a:	2b02      	cmp	r3, #2
 8021a1c:	d101      	bne.n	8021a22 <Frame_InitFlash+0x46>
		EraseInitStruct.Sector        = FLASH_SECTOR_9;
 8021a1e:	2309      	movs	r3, #9
 8021a20:	61bb      	str	r3, [r7, #24]
	}
	EraseInitStruct.NbSectors     = 2;           //erase 2 sectors
 8021a22:	2302      	movs	r3, #2
 8021a24:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8021a26:	2302      	movs	r3, #2
 8021a28:	623b      	str	r3, [r7, #32]

	ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8021a2a:	f107 020c 	add.w	r2, r7, #12
 8021a2e:	f107 0310 	add.w	r3, r7, #16
 8021a32:	4611      	mov	r1, r2
 8021a34:	4618      	mov	r0, r3
 8021a36:	f011 fce1 	bl	80333fc <HAL_FLASHEx_Erase>
 8021a3a:	4603      	mov	r3, r0
 8021a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if( ret != (uint8_t)HAL_OK )
 8021a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021a44:	2b00      	cmp	r3, #0
 8021a46:	d001      	beq.n	8021a4c <Frame_InitFlash+0x70>
	{
		return HANDLE_FAILED;
 8021a48:	2301      	movs	r3, #1
 8021a4a:	e000      	b.n	8021a4e <Frame_InitFlash+0x72>
	}

	return HANDLE_OK;
 8021a4c:	2300      	movs	r3, #0
}
 8021a4e:	4618      	mov	r0, r3
 8021a50:	3728      	adds	r7, #40	; 0x28
 8021a52:	46bd      	mov	sp, r7
 8021a54:	bd80      	pop	{r7, pc}
	...

08021a58 <Frame_WriteCfg>:
	return (c11*16 + c22);
}



defReturnType Frame_WriteCfg(defFlashCfg *Flash_Cfg){//write to sector 11 in STM32F407
 8021a58:	b580      	push	{r7, lr}
 8021a5a:	b08a      	sub	sp, #40	; 0x28
 8021a5c:	af00      	add	r7, sp, #0
 8021a5e:	6078      	str	r0, [r7, #4]
	defReturnType ret;

	ret = HAL_FLASH_Unlock();
 8021a60:	f011 fb6a 	bl	8033138 <HAL_FLASH_Unlock>
 8021a64:	4603      	mov	r3, r0
 8021a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(ret != (uint8_t)HAL_OK){
 8021a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021a6e:	2b00      	cmp	r3, #0
 8021a70:	d001      	beq.n	8021a76 <Frame_WriteCfg+0x1e>
		return HANDLE_FAILED;
 8021a72:	2301      	movs	r3, #1
 8021a74:	e03a      	b.n	8021aec <Frame_WriteCfg+0x94>
	}

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8021a76:	2300      	movs	r3, #0
 8021a78:	60fb      	str	r3, [r7, #12]

	EraseInitStruct.Sector        = FLASH_SECTOR_11;
 8021a7a:	230b      	movs	r3, #11
 8021a7c:	617b      	str	r3, [r7, #20]

	EraseInitStruct.NbSectors     = 1;           //erase 1 sectors
 8021a7e:	2301      	movs	r3, #1
 8021a80:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8021a82:	2302      	movs	r3, #2
 8021a84:	61fb      	str	r3, [r7, #28]

	ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8021a86:	f107 0208 	add.w	r2, r7, #8
 8021a8a:	f107 030c 	add.w	r3, r7, #12
 8021a8e:	4611      	mov	r1, r2
 8021a90:	4618      	mov	r0, r3
 8021a92:	f011 fcb3 	bl	80333fc <HAL_FLASHEx_Erase>
 8021a96:	4603      	mov	r3, r0
 8021a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if( ret != (uint8_t)HAL_OK )
 8021a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021aa0:	2b00      	cmp	r3, #0
 8021aa2:	d001      	beq.n	8021aa8 <Frame_WriteCfg+0x50>
	{
		return HANDLE_FAILED;
 8021aa4:	2301      	movs	r3, #1
 8021aa6:	e021      	b.n	8021aec <Frame_WriteCfg+0x94>
	}

	uint32_t baseaddr = 0x080E0000; //Sector 11 in STM32F407
 8021aa8:	4b12      	ldr	r3, [pc, #72]	; (8021af4 <Frame_WriteCfg+0x9c>)
 8021aaa:	623b      	str	r3, [r7, #32]

	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, baseaddr, Flash_Cfg->FlashOnGoing) != HAL_OK)
 8021aac:	687b      	ldr	r3, [r7, #4]
 8021aae:	781b      	ldrb	r3, [r3, #0]
 8021ab0:	b2da      	uxtb	r2, r3
 8021ab2:	f04f 0300 	mov.w	r3, #0
 8021ab6:	6a39      	ldr	r1, [r7, #32]
 8021ab8:	2000      	movs	r0, #0
 8021aba:	f011 fae9 	bl	8033090 <HAL_FLASH_Program>
 8021abe:	4603      	mov	r3, r0
 8021ac0:	2b00      	cmp	r3, #0
 8021ac2:	d001      	beq.n	8021ac8 <Frame_WriteCfg+0x70>
			return HANDLE_FAILED;
 8021ac4:	2301      	movs	r3, #1
 8021ac6:	e011      	b.n	8021aec <Frame_WriteCfg+0x94>
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, baseaddr + 1, Flash_Cfg->ResetCause) != HAL_OK)
 8021ac8:	6a3b      	ldr	r3, [r7, #32]
 8021aca:	1c59      	adds	r1, r3, #1
 8021acc:	687b      	ldr	r3, [r7, #4]
 8021ace:	785b      	ldrb	r3, [r3, #1]
 8021ad0:	b2da      	uxtb	r2, r3
 8021ad2:	f04f 0300 	mov.w	r3, #0
 8021ad6:	2000      	movs	r0, #0
 8021ad8:	f011 fada 	bl	8033090 <HAL_FLASH_Program>
 8021adc:	4603      	mov	r3, r0
 8021ade:	2b00      	cmp	r3, #0
 8021ae0:	d001      	beq.n	8021ae6 <Frame_WriteCfg+0x8e>
			return HANDLE_FAILED;
 8021ae2:	2301      	movs	r3, #1
 8021ae4:	e002      	b.n	8021aec <Frame_WriteCfg+0x94>

	HAL_FLASH_Lock();
 8021ae6:	f011 fb49 	bl	803317c <HAL_FLASH_Lock>
	return HANDLE_OK;
 8021aea:	2300      	movs	r3, #0
}
 8021aec:	4618      	mov	r0, r3
 8021aee:	3728      	adds	r7, #40	; 0x28
 8021af0:	46bd      	mov	sp, r7
 8021af2:	bd80      	pop	{r7, pc}
 8021af4:	080e0000 	.word	0x080e0000

08021af8 <Frame_ReadCfg>:


defReturnType Frame_ReadCfg(defFlashCfg* Cfg){//write to sector 4 in STM32F407
 8021af8:	b580      	push	{r7, lr}
 8021afa:	b086      	sub	sp, #24
 8021afc:	af00      	add	r7, sp, #0
 8021afe:	6078      	str	r0, [r7, #4]
	defReturnType ret;

	ret = HAL_FLASH_Unlock();
 8021b00:	f011 fb1a 	bl	8033138 <HAL_FLASH_Unlock>
 8021b04:	4603      	mov	r3, r0
 8021b06:	75fb      	strb	r3, [r7, #23]
	if(ret != (uint8_t)HAL_OK){
 8021b08:	7dfb      	ldrb	r3, [r7, #23]
 8021b0a:	2b00      	cmp	r3, #0
 8021b0c:	d001      	beq.n	8021b12 <Frame_ReadCfg+0x1a>
		return HANDLE_FAILED;
 8021b0e:	2301      	movs	r3, #1
 8021b10:	e010      	b.n	8021b34 <Frame_ReadCfg+0x3c>
	}


	uint32_t baseaddr = 0x080E0000; //Sector 4 in STM32F407
 8021b12:	4b0a      	ldr	r3, [pc, #40]	; (8021b3c <Frame_ReadCfg+0x44>)
 8021b14:	613b      	str	r3, [r7, #16]

	uint32_t Rx_Buf = *(__IO uint32_t *)baseaddr;
 8021b16:	693b      	ldr	r3, [r7, #16]
 8021b18:	681b      	ldr	r3, [r3, #0]
 8021b1a:	60fb      	str	r3, [r7, #12]
	Cfg->FlashOnGoing = (uint8_t)((Rx_Buf)&0xFF);
 8021b1c:	68fb      	ldr	r3, [r7, #12]
 8021b1e:	b2da      	uxtb	r2, r3
 8021b20:	687b      	ldr	r3, [r7, #4]
 8021b22:	701a      	strb	r2, [r3, #0]
	Cfg->ResetCause = (uint8_t)(((Rx_Buf)>>8)&0xFF);
 8021b24:	68fb      	ldr	r3, [r7, #12]
 8021b26:	0a1b      	lsrs	r3, r3, #8
 8021b28:	b2da      	uxtb	r2, r3
 8021b2a:	687b      	ldr	r3, [r7, #4]
 8021b2c:	705a      	strb	r2, [r3, #1]

	HAL_FLASH_Lock();
 8021b2e:	f011 fb25 	bl	803317c <HAL_FLASH_Lock>
	return HANDLE_OK;
 8021b32:	2300      	movs	r3, #0
}
 8021b34:	4618      	mov	r0, r3
 8021b36:	3718      	adds	r7, #24
 8021b38:	46bd      	mov	sp, r7
 8021b3a:	bd80      	pop	{r7, pc}
 8021b3c:	080e0000 	.word	0x080e0000

08021b40 <ota_and_write_to_sd_card>:

	HAL_FLASH_Lock();
	return HANDLE_OK;
}

HAL_StatusTypeDef ota_and_write_to_sd_card(FATFS *fatfs, FIL *myfile, const char *file_name, uint8_t mode){
 8021b40:	b590      	push	{r4, r7, lr}
 8021b42:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8021b46:	af00      	add	r7, sp, #0
 8021b48:	f107 040c 	add.w	r4, r7, #12
 8021b4c:	6020      	str	r0, [r4, #0]
 8021b4e:	f107 0008 	add.w	r0, r7, #8
 8021b52:	6001      	str	r1, [r0, #0]
 8021b54:	1d39      	adds	r1, r7, #4
 8021b56:	600a      	str	r2, [r1, #0]
 8021b58:	461a      	mov	r2, r3
 8021b5a:	1cfb      	adds	r3, r7, #3
 8021b5c:	701a      	strb	r2, [r3, #0]

	if(sd_init() == HAL_ERROR) return HAL_ERROR;
 8021b5e:	f7ff fd7d 	bl	802165c <sd_init>
 8021b62:	4603      	mov	r3, r0
 8021b64:	2b01      	cmp	r3, #1
 8021b66:	d101      	bne.n	8021b6c <ota_and_write_to_sd_card+0x2c>
 8021b68:	2301      	movs	r3, #1
 8021b6a:	e0b7      	b.n	8021cdc <ota_and_write_to_sd_card+0x19c>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8021b6c:	2201      	movs	r2, #1
 8021b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8021b72:	485d      	ldr	r0, [pc, #372]	; (8021ce8 <ota_and_write_to_sd_card+0x1a8>)
 8021b74:	f011 ff00 	bl	8033978 <HAL_GPIO_WritePin>
	if(sd_mount(fatfs) != FR_OK) return HAL_ERROR;
 8021b78:	f107 030c 	add.w	r3, r7, #12
 8021b7c:	6818      	ldr	r0, [r3, #0]
 8021b7e:	f7ff fd79 	bl	8021674 <sd_mount>
 8021b82:	4603      	mov	r3, r0
 8021b84:	2b00      	cmp	r3, #0
 8021b86:	d001      	beq.n	8021b8c <ota_and_write_to_sd_card+0x4c>
 8021b88:	2301      	movs	r3, #1
 8021b8a:	e0a7      	b.n	8021cdc <ota_and_write_to_sd_card+0x19c>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8021b8c:	2201      	movs	r2, #1
 8021b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021b92:	4855      	ldr	r0, [pc, #340]	; (8021ce8 <ota_and_write_to_sd_card+0x1a8>)
 8021b94:	f011 fef0 	bl	8033978 <HAL_GPIO_WritePin>
	if(sd_open(myfile, file_name, FA_WRITE|FA_CREATE_ALWAYS) != FR_OK) return HAL_ERROR;
 8021b98:	1d39      	adds	r1, r7, #4
 8021b9a:	f107 0308 	add.w	r3, r7, #8
 8021b9e:	220a      	movs	r2, #10
 8021ba0:	6809      	ldr	r1, [r1, #0]
 8021ba2:	6818      	ldr	r0, [r3, #0]
 8021ba4:	f7ff fd76 	bl	8021694 <sd_open>
 8021ba8:	4603      	mov	r3, r0
 8021baa:	2b00      	cmp	r3, #0
 8021bac:	d001      	beq.n	8021bb2 <ota_and_write_to_sd_card+0x72>
 8021bae:	2301      	movs	r3, #1
 8021bb0:	e094      	b.n	8021cdc <ota_and_write_to_sd_card+0x19c>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8021bb2:	2201      	movs	r2, #1
 8021bb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021bb8:	484b      	ldr	r0, [pc, #300]	; (8021ce8 <ota_and_write_to_sd_card+0x1a8>)
 8021bba:	f011 fedd 	bl	8033978 <HAL_GPIO_WritePin>


	Frame_SendResponseFrame(RESPONSE_ACK);
 8021bbe:	2000      	movs	r0, #0
 8021bc0:	f7ff fdac 	bl	802171c <Frame_SendResponseFrame>

	if(Frame_ReadStartFrame() == HANDLE_OK){
 8021bc4:	f7ff fe04 	bl	80217d0 <Frame_ReadStartFrame>
 8021bc8:	4603      	mov	r3, r0
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d108      	bne.n	8021be0 <ota_and_write_to_sd_card+0xa0>
		Frame_SendResponseFrame(RESPONSE_ACK);
 8021bce:	2000      	movs	r0, #0
 8021bd0:	f7ff fda4 	bl	802171c <Frame_SendResponseFrame>
		Frame_SendResponseFrame(RESPONSE_NACK);
		Frame_ReadStopFrame();
		return HAL_ERROR;
	}

	if(Frame_ReadHeaderFrame() == HANDLE_OK){
 8021bd4:	f7ff fe40 	bl	8021858 <Frame_ReadHeaderFrame>
 8021bd8:	4603      	mov	r3, r0
 8021bda:	2b00      	cmp	r3, #0
 8021bdc:	d10e      	bne.n	8021bfc <ota_and_write_to_sd_card+0xbc>
 8021bde:	e006      	b.n	8021bee <ota_and_write_to_sd_card+0xae>
		Frame_SendResponseFrame(RESPONSE_NACK);
 8021be0:	2001      	movs	r0, #1
 8021be2:	f7ff fd9b 	bl	802171c <Frame_SendResponseFrame>
		Frame_ReadStopFrame();
 8021be6:	f7ff fe1d 	bl	8021824 <Frame_ReadStopFrame>
		return HAL_ERROR;
 8021bea:	2301      	movs	r3, #1
 8021bec:	e076      	b.n	8021cdc <ota_and_write_to_sd_card+0x19c>
		Frame_SendResponseFrame(RESPONSE_ACK);
 8021bee:	2000      	movs	r0, #0
 8021bf0:	f7ff fd94 	bl	802171c <Frame_SendResponseFrame>
		Frame_SendResponseFrame(RESPONSE_NACK);
		Frame_ReadStopFrame();
		return HAL_ERROR;
	}

	for(uint16_t NoFrame = 0; NoFrame < Frame_NumberOfKbyteData; NoFrame ++){
 8021bf4:	2300      	movs	r3, #0
 8021bf6:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
 8021bfa:	e05f      	b.n	8021cbc <ota_and_write_to_sd_card+0x17c>
		Frame_SendResponseFrame(RESPONSE_NACK);
 8021bfc:	2001      	movs	r0, #1
 8021bfe:	f7ff fd8d 	bl	802171c <Frame_SendResponseFrame>
		Frame_ReadStopFrame();
 8021c02:	f7ff fe0f 	bl	8021824 <Frame_ReadStopFrame>
		return HAL_ERROR;
 8021c06:	2301      	movs	r3, #1
 8021c08:	e068      	b.n	8021cdc <ota_and_write_to_sd_card+0x19c>
		uint8_t bufOTA[DATA_FRAME_LENGHT - 4];
		uint8_t flag = 0x00;
 8021c0a:	2300      	movs	r3, #0
 8021c0c:	f887 3415 	strb.w	r3, [r7, #1045]	; 0x415
		__HAL_TIM_SET_COUNTER(&htim1,0);
 8021c10:	4b36      	ldr	r3, [pc, #216]	; (8021cec <ota_and_write_to_sd_card+0x1ac>)
 8021c12:	681b      	ldr	r3, [r3, #0]
 8021c14:	2200      	movs	r2, #0
 8021c16:	625a      	str	r2, [r3, #36]	; 0x24
		while(__HAL_TIM_GET_COUNTER(&htim1) < 10000){
 8021c18:	bf00      	nop
 8021c1a:	4b34      	ldr	r3, [pc, #208]	; (8021cec <ota_and_write_to_sd_card+0x1ac>)
 8021c1c:	681b      	ldr	r3, [r3, #0]
 8021c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021c20:	f242 720f 	movw	r2, #9999	; 0x270f
 8021c24:	4293      	cmp	r3, r2
 8021c26:	d831      	bhi.n	8021c8c <ota_and_write_to_sd_card+0x14c>
			if(Frame_ReadDataFrame(bufOTA) == HANDLE_OK){
 8021c28:	f107 0310 	add.w	r3, r7, #16
 8021c2c:	4618      	mov	r0, r3
 8021c2e:	f7ff fe53 	bl	80218d8 <Frame_ReadDataFrame>
 8021c32:	4603      	mov	r3, r0
 8021c34:	2b00      	cmp	r3, #0
 8021c36:	d128      	bne.n	8021c8a <ota_and_write_to_sd_card+0x14a>
				if(sd_write(myfile, bufOTA, Frame_DataLenghtPerFrame)!=Frame_DataLenghtPerFrame){
 8021c38:	4b2d      	ldr	r3, [pc, #180]	; (8021cf0 <ota_and_write_to_sd_card+0x1b0>)
 8021c3a:	881a      	ldrh	r2, [r3, #0]
 8021c3c:	f107 0110 	add.w	r1, r7, #16
 8021c40:	f107 0308 	add.w	r3, r7, #8
 8021c44:	6818      	ldr	r0, [r3, #0]
 8021c46:	f7ff fd37 	bl	80216b8 <sd_write>
 8021c4a:	4603      	mov	r3, r0
 8021c4c:	4a28      	ldr	r2, [pc, #160]	; (8021cf0 <ota_and_write_to_sd_card+0x1b0>)
 8021c4e:	8812      	ldrh	r2, [r2, #0]
 8021c50:	4293      	cmp	r3, r2
 8021c52:	d003      	beq.n	8021c5c <ota_and_write_to_sd_card+0x11c>
//					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
					HAL_Delay(500);
 8021c54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8021c58:	f011 f852 	bl	8032d00 <HAL_Delay>
				}
//				Frame_WriteFlashToSlot(FLASH_SLOT_0,(uint8_t*)bufOTA, Frame_DataLenghtPerFrame);
				Frame_FlashAddUntillNow += Frame_DataLenghtPerFrame;
 8021c5c:	4b25      	ldr	r3, [pc, #148]	; (8021cf4 <ota_and_write_to_sd_card+0x1b4>)
 8021c5e:	881a      	ldrh	r2, [r3, #0]
 8021c60:	4b23      	ldr	r3, [pc, #140]	; (8021cf0 <ota_and_write_to_sd_card+0x1b0>)
 8021c62:	881b      	ldrh	r3, [r3, #0]
 8021c64:	4413      	add	r3, r2
 8021c66:	b29a      	uxth	r2, r3
 8021c68:	4b22      	ldr	r3, [pc, #136]	; (8021cf4 <ota_and_write_to_sd_card+0x1b4>)
 8021c6a:	801a      	strh	r2, [r3, #0]
				Frame_TotalSize += Frame_DataLenghtPerFrame;
 8021c6c:	4b20      	ldr	r3, [pc, #128]	; (8021cf0 <ota_and_write_to_sd_card+0x1b0>)
 8021c6e:	881b      	ldrh	r3, [r3, #0]
 8021c70:	461a      	mov	r2, r3
 8021c72:	4b21      	ldr	r3, [pc, #132]	; (8021cf8 <ota_and_write_to_sd_card+0x1b8>)
 8021c74:	681b      	ldr	r3, [r3, #0]
 8021c76:	4413      	add	r3, r2
 8021c78:	4a1f      	ldr	r2, [pc, #124]	; (8021cf8 <ota_and_write_to_sd_card+0x1b8>)
 8021c7a:	6013      	str	r3, [r2, #0]
				Frame_SendResponseFrame(RESPONSE_ACK);
 8021c7c:	2000      	movs	r0, #0
 8021c7e:	f7ff fd4d 	bl	802171c <Frame_SendResponseFrame>
				flag = 0x01;
 8021c82:	2301      	movs	r3, #1
 8021c84:	f887 3415 	strb.w	r3, [r7, #1045]	; 0x415
				break;
 8021c88:	e000      	b.n	8021c8c <ota_and_write_to_sd_card+0x14c>
			}
			else{
				break;
 8021c8a:	bf00      	nop
			}
		}
		if(flag == 0x00){
 8021c8c:	f897 3415 	ldrb.w	r3, [r7, #1045]	; 0x415
 8021c90:	2b00      	cmp	r3, #0
 8021c92:	d106      	bne.n	8021ca2 <ota_and_write_to_sd_card+0x162>
			Frame_SendResponseFrame(RESPONSE_NACK);
 8021c94:	2001      	movs	r0, #1
 8021c96:	f7ff fd41 	bl	802171c <Frame_SendResponseFrame>
			Frame_ReadStopFrame();
 8021c9a:	f7ff fdc3 	bl	8021824 <Frame_ReadStopFrame>
			return HAL_ERROR;
 8021c9e:	2301      	movs	r3, #1
 8021ca0:	e01c      	b.n	8021cdc <ota_and_write_to_sd_card+0x19c>
		}
		memset(bufOTA, 0, DATA_FRAME_LENGHT - 4);
 8021ca2:	f107 0310 	add.w	r3, r7, #16
 8021ca6:	f240 4205 	movw	r2, #1029	; 0x405
 8021caa:	2100      	movs	r1, #0
 8021cac:	4618      	mov	r0, r3
 8021cae:	f018 ffbf 	bl	803ac30 <memset>
	for(uint16_t NoFrame = 0; NoFrame < Frame_NumberOfKbyteData; NoFrame ++){
 8021cb2:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	; 0x416
 8021cb6:	3301      	adds	r3, #1
 8021cb8:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
 8021cbc:	4b0f      	ldr	r3, [pc, #60]	; (8021cfc <ota_and_write_to_sd_card+0x1bc>)
 8021cbe:	781b      	ldrb	r3, [r3, #0]
 8021cc0:	b29b      	uxth	r3, r3
 8021cc2:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	; 0x416
 8021cc6:	429a      	cmp	r2, r3
 8021cc8:	d39f      	bcc.n	8021c0a <ota_and_write_to_sd_card+0xca>
	}
	Frame_FlashAddUntillNow = 0;
 8021cca:	4b0a      	ldr	r3, [pc, #40]	; (8021cf4 <ota_and_write_to_sd_card+0x1b4>)
 8021ccc:	2200      	movs	r2, #0
 8021cce:	801a      	strh	r2, [r3, #0]
//	HAL_FLASH_Lock();
	sd_close(myfile);
 8021cd0:	f107 0308 	add.w	r3, r7, #8
 8021cd4:	6818      	ldr	r0, [r3, #0]
 8021cd6:	f7ff fd16 	bl	8021706 <sd_close>
	return HAL_OK;
 8021cda:	2300      	movs	r3, #0
}
 8021cdc:	4618      	mov	r0, r3
 8021cde:	f207 471c 	addw	r7, r7, #1052	; 0x41c
 8021ce2:	46bd      	mov	sp, r7
 8021ce4:	bd90      	pop	{r4, r7, pc}
 8021ce6:	bf00      	nop
 8021ce8:	40020c00 	.word	0x40020c00
 8021cec:	20000554 	.word	0x20000554
 8021cf0:	2000029e 	.word	0x2000029e
 8021cf4:	200002a0 	.word	0x200002a0
 8021cf8:	200002a4 	.word	0x200002a4
 8021cfc:	2000029c 	.word	0x2000029c

08021d00 <store_into_flash>:


void store_into_flash(uint8_t* buffer, uint32_t address, uint16_t size){
 8021d00:	b580      	push	{r7, lr}
 8021d02:	b086      	sub	sp, #24
 8021d04:	af00      	add	r7, sp, #0
 8021d06:	60f8      	str	r0, [r7, #12]
 8021d08:	60b9      	str	r1, [r7, #8]
 8021d0a:	4613      	mov	r3, r2
 8021d0c:	80fb      	strh	r3, [r7, #6]
	for(uint16_t s = 0; s < size; s++){
 8021d0e:	2300      	movs	r3, #0
 8021d10:	82fb      	strh	r3, [r7, #22]
 8021d12:	e011      	b.n	8021d38 <store_into_flash+0x38>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address, *(buffer));
 8021d14:	68fb      	ldr	r3, [r7, #12]
 8021d16:	781b      	ldrb	r3, [r3, #0]
 8021d18:	b2da      	uxtb	r2, r3
 8021d1a:	f04f 0300 	mov.w	r3, #0
 8021d1e:	68b9      	ldr	r1, [r7, #8]
 8021d20:	2000      	movs	r0, #0
 8021d22:	f011 f9b5 	bl	8033090 <HAL_FLASH_Program>
		address++;
 8021d26:	68bb      	ldr	r3, [r7, #8]
 8021d28:	3301      	adds	r3, #1
 8021d2a:	60bb      	str	r3, [r7, #8]
		buffer++;
 8021d2c:	68fb      	ldr	r3, [r7, #12]
 8021d2e:	3301      	adds	r3, #1
 8021d30:	60fb      	str	r3, [r7, #12]
	for(uint16_t s = 0; s < size; s++){
 8021d32:	8afb      	ldrh	r3, [r7, #22]
 8021d34:	3301      	adds	r3, #1
 8021d36:	82fb      	strh	r3, [r7, #22]
 8021d38:	8afa      	ldrh	r2, [r7, #22]
 8021d3a:	88fb      	ldrh	r3, [r7, #6]
 8021d3c:	429a      	cmp	r2, r3
 8021d3e:	d3e9      	bcc.n	8021d14 <store_into_flash+0x14>
	}
}
 8021d40:	bf00      	nop
 8021d42:	bf00      	nop
 8021d44:	3718      	adds	r7, #24
 8021d46:	46bd      	mov	sp, r7
 8021d48:	bd80      	pop	{r7, pc}
	...

08021d4c <read_file_and_store_into_flash>:
//	  sd_write(myfile, "NGUYEN VAN NHI");
//	  sd_write(myfile, bufff);
//	  sd_close(myfile);
}

uint32_t read_file_and_store_into_flash(FATFS *fatfs, FIL *myfile, const char *file_name, uint8_t mode, defFlashSlot slot, uint8_t *signature, uint8_t *publickey, uint8_t *hashvalue){
 8021d4c:	b590      	push	{r4, r7, lr}
 8021d4e:	f6ad 0d2c 	subw	sp, sp, #2092	; 0x82c
 8021d52:	af02      	add	r7, sp, #8
 8021d54:	f107 040c 	add.w	r4, r7, #12
 8021d58:	6020      	str	r0, [r4, #0]
 8021d5a:	f107 0008 	add.w	r0, r7, #8
 8021d5e:	6001      	str	r1, [r0, #0]
 8021d60:	1d39      	adds	r1, r7, #4
 8021d62:	600a      	str	r2, [r1, #0]
 8021d64:	461a      	mov	r2, r3
 8021d66:	1cfb      	adds	r3, r7, #3
 8021d68:	701a      	strb	r2, [r3, #0]

	uint32_t BaseAddress;
	if(sd_init() == HAL_ERROR) return HAL_ERROR;
 8021d6a:	f7ff fc77 	bl	802165c <sd_init>
 8021d6e:	4603      	mov	r3, r0
 8021d70:	2b01      	cmp	r3, #1
 8021d72:	d101      	bne.n	8021d78 <read_file_and_store_into_flash+0x2c>
 8021d74:	2301      	movs	r3, #1
 8021d76:	e139      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 8021d78:	2201      	movs	r2, #1
 8021d7a:	2101      	movs	r1, #1
 8021d7c:	489e      	ldr	r0, [pc, #632]	; (8021ff8 <read_file_and_store_into_flash+0x2ac>)
 8021d7e:	f011 fdfb 	bl	8033978 <HAL_GPIO_WritePin>
	if(sd_mount(fatfs) != FR_OK) return HAL_ERROR;
 8021d82:	f107 030c 	add.w	r3, r7, #12
 8021d86:	6818      	ldr	r0, [r3, #0]
 8021d88:	f7ff fc74 	bl	8021674 <sd_mount>
 8021d8c:	4603      	mov	r3, r0
 8021d8e:	2b00      	cmp	r3, #0
 8021d90:	d001      	beq.n	8021d96 <read_file_and_store_into_flash+0x4a>
 8021d92:	2301      	movs	r3, #1
 8021d94:	e12a      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8021d96:	2201      	movs	r2, #1
 8021d98:	2102      	movs	r1, #2
 8021d9a:	4897      	ldr	r0, [pc, #604]	; (8021ff8 <read_file_and_store_into_flash+0x2ac>)
 8021d9c:	f011 fdec 	bl	8033978 <HAL_GPIO_WritePin>
	if(sd_open(myfile, file_name, mode) != FR_OK) return HAL_ERROR;
 8021da0:	1cfb      	adds	r3, r7, #3
 8021da2:	781a      	ldrb	r2, [r3, #0]
 8021da4:	1d39      	adds	r1, r7, #4
 8021da6:	f107 0308 	add.w	r3, r7, #8
 8021daa:	6809      	ldr	r1, [r1, #0]
 8021dac:	6818      	ldr	r0, [r3, #0]
 8021dae:	f7ff fc71 	bl	8021694 <sd_open>
 8021db2:	4603      	mov	r3, r0
 8021db4:	2b00      	cmp	r3, #0
 8021db6:	d001      	beq.n	8021dbc <read_file_and_store_into_flash+0x70>
 8021db8:	2301      	movs	r3, #1
 8021dba:	e117      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8021dbc:	2201      	movs	r2, #1
 8021dbe:	2104      	movs	r1, #4
 8021dc0:	488d      	ldr	r0, [pc, #564]	; (8021ff8 <read_file_and_store_into_flash+0x2ac>)
 8021dc2:	f011 fdd9 	bl	8033978 <HAL_GPIO_WritePin>
	uint32_t size_file = f_size(myfile) - 160;
 8021dc6:	f107 0308 	add.w	r3, r7, #8
 8021dca:	681b      	ldr	r3, [r3, #0]
 8021dcc:	68db      	ldr	r3, [r3, #12]
 8021dce:	3ba0      	subs	r3, #160	; 0xa0
 8021dd0:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814

	if(Frame_InitFlash(slot) != HANDLE_OK) return HAL_ERROR;
 8021dd4:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 8021dd8:	4618      	mov	r0, r3
 8021dda:	f7ff fdff 	bl	80219dc <Frame_InitFlash>
 8021dde:	4603      	mov	r3, r0
 8021de0:	2b00      	cmp	r3, #0
 8021de2:	d001      	beq.n	8021de8 <read_file_and_store_into_flash+0x9c>
 8021de4:	2301      	movs	r3, #1
 8021de6:	e101      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8021de8:	2201      	movs	r2, #1
 8021dea:	2108      	movs	r1, #8
 8021dec:	4882      	ldr	r0, [pc, #520]	; (8021ff8 <read_file_and_store_into_flash+0x2ac>)
 8021dee:	f011 fdc3 	bl	8033978 <HAL_GPIO_WritePin>

	if(slot == FLASH_SLOT_0) BaseAddress = FLASH_SLOT_0_ADD;
 8021df2:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 8021df6:	2b00      	cmp	r3, #0
 8021df8:	d103      	bne.n	8021e02 <read_file_and_store_into_flash+0xb6>
 8021dfa:	4b80      	ldr	r3, [pc, #512]	; (8021ffc <read_file_and_store_into_flash+0x2b0>)
 8021dfc:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8021e00:	e00e      	b.n	8021e20 <read_file_and_store_into_flash+0xd4>
	else if(slot == FLASH_SLOT_1) BaseAddress = FLASH_SLOT_1_ADD;
 8021e02:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 8021e06:	2b01      	cmp	r3, #1
 8021e08:	d103      	bne.n	8021e12 <read_file_and_store_into_flash+0xc6>
 8021e0a:	4b7d      	ldr	r3, [pc, #500]	; (8022000 <read_file_and_store_into_flash+0x2b4>)
 8021e0c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8021e10:	e006      	b.n	8021e20 <read_file_and_store_into_flash+0xd4>
	else if(slot == FLASH_SLOT_2) BaseAddress = FLASH_SLOT_2_ADD;
 8021e12:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 8021e16:	2b02      	cmp	r3, #2
 8021e18:	d102      	bne.n	8021e20 <read_file_and_store_into_flash+0xd4>
 8021e1a:	4b7a      	ldr	r3, [pc, #488]	; (8022004 <read_file_and_store_into_flash+0x2b8>)
 8021e1c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
	else{}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8021e20:	2201      	movs	r2, #1
 8021e22:	2110      	movs	r1, #16
 8021e24:	4874      	ldr	r0, [pc, #464]	; (8021ff8 <read_file_and_store_into_flash+0x2ac>)
 8021e26:	f011 fda7 	bl	8033978 <HAL_GPIO_WritePin>
	uint16_t round = size_file/1024; round += (size_file%1024 != 0)?1:0;
 8021e2a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8021e2e:	0a9b      	lsrs	r3, r3, #10
 8021e30:	f8a7 3812 	strh.w	r3, [r7, #2066]	; 0x812
 8021e34:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8021e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8021e3c:	2b00      	cmp	r3, #0
 8021e3e:	bf14      	ite	ne
 8021e40:	2301      	movne	r3, #1
 8021e42:	2300      	moveq	r3, #0
 8021e44:	b2db      	uxtb	r3, r3
 8021e46:	b29a      	uxth	r2, r3
 8021e48:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 8021e4c:	4413      	add	r3, r2
 8021e4e:	f8a7 3812 	strh.w	r3, [r7, #2066]	; 0x812

	uint8_t buffer_cipher[1024] = {0,};
 8021e52:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8021e56:	2200      	movs	r2, #0
 8021e58:	601a      	str	r2, [r3, #0]
 8021e5a:	3304      	adds	r3, #4
 8021e5c:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8021e60:	2100      	movs	r1, #0
 8021e62:	4618      	mov	r0, r3
 8021e64:	f018 fee4 	bl	803ac30 <memset>
	uint8_t buffer_plaintext[1024] = {0,};
 8021e68:	f107 0310 	add.w	r3, r7, #16
 8021e6c:	2200      	movs	r2, #0
 8021e6e:	601a      	str	r2, [r3, #0]
 8021e70:	3304      	adds	r3, #4
 8021e72:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8021e76:	2100      	movs	r1, #0
 8021e78:	4618      	mov	r0, r3
 8021e7a:	f018 fed9 	bl	803ac30 <memset>

	if(sd_read(myfile, signature, 64) != 64) return HAL_ERROR;
 8021e7e:	f107 0308 	add.w	r3, r7, #8
 8021e82:	2240      	movs	r2, #64	; 0x40
 8021e84:	f8d7 1834 	ldr.w	r1, [r7, #2100]	; 0x834
 8021e88:	6818      	ldr	r0, [r3, #0]
 8021e8a:	f7ff fc28 	bl	80216de <sd_read>
 8021e8e:	4603      	mov	r3, r0
 8021e90:	2b40      	cmp	r3, #64	; 0x40
 8021e92:	d001      	beq.n	8021e98 <read_file_and_store_into_flash+0x14c>
 8021e94:	2301      	movs	r3, #1
 8021e96:	e0a9      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
	if(sd_read(myfile, publickey, 32) != 32) return HAL_ERROR;
 8021e98:	f107 0308 	add.w	r3, r7, #8
 8021e9c:	2220      	movs	r2, #32
 8021e9e:	f8d7 1838 	ldr.w	r1, [r7, #2104]	; 0x838
 8021ea2:	6818      	ldr	r0, [r3, #0]
 8021ea4:	f7ff fc1b 	bl	80216de <sd_read>
 8021ea8:	4603      	mov	r3, r0
 8021eaa:	2b20      	cmp	r3, #32
 8021eac:	d001      	beq.n	8021eb2 <read_file_and_store_into_flash+0x166>
 8021eae:	2301      	movs	r3, #1
 8021eb0:	e09c      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
	if(sd_read(myfile, hashvalue, 64) != 64) return HAL_ERROR;
 8021eb2:	f107 0308 	add.w	r3, r7, #8
 8021eb6:	2240      	movs	r2, #64	; 0x40
 8021eb8:	f8d7 183c 	ldr.w	r1, [r7, #2108]	; 0x83c
 8021ebc:	6818      	ldr	r0, [r3, #0]
 8021ebe:	f7ff fc0e 	bl	80216de <sd_read>
 8021ec2:	4603      	mov	r3, r0
 8021ec4:	2b40      	cmp	r3, #64	; 0x40
 8021ec6:	d001      	beq.n	8021ecc <read_file_and_store_into_flash+0x180>
 8021ec8:	2301      	movs	r3, #1
 8021eca:	e08f      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>

	for(uint16_t r = 0; r < round - 1; r++){
 8021ecc:	2300      	movs	r3, #0
 8021ece:	f8a7 381a 	strh.w	r3, [r7, #2074]	; 0x81a
 8021ed2:	e03c      	b.n	8021f4e <read_file_and_store_into_flash+0x202>
		if(sd_read(myfile, buffer_cipher, 1024) != 1024) return HAL_ERROR;
 8021ed4:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8021ed8:	f107 0308 	add.w	r3, r7, #8
 8021edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021ee0:	6818      	ldr	r0, [r3, #0]
 8021ee2:	f7ff fbfc 	bl	80216de <sd_read>
 8021ee6:	4603      	mov	r3, r0
 8021ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021eec:	d001      	beq.n	8021ef2 <read_file_and_store_into_flash+0x1a6>
 8021eee:	2301      	movs	r3, #1
 8021ef0:	e07c      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
		Chacha20_Xor(Gb_scKeyStream, Gb_sulCell, buffer_cipher, 1024, buffer_plaintext);
 8021ef2:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8021ef6:	f107 0310 	add.w	r3, r7, #16
 8021efa:	9300      	str	r3, [sp, #0]
 8021efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021f00:	4941      	ldr	r1, [pc, #260]	; (8022008 <read_file_and_store_into_flash+0x2bc>)
 8021f02:	4842      	ldr	r0, [pc, #264]	; (802200c <read_file_and_store_into_flash+0x2c0>)
 8021f04:	f7ff f8b4 	bl	8021070 <Chacha20_Xor>
		store_into_flash(buffer_plaintext, BaseAddress + r*1024, 1024);
 8021f08:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	; 0x81a
 8021f0c:	029b      	lsls	r3, r3, #10
 8021f0e:	461a      	mov	r2, r3
 8021f10:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8021f14:	18d1      	adds	r1, r2, r3
 8021f16:	f107 0310 	add.w	r3, r7, #16
 8021f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021f1e:	4618      	mov	r0, r3
 8021f20:	f7ff feee 	bl	8021d00 <store_into_flash>
		memset(buffer_cipher,0,1024);
 8021f24:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8021f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021f2c:	2100      	movs	r1, #0
 8021f2e:	4618      	mov	r0, r3
 8021f30:	f018 fe7e 	bl	803ac30 <memset>
		memset(buffer_plaintext,0,1024);
 8021f34:	f107 0310 	add.w	r3, r7, #16
 8021f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021f3c:	2100      	movs	r1, #0
 8021f3e:	4618      	mov	r0, r3
 8021f40:	f018 fe76 	bl	803ac30 <memset>
	for(uint16_t r = 0; r < round - 1; r++){
 8021f44:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	; 0x81a
 8021f48:	3301      	adds	r3, #1
 8021f4a:	f8a7 381a 	strh.w	r3, [r7, #2074]	; 0x81a
 8021f4e:	f8b7 281a 	ldrh.w	r2, [r7, #2074]	; 0x81a
 8021f52:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 8021f56:	3b01      	subs	r3, #1
 8021f58:	429a      	cmp	r2, r3
 8021f5a:	dbbb      	blt.n	8021ed4 <read_file_and_store_into_flash+0x188>
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8021f5c:	2201      	movs	r2, #1
 8021f5e:	2120      	movs	r1, #32
 8021f60:	4825      	ldr	r0, [pc, #148]	; (8021ff8 <read_file_and_store_into_flash+0x2ac>)
 8021f62:	f011 fd09 	bl	8033978 <HAL_GPIO_WritePin>

	if(sd_read(myfile, buffer_cipher, size_file%1024) != size_file%1024) return HAL_ERROR;
 8021f66:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8021f6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8021f6e:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8021f72:	f107 0308 	add.w	r3, r7, #8
 8021f76:	6818      	ldr	r0, [r3, #0]
 8021f78:	f7ff fbb1 	bl	80216de <sd_read>
 8021f7c:	4602      	mov	r2, r0
 8021f7e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8021f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8021f86:	429a      	cmp	r2, r3
 8021f88:	d001      	beq.n	8021f8e <read_file_and_store_into_flash+0x242>
 8021f8a:	2301      	movs	r3, #1
 8021f8c:	e02e      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
	Chacha20_Xor(Gb_scKeyStream, Gb_sulCell, buffer_cipher, size_file%1024, buffer_plaintext);
 8021f8e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8021f92:	f3c3 0109 	ubfx	r1, r3, #0, #10
 8021f96:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8021f9a:	f107 0310 	add.w	r3, r7, #16
 8021f9e:	9300      	str	r3, [sp, #0]
 8021fa0:	460b      	mov	r3, r1
 8021fa2:	4919      	ldr	r1, [pc, #100]	; (8022008 <read_file_and_store_into_flash+0x2bc>)
 8021fa4:	4819      	ldr	r0, [pc, #100]	; (802200c <read_file_and_store_into_flash+0x2c0>)
 8021fa6:	f7ff f863 	bl	8021070 <Chacha20_Xor>
	store_into_flash(buffer_plaintext, BaseAddress + (round - 1)*1024, size_file%1024);
 8021faa:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 8021fae:	3b01      	subs	r3, #1
 8021fb0:	029b      	lsls	r3, r3, #10
 8021fb2:	461a      	mov	r2, r3
 8021fb4:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8021fb8:	18d1      	adds	r1, r2, r3
 8021fba:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8021fbe:	b29b      	uxth	r3, r3
 8021fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8021fc4:	b29a      	uxth	r2, r3
 8021fc6:	f107 0310 	add.w	r3, r7, #16
 8021fca:	4618      	mov	r0, r3
 8021fcc:	f7ff fe98 	bl	8021d00 <store_into_flash>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8021fd0:	2201      	movs	r2, #1
 8021fd2:	2180      	movs	r1, #128	; 0x80
 8021fd4:	4808      	ldr	r0, [pc, #32]	; (8021ff8 <read_file_and_store_into_flash+0x2ac>)
 8021fd6:	f011 fccf 	bl	8033978 <HAL_GPIO_WritePin>

	sd_close(myfile);
 8021fda:	f107 0308 	add.w	r3, r7, #8
 8021fde:	6818      	ldr	r0, [r3, #0]
 8021fe0:	f7ff fb91 	bl	8021706 <sd_close>
	HAL_FLASH_Lock();
 8021fe4:	f011 f8ca 	bl	803317c <HAL_FLASH_Lock>

	return size_file;
 8021fe8:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
}
 8021fec:	4618      	mov	r0, r3
 8021fee:	f607 0724 	addw	r7, r7, #2084	; 0x824
 8021ff2:	46bd      	mov	sp, r7
 8021ff4:	bd90      	pop	{r4, r7, pc}
 8021ff6:	bf00      	nop
 8021ff8:	40021000 	.word	0x40021000
 8021ffc:	08020000 	.word	0x08020000
 8022000:	08060000 	.word	0x08060000
 8022004:	080a0000 	.word	0x080a0000
 8022008:	2000021c 	.word	0x2000021c
 802200c:	2000025c 	.word	0x2000025c

08022010 <read_chunk_data_in_flash>:


	return HAL_OK;
}

void read_chunk_data_in_flash(uint8_t *buf, uint32_t address, uint16_t size){
 8022010:	b480      	push	{r7}
 8022012:	b087      	sub	sp, #28
 8022014:	af00      	add	r7, sp, #0
 8022016:	60f8      	str	r0, [r7, #12]
 8022018:	60b9      	str	r1, [r7, #8]
 802201a:	4613      	mov	r3, r2
 802201c:	80fb      	strh	r3, [r7, #6]
	for(uint32_t index = 0; index< size ; index++){
 802201e:	2300      	movs	r3, #0
 8022020:	617b      	str	r3, [r7, #20]
 8022022:	e00c      	b.n	802203e <read_chunk_data_in_flash+0x2e>
		*buf = *(__IO uint8_t *)(address + index);
 8022024:	68ba      	ldr	r2, [r7, #8]
 8022026:	697b      	ldr	r3, [r7, #20]
 8022028:	4413      	add	r3, r2
 802202a:	781b      	ldrb	r3, [r3, #0]
 802202c:	b2da      	uxtb	r2, r3
 802202e:	68fb      	ldr	r3, [r7, #12]
 8022030:	701a      	strb	r2, [r3, #0]
		buf++;
 8022032:	68fb      	ldr	r3, [r7, #12]
 8022034:	3301      	adds	r3, #1
 8022036:	60fb      	str	r3, [r7, #12]
	for(uint32_t index = 0; index< size ; index++){
 8022038:	697b      	ldr	r3, [r7, #20]
 802203a:	3301      	adds	r3, #1
 802203c:	617b      	str	r3, [r7, #20]
 802203e:	88fb      	ldrh	r3, [r7, #6]
 8022040:	697a      	ldr	r2, [r7, #20]
 8022042:	429a      	cmp	r2, r3
 8022044:	d3ee      	bcc.n	8022024 <read_chunk_data_in_flash+0x14>
	}
}
 8022046:	bf00      	nop
 8022048:	bf00      	nop
 802204a:	371c      	adds	r7, #28
 802204c:	46bd      	mov	sp, r7
 802204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022052:	4770      	bx	lr

08022054 <tree_hash_on_flash>:

HAL_StatusTypeDef tree_hash_on_flash(defFlashSlot slot, uint8_t* md, uint32_t size, uint32_t *rd){
 8022054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022056:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
 802205a:	af00      	add	r7, sp, #0
 802205c:	4604      	mov	r4, r0
 802205e:	f107 0008 	add.w	r0, r7, #8
 8022062:	6001      	str	r1, [r0, #0]
 8022064:	1d39      	adds	r1, r7, #4
 8022066:	600a      	str	r2, [r1, #0]
 8022068:	463a      	mov	r2, r7
 802206a:	6013      	str	r3, [r2, #0]
 802206c:	f107 030f 	add.w	r3, r7, #15
 8022070:	4622      	mov	r2, r4
 8022072:	701a      	strb	r2, [r3, #0]
 8022074:	466b      	mov	r3, sp
 8022076:	461d      	mov	r5, r3
	uint16 round = size/1024; round += (size%64 != 0)?1:0;
 8022078:	1d3b      	adds	r3, r7, #4
 802207a:	681b      	ldr	r3, [r3, #0]
 802207c:	0a9b      	lsrs	r3, r3, #10
 802207e:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8022082:	1d3b      	adds	r3, r7, #4
 8022084:	681b      	ldr	r3, [r3, #0]
 8022086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802208a:	2b00      	cmp	r3, #0
 802208c:	d001      	beq.n	8022092 <tree_hash_on_flash+0x3e>
 802208e:	2301      	movs	r3, #1
 8022090:	e000      	b.n	8022094 <tree_hash_on_flash+0x40>
 8022092:	2300      	movs	r3, #0
 8022094:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8022098:	4413      	add	r3, r2
 802209a:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
	uint8_t buff_hash[round][64];
 802209e:	f8d7 4824 	ldr.w	r4, [r7, #2084]	; 0x824
 80220a2:	4623      	mov	r3, r4
 80220a4:	3b01      	subs	r3, #1
 80220a6:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 80220aa:	4620      	mov	r0, r4
 80220ac:	f04f 0100 	mov.w	r1, #0
 80220b0:	f04f 0200 	mov.w	r2, #0
 80220b4:	f04f 0300 	mov.w	r3, #0
 80220b8:	024b      	lsls	r3, r1, #9
 80220ba:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80220be:	0242      	lsls	r2, r0, #9
 80220c0:	4620      	mov	r0, r4
 80220c2:	f04f 0100 	mov.w	r1, #0
 80220c6:	f04f 0200 	mov.w	r2, #0
 80220ca:	f04f 0300 	mov.w	r3, #0
 80220ce:	024b      	lsls	r3, r1, #9
 80220d0:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80220d4:	0242      	lsls	r2, r0, #9
 80220d6:	01a3      	lsls	r3, r4, #6
 80220d8:	3307      	adds	r3, #7
 80220da:	08db      	lsrs	r3, r3, #3
 80220dc:	00db      	lsls	r3, r3, #3
 80220de:	ebad 0d03 	sub.w	sp, sp, r3
 80220e2:	466b      	mov	r3, sp
 80220e4:	3300      	adds	r3, #0
 80220e6:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
	uint32_t BaseAddress;

	if(slot == FLASH_SLOT_0) BaseAddress = FLASH_SLOT_0_ADD;
 80220ea:	f107 030f 	add.w	r3, r7, #15
 80220ee:	781b      	ldrb	r3, [r3, #0]
 80220f0:	2b00      	cmp	r3, #0
 80220f2:	d103      	bne.n	80220fc <tree_hash_on_flash+0xa8>
 80220f4:	4b70      	ldr	r3, [pc, #448]	; (80222b8 <tree_hash_on_flash+0x264>)
 80220f6:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 80220fa:	e010      	b.n	802211e <tree_hash_on_flash+0xca>
	else if(slot == FLASH_SLOT_1) BaseAddress = FLASH_SLOT_1_ADD;
 80220fc:	f107 030f 	add.w	r3, r7, #15
 8022100:	781b      	ldrb	r3, [r3, #0]
 8022102:	2b01      	cmp	r3, #1
 8022104:	d103      	bne.n	802210e <tree_hash_on_flash+0xba>
 8022106:	4b6d      	ldr	r3, [pc, #436]	; (80222bc <tree_hash_on_flash+0x268>)
 8022108:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 802210c:	e007      	b.n	802211e <tree_hash_on_flash+0xca>
	else if(slot == FLASH_SLOT_2) BaseAddress = FLASH_SLOT_2_ADD;
 802210e:	f107 030f 	add.w	r3, r7, #15
 8022112:	781b      	ldrb	r3, [r3, #0]
 8022114:	2b02      	cmp	r3, #2
 8022116:	d102      	bne.n	802211e <tree_hash_on_flash+0xca>
 8022118:	4b69      	ldr	r3, [pc, #420]	; (80222c0 <tree_hash_on_flash+0x26c>)
 802211a:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
	else{}


	for(uint16 i = 0;i<round - 1;i++){
 802211e:	2300      	movs	r3, #0
 8022120:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8022124:	e029      	b.n	802217a <tree_hash_on_flash+0x126>
		uint8 buff_file[1024] = {0,};
 8022126:	f107 0314 	add.w	r3, r7, #20
 802212a:	2200      	movs	r2, #0
 802212c:	601a      	str	r2, [r3, #0]
 802212e:	3304      	adds	r3, #4
 8022130:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8022134:	2100      	movs	r1, #0
 8022136:	4618      	mov	r0, r3
 8022138:	f018 fd7a 	bl	803ac30 <memset>
		read_chunk_data_in_flash(buff_file, BaseAddress + i*1024, 1024);
 802213c:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8022140:	029a      	lsls	r2, r3, #10
 8022142:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8022146:	18d1      	adds	r1, r2, r3
 8022148:	f107 0314 	add.w	r3, r7, #20
 802214c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8022150:	4618      	mov	r0, r3
 8022152:	f7ff ff5d 	bl	8022010 <read_chunk_data_in_flash>
		sha3(buff_file,1024, &buff_hash[i], 64);
 8022156:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 802215a:	019b      	lsls	r3, r3, #6
 802215c:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 8022160:	441a      	add	r2, r3
 8022162:	f107 0014 	add.w	r0, r7, #20
 8022166:	2340      	movs	r3, #64	; 0x40
 8022168:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802216c:	f00d ff73 	bl	8030056 <sha3>
	for(uint16 i = 0;i<round - 1;i++){
 8022170:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8022174:	3301      	adds	r3, #1
 8022176:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 802217a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 802217e:	3b01      	subs	r3, #1
 8022180:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8022184:	429a      	cmp	r2, r3
 8022186:	d3ce      	bcc.n	8022126 <tree_hash_on_flash+0xd2>
	}

	uint8_t buff_file[1024] = {0,};
 8022188:	f207 4314 	addw	r3, r7, #1044	; 0x414
 802218c:	2200      	movs	r2, #0
 802218e:	601a      	str	r2, [r3, #0]
 8022190:	3304      	adds	r3, #4
 8022192:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8022196:	2100      	movs	r1, #0
 8022198:	4618      	mov	r0, r3
 802219a:	f018 fd49 	bl	803ac30 <memset>
	read_chunk_data_in_flash(buff_file, BaseAddress + (round-1)*1024, size%1024);
 802219e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80221a2:	3b01      	subs	r3, #1
 80221a4:	029a      	lsls	r2, r3, #10
 80221a6:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 80221aa:	18d1      	adds	r1, r2, r3
 80221ac:	1d3b      	adds	r3, r7, #4
 80221ae:	681b      	ldr	r3, [r3, #0]
 80221b0:	b29b      	uxth	r3, r3
 80221b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80221b6:	b29a      	uxth	r2, r3
 80221b8:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80221bc:	4618      	mov	r0, r3
 80221be:	f7ff ff27 	bl	8022010 <read_chunk_data_in_flash>

	sha3(buff_file, size%1024, &buff_hash[round-1], 64);
 80221c2:	1d3b      	adds	r3, r7, #4
 80221c4:	681b      	ldr	r3, [r3, #0]
 80221c6:	f3c3 0109 	ubfx	r1, r3, #0, #10
 80221ca:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80221ce:	3b01      	subs	r3, #1
 80221d0:	019b      	lsls	r3, r3, #6
 80221d2:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 80221d6:	441a      	add	r2, r3
 80221d8:	f207 4014 	addw	r0, r7, #1044	; 0x414
 80221dc:	2340      	movs	r3, #64	; 0x40
 80221de:	f00d ff3a 	bl	8030056 <sha3>


	uint8_t all_of_hash[round*64];
 80221e2:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80221e6:	019c      	lsls	r4, r3, #6
 80221e8:	466b      	mov	r3, sp
 80221ea:	461e      	mov	r6, r3
 80221ec:	4623      	mov	r3, r4
 80221ee:	3b01      	subs	r3, #1
 80221f0:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
 80221f4:	4620      	mov	r0, r4
 80221f6:	f04f 0100 	mov.w	r1, #0
 80221fa:	f04f 0200 	mov.w	r2, #0
 80221fe:	f04f 0300 	mov.w	r3, #0
 8022202:	00cb      	lsls	r3, r1, #3
 8022204:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8022208:	00c2      	lsls	r2, r0, #3
 802220a:	4620      	mov	r0, r4
 802220c:	f04f 0100 	mov.w	r1, #0
 8022210:	f04f 0200 	mov.w	r2, #0
 8022214:	f04f 0300 	mov.w	r3, #0
 8022218:	00cb      	lsls	r3, r1, #3
 802221a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 802221e:	00c2      	lsls	r2, r0, #3
 8022220:	1de3      	adds	r3, r4, #7
 8022222:	08db      	lsrs	r3, r3, #3
 8022224:	00db      	lsls	r3, r3, #3
 8022226:	ebad 0d03 	sub.w	sp, sp, r3
 802222a:	466b      	mov	r3, sp
 802222c:	3300      	adds	r3, #0
 802222e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	for(uint16 i = 0; i< round; i++){
 8022232:	2300      	movs	r3, #0
 8022234:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
 8022238:	e024      	b.n	8022284 <tree_hash_on_flash+0x230>
		for(uint16 j = 0;j<64;j++){
 802223a:	2300      	movs	r3, #0
 802223c:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8022240:	e017      	b.n	8022272 <tree_hash_on_flash+0x21e>
			all_of_hash[i*64+j] = buff_hash[i][j];
 8022242:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8022246:	019a      	lsls	r2, r3, #6
 8022248:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 802224c:	4413      	add	r3, r2
 802224e:	f8d7 181c 	ldr.w	r1, [r7, #2076]	; 0x81c
 8022252:	f8d7 2830 	ldr.w	r2, [r7, #2096]	; 0x830
 8022256:	0192      	lsls	r2, r2, #6
 8022258:	4411      	add	r1, r2
 802225a:	f8d7 2834 	ldr.w	r2, [r7, #2100]	; 0x834
 802225e:	440a      	add	r2, r1
 8022260:	7811      	ldrb	r1, [r2, #0]
 8022262:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8022266:	54d1      	strb	r1, [r2, r3]
		for(uint16 j = 0;j<64;j++){
 8022268:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 802226c:	3301      	adds	r3, #1
 802226e:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8022272:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8022276:	2b3f      	cmp	r3, #63	; 0x3f
 8022278:	d9e3      	bls.n	8022242 <tree_hash_on_flash+0x1ee>
	for(uint16 i = 0; i< round; i++){
 802227a:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 802227e:	3301      	adds	r3, #1
 8022280:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
 8022284:	f8d7 2830 	ldr.w	r2, [r7, #2096]	; 0x830
 8022288:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 802228c:	429a      	cmp	r2, r3
 802228e:	d3d4      	bcc.n	802223a <tree_hash_on_flash+0x1e6>
		}
	}

	sha3(all_of_hash, round*64, md, 64);
 8022290:	f8d7 0814 	ldr.w	r0, [r7, #2068]	; 0x814
 8022294:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8022298:	0199      	lsls	r1, r3, #6
 802229a:	f107 0208 	add.w	r2, r7, #8
 802229e:	2340      	movs	r3, #64	; 0x40
 80222a0:	6812      	ldr	r2, [r2, #0]
 80222a2:	f00d fed8 	bl	8030056 <sha3>


	return HAL_OK;
 80222a6:	2300      	movs	r3, #0
 80222a8:	46b5      	mov	sp, r6
 80222aa:	46ad      	mov	sp, r5
}
 80222ac:	4618      	mov	r0, r3
 80222ae:	f607 073c 	addw	r7, r7, #2108	; 0x83c
 80222b2:	46bd      	mov	sp, r7
 80222b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80222b6:	bf00      	nop
 80222b8:	08020000 	.word	0x08020000
 80222bc:	08060000 	.word	0x08060000
 80222c0:	080a0000 	.word	0x080a0000

080222c4 <W25qxx_Spi>:
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t	W25qxx_Spi(uint8_t	Data)
{
 80222c4:	b580      	push	{r7, lr}
 80222c6:	b086      	sub	sp, #24
 80222c8:	af02      	add	r7, sp, #8
 80222ca:	4603      	mov	r3, r0
 80222cc:	71fb      	strb	r3, [r7, #7]
	uint8_t	ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 80222ce:	f107 020f 	add.w	r2, r7, #15
 80222d2:	1df9      	adds	r1, r7, #7
 80222d4:	2364      	movs	r3, #100	; 0x64
 80222d6:	9300      	str	r3, [sp, #0]
 80222d8:	2301      	movs	r3, #1
 80222da:	4804      	ldr	r0, [pc, #16]	; (80222ec <W25qxx_Spi+0x28>)
 80222dc:	f013 fa34 	bl	8035748 <HAL_SPI_TransmitReceive>
	return ret;
 80222e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80222e2:	4618      	mov	r0, r3
 80222e4:	3710      	adds	r7, #16
 80222e6:	46bd      	mov	sp, r7
 80222e8:	bd80      	pop	{r7, pc}
 80222ea:	bf00      	nop
 80222ec:	2000049c 	.word	0x2000049c

080222f0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80222f0:	b580      	push	{r7, lr}
 80222f2:	b084      	sub	sp, #16
 80222f4:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80222f6:	2300      	movs	r3, #0
 80222f8:	60fb      	str	r3, [r7, #12]
 80222fa:	2300      	movs	r3, #0
 80222fc:	60bb      	str	r3, [r7, #8]
 80222fe:	2300      	movs	r3, #0
 8022300:	607b      	str	r3, [r7, #4]
 8022302:	2300      	movs	r3, #0
 8022304:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8022306:	2200      	movs	r2, #0
 8022308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802230c:	4813      	ldr	r0, [pc, #76]	; (802235c <W25qxx_ReadID+0x6c>)
 802230e:	f011 fb33 	bl	8033978 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8022312:	209f      	movs	r0, #159	; 0x9f
 8022314:	f7ff ffd6 	bl	80222c4 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022318:	20a5      	movs	r0, #165	; 0xa5
 802231a:	f7ff ffd3 	bl	80222c4 <W25qxx_Spi>
 802231e:	4603      	mov	r3, r0
 8022320:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022322:	20a5      	movs	r0, #165	; 0xa5
 8022324:	f7ff ffce 	bl	80222c4 <W25qxx_Spi>
 8022328:	4603      	mov	r3, r0
 802232a:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 802232c:	20a5      	movs	r0, #165	; 0xa5
 802232e:	f7ff ffc9 	bl	80222c4 <W25qxx_Spi>
 8022332:	4603      	mov	r3, r0
 8022334:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8022336:	2201      	movs	r2, #1
 8022338:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802233c:	4807      	ldr	r0, [pc, #28]	; (802235c <W25qxx_ReadID+0x6c>)
 802233e:	f011 fb1b 	bl	8033978 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8022342:	68bb      	ldr	r3, [r7, #8]
 8022344:	041a      	lsls	r2, r3, #16
 8022346:	687b      	ldr	r3, [r7, #4]
 8022348:	021b      	lsls	r3, r3, #8
 802234a:	4313      	orrs	r3, r2
 802234c:	683a      	ldr	r2, [r7, #0]
 802234e:	4313      	orrs	r3, r2
 8022350:	60fb      	str	r3, [r7, #12]
  return Temp;
 8022352:	68fb      	ldr	r3, [r7, #12]
}
 8022354:	4618      	mov	r0, r3
 8022356:	3710      	adds	r7, #16
 8022358:	46bd      	mov	sp, r7
 802235a:	bd80      	pop	{r7, pc}
 802235c:	40020400 	.word	0x40020400

08022360 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8022360:	b590      	push	{r4, r7, lr}
 8022362:	b083      	sub	sp, #12
 8022364:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8022366:	2200      	movs	r2, #0
 8022368:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802236c:	4816      	ldr	r0, [pc, #88]	; (80223c8 <W25qxx_ReadUniqID+0x68>)
 802236e:	f011 fb03 	bl	8033978 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8022372:	204b      	movs	r0, #75	; 0x4b
 8022374:	f7ff ffa6 	bl	80222c4 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8022378:	2300      	movs	r3, #0
 802237a:	71fb      	strb	r3, [r7, #7]
 802237c:	e005      	b.n	802238a <W25qxx_ReadUniqID+0x2a>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 802237e:	20a5      	movs	r0, #165	; 0xa5
 8022380:	f7ff ffa0 	bl	80222c4 <W25qxx_Spi>
	for(uint8_t	i=0;i<4;i++)
 8022384:	79fb      	ldrb	r3, [r7, #7]
 8022386:	3301      	adds	r3, #1
 8022388:	71fb      	strb	r3, [r7, #7]
 802238a:	79fb      	ldrb	r3, [r7, #7]
 802238c:	2b03      	cmp	r3, #3
 802238e:	d9f6      	bls.n	802237e <W25qxx_ReadUniqID+0x1e>
	for(uint8_t	i=0;i<8;i++)
 8022390:	2300      	movs	r3, #0
 8022392:	71bb      	strb	r3, [r7, #6]
 8022394:	e00b      	b.n	80223ae <W25qxx_ReadUniqID+0x4e>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022396:	79bc      	ldrb	r4, [r7, #6]
 8022398:	20a5      	movs	r0, #165	; 0xa5
 802239a:	f7ff ff93 	bl	80222c4 <W25qxx_Spi>
 802239e:	4603      	mov	r3, r0
 80223a0:	461a      	mov	r2, r3
 80223a2:	4b0a      	ldr	r3, [pc, #40]	; (80223cc <W25qxx_ReadUniqID+0x6c>)
 80223a4:	4423      	add	r3, r4
 80223a6:	705a      	strb	r2, [r3, #1]
	for(uint8_t	i=0;i<8;i++)
 80223a8:	79bb      	ldrb	r3, [r7, #6]
 80223aa:	3301      	adds	r3, #1
 80223ac:	71bb      	strb	r3, [r7, #6]
 80223ae:	79bb      	ldrb	r3, [r7, #6]
 80223b0:	2b07      	cmp	r3, #7
 80223b2:	d9f0      	bls.n	8022396 <W25qxx_ReadUniqID+0x36>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80223b4:	2201      	movs	r2, #1
 80223b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80223ba:	4803      	ldr	r0, [pc, #12]	; (80223c8 <W25qxx_ReadUniqID+0x68>)
 80223bc:	f011 fadc 	bl	8033978 <HAL_GPIO_WritePin>
}
 80223c0:	bf00      	nop
 80223c2:	370c      	adds	r7, #12
 80223c4:	46bd      	mov	sp, r7
 80223c6:	bd90      	pop	{r4, r7, pc}
 80223c8:	40020400 	.word	0x40020400
 80223cc:	20000474 	.word	0x20000474

080223d0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80223d0:	b580      	push	{r7, lr}
 80223d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80223d4:	2200      	movs	r2, #0
 80223d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80223da:	4808      	ldr	r0, [pc, #32]	; (80223fc <W25qxx_WriteEnable+0x2c>)
 80223dc:	f011 facc 	bl	8033978 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 80223e0:	2006      	movs	r0, #6
 80223e2:	f7ff ff6f 	bl	80222c4 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80223e6:	2201      	movs	r2, #1
 80223e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80223ec:	4803      	ldr	r0, [pc, #12]	; (80223fc <W25qxx_WriteEnable+0x2c>)
 80223ee:	f011 fac3 	bl	8033978 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80223f2:	2001      	movs	r0, #1
 80223f4:	f010 fc84 	bl	8032d00 <HAL_Delay>
}
 80223f8:	bf00      	nop
 80223fa:	bd80      	pop	{r7, pc}
 80223fc:	40020400 	.word	0x40020400

08022400 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t	SelectStatusRegister_1_2_3)
{
 8022400:	b580      	push	{r7, lr}
 8022402:	b084      	sub	sp, #16
 8022404:	af00      	add	r7, sp, #0
 8022406:	4603      	mov	r3, r0
 8022408:	71fb      	strb	r3, [r7, #7]
	uint8_t	status=0;
 802240a:	2300      	movs	r3, #0
 802240c:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 802240e:	2200      	movs	r2, #0
 8022410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8022414:	481c      	ldr	r0, [pc, #112]	; (8022488 <W25qxx_ReadStatusRegister+0x88>)
 8022416:	f011 faaf 	bl	8033978 <HAL_GPIO_WritePin>
	if(SelectStatusRegister_1_2_3==1)
 802241a:	79fb      	ldrb	r3, [r7, #7]
 802241c:	2b01      	cmp	r3, #1
 802241e:	d10c      	bne.n	802243a <W25qxx_ReadStatusRegister+0x3a>
	{
		W25qxx_Spi(0x05);
 8022420:	2005      	movs	r0, #5
 8022422:	f7ff ff4f 	bl	80222c4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022426:	20a5      	movs	r0, #165	; 0xa5
 8022428:	f7ff ff4c 	bl	80222c4 <W25qxx_Spi>
 802242c:	4603      	mov	r3, r0
 802242e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8022430:	4a16      	ldr	r2, [pc, #88]	; (802248c <W25qxx_ReadStatusRegister+0x8c>)
 8022432:	7bfb      	ldrb	r3, [r7, #15]
 8022434:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8022438:	e01b      	b.n	8022472 <W25qxx_ReadStatusRegister+0x72>
	}
	else if(SelectStatusRegister_1_2_3==2)
 802243a:	79fb      	ldrb	r3, [r7, #7]
 802243c:	2b02      	cmp	r3, #2
 802243e:	d10c      	bne.n	802245a <W25qxx_ReadStatusRegister+0x5a>
	{
		W25qxx_Spi(0x35);
 8022440:	2035      	movs	r0, #53	; 0x35
 8022442:	f7ff ff3f 	bl	80222c4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022446:	20a5      	movs	r0, #165	; 0xa5
 8022448:	f7ff ff3c 	bl	80222c4 <W25qxx_Spi>
 802244c:	4603      	mov	r3, r0
 802244e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8022450:	4a0e      	ldr	r2, [pc, #56]	; (802248c <W25qxx_ReadStatusRegister+0x8c>)
 8022452:	7bfb      	ldrb	r3, [r7, #15]
 8022454:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8022458:	e00b      	b.n	8022472 <W25qxx_ReadStatusRegister+0x72>
	}
	else
	{
		W25qxx_Spi(0x15);
 802245a:	2015      	movs	r0, #21
 802245c:	f7ff ff32 	bl	80222c4 <W25qxx_Spi>
		status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022460:	20a5      	movs	r0, #165	; 0xa5
 8022462:	f7ff ff2f 	bl	80222c4 <W25qxx_Spi>
 8022466:	4603      	mov	r3, r0
 8022468:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 802246a:	4a08      	ldr	r2, [pc, #32]	; (802248c <W25qxx_ReadStatusRegister+0x8c>)
 802246c:	7bfb      	ldrb	r3, [r7, #15]
 802246e:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8022472:	2201      	movs	r2, #1
 8022474:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8022478:	4803      	ldr	r0, [pc, #12]	; (8022488 <W25qxx_ReadStatusRegister+0x88>)
 802247a:	f011 fa7d 	bl	8033978 <HAL_GPIO_WritePin>
	return status;
 802247e:	7bfb      	ldrb	r3, [r7, #15]
}
 8022480:	4618      	mov	r0, r3
 8022482:	3710      	adds	r7, #16
 8022484:	46bd      	mov	sp, r7
 8022486:	bd80      	pop	{r7, pc}
 8022488:	40020400 	.word	0x40020400
 802248c:	20000474 	.word	0x20000474

08022490 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8022490:	b580      	push	{r7, lr}
 8022492:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8022494:	2001      	movs	r0, #1
 8022496:	f010 fc33 	bl	8032d00 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 802249a:	2200      	movs	r2, #0
 802249c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80224a0:	480f      	ldr	r0, [pc, #60]	; (80224e0 <W25qxx_WaitForWriteEnd+0x50>)
 80224a2:	f011 fa69 	bl	8033978 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80224a6:	2005      	movs	r0, #5
 80224a8:	f7ff ff0c 	bl	80222c4 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80224ac:	20a5      	movs	r0, #165	; 0xa5
 80224ae:	f7ff ff09 	bl	80222c4 <W25qxx_Spi>
 80224b2:	4603      	mov	r3, r0
 80224b4:	461a      	mov	r2, r3
 80224b6:	4b0b      	ldr	r3, [pc, #44]	; (80224e4 <W25qxx_WaitForWriteEnd+0x54>)
 80224b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80224bc:	2001      	movs	r0, #1
 80224be:	f010 fc1f 	bl	8032d00 <HAL_Delay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80224c2:	4b08      	ldr	r3, [pc, #32]	; (80224e4 <W25qxx_WaitForWriteEnd+0x54>)
 80224c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80224c8:	f003 0301 	and.w	r3, r3, #1
 80224cc:	2b00      	cmp	r3, #0
 80224ce:	d1ed      	bne.n	80224ac <W25qxx_WaitForWriteEnd+0x1c>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80224d0:	2201      	movs	r2, #1
 80224d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80224d6:	4802      	ldr	r0, [pc, #8]	; (80224e0 <W25qxx_WaitForWriteEnd+0x50>)
 80224d8:	f011 fa4e 	bl	8033978 <HAL_GPIO_WritePin>
}
 80224dc:	bf00      	nop
 80224de:	bd80      	pop	{r7, pc}
 80224e0:	40020400 	.word	0x40020400
 80224e4:	20000474 	.word	0x20000474

080224e8 <W25qxx_Init>:
//###################################################################################################################
bool	W25qxx_Init(void)
{
 80224e8:	b580      	push	{r7, lr}
 80224ea:	b082      	sub	sp, #8
 80224ec:	af00      	add	r7, sp, #0
	w25qxx.Lock=1;
 80224ee:	4b60      	ldr	r3, [pc, #384]	; (8022670 <W25qxx_Init+0x188>)
 80224f0:	2201      	movs	r2, #1
 80224f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while(HAL_GetTick()<100)
 80224f6:	e002      	b.n	80224fe <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80224f8:	2001      	movs	r0, #1
 80224fa:	f010 fc01 	bl	8032d00 <HAL_Delay>
	while(HAL_GetTick()<100)
 80224fe:	f010 fbf3 	bl	8032ce8 <HAL_GetTick>
 8022502:	4603      	mov	r3, r0
 8022504:	2b63      	cmp	r3, #99	; 0x63
 8022506:	d9f7      	bls.n	80224f8 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8022508:	2201      	movs	r2, #1
 802250a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802250e:	4859      	ldr	r0, [pc, #356]	; (8022674 <W25qxx_Init+0x18c>)
 8022510:	f011 fa32 	bl	8033978 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 8022514:	2064      	movs	r0, #100	; 0x64
 8022516:	f010 fbf3 	bl	8032d00 <HAL_Delay>
	uint32_t	id;
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id=W25qxx_ReadID();
 802251a:	f7ff fee9 	bl	80222f0 <W25qxx_ReadID>
 802251e:	6078      	str	r0, [r7, #4]

	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch(id&0x0000FFFF)
 8022520:	687b      	ldr	r3, [r7, #4]
 8022522:	b29b      	uxth	r3, r3
 8022524:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8022528:	3b11      	subs	r3, #17
 802252a:	2b09      	cmp	r3, #9
 802252c:	d85f      	bhi.n	80225ee <W25qxx_Init+0x106>
 802252e:	a201      	add	r2, pc, #4	; (adr r2, 8022534 <W25qxx_Init+0x4c>)
 8022530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022534:	080225e1 	.word	0x080225e1
 8022538:	080225d3 	.word	0x080225d3
 802253c:	080225c5 	.word	0x080225c5
 8022540:	080225b7 	.word	0x080225b7
 8022544:	080225a9 	.word	0x080225a9
 8022548:	0802259b 	.word	0x0802259b
 802254c:	0802258d 	.word	0x0802258d
 8022550:	0802257d 	.word	0x0802257d
 8022554:	0802256d 	.word	0x0802256d
 8022558:	0802255d 	.word	0x0802255d
	{
		case 0x401A:	// 	w25q512
			w25qxx.ID=W25Q512;
 802255c:	4b44      	ldr	r3, [pc, #272]	; (8022670 <W25qxx_Init+0x188>)
 802255e:	220a      	movs	r2, #10
 8022560:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=1024;
 8022562:	4b43      	ldr	r3, [pc, #268]	; (8022670 <W25qxx_Init+0x188>)
 8022564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8022568:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 802256a:	e046      	b.n	80225fa <W25qxx_Init+0x112>
		case 0x4019:	// 	w25q256
			w25qxx.ID=W25Q256;
 802256c:	4b40      	ldr	r3, [pc, #256]	; (8022670 <W25qxx_Init+0x188>)
 802256e:	2209      	movs	r2, #9
 8022570:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=512;
 8022572:	4b3f      	ldr	r3, [pc, #252]	; (8022670 <W25qxx_Init+0x188>)
 8022574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022578:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 802257a:	e03e      	b.n	80225fa <W25qxx_Init+0x112>
		case 0x4018:	// 	w25q128
			w25qxx.ID=W25Q128;
 802257c:	4b3c      	ldr	r3, [pc, #240]	; (8022670 <W25qxx_Init+0x188>)
 802257e:	2208      	movs	r2, #8
 8022580:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=256;
 8022582:	4b3b      	ldr	r3, [pc, #236]	; (8022670 <W25qxx_Init+0x188>)
 8022584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8022588:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 802258a:	e036      	b.n	80225fa <W25qxx_Init+0x112>
		case 0x4017:	//	w25q64
			w25qxx.ID=W25Q64;
 802258c:	4b38      	ldr	r3, [pc, #224]	; (8022670 <W25qxx_Init+0x188>)
 802258e:	2207      	movs	r2, #7
 8022590:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=128;
 8022592:	4b37      	ldr	r3, [pc, #220]	; (8022670 <W25qxx_Init+0x188>)
 8022594:	2280      	movs	r2, #128	; 0x80
 8022596:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 8022598:	e02f      	b.n	80225fa <W25qxx_Init+0x112>
		case 0x4016:	//	w25q32
			w25qxx.ID=W25Q32;
 802259a:	4b35      	ldr	r3, [pc, #212]	; (8022670 <W25qxx_Init+0x188>)
 802259c:	2206      	movs	r2, #6
 802259e:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=64;
 80225a0:	4b33      	ldr	r3, [pc, #204]	; (8022670 <W25qxx_Init+0x188>)
 80225a2:	2240      	movs	r2, #64	; 0x40
 80225a4:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 80225a6:	e028      	b.n	80225fa <W25qxx_Init+0x112>
		case 0x4015:	//	w25q16
			w25qxx.ID=W25Q16;
 80225a8:	4b31      	ldr	r3, [pc, #196]	; (8022670 <W25qxx_Init+0x188>)
 80225aa:	2205      	movs	r2, #5
 80225ac:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=32;
 80225ae:	4b30      	ldr	r3, [pc, #192]	; (8022670 <W25qxx_Init+0x188>)
 80225b0:	2220      	movs	r2, #32
 80225b2:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 80225b4:	e021      	b.n	80225fa <W25qxx_Init+0x112>
		case 0x4014:	//	w25q80
			w25qxx.ID=W25Q80;
 80225b6:	4b2e      	ldr	r3, [pc, #184]	; (8022670 <W25qxx_Init+0x188>)
 80225b8:	2204      	movs	r2, #4
 80225ba:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=16;
 80225bc:	4b2c      	ldr	r3, [pc, #176]	; (8022670 <W25qxx_Init+0x188>)
 80225be:	2210      	movs	r2, #16
 80225c0:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 80225c2:	e01a      	b.n	80225fa <W25qxx_Init+0x112>
		case 0x4013:	//	w25q40
			w25qxx.ID=W25Q40;
 80225c4:	4b2a      	ldr	r3, [pc, #168]	; (8022670 <W25qxx_Init+0x188>)
 80225c6:	2203      	movs	r2, #3
 80225c8:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=8;
 80225ca:	4b29      	ldr	r3, [pc, #164]	; (8022670 <W25qxx_Init+0x188>)
 80225cc:	2208      	movs	r2, #8
 80225ce:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 80225d0:	e013      	b.n	80225fa <W25qxx_Init+0x112>
		case 0x4012:	//	w25q20
			w25qxx.ID=W25Q20;
 80225d2:	4b27      	ldr	r3, [pc, #156]	; (8022670 <W25qxx_Init+0x188>)
 80225d4:	2202      	movs	r2, #2
 80225d6:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=4;
 80225d8:	4b25      	ldr	r3, [pc, #148]	; (8022670 <W25qxx_Init+0x188>)
 80225da:	2204      	movs	r2, #4
 80225dc:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 80225de:	e00c      	b.n	80225fa <W25qxx_Init+0x112>
		case 0x4011:	//	w25q10
			w25qxx.ID=W25Q10;
 80225e0:	4b23      	ldr	r3, [pc, #140]	; (8022670 <W25qxx_Init+0x188>)
 80225e2:	2201      	movs	r2, #1
 80225e4:	701a      	strb	r2, [r3, #0]
			w25qxx.BlockCount=2;
 80225e6:	4b22      	ldr	r3, [pc, #136]	; (8022670 <W25qxx_Init+0x188>)
 80225e8:	2202      	movs	r2, #2
 80225ea:	61da      	str	r2, [r3, #28]
			#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 80225ec:	e005      	b.n	80225fa <W25qxx_Init+0x112>
		default:
				#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
			w25qxx.Lock=0;
 80225ee:	4b20      	ldr	r3, [pc, #128]	; (8022670 <W25qxx_Init+0x188>)
 80225f0:	2200      	movs	r2, #0
 80225f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			return false;
 80225f6:	2300      	movs	r3, #0
 80225f8:	e036      	b.n	8022668 <W25qxx_Init+0x180>

	}
	w25qxx.PageSize=256;
 80225fa:	4b1d      	ldr	r3, [pc, #116]	; (8022670 <W25qxx_Init+0x188>)
 80225fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8022600:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize=0x1000;
 8022602:	4b1b      	ldr	r3, [pc, #108]	; (8022670 <W25qxx_Init+0x188>)
 8022604:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8022608:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount=w25qxx.BlockCount*16;
 802260a:	4b19      	ldr	r3, [pc, #100]	; (8022670 <W25qxx_Init+0x188>)
 802260c:	69db      	ldr	r3, [r3, #28]
 802260e:	011b      	lsls	r3, r3, #4
 8022610:	4a17      	ldr	r2, [pc, #92]	; (8022670 <W25qxx_Init+0x188>)
 8022612:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8022614:	4b16      	ldr	r3, [pc, #88]	; (8022670 <W25qxx_Init+0x188>)
 8022616:	695b      	ldr	r3, [r3, #20]
 8022618:	4a15      	ldr	r2, [pc, #84]	; (8022670 <W25qxx_Init+0x188>)
 802261a:	6912      	ldr	r2, [r2, #16]
 802261c:	fb02 f303 	mul.w	r3, r2, r3
 8022620:	4a13      	ldr	r2, [pc, #76]	; (8022670 <W25qxx_Init+0x188>)
 8022622:	8952      	ldrh	r2, [r2, #10]
 8022624:	fbb3 f3f2 	udiv	r3, r3, r2
 8022628:	4a11      	ldr	r2, [pc, #68]	; (8022670 <W25qxx_Init+0x188>)
 802262a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize=w25qxx.SectorSize*16;
 802262c:	4b10      	ldr	r3, [pc, #64]	; (8022670 <W25qxx_Init+0x188>)
 802262e:	691b      	ldr	r3, [r3, #16]
 8022630:	011b      	lsls	r3, r3, #4
 8022632:	4a0f      	ldr	r2, [pc, #60]	; (8022670 <W25qxx_Init+0x188>)
 8022634:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8022636:	4b0e      	ldr	r3, [pc, #56]	; (8022670 <W25qxx_Init+0x188>)
 8022638:	695b      	ldr	r3, [r3, #20]
 802263a:	4a0d      	ldr	r2, [pc, #52]	; (8022670 <W25qxx_Init+0x188>)
 802263c:	6912      	ldr	r2, [r2, #16]
 802263e:	fb02 f303 	mul.w	r3, r2, r3
 8022642:	0a9b      	lsrs	r3, r3, #10
 8022644:	4a0a      	ldr	r2, [pc, #40]	; (8022670 <W25qxx_Init+0x188>)
 8022646:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8022648:	f7ff fe8a 	bl	8022360 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 802264c:	2001      	movs	r0, #1
 802264e:	f7ff fed7 	bl	8022400 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8022652:	2002      	movs	r0, #2
 8022654:	f7ff fed4 	bl	8022400 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8022658:	2003      	movs	r0, #3
 802265a:	f7ff fed1 	bl	8022400 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock=0;
 802265e:	4b04      	ldr	r3, [pc, #16]	; (8022670 <W25qxx_Init+0x188>)
 8022660:	2200      	movs	r2, #0
 8022662:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8022666:	2301      	movs	r3, #1
}
 8022668:	4618      	mov	r0, r3
 802266a:	3708      	adds	r7, #8
 802266c:	46bd      	mov	sp, r7
 802266e:	bd80      	pop	{r7, pc}
 8022670:	20000474 	.word	0x20000474
 8022674:	40020400 	.word	0x40020400

08022678 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock=0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8022678:	b580      	push	{r7, lr}
 802267a:	b082      	sub	sp, #8
 802267c:	af00      	add	r7, sp, #0
 802267e:	6078      	str	r0, [r7, #4]
	while(w25qxx.Lock==1)
 8022680:	e002      	b.n	8022688 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8022682:	2001      	movs	r0, #1
 8022684:	f010 fb3c 	bl	8032d00 <HAL_Delay>
	while(w25qxx.Lock==1)
 8022688:	4b24      	ldr	r3, [pc, #144]	; (802271c <W25qxx_EraseSector+0xa4>)
 802268a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 802268e:	2b01      	cmp	r3, #1
 8022690:	d0f7      	beq.n	8022682 <W25qxx_EraseSector+0xa>
	w25qxx.Lock=1;
 8022692:	4b22      	ldr	r3, [pc, #136]	; (802271c <W25qxx_EraseSector+0xa4>)
 8022694:	2201      	movs	r2, #1
 8022696:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	#if (_W25QXX_DEBUG==1)
	uint32_t	StartTime=HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n",SectorAddr);
	#endif
	W25qxx_WaitForWriteEnd();
 802269a:	f7ff fef9 	bl	8022490 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 802269e:	4b1f      	ldr	r3, [pc, #124]	; (802271c <W25qxx_EraseSector+0xa4>)
 80226a0:	691a      	ldr	r2, [r3, #16]
 80226a2:	687b      	ldr	r3, [r7, #4]
 80226a4:	fb02 f303 	mul.w	r3, r2, r3
 80226a8:	607b      	str	r3, [r7, #4]
  W25qxx_WriteEnable();
 80226aa:	f7ff fe91 	bl	80223d0 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80226ae:	2200      	movs	r2, #0
 80226b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80226b4:	481a      	ldr	r0, [pc, #104]	; (8022720 <W25qxx_EraseSector+0xa8>)
 80226b6:	f011 f95f 	bl	8033978 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x20);
 80226ba:	2020      	movs	r0, #32
 80226bc:	f7ff fe02 	bl	80222c4 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 80226c0:	4b16      	ldr	r3, [pc, #88]	; (802271c <W25qxx_EraseSector+0xa4>)
 80226c2:	781b      	ldrb	r3, [r3, #0]
 80226c4:	2b08      	cmp	r3, #8
 80226c6:	d905      	bls.n	80226d4 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80226c8:	687b      	ldr	r3, [r7, #4]
 80226ca:	0e1b      	lsrs	r3, r3, #24
 80226cc:	b2db      	uxtb	r3, r3
 80226ce:	4618      	mov	r0, r3
 80226d0:	f7ff fdf8 	bl	80222c4 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80226d4:	687b      	ldr	r3, [r7, #4]
 80226d6:	0c1b      	lsrs	r3, r3, #16
 80226d8:	b2db      	uxtb	r3, r3
 80226da:	4618      	mov	r0, r3
 80226dc:	f7ff fdf2 	bl	80222c4 <W25qxx_Spi>
  W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80226e0:	687b      	ldr	r3, [r7, #4]
 80226e2:	0a1b      	lsrs	r3, r3, #8
 80226e4:	b2db      	uxtb	r3, r3
 80226e6:	4618      	mov	r0, r3
 80226e8:	f7ff fdec 	bl	80222c4 <W25qxx_Spi>
  W25qxx_Spi(SectorAddr & 0xFF);
 80226ec:	687b      	ldr	r3, [r7, #4]
 80226ee:	b2db      	uxtb	r3, r3
 80226f0:	4618      	mov	r0, r3
 80226f2:	f7ff fde7 	bl	80222c4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80226f6:	2201      	movs	r2, #1
 80226f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80226fc:	4808      	ldr	r0, [pc, #32]	; (8022720 <W25qxx_EraseSector+0xa8>)
 80226fe:	f011 f93b 	bl	8033978 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 8022702:	f7ff fec5 	bl	8022490 <W25qxx_WaitForWriteEnd>
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx EraseSector done after %d ms\r\n",HAL_GetTick()-StartTime);
	#endif
	W25qxx_Delay(1);
 8022706:	2001      	movs	r0, #1
 8022708:	f010 fafa 	bl	8032d00 <HAL_Delay>
	w25qxx.Lock=0;
 802270c:	4b03      	ldr	r3, [pc, #12]	; (802271c <W25qxx_EraseSector+0xa4>)
 802270e:	2200      	movs	r2, #0
 8022710:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8022714:	bf00      	nop
 8022716:	3708      	adds	r7, #8
 8022718:	46bd      	mov	sp, r7
 802271a:	bd80      	pop	{r7, pc}
 802271c:	20000474 	.word	0x20000474
 8022720:	40020400 	.word	0x40020400

08022724 <W25qxx_SectorToPage>:
{
	return ((SectorAddress*w25qxx.SectorSize)/w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t	W25qxx_SectorToPage(uint32_t	SectorAddress)
{
 8022724:	b480      	push	{r7}
 8022726:	b083      	sub	sp, #12
 8022728:	af00      	add	r7, sp, #0
 802272a:	6078      	str	r0, [r7, #4]
	return (SectorAddress*w25qxx.SectorSize)/w25qxx.PageSize;
 802272c:	4b07      	ldr	r3, [pc, #28]	; (802274c <W25qxx_SectorToPage+0x28>)
 802272e:	691b      	ldr	r3, [r3, #16]
 8022730:	687a      	ldr	r2, [r7, #4]
 8022732:	fb02 f303 	mul.w	r3, r2, r3
 8022736:	4a05      	ldr	r2, [pc, #20]	; (802274c <W25qxx_SectorToPage+0x28>)
 8022738:	8952      	ldrh	r2, [r2, #10]
 802273a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 802273e:	4618      	mov	r0, r3
 8022740:	370c      	adds	r7, #12
 8022742:	46bd      	mov	sp, r7
 8022744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022748:	4770      	bx	lr
 802274a:	bf00      	nop
 802274c:	20000474 	.word	0x20000474

08022750 <W25qxx_WritePage>:
	#endif
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_WritePage(uint8_t *pBuffer	,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 8022750:	b580      	push	{r7, lr}
 8022752:	b084      	sub	sp, #16
 8022754:	af00      	add	r7, sp, #0
 8022756:	60f8      	str	r0, [r7, #12]
 8022758:	60b9      	str	r1, [r7, #8]
 802275a:	607a      	str	r2, [r7, #4]
 802275c:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 802275e:	e002      	b.n	8022766 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8022760:	2001      	movs	r0, #1
 8022762:	f010 facd 	bl	8032d00 <HAL_Delay>
	while(w25qxx.Lock==1)
 8022766:	4b38      	ldr	r3, [pc, #224]	; (8022848 <W25qxx_WritePage+0xf8>)
 8022768:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 802276c:	2b01      	cmp	r3, #1
 802276e:	d0f7      	beq.n	8022760 <W25qxx_WritePage+0x10>
	w25qxx.Lock=1;
 8022770:	4b35      	ldr	r3, [pc, #212]	; (8022848 <W25qxx_WritePage+0xf8>)
 8022772:	2201      	movs	r2, #1
 8022774:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 8022778:	683a      	ldr	r2, [r7, #0]
 802277a:	687b      	ldr	r3, [r7, #4]
 802277c:	4413      	add	r3, r2
 802277e:	4a32      	ldr	r2, [pc, #200]	; (8022848 <W25qxx_WritePage+0xf8>)
 8022780:	8952      	ldrh	r2, [r2, #10]
 8022782:	4293      	cmp	r3, r2
 8022784:	d802      	bhi.n	802278c <W25qxx_WritePage+0x3c>
 8022786:	683b      	ldr	r3, [r7, #0]
 8022788:	2b00      	cmp	r3, #0
 802278a:	d105      	bne.n	8022798 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 802278c:	4b2e      	ldr	r3, [pc, #184]	; (8022848 <W25qxx_WritePage+0xf8>)
 802278e:	895b      	ldrh	r3, [r3, #10]
 8022790:	461a      	mov	r2, r3
 8022792:	687b      	ldr	r3, [r7, #4]
 8022794:	1ad3      	subs	r3, r2, r3
 8022796:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8022798:	687a      	ldr	r2, [r7, #4]
 802279a:	683b      	ldr	r3, [r7, #0]
 802279c:	4413      	add	r3, r2
 802279e:	4a2a      	ldr	r2, [pc, #168]	; (8022848 <W25qxx_WritePage+0xf8>)
 80227a0:	8952      	ldrh	r2, [r2, #10]
 80227a2:	4293      	cmp	r3, r2
 80227a4:	d905      	bls.n	80227b2 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 80227a6:	4b28      	ldr	r3, [pc, #160]	; (8022848 <W25qxx_WritePage+0xf8>)
 80227a8:	895b      	ldrh	r3, [r3, #10]
 80227aa:	461a      	mov	r2, r3
 80227ac:	687b      	ldr	r3, [r7, #4]
 80227ae:	1ad3      	subs	r3, r2, r3
 80227b0:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif
	W25qxx_WaitForWriteEnd();
 80227b2:	f7ff fe6d 	bl	8022490 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 80227b6:	f7ff fe0b 	bl	80223d0 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80227ba:	2200      	movs	r2, #0
 80227bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80227c0:	4822      	ldr	r0, [pc, #136]	; (802284c <W25qxx_WritePage+0xfc>)
 80227c2:	f011 f8d9 	bl	8033978 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 80227c6:	2002      	movs	r0, #2
 80227c8:	f7ff fd7c 	bl	80222c4 <W25qxx_Spi>
	Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;
 80227cc:	4b1e      	ldr	r3, [pc, #120]	; (8022848 <W25qxx_WritePage+0xf8>)
 80227ce:	895b      	ldrh	r3, [r3, #10]
 80227d0:	461a      	mov	r2, r3
 80227d2:	68bb      	ldr	r3, [r7, #8]
 80227d4:	fb03 f302 	mul.w	r3, r3, r2
 80227d8:	687a      	ldr	r2, [r7, #4]
 80227da:	4413      	add	r3, r2
 80227dc:	60bb      	str	r3, [r7, #8]
	if(w25qxx.ID>=W25Q256)
 80227de:	4b1a      	ldr	r3, [pc, #104]	; (8022848 <W25qxx_WritePage+0xf8>)
 80227e0:	781b      	ldrb	r3, [r3, #0]
 80227e2:	2b08      	cmp	r3, #8
 80227e4:	d905      	bls.n	80227f2 <W25qxx_WritePage+0xa2>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80227e6:	68bb      	ldr	r3, [r7, #8]
 80227e8:	0e1b      	lsrs	r3, r3, #24
 80227ea:	b2db      	uxtb	r3, r3
 80227ec:	4618      	mov	r0, r3
 80227ee:	f7ff fd69 	bl	80222c4 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80227f2:	68bb      	ldr	r3, [r7, #8]
 80227f4:	0c1b      	lsrs	r3, r3, #16
 80227f6:	b2db      	uxtb	r3, r3
 80227f8:	4618      	mov	r0, r3
 80227fa:	f7ff fd63 	bl	80222c4 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80227fe:	68bb      	ldr	r3, [r7, #8]
 8022800:	0a1b      	lsrs	r3, r3, #8
 8022802:	b2db      	uxtb	r3, r3
 8022804:	4618      	mov	r0, r3
 8022806:	f7ff fd5d 	bl	80222c4 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 802280a:	68bb      	ldr	r3, [r7, #8]
 802280c:	b2db      	uxtb	r3, r3
 802280e:	4618      	mov	r0, r3
 8022810:	f7ff fd58 	bl	80222c4 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);
 8022814:	683b      	ldr	r3, [r7, #0]
 8022816:	b29a      	uxth	r2, r3
 8022818:	2364      	movs	r3, #100	; 0x64
 802281a:	68f9      	ldr	r1, [r7, #12]
 802281c:	480c      	ldr	r0, [pc, #48]	; (8022850 <W25qxx_WritePage+0x100>)
 802281e:	f012 fd46 	bl	80352ae <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8022822:	2201      	movs	r2, #1
 8022824:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8022828:	4808      	ldr	r0, [pc, #32]	; (802284c <W25qxx_WritePage+0xfc>)
 802282a:	f011 f8a5 	bl	8033978 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 802282e:	f7ff fe2f 	bl	8022490 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif
	W25qxx_Delay(1);
 8022832:	2001      	movs	r0, #1
 8022834:	f010 fa64 	bl	8032d00 <HAL_Delay>
	w25qxx.Lock=0;
 8022838:	4b03      	ldr	r3, [pc, #12]	; (8022848 <W25qxx_WritePage+0xf8>)
 802283a:	2200      	movs	r2, #0
 802283c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8022840:	bf00      	nop
 8022842:	3710      	adds	r7, #16
 8022844:	46bd      	mov	sp, r7
 8022846:	bd80      	pop	{r7, pc}
 8022848:	20000474 	.word	0x20000474
 802284c:	40020400 	.word	0x40020400
 8022850:	2000049c 	.word	0x2000049c

08022854 <W25qxx_WriteSector>:
//###################################################################################################################
void 	W25qxx_WriteSector(uint8_t *pBuffer	,uint32_t Sector_Address,uint32_t OffsetInByte	,uint32_t NumByteToWrite_up_to_SectorSize)
{
 8022854:	b580      	push	{r7, lr}
 8022856:	b088      	sub	sp, #32
 8022858:	af00      	add	r7, sp, #0
 802285a:	60f8      	str	r0, [r7, #12]
 802285c:	60b9      	str	r1, [r7, #8]
 802285e:	607a      	str	r2, [r7, #4]
 8022860:	603b      	str	r3, [r7, #0]
	if((NumByteToWrite_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToWrite_up_to_SectorSize==0))
 8022862:	4b2c      	ldr	r3, [pc, #176]	; (8022914 <W25qxx_WriteSector+0xc0>)
 8022864:	691b      	ldr	r3, [r3, #16]
 8022866:	683a      	ldr	r2, [r7, #0]
 8022868:	429a      	cmp	r2, r3
 802286a:	d802      	bhi.n	8022872 <W25qxx_WriteSector+0x1e>
 802286c:	683b      	ldr	r3, [r7, #0]
 802286e:	2b00      	cmp	r3, #0
 8022870:	d102      	bne.n	8022878 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize=w25qxx.SectorSize;
 8022872:	4b28      	ldr	r3, [pc, #160]	; (8022914 <W25qxx_WriteSector+0xc0>)
 8022874:	691b      	ldr	r3, [r3, #16]
 8022876:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif
	if(OffsetInByte>=w25qxx.SectorSize)
 8022878:	4b26      	ldr	r3, [pc, #152]	; (8022914 <W25qxx_WriteSector+0xc0>)
 802287a:	691b      	ldr	r3, [r3, #16]
 802287c:	687a      	ldr	r2, [r7, #4]
 802287e:	429a      	cmp	r2, r3
 8022880:	d243      	bcs.n	802290a <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t	StartPage;
	int32_t		BytesToWrite;
	uint32_t	LocalOffset;
	if((OffsetInByte+NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8022882:	687a      	ldr	r2, [r7, #4]
 8022884:	683b      	ldr	r3, [r7, #0]
 8022886:	441a      	add	r2, r3
 8022888:	4b22      	ldr	r3, [pc, #136]	; (8022914 <W25qxx_WriteSector+0xc0>)
 802288a:	691b      	ldr	r3, [r3, #16]
 802288c:	429a      	cmp	r2, r3
 802288e:	d905      	bls.n	802289c <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize-OffsetInByte;
 8022890:	4b20      	ldr	r3, [pc, #128]	; (8022914 <W25qxx_WriteSector+0xc0>)
 8022892:	691a      	ldr	r2, [r3, #16]
 8022894:	687b      	ldr	r3, [r7, #4]
 8022896:	1ad3      	subs	r3, r2, r3
 8022898:	61bb      	str	r3, [r7, #24]
 802289a:	e001      	b.n	80228a0 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 802289c:	683b      	ldr	r3, [r7, #0]
 802289e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 80228a0:	68b8      	ldr	r0, [r7, #8]
 80228a2:	f7ff ff3f 	bl	8022724 <W25qxx_SectorToPage>
 80228a6:	4602      	mov	r2, r0
 80228a8:	4b1a      	ldr	r3, [pc, #104]	; (8022914 <W25qxx_WriteSector+0xc0>)
 80228aa:	895b      	ldrh	r3, [r3, #10]
 80228ac:	4619      	mov	r1, r3
 80228ae:	687b      	ldr	r3, [r7, #4]
 80228b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80228b4:	4413      	add	r3, r2
 80228b6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;
 80228b8:	4b16      	ldr	r3, [pc, #88]	; (8022914 <W25qxx_WriteSector+0xc0>)
 80228ba:	895b      	ldrh	r3, [r3, #10]
 80228bc:	461a      	mov	r2, r3
 80228be:	687b      	ldr	r3, [r7, #4]
 80228c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80228c4:	fb02 f201 	mul.w	r2, r2, r1
 80228c8:	1a9b      	subs	r3, r3, r2
 80228ca:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer,StartPage,LocalOffset,BytesToWrite);
 80228cc:	69bb      	ldr	r3, [r7, #24]
 80228ce:	697a      	ldr	r2, [r7, #20]
 80228d0:	69f9      	ldr	r1, [r7, #28]
 80228d2:	68f8      	ldr	r0, [r7, #12]
 80228d4:	f7ff ff3c 	bl	8022750 <W25qxx_WritePage>
		StartPage++;
 80228d8:	69fb      	ldr	r3, [r7, #28]
 80228da:	3301      	adds	r3, #1
 80228dc:	61fb      	str	r3, [r7, #28]
		BytesToWrite-=w25qxx.PageSize-LocalOffset;
 80228de:	4b0d      	ldr	r3, [pc, #52]	; (8022914 <W25qxx_WriteSector+0xc0>)
 80228e0:	895b      	ldrh	r3, [r3, #10]
 80228e2:	461a      	mov	r2, r3
 80228e4:	697b      	ldr	r3, [r7, #20]
 80228e6:	1a9a      	subs	r2, r3, r2
 80228e8:	69bb      	ldr	r3, [r7, #24]
 80228ea:	4413      	add	r3, r2
 80228ec:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80228ee:	4b09      	ldr	r3, [pc, #36]	; (8022914 <W25qxx_WriteSector+0xc0>)
 80228f0:	895b      	ldrh	r3, [r3, #10]
 80228f2:	461a      	mov	r2, r3
 80228f4:	697b      	ldr	r3, [r7, #20]
 80228f6:	1ad3      	subs	r3, r2, r3
 80228f8:	68fa      	ldr	r2, [r7, #12]
 80228fa:	4413      	add	r3, r2
 80228fc:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 80228fe:	2300      	movs	r3, #0
 8022900:	617b      	str	r3, [r7, #20]
	}while(BytesToWrite>0);
 8022902:	69bb      	ldr	r3, [r7, #24]
 8022904:	2b00      	cmp	r3, #0
 8022906:	dce1      	bgt.n	80228cc <W25qxx_WriteSector+0x78>
 8022908:	e000      	b.n	802290c <W25qxx_WriteSector+0xb8>
		return;
 802290a:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
	#endif
}
 802290c:	3720      	adds	r7, #32
 802290e:	46bd      	mov	sp, r7
 8022910:	bd80      	pop	{r7, pc}
 8022912:	bf00      	nop
 8022914:	20000474 	.word	0x20000474

08022918 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock=0;
}
//###################################################################################################################
void 	W25qxx_ReadPage(uint8_t *pBuffer,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_PageSize)
{
 8022918:	b580      	push	{r7, lr}
 802291a:	b084      	sub	sp, #16
 802291c:	af00      	add	r7, sp, #0
 802291e:	60f8      	str	r0, [r7, #12]
 8022920:	60b9      	str	r1, [r7, #8]
 8022922:	607a      	str	r2, [r7, #4]
 8022924:	603b      	str	r3, [r7, #0]
	while(w25qxx.Lock==1)
 8022926:	e002      	b.n	802292e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8022928:	2001      	movs	r0, #1
 802292a:	f010 f9e9 	bl	8032d00 <HAL_Delay>
	while(w25qxx.Lock==1)
 802292e:	4b35      	ldr	r3, [pc, #212]	; (8022a04 <W25qxx_ReadPage+0xec>)
 8022930:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8022934:	2b01      	cmp	r3, #1
 8022936:	d0f7      	beq.n	8022928 <W25qxx_ReadPage+0x10>
	w25qxx.Lock=1;
 8022938:	4b32      	ldr	r3, [pc, #200]	; (8022a04 <W25qxx_ReadPage+0xec>)
 802293a:	2201      	movs	r2, #1
 802293c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if((NumByteToRead_up_to_PageSize>w25qxx.PageSize)||(NumByteToRead_up_to_PageSize==0))
 8022940:	4b30      	ldr	r3, [pc, #192]	; (8022a04 <W25qxx_ReadPage+0xec>)
 8022942:	895b      	ldrh	r3, [r3, #10]
 8022944:	461a      	mov	r2, r3
 8022946:	683b      	ldr	r3, [r7, #0]
 8022948:	4293      	cmp	r3, r2
 802294a:	d802      	bhi.n	8022952 <W25qxx_ReadPage+0x3a>
 802294c:	683b      	ldr	r3, [r7, #0]
 802294e:	2b00      	cmp	r3, #0
 8022950:	d102      	bne.n	8022958 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 8022952:	4b2c      	ldr	r3, [pc, #176]	; (8022a04 <W25qxx_ReadPage+0xec>)
 8022954:	895b      	ldrh	r3, [r3, #10]
 8022956:	603b      	str	r3, [r7, #0]
	if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8022958:	687a      	ldr	r2, [r7, #4]
 802295a:	683b      	ldr	r3, [r7, #0]
 802295c:	4413      	add	r3, r2
 802295e:	4a29      	ldr	r2, [pc, #164]	; (8022a04 <W25qxx_ReadPage+0xec>)
 8022960:	8952      	ldrh	r2, [r2, #10]
 8022962:	4293      	cmp	r3, r2
 8022964:	d905      	bls.n	8022972 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8022966:	4b27      	ldr	r3, [pc, #156]	; (8022a04 <W25qxx_ReadPage+0xec>)
 8022968:	895b      	ldrh	r3, [r3, #10]
 802296a:	461a      	mov	r2, r3
 802296c:	687b      	ldr	r3, [r7, #4]
 802296e:	1ad3      	subs	r3, r2, r3
 8022970:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t	StartTime=HAL_GetTick();
	#endif
	Page_Address = Page_Address*w25qxx.PageSize+OffsetInByte;
 8022972:	4b24      	ldr	r3, [pc, #144]	; (8022a04 <W25qxx_ReadPage+0xec>)
 8022974:	895b      	ldrh	r3, [r3, #10]
 8022976:	461a      	mov	r2, r3
 8022978:	68bb      	ldr	r3, [r7, #8]
 802297a:	fb03 f302 	mul.w	r3, r3, r2
 802297e:	687a      	ldr	r2, [r7, #4]
 8022980:	4413      	add	r3, r2
 8022982:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8022984:	2200      	movs	r2, #0
 8022986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802298a:	481f      	ldr	r0, [pc, #124]	; (8022a08 <W25qxx_ReadPage+0xf0>)
 802298c:	f010 fff4 	bl	8033978 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x0B);
 8022990:	200b      	movs	r0, #11
 8022992:	f7ff fc97 	bl	80222c4 <W25qxx_Spi>
	if(w25qxx.ID>=W25Q256)
 8022996:	4b1b      	ldr	r3, [pc, #108]	; (8022a04 <W25qxx_ReadPage+0xec>)
 8022998:	781b      	ldrb	r3, [r3, #0]
 802299a:	2b08      	cmp	r3, #8
 802299c:	d905      	bls.n	80229aa <W25qxx_ReadPage+0x92>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 802299e:	68bb      	ldr	r3, [r7, #8]
 80229a0:	0e1b      	lsrs	r3, r3, #24
 80229a2:	b2db      	uxtb	r3, r3
 80229a4:	4618      	mov	r0, r3
 80229a6:	f7ff fc8d 	bl	80222c4 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80229aa:	68bb      	ldr	r3, [r7, #8]
 80229ac:	0c1b      	lsrs	r3, r3, #16
 80229ae:	b2db      	uxtb	r3, r3
 80229b0:	4618      	mov	r0, r3
 80229b2:	f7ff fc87 	bl	80222c4 <W25qxx_Spi>
  W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 80229b6:	68bb      	ldr	r3, [r7, #8]
 80229b8:	0a1b      	lsrs	r3, r3, #8
 80229ba:	b2db      	uxtb	r3, r3
 80229bc:	4618      	mov	r0, r3
 80229be:	f7ff fc81 	bl	80222c4 <W25qxx_Spi>
  W25qxx_Spi(Page_Address & 0xFF);
 80229c2:	68bb      	ldr	r3, [r7, #8]
 80229c4:	b2db      	uxtb	r3, r3
 80229c6:	4618      	mov	r0, r3
 80229c8:	f7ff fc7c 	bl	80222c4 <W25qxx_Spi>
	W25qxx_Spi(0);
 80229cc:	2000      	movs	r0, #0
 80229ce:	f7ff fc79 	bl	80222c4 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead_up_to_PageSize,100);
 80229d2:	683b      	ldr	r3, [r7, #0]
 80229d4:	b29a      	uxth	r2, r3
 80229d6:	2364      	movs	r3, #100	; 0x64
 80229d8:	68f9      	ldr	r1, [r7, #12]
 80229da:	480c      	ldr	r0, [pc, #48]	; (8022a0c <W25qxx_ReadPage+0xf4>)
 80229dc:	f012 fda3 	bl	8035526 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80229e0:	2201      	movs	r2, #1
 80229e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80229e6:	4808      	ldr	r0, [pc, #32]	; (8022a08 <W25qxx_ReadPage+0xf0>)
 80229e8:	f010 ffc6 	bl	8033978 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n",StartTime);
	W25qxx_Delay(100);
	#endif
	W25qxx_Delay(1);
 80229ec:	2001      	movs	r0, #1
 80229ee:	f010 f987 	bl	8032d00 <HAL_Delay>
	w25qxx.Lock=0;
 80229f2:	4b04      	ldr	r3, [pc, #16]	; (8022a04 <W25qxx_ReadPage+0xec>)
 80229f4:	2200      	movs	r2, #0
 80229f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80229fa:	bf00      	nop
 80229fc:	3710      	adds	r7, #16
 80229fe:	46bd      	mov	sp, r7
 8022a00:	bd80      	pop	{r7, pc}
 8022a02:	bf00      	nop
 8022a04:	20000474 	.word	0x20000474
 8022a08:	40020400 	.word	0x40020400
 8022a0c:	2000049c 	.word	0x2000049c

08022a10 <W25qxx_ReadSector>:
//###################################################################################################################
void 	W25qxx_ReadSector(uint8_t *pBuffer,uint32_t Sector_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_SectorSize)
{
 8022a10:	b580      	push	{r7, lr}
 8022a12:	b088      	sub	sp, #32
 8022a14:	af00      	add	r7, sp, #0
 8022a16:	60f8      	str	r0, [r7, #12]
 8022a18:	60b9      	str	r1, [r7, #8]
 8022a1a:	607a      	str	r2, [r7, #4]
 8022a1c:	603b      	str	r3, [r7, #0]
	if((NumByteToRead_up_to_SectorSize>w25qxx.SectorSize)||(NumByteToRead_up_to_SectorSize==0))
 8022a1e:	4b2c      	ldr	r3, [pc, #176]	; (8022ad0 <W25qxx_ReadSector+0xc0>)
 8022a20:	691b      	ldr	r3, [r3, #16]
 8022a22:	683a      	ldr	r2, [r7, #0]
 8022a24:	429a      	cmp	r2, r3
 8022a26:	d802      	bhi.n	8022a2e <W25qxx_ReadSector+0x1e>
 8022a28:	683b      	ldr	r3, [r7, #0]
 8022a2a:	2b00      	cmp	r3, #0
 8022a2c:	d102      	bne.n	8022a34 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize=w25qxx.SectorSize;
 8022a2e:	4b28      	ldr	r3, [pc, #160]	; (8022ad0 <W25qxx_ReadSector+0xc0>)
 8022a30:	691b      	ldr	r3, [r3, #16]
 8022a32:	603b      	str	r3, [r7, #0]
	#if (_W25QXX_DEBUG==1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Sector_Address,OffsetInByte,NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
	#endif
	if(OffsetInByte>=w25qxx.SectorSize)
 8022a34:	4b26      	ldr	r3, [pc, #152]	; (8022ad0 <W25qxx_ReadSector+0xc0>)
 8022a36:	691b      	ldr	r3, [r3, #16]
 8022a38:	687a      	ldr	r2, [r7, #4]
 8022a3a:	429a      	cmp	r2, r3
 8022a3c:	d243      	bcs.n	8022ac6 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t	StartPage;
	int32_t		BytesToRead;
	uint32_t	LocalOffset;
	if((OffsetInByte+NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8022a3e:	687a      	ldr	r2, [r7, #4]
 8022a40:	683b      	ldr	r3, [r7, #0]
 8022a42:	441a      	add	r2, r3
 8022a44:	4b22      	ldr	r3, [pc, #136]	; (8022ad0 <W25qxx_ReadSector+0xc0>)
 8022a46:	691b      	ldr	r3, [r3, #16]
 8022a48:	429a      	cmp	r2, r3
 8022a4a:	d905      	bls.n	8022a58 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize-OffsetInByte;
 8022a4c:	4b20      	ldr	r3, [pc, #128]	; (8022ad0 <W25qxx_ReadSector+0xc0>)
 8022a4e:	691a      	ldr	r2, [r3, #16]
 8022a50:	687b      	ldr	r3, [r7, #4]
 8022a52:	1ad3      	subs	r3, r2, r3
 8022a54:	61bb      	str	r3, [r7, #24]
 8022a56:	e001      	b.n	8022a5c <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8022a58:	683b      	ldr	r3, [r7, #0]
 8022a5a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address)+(OffsetInByte/w25qxx.PageSize);
 8022a5c:	68b8      	ldr	r0, [r7, #8]
 8022a5e:	f7ff fe61 	bl	8022724 <W25qxx_SectorToPage>
 8022a62:	4602      	mov	r2, r0
 8022a64:	4b1a      	ldr	r3, [pc, #104]	; (8022ad0 <W25qxx_ReadSector+0xc0>)
 8022a66:	895b      	ldrh	r3, [r3, #10]
 8022a68:	4619      	mov	r1, r3
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8022a70:	4413      	add	r3, r2
 8022a72:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte%w25qxx.PageSize;
 8022a74:	4b16      	ldr	r3, [pc, #88]	; (8022ad0 <W25qxx_ReadSector+0xc0>)
 8022a76:	895b      	ldrh	r3, [r3, #10]
 8022a78:	461a      	mov	r2, r3
 8022a7a:	687b      	ldr	r3, [r7, #4]
 8022a7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8022a80:	fb02 f201 	mul.w	r2, r2, r1
 8022a84:	1a9b      	subs	r3, r3, r2
 8022a86:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer,StartPage,LocalOffset,BytesToRead);
 8022a88:	69bb      	ldr	r3, [r7, #24]
 8022a8a:	697a      	ldr	r2, [r7, #20]
 8022a8c:	69f9      	ldr	r1, [r7, #28]
 8022a8e:	68f8      	ldr	r0, [r7, #12]
 8022a90:	f7ff ff42 	bl	8022918 <W25qxx_ReadPage>
		StartPage++;
 8022a94:	69fb      	ldr	r3, [r7, #28]
 8022a96:	3301      	adds	r3, #1
 8022a98:	61fb      	str	r3, [r7, #28]
		BytesToRead-=w25qxx.PageSize-LocalOffset;
 8022a9a:	4b0d      	ldr	r3, [pc, #52]	; (8022ad0 <W25qxx_ReadSector+0xc0>)
 8022a9c:	895b      	ldrh	r3, [r3, #10]
 8022a9e:	461a      	mov	r2, r3
 8022aa0:	697b      	ldr	r3, [r7, #20]
 8022aa2:	1a9a      	subs	r2, r3, r2
 8022aa4:	69bb      	ldr	r3, [r7, #24]
 8022aa6:	4413      	add	r3, r2
 8022aa8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8022aaa:	4b09      	ldr	r3, [pc, #36]	; (8022ad0 <W25qxx_ReadSector+0xc0>)
 8022aac:	895b      	ldrh	r3, [r3, #10]
 8022aae:	461a      	mov	r2, r3
 8022ab0:	697b      	ldr	r3, [r7, #20]
 8022ab2:	1ad3      	subs	r3, r2, r3
 8022ab4:	68fa      	ldr	r2, [r7, #12]
 8022ab6:	4413      	add	r3, r2
 8022ab8:	60fb      	str	r3, [r7, #12]
		LocalOffset=0;
 8022aba:	2300      	movs	r3, #0
 8022abc:	617b      	str	r3, [r7, #20]
	}while(BytesToRead>0);
 8022abe:	69bb      	ldr	r3, [r7, #24]
 8022ac0:	2b00      	cmp	r3, #0
 8022ac2:	dce1      	bgt.n	8022a88 <W25qxx_ReadSector+0x78>
 8022ac4:	e000      	b.n	8022ac8 <W25qxx_ReadSector+0xb8>
		return;
 8022ac6:	bf00      	nop
	#if (_W25QXX_DEBUG==1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
	#endif
}
 8022ac8:	3720      	adds	r7, #32
 8022aca:	46bd      	mov	sp, r7
 8022acc:	bd80      	pop	{r7, pc}
 8022ace:	bf00      	nop
 8022ad0:	20000474 	.word	0x20000474

08022ad4 <load_3>:


/*
    helper functions
*/
static uint64_t load_3(const unsigned char *in) {
 8022ad4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8022ad8:	b085      	sub	sp, #20
 8022ada:	af00      	add	r7, sp, #0
 8022adc:	6078      	str	r0, [r7, #4]
    uint64_t result;

    result = (uint64_t) in[0];
 8022ade:	687b      	ldr	r3, [r7, #4]
 8022ae0:	781b      	ldrb	r3, [r3, #0]
 8022ae2:	b2da      	uxtb	r2, r3
 8022ae4:	f04f 0300 	mov.w	r3, #0
 8022ae8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result |= ((uint64_t) in[1]) << 8;
 8022aec:	687b      	ldr	r3, [r7, #4]
 8022aee:	3301      	adds	r3, #1
 8022af0:	781b      	ldrb	r3, [r3, #0]
 8022af2:	b2d8      	uxtb	r0, r3
 8022af4:	f04f 0100 	mov.w	r1, #0
 8022af8:	f04f 0200 	mov.w	r2, #0
 8022afc:	f04f 0300 	mov.w	r3, #0
 8022b00:	020b      	lsls	r3, r1, #8
 8022b02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8022b06:	0202      	lsls	r2, r0, #8
 8022b08:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8022b0c:	ea40 0802 	orr.w	r8, r0, r2
 8022b10:	ea41 0903 	orr.w	r9, r1, r3
 8022b14:	e9c7 8902 	strd	r8, r9, [r7, #8]
    result |= ((uint64_t) in[2]) << 16;
 8022b18:	687b      	ldr	r3, [r7, #4]
 8022b1a:	3302      	adds	r3, #2
 8022b1c:	781b      	ldrb	r3, [r3, #0]
 8022b1e:	b2d8      	uxtb	r0, r3
 8022b20:	f04f 0100 	mov.w	r1, #0
 8022b24:	f04f 0200 	mov.w	r2, #0
 8022b28:	f04f 0300 	mov.w	r3, #0
 8022b2c:	040b      	lsls	r3, r1, #16
 8022b2e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8022b32:	0402      	lsls	r2, r0, #16
 8022b34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8022b38:	ea40 0402 	orr.w	r4, r0, r2
 8022b3c:	ea41 0503 	orr.w	r5, r1, r3
 8022b40:	e9c7 4502 	strd	r4, r5, [r7, #8]

    return result;
 8022b44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8022b48:	4610      	mov	r0, r2
 8022b4a:	4619      	mov	r1, r3
 8022b4c:	3714      	adds	r7, #20
 8022b4e:	46bd      	mov	sp, r7
 8022b50:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8022b54:	4770      	bx	lr

08022b56 <load_4>:

static uint64_t load_4(const unsigned char *in) {
 8022b56:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8022b5a:	b086      	sub	sp, #24
 8022b5c:	af00      	add	r7, sp, #0
 8022b5e:	60f8      	str	r0, [r7, #12]
    uint64_t result;

    result = (uint64_t) in[0];
 8022b60:	68fb      	ldr	r3, [r7, #12]
 8022b62:	781b      	ldrb	r3, [r3, #0]
 8022b64:	b2da      	uxtb	r2, r3
 8022b66:	f04f 0300 	mov.w	r3, #0
 8022b6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[1]) << 8;
 8022b6e:	68fb      	ldr	r3, [r7, #12]
 8022b70:	3301      	adds	r3, #1
 8022b72:	781b      	ldrb	r3, [r3, #0]
 8022b74:	b2d8      	uxtb	r0, r3
 8022b76:	f04f 0100 	mov.w	r1, #0
 8022b7a:	f04f 0200 	mov.w	r2, #0
 8022b7e:	f04f 0300 	mov.w	r3, #0
 8022b82:	020b      	lsls	r3, r1, #8
 8022b84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8022b88:	0202      	lsls	r2, r0, #8
 8022b8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8022b8e:	ea40 0602 	orr.w	r6, r0, r2
 8022b92:	603e      	str	r6, [r7, #0]
 8022b94:	430b      	orrs	r3, r1
 8022b96:	607b      	str	r3, [r7, #4]
 8022b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8022b9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[2]) << 16;
 8022ba0:	68fb      	ldr	r3, [r7, #12]
 8022ba2:	3302      	adds	r3, #2
 8022ba4:	781b      	ldrb	r3, [r3, #0]
 8022ba6:	b2d8      	uxtb	r0, r3
 8022ba8:	f04f 0100 	mov.w	r1, #0
 8022bac:	f04f 0200 	mov.w	r2, #0
 8022bb0:	f04f 0300 	mov.w	r3, #0
 8022bb4:	040b      	lsls	r3, r1, #16
 8022bb6:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8022bba:	0402      	lsls	r2, r0, #16
 8022bbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8022bc0:	ea40 0a02 	orr.w	sl, r0, r2
 8022bc4:	ea41 0b03 	orr.w	fp, r1, r3
 8022bc8:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    result |= ((uint64_t) in[3]) << 24;
 8022bcc:	68fb      	ldr	r3, [r7, #12]
 8022bce:	3303      	adds	r3, #3
 8022bd0:	781b      	ldrb	r3, [r3, #0]
 8022bd2:	b2da      	uxtb	r2, r3
 8022bd4:	f04f 0300 	mov.w	r3, #0
 8022bd8:	0a15      	lsrs	r5, r2, #8
 8022bda:	0614      	lsls	r4, r2, #24
 8022bdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8022be0:	ea42 0804 	orr.w	r8, r2, r4
 8022be4:	ea43 0905 	orr.w	r9, r3, r5
 8022be8:	e9c7 8904 	strd	r8, r9, [r7, #16]
    
    return result;
 8022bec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8022bf0:	4610      	mov	r0, r2
 8022bf2:	4619      	mov	r1, r3
 8022bf4:	3718      	adds	r7, #24
 8022bf6:	46bd      	mov	sp, r7
 8022bf8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8022bfc:	4770      	bx	lr

08022bfe <fe_0>:

/*
    h = 0
*/

void fe_0(fe h) {
 8022bfe:	b480      	push	{r7}
 8022c00:	b083      	sub	sp, #12
 8022c02:	af00      	add	r7, sp, #0
 8022c04:	6078      	str	r0, [r7, #4]
    h[0] = 0;
 8022c06:	687b      	ldr	r3, [r7, #4]
 8022c08:	2200      	movs	r2, #0
 8022c0a:	601a      	str	r2, [r3, #0]
    h[1] = 0;
 8022c0c:	687b      	ldr	r3, [r7, #4]
 8022c0e:	3304      	adds	r3, #4
 8022c10:	2200      	movs	r2, #0
 8022c12:	601a      	str	r2, [r3, #0]
    h[2] = 0;
 8022c14:	687b      	ldr	r3, [r7, #4]
 8022c16:	3308      	adds	r3, #8
 8022c18:	2200      	movs	r2, #0
 8022c1a:	601a      	str	r2, [r3, #0]
    h[3] = 0;
 8022c1c:	687b      	ldr	r3, [r7, #4]
 8022c1e:	330c      	adds	r3, #12
 8022c20:	2200      	movs	r2, #0
 8022c22:	601a      	str	r2, [r3, #0]
    h[4] = 0;
 8022c24:	687b      	ldr	r3, [r7, #4]
 8022c26:	3310      	adds	r3, #16
 8022c28:	2200      	movs	r2, #0
 8022c2a:	601a      	str	r2, [r3, #0]
    h[5] = 0;
 8022c2c:	687b      	ldr	r3, [r7, #4]
 8022c2e:	3314      	adds	r3, #20
 8022c30:	2200      	movs	r2, #0
 8022c32:	601a      	str	r2, [r3, #0]
    h[6] = 0;
 8022c34:	687b      	ldr	r3, [r7, #4]
 8022c36:	3318      	adds	r3, #24
 8022c38:	2200      	movs	r2, #0
 8022c3a:	601a      	str	r2, [r3, #0]
    h[7] = 0;
 8022c3c:	687b      	ldr	r3, [r7, #4]
 8022c3e:	331c      	adds	r3, #28
 8022c40:	2200      	movs	r2, #0
 8022c42:	601a      	str	r2, [r3, #0]
    h[8] = 0;
 8022c44:	687b      	ldr	r3, [r7, #4]
 8022c46:	3320      	adds	r3, #32
 8022c48:	2200      	movs	r2, #0
 8022c4a:	601a      	str	r2, [r3, #0]
    h[9] = 0;
 8022c4c:	687b      	ldr	r3, [r7, #4]
 8022c4e:	3324      	adds	r3, #36	; 0x24
 8022c50:	2200      	movs	r2, #0
 8022c52:	601a      	str	r2, [r3, #0]
}
 8022c54:	bf00      	nop
 8022c56:	370c      	adds	r7, #12
 8022c58:	46bd      	mov	sp, r7
 8022c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c5e:	4770      	bx	lr

08022c60 <fe_1>:

/*
    h = 1
*/

void fe_1(fe h) {
 8022c60:	b480      	push	{r7}
 8022c62:	b083      	sub	sp, #12
 8022c64:	af00      	add	r7, sp, #0
 8022c66:	6078      	str	r0, [r7, #4]
    h[0] = 1;
 8022c68:	687b      	ldr	r3, [r7, #4]
 8022c6a:	2201      	movs	r2, #1
 8022c6c:	601a      	str	r2, [r3, #0]
    h[1] = 0;
 8022c6e:	687b      	ldr	r3, [r7, #4]
 8022c70:	3304      	adds	r3, #4
 8022c72:	2200      	movs	r2, #0
 8022c74:	601a      	str	r2, [r3, #0]
    h[2] = 0;
 8022c76:	687b      	ldr	r3, [r7, #4]
 8022c78:	3308      	adds	r3, #8
 8022c7a:	2200      	movs	r2, #0
 8022c7c:	601a      	str	r2, [r3, #0]
    h[3] = 0;
 8022c7e:	687b      	ldr	r3, [r7, #4]
 8022c80:	330c      	adds	r3, #12
 8022c82:	2200      	movs	r2, #0
 8022c84:	601a      	str	r2, [r3, #0]
    h[4] = 0;
 8022c86:	687b      	ldr	r3, [r7, #4]
 8022c88:	3310      	adds	r3, #16
 8022c8a:	2200      	movs	r2, #0
 8022c8c:	601a      	str	r2, [r3, #0]
    h[5] = 0;
 8022c8e:	687b      	ldr	r3, [r7, #4]
 8022c90:	3314      	adds	r3, #20
 8022c92:	2200      	movs	r2, #0
 8022c94:	601a      	str	r2, [r3, #0]
    h[6] = 0;
 8022c96:	687b      	ldr	r3, [r7, #4]
 8022c98:	3318      	adds	r3, #24
 8022c9a:	2200      	movs	r2, #0
 8022c9c:	601a      	str	r2, [r3, #0]
    h[7] = 0;
 8022c9e:	687b      	ldr	r3, [r7, #4]
 8022ca0:	331c      	adds	r3, #28
 8022ca2:	2200      	movs	r2, #0
 8022ca4:	601a      	str	r2, [r3, #0]
    h[8] = 0;
 8022ca6:	687b      	ldr	r3, [r7, #4]
 8022ca8:	3320      	adds	r3, #32
 8022caa:	2200      	movs	r2, #0
 8022cac:	601a      	str	r2, [r3, #0]
    h[9] = 0;
 8022cae:	687b      	ldr	r3, [r7, #4]
 8022cb0:	3324      	adds	r3, #36	; 0x24
 8022cb2:	2200      	movs	r2, #0
 8022cb4:	601a      	str	r2, [r3, #0]
}
 8022cb6:	bf00      	nop
 8022cb8:	370c      	adds	r7, #12
 8022cba:	46bd      	mov	sp, r7
 8022cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cc0:	4770      	bx	lr

08022cc2 <fe_add>:

    Postconditions:
       |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

void fe_add(fe h, const fe f, const fe g) {
 8022cc2:	b480      	push	{r7}
 8022cc4:	b0a3      	sub	sp, #140	; 0x8c
 8022cc6:	af00      	add	r7, sp, #0
 8022cc8:	60f8      	str	r0, [r7, #12]
 8022cca:	60b9      	str	r1, [r7, #8]
 8022ccc:	607a      	str	r2, [r7, #4]
    int32_t f0 = f[0];
 8022cce:	68bb      	ldr	r3, [r7, #8]
 8022cd0:	681b      	ldr	r3, [r3, #0]
 8022cd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    int32_t f1 = f[1];
 8022cd6:	68bb      	ldr	r3, [r7, #8]
 8022cd8:	685b      	ldr	r3, [r3, #4]
 8022cda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int32_t f2 = f[2];
 8022cde:	68bb      	ldr	r3, [r7, #8]
 8022ce0:	689b      	ldr	r3, [r3, #8]
 8022ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
    int32_t f3 = f[3];
 8022ce4:	68bb      	ldr	r3, [r7, #8]
 8022ce6:	68db      	ldr	r3, [r3, #12]
 8022ce8:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t f4 = f[4];
 8022cea:	68bb      	ldr	r3, [r7, #8]
 8022cec:	691b      	ldr	r3, [r3, #16]
 8022cee:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t f5 = f[5];
 8022cf0:	68bb      	ldr	r3, [r7, #8]
 8022cf2:	695b      	ldr	r3, [r3, #20]
 8022cf4:	673b      	str	r3, [r7, #112]	; 0x70
    int32_t f6 = f[6];
 8022cf6:	68bb      	ldr	r3, [r7, #8]
 8022cf8:	699b      	ldr	r3, [r3, #24]
 8022cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t f7 = f[7];
 8022cfc:	68bb      	ldr	r3, [r7, #8]
 8022cfe:	69db      	ldr	r3, [r3, #28]
 8022d00:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t f8 = f[8];
 8022d02:	68bb      	ldr	r3, [r7, #8]
 8022d04:	6a1b      	ldr	r3, [r3, #32]
 8022d06:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t f9 = f[9];
 8022d08:	68bb      	ldr	r3, [r7, #8]
 8022d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022d0c:	663b      	str	r3, [r7, #96]	; 0x60
    int32_t g0 = g[0];
 8022d0e:	687b      	ldr	r3, [r7, #4]
 8022d10:	681b      	ldr	r3, [r3, #0]
 8022d12:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t g1 = g[1];
 8022d14:	687b      	ldr	r3, [r7, #4]
 8022d16:	685b      	ldr	r3, [r3, #4]
 8022d18:	65bb      	str	r3, [r7, #88]	; 0x58
    int32_t g2 = g[2];
 8022d1a:	687b      	ldr	r3, [r7, #4]
 8022d1c:	689b      	ldr	r3, [r3, #8]
 8022d1e:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t g3 = g[3];
 8022d20:	687b      	ldr	r3, [r7, #4]
 8022d22:	68db      	ldr	r3, [r3, #12]
 8022d24:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t g4 = g[4];
 8022d26:	687b      	ldr	r3, [r7, #4]
 8022d28:	691b      	ldr	r3, [r3, #16]
 8022d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t g5 = g[5];
 8022d2c:	687b      	ldr	r3, [r7, #4]
 8022d2e:	695b      	ldr	r3, [r3, #20]
 8022d30:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t g6 = g[6];
 8022d32:	687b      	ldr	r3, [r7, #4]
 8022d34:	699b      	ldr	r3, [r3, #24]
 8022d36:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t g7 = g[7];
 8022d38:	687b      	ldr	r3, [r7, #4]
 8022d3a:	69db      	ldr	r3, [r3, #28]
 8022d3c:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t g8 = g[8];
 8022d3e:	687b      	ldr	r3, [r7, #4]
 8022d40:	6a1b      	ldr	r3, [r3, #32]
 8022d42:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t g9 = g[9];
 8022d44:	687b      	ldr	r3, [r7, #4]
 8022d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022d48:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t h0 = f0 + g0;
 8022d4a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8022d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022d50:	4413      	add	r3, r2
 8022d52:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t h1 = f1 + g1;
 8022d54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8022d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8022d5a:	4413      	add	r3, r2
 8022d5c:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t h2 = f2 + g2;
 8022d5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8022d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8022d62:	4413      	add	r3, r2
 8022d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t h3 = f3 + g3;
 8022d66:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8022d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8022d6a:	4413      	add	r3, r2
 8022d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t h4 = f4 + g4;
 8022d6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8022d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022d72:	4413      	add	r3, r2
 8022d74:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h5 = f5 + g5;
 8022d76:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8022d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8022d7a:	4413      	add	r3, r2
 8022d7c:	623b      	str	r3, [r7, #32]
    int32_t h6 = f6 + g6;
 8022d7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8022d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022d82:	4413      	add	r3, r2
 8022d84:	61fb      	str	r3, [r7, #28]
    int32_t h7 = f7 + g7;
 8022d86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8022d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022d8a:	4413      	add	r3, r2
 8022d8c:	61bb      	str	r3, [r7, #24]
    int32_t h8 = f8 + g8;
 8022d8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8022d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022d92:	4413      	add	r3, r2
 8022d94:	617b      	str	r3, [r7, #20]
    int32_t h9 = f9 + g9;
 8022d96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8022d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022d9a:	4413      	add	r3, r2
 8022d9c:	613b      	str	r3, [r7, #16]
    
    h[0] = h0;
 8022d9e:	68fb      	ldr	r3, [r7, #12]
 8022da0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022da2:	601a      	str	r2, [r3, #0]
    h[1] = h1;
 8022da4:	68fb      	ldr	r3, [r7, #12]
 8022da6:	3304      	adds	r3, #4
 8022da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022daa:	601a      	str	r2, [r3, #0]
    h[2] = h2;
 8022dac:	68fb      	ldr	r3, [r7, #12]
 8022dae:	3308      	adds	r3, #8
 8022db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022db2:	601a      	str	r2, [r3, #0]
    h[3] = h3;
 8022db4:	68fb      	ldr	r3, [r7, #12]
 8022db6:	330c      	adds	r3, #12
 8022db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022dba:	601a      	str	r2, [r3, #0]
    h[4] = h4;
 8022dbc:	68fb      	ldr	r3, [r7, #12]
 8022dbe:	3310      	adds	r3, #16
 8022dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022dc2:	601a      	str	r2, [r3, #0]
    h[5] = h5;
 8022dc4:	68fb      	ldr	r3, [r7, #12]
 8022dc6:	3314      	adds	r3, #20
 8022dc8:	6a3a      	ldr	r2, [r7, #32]
 8022dca:	601a      	str	r2, [r3, #0]
    h[6] = h6;
 8022dcc:	68fb      	ldr	r3, [r7, #12]
 8022dce:	3318      	adds	r3, #24
 8022dd0:	69fa      	ldr	r2, [r7, #28]
 8022dd2:	601a      	str	r2, [r3, #0]
    h[7] = h7;
 8022dd4:	68fb      	ldr	r3, [r7, #12]
 8022dd6:	331c      	adds	r3, #28
 8022dd8:	69ba      	ldr	r2, [r7, #24]
 8022dda:	601a      	str	r2, [r3, #0]
    h[8] = h8;
 8022ddc:	68fb      	ldr	r3, [r7, #12]
 8022dde:	3320      	adds	r3, #32
 8022de0:	697a      	ldr	r2, [r7, #20]
 8022de2:	601a      	str	r2, [r3, #0]
    h[9] = h9;
 8022de4:	68fb      	ldr	r3, [r7, #12]
 8022de6:	3324      	adds	r3, #36	; 0x24
 8022de8:	693a      	ldr	r2, [r7, #16]
 8022dea:	601a      	str	r2, [r3, #0]
}
 8022dec:	bf00      	nop
 8022dee:	378c      	adds	r7, #140	; 0x8c
 8022df0:	46bd      	mov	sp, r7
 8022df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022df6:	4770      	bx	lr

08022df8 <fe_copy>:

/*
    h = f
*/

void fe_copy(fe h, const fe f) {
 8022df8:	b480      	push	{r7}
 8022dfa:	b08d      	sub	sp, #52	; 0x34
 8022dfc:	af00      	add	r7, sp, #0
 8022dfe:	6078      	str	r0, [r7, #4]
 8022e00:	6039      	str	r1, [r7, #0]
    int32_t f0 = f[0];
 8022e02:	683b      	ldr	r3, [r7, #0]
 8022e04:	681b      	ldr	r3, [r3, #0]
 8022e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t f1 = f[1];
 8022e08:	683b      	ldr	r3, [r7, #0]
 8022e0a:	685b      	ldr	r3, [r3, #4]
 8022e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t f2 = f[2];
 8022e0e:	683b      	ldr	r3, [r7, #0]
 8022e10:	689b      	ldr	r3, [r3, #8]
 8022e12:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t f3 = f[3];
 8022e14:	683b      	ldr	r3, [r7, #0]
 8022e16:	68db      	ldr	r3, [r3, #12]
 8022e18:	623b      	str	r3, [r7, #32]
    int32_t f4 = f[4];
 8022e1a:	683b      	ldr	r3, [r7, #0]
 8022e1c:	691b      	ldr	r3, [r3, #16]
 8022e1e:	61fb      	str	r3, [r7, #28]
    int32_t f5 = f[5];
 8022e20:	683b      	ldr	r3, [r7, #0]
 8022e22:	695b      	ldr	r3, [r3, #20]
 8022e24:	61bb      	str	r3, [r7, #24]
    int32_t f6 = f[6];
 8022e26:	683b      	ldr	r3, [r7, #0]
 8022e28:	699b      	ldr	r3, [r3, #24]
 8022e2a:	617b      	str	r3, [r7, #20]
    int32_t f7 = f[7];
 8022e2c:	683b      	ldr	r3, [r7, #0]
 8022e2e:	69db      	ldr	r3, [r3, #28]
 8022e30:	613b      	str	r3, [r7, #16]
    int32_t f8 = f[8];
 8022e32:	683b      	ldr	r3, [r7, #0]
 8022e34:	6a1b      	ldr	r3, [r3, #32]
 8022e36:	60fb      	str	r3, [r7, #12]
    int32_t f9 = f[9];
 8022e38:	683b      	ldr	r3, [r7, #0]
 8022e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022e3c:	60bb      	str	r3, [r7, #8]
    
    h[0] = f0;
 8022e3e:	687b      	ldr	r3, [r7, #4]
 8022e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022e42:	601a      	str	r2, [r3, #0]
    h[1] = f1;
 8022e44:	687b      	ldr	r3, [r7, #4]
 8022e46:	3304      	adds	r3, #4
 8022e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022e4a:	601a      	str	r2, [r3, #0]
    h[2] = f2;
 8022e4c:	687b      	ldr	r3, [r7, #4]
 8022e4e:	3308      	adds	r3, #8
 8022e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022e52:	601a      	str	r2, [r3, #0]
    h[3] = f3;
 8022e54:	687b      	ldr	r3, [r7, #4]
 8022e56:	330c      	adds	r3, #12
 8022e58:	6a3a      	ldr	r2, [r7, #32]
 8022e5a:	601a      	str	r2, [r3, #0]
    h[4] = f4;
 8022e5c:	687b      	ldr	r3, [r7, #4]
 8022e5e:	3310      	adds	r3, #16
 8022e60:	69fa      	ldr	r2, [r7, #28]
 8022e62:	601a      	str	r2, [r3, #0]
    h[5] = f5;
 8022e64:	687b      	ldr	r3, [r7, #4]
 8022e66:	3314      	adds	r3, #20
 8022e68:	69ba      	ldr	r2, [r7, #24]
 8022e6a:	601a      	str	r2, [r3, #0]
    h[6] = f6;
 8022e6c:	687b      	ldr	r3, [r7, #4]
 8022e6e:	3318      	adds	r3, #24
 8022e70:	697a      	ldr	r2, [r7, #20]
 8022e72:	601a      	str	r2, [r3, #0]
    h[7] = f7;
 8022e74:	687b      	ldr	r3, [r7, #4]
 8022e76:	331c      	adds	r3, #28
 8022e78:	693a      	ldr	r2, [r7, #16]
 8022e7a:	601a      	str	r2, [r3, #0]
    h[8] = f8;
 8022e7c:	687b      	ldr	r3, [r7, #4]
 8022e7e:	3320      	adds	r3, #32
 8022e80:	68fa      	ldr	r2, [r7, #12]
 8022e82:	601a      	str	r2, [r3, #0]
    h[9] = f9;
 8022e84:	687b      	ldr	r3, [r7, #4]
 8022e86:	3324      	adds	r3, #36	; 0x24
 8022e88:	68ba      	ldr	r2, [r7, #8]
 8022e8a:	601a      	str	r2, [r3, #0]
}
 8022e8c:	bf00      	nop
 8022e8e:	3734      	adds	r7, #52	; 0x34
 8022e90:	46bd      	mov	sp, r7
 8022e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e96:	4770      	bx	lr

08022e98 <fe_frombytes>:

/*
    Ignores top bit of h.
*/

void fe_frombytes(fe h, const unsigned char *s) {
 8022e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e9c:	b0e7      	sub	sp, #412	; 0x19c
 8022e9e:	af00      	add	r7, sp, #0
 8022ea0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8022ea4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
    int64_t h0 = load_4(s);
 8022ea8:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8022eac:	f7ff fe53 	bl	8022b56 <load_4>
 8022eb0:	4602      	mov	r2, r0
 8022eb2:	460b      	mov	r3, r1
 8022eb4:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
    int64_t h1 = load_3(s + 4) << 6;
 8022eb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8022ebc:	3304      	adds	r3, #4
 8022ebe:	4618      	mov	r0, r3
 8022ec0:	f7ff fe08 	bl	8022ad4 <load_3>
 8022ec4:	4602      	mov	r2, r0
 8022ec6:	460b      	mov	r3, r1
 8022ec8:	f04f 0000 	mov.w	r0, #0
 8022ecc:	f04f 0100 	mov.w	r1, #0
 8022ed0:	0199      	lsls	r1, r3, #6
 8022ed2:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8022ed6:	0190      	lsls	r0, r2, #6
 8022ed8:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
    int64_t h2 = load_3(s + 7) << 5;
 8022edc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8022ee0:	3307      	adds	r3, #7
 8022ee2:	4618      	mov	r0, r3
 8022ee4:	f7ff fdf6 	bl	8022ad4 <load_3>
 8022ee8:	4602      	mov	r2, r0
 8022eea:	460b      	mov	r3, r1
 8022eec:	f04f 0000 	mov.w	r0, #0
 8022ef0:	f04f 0100 	mov.w	r1, #0
 8022ef4:	0159      	lsls	r1, r3, #5
 8022ef6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8022efa:	0150      	lsls	r0, r2, #5
 8022efc:	e9c7 0160 	strd	r0, r1, [r7, #384]	; 0x180
    int64_t h3 = load_3(s + 10) << 3;
 8022f00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8022f04:	330a      	adds	r3, #10
 8022f06:	4618      	mov	r0, r3
 8022f08:	f7ff fde4 	bl	8022ad4 <load_3>
 8022f0c:	4602      	mov	r2, r0
 8022f0e:	460b      	mov	r3, r1
 8022f10:	f04f 0000 	mov.w	r0, #0
 8022f14:	f04f 0100 	mov.w	r1, #0
 8022f18:	00d9      	lsls	r1, r3, #3
 8022f1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8022f1e:	00d0      	lsls	r0, r2, #3
 8022f20:	e9c7 015e 	strd	r0, r1, [r7, #376]	; 0x178
    int64_t h4 = load_3(s + 13) << 2;
 8022f24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8022f28:	330d      	adds	r3, #13
 8022f2a:	4618      	mov	r0, r3
 8022f2c:	f7ff fdd2 	bl	8022ad4 <load_3>
 8022f30:	4602      	mov	r2, r0
 8022f32:	460b      	mov	r3, r1
 8022f34:	f04f 0000 	mov.w	r0, #0
 8022f38:	f04f 0100 	mov.w	r1, #0
 8022f3c:	0099      	lsls	r1, r3, #2
 8022f3e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8022f42:	0090      	lsls	r0, r2, #2
 8022f44:	e9c7 015c 	strd	r0, r1, [r7, #368]	; 0x170
    int64_t h5 = load_4(s + 16);
 8022f48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8022f4c:	3310      	adds	r3, #16
 8022f4e:	4618      	mov	r0, r3
 8022f50:	f7ff fe01 	bl	8022b56 <load_4>
 8022f54:	4602      	mov	r2, r0
 8022f56:	460b      	mov	r3, r1
 8022f58:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    int64_t h6 = load_3(s + 20) << 7;
 8022f5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8022f60:	3314      	adds	r3, #20
 8022f62:	4618      	mov	r0, r3
 8022f64:	f7ff fdb6 	bl	8022ad4 <load_3>
 8022f68:	4602      	mov	r2, r0
 8022f6a:	460b      	mov	r3, r1
 8022f6c:	f04f 0000 	mov.w	r0, #0
 8022f70:	f04f 0100 	mov.w	r1, #0
 8022f74:	01d9      	lsls	r1, r3, #7
 8022f76:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 8022f7a:	01d0      	lsls	r0, r2, #7
 8022f7c:	e9c7 0158 	strd	r0, r1, [r7, #352]	; 0x160
    int64_t h7 = load_3(s + 23) << 5;
 8022f80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8022f84:	3317      	adds	r3, #23
 8022f86:	4618      	mov	r0, r3
 8022f88:	f7ff fda4 	bl	8022ad4 <load_3>
 8022f8c:	4602      	mov	r2, r0
 8022f8e:	460b      	mov	r3, r1
 8022f90:	f04f 0000 	mov.w	r0, #0
 8022f94:	f04f 0100 	mov.w	r1, #0
 8022f98:	0159      	lsls	r1, r3, #5
 8022f9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8022f9e:	0150      	lsls	r0, r2, #5
 8022fa0:	e9c7 0156 	strd	r0, r1, [r7, #344]	; 0x158
    int64_t h8 = load_3(s + 26) << 4;
 8022fa4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8022fa8:	331a      	adds	r3, #26
 8022faa:	4618      	mov	r0, r3
 8022fac:	f7ff fd92 	bl	8022ad4 <load_3>
 8022fb0:	4602      	mov	r2, r0
 8022fb2:	460b      	mov	r3, r1
 8022fb4:	f04f 0000 	mov.w	r0, #0
 8022fb8:	f04f 0100 	mov.w	r1, #0
 8022fbc:	0119      	lsls	r1, r3, #4
 8022fbe:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8022fc2:	0110      	lsls	r0, r2, #4
 8022fc4:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    int64_t h9 = (load_3(s + 29) & 8388607) << 2;
 8022fc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8022fcc:	331d      	adds	r3, #29
 8022fce:	4618      	mov	r0, r3
 8022fd0:	f7ff fd80 	bl	8022ad4 <load_3>
 8022fd4:	4602      	mov	r2, r0
 8022fd6:	460b      	mov	r3, r1
 8022fd8:	f04f 0000 	mov.w	r0, #0
 8022fdc:	f04f 0100 	mov.w	r1, #0
 8022fe0:	0099      	lsls	r1, r3, #2
 8022fe2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8022fe6:	0090      	lsls	r0, r2, #2
 8022fe8:	4aeb      	ldr	r2, [pc, #940]	; (8023398 <fe_frombytes+0x500>)
 8022fea:	f04f 0300 	mov.w	r3, #0
 8022fee:	ea00 0602 	and.w	r6, r0, r2
 8022ff2:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
 8022ff6:	400b      	ands	r3, r1
 8022ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022ffc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8023000:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;

    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 8023004:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8023008:	f112 7480 	adds.w	r4, r2, #16777216	; 0x1000000
 802300c:	f143 0500 	adc.w	r5, r3, #0
 8023010:	f04f 0200 	mov.w	r2, #0
 8023014:	f04f 0300 	mov.w	r3, #0
 8023018:	0e62      	lsrs	r2, r4, #25
 802301a:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
 802301e:	166b      	asrs	r3, r5, #25
 8023020:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    h0 += carry9 * 19;
 8023024:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8023028:	4622      	mov	r2, r4
 802302a:	462b      	mov	r3, r5
 802302c:	f04f 0000 	mov.w	r0, #0
 8023030:	f04f 0100 	mov.w	r1, #0
 8023034:	00d9      	lsls	r1, r3, #3
 8023036:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 802303a:	00d0      	lsls	r0, r2, #3
 802303c:	4602      	mov	r2, r0
 802303e:	460b      	mov	r3, r1
 8023040:	1912      	adds	r2, r2, r4
 8023042:	eb45 0303 	adc.w	r3, r5, r3
 8023046:	1891      	adds	r1, r2, r2
 8023048:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 802304c:	415b      	adcs	r3, r3
 802304e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8023052:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8023056:	eb12 0a04 	adds.w	sl, r2, r4
 802305a:	eb43 0b05 	adc.w	fp, r3, r5
 802305e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8023062:	eb12 010a 	adds.w	r1, r2, sl
 8023066:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 802306a:	eb43 030b 	adc.w	r3, r3, fp
 802306e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8023072:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8023076:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
    h9 -= carry9 << 25;
 802307a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 802307e:	f04f 0000 	mov.w	r0, #0
 8023082:	f04f 0100 	mov.w	r1, #0
 8023086:	0659      	lsls	r1, r3, #25
 8023088:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 802308c:	0650      	lsls	r0, r2, #25
 802308e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8023092:	1a14      	subs	r4, r2, r0
 8023094:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8023098:	eb63 0301 	sbc.w	r3, r3, r1
 802309c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80230a0:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80230a4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 80230a8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80230ac:	f112 7880 	adds.w	r8, r2, #16777216	; 0x1000000
 80230b0:	f143 0900 	adc.w	r9, r3, #0
 80230b4:	f04f 0200 	mov.w	r2, #0
 80230b8:	f04f 0300 	mov.w	r3, #0
 80230bc:	ea4f 6258 	mov.w	r2, r8, lsr #25
 80230c0:	ea42 12c9 	orr.w	r2, r2, r9, lsl #7
 80230c4:	ea4f 6369 	mov.w	r3, r9, asr #25
 80230c8:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
    h2 += carry1;
 80230cc:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80230d0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80230d4:	1884      	adds	r4, r0, r2
 80230d6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80230da:	eb41 0303 	adc.w	r3, r1, r3
 80230de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80230e2:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80230e6:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
    h1 -= carry1 << 25;
 80230ea:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80230ee:	f04f 0000 	mov.w	r0, #0
 80230f2:	f04f 0100 	mov.w	r1, #0
 80230f6:	0659      	lsls	r1, r3, #25
 80230f8:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80230fc:	0650      	lsls	r0, r2, #25
 80230fe:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8023102:	1a14      	subs	r4, r2, r0
 8023104:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8023108:	eb63 0301 	sbc.w	r3, r3, r1
 802310c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8023110:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8023114:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 8023118:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 802311c:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8023120:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8023124:	f143 0300 	adc.w	r3, r3, #0
 8023128:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 802312c:	f04f 0200 	mov.w	r2, #0
 8023130:	f04f 0300 	mov.w	r3, #0
 8023134:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8023138:	4621      	mov	r1, r4
 802313a:	0e4a      	lsrs	r2, r1, #25
 802313c:	4629      	mov	r1, r5
 802313e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8023142:	4629      	mov	r1, r5
 8023144:	164b      	asrs	r3, r1, #25
 8023146:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
    h4 += carry3;
 802314a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 802314e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8023152:	1884      	adds	r4, r0, r2
 8023154:	67bc      	str	r4, [r7, #120]	; 0x78
 8023156:	eb41 0303 	adc.w	r3, r1, r3
 802315a:	67fb      	str	r3, [r7, #124]	; 0x7c
 802315c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8023160:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
    h3 -= carry3 << 25;
 8023164:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8023168:	f04f 0000 	mov.w	r0, #0
 802316c:	f04f 0100 	mov.w	r1, #0
 8023170:	0659      	lsls	r1, r3, #25
 8023172:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8023176:	0650      	lsls	r0, r2, #25
 8023178:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 802317c:	1a14      	subs	r4, r2, r0
 802317e:	673c      	str	r4, [r7, #112]	; 0x70
 8023180:	eb63 0301 	sbc.w	r3, r3, r1
 8023184:	677b      	str	r3, [r7, #116]	; 0x74
 8023186:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 802318a:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 802318e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8023192:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8023196:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 802319a:	f143 0300 	adc.w	r3, r3, #0
 802319e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80231a2:	f04f 0200 	mov.w	r2, #0
 80231a6:	f04f 0300 	mov.w	r3, #0
 80231aa:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80231ae:	4621      	mov	r1, r4
 80231b0:	0e4a      	lsrs	r2, r1, #25
 80231b2:	4629      	mov	r1, r5
 80231b4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80231b8:	4629      	mov	r1, r5
 80231ba:	164b      	asrs	r3, r1, #25
 80231bc:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
    h6 += carry5;
 80231c0:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80231c4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80231c8:	1884      	adds	r4, r0, r2
 80231ca:	66bc      	str	r4, [r7, #104]	; 0x68
 80231cc:	eb41 0303 	adc.w	r3, r1, r3
 80231d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80231d2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80231d6:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
    h5 -= carry5 << 25;
 80231da:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80231de:	f04f 0000 	mov.w	r0, #0
 80231e2:	f04f 0100 	mov.w	r1, #0
 80231e6:	0659      	lsls	r1, r3, #25
 80231e8:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80231ec:	0650      	lsls	r0, r2, #25
 80231ee:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80231f2:	1a14      	subs	r4, r2, r0
 80231f4:	663c      	str	r4, [r7, #96]	; 0x60
 80231f6:	eb63 0301 	sbc.w	r3, r3, r1
 80231fa:	667b      	str	r3, [r7, #100]	; 0x64
 80231fc:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8023200:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 8023204:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8023208:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 802320c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8023210:	f143 0300 	adc.w	r3, r3, #0
 8023214:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8023218:	f04f 0200 	mov.w	r2, #0
 802321c:	f04f 0300 	mov.w	r3, #0
 8023220:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8023224:	4621      	mov	r1, r4
 8023226:	0e4a      	lsrs	r2, r1, #25
 8023228:	4629      	mov	r1, r5
 802322a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 802322e:	4629      	mov	r1, r5
 8023230:	164b      	asrs	r3, r1, #25
 8023232:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    h8 += carry7;
 8023236:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 802323a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 802323e:	1884      	adds	r4, r0, r2
 8023240:	65bc      	str	r4, [r7, #88]	; 0x58
 8023242:	eb41 0303 	adc.w	r3, r1, r3
 8023246:	65fb      	str	r3, [r7, #92]	; 0x5c
 8023248:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 802324c:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    h7 -= carry7 << 25;
 8023250:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8023254:	f04f 0000 	mov.w	r0, #0
 8023258:	f04f 0100 	mov.w	r1, #0
 802325c:	0659      	lsls	r1, r3, #25
 802325e:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8023262:	0650      	lsls	r0, r2, #25
 8023264:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8023268:	1a14      	subs	r4, r2, r0
 802326a:	653c      	str	r4, [r7, #80]	; 0x50
 802326c:	eb63 0301 	sbc.w	r3, r3, r1
 8023270:	657b      	str	r3, [r7, #84]	; 0x54
 8023272:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8023276:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 802327a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 802327e:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8023282:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8023286:	f143 0300 	adc.w	r3, r3, #0
 802328a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 802328e:	f04f 0200 	mov.w	r2, #0
 8023292:	f04f 0300 	mov.w	r3, #0
 8023296:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 802329a:	4621      	mov	r1, r4
 802329c:	0e8a      	lsrs	r2, r1, #26
 802329e:	4629      	mov	r1, r5
 80232a0:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80232a4:	4629      	mov	r1, r5
 80232a6:	168b      	asrs	r3, r1, #26
 80232a8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
    h1 += carry0;
 80232ac:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80232b0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80232b4:	1884      	adds	r4, r0, r2
 80232b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80232b8:	eb41 0303 	adc.w	r3, r1, r3
 80232bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80232be:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80232c2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
    h0 -= carry0 << 26;
 80232c6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80232ca:	f04f 0000 	mov.w	r0, #0
 80232ce:	f04f 0100 	mov.w	r1, #0
 80232d2:	0699      	lsls	r1, r3, #26
 80232d4:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80232d8:	0690      	lsls	r0, r2, #26
 80232da:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80232de:	1a14      	subs	r4, r2, r0
 80232e0:	643c      	str	r4, [r7, #64]	; 0x40
 80232e2:	eb63 0301 	sbc.w	r3, r3, r1
 80232e6:	647b      	str	r3, [r7, #68]	; 0x44
 80232e8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80232ec:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 80232f0:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80232f4:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80232f8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80232fc:	f143 0300 	adc.w	r3, r3, #0
 8023300:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8023304:	f04f 0200 	mov.w	r2, #0
 8023308:	f04f 0300 	mov.w	r3, #0
 802330c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8023310:	4621      	mov	r1, r4
 8023312:	0e8a      	lsrs	r2, r1, #26
 8023314:	4629      	mov	r1, r5
 8023316:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 802331a:	4629      	mov	r1, r5
 802331c:	168b      	asrs	r3, r1, #26
 802331e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    h3 += carry2;
 8023322:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8023326:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 802332a:	1884      	adds	r4, r0, r2
 802332c:	63bc      	str	r4, [r7, #56]	; 0x38
 802332e:	eb41 0303 	adc.w	r3, r1, r3
 8023332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023334:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8023338:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
    h2 -= carry2 << 26;
 802333c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8023340:	f04f 0000 	mov.w	r0, #0
 8023344:	f04f 0100 	mov.w	r1, #0
 8023348:	0699      	lsls	r1, r3, #26
 802334a:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 802334e:	0690      	lsls	r0, r2, #26
 8023350:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8023354:	1a14      	subs	r4, r2, r0
 8023356:	633c      	str	r4, [r7, #48]	; 0x30
 8023358:	eb63 0301 	sbc.w	r3, r3, r1
 802335c:	637b      	str	r3, [r7, #52]	; 0x34
 802335e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8023362:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8023366:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 802336a:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 802336e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8023372:	f143 0300 	adc.w	r3, r3, #0
 8023376:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802337a:	f04f 0200 	mov.w	r2, #0
 802337e:	f04f 0300 	mov.w	r3, #0
 8023382:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8023386:	4621      	mov	r1, r4
 8023388:	0e8a      	lsrs	r2, r1, #26
 802338a:	4629      	mov	r1, r5
 802338c:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8023390:	4629      	mov	r1, r5
 8023392:	168b      	asrs	r3, r1, #26
 8023394:	e002      	b.n	802339c <fe_frombytes+0x504>
 8023396:	bf00      	nop
 8023398:	01fffffc 	.word	0x01fffffc
 802339c:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
    h5 += carry4;
 80233a0:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 80233a4:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80233a8:	1884      	adds	r4, r0, r2
 80233aa:	62bc      	str	r4, [r7, #40]	; 0x28
 80233ac:	eb41 0303 	adc.w	r3, r1, r3
 80233b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80233b2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80233b6:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
    h4 -= carry4 << 26;
 80233ba:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80233be:	f04f 0000 	mov.w	r0, #0
 80233c2:	f04f 0100 	mov.w	r1, #0
 80233c6:	0699      	lsls	r1, r3, #26
 80233c8:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80233cc:	0690      	lsls	r0, r2, #26
 80233ce:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80233d2:	1a14      	subs	r4, r2, r0
 80233d4:	623c      	str	r4, [r7, #32]
 80233d6:	eb63 0301 	sbc.w	r3, r3, r1
 80233da:	627b      	str	r3, [r7, #36]	; 0x24
 80233dc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80233e0:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 80233e4:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80233e8:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80233ec:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80233f0:	f143 0300 	adc.w	r3, r3, #0
 80233f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80233f8:	f04f 0200 	mov.w	r2, #0
 80233fc:	f04f 0300 	mov.w	r3, #0
 8023400:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8023404:	4621      	mov	r1, r4
 8023406:	0e8a      	lsrs	r2, r1, #26
 8023408:	4629      	mov	r1, r5
 802340a:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 802340e:	4629      	mov	r1, r5
 8023410:	168b      	asrs	r3, r1, #26
 8023412:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
    h7 += carry6;
 8023416:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 802341a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 802341e:	1884      	adds	r4, r0, r2
 8023420:	61bc      	str	r4, [r7, #24]
 8023422:	eb41 0303 	adc.w	r3, r1, r3
 8023426:	61fb      	str	r3, [r7, #28]
 8023428:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 802342c:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
    h6 -= carry6 << 26;
 8023430:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8023434:	f04f 0200 	mov.w	r2, #0
 8023438:	f04f 0300 	mov.w	r3, #0
 802343c:	068b      	lsls	r3, r1, #26
 802343e:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8023442:	0682      	lsls	r2, r0, #26
 8023444:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8023448:	1a84      	subs	r4, r0, r2
 802344a:	613c      	str	r4, [r7, #16]
 802344c:	eb61 0303 	sbc.w	r3, r1, r3
 8023450:	617b      	str	r3, [r7, #20]
 8023452:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8023456:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 802345a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 802345e:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8023462:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8023466:	f143 0300 	adc.w	r3, r3, #0
 802346a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802346e:	f04f 0200 	mov.w	r2, #0
 8023472:	f04f 0300 	mov.w	r3, #0
 8023476:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 802347a:	4621      	mov	r1, r4
 802347c:	0e8a      	lsrs	r2, r1, #26
 802347e:	4629      	mov	r1, r5
 8023480:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8023484:	4629      	mov	r1, r5
 8023486:	168b      	asrs	r3, r1, #26
 8023488:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    h9 += carry8;
 802348c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8023490:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8023494:	1884      	adds	r4, r0, r2
 8023496:	60bc      	str	r4, [r7, #8]
 8023498:	eb41 0303 	adc.w	r3, r1, r3
 802349c:	60fb      	str	r3, [r7, #12]
 802349e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80234a2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    h8 -= carry8 << 26;
 80234a6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80234aa:	f04f 0200 	mov.w	r2, #0
 80234ae:	f04f 0300 	mov.w	r3, #0
 80234b2:	068b      	lsls	r3, r1, #26
 80234b4:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 80234b8:	0682      	lsls	r2, r0, #26
 80234ba:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 80234be:	1a84      	subs	r4, r0, r2
 80234c0:	603c      	str	r4, [r7, #0]
 80234c2:	eb61 0303 	sbc.w	r3, r1, r3
 80234c6:	607b      	str	r3, [r7, #4]
 80234c8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80234cc:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150

    h[0] = (int32_t) h0;
 80234d0:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80234d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80234d8:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 80234da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80234de:	3304      	adds	r3, #4
 80234e0:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80234e4:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 80234e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80234ea:	3308      	adds	r3, #8
 80234ec:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80234f0:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 80234f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80234f6:	330c      	adds	r3, #12
 80234f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80234fc:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 80234fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023502:	3310      	adds	r3, #16
 8023504:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8023508:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 802350a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802350e:	3314      	adds	r3, #20
 8023510:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8023514:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 8023516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802351a:	3318      	adds	r3, #24
 802351c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8023520:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 8023522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023526:	331c      	adds	r3, #28
 8023528:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 802352c:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 802352e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8023532:	3320      	adds	r3, #32
 8023534:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8023538:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 802353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802353e:	3324      	adds	r3, #36	; 0x24
 8023540:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8023544:	601a      	str	r2, [r3, #0]
}
 8023546:	bf00      	nop
 8023548:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 802354c:	46bd      	mov	sp, r7
 802354e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023552:	bf00      	nop

08023554 <fe_invert>:



void fe_invert(fe out, const fe z) {
 8023554:	b580      	push	{r7, lr}
 8023556:	b0ac      	sub	sp, #176	; 0xb0
 8023558:	af00      	add	r7, sp, #0
 802355a:	6078      	str	r0, [r7, #4]
 802355c:	6039      	str	r1, [r7, #0]
    fe t1;
    fe t2;
    fe t3;
    int i;

    fe_sq(t0, z);
 802355e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8023562:	6839      	ldr	r1, [r7, #0]
 8023564:	4618      	mov	r0, r3
 8023566:	f003 f99a 	bl	802689e <fe_sq>

    for (i = 1; i < 1; ++i) {
 802356a:	2301      	movs	r3, #1
 802356c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023570:	e00c      	b.n	802358c <fe_invert+0x38>
        fe_sq(t0, t0);
 8023572:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8023576:	f107 0384 	add.w	r3, r7, #132	; 0x84
 802357a:	4611      	mov	r1, r2
 802357c:	4618      	mov	r0, r3
 802357e:	f003 f98e 	bl	802689e <fe_sq>
    for (i = 1; i < 1; ++i) {
 8023582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8023586:	3301      	adds	r3, #1
 8023588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802358c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8023590:	2b00      	cmp	r3, #0
 8023592:	ddee      	ble.n	8023572 <fe_invert+0x1e>
    }

    fe_sq(t1, t0);
 8023594:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8023598:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802359c:	4611      	mov	r1, r2
 802359e:	4618      	mov	r0, r3
 80235a0:	f003 f97d 	bl	802689e <fe_sq>

    for (i = 1; i < 2; ++i) {
 80235a4:	2301      	movs	r3, #1
 80235a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80235aa:	e00c      	b.n	80235c6 <fe_invert+0x72>
        fe_sq(t1, t1);
 80235ac:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80235b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80235b4:	4611      	mov	r1, r2
 80235b6:	4618      	mov	r0, r3
 80235b8:	f003 f971 	bl	802689e <fe_sq>
    for (i = 1; i < 2; ++i) {
 80235bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80235c0:	3301      	adds	r3, #1
 80235c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80235c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80235ca:	2b01      	cmp	r3, #1
 80235cc:	ddee      	ble.n	80235ac <fe_invert+0x58>
    }

    fe_mul(t1, z, t1);
 80235ce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80235d2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80235d6:	6839      	ldr	r1, [r7, #0]
 80235d8:	4618      	mov	r0, r3
 80235da:	f000 fa51 	bl	8023a80 <fe_mul>
    fe_mul(t0, t0, t1);
 80235de:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80235e2:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80235e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80235ea:	4618      	mov	r0, r3
 80235ec:	f000 fa48 	bl	8023a80 <fe_mul>
    fe_sq(t2, t0);
 80235f0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80235f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80235f8:	4611      	mov	r1, r2
 80235fa:	4618      	mov	r0, r3
 80235fc:	f003 f94f 	bl	802689e <fe_sq>

    for (i = 1; i < 1; ++i) {
 8023600:	2301      	movs	r3, #1
 8023602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023606:	e00c      	b.n	8023622 <fe_invert+0xce>
        fe_sq(t2, t2);
 8023608:	f107 0234 	add.w	r2, r7, #52	; 0x34
 802360c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8023610:	4611      	mov	r1, r2
 8023612:	4618      	mov	r0, r3
 8023614:	f003 f943 	bl	802689e <fe_sq>
    for (i = 1; i < 1; ++i) {
 8023618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802361c:	3301      	adds	r3, #1
 802361e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8023626:	2b00      	cmp	r3, #0
 8023628:	ddee      	ble.n	8023608 <fe_invert+0xb4>
    }

    fe_mul(t1, t1, t2);
 802362a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 802362e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8023632:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023636:	4618      	mov	r0, r3
 8023638:	f000 fa22 	bl	8023a80 <fe_mul>
    fe_sq(t2, t1);
 802363c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8023640:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8023644:	4611      	mov	r1, r2
 8023646:	4618      	mov	r0, r3
 8023648:	f003 f929 	bl	802689e <fe_sq>

    for (i = 1; i < 5; ++i) {
 802364c:	2301      	movs	r3, #1
 802364e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023652:	e00c      	b.n	802366e <fe_invert+0x11a>
        fe_sq(t2, t2);
 8023654:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8023658:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802365c:	4611      	mov	r1, r2
 802365e:	4618      	mov	r0, r3
 8023660:	f003 f91d 	bl	802689e <fe_sq>
    for (i = 1; i < 5; ++i) {
 8023664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8023668:	3301      	adds	r3, #1
 802366a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802366e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8023672:	2b04      	cmp	r3, #4
 8023674:	ddee      	ble.n	8023654 <fe_invert+0x100>
    }

    fe_mul(t1, t2, t1);
 8023676:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802367a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 802367e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023682:	4618      	mov	r0, r3
 8023684:	f000 f9fc 	bl	8023a80 <fe_mul>
    fe_sq(t2, t1);
 8023688:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802368c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8023690:	4611      	mov	r1, r2
 8023692:	4618      	mov	r0, r3
 8023694:	f003 f903 	bl	802689e <fe_sq>

    for (i = 1; i < 10; ++i) {
 8023698:	2301      	movs	r3, #1
 802369a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802369e:	e00c      	b.n	80236ba <fe_invert+0x166>
        fe_sq(t2, t2);
 80236a0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80236a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80236a8:	4611      	mov	r1, r2
 80236aa:	4618      	mov	r0, r3
 80236ac:	f003 f8f7 	bl	802689e <fe_sq>
    for (i = 1; i < 10; ++i) {
 80236b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80236b4:	3301      	adds	r3, #1
 80236b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80236ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80236be:	2b09      	cmp	r3, #9
 80236c0:	ddee      	ble.n	80236a0 <fe_invert+0x14c>
    }

    fe_mul(t2, t2, t1);
 80236c2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80236c6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80236ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80236ce:	4618      	mov	r0, r3
 80236d0:	f000 f9d6 	bl	8023a80 <fe_mul>
    fe_sq(t3, t2);
 80236d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80236d8:	f107 030c 	add.w	r3, r7, #12
 80236dc:	4611      	mov	r1, r2
 80236de:	4618      	mov	r0, r3
 80236e0:	f003 f8dd 	bl	802689e <fe_sq>

    for (i = 1; i < 20; ++i) {
 80236e4:	2301      	movs	r3, #1
 80236e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80236ea:	e00c      	b.n	8023706 <fe_invert+0x1b2>
        fe_sq(t3, t3);
 80236ec:	f107 020c 	add.w	r2, r7, #12
 80236f0:	f107 030c 	add.w	r3, r7, #12
 80236f4:	4611      	mov	r1, r2
 80236f6:	4618      	mov	r0, r3
 80236f8:	f003 f8d1 	bl	802689e <fe_sq>
    for (i = 1; i < 20; ++i) {
 80236fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8023700:	3301      	adds	r3, #1
 8023702:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802370a:	2b13      	cmp	r3, #19
 802370c:	ddee      	ble.n	80236ec <fe_invert+0x198>
    }

    fe_mul(t2, t3, t2);
 802370e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8023712:	f107 010c 	add.w	r1, r7, #12
 8023716:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802371a:	4618      	mov	r0, r3
 802371c:	f000 f9b0 	bl	8023a80 <fe_mul>
    fe_sq(t2, t2);
 8023720:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8023724:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8023728:	4611      	mov	r1, r2
 802372a:	4618      	mov	r0, r3
 802372c:	f003 f8b7 	bl	802689e <fe_sq>

    for (i = 1; i < 10; ++i) {
 8023730:	2301      	movs	r3, #1
 8023732:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023736:	e00c      	b.n	8023752 <fe_invert+0x1fe>
        fe_sq(t2, t2);
 8023738:	f107 0234 	add.w	r2, r7, #52	; 0x34
 802373c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8023740:	4611      	mov	r1, r2
 8023742:	4618      	mov	r0, r3
 8023744:	f003 f8ab 	bl	802689e <fe_sq>
    for (i = 1; i < 10; ++i) {
 8023748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802374c:	3301      	adds	r3, #1
 802374e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8023756:	2b09      	cmp	r3, #9
 8023758:	ddee      	ble.n	8023738 <fe_invert+0x1e4>
    }

    fe_mul(t1, t2, t1);
 802375a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802375e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8023762:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023766:	4618      	mov	r0, r3
 8023768:	f000 f98a 	bl	8023a80 <fe_mul>
    fe_sq(t2, t1);
 802376c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8023770:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8023774:	4611      	mov	r1, r2
 8023776:	4618      	mov	r0, r3
 8023778:	f003 f891 	bl	802689e <fe_sq>

    for (i = 1; i < 50; ++i) {
 802377c:	2301      	movs	r3, #1
 802377e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023782:	e00c      	b.n	802379e <fe_invert+0x24a>
        fe_sq(t2, t2);
 8023784:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8023788:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802378c:	4611      	mov	r1, r2
 802378e:	4618      	mov	r0, r3
 8023790:	f003 f885 	bl	802689e <fe_sq>
    for (i = 1; i < 50; ++i) {
 8023794:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8023798:	3301      	adds	r3, #1
 802379a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802379e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80237a2:	2b31      	cmp	r3, #49	; 0x31
 80237a4:	ddee      	ble.n	8023784 <fe_invert+0x230>
    }

    fe_mul(t2, t2, t1);
 80237a6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80237aa:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80237ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80237b2:	4618      	mov	r0, r3
 80237b4:	f000 f964 	bl	8023a80 <fe_mul>
    fe_sq(t3, t2);
 80237b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80237bc:	f107 030c 	add.w	r3, r7, #12
 80237c0:	4611      	mov	r1, r2
 80237c2:	4618      	mov	r0, r3
 80237c4:	f003 f86b 	bl	802689e <fe_sq>

    for (i = 1; i < 100; ++i) {
 80237c8:	2301      	movs	r3, #1
 80237ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80237ce:	e00c      	b.n	80237ea <fe_invert+0x296>
        fe_sq(t3, t3);
 80237d0:	f107 020c 	add.w	r2, r7, #12
 80237d4:	f107 030c 	add.w	r3, r7, #12
 80237d8:	4611      	mov	r1, r2
 80237da:	4618      	mov	r0, r3
 80237dc:	f003 f85f 	bl	802689e <fe_sq>
    for (i = 1; i < 100; ++i) {
 80237e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80237e4:	3301      	adds	r3, #1
 80237e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80237ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80237ee:	2b63      	cmp	r3, #99	; 0x63
 80237f0:	ddee      	ble.n	80237d0 <fe_invert+0x27c>
    }

    fe_mul(t2, t3, t2);
 80237f2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80237f6:	f107 010c 	add.w	r1, r7, #12
 80237fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80237fe:	4618      	mov	r0, r3
 8023800:	f000 f93e 	bl	8023a80 <fe_mul>
    fe_sq(t2, t2);
 8023804:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8023808:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802380c:	4611      	mov	r1, r2
 802380e:	4618      	mov	r0, r3
 8023810:	f003 f845 	bl	802689e <fe_sq>

    for (i = 1; i < 50; ++i) {
 8023814:	2301      	movs	r3, #1
 8023816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802381a:	e00c      	b.n	8023836 <fe_invert+0x2e2>
        fe_sq(t2, t2);
 802381c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8023820:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8023824:	4611      	mov	r1, r2
 8023826:	4618      	mov	r0, r3
 8023828:	f003 f839 	bl	802689e <fe_sq>
    for (i = 1; i < 50; ++i) {
 802382c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8023830:	3301      	adds	r3, #1
 8023832:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802383a:	2b31      	cmp	r3, #49	; 0x31
 802383c:	ddee      	ble.n	802381c <fe_invert+0x2c8>
    }

    fe_mul(t1, t2, t1);
 802383e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8023842:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8023846:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802384a:	4618      	mov	r0, r3
 802384c:	f000 f918 	bl	8023a80 <fe_mul>
    fe_sq(t1, t1);
 8023850:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8023854:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023858:	4611      	mov	r1, r2
 802385a:	4618      	mov	r0, r3
 802385c:	f003 f81f 	bl	802689e <fe_sq>

    for (i = 1; i < 5; ++i) {
 8023860:	2301      	movs	r3, #1
 8023862:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023866:	e00c      	b.n	8023882 <fe_invert+0x32e>
        fe_sq(t1, t1);
 8023868:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802386c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023870:	4611      	mov	r1, r2
 8023872:	4618      	mov	r0, r3
 8023874:	f003 f813 	bl	802689e <fe_sq>
    for (i = 1; i < 5; ++i) {
 8023878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802387c:	3301      	adds	r3, #1
 802387e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8023886:	2b04      	cmp	r3, #4
 8023888:	ddee      	ble.n	8023868 <fe_invert+0x314>
    }

    fe_mul(out, t1, t0);
 802388a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 802388e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023892:	4619      	mov	r1, r3
 8023894:	6878      	ldr	r0, [r7, #4]
 8023896:	f000 f8f3 	bl	8023a80 <fe_mul>
}
 802389a:	bf00      	nop
 802389c:	37b0      	adds	r7, #176	; 0xb0
 802389e:	46bd      	mov	sp, r7
 80238a0:	bd80      	pop	{r7, pc}

080238a2 <fe_isnegative>:

    Preconditions:
       |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

int fe_isnegative(const fe f) {
 80238a2:	b580      	push	{r7, lr}
 80238a4:	b08a      	sub	sp, #40	; 0x28
 80238a6:	af00      	add	r7, sp, #0
 80238a8:	6078      	str	r0, [r7, #4]
    unsigned char s[32];

    fe_tobytes(s, f);
 80238aa:	f107 0308 	add.w	r3, r7, #8
 80238ae:	6879      	ldr	r1, [r7, #4]
 80238b0:	4618      	mov	r0, r3
 80238b2:	f006 f8e2 	bl	8029a7a <fe_tobytes>
    
    return s[0] & 1;
 80238b6:	7a3b      	ldrb	r3, [r7, #8]
 80238b8:	f003 0301 	and.w	r3, r3, #1
}
 80238bc:	4618      	mov	r0, r3
 80238be:	3728      	adds	r7, #40	; 0x28
 80238c0:	46bd      	mov	sp, r7
 80238c2:	bd80      	pop	{r7, pc}

080238c4 <fe_isnonzero>:

    Preconditions:
       |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

int fe_isnonzero(const fe f) {
 80238c4:	b580      	push	{r7, lr}
 80238c6:	b08c      	sub	sp, #48	; 0x30
 80238c8:	af00      	add	r7, sp, #0
 80238ca:	6078      	str	r0, [r7, #4]
    unsigned char s[32];
    unsigned char r;

    fe_tobytes(s, f);
 80238cc:	f107 030c 	add.w	r3, r7, #12
 80238d0:	6879      	ldr	r1, [r7, #4]
 80238d2:	4618      	mov	r0, r3
 80238d4:	f006 f8d1 	bl	8029a7a <fe_tobytes>

    r = s[0];
 80238d8:	7b3b      	ldrb	r3, [r7, #12]
 80238da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    #define F(i) r |= s[i]
    F(1);
 80238de:	7b7a      	ldrb	r2, [r7, #13]
 80238e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80238e4:	4313      	orrs	r3, r2
 80238e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(2);
 80238ea:	7bba      	ldrb	r2, [r7, #14]
 80238ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80238f0:	4313      	orrs	r3, r2
 80238f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(3);
 80238f6:	7bfa      	ldrb	r2, [r7, #15]
 80238f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80238fc:	4313      	orrs	r3, r2
 80238fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(4);
 8023902:	7c3a      	ldrb	r2, [r7, #16]
 8023904:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023908:	4313      	orrs	r3, r2
 802390a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(5);
 802390e:	7c7a      	ldrb	r2, [r7, #17]
 8023910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023914:	4313      	orrs	r3, r2
 8023916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(6);
 802391a:	7cba      	ldrb	r2, [r7, #18]
 802391c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023920:	4313      	orrs	r3, r2
 8023922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(7);
 8023926:	7cfa      	ldrb	r2, [r7, #19]
 8023928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802392c:	4313      	orrs	r3, r2
 802392e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(8);
 8023932:	7d3a      	ldrb	r2, [r7, #20]
 8023934:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023938:	4313      	orrs	r3, r2
 802393a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(9);
 802393e:	7d7a      	ldrb	r2, [r7, #21]
 8023940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023944:	4313      	orrs	r3, r2
 8023946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(10);
 802394a:	7dba      	ldrb	r2, [r7, #22]
 802394c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023950:	4313      	orrs	r3, r2
 8023952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(11);
 8023956:	7dfa      	ldrb	r2, [r7, #23]
 8023958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802395c:	4313      	orrs	r3, r2
 802395e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(12);
 8023962:	7e3a      	ldrb	r2, [r7, #24]
 8023964:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023968:	4313      	orrs	r3, r2
 802396a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(13);
 802396e:	7e7a      	ldrb	r2, [r7, #25]
 8023970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023974:	4313      	orrs	r3, r2
 8023976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(14);
 802397a:	7eba      	ldrb	r2, [r7, #26]
 802397c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023980:	4313      	orrs	r3, r2
 8023982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(15);
 8023986:	7efa      	ldrb	r2, [r7, #27]
 8023988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802398c:	4313      	orrs	r3, r2
 802398e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(16);
 8023992:	7f3a      	ldrb	r2, [r7, #28]
 8023994:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023998:	4313      	orrs	r3, r2
 802399a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(17);
 802399e:	7f7a      	ldrb	r2, [r7, #29]
 80239a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80239a4:	4313      	orrs	r3, r2
 80239a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(18);
 80239aa:	7fba      	ldrb	r2, [r7, #30]
 80239ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80239b0:	4313      	orrs	r3, r2
 80239b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(19);
 80239b6:	7ffa      	ldrb	r2, [r7, #31]
 80239b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80239bc:	4313      	orrs	r3, r2
 80239be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(20);
 80239c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80239c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80239ca:	4313      	orrs	r3, r2
 80239cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(21);
 80239d0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80239d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80239d8:	4313      	orrs	r3, r2
 80239da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(22);
 80239de:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80239e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80239e6:	4313      	orrs	r3, r2
 80239e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(23);
 80239ec:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80239f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80239f4:	4313      	orrs	r3, r2
 80239f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(24);
 80239fa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80239fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023a02:	4313      	orrs	r3, r2
 8023a04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(25);
 8023a08:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8023a0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023a10:	4313      	orrs	r3, r2
 8023a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(26);
 8023a16:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8023a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023a1e:	4313      	orrs	r3, r2
 8023a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(27);
 8023a24:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8023a28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023a2c:	4313      	orrs	r3, r2
 8023a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(28);
 8023a32:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8023a36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023a3a:	4313      	orrs	r3, r2
 8023a3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(29);
 8023a40:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8023a44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023a48:	4313      	orrs	r3, r2
 8023a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(30);
 8023a4e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8023a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023a56:	4313      	orrs	r3, r2
 8023a58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(31);
 8023a5c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8023a60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023a64:	4313      	orrs	r3, r2
 8023a66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    #undef F

    return r != 0;
 8023a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023a6e:	2b00      	cmp	r3, #0
 8023a70:	bf14      	ite	ne
 8023a72:	2301      	movne	r3, #1
 8023a74:	2300      	moveq	r3, #0
 8023a76:	b2db      	uxtb	r3, r3
}
 8023a78:	4618      	mov	r0, r3
 8023a7a:	3730      	adds	r7, #48	; 0x30
 8023a7c:	46bd      	mov	sp, r7
 8023a7e:	bd80      	pop	{r7, pc}

08023a80 <fe_mul>:
    Can get away with 11 carries, but then data flow is much deeper.

    With tighter constraints on inputs can squeeze carries into int32.
*/

void fe_mul(fe h, const fe f, const fe g) {
 8023a80:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8023a84:	f6ad 0d4c 	subw	sp, sp, #2124	; 0x84c
 8023a88:	af00      	add	r7, sp, #0
 8023a8a:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8023a8e:	6018      	str	r0, [r3, #0]
 8023a90:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8023a94:	6019      	str	r1, [r3, #0]
 8023a96:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023a9a:	601a      	str	r2, [r3, #0]
    int32_t f0 = f[0];
 8023a9c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8023aa0:	681b      	ldr	r3, [r3, #0]
 8023aa2:	681b      	ldr	r3, [r3, #0]
 8023aa4:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
    int32_t f1 = f[1];
 8023aa8:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8023aac:	681b      	ldr	r3, [r3, #0]
 8023aae:	685b      	ldr	r3, [r3, #4]
 8023ab0:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
    int32_t f2 = f[2];
 8023ab4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8023ab8:	681b      	ldr	r3, [r3, #0]
 8023aba:	689b      	ldr	r3, [r3, #8]
 8023abc:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
    int32_t f3 = f[3];
 8023ac0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8023ac4:	681b      	ldr	r3, [r3, #0]
 8023ac6:	68db      	ldr	r3, [r3, #12]
 8023ac8:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
    int32_t f4 = f[4];
 8023acc:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8023ad0:	681b      	ldr	r3, [r3, #0]
 8023ad2:	691b      	ldr	r3, [r3, #16]
 8023ad4:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
    int32_t f5 = f[5];
 8023ad8:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8023adc:	681b      	ldr	r3, [r3, #0]
 8023ade:	695b      	ldr	r3, [r3, #20]
 8023ae0:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
    int32_t f6 = f[6];
 8023ae4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8023ae8:	681b      	ldr	r3, [r3, #0]
 8023aea:	699b      	ldr	r3, [r3, #24]
 8023aec:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
    int32_t f7 = f[7];
 8023af0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8023af4:	681b      	ldr	r3, [r3, #0]
 8023af6:	69db      	ldr	r3, [r3, #28]
 8023af8:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
    int32_t f8 = f[8];
 8023afc:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8023b00:	681b      	ldr	r3, [r3, #0]
 8023b02:	6a1b      	ldr	r3, [r3, #32]
 8023b04:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
    int32_t f9 = f[9];
 8023b08:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8023b0c:	681b      	ldr	r3, [r3, #0]
 8023b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b10:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
    int32_t g0 = g[0];
 8023b14:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023b18:	681b      	ldr	r3, [r3, #0]
 8023b1a:	681b      	ldr	r3, [r3, #0]
 8023b1c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
    int32_t g1 = g[1];
 8023b20:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023b24:	681b      	ldr	r3, [r3, #0]
 8023b26:	685b      	ldr	r3, [r3, #4]
 8023b28:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
    int32_t g2 = g[2];
 8023b2c:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023b30:	681b      	ldr	r3, [r3, #0]
 8023b32:	689b      	ldr	r3, [r3, #8]
 8023b34:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
    int32_t g3 = g[3];
 8023b38:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023b3c:	681b      	ldr	r3, [r3, #0]
 8023b3e:	68db      	ldr	r3, [r3, #12]
 8023b40:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
    int32_t g4 = g[4];
 8023b44:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023b48:	681b      	ldr	r3, [r3, #0]
 8023b4a:	691b      	ldr	r3, [r3, #16]
 8023b4c:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
    int32_t g5 = g[5];
 8023b50:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023b54:	681b      	ldr	r3, [r3, #0]
 8023b56:	695b      	ldr	r3, [r3, #20]
 8023b58:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    int32_t g6 = g[6];
 8023b5c:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023b60:	681b      	ldr	r3, [r3, #0]
 8023b62:	699b      	ldr	r3, [r3, #24]
 8023b64:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
    int32_t g7 = g[7];
 8023b68:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023b6c:	681b      	ldr	r3, [r3, #0]
 8023b6e:	69db      	ldr	r3, [r3, #28]
 8023b70:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
    int32_t g8 = g[8];
 8023b74:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023b78:	681b      	ldr	r3, [r3, #0]
 8023b7a:	6a1b      	ldr	r3, [r3, #32]
 8023b7c:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
    int32_t g9 = g[9];
 8023b80:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023b84:	681b      	ldr	r3, [r3, #0]
 8023b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023b88:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
    int32_t g1_19 = 19 * g1; /* 1.959375*2^29 */
 8023b8c:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 8023b90:	4613      	mov	r3, r2
 8023b92:	00db      	lsls	r3, r3, #3
 8023b94:	4413      	add	r3, r2
 8023b96:	005b      	lsls	r3, r3, #1
 8023b98:	4413      	add	r3, r2
 8023b9a:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
    int32_t g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 8023b9e:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8023ba2:	4613      	mov	r3, r2
 8023ba4:	00db      	lsls	r3, r3, #3
 8023ba6:	4413      	add	r3, r2
 8023ba8:	005b      	lsls	r3, r3, #1
 8023baa:	4413      	add	r3, r2
 8023bac:	f8c7 37f0 	str.w	r3, [r7, #2032]	; 0x7f0
    int32_t g3_19 = 19 * g3;
 8023bb0:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8023bb4:	4613      	mov	r3, r2
 8023bb6:	00db      	lsls	r3, r3, #3
 8023bb8:	4413      	add	r3, r2
 8023bba:	005b      	lsls	r3, r3, #1
 8023bbc:	4413      	add	r3, r2
 8023bbe:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
    int32_t g4_19 = 19 * g4;
 8023bc2:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 8023bc6:	4613      	mov	r3, r2
 8023bc8:	00db      	lsls	r3, r3, #3
 8023bca:	4413      	add	r3, r2
 8023bcc:	005b      	lsls	r3, r3, #1
 8023bce:	4413      	add	r3, r2
 8023bd0:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
    int32_t g5_19 = 19 * g5;
 8023bd4:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8023bd8:	4613      	mov	r3, r2
 8023bda:	00db      	lsls	r3, r3, #3
 8023bdc:	4413      	add	r3, r2
 8023bde:	005b      	lsls	r3, r3, #1
 8023be0:	4413      	add	r3, r2
 8023be2:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
    int32_t g6_19 = 19 * g6;
 8023be6:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 8023bea:	4613      	mov	r3, r2
 8023bec:	00db      	lsls	r3, r3, #3
 8023bee:	4413      	add	r3, r2
 8023bf0:	005b      	lsls	r3, r3, #1
 8023bf2:	4413      	add	r3, r2
 8023bf4:	f8c7 37e0 	str.w	r3, [r7, #2016]	; 0x7e0
    int32_t g7_19 = 19 * g7;
 8023bf8:	f8d7 2800 	ldr.w	r2, [r7, #2048]	; 0x800
 8023bfc:	4613      	mov	r3, r2
 8023bfe:	00db      	lsls	r3, r3, #3
 8023c00:	4413      	add	r3, r2
 8023c02:	005b      	lsls	r3, r3, #1
 8023c04:	4413      	add	r3, r2
 8023c06:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
    int32_t g8_19 = 19 * g8;
 8023c0a:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	; 0x7fc
 8023c0e:	4613      	mov	r3, r2
 8023c10:	00db      	lsls	r3, r3, #3
 8023c12:	4413      	add	r3, r2
 8023c14:	005b      	lsls	r3, r3, #1
 8023c16:	4413      	add	r3, r2
 8023c18:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
    int32_t g9_19 = 19 * g9;
 8023c1c:	f8d7 27f8 	ldr.w	r2, [r7, #2040]	; 0x7f8
 8023c20:	4613      	mov	r3, r2
 8023c22:	00db      	lsls	r3, r3, #3
 8023c24:	4413      	add	r3, r2
 8023c26:	005b      	lsls	r3, r3, #1
 8023c28:	4413      	add	r3, r2
 8023c2a:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
    int32_t f1_2 = 2 * f1;
 8023c2e:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8023c32:	005b      	lsls	r3, r3, #1
 8023c34:	f8c7 37d0 	str.w	r3, [r7, #2000]	; 0x7d0
    int32_t f3_2 = 2 * f3;
 8023c38:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8023c3c:	005b      	lsls	r3, r3, #1
 8023c3e:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
    int32_t f5_2 = 2 * f5;
 8023c42:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8023c46:	005b      	lsls	r3, r3, #1
 8023c48:	f8c7 37c8 	str.w	r3, [r7, #1992]	; 0x7c8
    int32_t f7_2 = 2 * f7;
 8023c4c:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8023c50:	005b      	lsls	r3, r3, #1
 8023c52:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
    int32_t f9_2 = 2 * f9;
 8023c56:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8023c5a:	005b      	lsls	r3, r3, #1
 8023c5c:	f8c7 37c0 	str.w	r3, [r7, #1984]	; 0x7c0
    int64_t f0g0    = f0   * (int64_t) g0;
 8023c60:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8023c64:	4618      	mov	r0, r3
 8023c66:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023c6a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8023c6e:	461a      	mov	r2, r3
 8023c70:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023c74:	fb02 f501 	mul.w	r5, r2, r1
 8023c78:	fb00 f403 	mul.w	r4, r0, r3
 8023c7c:	442c      	add	r4, r5
 8023c7e:	fba0 2302 	umull	r2, r3, r0, r2
 8023c82:	18e1      	adds	r1, r4, r3
 8023c84:	460b      	mov	r3, r1
 8023c86:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8023c8a:	e9c1 2300 	strd	r2, r3, [r1]
 8023c8e:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8023c92:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g1    = f0   * (int64_t) g1;
 8023c96:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8023c9a:	4618      	mov	r0, r3
 8023c9c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023ca0:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8023ca4:	461a      	mov	r2, r3
 8023ca6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023caa:	fb02 f501 	mul.w	r5, r2, r1
 8023cae:	fb00 f403 	mul.w	r4, r0, r3
 8023cb2:	442c      	add	r4, r5
 8023cb4:	fba0 2302 	umull	r2, r3, r0, r2
 8023cb8:	18e1      	adds	r1, r4, r3
 8023cba:	460b      	mov	r3, r1
 8023cbc:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 8023cc0:	e9c1 2300 	strd	r2, r3, [r1]
 8023cc4:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 8023cc8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g2    = f0   * (int64_t) g2;
 8023ccc:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8023cd0:	4618      	mov	r0, r3
 8023cd2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023cd6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8023cda:	461a      	mov	r2, r3
 8023cdc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023ce0:	fb02 f501 	mul.w	r5, r2, r1
 8023ce4:	fb00 f403 	mul.w	r4, r0, r3
 8023ce8:	442c      	add	r4, r5
 8023cea:	fba0 2302 	umull	r2, r3, r0, r2
 8023cee:	18e1      	adds	r1, r4, r3
 8023cf0:	460b      	mov	r3, r1
 8023cf2:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 8023cf6:	e9c1 2300 	strd	r2, r3, [r1]
 8023cfa:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 8023cfe:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g3    = f0   * (int64_t) g3;
 8023d02:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8023d06:	4618      	mov	r0, r3
 8023d08:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023d0c:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8023d10:	461a      	mov	r2, r3
 8023d12:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023d16:	fb02 f501 	mul.w	r5, r2, r1
 8023d1a:	fb00 f403 	mul.w	r4, r0, r3
 8023d1e:	442c      	add	r4, r5
 8023d20:	fba0 2302 	umull	r2, r3, r0, r2
 8023d24:	18e1      	adds	r1, r4, r3
 8023d26:	460b      	mov	r3, r1
 8023d28:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 8023d2c:	e9c1 2300 	strd	r2, r3, [r1]
 8023d30:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 8023d34:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g4    = f0   * (int64_t) g4;
 8023d38:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8023d3c:	4618      	mov	r0, r3
 8023d3e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023d42:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8023d46:	461a      	mov	r2, r3
 8023d48:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023d4c:	fb02 f501 	mul.w	r5, r2, r1
 8023d50:	fb00 f403 	mul.w	r4, r0, r3
 8023d54:	442c      	add	r4, r5
 8023d56:	fba0 2302 	umull	r2, r3, r0, r2
 8023d5a:	18e1      	adds	r1, r4, r3
 8023d5c:	460b      	mov	r3, r1
 8023d5e:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 8023d62:	e9c1 2300 	strd	r2, r3, [r1]
 8023d66:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 8023d6a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g5    = f0   * (int64_t) g5;
 8023d6e:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8023d72:	4618      	mov	r0, r3
 8023d74:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023d78:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8023d7c:	461a      	mov	r2, r3
 8023d7e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023d82:	fb02 f501 	mul.w	r5, r2, r1
 8023d86:	fb00 f403 	mul.w	r4, r0, r3
 8023d8a:	442c      	add	r4, r5
 8023d8c:	fba0 2302 	umull	r2, r3, r0, r2
 8023d90:	18e1      	adds	r1, r4, r3
 8023d92:	460b      	mov	r3, r1
 8023d94:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 8023d98:	e9c1 2300 	strd	r2, r3, [r1]
 8023d9c:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 8023da0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g6    = f0   * (int64_t) g6;
 8023da4:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8023da8:	4618      	mov	r0, r3
 8023daa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023dae:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8023db2:	461a      	mov	r2, r3
 8023db4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023db8:	fb02 f501 	mul.w	r5, r2, r1
 8023dbc:	fb00 f403 	mul.w	r4, r0, r3
 8023dc0:	442c      	add	r4, r5
 8023dc2:	fba0 2302 	umull	r2, r3, r0, r2
 8023dc6:	18e1      	adds	r1, r4, r3
 8023dc8:	460b      	mov	r3, r1
 8023dca:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 8023dce:	e9c1 2300 	strd	r2, r3, [r1]
 8023dd2:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 8023dd6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g7    = f0   * (int64_t) g7;
 8023dda:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8023dde:	4618      	mov	r0, r3
 8023de0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023de4:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8023de8:	461a      	mov	r2, r3
 8023dea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023dee:	fb02 f501 	mul.w	r5, r2, r1
 8023df2:	fb00 f403 	mul.w	r4, r0, r3
 8023df6:	442c      	add	r4, r5
 8023df8:	fba0 2302 	umull	r2, r3, r0, r2
 8023dfc:	18e1      	adds	r1, r4, r3
 8023dfe:	460b      	mov	r3, r1
 8023e00:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 8023e04:	e9c1 2300 	strd	r2, r3, [r1]
 8023e08:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 8023e0c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g8    = f0   * (int64_t) g8;
 8023e10:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8023e14:	4618      	mov	r0, r3
 8023e16:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023e1a:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 8023e1e:	461a      	mov	r2, r3
 8023e20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023e24:	fb02 f501 	mul.w	r5, r2, r1
 8023e28:	fb00 f403 	mul.w	r4, r0, r3
 8023e2c:	442c      	add	r4, r5
 8023e2e:	fba0 2302 	umull	r2, r3, r0, r2
 8023e32:	18e1      	adds	r1, r4, r3
 8023e34:	460b      	mov	r3, r1
 8023e36:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 8023e3a:	e9c1 2300 	strd	r2, r3, [r1]
 8023e3e:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 8023e42:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g9    = f0   * (int64_t) g9;
 8023e46:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8023e4a:	4618      	mov	r0, r3
 8023e4c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023e50:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 8023e54:	461a      	mov	r2, r3
 8023e56:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023e5a:	fb02 f501 	mul.w	r5, r2, r1
 8023e5e:	fb00 f403 	mul.w	r4, r0, r3
 8023e62:	442c      	add	r4, r5
 8023e64:	fba0 2302 	umull	r2, r3, r0, r2
 8023e68:	18e1      	adds	r1, r4, r3
 8023e6a:	460b      	mov	r3, r1
 8023e6c:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 8023e70:	e9c1 2300 	strd	r2, r3, [r1]
 8023e74:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 8023e78:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g0    = f1   * (int64_t) g0;
 8023e7c:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8023e80:	4618      	mov	r0, r3
 8023e82:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023e86:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8023e8a:	461a      	mov	r2, r3
 8023e8c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023e90:	fb02 f501 	mul.w	r5, r2, r1
 8023e94:	fb00 f403 	mul.w	r4, r0, r3
 8023e98:	442c      	add	r4, r5
 8023e9a:	fba0 2302 	umull	r2, r3, r0, r2
 8023e9e:	18e1      	adds	r1, r4, r3
 8023ea0:	460b      	mov	r3, r1
 8023ea2:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8023ea6:	e9c1 2300 	strd	r2, r3, [r1]
 8023eaa:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8023eae:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g1_2  = f1_2 * (int64_t) g1;
 8023eb2:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8023eb6:	4618      	mov	r0, r3
 8023eb8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023ebc:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8023ec0:	461a      	mov	r2, r3
 8023ec2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023ec6:	fb02 f501 	mul.w	r5, r2, r1
 8023eca:	fb00 f403 	mul.w	r4, r0, r3
 8023ece:	442c      	add	r4, r5
 8023ed0:	fba0 2302 	umull	r2, r3, r0, r2
 8023ed4:	18e1      	adds	r1, r4, r3
 8023ed6:	460b      	mov	r3, r1
 8023ed8:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 8023edc:	e9c1 2300 	strd	r2, r3, [r1]
 8023ee0:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 8023ee4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g2    = f1   * (int64_t) g2;
 8023ee8:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8023eec:	4618      	mov	r0, r3
 8023eee:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023ef2:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8023ef6:	461a      	mov	r2, r3
 8023ef8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023efc:	fb02 f501 	mul.w	r5, r2, r1
 8023f00:	fb00 f403 	mul.w	r4, r0, r3
 8023f04:	442c      	add	r4, r5
 8023f06:	fba0 2302 	umull	r2, r3, r0, r2
 8023f0a:	18e1      	adds	r1, r4, r3
 8023f0c:	460b      	mov	r3, r1
 8023f0e:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 8023f12:	e9c1 2300 	strd	r2, r3, [r1]
 8023f16:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 8023f1a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g3_2  = f1_2 * (int64_t) g3;
 8023f1e:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8023f22:	4618      	mov	r0, r3
 8023f24:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023f28:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8023f2c:	461a      	mov	r2, r3
 8023f2e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023f32:	fb02 f501 	mul.w	r5, r2, r1
 8023f36:	fb00 f403 	mul.w	r4, r0, r3
 8023f3a:	442c      	add	r4, r5
 8023f3c:	fba0 2302 	umull	r2, r3, r0, r2
 8023f40:	18e1      	adds	r1, r4, r3
 8023f42:	460b      	mov	r3, r1
 8023f44:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 8023f48:	e9c1 2300 	strd	r2, r3, [r1]
 8023f4c:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 8023f50:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g4    = f1   * (int64_t) g4;
 8023f54:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8023f58:	4618      	mov	r0, r3
 8023f5a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023f5e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8023f62:	461a      	mov	r2, r3
 8023f64:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023f68:	fb02 f501 	mul.w	r5, r2, r1
 8023f6c:	fb00 f403 	mul.w	r4, r0, r3
 8023f70:	442c      	add	r4, r5
 8023f72:	fba0 2302 	umull	r2, r3, r0, r2
 8023f76:	18e1      	adds	r1, r4, r3
 8023f78:	460b      	mov	r3, r1
 8023f7a:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 8023f7e:	e9c1 2300 	strd	r2, r3, [r1]
 8023f82:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 8023f86:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g5_2  = f1_2 * (int64_t) g5;
 8023f8a:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8023f8e:	4618      	mov	r0, r3
 8023f90:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023f94:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8023f98:	461a      	mov	r2, r3
 8023f9a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023f9e:	fb02 f501 	mul.w	r5, r2, r1
 8023fa2:	fb00 f403 	mul.w	r4, r0, r3
 8023fa6:	442c      	add	r4, r5
 8023fa8:	fba0 2302 	umull	r2, r3, r0, r2
 8023fac:	18e1      	adds	r1, r4, r3
 8023fae:	460b      	mov	r3, r1
 8023fb0:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 8023fb4:	e9c1 2300 	strd	r2, r3, [r1]
 8023fb8:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 8023fbc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g6    = f1   * (int64_t) g6;
 8023fc0:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8023fc4:	4618      	mov	r0, r3
 8023fc6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023fca:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8023fce:	461a      	mov	r2, r3
 8023fd0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023fd4:	fb02 f501 	mul.w	r5, r2, r1
 8023fd8:	fb00 f403 	mul.w	r4, r0, r3
 8023fdc:	442c      	add	r4, r5
 8023fde:	fba0 2302 	umull	r2, r3, r0, r2
 8023fe2:	18e1      	adds	r1, r4, r3
 8023fe4:	460b      	mov	r3, r1
 8023fe6:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 8023fea:	e9c1 2300 	strd	r2, r3, [r1]
 8023fee:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 8023ff2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g7_2  = f1_2 * (int64_t) g7;
 8023ff6:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8023ffa:	4618      	mov	r0, r3
 8023ffc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024000:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8024004:	461a      	mov	r2, r3
 8024006:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802400a:	fb02 f501 	mul.w	r5, r2, r1
 802400e:	fb00 f403 	mul.w	r4, r0, r3
 8024012:	442c      	add	r4, r5
 8024014:	fba0 2302 	umull	r2, r3, r0, r2
 8024018:	18e1      	adds	r1, r4, r3
 802401a:	460b      	mov	r3, r1
 802401c:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8024020:	e9c1 2300 	strd	r2, r3, [r1]
 8024024:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8024028:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g8    = f1   * (int64_t) g8;
 802402c:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8024030:	4618      	mov	r0, r3
 8024032:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024036:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 802403a:	461a      	mov	r2, r3
 802403c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024040:	fb02 f501 	mul.w	r5, r2, r1
 8024044:	fb00 f403 	mul.w	r4, r0, r3
 8024048:	442c      	add	r4, r5
 802404a:	fba0 2302 	umull	r2, r3, r0, r2
 802404e:	18e1      	adds	r1, r4, r3
 8024050:	460b      	mov	r3, r1
 8024052:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 8024056:	e9c1 2300 	strd	r2, r3, [r1]
 802405a:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 802405e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g9_38 = f1_2 * (int64_t) g9_19;
 8024062:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8024066:	4618      	mov	r0, r3
 8024068:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802406c:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8024070:	461a      	mov	r2, r3
 8024072:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024076:	fb02 f501 	mul.w	r5, r2, r1
 802407a:	fb00 f403 	mul.w	r4, r0, r3
 802407e:	442c      	add	r4, r5
 8024080:	fba0 2302 	umull	r2, r3, r0, r2
 8024084:	18e1      	adds	r1, r4, r3
 8024086:	460b      	mov	r3, r1
 8024088:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 802408c:	e9c1 2300 	strd	r2, r3, [r1]
 8024090:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8024094:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g0    = f2   * (int64_t) g0;
 8024098:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 802409c:	4618      	mov	r0, r3
 802409e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80240a2:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80240a6:	461a      	mov	r2, r3
 80240a8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80240ac:	fb02 f501 	mul.w	r5, r2, r1
 80240b0:	fb00 f403 	mul.w	r4, r0, r3
 80240b4:	442c      	add	r4, r5
 80240b6:	fba0 2302 	umull	r2, r3, r0, r2
 80240ba:	18e1      	adds	r1, r4, r3
 80240bc:	460b      	mov	r3, r1
 80240be:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 80240c2:	e9c1 2300 	strd	r2, r3, [r1]
 80240c6:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 80240ca:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g1    = f2   * (int64_t) g1;
 80240ce:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80240d2:	4618      	mov	r0, r3
 80240d4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80240d8:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80240dc:	461a      	mov	r2, r3
 80240de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80240e2:	fb02 f501 	mul.w	r5, r2, r1
 80240e6:	fb00 f403 	mul.w	r4, r0, r3
 80240ea:	442c      	add	r4, r5
 80240ec:	fba0 2302 	umull	r2, r3, r0, r2
 80240f0:	18e1      	adds	r1, r4, r3
 80240f2:	460b      	mov	r3, r1
 80240f4:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 80240f8:	e9c1 2300 	strd	r2, r3, [r1]
 80240fc:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 8024100:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g2    = f2   * (int64_t) g2;
 8024104:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8024108:	4618      	mov	r0, r3
 802410a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802410e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8024112:	461a      	mov	r2, r3
 8024114:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024118:	fb02 f501 	mul.w	r5, r2, r1
 802411c:	fb00 f403 	mul.w	r4, r0, r3
 8024120:	442c      	add	r4, r5
 8024122:	fba0 2302 	umull	r2, r3, r0, r2
 8024126:	18e1      	adds	r1, r4, r3
 8024128:	460b      	mov	r3, r1
 802412a:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 802412e:	e9c1 2300 	strd	r2, r3, [r1]
 8024132:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 8024136:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g3    = f2   * (int64_t) g3;
 802413a:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 802413e:	4618      	mov	r0, r3
 8024140:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024144:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8024148:	461a      	mov	r2, r3
 802414a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802414e:	fb02 f501 	mul.w	r5, r2, r1
 8024152:	fb00 f403 	mul.w	r4, r0, r3
 8024156:	442c      	add	r4, r5
 8024158:	fba0 2302 	umull	r2, r3, r0, r2
 802415c:	18e1      	adds	r1, r4, r3
 802415e:	460b      	mov	r3, r1
 8024160:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 8024164:	e9c1 2300 	strd	r2, r3, [r1]
 8024168:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 802416c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g4    = f2   * (int64_t) g4;
 8024170:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8024174:	4618      	mov	r0, r3
 8024176:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802417a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 802417e:	461a      	mov	r2, r3
 8024180:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024184:	fb02 f501 	mul.w	r5, r2, r1
 8024188:	fb00 f403 	mul.w	r4, r0, r3
 802418c:	442c      	add	r4, r5
 802418e:	fba0 2302 	umull	r2, r3, r0, r2
 8024192:	18e1      	adds	r1, r4, r3
 8024194:	460b      	mov	r3, r1
 8024196:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 802419a:	e9c1 2300 	strd	r2, r3, [r1]
 802419e:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 80241a2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g5    = f2   * (int64_t) g5;
 80241a6:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80241aa:	4618      	mov	r0, r3
 80241ac:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80241b0:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80241b4:	461a      	mov	r2, r3
 80241b6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80241ba:	fb02 f501 	mul.w	r5, r2, r1
 80241be:	fb00 f403 	mul.w	r4, r0, r3
 80241c2:	442c      	add	r4, r5
 80241c4:	fba0 2302 	umull	r2, r3, r0, r2
 80241c8:	18e1      	adds	r1, r4, r3
 80241ca:	460b      	mov	r3, r1
 80241cc:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 80241d0:	e9c1 2300 	strd	r2, r3, [r1]
 80241d4:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 80241d8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g6    = f2   * (int64_t) g6;
 80241dc:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80241e0:	4618      	mov	r0, r3
 80241e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80241e6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80241ea:	461a      	mov	r2, r3
 80241ec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80241f0:	fb02 f501 	mul.w	r5, r2, r1
 80241f4:	fb00 f403 	mul.w	r4, r0, r3
 80241f8:	442c      	add	r4, r5
 80241fa:	fba0 2302 	umull	r2, r3, r0, r2
 80241fe:	18e1      	adds	r1, r4, r3
 8024200:	460b      	mov	r3, r1
 8024202:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 8024206:	e9c1 2300 	strd	r2, r3, [r1]
 802420a:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 802420e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g7    = f2   * (int64_t) g7;
 8024212:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8024216:	4618      	mov	r0, r3
 8024218:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802421c:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8024220:	461a      	mov	r2, r3
 8024222:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024226:	fb02 f501 	mul.w	r5, r2, r1
 802422a:	fb00 f403 	mul.w	r4, r0, r3
 802422e:	442c      	add	r4, r5
 8024230:	fba0 2302 	umull	r2, r3, r0, r2
 8024234:	18e1      	adds	r1, r4, r3
 8024236:	460b      	mov	r3, r1
 8024238:	f507 61dc 	add.w	r1, r7, #1760	; 0x6e0
 802423c:	e9c1 2300 	strd	r2, r3, [r1]
 8024240:	f507 61dc 	add.w	r1, r7, #1760	; 0x6e0
 8024244:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g8_19 = f2   * (int64_t) g8_19;
 8024248:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 802424c:	4618      	mov	r0, r3
 802424e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024252:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8024256:	461a      	mov	r2, r3
 8024258:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802425c:	fb02 f501 	mul.w	r5, r2, r1
 8024260:	fb00 f403 	mul.w	r4, r0, r3
 8024264:	442c      	add	r4, r5
 8024266:	fba0 2302 	umull	r2, r3, r0, r2
 802426a:	18e1      	adds	r1, r4, r3
 802426c:	460b      	mov	r3, r1
 802426e:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8024272:	e9c1 2300 	strd	r2, r3, [r1]
 8024276:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 802427a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g9_19 = f2   * (int64_t) g9_19;
 802427e:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8024282:	4618      	mov	r0, r3
 8024284:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024288:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 802428c:	461a      	mov	r2, r3
 802428e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024292:	fb02 f501 	mul.w	r5, r2, r1
 8024296:	fb00 f403 	mul.w	r4, r0, r3
 802429a:	442c      	add	r4, r5
 802429c:	fba0 2302 	umull	r2, r3, r0, r2
 80242a0:	18e1      	adds	r1, r4, r3
 80242a2:	460b      	mov	r3, r1
 80242a4:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 80242a8:	e9c1 2300 	strd	r2, r3, [r1]
 80242ac:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 80242b0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g0    = f3   * (int64_t) g0;
 80242b4:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 80242b8:	4618      	mov	r0, r3
 80242ba:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80242be:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80242c2:	461a      	mov	r2, r3
 80242c4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80242c8:	fb02 f501 	mul.w	r5, r2, r1
 80242cc:	fb00 f403 	mul.w	r4, r0, r3
 80242d0:	442c      	add	r4, r5
 80242d2:	fba0 2302 	umull	r2, r3, r0, r2
 80242d6:	18e1      	adds	r1, r4, r3
 80242d8:	460b      	mov	r3, r1
 80242da:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 80242de:	e9c1 2300 	strd	r2, r3, [r1]
 80242e2:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 80242e6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g1_2  = f3_2 * (int64_t) g1;
 80242ea:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 80242ee:	4618      	mov	r0, r3
 80242f0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80242f4:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80242f8:	461a      	mov	r2, r3
 80242fa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80242fe:	fb02 f501 	mul.w	r5, r2, r1
 8024302:	fb00 f403 	mul.w	r4, r0, r3
 8024306:	442c      	add	r4, r5
 8024308:	fba0 2302 	umull	r2, r3, r0, r2
 802430c:	18e1      	adds	r1, r4, r3
 802430e:	460b      	mov	r3, r1
 8024310:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 8024314:	e9c1 2300 	strd	r2, r3, [r1]
 8024318:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 802431c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g2    = f3   * (int64_t) g2;
 8024320:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8024324:	4618      	mov	r0, r3
 8024326:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802432a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 802432e:	461a      	mov	r2, r3
 8024330:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024334:	fb02 f501 	mul.w	r5, r2, r1
 8024338:	fb00 f403 	mul.w	r4, r0, r3
 802433c:	442c      	add	r4, r5
 802433e:	fba0 2302 	umull	r2, r3, r0, r2
 8024342:	18e1      	adds	r1, r4, r3
 8024344:	460b      	mov	r3, r1
 8024346:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 802434a:	e9c1 2300 	strd	r2, r3, [r1]
 802434e:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8024352:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g3_2  = f3_2 * (int64_t) g3;
 8024356:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 802435a:	4618      	mov	r0, r3
 802435c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024360:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8024364:	461a      	mov	r2, r3
 8024366:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802436a:	fb02 f501 	mul.w	r5, r2, r1
 802436e:	fb00 f403 	mul.w	r4, r0, r3
 8024372:	442c      	add	r4, r5
 8024374:	fba0 2302 	umull	r2, r3, r0, r2
 8024378:	18e1      	adds	r1, r4, r3
 802437a:	460b      	mov	r3, r1
 802437c:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8024380:	e9c1 2300 	strd	r2, r3, [r1]
 8024384:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8024388:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g4    = f3   * (int64_t) g4;
 802438c:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8024390:	4618      	mov	r0, r3
 8024392:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024396:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 802439a:	461a      	mov	r2, r3
 802439c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80243a0:	fb02 f501 	mul.w	r5, r2, r1
 80243a4:	fb00 f403 	mul.w	r4, r0, r3
 80243a8:	442c      	add	r4, r5
 80243aa:	fba0 2302 	umull	r2, r3, r0, r2
 80243ae:	18e1      	adds	r1, r4, r3
 80243b0:	460b      	mov	r3, r1
 80243b2:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 80243b6:	e9c1 2300 	strd	r2, r3, [r1]
 80243ba:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 80243be:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g5_2  = f3_2 * (int64_t) g5;
 80243c2:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 80243c6:	4618      	mov	r0, r3
 80243c8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80243cc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80243d0:	461a      	mov	r2, r3
 80243d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80243d6:	fb02 f501 	mul.w	r5, r2, r1
 80243da:	fb00 f403 	mul.w	r4, r0, r3
 80243de:	442c      	add	r4, r5
 80243e0:	fba0 2302 	umull	r2, r3, r0, r2
 80243e4:	18e1      	adds	r1, r4, r3
 80243e6:	460b      	mov	r3, r1
 80243e8:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 80243ec:	e9c1 2300 	strd	r2, r3, [r1]
 80243f0:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 80243f4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g6    = f3   * (int64_t) g6;
 80243f8:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 80243fc:	4618      	mov	r0, r3
 80243fe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024402:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8024406:	461a      	mov	r2, r3
 8024408:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802440c:	fb02 f501 	mul.w	r5, r2, r1
 8024410:	fb00 f403 	mul.w	r4, r0, r3
 8024414:	442c      	add	r4, r5
 8024416:	fba0 2302 	umull	r2, r3, r0, r2
 802441a:	18e1      	adds	r1, r4, r3
 802441c:	460b      	mov	r3, r1
 802441e:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 8024422:	e9c1 2300 	strd	r2, r3, [r1]
 8024426:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 802442a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g7_38 = f3_2 * (int64_t) g7_19;
 802442e:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 8024432:	4618      	mov	r0, r3
 8024434:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024438:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 802443c:	461a      	mov	r2, r3
 802443e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024442:	fb02 f501 	mul.w	r5, r2, r1
 8024446:	fb00 f403 	mul.w	r4, r0, r3
 802444a:	442c      	add	r4, r5
 802444c:	fba0 2302 	umull	r2, r3, r0, r2
 8024450:	18e1      	adds	r1, r4, r3
 8024452:	460b      	mov	r3, r1
 8024454:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 8024458:	e9c1 2300 	strd	r2, r3, [r1]
 802445c:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 8024460:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g8_19 = f3   * (int64_t) g8_19;
 8024464:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8024468:	4618      	mov	r0, r3
 802446a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802446e:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8024472:	461a      	mov	r2, r3
 8024474:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024478:	fb02 f501 	mul.w	r5, r2, r1
 802447c:	fb00 f403 	mul.w	r4, r0, r3
 8024480:	442c      	add	r4, r5
 8024482:	fba0 2302 	umull	r2, r3, r0, r2
 8024486:	18e1      	adds	r1, r4, r3
 8024488:	460b      	mov	r3, r1
 802448a:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 802448e:	e9c1 2300 	strd	r2, r3, [r1]
 8024492:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 8024496:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g9_38 = f3_2 * (int64_t) g9_19;
 802449a:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 802449e:	4618      	mov	r0, r3
 80244a0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80244a4:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 80244a8:	461a      	mov	r2, r3
 80244aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80244ae:	fb02 f501 	mul.w	r5, r2, r1
 80244b2:	fb00 f403 	mul.w	r4, r0, r3
 80244b6:	442c      	add	r4, r5
 80244b8:	fba0 2302 	umull	r2, r3, r0, r2
 80244bc:	18e1      	adds	r1, r4, r3
 80244be:	460b      	mov	r3, r1
 80244c0:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 80244c4:	e9c1 2300 	strd	r2, r3, [r1]
 80244c8:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 80244cc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g0    = f4   * (int64_t) g0;
 80244d0:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80244d4:	4618      	mov	r0, r3
 80244d6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80244da:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80244de:	461a      	mov	r2, r3
 80244e0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80244e4:	fb02 f501 	mul.w	r5, r2, r1
 80244e8:	fb00 f403 	mul.w	r4, r0, r3
 80244ec:	442c      	add	r4, r5
 80244ee:	fba0 2302 	umull	r2, r3, r0, r2
 80244f2:	18e1      	adds	r1, r4, r3
 80244f4:	460b      	mov	r3, r1
 80244f6:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 80244fa:	e9c1 2300 	strd	r2, r3, [r1]
 80244fe:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8024502:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g1    = f4   * (int64_t) g1;
 8024506:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 802450a:	4618      	mov	r0, r3
 802450c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024510:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8024514:	461a      	mov	r2, r3
 8024516:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802451a:	fb02 f501 	mul.w	r5, r2, r1
 802451e:	fb00 f403 	mul.w	r4, r0, r3
 8024522:	442c      	add	r4, r5
 8024524:	fba0 2302 	umull	r2, r3, r0, r2
 8024528:	18e1      	adds	r1, r4, r3
 802452a:	460b      	mov	r3, r1
 802452c:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 8024530:	e9c1 2300 	strd	r2, r3, [r1]
 8024534:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 8024538:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g2    = f4   * (int64_t) g2;
 802453c:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8024540:	4618      	mov	r0, r3
 8024542:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024546:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 802454a:	461a      	mov	r2, r3
 802454c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024550:	fb02 f501 	mul.w	r5, r2, r1
 8024554:	fb00 f403 	mul.w	r4, r0, r3
 8024558:	442c      	add	r4, r5
 802455a:	fba0 2302 	umull	r2, r3, r0, r2
 802455e:	18e1      	adds	r1, r4, r3
 8024560:	460b      	mov	r3, r1
 8024562:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 8024566:	e9c1 2300 	strd	r2, r3, [r1]
 802456a:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 802456e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g3    = f4   * (int64_t) g3;
 8024572:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8024576:	4618      	mov	r0, r3
 8024578:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802457c:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8024580:	461a      	mov	r2, r3
 8024582:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024586:	fb02 f501 	mul.w	r5, r2, r1
 802458a:	fb00 f403 	mul.w	r4, r0, r3
 802458e:	442c      	add	r4, r5
 8024590:	fba0 2302 	umull	r2, r3, r0, r2
 8024594:	18e1      	adds	r1, r4, r3
 8024596:	460b      	mov	r3, r1
 8024598:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 802459c:	e9c1 2300 	strd	r2, r3, [r1]
 80245a0:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 80245a4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g4    = f4   * (int64_t) g4;
 80245a8:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80245ac:	4618      	mov	r0, r3
 80245ae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80245b2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80245b6:	461a      	mov	r2, r3
 80245b8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80245bc:	fb02 f501 	mul.w	r5, r2, r1
 80245c0:	fb00 f403 	mul.w	r4, r0, r3
 80245c4:	442c      	add	r4, r5
 80245c6:	fba0 2302 	umull	r2, r3, r0, r2
 80245ca:	18e1      	adds	r1, r4, r3
 80245cc:	460b      	mov	r3, r1
 80245ce:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 80245d2:	e9c1 2300 	strd	r2, r3, [r1]
 80245d6:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 80245da:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g5    = f4   * (int64_t) g5;
 80245de:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80245e2:	4618      	mov	r0, r3
 80245e4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80245e8:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80245ec:	461a      	mov	r2, r3
 80245ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80245f2:	fb02 f501 	mul.w	r5, r2, r1
 80245f6:	fb00 f403 	mul.w	r4, r0, r3
 80245fa:	442c      	add	r4, r5
 80245fc:	fba0 2302 	umull	r2, r3, r0, r2
 8024600:	18e1      	adds	r1, r4, r3
 8024602:	460b      	mov	r3, r1
 8024604:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8024608:	e9c1 2300 	strd	r2, r3, [r1]
 802460c:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8024610:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g6_19 = f4   * (int64_t) g6_19;
 8024614:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8024618:	4618      	mov	r0, r3
 802461a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802461e:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 8024622:	461a      	mov	r2, r3
 8024624:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024628:	fb02 f501 	mul.w	r5, r2, r1
 802462c:	fb00 f403 	mul.w	r4, r0, r3
 8024630:	442c      	add	r4, r5
 8024632:	fba0 2302 	umull	r2, r3, r0, r2
 8024636:	18e1      	adds	r1, r4, r3
 8024638:	460b      	mov	r3, r1
 802463a:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 802463e:	e9c1 2300 	strd	r2, r3, [r1]
 8024642:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 8024646:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g7_19 = f4   * (int64_t) g7_19;
 802464a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 802464e:	4618      	mov	r0, r3
 8024650:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024654:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8024658:	461a      	mov	r2, r3
 802465a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802465e:	fb02 f501 	mul.w	r5, r2, r1
 8024662:	fb00 f403 	mul.w	r4, r0, r3
 8024666:	442c      	add	r4, r5
 8024668:	fba0 2302 	umull	r2, r3, r0, r2
 802466c:	18e1      	adds	r1, r4, r3
 802466e:	460b      	mov	r3, r1
 8024670:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8024674:	e9c1 2300 	strd	r2, r3, [r1]
 8024678:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 802467c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g8_19 = f4   * (int64_t) g8_19;
 8024680:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8024684:	4618      	mov	r0, r3
 8024686:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802468a:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 802468e:	461a      	mov	r2, r3
 8024690:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024694:	fb02 f501 	mul.w	r5, r2, r1
 8024698:	fb00 f403 	mul.w	r4, r0, r3
 802469c:	442c      	add	r4, r5
 802469e:	fba0 2302 	umull	r2, r3, r0, r2
 80246a2:	18e1      	adds	r1, r4, r3
 80246a4:	460b      	mov	r3, r1
 80246a6:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 80246aa:	e9c1 2300 	strd	r2, r3, [r1]
 80246ae:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 80246b2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g9_19 = f4   * (int64_t) g9_19;
 80246b6:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80246ba:	4618      	mov	r0, r3
 80246bc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80246c0:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 80246c4:	461a      	mov	r2, r3
 80246c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80246ca:	fb02 f501 	mul.w	r5, r2, r1
 80246ce:	fb00 f403 	mul.w	r4, r0, r3
 80246d2:	442c      	add	r4, r5
 80246d4:	fba0 2302 	umull	r2, r3, r0, r2
 80246d8:	18e1      	adds	r1, r4, r3
 80246da:	460b      	mov	r3, r1
 80246dc:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80246e0:	e9c1 2300 	strd	r2, r3, [r1]
 80246e4:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 80246e8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g0    = f5   * (int64_t) g0;
 80246ec:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 80246f0:	4618      	mov	r0, r3
 80246f2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80246f6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 80246fa:	461a      	mov	r2, r3
 80246fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024700:	fb02 f501 	mul.w	r5, r2, r1
 8024704:	fb00 f403 	mul.w	r4, r0, r3
 8024708:	442c      	add	r4, r5
 802470a:	fba0 2302 	umull	r2, r3, r0, r2
 802470e:	18e1      	adds	r1, r4, r3
 8024710:	460b      	mov	r3, r1
 8024712:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 8024716:	e9c1 2300 	strd	r2, r3, [r1]
 802471a:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 802471e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g1_2  = f5_2 * (int64_t) g1;
 8024722:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 8024726:	4618      	mov	r0, r3
 8024728:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802472c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8024730:	461a      	mov	r2, r3
 8024732:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024736:	fb02 f501 	mul.w	r5, r2, r1
 802473a:	fb00 f403 	mul.w	r4, r0, r3
 802473e:	442c      	add	r4, r5
 8024740:	fba0 2302 	umull	r2, r3, r0, r2
 8024744:	18e1      	adds	r1, r4, r3
 8024746:	460b      	mov	r3, r1
 8024748:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 802474c:	e9c1 2300 	strd	r2, r3, [r1]
 8024750:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8024754:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g2    = f5   * (int64_t) g2;
 8024758:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 802475c:	4618      	mov	r0, r3
 802475e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024762:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8024766:	461a      	mov	r2, r3
 8024768:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802476c:	fb02 f501 	mul.w	r5, r2, r1
 8024770:	fb00 f403 	mul.w	r4, r0, r3
 8024774:	442c      	add	r4, r5
 8024776:	fba0 2302 	umull	r2, r3, r0, r2
 802477a:	18e1      	adds	r1, r4, r3
 802477c:	460b      	mov	r3, r1
 802477e:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 8024782:	e9c1 2300 	strd	r2, r3, [r1]
 8024786:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 802478a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g3_2  = f5_2 * (int64_t) g3;
 802478e:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 8024792:	4618      	mov	r0, r3
 8024794:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024798:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 802479c:	461a      	mov	r2, r3
 802479e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80247a2:	fb02 f501 	mul.w	r5, r2, r1
 80247a6:	fb00 f403 	mul.w	r4, r0, r3
 80247aa:	442c      	add	r4, r5
 80247ac:	fba0 2302 	umull	r2, r3, r0, r2
 80247b0:	18e1      	adds	r1, r4, r3
 80247b2:	460b      	mov	r3, r1
 80247b4:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 80247b8:	e9c1 2300 	strd	r2, r3, [r1]
 80247bc:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 80247c0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g4    = f5   * (int64_t) g4;
 80247c4:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 80247c8:	4618      	mov	r0, r3
 80247ca:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80247ce:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 80247d2:	461a      	mov	r2, r3
 80247d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80247d8:	fb02 f501 	mul.w	r5, r2, r1
 80247dc:	fb00 f403 	mul.w	r4, r0, r3
 80247e0:	442c      	add	r4, r5
 80247e2:	fba0 2302 	umull	r2, r3, r0, r2
 80247e6:	18e1      	adds	r1, r4, r3
 80247e8:	460b      	mov	r3, r1
 80247ea:	f507 61c1 	add.w	r1, r7, #1544	; 0x608
 80247ee:	e9c1 2300 	strd	r2, r3, [r1]
 80247f2:	f507 61c1 	add.w	r1, r7, #1544	; 0x608
 80247f6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g5_38 = f5_2 * (int64_t) g5_19;
 80247fa:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 80247fe:	4618      	mov	r0, r3
 8024800:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024804:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8024808:	461a      	mov	r2, r3
 802480a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802480e:	fb02 f501 	mul.w	r5, r2, r1
 8024812:	fb00 f403 	mul.w	r4, r0, r3
 8024816:	442c      	add	r4, r5
 8024818:	fba0 2302 	umull	r2, r3, r0, r2
 802481c:	18e1      	adds	r1, r4, r3
 802481e:	460b      	mov	r3, r1
 8024820:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8024824:	e9c1 2300 	strd	r2, r3, [r1]
 8024828:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 802482c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g6_19 = f5   * (int64_t) g6_19;
 8024830:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8024834:	4618      	mov	r0, r3
 8024836:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802483a:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 802483e:	461a      	mov	r2, r3
 8024840:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024844:	fb02 f501 	mul.w	r5, r2, r1
 8024848:	fb00 f403 	mul.w	r4, r0, r3
 802484c:	442c      	add	r4, r5
 802484e:	fba0 2302 	umull	r2, r3, r0, r2
 8024852:	18e1      	adds	r1, r4, r3
 8024854:	460b      	mov	r3, r1
 8024856:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 802485a:	e9c1 2300 	strd	r2, r3, [r1]
 802485e:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 8024862:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g7_38 = f5_2 * (int64_t) g7_19;
 8024866:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 802486a:	4618      	mov	r0, r3
 802486c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024870:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8024874:	461a      	mov	r2, r3
 8024876:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802487a:	fb02 f501 	mul.w	r5, r2, r1
 802487e:	fb00 f403 	mul.w	r4, r0, r3
 8024882:	442c      	add	r4, r5
 8024884:	fba0 2302 	umull	r2, r3, r0, r2
 8024888:	18e1      	adds	r1, r4, r3
 802488a:	460b      	mov	r3, r1
 802488c:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 8024890:	e9c1 2300 	strd	r2, r3, [r1]
 8024894:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 8024898:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g8_19 = f5   * (int64_t) g8_19;
 802489c:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 80248a0:	4618      	mov	r0, r3
 80248a2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80248a6:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 80248aa:	461a      	mov	r2, r3
 80248ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80248b0:	fb02 f501 	mul.w	r5, r2, r1
 80248b4:	fb00 f403 	mul.w	r4, r0, r3
 80248b8:	442c      	add	r4, r5
 80248ba:	fba0 2302 	umull	r2, r3, r0, r2
 80248be:	18e1      	adds	r1, r4, r3
 80248c0:	460b      	mov	r3, r1
 80248c2:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 80248c6:	e9c1 2300 	strd	r2, r3, [r1]
 80248ca:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 80248ce:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g9_38 = f5_2 * (int64_t) g9_19;
 80248d2:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 80248d6:	4618      	mov	r0, r3
 80248d8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80248dc:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 80248e0:	461a      	mov	r2, r3
 80248e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80248e6:	fb02 f501 	mul.w	r5, r2, r1
 80248ea:	fb00 f403 	mul.w	r4, r0, r3
 80248ee:	442c      	add	r4, r5
 80248f0:	fba0 2302 	umull	r2, r3, r0, r2
 80248f4:	18e1      	adds	r1, r4, r3
 80248f6:	460b      	mov	r3, r1
 80248f8:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 80248fc:	e9c1 2300 	strd	r2, r3, [r1]
 8024900:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 8024904:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g0    = f6   * (int64_t) g0;
 8024908:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 802490c:	4618      	mov	r0, r3
 802490e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024912:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8024916:	461a      	mov	r2, r3
 8024918:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802491c:	fb02 f501 	mul.w	r5, r2, r1
 8024920:	fb00 f403 	mul.w	r4, r0, r3
 8024924:	442c      	add	r4, r5
 8024926:	fba0 2302 	umull	r2, r3, r0, r2
 802492a:	18e1      	adds	r1, r4, r3
 802492c:	460b      	mov	r3, r1
 802492e:	f507 61bb 	add.w	r1, r7, #1496	; 0x5d8
 8024932:	e9c1 2300 	strd	r2, r3, [r1]
 8024936:	f507 61bb 	add.w	r1, r7, #1496	; 0x5d8
 802493a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g1    = f6   * (int64_t) g1;
 802493e:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8024942:	4618      	mov	r0, r3
 8024944:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024948:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 802494c:	461a      	mov	r2, r3
 802494e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024952:	fb02 f501 	mul.w	r5, r2, r1
 8024956:	fb00 f403 	mul.w	r4, r0, r3
 802495a:	442c      	add	r4, r5
 802495c:	fba0 2302 	umull	r2, r3, r0, r2
 8024960:	18e1      	adds	r1, r4, r3
 8024962:	460b      	mov	r3, r1
 8024964:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 8024968:	e9c1 2300 	strd	r2, r3, [r1]
 802496c:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 8024970:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g2    = f6   * (int64_t) g2;
 8024974:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8024978:	4618      	mov	r0, r3
 802497a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802497e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8024982:	461a      	mov	r2, r3
 8024984:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024988:	fb02 f501 	mul.w	r5, r2, r1
 802498c:	fb00 f403 	mul.w	r4, r0, r3
 8024990:	442c      	add	r4, r5
 8024992:	fba0 2302 	umull	r2, r3, r0, r2
 8024996:	18e1      	adds	r1, r4, r3
 8024998:	460b      	mov	r3, r1
 802499a:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 802499e:	e9c1 2300 	strd	r2, r3, [r1]
 80249a2:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 80249a6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g3    = f6   * (int64_t) g3;
 80249aa:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80249ae:	4618      	mov	r0, r3
 80249b0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80249b4:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80249b8:	461a      	mov	r2, r3
 80249ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80249be:	fb02 f501 	mul.w	r5, r2, r1
 80249c2:	fb00 f403 	mul.w	r4, r0, r3
 80249c6:	442c      	add	r4, r5
 80249c8:	fba0 2302 	umull	r2, r3, r0, r2
 80249cc:	18e1      	adds	r1, r4, r3
 80249ce:	460b      	mov	r3, r1
 80249d0:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 80249d4:	e9c1 2300 	strd	r2, r3, [r1]
 80249d8:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 80249dc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g4_19 = f6   * (int64_t) g4_19;
 80249e0:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80249e4:	4618      	mov	r0, r3
 80249e6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80249ea:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 80249ee:	461a      	mov	r2, r3
 80249f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80249f4:	fb02 f501 	mul.w	r5, r2, r1
 80249f8:	fb00 f403 	mul.w	r4, r0, r3
 80249fc:	442c      	add	r4, r5
 80249fe:	fba0 2302 	umull	r2, r3, r0, r2
 8024a02:	18e1      	adds	r1, r4, r3
 8024a04:	460b      	mov	r3, r1
 8024a06:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8024a0a:	e9c1 2300 	strd	r2, r3, [r1]
 8024a0e:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8024a12:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g5_19 = f6   * (int64_t) g5_19;
 8024a16:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8024a1a:	4618      	mov	r0, r3
 8024a1c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024a20:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8024a24:	461a      	mov	r2, r3
 8024a26:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024a2a:	fb02 f501 	mul.w	r5, r2, r1
 8024a2e:	fb00 f403 	mul.w	r4, r0, r3
 8024a32:	442c      	add	r4, r5
 8024a34:	fba0 2302 	umull	r2, r3, r0, r2
 8024a38:	18e1      	adds	r1, r4, r3
 8024a3a:	460b      	mov	r3, r1
 8024a3c:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8024a40:	e9c1 2300 	strd	r2, r3, [r1]
 8024a44:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8024a48:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g6_19 = f6   * (int64_t) g6_19;
 8024a4c:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8024a50:	4618      	mov	r0, r3
 8024a52:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024a56:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 8024a5a:	461a      	mov	r2, r3
 8024a5c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024a60:	fb02 f501 	mul.w	r5, r2, r1
 8024a64:	fb00 f403 	mul.w	r4, r0, r3
 8024a68:	442c      	add	r4, r5
 8024a6a:	fba0 2302 	umull	r2, r3, r0, r2
 8024a6e:	18e1      	adds	r1, r4, r3
 8024a70:	460b      	mov	r3, r1
 8024a72:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 8024a76:	e9c1 2300 	strd	r2, r3, [r1]
 8024a7a:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 8024a7e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g7_19 = f6   * (int64_t) g7_19;
 8024a82:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8024a86:	4618      	mov	r0, r3
 8024a88:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024a8c:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8024a90:	461a      	mov	r2, r3
 8024a92:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024a96:	fb02 f501 	mul.w	r5, r2, r1
 8024a9a:	fb00 f403 	mul.w	r4, r0, r3
 8024a9e:	442c      	add	r4, r5
 8024aa0:	fba0 2302 	umull	r2, r3, r0, r2
 8024aa4:	18e1      	adds	r1, r4, r3
 8024aa6:	460b      	mov	r3, r1
 8024aa8:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8024aac:	e9c1 2300 	strd	r2, r3, [r1]
 8024ab0:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8024ab4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g8_19 = f6   * (int64_t) g8_19;
 8024ab8:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8024abc:	4618      	mov	r0, r3
 8024abe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024ac2:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8024ac6:	461a      	mov	r2, r3
 8024ac8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024acc:	fb02 f501 	mul.w	r5, r2, r1
 8024ad0:	fb00 f403 	mul.w	r4, r0, r3
 8024ad4:	442c      	add	r4, r5
 8024ad6:	fba0 2302 	umull	r2, r3, r0, r2
 8024ada:	18e1      	adds	r1, r4, r3
 8024adc:	460b      	mov	r3, r1
 8024ade:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8024ae2:	e9c1 2300 	strd	r2, r3, [r1]
 8024ae6:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8024aea:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g9_19 = f6   * (int64_t) g9_19;
 8024aee:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8024af2:	4618      	mov	r0, r3
 8024af4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024af8:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8024afc:	461a      	mov	r2, r3
 8024afe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024b02:	fb02 f501 	mul.w	r5, r2, r1
 8024b06:	fb00 f403 	mul.w	r4, r0, r3
 8024b0a:	442c      	add	r4, r5
 8024b0c:	fba0 2302 	umull	r2, r3, r0, r2
 8024b10:	18e1      	adds	r1, r4, r3
 8024b12:	460b      	mov	r3, r1
 8024b14:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8024b18:	e9c1 2300 	strd	r2, r3, [r1]
 8024b1c:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8024b20:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g0    = f7   * (int64_t) g0;
 8024b24:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8024b28:	4618      	mov	r0, r3
 8024b2a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024b2e:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8024b32:	461a      	mov	r2, r3
 8024b34:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024b38:	fb02 f501 	mul.w	r5, r2, r1
 8024b3c:	fb00 f403 	mul.w	r4, r0, r3
 8024b40:	442c      	add	r4, r5
 8024b42:	fba0 2302 	umull	r2, r3, r0, r2
 8024b46:	18e1      	adds	r1, r4, r3
 8024b48:	460b      	mov	r3, r1
 8024b4a:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8024b4e:	e9c1 2300 	strd	r2, r3, [r1]
 8024b52:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8024b56:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g1_2  = f7_2 * (int64_t) g1;
 8024b5a:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8024b5e:	4618      	mov	r0, r3
 8024b60:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024b64:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8024b68:	461a      	mov	r2, r3
 8024b6a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024b6e:	fb02 f501 	mul.w	r5, r2, r1
 8024b72:	fb00 f403 	mul.w	r4, r0, r3
 8024b76:	442c      	add	r4, r5
 8024b78:	fba0 2302 	umull	r2, r3, r0, r2
 8024b7c:	18e1      	adds	r1, r4, r3
 8024b7e:	460b      	mov	r3, r1
 8024b80:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8024b84:	e9c1 2300 	strd	r2, r3, [r1]
 8024b88:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8024b8c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g2    = f7   * (int64_t) g2;
 8024b90:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8024b94:	4618      	mov	r0, r3
 8024b96:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024b9a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8024b9e:	461a      	mov	r2, r3
 8024ba0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024ba4:	fb02 f501 	mul.w	r5, r2, r1
 8024ba8:	fb00 f403 	mul.w	r4, r0, r3
 8024bac:	442c      	add	r4, r5
 8024bae:	fba0 2302 	umull	r2, r3, r0, r2
 8024bb2:	18e1      	adds	r1, r4, r3
 8024bb4:	460b      	mov	r3, r1
 8024bb6:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8024bba:	e9c1 2300 	strd	r2, r3, [r1]
 8024bbe:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8024bc2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g3_38 = f7_2 * (int64_t) g3_19;
 8024bc6:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8024bca:	4618      	mov	r0, r3
 8024bcc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024bd0:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 8024bd4:	461a      	mov	r2, r3
 8024bd6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024bda:	fb02 f501 	mul.w	r5, r2, r1
 8024bde:	fb00 f403 	mul.w	r4, r0, r3
 8024be2:	442c      	add	r4, r5
 8024be4:	fba0 2302 	umull	r2, r3, r0, r2
 8024be8:	18e1      	adds	r1, r4, r3
 8024bea:	460b      	mov	r3, r1
 8024bec:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 8024bf0:	e9c1 2300 	strd	r2, r3, [r1]
 8024bf4:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 8024bf8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g4_19 = f7   * (int64_t) g4_19;
 8024bfc:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8024c00:	4618      	mov	r0, r3
 8024c02:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024c06:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8024c0a:	461a      	mov	r2, r3
 8024c0c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024c10:	fb02 f501 	mul.w	r5, r2, r1
 8024c14:	fb00 f403 	mul.w	r4, r0, r3
 8024c18:	442c      	add	r4, r5
 8024c1a:	fba0 2302 	umull	r2, r3, r0, r2
 8024c1e:	18e1      	adds	r1, r4, r3
 8024c20:	460b      	mov	r3, r1
 8024c22:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 8024c26:	e9c1 2300 	strd	r2, r3, [r1]
 8024c2a:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 8024c2e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g5_38 = f7_2 * (int64_t) g5_19;
 8024c32:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8024c36:	4618      	mov	r0, r3
 8024c38:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024c3c:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8024c40:	461a      	mov	r2, r3
 8024c42:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024c46:	fb02 f501 	mul.w	r5, r2, r1
 8024c4a:	fb00 f403 	mul.w	r4, r0, r3
 8024c4e:	442c      	add	r4, r5
 8024c50:	fba0 2302 	umull	r2, r3, r0, r2
 8024c54:	18e1      	adds	r1, r4, r3
 8024c56:	460b      	mov	r3, r1
 8024c58:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8024c5c:	e9c1 2300 	strd	r2, r3, [r1]
 8024c60:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8024c64:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g6_19 = f7   * (int64_t) g6_19;
 8024c68:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8024c6c:	4618      	mov	r0, r3
 8024c6e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024c72:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 8024c76:	461a      	mov	r2, r3
 8024c78:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024c7c:	fb02 f501 	mul.w	r5, r2, r1
 8024c80:	fb00 f403 	mul.w	r4, r0, r3
 8024c84:	442c      	add	r4, r5
 8024c86:	fba0 2302 	umull	r2, r3, r0, r2
 8024c8a:	18e1      	adds	r1, r4, r3
 8024c8c:	460b      	mov	r3, r1
 8024c8e:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8024c92:	e9c1 2300 	strd	r2, r3, [r1]
 8024c96:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8024c9a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g7_38 = f7_2 * (int64_t) g7_19;
 8024c9e:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8024ca2:	4618      	mov	r0, r3
 8024ca4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024ca8:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8024cac:	461a      	mov	r2, r3
 8024cae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024cb2:	fb02 f501 	mul.w	r5, r2, r1
 8024cb6:	fb00 f403 	mul.w	r4, r0, r3
 8024cba:	442c      	add	r4, r5
 8024cbc:	fba0 2302 	umull	r2, r3, r0, r2
 8024cc0:	18e1      	adds	r1, r4, r3
 8024cc2:	460b      	mov	r3, r1
 8024cc4:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8024cc8:	e9c1 2300 	strd	r2, r3, [r1]
 8024ccc:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8024cd0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g8_19 = f7   * (int64_t) g8_19;
 8024cd4:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8024cd8:	4618      	mov	r0, r3
 8024cda:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024cde:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8024ce2:	461a      	mov	r2, r3
 8024ce4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024ce8:	fb02 f501 	mul.w	r5, r2, r1
 8024cec:	fb00 f403 	mul.w	r4, r0, r3
 8024cf0:	442c      	add	r4, r5
 8024cf2:	fba0 2302 	umull	r2, r3, r0, r2
 8024cf6:	18e1      	adds	r1, r4, r3
 8024cf8:	460b      	mov	r3, r1
 8024cfa:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 8024cfe:	e9c1 2300 	strd	r2, r3, [r1]
 8024d02:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 8024d06:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g9_38 = f7_2 * (int64_t) g9_19;
 8024d0a:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8024d0e:	4618      	mov	r0, r3
 8024d10:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024d14:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8024d18:	461a      	mov	r2, r3
 8024d1a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024d1e:	fb02 f501 	mul.w	r5, r2, r1
 8024d22:	fb00 f403 	mul.w	r4, r0, r3
 8024d26:	442c      	add	r4, r5
 8024d28:	fba0 2302 	umull	r2, r3, r0, r2
 8024d2c:	18e1      	adds	r1, r4, r3
 8024d2e:	460b      	mov	r3, r1
 8024d30:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 8024d34:	e9c1 2300 	strd	r2, r3, [r1]
 8024d38:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 8024d3c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g0    = f8   * (int64_t) g0;
 8024d40:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8024d44:	4618      	mov	r0, r3
 8024d46:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024d4a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8024d4e:	461a      	mov	r2, r3
 8024d50:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024d54:	fb02 f501 	mul.w	r5, r2, r1
 8024d58:	fb00 f403 	mul.w	r4, r0, r3
 8024d5c:	442c      	add	r4, r5
 8024d5e:	fba0 2302 	umull	r2, r3, r0, r2
 8024d62:	18e1      	adds	r1, r4, r3
 8024d64:	460b      	mov	r3, r1
 8024d66:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8024d6a:	e9c1 2300 	strd	r2, r3, [r1]
 8024d6e:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8024d72:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g1    = f8   * (int64_t) g1;
 8024d76:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8024d7a:	4618      	mov	r0, r3
 8024d7c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024d80:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8024d84:	461a      	mov	r2, r3
 8024d86:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024d8a:	fb02 f501 	mul.w	r5, r2, r1
 8024d8e:	fb00 f403 	mul.w	r4, r0, r3
 8024d92:	442c      	add	r4, r5
 8024d94:	fba0 2302 	umull	r2, r3, r0, r2
 8024d98:	18e1      	adds	r1, r4, r3
 8024d9a:	460b      	mov	r3, r1
 8024d9c:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 8024da0:	e9c1 2300 	strd	r2, r3, [r1]
 8024da4:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 8024da8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g2_19 = f8   * (int64_t) g2_19;
 8024dac:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8024db0:	4618      	mov	r0, r3
 8024db2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024db6:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 8024dba:	461a      	mov	r2, r3
 8024dbc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024dc0:	fb02 f501 	mul.w	r5, r2, r1
 8024dc4:	fb00 f403 	mul.w	r4, r0, r3
 8024dc8:	442c      	add	r4, r5
 8024dca:	fba0 2302 	umull	r2, r3, r0, r2
 8024dce:	18e1      	adds	r1, r4, r3
 8024dd0:	460b      	mov	r3, r1
 8024dd2:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 8024dd6:	e9c1 2300 	strd	r2, r3, [r1]
 8024dda:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 8024dde:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g3_19 = f8   * (int64_t) g3_19;
 8024de2:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8024de6:	4618      	mov	r0, r3
 8024de8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024dec:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 8024df0:	461a      	mov	r2, r3
 8024df2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024df6:	fb02 f501 	mul.w	r5, r2, r1
 8024dfa:	fb00 f403 	mul.w	r4, r0, r3
 8024dfe:	442c      	add	r4, r5
 8024e00:	fba0 2302 	umull	r2, r3, r0, r2
 8024e04:	18e1      	adds	r1, r4, r3
 8024e06:	460b      	mov	r3, r1
 8024e08:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 8024e0c:	e9c1 2300 	strd	r2, r3, [r1]
 8024e10:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 8024e14:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g4_19 = f8   * (int64_t) g4_19;
 8024e18:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8024e1c:	4618      	mov	r0, r3
 8024e1e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024e22:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8024e26:	461a      	mov	r2, r3
 8024e28:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024e2c:	fb02 f501 	mul.w	r5, r2, r1
 8024e30:	fb00 f403 	mul.w	r4, r0, r3
 8024e34:	442c      	add	r4, r5
 8024e36:	fba0 2302 	umull	r2, r3, r0, r2
 8024e3a:	18e1      	adds	r1, r4, r3
 8024e3c:	460b      	mov	r3, r1
 8024e3e:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8024e42:	e9c1 2300 	strd	r2, r3, [r1]
 8024e46:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8024e4a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g5_19 = f8   * (int64_t) g5_19;
 8024e4e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8024e52:	4618      	mov	r0, r3
 8024e54:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024e58:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8024e5c:	461a      	mov	r2, r3
 8024e5e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024e62:	fb02 f501 	mul.w	r5, r2, r1
 8024e66:	fb00 f403 	mul.w	r4, r0, r3
 8024e6a:	442c      	add	r4, r5
 8024e6c:	fba0 2302 	umull	r2, r3, r0, r2
 8024e70:	18e1      	adds	r1, r4, r3
 8024e72:	460b      	mov	r3, r1
 8024e74:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8024e78:	e9c1 2300 	strd	r2, r3, [r1]
 8024e7c:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8024e80:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g6_19 = f8   * (int64_t) g6_19;
 8024e84:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8024e88:	4618      	mov	r0, r3
 8024e8a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024e8e:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 8024e92:	461a      	mov	r2, r3
 8024e94:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024e98:	fb02 f501 	mul.w	r5, r2, r1
 8024e9c:	fb00 f403 	mul.w	r4, r0, r3
 8024ea0:	442c      	add	r4, r5
 8024ea2:	fba0 2302 	umull	r2, r3, r0, r2
 8024ea6:	18e1      	adds	r1, r4, r3
 8024ea8:	460b      	mov	r3, r1
 8024eaa:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8024eae:	e9c1 2300 	strd	r2, r3, [r1]
 8024eb2:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8024eb6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g7_19 = f8   * (int64_t) g7_19;
 8024eba:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8024ebe:	4618      	mov	r0, r3
 8024ec0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024ec4:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8024ec8:	461a      	mov	r2, r3
 8024eca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024ece:	fb02 f501 	mul.w	r5, r2, r1
 8024ed2:	fb00 f403 	mul.w	r4, r0, r3
 8024ed6:	442c      	add	r4, r5
 8024ed8:	fba0 2302 	umull	r2, r3, r0, r2
 8024edc:	18e1      	adds	r1, r4, r3
 8024ede:	460b      	mov	r3, r1
 8024ee0:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8024ee4:	e9c1 2300 	strd	r2, r3, [r1]
 8024ee8:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8024eec:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g8_19 = f8   * (int64_t) g8_19;
 8024ef0:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8024ef4:	4618      	mov	r0, r3
 8024ef6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024efa:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8024efe:	461a      	mov	r2, r3
 8024f00:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024f04:	fb02 f501 	mul.w	r5, r2, r1
 8024f08:	fb00 f403 	mul.w	r4, r0, r3
 8024f0c:	442c      	add	r4, r5
 8024f0e:	fba0 2302 	umull	r2, r3, r0, r2
 8024f12:	18e1      	adds	r1, r4, r3
 8024f14:	460b      	mov	r3, r1
 8024f16:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 8024f1a:	e9c1 2300 	strd	r2, r3, [r1]
 8024f1e:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 8024f22:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g9_19 = f8   * (int64_t) g9_19;
 8024f26:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8024f2a:	4618      	mov	r0, r3
 8024f2c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024f30:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8024f34:	461a      	mov	r2, r3
 8024f36:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024f3a:	fb02 f501 	mul.w	r5, r2, r1
 8024f3e:	fb00 f403 	mul.w	r4, r0, r3
 8024f42:	442c      	add	r4, r5
 8024f44:	fba0 2302 	umull	r2, r3, r0, r2
 8024f48:	18e1      	adds	r1, r4, r3
 8024f4a:	460b      	mov	r3, r1
 8024f4c:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8024f50:	e9c1 2300 	strd	r2, r3, [r1]
 8024f54:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8024f58:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g0    = f9   * (int64_t) g0;
 8024f5c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8024f60:	4618      	mov	r0, r3
 8024f62:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024f66:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8024f6a:	461a      	mov	r2, r3
 8024f6c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024f70:	fb02 f501 	mul.w	r5, r2, r1
 8024f74:	fb00 f403 	mul.w	r4, r0, r3
 8024f78:	442c      	add	r4, r5
 8024f7a:	fba0 2302 	umull	r2, r3, r0, r2
 8024f7e:	18e1      	adds	r1, r4, r3
 8024f80:	460b      	mov	r3, r1
 8024f82:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 8024f86:	e9c1 2300 	strd	r2, r3, [r1]
 8024f8a:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 8024f8e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g1_38 = f9_2 * (int64_t) g1_19;
 8024f92:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8024f96:	4618      	mov	r0, r3
 8024f98:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024f9c:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	; 0x7f4
 8024fa0:	461a      	mov	r2, r3
 8024fa2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024fa6:	fb02 f501 	mul.w	r5, r2, r1
 8024faa:	fb00 f403 	mul.w	r4, r0, r3
 8024fae:	442c      	add	r4, r5
 8024fb0:	fba0 2302 	umull	r2, r3, r0, r2
 8024fb4:	18e1      	adds	r1, r4, r3
 8024fb6:	460b      	mov	r3, r1
 8024fb8:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 8024fbc:	e9c1 2300 	strd	r2, r3, [r1]
 8024fc0:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 8024fc4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g2_19 = f9   * (int64_t) g2_19;
 8024fc8:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8024fcc:	4618      	mov	r0, r3
 8024fce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024fd2:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 8024fd6:	461a      	mov	r2, r3
 8024fd8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024fdc:	fb02 f501 	mul.w	r5, r2, r1
 8024fe0:	fb00 f403 	mul.w	r4, r0, r3
 8024fe4:	442c      	add	r4, r5
 8024fe6:	fba0 2302 	umull	r2, r3, r0, r2
 8024fea:	18e1      	adds	r1, r4, r3
 8024fec:	460b      	mov	r3, r1
 8024fee:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8024ff2:	e9c1 2300 	strd	r2, r3, [r1]
 8024ff6:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8024ffa:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g3_38 = f9_2 * (int64_t) g3_19;
 8024ffe:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8025002:	4618      	mov	r0, r3
 8025004:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8025008:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 802500c:	461a      	mov	r2, r3
 802500e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8025012:	fb02 f501 	mul.w	r5, r2, r1
 8025016:	fb00 f403 	mul.w	r4, r0, r3
 802501a:	442c      	add	r4, r5
 802501c:	fba0 2302 	umull	r2, r3, r0, r2
 8025020:	18e1      	adds	r1, r4, r3
 8025022:	460b      	mov	r3, r1
 8025024:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8025028:	e9c1 2300 	strd	r2, r3, [r1]
 802502c:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8025030:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g4_19 = f9   * (int64_t) g4_19;
 8025034:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8025038:	4618      	mov	r0, r3
 802503a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802503e:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8025042:	461a      	mov	r2, r3
 8025044:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8025048:	fb02 f501 	mul.w	r5, r2, r1
 802504c:	fb00 f403 	mul.w	r4, r0, r3
 8025050:	442c      	add	r4, r5
 8025052:	fba0 2302 	umull	r2, r3, r0, r2
 8025056:	18e1      	adds	r1, r4, r3
 8025058:	460b      	mov	r3, r1
 802505a:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 802505e:	e9c1 2300 	strd	r2, r3, [r1]
 8025062:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8025066:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g5_38 = f9_2 * (int64_t) g5_19;
 802506a:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 802506e:	4618      	mov	r0, r3
 8025070:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8025074:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8025078:	461a      	mov	r2, r3
 802507a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802507e:	fb02 f501 	mul.w	r5, r2, r1
 8025082:	fb00 f403 	mul.w	r4, r0, r3
 8025086:	442c      	add	r4, r5
 8025088:	fba0 2302 	umull	r2, r3, r0, r2
 802508c:	18e1      	adds	r1, r4, r3
 802508e:	460b      	mov	r3, r1
 8025090:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8025094:	e9c1 2300 	strd	r2, r3, [r1]
 8025098:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 802509c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g6_19 = f9   * (int64_t) g6_19;
 80250a0:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80250a4:	4618      	mov	r0, r3
 80250a6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80250aa:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 80250ae:	461a      	mov	r2, r3
 80250b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80250b4:	fb02 f501 	mul.w	r5, r2, r1
 80250b8:	fb00 f403 	mul.w	r4, r0, r3
 80250bc:	442c      	add	r4, r5
 80250be:	fba0 2302 	umull	r2, r3, r0, r2
 80250c2:	18e1      	adds	r1, r4, r3
 80250c4:	460b      	mov	r3, r1
 80250c6:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 80250ca:	e9c1 2300 	strd	r2, r3, [r1]
 80250ce:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 80250d2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g7_38 = f9_2 * (int64_t) g7_19;
 80250d6:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 80250da:	4618      	mov	r0, r3
 80250dc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80250e0:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 80250e4:	461a      	mov	r2, r3
 80250e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80250ea:	fb02 f501 	mul.w	r5, r2, r1
 80250ee:	fb00 f403 	mul.w	r4, r0, r3
 80250f2:	442c      	add	r4, r5
 80250f4:	fba0 2302 	umull	r2, r3, r0, r2
 80250f8:	18e1      	adds	r1, r4, r3
 80250fa:	460b      	mov	r3, r1
 80250fc:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8025100:	e9c1 2300 	strd	r2, r3, [r1]
 8025104:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8025108:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g8_19 = f9   * (int64_t) g8_19;
 802510c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8025110:	4618      	mov	r0, r3
 8025112:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8025116:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 802511a:	461a      	mov	r2, r3
 802511c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8025120:	fb02 f501 	mul.w	r5, r2, r1
 8025124:	fb00 f403 	mul.w	r4, r0, r3
 8025128:	442c      	add	r4, r5
 802512a:	fba0 2302 	umull	r2, r3, r0, r2
 802512e:	18e1      	adds	r1, r4, r3
 8025130:	460b      	mov	r3, r1
 8025132:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8025136:	e9c1 2300 	strd	r2, r3, [r1]
 802513a:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 802513e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g9_38 = f9_2 * (int64_t) g9_19;
 8025142:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8025146:	4618      	mov	r0, r3
 8025148:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802514c:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8025150:	461a      	mov	r2, r3
 8025152:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8025156:	fb02 f501 	mul.w	r5, r2, r1
 802515a:	fb00 f403 	mul.w	r4, r0, r3
 802515e:	442c      	add	r4, r5
 8025160:	fba0 2302 	umull	r2, r3, r0, r2
 8025164:	18e1      	adds	r1, r4, r3
 8025166:	460b      	mov	r3, r1
 8025168:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 802516c:	e9c1 2300 	strd	r2, r3, [r1]
 8025170:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8025174:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t h0 = f0g0 + f1g9_38 + f2g8_19 + f3g7_38 + f4g6_19 + f5g5_38 + f6g4_19 + f7g3_38 + f8g2_19 + f9g1_38;
 8025178:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 802517c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025180:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8025184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025188:	1884      	adds	r4, r0, r2
 802518a:	f8c7 43e8 	str.w	r4, [r7, #1000]	; 0x3e8
 802518e:	eb41 0303 	adc.w	r3, r1, r3
 8025192:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8025196:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 802519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802519e:	e9d7 45fa 	ldrd	r4, r5, [r7, #1000]	; 0x3e8
 80251a2:	4621      	mov	r1, r4
 80251a4:	1889      	adds	r1, r1, r2
 80251a6:	f8c7 13e0 	str.w	r1, [r7, #992]	; 0x3e0
 80251aa:	4629      	mov	r1, r5
 80251ac:	eb43 0101 	adc.w	r1, r3, r1
 80251b0:	f8c7 13e4 	str.w	r1, [r7, #996]	; 0x3e4
 80251b4:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80251b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80251bc:	e9d7 45f8 	ldrd	r4, r5, [r7, #992]	; 0x3e0
 80251c0:	4621      	mov	r1, r4
 80251c2:	1889      	adds	r1, r1, r2
 80251c4:	f8c7 13d8 	str.w	r1, [r7, #984]	; 0x3d8
 80251c8:	4629      	mov	r1, r5
 80251ca:	eb43 0101 	adc.w	r1, r3, r1
 80251ce:	f8c7 13dc 	str.w	r1, [r7, #988]	; 0x3dc
 80251d2:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 80251d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80251da:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	; 0x3d8
 80251de:	4621      	mov	r1, r4
 80251e0:	1889      	adds	r1, r1, r2
 80251e2:	f8c7 13d0 	str.w	r1, [r7, #976]	; 0x3d0
 80251e6:	4629      	mov	r1, r5
 80251e8:	eb43 0101 	adc.w	r1, r3, r1
 80251ec:	f8c7 13d4 	str.w	r1, [r7, #980]	; 0x3d4
 80251f0:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80251f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80251f8:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	; 0x3d0
 80251fc:	4621      	mov	r1, r4
 80251fe:	1889      	adds	r1, r1, r2
 8025200:	f8c7 13c8 	str.w	r1, [r7, #968]	; 0x3c8
 8025204:	4629      	mov	r1, r5
 8025206:	eb43 0101 	adc.w	r1, r3, r1
 802520a:	f8c7 13cc 	str.w	r1, [r7, #972]	; 0x3cc
 802520e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8025212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025216:	e9d7 45f2 	ldrd	r4, r5, [r7, #968]	; 0x3c8
 802521a:	4621      	mov	r1, r4
 802521c:	1889      	adds	r1, r1, r2
 802521e:	f8c7 13c0 	str.w	r1, [r7, #960]	; 0x3c0
 8025222:	4629      	mov	r1, r5
 8025224:	eb43 0101 	adc.w	r1, r3, r1
 8025228:	f8c7 13c4 	str.w	r1, [r7, #964]	; 0x3c4
 802522c:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8025230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025234:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	; 0x3c0
 8025238:	4621      	mov	r1, r4
 802523a:	1889      	adds	r1, r1, r2
 802523c:	f8c7 13b8 	str.w	r1, [r7, #952]	; 0x3b8
 8025240:	4629      	mov	r1, r5
 8025242:	eb43 0101 	adc.w	r1, r3, r1
 8025246:	f8c7 13bc 	str.w	r1, [r7, #956]	; 0x3bc
 802524a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 802524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025252:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	; 0x3b8
 8025256:	4621      	mov	r1, r4
 8025258:	1889      	adds	r1, r1, r2
 802525a:	f8c7 13b0 	str.w	r1, [r7, #944]	; 0x3b0
 802525e:	4629      	mov	r1, r5
 8025260:	eb43 0101 	adc.w	r1, r3, r1
 8025264:	f8c7 13b4 	str.w	r1, [r7, #948]	; 0x3b4
 8025268:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 802526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025270:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	; 0x3b0
 8025274:	4621      	mov	r1, r4
 8025276:	1851      	adds	r1, r2, r1
 8025278:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 802527c:	4629      	mov	r1, r5
 802527e:	eb43 0101 	adc.w	r1, r3, r1
 8025282:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8025286:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 802528a:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 802528e:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h1 = f0g1 + f1g0   + f2g9_19 + f3g8_19 + f4g7_19 + f5g6_19 + f6g5_19 + f7g4_19 + f8g3_19 + f9g2_19;
 8025292:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8025296:	e9d3 0100 	ldrd	r0, r1, [r3]
 802529a:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252a2:	1884      	adds	r4, r0, r2
 80252a4:	f8c7 43a8 	str.w	r4, [r7, #936]	; 0x3a8
 80252a8:	eb41 0303 	adc.w	r3, r1, r3
 80252ac:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 80252b0:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80252b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252b8:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 80252bc:	4621      	mov	r1, r4
 80252be:	1889      	adds	r1, r1, r2
 80252c0:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 80252c4:	4629      	mov	r1, r5
 80252c6:	eb43 0101 	adc.w	r1, r3, r1
 80252ca:	f8c7 13a4 	str.w	r1, [r7, #932]	; 0x3a4
 80252ce:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 80252d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252d6:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 80252da:	4621      	mov	r1, r4
 80252dc:	1889      	adds	r1, r1, r2
 80252de:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 80252e2:	4629      	mov	r1, r5
 80252e4:	eb43 0101 	adc.w	r1, r3, r1
 80252e8:	f8c7 139c 	str.w	r1, [r7, #924]	; 0x39c
 80252ec:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80252f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252f4:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 80252f8:	4621      	mov	r1, r4
 80252fa:	1889      	adds	r1, r1, r2
 80252fc:	f8c7 1390 	str.w	r1, [r7, #912]	; 0x390
 8025300:	4629      	mov	r1, r5
 8025302:	eb43 0101 	adc.w	r1, r3, r1
 8025306:	f8c7 1394 	str.w	r1, [r7, #916]	; 0x394
 802530a:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 802530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025312:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	; 0x390
 8025316:	4621      	mov	r1, r4
 8025318:	1889      	adds	r1, r1, r2
 802531a:	f8c7 1388 	str.w	r1, [r7, #904]	; 0x388
 802531e:	4629      	mov	r1, r5
 8025320:	eb43 0101 	adc.w	r1, r3, r1
 8025324:	f8c7 138c 	str.w	r1, [r7, #908]	; 0x38c
 8025328:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 802532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025330:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 8025334:	4621      	mov	r1, r4
 8025336:	1889      	adds	r1, r1, r2
 8025338:	f8c7 1380 	str.w	r1, [r7, #896]	; 0x380
 802533c:	4629      	mov	r1, r5
 802533e:	eb43 0101 	adc.w	r1, r3, r1
 8025342:	f8c7 1384 	str.w	r1, [r7, #900]	; 0x384
 8025346:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 802534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802534e:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	; 0x380
 8025352:	4621      	mov	r1, r4
 8025354:	1889      	adds	r1, r1, r2
 8025356:	f8c7 1378 	str.w	r1, [r7, #888]	; 0x378
 802535a:	4629      	mov	r1, r5
 802535c:	eb43 0101 	adc.w	r1, r3, r1
 8025360:	f8c7 137c 	str.w	r1, [r7, #892]	; 0x37c
 8025364:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8025368:	e9d3 2300 	ldrd	r2, r3, [r3]
 802536c:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 8025370:	4621      	mov	r1, r4
 8025372:	1889      	adds	r1, r1, r2
 8025374:	f8c7 1370 	str.w	r1, [r7, #880]	; 0x370
 8025378:	4629      	mov	r1, r5
 802537a:	eb43 0101 	adc.w	r1, r3, r1
 802537e:	f8c7 1374 	str.w	r1, [r7, #884]	; 0x374
 8025382:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8025386:	e9d3 2300 	ldrd	r2, r3, [r3]
 802538a:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	; 0x370
 802538e:	4621      	mov	r1, r4
 8025390:	1851      	adds	r1, r2, r1
 8025392:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8025396:	4629      	mov	r1, r5
 8025398:	eb43 0101 	adc.w	r1, r3, r1
 802539c:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 80253a0:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80253a4:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 80253a8:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h2 = f0g2 + f1g1_2 + f2g0   + f3g9_38 + f4g8_19 + f5g7_38 + f6g6_19 + f7g5_38 + f8g4_19 + f9g3_38;
 80253ac:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 80253b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80253b4:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 80253b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253bc:	1884      	adds	r4, r0, r2
 80253be:	f8c7 4368 	str.w	r4, [r7, #872]	; 0x368
 80253c2:	eb41 0303 	adc.w	r3, r1, r3
 80253c6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80253ca:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 80253ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253d2:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 80253d6:	4621      	mov	r1, r4
 80253d8:	1889      	adds	r1, r1, r2
 80253da:	f8c7 1360 	str.w	r1, [r7, #864]	; 0x360
 80253de:	4629      	mov	r1, r5
 80253e0:	eb43 0101 	adc.w	r1, r3, r1
 80253e4:	f8c7 1364 	str.w	r1, [r7, #868]	; 0x364
 80253e8:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 80253ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253f0:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	; 0x360
 80253f4:	4621      	mov	r1, r4
 80253f6:	1889      	adds	r1, r1, r2
 80253f8:	f8c7 1358 	str.w	r1, [r7, #856]	; 0x358
 80253fc:	4629      	mov	r1, r5
 80253fe:	eb43 0101 	adc.w	r1, r3, r1
 8025402:	f8c7 135c 	str.w	r1, [r7, #860]	; 0x35c
 8025406:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 802540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802540e:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	; 0x358
 8025412:	4621      	mov	r1, r4
 8025414:	1889      	adds	r1, r1, r2
 8025416:	f8c7 1350 	str.w	r1, [r7, #848]	; 0x350
 802541a:	4629      	mov	r1, r5
 802541c:	eb43 0101 	adc.w	r1, r3, r1
 8025420:	f8c7 1354 	str.w	r1, [r7, #852]	; 0x354
 8025424:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8025428:	e9d3 2300 	ldrd	r2, r3, [r3]
 802542c:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	; 0x350
 8025430:	4621      	mov	r1, r4
 8025432:	1889      	adds	r1, r1, r2
 8025434:	f8c7 1348 	str.w	r1, [r7, #840]	; 0x348
 8025438:	4629      	mov	r1, r5
 802543a:	eb43 0101 	adc.w	r1, r3, r1
 802543e:	f8c7 134c 	str.w	r1, [r7, #844]	; 0x34c
 8025442:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8025446:	e9d3 2300 	ldrd	r2, r3, [r3]
 802544a:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	; 0x348
 802544e:	4621      	mov	r1, r4
 8025450:	1889      	adds	r1, r1, r2
 8025452:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 8025456:	4629      	mov	r1, r5
 8025458:	eb43 0101 	adc.w	r1, r3, r1
 802545c:	f8c7 1344 	str.w	r1, [r7, #836]	; 0x344
 8025460:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8025464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025468:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	; 0x340
 802546c:	4621      	mov	r1, r4
 802546e:	1889      	adds	r1, r1, r2
 8025470:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 8025474:	4629      	mov	r1, r5
 8025476:	eb43 0101 	adc.w	r1, r3, r1
 802547a:	f8c7 133c 	str.w	r1, [r7, #828]	; 0x33c
 802547e:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8025482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025486:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	; 0x338
 802548a:	4621      	mov	r1, r4
 802548c:	1889      	adds	r1, r1, r2
 802548e:	f8c7 1330 	str.w	r1, [r7, #816]	; 0x330
 8025492:	4629      	mov	r1, r5
 8025494:	eb43 0101 	adc.w	r1, r3, r1
 8025498:	f8c7 1334 	str.w	r1, [r7, #820]	; 0x334
 802549c:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80254a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254a4:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	; 0x330
 80254a8:	4621      	mov	r1, r4
 80254aa:	1851      	adds	r1, r2, r1
 80254ac:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80254b0:	4629      	mov	r1, r5
 80254b2:	eb43 0101 	adc.w	r1, r3, r1
 80254b6:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 80254ba:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80254be:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 80254c2:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h3 = f0g3 + f1g2   + f2g1   + f3g0   + f4g9_19 + f5g8_19 + f6g7_19 + f7g6_19 + f8g5_19 + f9g4_19;
 80254c6:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 80254ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80254ce:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 80254d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254d6:	1884      	adds	r4, r0, r2
 80254d8:	f8c7 4328 	str.w	r4, [r7, #808]	; 0x328
 80254dc:	eb41 0303 	adc.w	r3, r1, r3
 80254e0:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 80254e4:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80254e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254ec:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	; 0x328
 80254f0:	4621      	mov	r1, r4
 80254f2:	1889      	adds	r1, r1, r2
 80254f4:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 80254f8:	4629      	mov	r1, r5
 80254fa:	eb43 0101 	adc.w	r1, r3, r1
 80254fe:	f8c7 1324 	str.w	r1, [r7, #804]	; 0x324
 8025502:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 8025506:	e9d3 2300 	ldrd	r2, r3, [r3]
 802550a:	e9d7 45c8 	ldrd	r4, r5, [r7, #800]	; 0x320
 802550e:	4621      	mov	r1, r4
 8025510:	1889      	adds	r1, r1, r2
 8025512:	f8c7 1318 	str.w	r1, [r7, #792]	; 0x318
 8025516:	4629      	mov	r1, r5
 8025518:	eb43 0101 	adc.w	r1, r3, r1
 802551c:	f8c7 131c 	str.w	r1, [r7, #796]	; 0x31c
 8025520:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8025524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025528:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	; 0x318
 802552c:	4621      	mov	r1, r4
 802552e:	1889      	adds	r1, r1, r2
 8025530:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 8025534:	4629      	mov	r1, r5
 8025536:	eb43 0101 	adc.w	r1, r3, r1
 802553a:	f8c7 1314 	str.w	r1, [r7, #788]	; 0x314
 802553e:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8025542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025546:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	; 0x310
 802554a:	4621      	mov	r1, r4
 802554c:	1889      	adds	r1, r1, r2
 802554e:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 8025552:	4629      	mov	r1, r5
 8025554:	eb43 0101 	adc.w	r1, r3, r1
 8025558:	f8c7 130c 	str.w	r1, [r7, #780]	; 0x30c
 802555c:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8025560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025564:	e9d7 45c2 	ldrd	r4, r5, [r7, #776]	; 0x308
 8025568:	4621      	mov	r1, r4
 802556a:	1889      	adds	r1, r1, r2
 802556c:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
 8025570:	4629      	mov	r1, r5
 8025572:	eb43 0101 	adc.w	r1, r3, r1
 8025576:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
 802557a:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 802557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025582:	e9d7 45c0 	ldrd	r4, r5, [r7, #768]	; 0x300
 8025586:	4621      	mov	r1, r4
 8025588:	1889      	adds	r1, r1, r2
 802558a:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 802558e:	4629      	mov	r1, r5
 8025590:	eb43 0101 	adc.w	r1, r3, r1
 8025594:	f8c7 12fc 	str.w	r1, [r7, #764]	; 0x2fc
 8025598:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 802559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80255a0:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 80255a4:	4621      	mov	r1, r4
 80255a6:	1889      	adds	r1, r1, r2
 80255a8:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 80255ac:	4629      	mov	r1, r5
 80255ae:	eb43 0101 	adc.w	r1, r3, r1
 80255b2:	f8c7 12f4 	str.w	r1, [r7, #756]	; 0x2f4
 80255b6:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 80255ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80255be:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	; 0x2f0
 80255c2:	4621      	mov	r1, r4
 80255c4:	1851      	adds	r1, r2, r1
 80255c6:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80255ca:	4629      	mov	r1, r5
 80255cc:	eb43 0101 	adc.w	r1, r3, r1
 80255d0:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 80255d4:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80255d8:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 80255dc:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h4 = f0g4 + f1g3_2 + f2g2   + f3g1_2 + f4g0   + f5g9_38 + f6g8_19 + f7g7_38 + f8g6_19 + f9g5_38;
 80255e0:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 80255e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80255e8:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80255ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80255f0:	1884      	adds	r4, r0, r2
 80255f2:	f8c7 42e8 	str.w	r4, [r7, #744]	; 0x2e8
 80255f6:	eb41 0303 	adc.w	r3, r1, r3
 80255fa:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80255fe:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 8025602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025606:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	; 0x2e8
 802560a:	4621      	mov	r1, r4
 802560c:	1889      	adds	r1, r1, r2
 802560e:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 8025612:	4629      	mov	r1, r5
 8025614:	eb43 0101 	adc.w	r1, r3, r1
 8025618:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
 802561c:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8025620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025624:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 8025628:	4621      	mov	r1, r4
 802562a:	1889      	adds	r1, r1, r2
 802562c:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 8025630:	4629      	mov	r1, r5
 8025632:	eb43 0101 	adc.w	r1, r3, r1
 8025636:	f8c7 12dc 	str.w	r1, [r7, #732]	; 0x2dc
 802563a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 802563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025642:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	; 0x2d8
 8025646:	4621      	mov	r1, r4
 8025648:	1889      	adds	r1, r1, r2
 802564a:	f8c7 12d0 	str.w	r1, [r7, #720]	; 0x2d0
 802564e:	4629      	mov	r1, r5
 8025650:	eb43 0101 	adc.w	r1, r3, r1
 8025654:	f8c7 12d4 	str.w	r1, [r7, #724]	; 0x2d4
 8025658:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 802565c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025660:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 8025664:	4621      	mov	r1, r4
 8025666:	1889      	adds	r1, r1, r2
 8025668:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 802566c:	4629      	mov	r1, r5
 802566e:	eb43 0101 	adc.w	r1, r3, r1
 8025672:	f8c7 12cc 	str.w	r1, [r7, #716]	; 0x2cc
 8025676:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 802567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802567e:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	; 0x2c8
 8025682:	4621      	mov	r1, r4
 8025684:	1889      	adds	r1, r1, r2
 8025686:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 802568a:	4629      	mov	r1, r5
 802568c:	eb43 0101 	adc.w	r1, r3, r1
 8025690:	f8c7 12c4 	str.w	r1, [r7, #708]	; 0x2c4
 8025694:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8025698:	e9d3 2300 	ldrd	r2, r3, [r3]
 802569c:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 80256a0:	4621      	mov	r1, r4
 80256a2:	1889      	adds	r1, r1, r2
 80256a4:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 80256a8:	4629      	mov	r1, r5
 80256aa:	eb43 0101 	adc.w	r1, r3, r1
 80256ae:	f8c7 12bc 	str.w	r1, [r7, #700]	; 0x2bc
 80256b2:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 80256b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80256ba:	e9d7 45ae 	ldrd	r4, r5, [r7, #696]	; 0x2b8
 80256be:	4621      	mov	r1, r4
 80256c0:	1889      	adds	r1, r1, r2
 80256c2:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 80256c6:	4629      	mov	r1, r5
 80256c8:	eb43 0101 	adc.w	r1, r3, r1
 80256cc:	f8c7 12b4 	str.w	r1, [r7, #692]	; 0x2b4
 80256d0:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80256d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80256d8:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 80256dc:	4621      	mov	r1, r4
 80256de:	1851      	adds	r1, r2, r1
 80256e0:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80256e4:	4629      	mov	r1, r5
 80256e6:	eb43 0101 	adc.w	r1, r3, r1
 80256ea:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 80256ee:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80256f2:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 80256f6:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h5 = f0g5 + f1g4   + f2g3   + f3g2   + f4g1   + f5g0   + f6g9_19 + f7g8_19 + f8g7_19 + f9g6_19;
 80256fa:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 80256fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025702:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 8025706:	e9d3 2300 	ldrd	r2, r3, [r3]
 802570a:	1884      	adds	r4, r0, r2
 802570c:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 8025710:	eb41 0303 	adc.w	r3, r1, r3
 8025714:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8025718:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025720:	e9d7 45aa 	ldrd	r4, r5, [r7, #680]	; 0x2a8
 8025724:	4621      	mov	r1, r4
 8025726:	1889      	adds	r1, r1, r2
 8025728:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 802572c:	4629      	mov	r1, r5
 802572e:	eb43 0101 	adc.w	r1, r3, r1
 8025732:	f8c7 12a4 	str.w	r1, [r7, #676]	; 0x2a4
 8025736:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 802573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802573e:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	; 0x2a0
 8025742:	4621      	mov	r1, r4
 8025744:	1889      	adds	r1, r1, r2
 8025746:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 802574a:	4629      	mov	r1, r5
 802574c:	eb43 0101 	adc.w	r1, r3, r1
 8025750:	f8c7 129c 	str.w	r1, [r7, #668]	; 0x29c
 8025754:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8025758:	e9d3 2300 	ldrd	r2, r3, [r3]
 802575c:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 8025760:	4621      	mov	r1, r4
 8025762:	1889      	adds	r1, r1, r2
 8025764:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8025768:	4629      	mov	r1, r5
 802576a:	eb43 0101 	adc.w	r1, r3, r1
 802576e:	f8c7 1294 	str.w	r1, [r7, #660]	; 0x294
 8025772:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8025776:	e9d3 2300 	ldrd	r2, r3, [r3]
 802577a:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	; 0x290
 802577e:	4621      	mov	r1, r4
 8025780:	1889      	adds	r1, r1, r2
 8025782:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 8025786:	4629      	mov	r1, r5
 8025788:	eb43 0101 	adc.w	r1, r3, r1
 802578c:	f8c7 128c 	str.w	r1, [r7, #652]	; 0x28c
 8025790:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8025794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025798:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 802579c:	4621      	mov	r1, r4
 802579e:	1889      	adds	r1, r1, r2
 80257a0:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 80257a4:	4629      	mov	r1, r5
 80257a6:	eb43 0101 	adc.w	r1, r3, r1
 80257aa:	f8c7 1284 	str.w	r1, [r7, #644]	; 0x284
 80257ae:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 80257b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257b6:	e9d7 45a0 	ldrd	r4, r5, [r7, #640]	; 0x280
 80257ba:	4621      	mov	r1, r4
 80257bc:	1889      	adds	r1, r1, r2
 80257be:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80257c2:	4629      	mov	r1, r5
 80257c4:	eb43 0101 	adc.w	r1, r3, r1
 80257c8:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 80257cc:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80257d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257d4:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	; 0x278
 80257d8:	4621      	mov	r1, r4
 80257da:	1889      	adds	r1, r1, r2
 80257dc:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 80257e0:	4629      	mov	r1, r5
 80257e2:	eb43 0101 	adc.w	r1, r3, r1
 80257e6:	f8c7 1274 	str.w	r1, [r7, #628]	; 0x274
 80257ea:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80257ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257f2:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 80257f6:	4621      	mov	r1, r4
 80257f8:	1851      	adds	r1, r2, r1
 80257fa:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 80257fe:	4629      	mov	r1, r5
 8025800:	eb43 0101 	adc.w	r1, r3, r1
 8025804:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8025808:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 802580c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8025810:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h6 = f0g6 + f1g5_2 + f2g4   + f3g3_2 + f4g2   + f5g1_2 + f6g0   + f7g9_38 + f8g8_19 + f9g7_38;
 8025814:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8025818:	e9d3 0100 	ldrd	r0, r1, [r3]
 802581c:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8025820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025824:	1884      	adds	r4, r0, r2
 8025826:	f8c7 4268 	str.w	r4, [r7, #616]	; 0x268
 802582a:	eb41 0303 	adc.w	r3, r1, r3
 802582e:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8025832:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8025836:	e9d3 2300 	ldrd	r2, r3, [r3]
 802583a:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 802583e:	4621      	mov	r1, r4
 8025840:	1889      	adds	r1, r1, r2
 8025842:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8025846:	4629      	mov	r1, r5
 8025848:	eb43 0101 	adc.w	r1, r3, r1
 802584c:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 8025850:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8025854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025858:	e9d7 4598 	ldrd	r4, r5, [r7, #608]	; 0x260
 802585c:	4621      	mov	r1, r4
 802585e:	1889      	adds	r1, r1, r2
 8025860:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 8025864:	4629      	mov	r1, r5
 8025866:	eb43 0101 	adc.w	r1, r3, r1
 802586a:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 802586e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8025872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025876:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 802587a:	4621      	mov	r1, r4
 802587c:	1889      	adds	r1, r1, r2
 802587e:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 8025882:	4629      	mov	r1, r5
 8025884:	eb43 0101 	adc.w	r1, r3, r1
 8025888:	f8c7 1254 	str.w	r1, [r7, #596]	; 0x254
 802588c:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8025890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025894:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	; 0x250
 8025898:	4621      	mov	r1, r4
 802589a:	1889      	adds	r1, r1, r2
 802589c:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 80258a0:	4629      	mov	r1, r5
 80258a2:	eb43 0101 	adc.w	r1, r3, r1
 80258a6:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 80258aa:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 80258ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258b2:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 80258b6:	4621      	mov	r1, r4
 80258b8:	1889      	adds	r1, r1, r2
 80258ba:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 80258be:	4629      	mov	r1, r5
 80258c0:	eb43 0101 	adc.w	r1, r3, r1
 80258c4:	f8c7 1244 	str.w	r1, [r7, #580]	; 0x244
 80258c8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80258cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258d0:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 80258d4:	4621      	mov	r1, r4
 80258d6:	1889      	adds	r1, r1, r2
 80258d8:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 80258dc:	4629      	mov	r1, r5
 80258de:	eb43 0101 	adc.w	r1, r3, r1
 80258e2:	f8c7 123c 	str.w	r1, [r7, #572]	; 0x23c
 80258e6:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80258ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258ee:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 80258f2:	4621      	mov	r1, r4
 80258f4:	1889      	adds	r1, r1, r2
 80258f6:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 80258fa:	4629      	mov	r1, r5
 80258fc:	eb43 0101 	adc.w	r1, r3, r1
 8025900:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 8025904:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8025908:	e9d3 2300 	ldrd	r2, r3, [r3]
 802590c:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	; 0x230
 8025910:	4621      	mov	r1, r4
 8025912:	1851      	adds	r1, r2, r1
 8025914:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8025918:	4629      	mov	r1, r5
 802591a:	eb43 0101 	adc.w	r1, r3, r1
 802591e:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8025922:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8025926:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 802592a:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h7 = f0g7 + f1g6   + f2g5   + f3g4   + f4g3   + f5g2   + f6g1   + f7g0   + f8g9_19 + f9g8_19;
 802592e:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8025932:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025936:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802593e:	1884      	adds	r4, r0, r2
 8025940:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 8025944:	eb41 0303 	adc.w	r3, r1, r3
 8025948:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 802594c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8025950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025954:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 8025958:	4621      	mov	r1, r4
 802595a:	1889      	adds	r1, r1, r2
 802595c:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8025960:	4629      	mov	r1, r5
 8025962:	eb43 0101 	adc.w	r1, r3, r1
 8025966:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 802596a:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 802596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025972:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 8025976:	4621      	mov	r1, r4
 8025978:	1889      	adds	r1, r1, r2
 802597a:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 802597e:	4629      	mov	r1, r5
 8025980:	eb43 0101 	adc.w	r1, r3, r1
 8025984:	f8c7 121c 	str.w	r1, [r7, #540]	; 0x21c
 8025988:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 802598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025990:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8025994:	4621      	mov	r1, r4
 8025996:	1889      	adds	r1, r1, r2
 8025998:	f8c7 1210 	str.w	r1, [r7, #528]	; 0x210
 802599c:	4629      	mov	r1, r5
 802599e:	eb43 0101 	adc.w	r1, r3, r1
 80259a2:	f8c7 1214 	str.w	r1, [r7, #532]	; 0x214
 80259a6:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 80259aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259ae:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 80259b2:	4621      	mov	r1, r4
 80259b4:	1889      	adds	r1, r1, r2
 80259b6:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 80259ba:	4629      	mov	r1, r5
 80259bc:	eb43 0101 	adc.w	r1, r3, r1
 80259c0:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 80259c4:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80259c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259cc:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 80259d0:	4621      	mov	r1, r4
 80259d2:	1889      	adds	r1, r1, r2
 80259d4:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 80259d8:	4629      	mov	r1, r5
 80259da:	eb43 0101 	adc.w	r1, r3, r1
 80259de:	f8c7 1204 	str.w	r1, [r7, #516]	; 0x204
 80259e2:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 80259e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259ea:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 80259ee:	4621      	mov	r1, r4
 80259f0:	1889      	adds	r1, r1, r2
 80259f2:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 80259f6:	4629      	mov	r1, r5
 80259f8:	eb43 0101 	adc.w	r1, r3, r1
 80259fc:	f8c7 11fc 	str.w	r1, [r7, #508]	; 0x1fc
 8025a00:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8025a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a08:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	; 0x1f8
 8025a0c:	4621      	mov	r1, r4
 8025a0e:	1889      	adds	r1, r1, r2
 8025a10:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 8025a14:	4629      	mov	r1, r5
 8025a16:	eb43 0101 	adc.w	r1, r3, r1
 8025a1a:	f8c7 11f4 	str.w	r1, [r7, #500]	; 0x1f4
 8025a1e:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8025a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a26:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8025a2a:	4621      	mov	r1, r4
 8025a2c:	1851      	adds	r1, r2, r1
 8025a2e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8025a32:	4629      	mov	r1, r5
 8025a34:	eb43 0101 	adc.w	r1, r3, r1
 8025a38:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8025a3c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8025a40:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8025a44:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h8 = f0g8 + f1g7_2 + f2g6   + f3g5_2 + f4g4   + f5g3_2 + f6g2   + f7g1_2 + f8g0   + f9g9_38;
 8025a48:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 8025a4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025a50:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8025a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a58:	1884      	adds	r4, r0, r2
 8025a5a:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 8025a5e:	eb41 0303 	adc.w	r3, r1, r3
 8025a62:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8025a66:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 8025a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a6e:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8025a72:	4621      	mov	r1, r4
 8025a74:	1889      	adds	r1, r1, r2
 8025a76:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8025a7a:	4629      	mov	r1, r5
 8025a7c:	eb43 0101 	adc.w	r1, r3, r1
 8025a80:	f8c7 11e4 	str.w	r1, [r7, #484]	; 0x1e4
 8025a84:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8025a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a8c:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8025a90:	4621      	mov	r1, r4
 8025a92:	1889      	adds	r1, r1, r2
 8025a94:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 8025a98:	4629      	mov	r1, r5
 8025a9a:	eb43 0101 	adc.w	r1, r3, r1
 8025a9e:	f8c7 11dc 	str.w	r1, [r7, #476]	; 0x1dc
 8025aa2:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8025aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025aaa:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 8025aae:	4621      	mov	r1, r4
 8025ab0:	1889      	adds	r1, r1, r2
 8025ab2:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 8025ab6:	4629      	mov	r1, r5
 8025ab8:	eb43 0101 	adc.w	r1, r3, r1
 8025abc:	f8c7 11d4 	str.w	r1, [r7, #468]	; 0x1d4
 8025ac0:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8025ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ac8:	e9d7 4574 	ldrd	r4, r5, [r7, #464]	; 0x1d0
 8025acc:	4621      	mov	r1, r4
 8025ace:	1889      	adds	r1, r1, r2
 8025ad0:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 8025ad4:	4629      	mov	r1, r5
 8025ad6:	eb43 0101 	adc.w	r1, r3, r1
 8025ada:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 8025ade:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 8025ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ae6:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 8025aea:	4621      	mov	r1, r4
 8025aec:	1889      	adds	r1, r1, r2
 8025aee:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 8025af2:	4629      	mov	r1, r5
 8025af4:	eb43 0101 	adc.w	r1, r3, r1
 8025af8:	f8c7 11c4 	str.w	r1, [r7, #452]	; 0x1c4
 8025afc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8025b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025b04:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 8025b08:	4621      	mov	r1, r4
 8025b0a:	1889      	adds	r1, r1, r2
 8025b0c:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8025b10:	4629      	mov	r1, r5
 8025b12:	eb43 0101 	adc.w	r1, r3, r1
 8025b16:	f8c7 11bc 	str.w	r1, [r7, #444]	; 0x1bc
 8025b1a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8025b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025b22:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8025b26:	4621      	mov	r1, r4
 8025b28:	1889      	adds	r1, r1, r2
 8025b2a:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8025b2e:	4629      	mov	r1, r5
 8025b30:	eb43 0101 	adc.w	r1, r3, r1
 8025b34:	f8c7 11b4 	str.w	r1, [r7, #436]	; 0x1b4
 8025b38:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8025b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025b40:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 8025b44:	4621      	mov	r1, r4
 8025b46:	1851      	adds	r1, r2, r1
 8025b48:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8025b4c:	4629      	mov	r1, r5
 8025b4e:	eb43 0101 	adc.w	r1, r3, r1
 8025b52:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8025b56:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8025b5a:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8025b5e:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h9 = f0g9 + f1g8   + f2g7   + f3g6   + f4g5   + f5g4   + f6g3   + f7g2   + f8g1   + f9g0   ;
 8025b62:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8025b66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025b6a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 8025b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025b72:	1884      	adds	r4, r0, r2
 8025b74:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 8025b78:	eb41 0303 	adc.w	r3, r1, r3
 8025b7c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8025b80:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8025b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025b88:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8025b8c:	4621      	mov	r1, r4
 8025b8e:	1889      	adds	r1, r1, r2
 8025b90:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 8025b94:	4629      	mov	r1, r5
 8025b96:	eb43 0101 	adc.w	r1, r3, r1
 8025b9a:	f8c7 11a4 	str.w	r1, [r7, #420]	; 0x1a4
 8025b9e:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8025ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ba6:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8025baa:	4621      	mov	r1, r4
 8025bac:	1889      	adds	r1, r1, r2
 8025bae:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8025bb2:	4629      	mov	r1, r5
 8025bb4:	eb43 0101 	adc.w	r1, r3, r1
 8025bb8:	f8c7 119c 	str.w	r1, [r7, #412]	; 0x19c
 8025bbc:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8025bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025bc4:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 8025bc8:	4621      	mov	r1, r4
 8025bca:	1889      	adds	r1, r1, r2
 8025bcc:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8025bd0:	4629      	mov	r1, r5
 8025bd2:	eb43 0101 	adc.w	r1, r3, r1
 8025bd6:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 8025bda:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 8025bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025be2:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8025be6:	4621      	mov	r1, r4
 8025be8:	1889      	adds	r1, r1, r2
 8025bea:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8025bee:	4629      	mov	r1, r5
 8025bf0:	eb43 0101 	adc.w	r1, r3, r1
 8025bf4:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
 8025bf8:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8025bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c00:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8025c04:	4621      	mov	r1, r4
 8025c06:	1889      	adds	r1, r1, r2
 8025c08:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8025c0c:	4629      	mov	r1, r5
 8025c0e:	eb43 0101 	adc.w	r1, r3, r1
 8025c12:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8025c16:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8025c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c1e:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 8025c22:	4621      	mov	r1, r4
 8025c24:	1889      	adds	r1, r1, r2
 8025c26:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8025c2a:	4629      	mov	r1, r5
 8025c2c:	eb43 0101 	adc.w	r1, r3, r1
 8025c30:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 8025c34:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8025c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c3c:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 8025c40:	4621      	mov	r1, r4
 8025c42:	1889      	adds	r1, r1, r2
 8025c44:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8025c48:	4629      	mov	r1, r5
 8025c4a:	eb43 0101 	adc.w	r1, r3, r1
 8025c4e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8025c52:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8025c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c5a:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8025c5e:	4621      	mov	r1, r4
 8025c60:	1851      	adds	r1, r2, r1
 8025c62:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8025c66:	4629      	mov	r1, r5
 8025c68:	eb43 0101 	adc.w	r1, r3, r1
 8025c6c:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8025c70:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8025c74:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8025c78:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;

    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8025c7c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8025c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025c84:	f112 7800 	adds.w	r8, r2, #33554432	; 0x2000000
 8025c88:	f143 0900 	adc.w	r9, r3, #0
 8025c8c:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8025c90:	f04f 0200 	mov.w	r2, #0
 8025c94:	f04f 0300 	mov.w	r3, #0
 8025c98:	ea4f 6298 	mov.w	r2, r8, lsr #26
 8025c9c:	ea42 1289 	orr.w	r2, r2, r9, lsl #6
 8025ca0:	ea4f 63a9 	mov.w	r3, r9, asr #26
 8025ca4:	e9c1 2300 	strd	r2, r3, [r1]
    h1 += carry0;
 8025ca8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8025cac:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8025cb0:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025cb8:	1884      	adds	r4, r0, r2
 8025cba:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8025cbe:	eb41 0303 	adc.w	r3, r1, r3
 8025cc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8025cc6:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8025cca:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8025cce:	e9c2 3400 	strd	r3, r4, [r2]
    h0 -= carry0 << 26;
 8025cd2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8025cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025cda:	f04f 0000 	mov.w	r0, #0
 8025cde:	f04f 0100 	mov.w	r1, #0
 8025ce2:	0699      	lsls	r1, r3, #26
 8025ce4:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8025ce8:	0690      	lsls	r0, r2, #26
 8025cea:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8025cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025cf2:	1a14      	subs	r4, r2, r0
 8025cf4:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8025cf8:	eb63 0301 	sbc.w	r3, r3, r1
 8025cfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8025d00:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8025d04:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8025d08:	e9c2 3400 	strd	r3, r4, [r2]
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8025d0c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8025d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d14:	f112 7a00 	adds.w	sl, r2, #33554432	; 0x2000000
 8025d18:	f143 0b00 	adc.w	fp, r3, #0
 8025d1c:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8025d20:	f04f 0200 	mov.w	r2, #0
 8025d24:	f04f 0300 	mov.w	r3, #0
 8025d28:	ea4f 629a 	mov.w	r2, sl, lsr #26
 8025d2c:	ea42 128b 	orr.w	r2, r2, fp, lsl #6
 8025d30:	ea4f 63ab 	mov.w	r3, fp, asr #26
 8025d34:	e9c1 2300 	strd	r2, r3, [r1]
    h5 += carry4;
 8025d38:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8025d3c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8025d40:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d48:	1884      	adds	r4, r0, r2
 8025d4a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8025d4e:	eb41 0303 	adc.w	r3, r1, r3
 8025d52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8025d56:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8025d5a:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8025d5e:	e9c2 3400 	strd	r3, r4, [r2]
    h4 -= carry4 << 26;
 8025d62:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8025d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d6a:	f04f 0000 	mov.w	r0, #0
 8025d6e:	f04f 0100 	mov.w	r1, #0
 8025d72:	0699      	lsls	r1, r3, #26
 8025d74:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8025d78:	0690      	lsls	r0, r2, #26
 8025d7a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8025d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d82:	1a14      	subs	r4, r2, r0
 8025d84:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8025d88:	eb63 0301 	sbc.w	r3, r3, r1
 8025d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8025d90:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8025d94:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8025d98:	e9c2 3400 	strd	r3, r4, [r2]

    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 8025d9c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8025da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025da4:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8025da8:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8025dac:	f143 0300 	adc.w	r3, r3, #0
 8025db0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8025db4:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8025db8:	f04f 0200 	mov.w	r2, #0
 8025dbc:	f04f 0300 	mov.w	r3, #0
 8025dc0:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8025dc4:	4620      	mov	r0, r4
 8025dc6:	0e42      	lsrs	r2, r0, #25
 8025dc8:	4628      	mov	r0, r5
 8025dca:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 8025dce:	4628      	mov	r0, r5
 8025dd0:	1643      	asrs	r3, r0, #25
 8025dd2:	e9c1 2300 	strd	r2, r3, [r1]
    h2 += carry1;
 8025dd6:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8025dda:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8025dde:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025de6:	1884      	adds	r4, r0, r2
 8025de8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8025dec:	eb41 0303 	adc.w	r3, r1, r3
 8025df0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8025df4:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8025df8:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8025dfc:	e9c2 3400 	strd	r3, r4, [r2]
    h1 -= carry1 << 25;
 8025e00:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8025e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e08:	f04f 0000 	mov.w	r0, #0
 8025e0c:	f04f 0100 	mov.w	r1, #0
 8025e10:	0659      	lsls	r1, r3, #25
 8025e12:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8025e16:	0650      	lsls	r0, r2, #25
 8025e18:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8025e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e20:	1a14      	subs	r4, r2, r0
 8025e22:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8025e26:	eb63 0301 	sbc.w	r3, r3, r1
 8025e2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8025e2e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8025e32:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8025e36:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 8025e3a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8025e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e42:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8025e46:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8025e4a:	f143 0300 	adc.w	r3, r3, #0
 8025e4e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8025e52:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8025e56:	f04f 0200 	mov.w	r2, #0
 8025e5a:	f04f 0300 	mov.w	r3, #0
 8025e5e:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8025e62:	4620      	mov	r0, r4
 8025e64:	0e42      	lsrs	r2, r0, #25
 8025e66:	4628      	mov	r0, r5
 8025e68:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 8025e6c:	4628      	mov	r0, r5
 8025e6e:	1643      	asrs	r3, r0, #25
 8025e70:	e9c1 2300 	strd	r2, r3, [r1]
    h6 += carry5;
 8025e74:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8025e78:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8025e7c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e84:	1884      	adds	r4, r0, r2
 8025e86:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8025e8a:	eb41 0303 	adc.w	r3, r1, r3
 8025e8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8025e92:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8025e96:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8025e9a:	e9c2 3400 	strd	r3, r4, [r2]
    h5 -= carry5 << 25;
 8025e9e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8025ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ea6:	f04f 0000 	mov.w	r0, #0
 8025eaa:	f04f 0100 	mov.w	r1, #0
 8025eae:	0659      	lsls	r1, r3, #25
 8025eb0:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8025eb4:	0650      	lsls	r0, r2, #25
 8025eb6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8025eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ebe:	1a14      	subs	r4, r2, r0
 8025ec0:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8025ec4:	eb63 0301 	sbc.w	r3, r3, r1
 8025ec8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8025ecc:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8025ed0:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8025ed4:	e9c2 3400 	strd	r3, r4, [r2]

    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 8025ed8:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8025edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ee0:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8025ee4:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8025ee8:	f143 0300 	adc.w	r3, r3, #0
 8025eec:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8025ef0:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8025ef4:	f04f 0200 	mov.w	r2, #0
 8025ef8:	f04f 0300 	mov.w	r3, #0
 8025efc:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8025f00:	4620      	mov	r0, r4
 8025f02:	0e82      	lsrs	r2, r0, #26
 8025f04:	4628      	mov	r0, r5
 8025f06:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8025f0a:	4628      	mov	r0, r5
 8025f0c:	1683      	asrs	r3, r0, #26
 8025f0e:	e9c1 2300 	strd	r2, r3, [r1]
    h3 += carry2;
 8025f12:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8025f16:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8025f1a:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f22:	1884      	adds	r4, r0, r2
 8025f24:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8025f28:	eb41 0303 	adc.w	r3, r1, r3
 8025f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025f30:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8025f34:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8025f38:	e9c2 3400 	strd	r3, r4, [r2]
    h2 -= carry2 << 26;
 8025f3c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8025f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f44:	f04f 0000 	mov.w	r0, #0
 8025f48:	f04f 0100 	mov.w	r1, #0
 8025f4c:	0699      	lsls	r1, r3, #26
 8025f4e:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8025f52:	0690      	lsls	r0, r2, #26
 8025f54:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8025f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f5c:	1a14      	subs	r4, r2, r0
 8025f5e:	67bc      	str	r4, [r7, #120]	; 0x78
 8025f60:	eb63 0301 	sbc.w	r3, r3, r1
 8025f64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8025f66:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8025f6a:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8025f6e:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 8025f72:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8025f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f7a:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8025f7e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8025f82:	f143 0300 	adc.w	r3, r3, #0
 8025f86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8025f8a:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8025f8e:	f04f 0200 	mov.w	r2, #0
 8025f92:	f04f 0300 	mov.w	r3, #0
 8025f96:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8025f9a:	4620      	mov	r0, r4
 8025f9c:	0e82      	lsrs	r2, r0, #26
 8025f9e:	4628      	mov	r0, r5
 8025fa0:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8025fa4:	4628      	mov	r0, r5
 8025fa6:	1683      	asrs	r3, r0, #26
 8025fa8:	e9c1 2300 	strd	r2, r3, [r1]
    h7 += carry6;
 8025fac:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8025fb0:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8025fb4:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fbc:	1884      	adds	r4, r0, r2
 8025fbe:	673c      	str	r4, [r7, #112]	; 0x70
 8025fc0:	eb41 0303 	adc.w	r3, r1, r3
 8025fc4:	677b      	str	r3, [r7, #116]	; 0x74
 8025fc6:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8025fca:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8025fce:	e9c2 3400 	strd	r3, r4, [r2]
    h6 -= carry6 << 26;
 8025fd2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8025fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fda:	f04f 0000 	mov.w	r0, #0
 8025fde:	f04f 0100 	mov.w	r1, #0
 8025fe2:	0699      	lsls	r1, r3, #26
 8025fe4:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8025fe8:	0690      	lsls	r0, r2, #26
 8025fea:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8025fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ff2:	1a14      	subs	r4, r2, r0
 8025ff4:	66bc      	str	r4, [r7, #104]	; 0x68
 8025ff6:	eb63 0301 	sbc.w	r3, r3, r1
 8025ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8025ffc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8026000:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8026004:	e9c2 3400 	strd	r3, r4, [r2]

    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 8026008:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 802600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026010:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8026014:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8026018:	f143 0300 	adc.w	r3, r3, #0
 802601c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8026020:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8026024:	f04f 0200 	mov.w	r2, #0
 8026028:	f04f 0300 	mov.w	r3, #0
 802602c:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 8026030:	4620      	mov	r0, r4
 8026032:	0e42      	lsrs	r2, r0, #25
 8026034:	4628      	mov	r0, r5
 8026036:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 802603a:	4628      	mov	r0, r5
 802603c:	1643      	asrs	r3, r0, #25
 802603e:	e9c1 2300 	strd	r2, r3, [r1]
    h4 += carry3;
 8026042:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8026046:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 802604a:	e9d2 0100 	ldrd	r0, r1, [r2]
 802604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026052:	1884      	adds	r4, r0, r2
 8026054:	663c      	str	r4, [r7, #96]	; 0x60
 8026056:	eb41 0303 	adc.w	r3, r1, r3
 802605a:	667b      	str	r3, [r7, #100]	; 0x64
 802605c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8026060:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8026064:	e9c2 3400 	strd	r3, r4, [r2]
    h3 -= carry3 << 25;
 8026068:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 802606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026070:	f04f 0000 	mov.w	r0, #0
 8026074:	f04f 0100 	mov.w	r1, #0
 8026078:	0659      	lsls	r1, r3, #25
 802607a:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 802607e:	0650      	lsls	r0, r2, #25
 8026080:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8026084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026088:	1a14      	subs	r4, r2, r0
 802608a:	65bc      	str	r4, [r7, #88]	; 0x58
 802608c:	eb63 0301 	sbc.w	r3, r3, r1
 8026090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8026092:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8026096:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 802609a:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 802609e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80260a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260a6:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 80260aa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80260ae:	f143 0300 	adc.w	r3, r3, #0
 80260b2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80260b6:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80260ba:	f04f 0200 	mov.w	r2, #0
 80260be:	f04f 0300 	mov.w	r3, #0
 80260c2:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 80260c6:	4620      	mov	r0, r4
 80260c8:	0e42      	lsrs	r2, r0, #25
 80260ca:	4628      	mov	r0, r5
 80260cc:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 80260d0:	4628      	mov	r0, r5
 80260d2:	1643      	asrs	r3, r0, #25
 80260d4:	e9c1 2300 	strd	r2, r3, [r1]
    h8 += carry7;
 80260d8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80260dc:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 80260e0:	e9d2 0100 	ldrd	r0, r1, [r2]
 80260e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260e8:	1884      	adds	r4, r0, r2
 80260ea:	653c      	str	r4, [r7, #80]	; 0x50
 80260ec:	eb41 0303 	adc.w	r3, r1, r3
 80260f0:	657b      	str	r3, [r7, #84]	; 0x54
 80260f2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80260f6:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 80260fa:	e9c2 3400 	strd	r3, r4, [r2]
    h7 -= carry7 << 25;
 80260fe:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8026102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026106:	f04f 0000 	mov.w	r0, #0
 802610a:	f04f 0100 	mov.w	r1, #0
 802610e:	0659      	lsls	r1, r3, #25
 8026110:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8026114:	0650      	lsls	r0, r2, #25
 8026116:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 802611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802611e:	1a14      	subs	r4, r2, r0
 8026120:	64bc      	str	r4, [r7, #72]	; 0x48
 8026122:	eb63 0301 	sbc.w	r3, r3, r1
 8026126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8026128:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 802612c:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8026130:	e9c2 3400 	strd	r3, r4, [r2]

    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8026134:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8026138:	e9d3 2300 	ldrd	r2, r3, [r3]
 802613c:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8026140:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8026144:	f143 0300 	adc.w	r3, r3, #0
 8026148:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 802614c:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8026150:	f04f 0200 	mov.w	r2, #0
 8026154:	f04f 0300 	mov.w	r3, #0
 8026158:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 802615c:	4620      	mov	r0, r4
 802615e:	0e82      	lsrs	r2, r0, #26
 8026160:	4628      	mov	r0, r5
 8026162:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8026166:	4628      	mov	r0, r5
 8026168:	1683      	asrs	r3, r0, #26
 802616a:	e9c1 2300 	strd	r2, r3, [r1]
    h5 += carry4;
 802616e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8026172:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8026176:	e9d2 0100 	ldrd	r0, r1, [r2]
 802617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802617e:	1884      	adds	r4, r0, r2
 8026180:	643c      	str	r4, [r7, #64]	; 0x40
 8026182:	eb41 0303 	adc.w	r3, r1, r3
 8026186:	647b      	str	r3, [r7, #68]	; 0x44
 8026188:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 802618c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8026190:	e9c2 3400 	strd	r3, r4, [r2]
    h4 -= carry4 << 26;
 8026194:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8026198:	e9d3 2300 	ldrd	r2, r3, [r3]
 802619c:	f04f 0000 	mov.w	r0, #0
 80261a0:	f04f 0100 	mov.w	r1, #0
 80261a4:	0699      	lsls	r1, r3, #26
 80261a6:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80261aa:	0690      	lsls	r0, r2, #26
 80261ac:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80261b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261b4:	1a14      	subs	r4, r2, r0
 80261b6:	63bc      	str	r4, [r7, #56]	; 0x38
 80261b8:	eb63 0301 	sbc.w	r3, r3, r1
 80261bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80261be:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80261c2:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 80261c6:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 80261ca:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80261ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261d2:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80261d6:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80261da:	f143 0300 	adc.w	r3, r3, #0
 80261de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80261e2:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80261e6:	f04f 0200 	mov.w	r2, #0
 80261ea:	f04f 0300 	mov.w	r3, #0
 80261ee:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 80261f2:	4620      	mov	r0, r4
 80261f4:	0e82      	lsrs	r2, r0, #26
 80261f6:	4628      	mov	r0, r5
 80261f8:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80261fc:	4628      	mov	r0, r5
 80261fe:	1683      	asrs	r3, r0, #26
 8026200:	e9c1 2300 	strd	r2, r3, [r1]
    h9 += carry8;
 8026204:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8026208:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 802620c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8026210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026214:	1884      	adds	r4, r0, r2
 8026216:	633c      	str	r4, [r7, #48]	; 0x30
 8026218:	eb41 0303 	adc.w	r3, r1, r3
 802621c:	637b      	str	r3, [r7, #52]	; 0x34
 802621e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8026222:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8026226:	e9c2 3400 	strd	r3, r4, [r2]
    h8 -= carry8 << 26;
 802622a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 802622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026232:	f04f 0000 	mov.w	r0, #0
 8026236:	f04f 0100 	mov.w	r1, #0
 802623a:	0699      	lsls	r1, r3, #26
 802623c:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8026240:	0690      	lsls	r0, r2, #26
 8026242:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8026246:	e9d3 2300 	ldrd	r2, r3, [r3]
 802624a:	1a14      	subs	r4, r2, r0
 802624c:	62bc      	str	r4, [r7, #40]	; 0x28
 802624e:	eb63 0301 	sbc.w	r3, r3, r1
 8026252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026254:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8026258:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 802625c:	e9c2 3400 	strd	r3, r4, [r2]

    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 8026260:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8026264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026268:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 802626c:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8026270:	f143 0300 	adc.w	r3, r3, #0
 8026274:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8026278:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 802627c:	f04f 0200 	mov.w	r2, #0
 8026280:	f04f 0300 	mov.w	r3, #0
 8026284:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8026288:	4620      	mov	r0, r4
 802628a:	0e42      	lsrs	r2, r0, #25
 802628c:	4628      	mov	r0, r5
 802628e:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 8026292:	4628      	mov	r0, r5
 8026294:	1643      	asrs	r3, r0, #25
 8026296:	e9c1 2300 	strd	r2, r3, [r1]
    h0 += carry9 * 19;
 802629a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 802629e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80262a2:	4622      	mov	r2, r4
 80262a4:	462b      	mov	r3, r5
 80262a6:	f04f 0000 	mov.w	r0, #0
 80262aa:	f04f 0100 	mov.w	r1, #0
 80262ae:	00d9      	lsls	r1, r3, #3
 80262b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80262b4:	00d0      	lsls	r0, r2, #3
 80262b6:	4602      	mov	r2, r0
 80262b8:	460b      	mov	r3, r1
 80262ba:	1912      	adds	r2, r2, r4
 80262bc:	eb45 0303 	adc.w	r3, r5, r3
 80262c0:	1891      	adds	r1, r2, r2
 80262c2:	6239      	str	r1, [r7, #32]
 80262c4:	415b      	adcs	r3, r3
 80262c6:	627b      	str	r3, [r7, #36]	; 0x24
 80262c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80262cc:	1911      	adds	r1, r2, r4
 80262ce:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 80262d2:	416b      	adcs	r3, r5
 80262d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80262d8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80262dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80262e0:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 80262e4:	4621      	mov	r1, r4
 80262e6:	1851      	adds	r1, r2, r1
 80262e8:	61b9      	str	r1, [r7, #24]
 80262ea:	4629      	mov	r1, r5
 80262ec:	eb43 0101 	adc.w	r1, r3, r1
 80262f0:	61f9      	str	r1, [r7, #28]
 80262f2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80262f6:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80262fa:	e9c2 3400 	strd	r3, r4, [r2]
    h9 -= carry9 << 25;
 80262fe:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8026302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026306:	f04f 0200 	mov.w	r2, #0
 802630a:	f04f 0300 	mov.w	r3, #0
 802630e:	064b      	lsls	r3, r1, #25
 8026310:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8026314:	0642      	lsls	r2, r0, #25
 8026316:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 802631a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802631e:	1a84      	subs	r4, r0, r2
 8026320:	613c      	str	r4, [r7, #16]
 8026322:	eb61 0303 	sbc.w	r3, r1, r3
 8026326:	617b      	str	r3, [r7, #20]
 8026328:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 802632c:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8026330:	e9c2 3400 	strd	r3, r4, [r2]

    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8026334:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8026338:	e9d3 2300 	ldrd	r2, r3, [r3]
 802633c:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8026340:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8026344:	f143 0300 	adc.w	r3, r3, #0
 8026348:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 802634c:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8026350:	f04f 0200 	mov.w	r2, #0
 8026354:	f04f 0300 	mov.w	r3, #0
 8026358:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 802635c:	4620      	mov	r0, r4
 802635e:	0e82      	lsrs	r2, r0, #26
 8026360:	4628      	mov	r0, r5
 8026362:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8026366:	4628      	mov	r0, r5
 8026368:	1683      	asrs	r3, r0, #26
 802636a:	e9c1 2300 	strd	r2, r3, [r1]
    h1 += carry0;
 802636e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8026372:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8026376:	e9d2 0100 	ldrd	r0, r1, [r2]
 802637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802637e:	1884      	adds	r4, r0, r2
 8026380:	60bc      	str	r4, [r7, #8]
 8026382:	eb41 0303 	adc.w	r3, r1, r3
 8026386:	60fb      	str	r3, [r7, #12]
 8026388:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 802638c:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8026390:	e9c2 3400 	strd	r3, r4, [r2]
    h0 -= carry0 << 26;
 8026394:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8026398:	e9d3 0100 	ldrd	r0, r1, [r3]
 802639c:	f04f 0200 	mov.w	r2, #0
 80263a0:	f04f 0300 	mov.w	r3, #0
 80263a4:	068b      	lsls	r3, r1, #26
 80263a6:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 80263aa:	0682      	lsls	r2, r0, #26
 80263ac:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 80263b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80263b4:	1a84      	subs	r4, r0, r2
 80263b6:	603c      	str	r4, [r7, #0]
 80263b8:	eb61 0303 	sbc.w	r3, r1, r3
 80263bc:	607b      	str	r3, [r7, #4]
 80263be:	e9d7 3400 	ldrd	r3, r4, [r7]
 80263c2:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80263c6:	e9c2 3400 	strd	r3, r4, [r2]

    h[0] = (int32_t) h0;
 80263ca:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80263ce:	681a      	ldr	r2, [r3, #0]
 80263d0:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80263d4:	681b      	ldr	r3, [r3, #0]
 80263d6:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 80263d8:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80263dc:	681b      	ldr	r3, [r3, #0]
 80263de:	3304      	adds	r3, #4
 80263e0:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 80263e4:	6812      	ldr	r2, [r2, #0]
 80263e6:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 80263e8:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80263ec:	681b      	ldr	r3, [r3, #0]
 80263ee:	3308      	adds	r3, #8
 80263f0:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 80263f4:	6812      	ldr	r2, [r2, #0]
 80263f6:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 80263f8:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80263fc:	681b      	ldr	r3, [r3, #0]
 80263fe:	330c      	adds	r3, #12
 8026400:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8026404:	6812      	ldr	r2, [r2, #0]
 8026406:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 8026408:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 802640c:	681b      	ldr	r3, [r3, #0]
 802640e:	3310      	adds	r3, #16
 8026410:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8026414:	6812      	ldr	r2, [r2, #0]
 8026416:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 8026418:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 802641c:	681b      	ldr	r3, [r3, #0]
 802641e:	3314      	adds	r3, #20
 8026420:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8026424:	6812      	ldr	r2, [r2, #0]
 8026426:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 8026428:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 802642c:	681b      	ldr	r3, [r3, #0]
 802642e:	3318      	adds	r3, #24
 8026430:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8026434:	6812      	ldr	r2, [r2, #0]
 8026436:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 8026438:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 802643c:	681b      	ldr	r3, [r3, #0]
 802643e:	331c      	adds	r3, #28
 8026440:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8026444:	6812      	ldr	r2, [r2, #0]
 8026446:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 8026448:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 802644c:	681b      	ldr	r3, [r3, #0]
 802644e:	3320      	adds	r3, #32
 8026450:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8026454:	6812      	ldr	r2, [r2, #0]
 8026456:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 8026458:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 802645c:	681b      	ldr	r3, [r3, #0]
 802645e:	3324      	adds	r3, #36	; 0x24
 8026460:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8026464:	6812      	ldr	r2, [r2, #0]
 8026466:	601a      	str	r2, [r3, #0]
}
 8026468:	bf00      	nop
 802646a:	f607 074c 	addw	r7, r7, #2124	; 0x84c
 802646e:	46bd      	mov	sp, r7
 8026470:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8026474:	4770      	bx	lr

08026476 <fe_neg>:

Postconditions:
   |h| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc.
*/

void fe_neg(fe h, const fe f) {
 8026476:	b480      	push	{r7}
 8026478:	b097      	sub	sp, #92	; 0x5c
 802647a:	af00      	add	r7, sp, #0
 802647c:	6078      	str	r0, [r7, #4]
 802647e:	6039      	str	r1, [r7, #0]
    int32_t f0 = f[0];
 8026480:	683b      	ldr	r3, [r7, #0]
 8026482:	681b      	ldr	r3, [r3, #0]
 8026484:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t f1 = f[1];
 8026486:	683b      	ldr	r3, [r7, #0]
 8026488:	685b      	ldr	r3, [r3, #4]
 802648a:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t f2 = f[2];
 802648c:	683b      	ldr	r3, [r7, #0]
 802648e:	689b      	ldr	r3, [r3, #8]
 8026490:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t f3 = f[3];
 8026492:	683b      	ldr	r3, [r7, #0]
 8026494:	68db      	ldr	r3, [r3, #12]
 8026496:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t f4 = f[4];
 8026498:	683b      	ldr	r3, [r7, #0]
 802649a:	691b      	ldr	r3, [r3, #16]
 802649c:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t f5 = f[5];
 802649e:	683b      	ldr	r3, [r7, #0]
 80264a0:	695b      	ldr	r3, [r3, #20]
 80264a2:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t f6 = f[6];
 80264a4:	683b      	ldr	r3, [r7, #0]
 80264a6:	699b      	ldr	r3, [r3, #24]
 80264a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t f7 = f[7];
 80264aa:	683b      	ldr	r3, [r7, #0]
 80264ac:	69db      	ldr	r3, [r3, #28]
 80264ae:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t f8 = f[8];
 80264b0:	683b      	ldr	r3, [r7, #0]
 80264b2:	6a1b      	ldr	r3, [r3, #32]
 80264b4:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t f9 = f[9];
 80264b6:	683b      	ldr	r3, [r7, #0]
 80264b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80264ba:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t h0 = -f0;
 80264bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80264be:	425b      	negs	r3, r3
 80264c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t h1 = -f1;
 80264c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80264c4:	425b      	negs	r3, r3
 80264c6:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t h2 = -f2;
 80264c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80264ca:	425b      	negs	r3, r3
 80264cc:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h3 = -f3;
 80264ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80264d0:	425b      	negs	r3, r3
 80264d2:	623b      	str	r3, [r7, #32]
    int32_t h4 = -f4;
 80264d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80264d6:	425b      	negs	r3, r3
 80264d8:	61fb      	str	r3, [r7, #28]
    int32_t h5 = -f5;
 80264da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80264dc:	425b      	negs	r3, r3
 80264de:	61bb      	str	r3, [r7, #24]
    int32_t h6 = -f6;
 80264e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80264e2:	425b      	negs	r3, r3
 80264e4:	617b      	str	r3, [r7, #20]
    int32_t h7 = -f7;
 80264e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80264e8:	425b      	negs	r3, r3
 80264ea:	613b      	str	r3, [r7, #16]
    int32_t h8 = -f8;
 80264ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80264ee:	425b      	negs	r3, r3
 80264f0:	60fb      	str	r3, [r7, #12]
    int32_t h9 = -f9;
 80264f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80264f4:	425b      	negs	r3, r3
 80264f6:	60bb      	str	r3, [r7, #8]

    h[0] = h0;
 80264f8:	687b      	ldr	r3, [r7, #4]
 80264fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80264fc:	601a      	str	r2, [r3, #0]
    h[1] = h1;
 80264fe:	687b      	ldr	r3, [r7, #4]
 8026500:	3304      	adds	r3, #4
 8026502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8026504:	601a      	str	r2, [r3, #0]
    h[2] = h2;
 8026506:	687b      	ldr	r3, [r7, #4]
 8026508:	3308      	adds	r3, #8
 802650a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802650c:	601a      	str	r2, [r3, #0]
    h[3] = h3;
 802650e:	687b      	ldr	r3, [r7, #4]
 8026510:	330c      	adds	r3, #12
 8026512:	6a3a      	ldr	r2, [r7, #32]
 8026514:	601a      	str	r2, [r3, #0]
    h[4] = h4;
 8026516:	687b      	ldr	r3, [r7, #4]
 8026518:	3310      	adds	r3, #16
 802651a:	69fa      	ldr	r2, [r7, #28]
 802651c:	601a      	str	r2, [r3, #0]
    h[5] = h5;
 802651e:	687b      	ldr	r3, [r7, #4]
 8026520:	3314      	adds	r3, #20
 8026522:	69ba      	ldr	r2, [r7, #24]
 8026524:	601a      	str	r2, [r3, #0]
    h[6] = h6;
 8026526:	687b      	ldr	r3, [r7, #4]
 8026528:	3318      	adds	r3, #24
 802652a:	697a      	ldr	r2, [r7, #20]
 802652c:	601a      	str	r2, [r3, #0]
    h[7] = h7;
 802652e:	687b      	ldr	r3, [r7, #4]
 8026530:	331c      	adds	r3, #28
 8026532:	693a      	ldr	r2, [r7, #16]
 8026534:	601a      	str	r2, [r3, #0]
    h[8] = h8;
 8026536:	687b      	ldr	r3, [r7, #4]
 8026538:	3320      	adds	r3, #32
 802653a:	68fa      	ldr	r2, [r7, #12]
 802653c:	601a      	str	r2, [r3, #0]
    h[9] = h9;
 802653e:	687b      	ldr	r3, [r7, #4]
 8026540:	3324      	adds	r3, #36	; 0x24
 8026542:	68ba      	ldr	r2, [r7, #8]
 8026544:	601a      	str	r2, [r3, #0]
}
 8026546:	bf00      	nop
 8026548:	375c      	adds	r7, #92	; 0x5c
 802654a:	46bd      	mov	sp, r7
 802654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026550:	4770      	bx	lr

08026552 <fe_pow22523>:


void fe_pow22523(fe out, const fe z) {
 8026552:	b580      	push	{r7, lr}
 8026554:	b0a2      	sub	sp, #136	; 0x88
 8026556:	af00      	add	r7, sp, #0
 8026558:	6078      	str	r0, [r7, #4]
 802655a:	6039      	str	r1, [r7, #0]
    fe t0;
    fe t1;
    fe t2;
    int i;
    fe_sq(t0, z);
 802655c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8026560:	6839      	ldr	r1, [r7, #0]
 8026562:	4618      	mov	r0, r3
 8026564:	f000 f99b 	bl	802689e <fe_sq>

    for (i = 1; i < 1; ++i) {
 8026568:	2301      	movs	r3, #1
 802656a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802656e:	e00c      	b.n	802658a <fe_pow22523+0x38>
        fe_sq(t0, t0);
 8026570:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8026574:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8026578:	4611      	mov	r1, r2
 802657a:	4618      	mov	r0, r3
 802657c:	f000 f98f 	bl	802689e <fe_sq>
    for (i = 1; i < 1; ++i) {
 8026580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026584:	3301      	adds	r3, #1
 8026586:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802658a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802658e:	2b00      	cmp	r3, #0
 8026590:	ddee      	ble.n	8026570 <fe_pow22523+0x1e>
    }

    fe_sq(t1, t0);
 8026592:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8026596:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802659a:	4611      	mov	r1, r2
 802659c:	4618      	mov	r0, r3
 802659e:	f000 f97e 	bl	802689e <fe_sq>

    for (i = 1; i < 2; ++i) {
 80265a2:	2301      	movs	r3, #1
 80265a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80265a8:	e00c      	b.n	80265c4 <fe_pow22523+0x72>
        fe_sq(t1, t1);
 80265aa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80265ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80265b2:	4611      	mov	r1, r2
 80265b4:	4618      	mov	r0, r3
 80265b6:	f000 f972 	bl	802689e <fe_sq>
    for (i = 1; i < 2; ++i) {
 80265ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80265be:	3301      	adds	r3, #1
 80265c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80265c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80265c8:	2b01      	cmp	r3, #1
 80265ca:	ddee      	ble.n	80265aa <fe_pow22523+0x58>
    }

    fe_mul(t1, z, t1);
 80265cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80265d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80265d4:	6839      	ldr	r1, [r7, #0]
 80265d6:	4618      	mov	r0, r3
 80265d8:	f7fd fa52 	bl	8023a80 <fe_mul>
    fe_mul(t0, t0, t1);
 80265dc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80265e0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80265e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80265e8:	4618      	mov	r0, r3
 80265ea:	f7fd fa49 	bl	8023a80 <fe_mul>
    fe_sq(t0, t0);
 80265ee:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80265f2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80265f6:	4611      	mov	r1, r2
 80265f8:	4618      	mov	r0, r3
 80265fa:	f000 f950 	bl	802689e <fe_sq>

    for (i = 1; i < 1; ++i) {
 80265fe:	2301      	movs	r3, #1
 8026600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8026604:	e00c      	b.n	8026620 <fe_pow22523+0xce>
        fe_sq(t0, t0);
 8026606:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802660a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802660e:	4611      	mov	r1, r2
 8026610:	4618      	mov	r0, r3
 8026612:	f000 f944 	bl	802689e <fe_sq>
    for (i = 1; i < 1; ++i) {
 8026616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802661a:	3301      	adds	r3, #1
 802661c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8026620:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026624:	2b00      	cmp	r3, #0
 8026626:	ddee      	ble.n	8026606 <fe_pow22523+0xb4>
    }

    fe_mul(t0, t1, t0);
 8026628:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802662c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8026630:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8026634:	4618      	mov	r0, r3
 8026636:	f7fd fa23 	bl	8023a80 <fe_mul>
    fe_sq(t1, t0);
 802663a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802663e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026642:	4611      	mov	r1, r2
 8026644:	4618      	mov	r0, r3
 8026646:	f000 f92a 	bl	802689e <fe_sq>

    for (i = 1; i < 5; ++i) {
 802664a:	2301      	movs	r3, #1
 802664c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8026650:	e00c      	b.n	802666c <fe_pow22523+0x11a>
        fe_sq(t1, t1);
 8026652:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8026656:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802665a:	4611      	mov	r1, r2
 802665c:	4618      	mov	r0, r3
 802665e:	f000 f91e 	bl	802689e <fe_sq>
    for (i = 1; i < 5; ++i) {
 8026662:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026666:	3301      	adds	r3, #1
 8026668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802666c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026670:	2b04      	cmp	r3, #4
 8026672:	ddee      	ble.n	8026652 <fe_pow22523+0x100>
    }

    fe_mul(t0, t1, t0);
 8026674:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8026678:	f107 0134 	add.w	r1, r7, #52	; 0x34
 802667c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8026680:	4618      	mov	r0, r3
 8026682:	f7fd f9fd 	bl	8023a80 <fe_mul>
    fe_sq(t1, t0);
 8026686:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802668a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802668e:	4611      	mov	r1, r2
 8026690:	4618      	mov	r0, r3
 8026692:	f000 f904 	bl	802689e <fe_sq>

    for (i = 1; i < 10; ++i) {
 8026696:	2301      	movs	r3, #1
 8026698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802669c:	e00c      	b.n	80266b8 <fe_pow22523+0x166>
        fe_sq(t1, t1);
 802669e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80266a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80266a6:	4611      	mov	r1, r2
 80266a8:	4618      	mov	r0, r3
 80266aa:	f000 f8f8 	bl	802689e <fe_sq>
    for (i = 1; i < 10; ++i) {
 80266ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80266b2:	3301      	adds	r3, #1
 80266b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80266b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80266bc:	2b09      	cmp	r3, #9
 80266be:	ddee      	ble.n	802669e <fe_pow22523+0x14c>
    }

    fe_mul(t1, t1, t0);
 80266c0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80266c4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80266c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80266cc:	4618      	mov	r0, r3
 80266ce:	f7fd f9d7 	bl	8023a80 <fe_mul>
    fe_sq(t2, t1);
 80266d2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80266d6:	f107 030c 	add.w	r3, r7, #12
 80266da:	4611      	mov	r1, r2
 80266dc:	4618      	mov	r0, r3
 80266de:	f000 f8de 	bl	802689e <fe_sq>

    for (i = 1; i < 20; ++i) {
 80266e2:	2301      	movs	r3, #1
 80266e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80266e8:	e00c      	b.n	8026704 <fe_pow22523+0x1b2>
        fe_sq(t2, t2);
 80266ea:	f107 020c 	add.w	r2, r7, #12
 80266ee:	f107 030c 	add.w	r3, r7, #12
 80266f2:	4611      	mov	r1, r2
 80266f4:	4618      	mov	r0, r3
 80266f6:	f000 f8d2 	bl	802689e <fe_sq>
    for (i = 1; i < 20; ++i) {
 80266fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80266fe:	3301      	adds	r3, #1
 8026700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8026704:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026708:	2b13      	cmp	r3, #19
 802670a:	ddee      	ble.n	80266ea <fe_pow22523+0x198>
    }

    fe_mul(t1, t2, t1);
 802670c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8026710:	f107 010c 	add.w	r1, r7, #12
 8026714:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026718:	4618      	mov	r0, r3
 802671a:	f7fd f9b1 	bl	8023a80 <fe_mul>
    fe_sq(t1, t1);
 802671e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8026722:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026726:	4611      	mov	r1, r2
 8026728:	4618      	mov	r0, r3
 802672a:	f000 f8b8 	bl	802689e <fe_sq>

    for (i = 1; i < 10; ++i) {
 802672e:	2301      	movs	r3, #1
 8026730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8026734:	e00c      	b.n	8026750 <fe_pow22523+0x1fe>
        fe_sq(t1, t1);
 8026736:	f107 0234 	add.w	r2, r7, #52	; 0x34
 802673a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802673e:	4611      	mov	r1, r2
 8026740:	4618      	mov	r0, r3
 8026742:	f000 f8ac 	bl	802689e <fe_sq>
    for (i = 1; i < 10; ++i) {
 8026746:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802674a:	3301      	adds	r3, #1
 802674c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8026750:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026754:	2b09      	cmp	r3, #9
 8026756:	ddee      	ble.n	8026736 <fe_pow22523+0x1e4>
    }

    fe_mul(t0, t1, t0);
 8026758:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802675c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8026760:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8026764:	4618      	mov	r0, r3
 8026766:	f7fd f98b 	bl	8023a80 <fe_mul>
    fe_sq(t1, t0);
 802676a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802676e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026772:	4611      	mov	r1, r2
 8026774:	4618      	mov	r0, r3
 8026776:	f000 f892 	bl	802689e <fe_sq>

    for (i = 1; i < 50; ++i) {
 802677a:	2301      	movs	r3, #1
 802677c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8026780:	e00c      	b.n	802679c <fe_pow22523+0x24a>
        fe_sq(t1, t1);
 8026782:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8026786:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802678a:	4611      	mov	r1, r2
 802678c:	4618      	mov	r0, r3
 802678e:	f000 f886 	bl	802689e <fe_sq>
    for (i = 1; i < 50; ++i) {
 8026792:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026796:	3301      	adds	r3, #1
 8026798:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802679c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80267a0:	2b31      	cmp	r3, #49	; 0x31
 80267a2:	ddee      	ble.n	8026782 <fe_pow22523+0x230>
    }

    fe_mul(t1, t1, t0);
 80267a4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80267a8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80267ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80267b0:	4618      	mov	r0, r3
 80267b2:	f7fd f965 	bl	8023a80 <fe_mul>
    fe_sq(t2, t1);
 80267b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80267ba:	f107 030c 	add.w	r3, r7, #12
 80267be:	4611      	mov	r1, r2
 80267c0:	4618      	mov	r0, r3
 80267c2:	f000 f86c 	bl	802689e <fe_sq>

    for (i = 1; i < 100; ++i) {
 80267c6:	2301      	movs	r3, #1
 80267c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80267cc:	e00c      	b.n	80267e8 <fe_pow22523+0x296>
        fe_sq(t2, t2);
 80267ce:	f107 020c 	add.w	r2, r7, #12
 80267d2:	f107 030c 	add.w	r3, r7, #12
 80267d6:	4611      	mov	r1, r2
 80267d8:	4618      	mov	r0, r3
 80267da:	f000 f860 	bl	802689e <fe_sq>
    for (i = 1; i < 100; ++i) {
 80267de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80267e2:	3301      	adds	r3, #1
 80267e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80267e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80267ec:	2b63      	cmp	r3, #99	; 0x63
 80267ee:	ddee      	ble.n	80267ce <fe_pow22523+0x27c>
    }

    fe_mul(t1, t2, t1);
 80267f0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80267f4:	f107 010c 	add.w	r1, r7, #12
 80267f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80267fc:	4618      	mov	r0, r3
 80267fe:	f7fd f93f 	bl	8023a80 <fe_mul>
    fe_sq(t1, t1);
 8026802:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8026806:	f107 0334 	add.w	r3, r7, #52	; 0x34
 802680a:	4611      	mov	r1, r2
 802680c:	4618      	mov	r0, r3
 802680e:	f000 f846 	bl	802689e <fe_sq>

    for (i = 1; i < 50; ++i) {
 8026812:	2301      	movs	r3, #1
 8026814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8026818:	e00c      	b.n	8026834 <fe_pow22523+0x2e2>
        fe_sq(t1, t1);
 802681a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 802681e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026822:	4611      	mov	r1, r2
 8026824:	4618      	mov	r0, r3
 8026826:	f000 f83a 	bl	802689e <fe_sq>
    for (i = 1; i < 50; ++i) {
 802682a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802682e:	3301      	adds	r3, #1
 8026830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8026834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026838:	2b31      	cmp	r3, #49	; 0x31
 802683a:	ddee      	ble.n	802681a <fe_pow22523+0x2c8>
    }

    fe_mul(t0, t1, t0);
 802683c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8026840:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8026844:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8026848:	4618      	mov	r0, r3
 802684a:	f7fd f919 	bl	8023a80 <fe_mul>
    fe_sq(t0, t0);
 802684e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8026852:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8026856:	4611      	mov	r1, r2
 8026858:	4618      	mov	r0, r3
 802685a:	f000 f820 	bl	802689e <fe_sq>

    for (i = 1; i < 2; ++i) {
 802685e:	2301      	movs	r3, #1
 8026860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8026864:	e00c      	b.n	8026880 <fe_pow22523+0x32e>
        fe_sq(t0, t0);
 8026866:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802686a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802686e:	4611      	mov	r1, r2
 8026870:	4618      	mov	r0, r3
 8026872:	f000 f814 	bl	802689e <fe_sq>
    for (i = 1; i < 2; ++i) {
 8026876:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802687a:	3301      	adds	r3, #1
 802687c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8026880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026884:	2b01      	cmp	r3, #1
 8026886:	ddee      	ble.n	8026866 <fe_pow22523+0x314>
    }

    fe_mul(out, t0, z);
 8026888:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802688c:	683a      	ldr	r2, [r7, #0]
 802688e:	4619      	mov	r1, r3
 8026890:	6878      	ldr	r0, [r7, #4]
 8026892:	f7fd f8f5 	bl	8023a80 <fe_mul>
    return;
 8026896:	bf00      	nop
}
 8026898:	3788      	adds	r7, #136	; 0x88
 802689a:	46bd      	mov	sp, r7
 802689c:	bd80      	pop	{r7, pc}

0802689e <fe_sq>:

/*
See fe_mul.c for discussion of implementation strategy.
*/

void fe_sq(fe h, const fe f) {
 802689e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80268a2:	f2ad 5d4c 	subw	sp, sp, #1356	; 0x54c
 80268a6:	af00      	add	r7, sp, #0
 80268a8:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80268ac:	6018      	str	r0, [r3, #0]
 80268ae:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80268b2:	6019      	str	r1, [r3, #0]
    int32_t f0 = f[0];
 80268b4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80268b8:	681b      	ldr	r3, [r3, #0]
 80268ba:	681b      	ldr	r3, [r3, #0]
 80268bc:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
    int32_t f1 = f[1];
 80268c0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80268c4:	681b      	ldr	r3, [r3, #0]
 80268c6:	685b      	ldr	r3, [r3, #4]
 80268c8:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
    int32_t f2 = f[2];
 80268cc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80268d0:	681b      	ldr	r3, [r3, #0]
 80268d2:	689b      	ldr	r3, [r3, #8]
 80268d4:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
    int32_t f3 = f[3];
 80268d8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80268dc:	681b      	ldr	r3, [r3, #0]
 80268de:	68db      	ldr	r3, [r3, #12]
 80268e0:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    int32_t f4 = f[4];
 80268e4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80268e8:	681b      	ldr	r3, [r3, #0]
 80268ea:	691b      	ldr	r3, [r3, #16]
 80268ec:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    int32_t f5 = f[5];
 80268f0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80268f4:	681b      	ldr	r3, [r3, #0]
 80268f6:	695b      	ldr	r3, [r3, #20]
 80268f8:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
    int32_t f6 = f[6];
 80268fc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8026900:	681b      	ldr	r3, [r3, #0]
 8026902:	699b      	ldr	r3, [r3, #24]
 8026904:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    int32_t f7 = f[7];
 8026908:	f507 7322 	add.w	r3, r7, #648	; 0x288
 802690c:	681b      	ldr	r3, [r3, #0]
 802690e:	69db      	ldr	r3, [r3, #28]
 8026910:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
    int32_t f8 = f[8];
 8026914:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8026918:	681b      	ldr	r3, [r3, #0]
 802691a:	6a1b      	ldr	r3, [r3, #32]
 802691c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    int32_t f9 = f[9];
 8026920:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8026924:	681b      	ldr	r3, [r3, #0]
 8026926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026928:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    int32_t f0_2 = 2 * f0;
 802692c:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8026930:	005b      	lsls	r3, r3, #1
 8026932:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
    int32_t f1_2 = 2 * f1;
 8026936:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 802693a:	005b      	lsls	r3, r3, #1
 802693c:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
    int32_t f2_2 = 2 * f2;
 8026940:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8026944:	005b      	lsls	r3, r3, #1
 8026946:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    int32_t f3_2 = 2 * f3;
 802694a:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 802694e:	005b      	lsls	r3, r3, #1
 8026950:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
    int32_t f4_2 = 2 * f4;
 8026954:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8026958:	005b      	lsls	r3, r3, #1
 802695a:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    int32_t f5_2 = 2 * f5;
 802695e:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8026962:	005b      	lsls	r3, r3, #1
 8026964:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
    int32_t f6_2 = 2 * f6;
 8026968:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 802696c:	005b      	lsls	r3, r3, #1
 802696e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
    int32_t f7_2 = 2 * f7;
 8026972:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8026976:	005b      	lsls	r3, r3, #1
 8026978:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    int32_t f5_38 = 38 * f5; /* 1.959375*2^30 */
 802697c:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 8026980:	2326      	movs	r3, #38	; 0x26
 8026982:	fb03 f302 	mul.w	r3, r3, r2
 8026986:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
    int32_t f6_19 = 19 * f6; /* 1.959375*2^30 */
 802698a:	f8d7 252c 	ldr.w	r2, [r7, #1324]	; 0x52c
 802698e:	4613      	mov	r3, r2
 8026990:	00db      	lsls	r3, r3, #3
 8026992:	4413      	add	r3, r2
 8026994:	005b      	lsls	r3, r3, #1
 8026996:	4413      	add	r3, r2
 8026998:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
    int32_t f7_38 = 38 * f7; /* 1.959375*2^30 */
 802699c:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 80269a0:	2326      	movs	r3, #38	; 0x26
 80269a2:	fb03 f302 	mul.w	r3, r3, r2
 80269a6:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
    int32_t f8_19 = 19 * f8; /* 1.959375*2^30 */
 80269aa:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80269ae:	4613      	mov	r3, r2
 80269b0:	00db      	lsls	r3, r3, #3
 80269b2:	4413      	add	r3, r2
 80269b4:	005b      	lsls	r3, r3, #1
 80269b6:	4413      	add	r3, r2
 80269b8:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
    int32_t f9_38 = 38 * f9; /* 1.959375*2^30 */
 80269bc:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 80269c0:	2326      	movs	r3, #38	; 0x26
 80269c2:	fb03 f302 	mul.w	r3, r3, r2
 80269c6:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
    int64_t f0f0    = f0   * (int64_t) f0;
 80269ca:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80269ce:	4618      	mov	r0, r3
 80269d0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80269d4:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80269d8:	461a      	mov	r2, r3
 80269da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80269de:	fb02 f501 	mul.w	r5, r2, r1
 80269e2:	fb00 f403 	mul.w	r4, r0, r3
 80269e6:	442c      	add	r4, r5
 80269e8:	fba0 2302 	umull	r2, r3, r0, r2
 80269ec:	18e1      	adds	r1, r4, r3
 80269ee:	460b      	mov	r3, r1
 80269f0:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80269f4:	e9c1 2300 	strd	r2, r3, [r1]
 80269f8:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80269fc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f1_2  = f0_2 * (int64_t) f1;
 8026a00:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8026a04:	4618      	mov	r0, r3
 8026a06:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026a0a:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8026a0e:	461a      	mov	r2, r3
 8026a10:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026a14:	fb02 f501 	mul.w	r5, r2, r1
 8026a18:	fb00 f403 	mul.w	r4, r0, r3
 8026a1c:	442c      	add	r4, r5
 8026a1e:	fba0 2302 	umull	r2, r3, r0, r2
 8026a22:	18e1      	adds	r1, r4, r3
 8026a24:	460b      	mov	r3, r1
 8026a26:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8026a2a:	e9c1 2300 	strd	r2, r3, [r1]
 8026a2e:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8026a32:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f2_2  = f0_2 * (int64_t) f2;
 8026a36:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8026a3a:	4618      	mov	r0, r3
 8026a3c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026a40:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8026a44:	461a      	mov	r2, r3
 8026a46:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026a4a:	fb02 f501 	mul.w	r5, r2, r1
 8026a4e:	fb00 f403 	mul.w	r4, r0, r3
 8026a52:	442c      	add	r4, r5
 8026a54:	fba0 2302 	umull	r2, r3, r0, r2
 8026a58:	18e1      	adds	r1, r4, r3
 8026a5a:	460b      	mov	r3, r1
 8026a5c:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8026a60:	e9c1 2300 	strd	r2, r3, [r1]
 8026a64:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8026a68:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f3_2  = f0_2 * (int64_t) f3;
 8026a6c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8026a70:	4618      	mov	r0, r3
 8026a72:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026a76:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8026a7a:	461a      	mov	r2, r3
 8026a7c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026a80:	fb02 f501 	mul.w	r5, r2, r1
 8026a84:	fb00 f403 	mul.w	r4, r0, r3
 8026a88:	442c      	add	r4, r5
 8026a8a:	fba0 2302 	umull	r2, r3, r0, r2
 8026a8e:	18e1      	adds	r1, r4, r3
 8026a90:	460b      	mov	r3, r1
 8026a92:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8026a96:	e9c1 2300 	strd	r2, r3, [r1]
 8026a9a:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8026a9e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f4_2  = f0_2 * (int64_t) f4;
 8026aa2:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8026aa6:	4618      	mov	r0, r3
 8026aa8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026aac:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8026ab0:	461a      	mov	r2, r3
 8026ab2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026ab6:	fb02 f501 	mul.w	r5, r2, r1
 8026aba:	fb00 f403 	mul.w	r4, r0, r3
 8026abe:	442c      	add	r4, r5
 8026ac0:	fba0 2302 	umull	r2, r3, r0, r2
 8026ac4:	18e1      	adds	r1, r4, r3
 8026ac6:	460b      	mov	r3, r1
 8026ac8:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8026acc:	e9c1 2300 	strd	r2, r3, [r1]
 8026ad0:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8026ad4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f5_2  = f0_2 * (int64_t) f5;
 8026ad8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8026adc:	4618      	mov	r0, r3
 8026ade:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026ae2:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8026ae6:	461a      	mov	r2, r3
 8026ae8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026aec:	fb02 f501 	mul.w	r5, r2, r1
 8026af0:	fb00 f403 	mul.w	r4, r0, r3
 8026af4:	442c      	add	r4, r5
 8026af6:	fba0 2302 	umull	r2, r3, r0, r2
 8026afa:	18e1      	adds	r1, r4, r3
 8026afc:	460b      	mov	r3, r1
 8026afe:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 8026b02:	e9c1 2300 	strd	r2, r3, [r1]
 8026b06:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 8026b0a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f6_2  = f0_2 * (int64_t) f6;
 8026b0e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8026b12:	4618      	mov	r0, r3
 8026b14:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026b18:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8026b1c:	461a      	mov	r2, r3
 8026b1e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026b22:	fb02 f501 	mul.w	r5, r2, r1
 8026b26:	fb00 f403 	mul.w	r4, r0, r3
 8026b2a:	442c      	add	r4, r5
 8026b2c:	fba0 2302 	umull	r2, r3, r0, r2
 8026b30:	18e1      	adds	r1, r4, r3
 8026b32:	460b      	mov	r3, r1
 8026b34:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8026b38:	e9c1 2300 	strd	r2, r3, [r1]
 8026b3c:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8026b40:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f7_2  = f0_2 * (int64_t) f7;
 8026b44:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8026b48:	4618      	mov	r0, r3
 8026b4a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026b4e:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8026b52:	461a      	mov	r2, r3
 8026b54:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026b58:	fb02 f501 	mul.w	r5, r2, r1
 8026b5c:	fb00 f403 	mul.w	r4, r0, r3
 8026b60:	442c      	add	r4, r5
 8026b62:	fba0 2302 	umull	r2, r3, r0, r2
 8026b66:	18e1      	adds	r1, r4, r3
 8026b68:	460b      	mov	r3, r1
 8026b6a:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8026b6e:	e9c1 2300 	strd	r2, r3, [r1]
 8026b72:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8026b76:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f8_2  = f0_2 * (int64_t) f8;
 8026b7a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8026b7e:	4618      	mov	r0, r3
 8026b80:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026b84:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8026b88:	461a      	mov	r2, r3
 8026b8a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026b8e:	fb02 f501 	mul.w	r5, r2, r1
 8026b92:	fb00 f403 	mul.w	r4, r0, r3
 8026b96:	442c      	add	r4, r5
 8026b98:	fba0 2302 	umull	r2, r3, r0, r2
 8026b9c:	18e1      	adds	r1, r4, r3
 8026b9e:	460b      	mov	r3, r1
 8026ba0:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8026ba4:	e9c1 2300 	strd	r2, r3, [r1]
 8026ba8:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8026bac:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f9_2  = f0_2 * (int64_t) f9;
 8026bb0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8026bb4:	4618      	mov	r0, r3
 8026bb6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026bba:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8026bbe:	461a      	mov	r2, r3
 8026bc0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026bc4:	fb02 f501 	mul.w	r5, r2, r1
 8026bc8:	fb00 f403 	mul.w	r4, r0, r3
 8026bcc:	442c      	add	r4, r5
 8026bce:	fba0 2302 	umull	r2, r3, r0, r2
 8026bd2:	18e1      	adds	r1, r4, r3
 8026bd4:	460b      	mov	r3, r1
 8026bd6:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8026bda:	e9c1 2300 	strd	r2, r3, [r1]
 8026bde:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8026be2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f1_2  = f1_2 * (int64_t) f1;
 8026be6:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8026bea:	4618      	mov	r0, r3
 8026bec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026bf0:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8026bf4:	461a      	mov	r2, r3
 8026bf6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026bfa:	fb02 f501 	mul.w	r5, r2, r1
 8026bfe:	fb00 f403 	mul.w	r4, r0, r3
 8026c02:	442c      	add	r4, r5
 8026c04:	fba0 2302 	umull	r2, r3, r0, r2
 8026c08:	18e1      	adds	r1, r4, r3
 8026c0a:	460b      	mov	r3, r1
 8026c0c:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 8026c10:	e9c1 2300 	strd	r2, r3, [r1]
 8026c14:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 8026c18:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f2_2  = f1_2 * (int64_t) f2;
 8026c1c:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8026c20:	4618      	mov	r0, r3
 8026c22:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026c26:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8026c2a:	461a      	mov	r2, r3
 8026c2c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026c30:	fb02 f501 	mul.w	r5, r2, r1
 8026c34:	fb00 f403 	mul.w	r4, r0, r3
 8026c38:	442c      	add	r4, r5
 8026c3a:	fba0 2302 	umull	r2, r3, r0, r2
 8026c3e:	18e1      	adds	r1, r4, r3
 8026c40:	460b      	mov	r3, r1
 8026c42:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8026c46:	e9c1 2300 	strd	r2, r3, [r1]
 8026c4a:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8026c4e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f3_4  = f1_2 * (int64_t) f3_2;
 8026c52:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8026c56:	4618      	mov	r0, r3
 8026c58:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026c5c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8026c60:	461a      	mov	r2, r3
 8026c62:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026c66:	fb02 f501 	mul.w	r5, r2, r1
 8026c6a:	fb00 f403 	mul.w	r4, r0, r3
 8026c6e:	442c      	add	r4, r5
 8026c70:	fba0 2302 	umull	r2, r3, r0, r2
 8026c74:	18e1      	adds	r1, r4, r3
 8026c76:	460b      	mov	r3, r1
 8026c78:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8026c7c:	e9c1 2300 	strd	r2, r3, [r1]
 8026c80:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8026c84:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f4_2  = f1_2 * (int64_t) f4;
 8026c88:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8026c8c:	4618      	mov	r0, r3
 8026c8e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026c92:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8026c96:	461a      	mov	r2, r3
 8026c98:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026c9c:	fb02 f501 	mul.w	r5, r2, r1
 8026ca0:	fb00 f403 	mul.w	r4, r0, r3
 8026ca4:	442c      	add	r4, r5
 8026ca6:	fba0 2302 	umull	r2, r3, r0, r2
 8026caa:	18e1      	adds	r1, r4, r3
 8026cac:	460b      	mov	r3, r1
 8026cae:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8026cb2:	e9c1 2300 	strd	r2, r3, [r1]
 8026cb6:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8026cba:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f5_4  = f1_2 * (int64_t) f5_2;
 8026cbe:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8026cc2:	4618      	mov	r0, r3
 8026cc4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026cc8:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8026ccc:	461a      	mov	r2, r3
 8026cce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026cd2:	fb02 f501 	mul.w	r5, r2, r1
 8026cd6:	fb00 f403 	mul.w	r4, r0, r3
 8026cda:	442c      	add	r4, r5
 8026cdc:	fba0 2302 	umull	r2, r3, r0, r2
 8026ce0:	18e1      	adds	r1, r4, r3
 8026ce2:	460b      	mov	r3, r1
 8026ce4:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8026ce8:	e9c1 2300 	strd	r2, r3, [r1]
 8026cec:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8026cf0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f6_2  = f1_2 * (int64_t) f6;
 8026cf4:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8026cf8:	4618      	mov	r0, r3
 8026cfa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026cfe:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8026d02:	461a      	mov	r2, r3
 8026d04:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026d08:	fb02 f501 	mul.w	r5, r2, r1
 8026d0c:	fb00 f403 	mul.w	r4, r0, r3
 8026d10:	442c      	add	r4, r5
 8026d12:	fba0 2302 	umull	r2, r3, r0, r2
 8026d16:	18e1      	adds	r1, r4, r3
 8026d18:	460b      	mov	r3, r1
 8026d1a:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8026d1e:	e9c1 2300 	strd	r2, r3, [r1]
 8026d22:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8026d26:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f7_4  = f1_2 * (int64_t) f7_2;
 8026d2a:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8026d2e:	4618      	mov	r0, r3
 8026d30:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026d34:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8026d38:	461a      	mov	r2, r3
 8026d3a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026d3e:	fb02 f501 	mul.w	r5, r2, r1
 8026d42:	fb00 f403 	mul.w	r4, r0, r3
 8026d46:	442c      	add	r4, r5
 8026d48:	fba0 2302 	umull	r2, r3, r0, r2
 8026d4c:	18e1      	adds	r1, r4, r3
 8026d4e:	460b      	mov	r3, r1
 8026d50:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8026d54:	e9c1 2300 	strd	r2, r3, [r1]
 8026d58:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8026d5c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f8_2  = f1_2 * (int64_t) f8;
 8026d60:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8026d64:	4618      	mov	r0, r3
 8026d66:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026d6a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8026d6e:	461a      	mov	r2, r3
 8026d70:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026d74:	fb02 f501 	mul.w	r5, r2, r1
 8026d78:	fb00 f403 	mul.w	r4, r0, r3
 8026d7c:	442c      	add	r4, r5
 8026d7e:	fba0 2302 	umull	r2, r3, r0, r2
 8026d82:	18e1      	adds	r1, r4, r3
 8026d84:	460b      	mov	r3, r1
 8026d86:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8026d8a:	e9c1 2300 	strd	r2, r3, [r1]
 8026d8e:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8026d92:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f9_76 = f1_2 * (int64_t) f9_38;
 8026d96:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8026d9a:	4618      	mov	r0, r3
 8026d9c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026da0:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8026da4:	461a      	mov	r2, r3
 8026da6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026daa:	fb02 f501 	mul.w	r5, r2, r1
 8026dae:	fb00 f403 	mul.w	r4, r0, r3
 8026db2:	442c      	add	r4, r5
 8026db4:	fba0 2302 	umull	r2, r3, r0, r2
 8026db8:	18e1      	adds	r1, r4, r3
 8026dba:	460b      	mov	r3, r1
 8026dbc:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8026dc0:	e9c1 2300 	strd	r2, r3, [r1]
 8026dc4:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8026dc8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f2    = f2   * (int64_t) f2;
 8026dcc:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8026dd0:	4618      	mov	r0, r3
 8026dd2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026dd6:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8026dda:	461a      	mov	r2, r3
 8026ddc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026de0:	fb02 f501 	mul.w	r5, r2, r1
 8026de4:	fb00 f403 	mul.w	r4, r0, r3
 8026de8:	442c      	add	r4, r5
 8026dea:	fba0 2302 	umull	r2, r3, r0, r2
 8026dee:	18e1      	adds	r1, r4, r3
 8026df0:	460b      	mov	r3, r1
 8026df2:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8026df6:	e9c1 2300 	strd	r2, r3, [r1]
 8026dfa:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8026dfe:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f3_2  = f2_2 * (int64_t) f3;
 8026e02:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8026e06:	4618      	mov	r0, r3
 8026e08:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026e0c:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8026e10:	461a      	mov	r2, r3
 8026e12:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026e16:	fb02 f501 	mul.w	r5, r2, r1
 8026e1a:	fb00 f403 	mul.w	r4, r0, r3
 8026e1e:	442c      	add	r4, r5
 8026e20:	fba0 2302 	umull	r2, r3, r0, r2
 8026e24:	18e1      	adds	r1, r4, r3
 8026e26:	460b      	mov	r3, r1
 8026e28:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8026e2c:	e9c1 2300 	strd	r2, r3, [r1]
 8026e30:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8026e34:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f4_2  = f2_2 * (int64_t) f4;
 8026e38:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8026e3c:	4618      	mov	r0, r3
 8026e3e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026e42:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8026e46:	461a      	mov	r2, r3
 8026e48:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026e4c:	fb02 f501 	mul.w	r5, r2, r1
 8026e50:	fb00 f403 	mul.w	r4, r0, r3
 8026e54:	442c      	add	r4, r5
 8026e56:	fba0 2302 	umull	r2, r3, r0, r2
 8026e5a:	18e1      	adds	r1, r4, r3
 8026e5c:	460b      	mov	r3, r1
 8026e5e:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8026e62:	e9c1 2300 	strd	r2, r3, [r1]
 8026e66:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8026e6a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f5_2  = f2_2 * (int64_t) f5;
 8026e6e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8026e72:	4618      	mov	r0, r3
 8026e74:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026e78:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8026e7c:	461a      	mov	r2, r3
 8026e7e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026e82:	fb02 f501 	mul.w	r5, r2, r1
 8026e86:	fb00 f403 	mul.w	r4, r0, r3
 8026e8a:	442c      	add	r4, r5
 8026e8c:	fba0 2302 	umull	r2, r3, r0, r2
 8026e90:	18e1      	adds	r1, r4, r3
 8026e92:	460b      	mov	r3, r1
 8026e94:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8026e98:	e9c1 2300 	strd	r2, r3, [r1]
 8026e9c:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8026ea0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f6_2  = f2_2 * (int64_t) f6;
 8026ea4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8026ea8:	4618      	mov	r0, r3
 8026eaa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026eae:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8026eb2:	461a      	mov	r2, r3
 8026eb4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026eb8:	fb02 f501 	mul.w	r5, r2, r1
 8026ebc:	fb00 f403 	mul.w	r4, r0, r3
 8026ec0:	442c      	add	r4, r5
 8026ec2:	fba0 2302 	umull	r2, r3, r0, r2
 8026ec6:	18e1      	adds	r1, r4, r3
 8026ec8:	460b      	mov	r3, r1
 8026eca:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8026ece:	e9c1 2300 	strd	r2, r3, [r1]
 8026ed2:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8026ed6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f7_2  = f2_2 * (int64_t) f7;
 8026eda:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8026ede:	4618      	mov	r0, r3
 8026ee0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026ee4:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8026ee8:	461a      	mov	r2, r3
 8026eea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026eee:	fb02 f501 	mul.w	r5, r2, r1
 8026ef2:	fb00 f403 	mul.w	r4, r0, r3
 8026ef6:	442c      	add	r4, r5
 8026ef8:	fba0 2302 	umull	r2, r3, r0, r2
 8026efc:	18e1      	adds	r1, r4, r3
 8026efe:	460b      	mov	r3, r1
 8026f00:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8026f04:	e9c1 2300 	strd	r2, r3, [r1]
 8026f08:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8026f0c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f8_38 = f2_2 * (int64_t) f8_19;
 8026f10:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8026f14:	4618      	mov	r0, r3
 8026f16:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026f1a:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8026f1e:	461a      	mov	r2, r3
 8026f20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026f24:	fb02 f501 	mul.w	r5, r2, r1
 8026f28:	fb00 f403 	mul.w	r4, r0, r3
 8026f2c:	442c      	add	r4, r5
 8026f2e:	fba0 2302 	umull	r2, r3, r0, r2
 8026f32:	18e1      	adds	r1, r4, r3
 8026f34:	460b      	mov	r3, r1
 8026f36:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8026f3a:	e9c1 2300 	strd	r2, r3, [r1]
 8026f3e:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8026f42:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f9_38 = f2   * (int64_t) f9_38;
 8026f46:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8026f4a:	4618      	mov	r0, r3
 8026f4c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026f50:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8026f54:	461a      	mov	r2, r3
 8026f56:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026f5a:	fb02 f501 	mul.w	r5, r2, r1
 8026f5e:	fb00 f403 	mul.w	r4, r0, r3
 8026f62:	442c      	add	r4, r5
 8026f64:	fba0 2302 	umull	r2, r3, r0, r2
 8026f68:	18e1      	adds	r1, r4, r3
 8026f6a:	460b      	mov	r3, r1
 8026f6c:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8026f70:	e9c1 2300 	strd	r2, r3, [r1]
 8026f74:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8026f78:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f3_2  = f3_2 * (int64_t) f3;
 8026f7c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8026f80:	4618      	mov	r0, r3
 8026f82:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026f86:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8026f8a:	461a      	mov	r2, r3
 8026f8c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026f90:	fb02 f501 	mul.w	r5, r2, r1
 8026f94:	fb00 f403 	mul.w	r4, r0, r3
 8026f98:	442c      	add	r4, r5
 8026f9a:	fba0 2302 	umull	r2, r3, r0, r2
 8026f9e:	18e1      	adds	r1, r4, r3
 8026fa0:	460b      	mov	r3, r1
 8026fa2:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8026fa6:	e9c1 2300 	strd	r2, r3, [r1]
 8026faa:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8026fae:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f4_2  = f3_2 * (int64_t) f4;
 8026fb2:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8026fb6:	4618      	mov	r0, r3
 8026fb8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026fbc:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8026fc0:	461a      	mov	r2, r3
 8026fc2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026fc6:	fb02 f501 	mul.w	r5, r2, r1
 8026fca:	fb00 f403 	mul.w	r4, r0, r3
 8026fce:	442c      	add	r4, r5
 8026fd0:	fba0 2302 	umull	r2, r3, r0, r2
 8026fd4:	18e1      	adds	r1, r4, r3
 8026fd6:	460b      	mov	r3, r1
 8026fd8:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8026fdc:	e9c1 2300 	strd	r2, r3, [r1]
 8026fe0:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8026fe4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f5_4  = f3_2 * (int64_t) f5_2;
 8026fe8:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8026fec:	4618      	mov	r0, r3
 8026fee:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026ff2:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8026ff6:	461a      	mov	r2, r3
 8026ff8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026ffc:	fb02 f501 	mul.w	r5, r2, r1
 8027000:	fb00 f403 	mul.w	r4, r0, r3
 8027004:	442c      	add	r4, r5
 8027006:	fba0 2302 	umull	r2, r3, r0, r2
 802700a:	18e1      	adds	r1, r4, r3
 802700c:	460b      	mov	r3, r1
 802700e:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
 8027012:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
    int64_t f3f6_2  = f3_2 * (int64_t) f6;
 8027016:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 802701a:	4618      	mov	r0, r3
 802701c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027020:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8027024:	461a      	mov	r2, r3
 8027026:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802702a:	fb02 f501 	mul.w	r5, r2, r1
 802702e:	fb00 f403 	mul.w	r4, r0, r3
 8027032:	442c      	add	r4, r5
 8027034:	fba0 2302 	umull	r2, r3, r0, r2
 8027038:	18e1      	adds	r1, r4, r3
 802703a:	460b      	mov	r3, r1
 802703c:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
 8027040:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
    int64_t f3f7_76 = f3_2 * (int64_t) f7_38;
 8027044:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8027048:	4618      	mov	r0, r3
 802704a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802704e:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8027052:	461a      	mov	r2, r3
 8027054:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027058:	fb02 f501 	mul.w	r5, r2, r1
 802705c:	fb00 f403 	mul.w	r4, r0, r3
 8027060:	442c      	add	r4, r5
 8027062:	fba0 2302 	umull	r2, r3, r0, r2
 8027066:	18e1      	adds	r1, r4, r3
 8027068:	460b      	mov	r3, r1
 802706a:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
 802706e:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
    int64_t f3f8_38 = f3_2 * (int64_t) f8_19;
 8027072:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8027076:	4618      	mov	r0, r3
 8027078:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802707c:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8027080:	461a      	mov	r2, r3
 8027082:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027086:	fb02 f501 	mul.w	r5, r2, r1
 802708a:	fb00 f403 	mul.w	r4, r0, r3
 802708e:	442c      	add	r4, r5
 8027090:	fba0 2302 	umull	r2, r3, r0, r2
 8027094:	18e1      	adds	r1, r4, r3
 8027096:	460b      	mov	r3, r1
 8027098:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
 802709c:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
    int64_t f3f9_76 = f3_2 * (int64_t) f9_38;
 80270a0:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80270a4:	4618      	mov	r0, r3
 80270a6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80270aa:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80270ae:	461a      	mov	r2, r3
 80270b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80270b4:	fb02 f501 	mul.w	r5, r2, r1
 80270b8:	fb00 f403 	mul.w	r4, r0, r3
 80270bc:	442c      	add	r4, r5
 80270be:	fba0 2302 	umull	r2, r3, r0, r2
 80270c2:	18e1      	adds	r1, r4, r3
 80270c4:	460b      	mov	r3, r1
 80270c6:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
 80270ca:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
    int64_t f4f4    = f4   * (int64_t) f4;
 80270ce:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80270d2:	4618      	mov	r0, r3
 80270d4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80270d8:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80270dc:	461a      	mov	r2, r3
 80270de:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80270e2:	fb02 f501 	mul.w	r5, r2, r1
 80270e6:	fb00 f403 	mul.w	r4, r0, r3
 80270ea:	442c      	add	r4, r5
 80270ec:	fba0 2302 	umull	r2, r3, r0, r2
 80270f0:	18e1      	adds	r1, r4, r3
 80270f2:	460b      	mov	r3, r1
 80270f4:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
 80270f8:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
    int64_t f4f5_2  = f4_2 * (int64_t) f5;
 80270fc:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 8027100:	4618      	mov	r0, r3
 8027102:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027106:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 802710a:	461a      	mov	r2, r3
 802710c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027110:	fb02 f501 	mul.w	r5, r2, r1
 8027114:	fb00 f403 	mul.w	r4, r0, r3
 8027118:	442c      	add	r4, r5
 802711a:	fba0 2302 	umull	r2, r3, r0, r2
 802711e:	18e1      	adds	r1, r4, r3
 8027120:	460b      	mov	r3, r1
 8027122:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
 8027126:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
    int64_t f4f6_38 = f4_2 * (int64_t) f6_19;
 802712a:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 802712e:	4618      	mov	r0, r3
 8027130:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027134:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8027138:	461a      	mov	r2, r3
 802713a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802713e:	fb02 f501 	mul.w	r5, r2, r1
 8027142:	fb00 f403 	mul.w	r4, r0, r3
 8027146:	442c      	add	r4, r5
 8027148:	fba0 2302 	umull	r2, r3, r0, r2
 802714c:	18e1      	adds	r1, r4, r3
 802714e:	460b      	mov	r3, r1
 8027150:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
 8027154:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
    int64_t f4f7_38 = f4   * (int64_t) f7_38;
 8027158:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 802715c:	4618      	mov	r0, r3
 802715e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027162:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8027166:	461a      	mov	r2, r3
 8027168:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802716c:	fb02 f501 	mul.w	r5, r2, r1
 8027170:	fb00 f403 	mul.w	r4, r0, r3
 8027174:	442c      	add	r4, r5
 8027176:	fba0 2302 	umull	r2, r3, r0, r2
 802717a:	18e1      	adds	r1, r4, r3
 802717c:	460b      	mov	r3, r1
 802717e:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
 8027182:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
    int64_t f4f8_38 = f4_2 * (int64_t) f8_19;
 8027186:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 802718a:	4618      	mov	r0, r3
 802718c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027190:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8027194:	461a      	mov	r2, r3
 8027196:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802719a:	fb02 f501 	mul.w	r5, r2, r1
 802719e:	fb00 f403 	mul.w	r4, r0, r3
 80271a2:	442c      	add	r4, r5
 80271a4:	fba0 2302 	umull	r2, r3, r0, r2
 80271a8:	18e1      	adds	r1, r4, r3
 80271aa:	460b      	mov	r3, r1
 80271ac:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
 80271b0:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
    int64_t f4f9_38 = f4   * (int64_t) f9_38;
 80271b4:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80271b8:	4618      	mov	r0, r3
 80271ba:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80271be:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80271c2:	461a      	mov	r2, r3
 80271c4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80271c8:	fb02 f501 	mul.w	r5, r2, r1
 80271cc:	fb00 f403 	mul.w	r4, r0, r3
 80271d0:	442c      	add	r4, r5
 80271d2:	fba0 2302 	umull	r2, r3, r0, r2
 80271d6:	18e1      	adds	r1, r4, r3
 80271d8:	460b      	mov	r3, r1
 80271da:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
 80271de:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
    int64_t f5f5_38 = f5   * (int64_t) f5_38;
 80271e2:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80271e6:	4618      	mov	r0, r3
 80271e8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80271ec:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 80271f0:	461a      	mov	r2, r3
 80271f2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80271f6:	fb02 f501 	mul.w	r5, r2, r1
 80271fa:	fb00 f403 	mul.w	r4, r0, r3
 80271fe:	442c      	add	r4, r5
 8027200:	fba0 2302 	umull	r2, r3, r0, r2
 8027204:	18e1      	adds	r1, r4, r3
 8027206:	460b      	mov	r3, r1
 8027208:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
 802720c:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
    int64_t f5f6_38 = f5_2 * (int64_t) f6_19;
 8027210:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8027214:	4618      	mov	r0, r3
 8027216:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802721a:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 802721e:	461a      	mov	r2, r3
 8027220:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027224:	fb02 f501 	mul.w	r5, r2, r1
 8027228:	fb00 f403 	mul.w	r4, r0, r3
 802722c:	442c      	add	r4, r5
 802722e:	fba0 2302 	umull	r2, r3, r0, r2
 8027232:	18e1      	adds	r1, r4, r3
 8027234:	460b      	mov	r3, r1
 8027236:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
 802723a:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
    int64_t f5f7_76 = f5_2 * (int64_t) f7_38;
 802723e:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8027242:	4618      	mov	r0, r3
 8027244:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027248:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 802724c:	461a      	mov	r2, r3
 802724e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027252:	fb02 f501 	mul.w	r5, r2, r1
 8027256:	fb00 f403 	mul.w	r4, r0, r3
 802725a:	442c      	add	r4, r5
 802725c:	fba0 2302 	umull	r2, r3, r0, r2
 8027260:	18e1      	adds	r1, r4, r3
 8027262:	460b      	mov	r3, r1
 8027264:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
 8027268:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
    int64_t f5f8_38 = f5_2 * (int64_t) f8_19;
 802726c:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8027270:	4618      	mov	r0, r3
 8027272:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027276:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 802727a:	461a      	mov	r2, r3
 802727c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027280:	fb02 f501 	mul.w	r5, r2, r1
 8027284:	fb00 f403 	mul.w	r4, r0, r3
 8027288:	442c      	add	r4, r5
 802728a:	fba0 2302 	umull	r2, r3, r0, r2
 802728e:	18e1      	adds	r1, r4, r3
 8027290:	460b      	mov	r3, r1
 8027292:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
 8027296:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
    int64_t f5f9_76 = f5_2 * (int64_t) f9_38;
 802729a:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 802729e:	4618      	mov	r0, r3
 80272a0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80272a4:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80272a8:	461a      	mov	r2, r3
 80272aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80272ae:	fb02 f501 	mul.w	r5, r2, r1
 80272b2:	fb00 f403 	mul.w	r4, r0, r3
 80272b6:	442c      	add	r4, r5
 80272b8:	fba0 2302 	umull	r2, r3, r0, r2
 80272bc:	18e1      	adds	r1, r4, r3
 80272be:	460b      	mov	r3, r1
 80272c0:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
 80272c4:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
    int64_t f6f6_19 = f6   * (int64_t) f6_19;
 80272c8:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80272cc:	4618      	mov	r0, r3
 80272ce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80272d2:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 80272d6:	461a      	mov	r2, r3
 80272d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80272dc:	fb02 f501 	mul.w	r5, r2, r1
 80272e0:	fb00 f403 	mul.w	r4, r0, r3
 80272e4:	442c      	add	r4, r5
 80272e6:	fba0 2302 	umull	r2, r3, r0, r2
 80272ea:	18e1      	adds	r1, r4, r3
 80272ec:	460b      	mov	r3, r1
 80272ee:	e9c7 23de 	strd	r2, r3, [r7, #888]	; 0x378
 80272f2:	e9c7 23de 	strd	r2, r3, [r7, #888]	; 0x378
    int64_t f6f7_38 = f6   * (int64_t) f7_38;
 80272f6:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80272fa:	4618      	mov	r0, r3
 80272fc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027300:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8027304:	461a      	mov	r2, r3
 8027306:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802730a:	fb02 f501 	mul.w	r5, r2, r1
 802730e:	fb00 f403 	mul.w	r4, r0, r3
 8027312:	442c      	add	r4, r5
 8027314:	fba0 2302 	umull	r2, r3, r0, r2
 8027318:	18e1      	adds	r1, r4, r3
 802731a:	460b      	mov	r3, r1
 802731c:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
 8027320:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
    int64_t f6f8_38 = f6_2 * (int64_t) f8_19;
 8027324:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8027328:	4618      	mov	r0, r3
 802732a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802732e:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8027332:	461a      	mov	r2, r3
 8027334:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027338:	fb02 f501 	mul.w	r5, r2, r1
 802733c:	fb00 f403 	mul.w	r4, r0, r3
 8027340:	442c      	add	r4, r5
 8027342:	fba0 2302 	umull	r2, r3, r0, r2
 8027346:	18e1      	adds	r1, r4, r3
 8027348:	460b      	mov	r3, r1
 802734a:	e9c7 23da 	strd	r2, r3, [r7, #872]	; 0x368
 802734e:	e9c7 23da 	strd	r2, r3, [r7, #872]	; 0x368
    int64_t f6f9_38 = f6   * (int64_t) f9_38;
 8027352:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8027356:	4618      	mov	r0, r3
 8027358:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802735c:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8027360:	461a      	mov	r2, r3
 8027362:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027366:	fb02 f501 	mul.w	r5, r2, r1
 802736a:	fb00 f403 	mul.w	r4, r0, r3
 802736e:	442c      	add	r4, r5
 8027370:	fba0 2302 	umull	r2, r3, r0, r2
 8027374:	18e1      	adds	r1, r4, r3
 8027376:	460b      	mov	r3, r1
 8027378:	e9c7 23d8 	strd	r2, r3, [r7, #864]	; 0x360
 802737c:	e9c7 23d8 	strd	r2, r3, [r7, #864]	; 0x360
    int64_t f7f7_38 = f7   * (int64_t) f7_38;
 8027380:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8027384:	4618      	mov	r0, r3
 8027386:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802738a:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 802738e:	461a      	mov	r2, r3
 8027390:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027394:	fb02 f501 	mul.w	r5, r2, r1
 8027398:	fb00 f403 	mul.w	r4, r0, r3
 802739c:	442c      	add	r4, r5
 802739e:	fba0 2302 	umull	r2, r3, r0, r2
 80273a2:	18e1      	adds	r1, r4, r3
 80273a4:	460b      	mov	r3, r1
 80273a6:	e9c7 23d6 	strd	r2, r3, [r7, #856]	; 0x358
 80273aa:	e9c7 23d6 	strd	r2, r3, [r7, #856]	; 0x358
    int64_t f7f8_38 = f7_2 * (int64_t) f8_19;
 80273ae:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80273b2:	4618      	mov	r0, r3
 80273b4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80273b8:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 80273bc:	461a      	mov	r2, r3
 80273be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80273c2:	fb02 f501 	mul.w	r5, r2, r1
 80273c6:	fb00 f403 	mul.w	r4, r0, r3
 80273ca:	442c      	add	r4, r5
 80273cc:	fba0 2302 	umull	r2, r3, r0, r2
 80273d0:	18e1      	adds	r1, r4, r3
 80273d2:	460b      	mov	r3, r1
 80273d4:	e9c7 23d4 	strd	r2, r3, [r7, #848]	; 0x350
 80273d8:	e9c7 23d4 	strd	r2, r3, [r7, #848]	; 0x350
    int64_t f7f9_76 = f7_2 * (int64_t) f9_38;
 80273dc:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80273e0:	4618      	mov	r0, r3
 80273e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80273e6:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80273ea:	461a      	mov	r2, r3
 80273ec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80273f0:	fb02 f501 	mul.w	r5, r2, r1
 80273f4:	fb00 f403 	mul.w	r4, r0, r3
 80273f8:	442c      	add	r4, r5
 80273fa:	fba0 2302 	umull	r2, r3, r0, r2
 80273fe:	18e1      	adds	r1, r4, r3
 8027400:	460b      	mov	r3, r1
 8027402:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
 8027406:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
    int64_t f8f8_19 = f8   * (int64_t) f8_19;
 802740a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 802740e:	4618      	mov	r0, r3
 8027410:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027414:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8027418:	461a      	mov	r2, r3
 802741a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802741e:	fb02 f501 	mul.w	r5, r2, r1
 8027422:	fb00 f403 	mul.w	r4, r0, r3
 8027426:	442c      	add	r4, r5
 8027428:	fba0 2302 	umull	r2, r3, r0, r2
 802742c:	18e1      	adds	r1, r4, r3
 802742e:	460b      	mov	r3, r1
 8027430:	e9c7 23d0 	strd	r2, r3, [r7, #832]	; 0x340
 8027434:	e9c7 23d0 	strd	r2, r3, [r7, #832]	; 0x340
    int64_t f8f9_38 = f8   * (int64_t) f9_38;
 8027438:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 802743c:	4618      	mov	r0, r3
 802743e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027442:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8027446:	461a      	mov	r2, r3
 8027448:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802744c:	fb02 f501 	mul.w	r5, r2, r1
 8027450:	fb00 f403 	mul.w	r4, r0, r3
 8027454:	442c      	add	r4, r5
 8027456:	fba0 2302 	umull	r2, r3, r0, r2
 802745a:	18e1      	adds	r1, r4, r3
 802745c:	460b      	mov	r3, r1
 802745e:	e9c7 23ce 	strd	r2, r3, [r7, #824]	; 0x338
 8027462:	e9c7 23ce 	strd	r2, r3, [r7, #824]	; 0x338
    int64_t f9f9_38 = f9   * (int64_t) f9_38;
 8027466:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 802746a:	4618      	mov	r0, r3
 802746c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027470:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8027474:	461a      	mov	r2, r3
 8027476:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802747a:	fb02 f501 	mul.w	r5, r2, r1
 802747e:	fb00 f403 	mul.w	r4, r0, r3
 8027482:	442c      	add	r4, r5
 8027484:	fba0 2302 	umull	r2, r3, r0, r2
 8027488:	18e1      	adds	r1, r4, r3
 802748a:	460b      	mov	r3, r1
 802748c:	e9c7 23cc 	strd	r2, r3, [r7, #816]	; 0x330
 8027490:	e9c7 23cc 	strd	r2, r3, [r7, #816]	; 0x330
    int64_t h0 = f0f0  + f1f9_76 + f2f8_38 + f3f7_76 + f4f6_38 + f5f5_38;
 8027494:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8027498:	e9d3 0100 	ldrd	r0, r1, [r3]
 802749c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80274a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274a4:	1884      	adds	r4, r0, r2
 80274a6:	f8c7 4280 	str.w	r4, [r7, #640]	; 0x280
 80274aa:	eb41 0303 	adc.w	r3, r1, r3
 80274ae:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80274b2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80274b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80274ba:	e9d7 45a0 	ldrd	r4, r5, [r7, #640]	; 0x280
 80274be:	4621      	mov	r1, r4
 80274c0:	1889      	adds	r1, r1, r2
 80274c2:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 80274c6:	4629      	mov	r1, r5
 80274c8:	eb43 0101 	adc.w	r1, r3, r1
 80274cc:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 80274d0:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 80274d4:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	; 0x278
 80274d8:	4621      	mov	r1, r4
 80274da:	1889      	adds	r1, r1, r2
 80274dc:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 80274e0:	4629      	mov	r1, r5
 80274e2:	eb43 0101 	adc.w	r1, r3, r1
 80274e6:	f8c7 1274 	str.w	r1, [r7, #628]	; 0x274
 80274ea:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 80274ee:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 80274f2:	4621      	mov	r1, r4
 80274f4:	1889      	adds	r1, r1, r2
 80274f6:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 80274fa:	4629      	mov	r1, r5
 80274fc:	eb43 0101 	adc.w	r1, r3, r1
 8027500:	f8c7 126c 	str.w	r1, [r7, #620]	; 0x26c
 8027504:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 8027508:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 802750c:	4621      	mov	r1, r4
 802750e:	1851      	adds	r1, r2, r1
 8027510:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8027514:	4629      	mov	r1, r5
 8027516:	eb43 0101 	adc.w	r1, r3, r1
 802751a:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 802751e:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8027522:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    int64_t h1 = f0f1_2 + f2f9_38 + f3f8_38 + f4f7_38 + f5f6_38;
 8027526:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 802752a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802752e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8027532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027536:	1884      	adds	r4, r0, r2
 8027538:	f8c7 4260 	str.w	r4, [r7, #608]	; 0x260
 802753c:	eb41 0303 	adc.w	r3, r1, r3
 8027540:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8027544:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 8027548:	e9d7 4598 	ldrd	r4, r5, [r7, #608]	; 0x260
 802754c:	4621      	mov	r1, r4
 802754e:	1889      	adds	r1, r1, r2
 8027550:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 8027554:	4629      	mov	r1, r5
 8027556:	eb43 0101 	adc.w	r1, r3, r1
 802755a:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 802755e:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8027562:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 8027566:	4621      	mov	r1, r4
 8027568:	1889      	adds	r1, r1, r2
 802756a:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 802756e:	4629      	mov	r1, r5
 8027570:	eb43 0101 	adc.w	r1, r3, r1
 8027574:	f8c7 1254 	str.w	r1, [r7, #596]	; 0x254
 8027578:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 802757c:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	; 0x250
 8027580:	4621      	mov	r1, r4
 8027582:	1851      	adds	r1, r2, r1
 8027584:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8027588:	4629      	mov	r1, r5
 802758a:	eb43 0101 	adc.w	r1, r3, r1
 802758e:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8027592:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8027596:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    int64_t h2 = f0f2_2 + f1f1_2 + f3f9_76 + f4f8_38 + f5f7_76 + f6f6_19;
 802759a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 802759e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80275a2:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80275a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80275aa:	1884      	adds	r4, r0, r2
 80275ac:	f8c7 4248 	str.w	r4, [r7, #584]	; 0x248
 80275b0:	eb41 0303 	adc.w	r3, r1, r3
 80275b4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80275b8:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 80275bc:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 80275c0:	4621      	mov	r1, r4
 80275c2:	1889      	adds	r1, r1, r2
 80275c4:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 80275c8:	4629      	mov	r1, r5
 80275ca:	eb43 0101 	adc.w	r1, r3, r1
 80275ce:	f8c7 1244 	str.w	r1, [r7, #580]	; 0x244
 80275d2:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 80275d6:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 80275da:	4621      	mov	r1, r4
 80275dc:	1889      	adds	r1, r1, r2
 80275de:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 80275e2:	4629      	mov	r1, r5
 80275e4:	eb43 0101 	adc.w	r1, r3, r1
 80275e8:	f8c7 123c 	str.w	r1, [r7, #572]	; 0x23c
 80275ec:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 80275f0:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 80275f4:	4621      	mov	r1, r4
 80275f6:	1889      	adds	r1, r1, r2
 80275f8:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 80275fc:	4629      	mov	r1, r5
 80275fe:	eb43 0101 	adc.w	r1, r3, r1
 8027602:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 8027606:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 802760a:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	; 0x230
 802760e:	4621      	mov	r1, r4
 8027610:	1851      	adds	r1, r2, r1
 8027612:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8027616:	4629      	mov	r1, r5
 8027618:	eb43 0101 	adc.w	r1, r3, r1
 802761c:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8027620:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8027624:	e9c7 34c6 	strd	r3, r4, [r7, #792]	; 0x318
    int64_t h3 = f0f3_2 + f1f2_2 + f4f9_38 + f5f8_38 + f6f7_38;
 8027628:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 802762c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027630:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8027634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027638:	1884      	adds	r4, r0, r2
 802763a:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 802763e:	eb41 0303 	adc.w	r3, r1, r3
 8027642:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8027646:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 802764a:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 802764e:	4621      	mov	r1, r4
 8027650:	1889      	adds	r1, r1, r2
 8027652:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8027656:	4629      	mov	r1, r5
 8027658:	eb43 0101 	adc.w	r1, r3, r1
 802765c:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 8027660:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8027664:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 8027668:	4621      	mov	r1, r4
 802766a:	1889      	adds	r1, r1, r2
 802766c:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8027670:	4629      	mov	r1, r5
 8027672:	eb43 0101 	adc.w	r1, r3, r1
 8027676:	f8c7 121c 	str.w	r1, [r7, #540]	; 0x21c
 802767a:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 802767e:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8027682:	4621      	mov	r1, r4
 8027684:	1851      	adds	r1, r2, r1
 8027686:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 802768a:	4629      	mov	r1, r5
 802768c:	eb43 0101 	adc.w	r1, r3, r1
 8027690:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8027694:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8027698:	e9c7 34c4 	strd	r3, r4, [r7, #784]	; 0x310
    int64_t h4 = f0f4_2 + f1f3_4 + f2f2   + f5f9_76 + f6f8_38 + f7f7_38;
 802769c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80276a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80276a4:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80276a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80276ac:	1884      	adds	r4, r0, r2
 80276ae:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 80276b2:	eb41 0303 	adc.w	r3, r1, r3
 80276b6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80276ba:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80276be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80276c2:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 80276c6:	4621      	mov	r1, r4
 80276c8:	1889      	adds	r1, r1, r2
 80276ca:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 80276ce:	4629      	mov	r1, r5
 80276d0:	eb43 0101 	adc.w	r1, r3, r1
 80276d4:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 80276d8:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 80276dc:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 80276e0:	4621      	mov	r1, r4
 80276e2:	1889      	adds	r1, r1, r2
 80276e4:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 80276e8:	4629      	mov	r1, r5
 80276ea:	eb43 0101 	adc.w	r1, r3, r1
 80276ee:	f8c7 1204 	str.w	r1, [r7, #516]	; 0x204
 80276f2:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 80276f6:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 80276fa:	4621      	mov	r1, r4
 80276fc:	1889      	adds	r1, r1, r2
 80276fe:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 8027702:	4629      	mov	r1, r5
 8027704:	eb43 0101 	adc.w	r1, r3, r1
 8027708:	f8c7 11fc 	str.w	r1, [r7, #508]	; 0x1fc
 802770c:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8027710:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	; 0x1f8
 8027714:	4621      	mov	r1, r4
 8027716:	1851      	adds	r1, r2, r1
 8027718:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 802771c:	4629      	mov	r1, r5
 802771e:	eb43 0101 	adc.w	r1, r3, r1
 8027722:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8027726:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 802772a:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    int64_t h5 = f0f5_2 + f1f4_2 + f2f3_2 + f6f9_38 + f7f8_38;
 802772e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8027732:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027736:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 802773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802773e:	1884      	adds	r4, r0, r2
 8027740:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8027744:	eb41 0303 	adc.w	r3, r1, r3
 8027748:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 802774c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8027750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027754:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8027758:	4621      	mov	r1, r4
 802775a:	1889      	adds	r1, r1, r2
 802775c:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8027760:	4629      	mov	r1, r5
 8027762:	eb43 0101 	adc.w	r1, r3, r1
 8027766:	f8c7 11ec 	str.w	r1, [r7, #492]	; 0x1ec
 802776a:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 802776e:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8027772:	4621      	mov	r1, r4
 8027774:	1889      	adds	r1, r1, r2
 8027776:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 802777a:	4629      	mov	r1, r5
 802777c:	eb43 0101 	adc.w	r1, r3, r1
 8027780:	f8c7 11e4 	str.w	r1, [r7, #484]	; 0x1e4
 8027784:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8027788:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 802778c:	4621      	mov	r1, r4
 802778e:	1851      	adds	r1, r2, r1
 8027790:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8027794:	4629      	mov	r1, r5
 8027796:	eb43 0101 	adc.w	r1, r3, r1
 802779a:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 802779e:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80277a2:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    int64_t h6 = f0f6_2 + f1f5_4 + f2f4_2 + f3f3_2 + f7f9_76 + f8f8_19;
 80277a6:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80277aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80277ae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80277b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80277b6:	1884      	adds	r4, r0, r2
 80277b8:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 80277bc:	eb41 0303 	adc.w	r3, r1, r3
 80277c0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80277c4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80277c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80277cc:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 80277d0:	4621      	mov	r1, r4
 80277d2:	1889      	adds	r1, r1, r2
 80277d4:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 80277d8:	4629      	mov	r1, r5
 80277da:	eb43 0101 	adc.w	r1, r3, r1
 80277de:	f8c7 11d4 	str.w	r1, [r7, #468]	; 0x1d4
 80277e2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80277e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80277ea:	e9d7 4574 	ldrd	r4, r5, [r7, #464]	; 0x1d0
 80277ee:	4621      	mov	r1, r4
 80277f0:	1889      	adds	r1, r1, r2
 80277f2:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 80277f6:	4629      	mov	r1, r5
 80277f8:	eb43 0101 	adc.w	r1, r3, r1
 80277fc:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 8027800:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8027804:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 8027808:	4621      	mov	r1, r4
 802780a:	1889      	adds	r1, r1, r2
 802780c:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 8027810:	4629      	mov	r1, r5
 8027812:	eb43 0101 	adc.w	r1, r3, r1
 8027816:	f8c7 11c4 	str.w	r1, [r7, #452]	; 0x1c4
 802781a:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 802781e:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 8027822:	4621      	mov	r1, r4
 8027824:	1851      	adds	r1, r2, r1
 8027826:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 802782a:	4629      	mov	r1, r5
 802782c:	eb43 0101 	adc.w	r1, r3, r1
 8027830:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8027834:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8027838:	e9c7 34be 	strd	r3, r4, [r7, #760]	; 0x2f8
    int64_t h7 = f0f7_2 + f1f6_2 + f2f5_2 + f3f4_2 + f8f9_38;
 802783c:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8027840:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027844:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8027848:	e9d3 2300 	ldrd	r2, r3, [r3]
 802784c:	1884      	adds	r4, r0, r2
 802784e:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 8027852:	eb41 0303 	adc.w	r3, r1, r3
 8027856:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 802785a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 802785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027862:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8027866:	4621      	mov	r1, r4
 8027868:	1889      	adds	r1, r1, r2
 802786a:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 802786e:	4629      	mov	r1, r5
 8027870:	eb43 0101 	adc.w	r1, r3, r1
 8027874:	f8c7 11b4 	str.w	r1, [r7, #436]	; 0x1b4
 8027878:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 802787c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027880:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 8027884:	4621      	mov	r1, r4
 8027886:	1889      	adds	r1, r1, r2
 8027888:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 802788c:	4629      	mov	r1, r5
 802788e:	eb43 0101 	adc.w	r1, r3, r1
 8027892:	f8c7 11ac 	str.w	r1, [r7, #428]	; 0x1ac
 8027896:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 802789a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 802789e:	4621      	mov	r1, r4
 80278a0:	1851      	adds	r1, r2, r1
 80278a2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80278a6:	4629      	mov	r1, r5
 80278a8:	eb43 0101 	adc.w	r1, r3, r1
 80278ac:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80278b0:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80278b4:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    int64_t h8 = f0f8_2 + f1f7_4 + f2f6_2 + f3f5_4 + f4f4   + f9f9_38;
 80278b8:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80278bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80278c0:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80278c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80278c8:	1884      	adds	r4, r0, r2
 80278ca:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 80278ce:	eb41 0303 	adc.w	r3, r1, r3
 80278d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80278d6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80278da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80278de:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 80278e2:	4621      	mov	r1, r4
 80278e4:	1889      	adds	r1, r1, r2
 80278e6:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 80278ea:	4629      	mov	r1, r5
 80278ec:	eb43 0101 	adc.w	r1, r3, r1
 80278f0:	f8c7 119c 	str.w	r1, [r7, #412]	; 0x19c
 80278f4:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 80278f8:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 80278fc:	4621      	mov	r1, r4
 80278fe:	1889      	adds	r1, r1, r2
 8027900:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8027904:	4629      	mov	r1, r5
 8027906:	eb43 0101 	adc.w	r1, r3, r1
 802790a:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 802790e:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8027912:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8027916:	4621      	mov	r1, r4
 8027918:	1889      	adds	r1, r1, r2
 802791a:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 802791e:	4629      	mov	r1, r5
 8027920:	eb43 0101 	adc.w	r1, r3, r1
 8027924:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
 8027928:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 802792c:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8027930:	4621      	mov	r1, r4
 8027932:	1851      	adds	r1, r2, r1
 8027934:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8027938:	4629      	mov	r1, r5
 802793a:	eb43 0101 	adc.w	r1, r3, r1
 802793e:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8027942:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8027946:	e9c7 34ba 	strd	r3, r4, [r7, #744]	; 0x2e8
    int64_t h9 = f0f9_2 + f1f8_2 + f2f7_2 + f3f6_2 + f4f5_2;
 802794a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 802794e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027952:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8027956:	e9d3 2300 	ldrd	r2, r3, [r3]
 802795a:	1884      	adds	r4, r0, r2
 802795c:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 8027960:	eb41 0303 	adc.w	r3, r1, r3
 8027964:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8027968:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 802796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027970:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 8027974:	4621      	mov	r1, r4
 8027976:	1889      	adds	r1, r1, r2
 8027978:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 802797c:	4629      	mov	r1, r5
 802797e:	eb43 0101 	adc.w	r1, r3, r1
 8027982:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 8027986:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 802798a:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 802798e:	4621      	mov	r1, r4
 8027990:	1889      	adds	r1, r1, r2
 8027992:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8027996:	4629      	mov	r1, r5
 8027998:	eb43 0101 	adc.w	r1, r3, r1
 802799c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 80279a0:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 80279a4:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 80279a8:	4621      	mov	r1, r4
 80279aa:	1851      	adds	r1, r2, r1
 80279ac:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80279b0:	4629      	mov	r1, r5
 80279b2:	eb43 0101 	adc.w	r1, r3, r1
 80279b6:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 80279ba:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80279be:	e9c7 34b8 	strd	r3, r4, [r7, #736]	; 0x2e0
    int64_t carry5;
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 80279c2:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 80279c6:	f112 7800 	adds.w	r8, r2, #33554432	; 0x2000000
 80279ca:	f143 0900 	adc.w	r9, r3, #0
 80279ce:	f04f 0200 	mov.w	r2, #0
 80279d2:	f04f 0300 	mov.w	r3, #0
 80279d6:	ea4f 6298 	mov.w	r2, r8, lsr #26
 80279da:	ea42 1289 	orr.w	r2, r2, r9, lsl #6
 80279de:	ea4f 63a9 	mov.w	r3, r9, asr #26
 80279e2:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8
    h1 += carry0;
 80279e6:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 80279ea:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 80279ee:	1884      	adds	r4, r0, r2
 80279f0:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80279f4:	eb41 0303 	adc.w	r3, r1, r3
 80279f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80279fc:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8027a00:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    h0 -= carry0 << 26;
 8027a04:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8027a08:	f04f 0000 	mov.w	r0, #0
 8027a0c:	f04f 0100 	mov.w	r1, #0
 8027a10:	0699      	lsls	r1, r3, #26
 8027a12:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8027a16:	0690      	lsls	r0, r2, #26
 8027a18:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8027a1c:	1a14      	subs	r4, r2, r0
 8027a1e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8027a22:	eb63 0301 	sbc.w	r3, r3, r1
 8027a26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8027a2a:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8027a2e:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8027a32:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8027a36:	f112 7a00 	adds.w	sl, r2, #33554432	; 0x2000000
 8027a3a:	f143 0b00 	adc.w	fp, r3, #0
 8027a3e:	f04f 0200 	mov.w	r2, #0
 8027a42:	f04f 0300 	mov.w	r3, #0
 8027a46:	ea4f 629a 	mov.w	r2, sl, lsr #26
 8027a4a:	ea42 128b 	orr.w	r2, r2, fp, lsl #6
 8027a4e:	ea4f 63ab 	mov.w	r3, fp, asr #26
 8027a52:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
    h5 += carry4;
 8027a56:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 8027a5a:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8027a5e:	1884      	adds	r4, r0, r2
 8027a60:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8027a64:	eb41 0303 	adc.w	r3, r1, r3
 8027a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8027a6c:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8027a70:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    h4 -= carry4 << 26;
 8027a74:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8027a78:	f04f 0000 	mov.w	r0, #0
 8027a7c:	f04f 0100 	mov.w	r1, #0
 8027a80:	0699      	lsls	r1, r3, #26
 8027a82:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8027a86:	0690      	lsls	r0, r2, #26
 8027a88:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8027a8c:	1a14      	subs	r4, r2, r0
 8027a8e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8027a92:	eb63 0301 	sbc.w	r3, r3, r1
 8027a96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8027a9a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8027a9e:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 8027aa2:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8027aa6:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8027aaa:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 8027aae:	f143 0300 	adc.w	r3, r3, #0
 8027ab2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8027ab6:	f04f 0200 	mov.w	r2, #0
 8027aba:	f04f 0300 	mov.w	r3, #0
 8027abe:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8027ac2:	4621      	mov	r1, r4
 8027ac4:	0e4a      	lsrs	r2, r1, #25
 8027ac6:	4629      	mov	r1, r5
 8027ac8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8027acc:	4629      	mov	r1, r5
 8027ace:	164b      	asrs	r3, r1, #25
 8027ad0:	e9c7 23b2 	strd	r2, r3, [r7, #712]	; 0x2c8
    h2 += carry1;
 8027ad4:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	; 0x318
 8027ad8:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8027adc:	1884      	adds	r4, r0, r2
 8027ade:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8027ae2:	eb41 0303 	adc.w	r3, r1, r3
 8027ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8027aea:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8027aee:	e9c7 34c6 	strd	r3, r4, [r7, #792]	; 0x318
    h1 -= carry1 << 25;
 8027af2:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8027af6:	f04f 0000 	mov.w	r0, #0
 8027afa:	f04f 0100 	mov.w	r1, #0
 8027afe:	0659      	lsls	r1, r3, #25
 8027b00:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8027b04:	0650      	lsls	r0, r2, #25
 8027b06:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8027b0a:	1a14      	subs	r4, r2, r0
 8027b0c:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8027b10:	eb63 0301 	sbc.w	r3, r3, r1
 8027b14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8027b18:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8027b1c:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 8027b20:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8027b24:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8027b28:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8027b2c:	f143 0300 	adc.w	r3, r3, #0
 8027b30:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8027b34:	f04f 0200 	mov.w	r2, #0
 8027b38:	f04f 0300 	mov.w	r3, #0
 8027b3c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8027b40:	4621      	mov	r1, r4
 8027b42:	0e4a      	lsrs	r2, r1, #25
 8027b44:	4629      	mov	r1, r5
 8027b46:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8027b4a:	4629      	mov	r1, r5
 8027b4c:	164b      	asrs	r3, r1, #25
 8027b4e:	e9c7 23b0 	strd	r2, r3, [r7, #704]	; 0x2c0
    h6 += carry5;
 8027b52:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	; 0x2f8
 8027b56:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8027b5a:	1884      	adds	r4, r0, r2
 8027b5c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8027b60:	eb41 0303 	adc.w	r3, r1, r3
 8027b64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8027b68:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8027b6c:	e9c7 34be 	strd	r3, r4, [r7, #760]	; 0x2f8
    h5 -= carry5 << 25;
 8027b70:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8027b74:	f04f 0000 	mov.w	r0, #0
 8027b78:	f04f 0100 	mov.w	r1, #0
 8027b7c:	0659      	lsls	r1, r3, #25
 8027b7e:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8027b82:	0650      	lsls	r0, r2, #25
 8027b84:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8027b88:	1a14      	subs	r4, r2, r0
 8027b8a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8027b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8027b92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8027b96:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8027b9a:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 8027b9e:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8027ba2:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8027ba6:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8027baa:	f143 0300 	adc.w	r3, r3, #0
 8027bae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8027bb2:	f04f 0200 	mov.w	r2, #0
 8027bb6:	f04f 0300 	mov.w	r3, #0
 8027bba:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8027bbe:	4621      	mov	r1, r4
 8027bc0:	0e8a      	lsrs	r2, r1, #26
 8027bc2:	4629      	mov	r1, r5
 8027bc4:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8027bc8:	4629      	mov	r1, r5
 8027bca:	168b      	asrs	r3, r1, #26
 8027bcc:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
    h3 += carry2;
 8027bd0:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	; 0x310
 8027bd4:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8027bd8:	1884      	adds	r4, r0, r2
 8027bda:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8027bde:	eb41 0303 	adc.w	r3, r1, r3
 8027be2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8027be6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8027bea:	e9c7 34c4 	strd	r3, r4, [r7, #784]	; 0x310
    h2 -= carry2 << 26;
 8027bee:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8027bf2:	f04f 0000 	mov.w	r0, #0
 8027bf6:	f04f 0100 	mov.w	r1, #0
 8027bfa:	0699      	lsls	r1, r3, #26
 8027bfc:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8027c00:	0690      	lsls	r0, r2, #26
 8027c02:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8027c06:	1a14      	subs	r4, r2, r0
 8027c08:	67bc      	str	r4, [r7, #120]	; 0x78
 8027c0a:	eb63 0301 	sbc.w	r3, r3, r1
 8027c0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8027c10:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8027c14:	e9c7 34c6 	strd	r3, r4, [r7, #792]	; 0x318
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 8027c18:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8027c1c:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8027c20:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8027c24:	f143 0300 	adc.w	r3, r3, #0
 8027c28:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8027c2c:	f04f 0200 	mov.w	r2, #0
 8027c30:	f04f 0300 	mov.w	r3, #0
 8027c34:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8027c38:	4621      	mov	r1, r4
 8027c3a:	0e8a      	lsrs	r2, r1, #26
 8027c3c:	4629      	mov	r1, r5
 8027c3e:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8027c42:	4629      	mov	r1, r5
 8027c44:	168b      	asrs	r3, r1, #26
 8027c46:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    h7 += carry6;
 8027c4a:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	; 0x2f0
 8027c4e:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8027c52:	1884      	adds	r4, r0, r2
 8027c54:	673c      	str	r4, [r7, #112]	; 0x70
 8027c56:	eb41 0303 	adc.w	r3, r1, r3
 8027c5a:	677b      	str	r3, [r7, #116]	; 0x74
 8027c5c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8027c60:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    h6 -= carry6 << 26;
 8027c64:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8027c68:	f04f 0000 	mov.w	r0, #0
 8027c6c:	f04f 0100 	mov.w	r1, #0
 8027c70:	0699      	lsls	r1, r3, #26
 8027c72:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8027c76:	0690      	lsls	r0, r2, #26
 8027c78:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8027c7c:	1a14      	subs	r4, r2, r0
 8027c7e:	66bc      	str	r4, [r7, #104]	; 0x68
 8027c80:	eb63 0301 	sbc.w	r3, r3, r1
 8027c84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8027c86:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8027c8a:	e9c7 34be 	strd	r3, r4, [r7, #760]	; 0x2f8
    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 8027c8e:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8027c92:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8027c96:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8027c9a:	f143 0300 	adc.w	r3, r3, #0
 8027c9e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8027ca2:	f04f 0200 	mov.w	r2, #0
 8027ca6:	f04f 0300 	mov.w	r3, #0
 8027caa:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 8027cae:	4621      	mov	r1, r4
 8027cb0:	0e4a      	lsrs	r2, r1, #25
 8027cb2:	4629      	mov	r1, r5
 8027cb4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8027cb8:	4629      	mov	r1, r5
 8027cba:	164b      	asrs	r3, r1, #25
 8027cbc:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
    h4 += carry3;
 8027cc0:	e9d7 01c2 	ldrd	r0, r1, [r7, #776]	; 0x308
 8027cc4:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8027cc8:	1884      	adds	r4, r0, r2
 8027cca:	663c      	str	r4, [r7, #96]	; 0x60
 8027ccc:	eb41 0303 	adc.w	r3, r1, r3
 8027cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8027cd2:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8027cd6:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    h3 -= carry3 << 25;
 8027cda:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 8027cde:	f04f 0000 	mov.w	r0, #0
 8027ce2:	f04f 0100 	mov.w	r1, #0
 8027ce6:	0659      	lsls	r1, r3, #25
 8027ce8:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8027cec:	0650      	lsls	r0, r2, #25
 8027cee:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8027cf2:	1a14      	subs	r4, r2, r0
 8027cf4:	65bc      	str	r4, [r7, #88]	; 0x58
 8027cf6:	eb63 0301 	sbc.w	r3, r3, r1
 8027cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8027cfc:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8027d00:	e9c7 34c4 	strd	r3, r4, [r7, #784]	; 0x310
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 8027d04:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8027d08:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8027d0c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8027d10:	f143 0300 	adc.w	r3, r3, #0
 8027d14:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8027d18:	f04f 0200 	mov.w	r2, #0
 8027d1c:	f04f 0300 	mov.w	r3, #0
 8027d20:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8027d24:	4621      	mov	r1, r4
 8027d26:	0e4a      	lsrs	r2, r1, #25
 8027d28:	4629      	mov	r1, r5
 8027d2a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8027d2e:	4629      	mov	r1, r5
 8027d30:	164b      	asrs	r3, r1, #25
 8027d32:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
    h8 += carry7;
 8027d36:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	; 0x2e8
 8027d3a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8027d3e:	1884      	adds	r4, r0, r2
 8027d40:	653c      	str	r4, [r7, #80]	; 0x50
 8027d42:	eb41 0303 	adc.w	r3, r1, r3
 8027d46:	657b      	str	r3, [r7, #84]	; 0x54
 8027d48:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8027d4c:	e9c7 34ba 	strd	r3, r4, [r7, #744]	; 0x2e8
    h7 -= carry7 << 25;
 8027d50:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8027d54:	f04f 0000 	mov.w	r0, #0
 8027d58:	f04f 0100 	mov.w	r1, #0
 8027d5c:	0659      	lsls	r1, r3, #25
 8027d5e:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8027d62:	0650      	lsls	r0, r2, #25
 8027d64:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8027d68:	1a14      	subs	r4, r2, r0
 8027d6a:	64bc      	str	r4, [r7, #72]	; 0x48
 8027d6c:	eb63 0301 	sbc.w	r3, r3, r1
 8027d70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027d72:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8027d76:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8027d7a:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8027d7e:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8027d82:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8027d86:	f143 0300 	adc.w	r3, r3, #0
 8027d8a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8027d8e:	f04f 0200 	mov.w	r2, #0
 8027d92:	f04f 0300 	mov.w	r3, #0
 8027d96:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 8027d9a:	4621      	mov	r1, r4
 8027d9c:	0e8a      	lsrs	r2, r1, #26
 8027d9e:	4629      	mov	r1, r5
 8027da0:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8027da4:	4629      	mov	r1, r5
 8027da6:	168b      	asrs	r3, r1, #26
 8027da8:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
    h5 += carry4;
 8027dac:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 8027db0:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8027db4:	1884      	adds	r4, r0, r2
 8027db6:	643c      	str	r4, [r7, #64]	; 0x40
 8027db8:	eb41 0303 	adc.w	r3, r1, r3
 8027dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8027dbe:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8027dc2:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    h4 -= carry4 << 26;
 8027dc6:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8027dca:	f04f 0000 	mov.w	r0, #0
 8027dce:	f04f 0100 	mov.w	r1, #0
 8027dd2:	0699      	lsls	r1, r3, #26
 8027dd4:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8027dd8:	0690      	lsls	r0, r2, #26
 8027dda:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8027dde:	1a14      	subs	r4, r2, r0
 8027de0:	63bc      	str	r4, [r7, #56]	; 0x38
 8027de2:	eb63 0301 	sbc.w	r3, r3, r1
 8027de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8027de8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8027dec:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 8027df0:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8027df4:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8027df8:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8027dfc:	f143 0300 	adc.w	r3, r3, #0
 8027e00:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8027e04:	f04f 0200 	mov.w	r2, #0
 8027e08:	f04f 0300 	mov.w	r3, #0
 8027e0c:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 8027e10:	4621      	mov	r1, r4
 8027e12:	0e8a      	lsrs	r2, r1, #26
 8027e14:	4629      	mov	r1, r5
 8027e16:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8027e1a:	4629      	mov	r1, r5
 8027e1c:	168b      	asrs	r3, r1, #26
 8027e1e:	e9c7 23a6 	strd	r2, r3, [r7, #664]	; 0x298
    h9 += carry8;
 8027e22:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 8027e26:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8027e2a:	1884      	adds	r4, r0, r2
 8027e2c:	633c      	str	r4, [r7, #48]	; 0x30
 8027e2e:	eb41 0303 	adc.w	r3, r1, r3
 8027e32:	637b      	str	r3, [r7, #52]	; 0x34
 8027e34:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8027e38:	e9c7 34b8 	strd	r3, r4, [r7, #736]	; 0x2e0
    h8 -= carry8 << 26;
 8027e3c:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8027e40:	f04f 0000 	mov.w	r0, #0
 8027e44:	f04f 0100 	mov.w	r1, #0
 8027e48:	0699      	lsls	r1, r3, #26
 8027e4a:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8027e4e:	0690      	lsls	r0, r2, #26
 8027e50:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8027e54:	1a14      	subs	r4, r2, r0
 8027e56:	62bc      	str	r4, [r7, #40]	; 0x28
 8027e58:	eb63 0301 	sbc.w	r3, r3, r1
 8027e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027e5e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8027e62:	e9c7 34ba 	strd	r3, r4, [r7, #744]	; 0x2e8
    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 8027e66:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8027e6a:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8027e6e:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8027e72:	f143 0300 	adc.w	r3, r3, #0
 8027e76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8027e7a:	f04f 0200 	mov.w	r2, #0
 8027e7e:	f04f 0300 	mov.w	r3, #0
 8027e82:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8027e86:	4621      	mov	r1, r4
 8027e88:	0e4a      	lsrs	r2, r1, #25
 8027e8a:	4629      	mov	r1, r5
 8027e8c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8027e90:	4629      	mov	r1, r5
 8027e92:	164b      	asrs	r3, r1, #25
 8027e94:	e9c7 23a4 	strd	r2, r3, [r7, #656]	; 0x290
    h0 += carry9 * 19;
 8027e98:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	; 0x290
 8027e9c:	4622      	mov	r2, r4
 8027e9e:	462b      	mov	r3, r5
 8027ea0:	f04f 0000 	mov.w	r0, #0
 8027ea4:	f04f 0100 	mov.w	r1, #0
 8027ea8:	00d9      	lsls	r1, r3, #3
 8027eaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8027eae:	00d0      	lsls	r0, r2, #3
 8027eb0:	4602      	mov	r2, r0
 8027eb2:	460b      	mov	r3, r1
 8027eb4:	1912      	adds	r2, r2, r4
 8027eb6:	eb45 0303 	adc.w	r3, r5, r3
 8027eba:	1891      	adds	r1, r2, r2
 8027ebc:	6239      	str	r1, [r7, #32]
 8027ebe:	415b      	adcs	r3, r3
 8027ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8027ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8027ec6:	1911      	adds	r1, r2, r4
 8027ec8:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8027ecc:	416b      	adcs	r3, r5
 8027ece:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8027ed2:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8027ed6:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8027eda:	4621      	mov	r1, r4
 8027edc:	1851      	adds	r1, r2, r1
 8027ede:	61b9      	str	r1, [r7, #24]
 8027ee0:	4629      	mov	r1, r5
 8027ee2:	eb43 0101 	adc.w	r1, r3, r1
 8027ee6:	61f9      	str	r1, [r7, #28]
 8027ee8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8027eec:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    h9 -= carry9 << 25;
 8027ef0:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	; 0x290
 8027ef4:	f04f 0200 	mov.w	r2, #0
 8027ef8:	f04f 0300 	mov.w	r3, #0
 8027efc:	064b      	lsls	r3, r1, #25
 8027efe:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8027f02:	0642      	lsls	r2, r0, #25
 8027f04:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 8027f08:	1a84      	subs	r4, r0, r2
 8027f0a:	613c      	str	r4, [r7, #16]
 8027f0c:	eb61 0303 	sbc.w	r3, r1, r3
 8027f10:	617b      	str	r3, [r7, #20]
 8027f12:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8027f16:	e9c7 34b8 	strd	r3, r4, [r7, #736]	; 0x2e0
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8027f1a:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8027f1e:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8027f22:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8027f26:	f143 0300 	adc.w	r3, r3, #0
 8027f2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8027f2e:	f04f 0200 	mov.w	r2, #0
 8027f32:	f04f 0300 	mov.w	r3, #0
 8027f36:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8027f3a:	4621      	mov	r1, r4
 8027f3c:	0e8a      	lsrs	r2, r1, #26
 8027f3e:	4629      	mov	r1, r5
 8027f40:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8027f44:	4629      	mov	r1, r5
 8027f46:	168b      	asrs	r3, r1, #26
 8027f48:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8
    h1 += carry0;
 8027f4c:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8027f50:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8027f54:	1884      	adds	r4, r0, r2
 8027f56:	60bc      	str	r4, [r7, #8]
 8027f58:	eb41 0303 	adc.w	r3, r1, r3
 8027f5c:	60fb      	str	r3, [r7, #12]
 8027f5e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8027f62:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    h0 -= carry0 << 26;
 8027f66:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	; 0x2d8
 8027f6a:	f04f 0200 	mov.w	r2, #0
 8027f6e:	f04f 0300 	mov.w	r3, #0
 8027f72:	068b      	lsls	r3, r1, #26
 8027f74:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8027f78:	0682      	lsls	r2, r0, #26
 8027f7a:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 8027f7e:	1a84      	subs	r4, r0, r2
 8027f80:	603c      	str	r4, [r7, #0]
 8027f82:	eb61 0303 	sbc.w	r3, r1, r3
 8027f86:	607b      	str	r3, [r7, #4]
 8027f88:	e9d7 3400 	ldrd	r3, r4, [r7]
 8027f8c:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    h[0] = (int32_t) h0;
 8027f90:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8027f94:	681a      	ldr	r2, [r3, #0]
 8027f96:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8027f9a:	681b      	ldr	r3, [r3, #0]
 8027f9c:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 8027f9e:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8027fa2:	681b      	ldr	r3, [r3, #0]
 8027fa4:	3304      	adds	r3, #4
 8027fa6:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8027faa:	6812      	ldr	r2, [r2, #0]
 8027fac:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 8027fae:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8027fb2:	681b      	ldr	r3, [r3, #0]
 8027fb4:	3308      	adds	r3, #8
 8027fb6:	f507 7246 	add.w	r2, r7, #792	; 0x318
 8027fba:	6812      	ldr	r2, [r2, #0]
 8027fbc:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 8027fbe:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8027fc2:	681b      	ldr	r3, [r3, #0]
 8027fc4:	330c      	adds	r3, #12
 8027fc6:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8027fca:	6812      	ldr	r2, [r2, #0]
 8027fcc:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 8027fce:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8027fd2:	681b      	ldr	r3, [r3, #0]
 8027fd4:	3310      	adds	r3, #16
 8027fd6:	f507 7242 	add.w	r2, r7, #776	; 0x308
 8027fda:	6812      	ldr	r2, [r2, #0]
 8027fdc:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 8027fde:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8027fe2:	681b      	ldr	r3, [r3, #0]
 8027fe4:	3314      	adds	r3, #20
 8027fe6:	f507 7240 	add.w	r2, r7, #768	; 0x300
 8027fea:	6812      	ldr	r2, [r2, #0]
 8027fec:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 8027fee:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8027ff2:	681b      	ldr	r3, [r3, #0]
 8027ff4:	3318      	adds	r3, #24
 8027ff6:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8027ffa:	6812      	ldr	r2, [r2, #0]
 8027ffc:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 8027ffe:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8028002:	681b      	ldr	r3, [r3, #0]
 8028004:	331c      	adds	r3, #28
 8028006:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 802800a:	6812      	ldr	r2, [r2, #0]
 802800c:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 802800e:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8028012:	681b      	ldr	r3, [r3, #0]
 8028014:	3320      	adds	r3, #32
 8028016:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 802801a:	6812      	ldr	r2, [r2, #0]
 802801c:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 802801e:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8028022:	681b      	ldr	r3, [r3, #0]
 8028024:	3324      	adds	r3, #36	; 0x24
 8028026:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 802802a:	6812      	ldr	r2, [r2, #0]
 802802c:	601a      	str	r2, [r3, #0]
}
 802802e:	bf00      	nop
 8028030:	f207 574c 	addw	r7, r7, #1356	; 0x54c
 8028034:	46bd      	mov	sp, r7
 8028036:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 802803a:	4770      	bx	lr

0802803c <fe_sq2>:

/*
See fe_mul.c for discussion of implementation strategy.
*/

void fe_sq2(fe h, const fe f) {
 802803c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8028040:	f2ad 5d9c 	subw	sp, sp, #1436	; 0x59c
 8028044:	af00      	add	r7, sp, #0
 8028046:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 802804a:	6018      	str	r0, [r3, #0]
 802804c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8028050:	6019      	str	r1, [r3, #0]
    int32_t f0 = f[0];
 8028052:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8028056:	681b      	ldr	r3, [r3, #0]
 8028058:	681b      	ldr	r3, [r3, #0]
 802805a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
    int32_t f1 = f[1];
 802805e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8028062:	681b      	ldr	r3, [r3, #0]
 8028064:	685b      	ldr	r3, [r3, #4]
 8028066:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
    int32_t f2 = f[2];
 802806a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 802806e:	681b      	ldr	r3, [r3, #0]
 8028070:	689b      	ldr	r3, [r3, #8]
 8028072:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
    int32_t f3 = f[3];
 8028076:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 802807a:	681b      	ldr	r3, [r3, #0]
 802807c:	68db      	ldr	r3, [r3, #12]
 802807e:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
    int32_t f4 = f[4];
 8028082:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8028086:	681b      	ldr	r3, [r3, #0]
 8028088:	691b      	ldr	r3, [r3, #16]
 802808a:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
    int32_t f5 = f[5];
 802808e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8028092:	681b      	ldr	r3, [r3, #0]
 8028094:	695b      	ldr	r3, [r3, #20]
 8028096:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    int32_t f6 = f[6];
 802809a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 802809e:	681b      	ldr	r3, [r3, #0]
 80280a0:	699b      	ldr	r3, [r3, #24]
 80280a2:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
    int32_t f7 = f[7];
 80280a6:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80280aa:	681b      	ldr	r3, [r3, #0]
 80280ac:	69db      	ldr	r3, [r3, #28]
 80280ae:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
    int32_t f8 = f[8];
 80280b2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80280b6:	681b      	ldr	r3, [r3, #0]
 80280b8:	6a1b      	ldr	r3, [r3, #32]
 80280ba:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
    int32_t f9 = f[9];
 80280be:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80280c2:	681b      	ldr	r3, [r3, #0]
 80280c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80280c6:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    int32_t f0_2 = 2 * f0;
 80280ca:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80280ce:	005b      	lsls	r3, r3, #1
 80280d0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
    int32_t f1_2 = 2 * f1;
 80280d4:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 80280d8:	005b      	lsls	r3, r3, #1
 80280da:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
    int32_t f2_2 = 2 * f2;
 80280de:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80280e2:	005b      	lsls	r3, r3, #1
 80280e4:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    int32_t f3_2 = 2 * f3;
 80280e8:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 80280ec:	005b      	lsls	r3, r3, #1
 80280ee:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
    int32_t f4_2 = 2 * f4;
 80280f2:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80280f6:	005b      	lsls	r3, r3, #1
 80280f8:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
    int32_t f5_2 = 2 * f5;
 80280fc:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8028100:	005b      	lsls	r3, r3, #1
 8028102:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    int32_t f6_2 = 2 * f6;
 8028106:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 802810a:	005b      	lsls	r3, r3, #1
 802810c:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
    int32_t f7_2 = 2 * f7;
 8028110:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8028114:	005b      	lsls	r3, r3, #1
 8028116:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
    int32_t f5_38 = 38 * f5; /* 1.959375*2^30 */
 802811a:	f8d7 2580 	ldr.w	r2, [r7, #1408]	; 0x580
 802811e:	2326      	movs	r3, #38	; 0x26
 8028120:	fb03 f302 	mul.w	r3, r3, r2
 8028124:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
    int32_t f6_19 = 19 * f6; /* 1.959375*2^30 */
 8028128:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 802812c:	4613      	mov	r3, r2
 802812e:	00db      	lsls	r3, r3, #3
 8028130:	4413      	add	r3, r2
 8028132:	005b      	lsls	r3, r3, #1
 8028134:	4413      	add	r3, r2
 8028136:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    int32_t f7_38 = 38 * f7; /* 1.959375*2^30 */
 802813a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 802813e:	2326      	movs	r3, #38	; 0x26
 8028140:	fb03 f302 	mul.w	r3, r3, r2
 8028144:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
    int32_t f8_19 = 19 * f8; /* 1.959375*2^30 */
 8028148:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 802814c:	4613      	mov	r3, r2
 802814e:	00db      	lsls	r3, r3, #3
 8028150:	4413      	add	r3, r2
 8028152:	005b      	lsls	r3, r3, #1
 8028154:	4413      	add	r3, r2
 8028156:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
    int32_t f9_38 = 38 * f9; /* 1.959375*2^30 */
 802815a:	f8d7 2570 	ldr.w	r2, [r7, #1392]	; 0x570
 802815e:	2326      	movs	r3, #38	; 0x26
 8028160:	fb03 f302 	mul.w	r3, r3, r2
 8028164:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
    int64_t f0f0    = f0   * (int64_t) f0;
 8028168:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 802816c:	4618      	mov	r0, r3
 802816e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028172:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8028176:	461a      	mov	r2, r3
 8028178:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802817c:	fb02 f501 	mul.w	r5, r2, r1
 8028180:	fb00 f403 	mul.w	r4, r0, r3
 8028184:	442c      	add	r4, r5
 8028186:	fba0 2302 	umull	r2, r3, r0, r2
 802818a:	18e1      	adds	r1, r4, r3
 802818c:	460b      	mov	r3, r1
 802818e:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 8028192:	e9c1 2300 	strd	r2, r3, [r1]
 8028196:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 802819a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f1_2  = f0_2 * (int64_t) f1;
 802819e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80281a2:	4618      	mov	r0, r3
 80281a4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80281a8:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 80281ac:	461a      	mov	r2, r3
 80281ae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80281b2:	fb02 f501 	mul.w	r5, r2, r1
 80281b6:	fb00 f403 	mul.w	r4, r0, r3
 80281ba:	442c      	add	r4, r5
 80281bc:	fba0 2302 	umull	r2, r3, r0, r2
 80281c0:	18e1      	adds	r1, r4, r3
 80281c2:	460b      	mov	r3, r1
 80281c4:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 80281c8:	e9c1 2300 	strd	r2, r3, [r1]
 80281cc:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 80281d0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f2_2  = f0_2 * (int64_t) f2;
 80281d4:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80281d8:	4618      	mov	r0, r3
 80281da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80281de:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80281e2:	461a      	mov	r2, r3
 80281e4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80281e8:	fb02 f501 	mul.w	r5, r2, r1
 80281ec:	fb00 f403 	mul.w	r4, r0, r3
 80281f0:	442c      	add	r4, r5
 80281f2:	fba0 2302 	umull	r2, r3, r0, r2
 80281f6:	18e1      	adds	r1, r4, r3
 80281f8:	460b      	mov	r3, r1
 80281fa:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 80281fe:	e9c1 2300 	strd	r2, r3, [r1]
 8028202:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 8028206:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f3_2  = f0_2 * (int64_t) f3;
 802820a:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 802820e:	4618      	mov	r0, r3
 8028210:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028214:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8028218:	461a      	mov	r2, r3
 802821a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802821e:	fb02 f501 	mul.w	r5, r2, r1
 8028222:	fb00 f403 	mul.w	r4, r0, r3
 8028226:	442c      	add	r4, r5
 8028228:	fba0 2302 	umull	r2, r3, r0, r2
 802822c:	18e1      	adds	r1, r4, r3
 802822e:	460b      	mov	r3, r1
 8028230:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8028234:	e9c1 2300 	strd	r2, r3, [r1]
 8028238:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 802823c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f4_2  = f0_2 * (int64_t) f4;
 8028240:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8028244:	4618      	mov	r0, r3
 8028246:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802824a:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 802824e:	461a      	mov	r2, r3
 8028250:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028254:	fb02 f501 	mul.w	r5, r2, r1
 8028258:	fb00 f403 	mul.w	r4, r0, r3
 802825c:	442c      	add	r4, r5
 802825e:	fba0 2302 	umull	r2, r3, r0, r2
 8028262:	18e1      	adds	r1, r4, r3
 8028264:	460b      	mov	r3, r1
 8028266:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 802826a:	e9c1 2300 	strd	r2, r3, [r1]
 802826e:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8028272:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f5_2  = f0_2 * (int64_t) f5;
 8028276:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 802827a:	4618      	mov	r0, r3
 802827c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028280:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8028284:	461a      	mov	r2, r3
 8028286:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802828a:	fb02 f501 	mul.w	r5, r2, r1
 802828e:	fb00 f403 	mul.w	r4, r0, r3
 8028292:	442c      	add	r4, r5
 8028294:	fba0 2302 	umull	r2, r3, r0, r2
 8028298:	18e1      	adds	r1, r4, r3
 802829a:	460b      	mov	r3, r1
 802829c:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 80282a0:	e9c1 2300 	strd	r2, r3, [r1]
 80282a4:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 80282a8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f6_2  = f0_2 * (int64_t) f6;
 80282ac:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80282b0:	4618      	mov	r0, r3
 80282b2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80282b6:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 80282ba:	461a      	mov	r2, r3
 80282bc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80282c0:	fb02 f501 	mul.w	r5, r2, r1
 80282c4:	fb00 f403 	mul.w	r4, r0, r3
 80282c8:	442c      	add	r4, r5
 80282ca:	fba0 2302 	umull	r2, r3, r0, r2
 80282ce:	18e1      	adds	r1, r4, r3
 80282d0:	460b      	mov	r3, r1
 80282d2:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 80282d6:	e9c1 2300 	strd	r2, r3, [r1]
 80282da:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 80282de:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f7_2  = f0_2 * (int64_t) f7;
 80282e2:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80282e6:	4618      	mov	r0, r3
 80282e8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80282ec:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80282f0:	461a      	mov	r2, r3
 80282f2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80282f6:	fb02 f501 	mul.w	r5, r2, r1
 80282fa:	fb00 f403 	mul.w	r4, r0, r3
 80282fe:	442c      	add	r4, r5
 8028300:	fba0 2302 	umull	r2, r3, r0, r2
 8028304:	18e1      	adds	r1, r4, r3
 8028306:	460b      	mov	r3, r1
 8028308:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 802830c:	e9c1 2300 	strd	r2, r3, [r1]
 8028310:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 8028314:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f8_2  = f0_2 * (int64_t) f8;
 8028318:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 802831c:	4618      	mov	r0, r3
 802831e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028322:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8028326:	461a      	mov	r2, r3
 8028328:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802832c:	fb02 f501 	mul.w	r5, r2, r1
 8028330:	fb00 f403 	mul.w	r4, r0, r3
 8028334:	442c      	add	r4, r5
 8028336:	fba0 2302 	umull	r2, r3, r0, r2
 802833a:	18e1      	adds	r1, r4, r3
 802833c:	460b      	mov	r3, r1
 802833e:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8028342:	e9c1 2300 	strd	r2, r3, [r1]
 8028346:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 802834a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f9_2  = f0_2 * (int64_t) f9;
 802834e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8028352:	4618      	mov	r0, r3
 8028354:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028358:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 802835c:	461a      	mov	r2, r3
 802835e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028362:	fb02 f501 	mul.w	r5, r2, r1
 8028366:	fb00 f403 	mul.w	r4, r0, r3
 802836a:	442c      	add	r4, r5
 802836c:	fba0 2302 	umull	r2, r3, r0, r2
 8028370:	18e1      	adds	r1, r4, r3
 8028372:	460b      	mov	r3, r1
 8028374:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 8028378:	e9c1 2300 	strd	r2, r3, [r1]
 802837c:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 8028380:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f1_2  = f1_2 * (int64_t) f1;
 8028384:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8028388:	4618      	mov	r0, r3
 802838a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802838e:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8028392:	461a      	mov	r2, r3
 8028394:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028398:	fb02 f501 	mul.w	r5, r2, r1
 802839c:	fb00 f403 	mul.w	r4, r0, r3
 80283a0:	442c      	add	r4, r5
 80283a2:	fba0 2302 	umull	r2, r3, r0, r2
 80283a6:	18e1      	adds	r1, r4, r3
 80283a8:	460b      	mov	r3, r1
 80283aa:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80283ae:	e9c1 2300 	strd	r2, r3, [r1]
 80283b2:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80283b6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f2_2  = f1_2 * (int64_t) f2;
 80283ba:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 80283be:	4618      	mov	r0, r3
 80283c0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80283c4:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80283c8:	461a      	mov	r2, r3
 80283ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80283ce:	fb02 f501 	mul.w	r5, r2, r1
 80283d2:	fb00 f403 	mul.w	r4, r0, r3
 80283d6:	442c      	add	r4, r5
 80283d8:	fba0 2302 	umull	r2, r3, r0, r2
 80283dc:	18e1      	adds	r1, r4, r3
 80283de:	460b      	mov	r3, r1
 80283e0:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80283e4:	e9c1 2300 	strd	r2, r3, [r1]
 80283e8:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80283ec:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f3_4  = f1_2 * (int64_t) f3_2;
 80283f0:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 80283f4:	4618      	mov	r0, r3
 80283f6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80283fa:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80283fe:	461a      	mov	r2, r3
 8028400:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028404:	fb02 f501 	mul.w	r5, r2, r1
 8028408:	fb00 f403 	mul.w	r4, r0, r3
 802840c:	442c      	add	r4, r5
 802840e:	fba0 2302 	umull	r2, r3, r0, r2
 8028412:	18e1      	adds	r1, r4, r3
 8028414:	460b      	mov	r3, r1
 8028416:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 802841a:	e9c1 2300 	strd	r2, r3, [r1]
 802841e:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8028422:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f4_2  = f1_2 * (int64_t) f4;
 8028426:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 802842a:	4618      	mov	r0, r3
 802842c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028430:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8028434:	461a      	mov	r2, r3
 8028436:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802843a:	fb02 f501 	mul.w	r5, r2, r1
 802843e:	fb00 f403 	mul.w	r4, r0, r3
 8028442:	442c      	add	r4, r5
 8028444:	fba0 2302 	umull	r2, r3, r0, r2
 8028448:	18e1      	adds	r1, r4, r3
 802844a:	460b      	mov	r3, r1
 802844c:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8028450:	e9c1 2300 	strd	r2, r3, [r1]
 8028454:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8028458:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f5_4  = f1_2 * (int64_t) f5_2;
 802845c:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8028460:	4618      	mov	r0, r3
 8028462:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028466:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 802846a:	461a      	mov	r2, r3
 802846c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028470:	fb02 f501 	mul.w	r5, r2, r1
 8028474:	fb00 f403 	mul.w	r4, r0, r3
 8028478:	442c      	add	r4, r5
 802847a:	fba0 2302 	umull	r2, r3, r0, r2
 802847e:	18e1      	adds	r1, r4, r3
 8028480:	460b      	mov	r3, r1
 8028482:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8028486:	e9c1 2300 	strd	r2, r3, [r1]
 802848a:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 802848e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f6_2  = f1_2 * (int64_t) f6;
 8028492:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8028496:	4618      	mov	r0, r3
 8028498:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802849c:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 80284a0:	461a      	mov	r2, r3
 80284a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80284a6:	fb02 f501 	mul.w	r5, r2, r1
 80284aa:	fb00 f403 	mul.w	r4, r0, r3
 80284ae:	442c      	add	r4, r5
 80284b0:	fba0 2302 	umull	r2, r3, r0, r2
 80284b4:	18e1      	adds	r1, r4, r3
 80284b6:	460b      	mov	r3, r1
 80284b8:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 80284bc:	e9c1 2300 	strd	r2, r3, [r1]
 80284c0:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 80284c4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f7_4  = f1_2 * (int64_t) f7_2;
 80284c8:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 80284cc:	4618      	mov	r0, r3
 80284ce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80284d2:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 80284d6:	461a      	mov	r2, r3
 80284d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80284dc:	fb02 f501 	mul.w	r5, r2, r1
 80284e0:	fb00 f403 	mul.w	r4, r0, r3
 80284e4:	442c      	add	r4, r5
 80284e6:	fba0 2302 	umull	r2, r3, r0, r2
 80284ea:	18e1      	adds	r1, r4, r3
 80284ec:	460b      	mov	r3, r1
 80284ee:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 80284f2:	e9c1 2300 	strd	r2, r3, [r1]
 80284f6:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 80284fa:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f8_2  = f1_2 * (int64_t) f8;
 80284fe:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8028502:	4618      	mov	r0, r3
 8028504:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028508:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 802850c:	461a      	mov	r2, r3
 802850e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028512:	fb02 f501 	mul.w	r5, r2, r1
 8028516:	fb00 f403 	mul.w	r4, r0, r3
 802851a:	442c      	add	r4, r5
 802851c:	fba0 2302 	umull	r2, r3, r0, r2
 8028520:	18e1      	adds	r1, r4, r3
 8028522:	460b      	mov	r3, r1
 8028524:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8028528:	e9c1 2300 	strd	r2, r3, [r1]
 802852c:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8028530:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f9_76 = f1_2 * (int64_t) f9_38;
 8028534:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8028538:	4618      	mov	r0, r3
 802853a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802853e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8028542:	461a      	mov	r2, r3
 8028544:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028548:	fb02 f501 	mul.w	r5, r2, r1
 802854c:	fb00 f403 	mul.w	r4, r0, r3
 8028550:	442c      	add	r4, r5
 8028552:	fba0 2302 	umull	r2, r3, r0, r2
 8028556:	18e1      	adds	r1, r4, r3
 8028558:	460b      	mov	r3, r1
 802855a:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 802855e:	e9c1 2300 	strd	r2, r3, [r1]
 8028562:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8028566:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f2    = f2   * (int64_t) f2;
 802856a:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 802856e:	4618      	mov	r0, r3
 8028570:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028574:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8028578:	461a      	mov	r2, r3
 802857a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802857e:	fb02 f501 	mul.w	r5, r2, r1
 8028582:	fb00 f403 	mul.w	r4, r0, r3
 8028586:	442c      	add	r4, r5
 8028588:	fba0 2302 	umull	r2, r3, r0, r2
 802858c:	18e1      	adds	r1, r4, r3
 802858e:	460b      	mov	r3, r1
 8028590:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8028594:	e9c1 2300 	strd	r2, r3, [r1]
 8028598:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 802859c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f3_2  = f2_2 * (int64_t) f3;
 80285a0:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 80285a4:	4618      	mov	r0, r3
 80285a6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80285aa:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 80285ae:	461a      	mov	r2, r3
 80285b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80285b4:	fb02 f501 	mul.w	r5, r2, r1
 80285b8:	fb00 f403 	mul.w	r4, r0, r3
 80285bc:	442c      	add	r4, r5
 80285be:	fba0 2302 	umull	r2, r3, r0, r2
 80285c2:	18e1      	adds	r1, r4, r3
 80285c4:	460b      	mov	r3, r1
 80285c6:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 80285ca:	e9c1 2300 	strd	r2, r3, [r1]
 80285ce:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 80285d2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f4_2  = f2_2 * (int64_t) f4;
 80285d6:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 80285da:	4618      	mov	r0, r3
 80285dc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80285e0:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80285e4:	461a      	mov	r2, r3
 80285e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80285ea:	fb02 f501 	mul.w	r5, r2, r1
 80285ee:	fb00 f403 	mul.w	r4, r0, r3
 80285f2:	442c      	add	r4, r5
 80285f4:	fba0 2302 	umull	r2, r3, r0, r2
 80285f8:	18e1      	adds	r1, r4, r3
 80285fa:	460b      	mov	r3, r1
 80285fc:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8028600:	e9c1 2300 	strd	r2, r3, [r1]
 8028604:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8028608:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f5_2  = f2_2 * (int64_t) f5;
 802860c:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8028610:	4618      	mov	r0, r3
 8028612:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028616:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 802861a:	461a      	mov	r2, r3
 802861c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028620:	fb02 f501 	mul.w	r5, r2, r1
 8028624:	fb00 f403 	mul.w	r4, r0, r3
 8028628:	442c      	add	r4, r5
 802862a:	fba0 2302 	umull	r2, r3, r0, r2
 802862e:	18e1      	adds	r1, r4, r3
 8028630:	460b      	mov	r3, r1
 8028632:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8028636:	e9c1 2300 	strd	r2, r3, [r1]
 802863a:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 802863e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f6_2  = f2_2 * (int64_t) f6;
 8028642:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8028646:	4618      	mov	r0, r3
 8028648:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802864c:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8028650:	461a      	mov	r2, r3
 8028652:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028656:	fb02 f501 	mul.w	r5, r2, r1
 802865a:	fb00 f403 	mul.w	r4, r0, r3
 802865e:	442c      	add	r4, r5
 8028660:	fba0 2302 	umull	r2, r3, r0, r2
 8028664:	18e1      	adds	r1, r4, r3
 8028666:	460b      	mov	r3, r1
 8028668:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 802866c:	e9c1 2300 	strd	r2, r3, [r1]
 8028670:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8028674:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f7_2  = f2_2 * (int64_t) f7;
 8028678:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 802867c:	4618      	mov	r0, r3
 802867e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028682:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8028686:	461a      	mov	r2, r3
 8028688:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802868c:	fb02 f501 	mul.w	r5, r2, r1
 8028690:	fb00 f403 	mul.w	r4, r0, r3
 8028694:	442c      	add	r4, r5
 8028696:	fba0 2302 	umull	r2, r3, r0, r2
 802869a:	18e1      	adds	r1, r4, r3
 802869c:	460b      	mov	r3, r1
 802869e:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 80286a2:	e9c1 2300 	strd	r2, r3, [r1]
 80286a6:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 80286aa:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f8_38 = f2_2 * (int64_t) f8_19;
 80286ae:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 80286b2:	4618      	mov	r0, r3
 80286b4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80286b8:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80286bc:	461a      	mov	r2, r3
 80286be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80286c2:	fb02 f501 	mul.w	r5, r2, r1
 80286c6:	fb00 f403 	mul.w	r4, r0, r3
 80286ca:	442c      	add	r4, r5
 80286cc:	fba0 2302 	umull	r2, r3, r0, r2
 80286d0:	18e1      	adds	r1, r4, r3
 80286d2:	460b      	mov	r3, r1
 80286d4:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80286d8:	e9c1 2300 	strd	r2, r3, [r1]
 80286dc:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80286e0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f9_38 = f2   * (int64_t) f9_38;
 80286e4:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80286e8:	4618      	mov	r0, r3
 80286ea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80286ee:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80286f2:	461a      	mov	r2, r3
 80286f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80286f8:	fb02 f501 	mul.w	r5, r2, r1
 80286fc:	fb00 f403 	mul.w	r4, r0, r3
 8028700:	442c      	add	r4, r5
 8028702:	fba0 2302 	umull	r2, r3, r0, r2
 8028706:	18e1      	adds	r1, r4, r3
 8028708:	460b      	mov	r3, r1
 802870a:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 802870e:	e9c1 2300 	strd	r2, r3, [r1]
 8028712:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8028716:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f3_2  = f3_2 * (int64_t) f3;
 802871a:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 802871e:	4618      	mov	r0, r3
 8028720:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028724:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8028728:	461a      	mov	r2, r3
 802872a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802872e:	fb02 f501 	mul.w	r5, r2, r1
 8028732:	fb00 f403 	mul.w	r4, r0, r3
 8028736:	442c      	add	r4, r5
 8028738:	fba0 2302 	umull	r2, r3, r0, r2
 802873c:	18e1      	adds	r1, r4, r3
 802873e:	460b      	mov	r3, r1
 8028740:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8028744:	e9c1 2300 	strd	r2, r3, [r1]
 8028748:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 802874c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f4_2  = f3_2 * (int64_t) f4;
 8028750:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8028754:	4618      	mov	r0, r3
 8028756:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802875a:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 802875e:	461a      	mov	r2, r3
 8028760:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028764:	fb02 f501 	mul.w	r5, r2, r1
 8028768:	fb00 f403 	mul.w	r4, r0, r3
 802876c:	442c      	add	r4, r5
 802876e:	fba0 2302 	umull	r2, r3, r0, r2
 8028772:	18e1      	adds	r1, r4, r3
 8028774:	460b      	mov	r3, r1
 8028776:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 802877a:	e9c1 2300 	strd	r2, r3, [r1]
 802877e:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8028782:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f5_4  = f3_2 * (int64_t) f5_2;
 8028786:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 802878a:	4618      	mov	r0, r3
 802878c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028790:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8028794:	461a      	mov	r2, r3
 8028796:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802879a:	fb02 f501 	mul.w	r5, r2, r1
 802879e:	fb00 f403 	mul.w	r4, r0, r3
 80287a2:	442c      	add	r4, r5
 80287a4:	fba0 2302 	umull	r2, r3, r0, r2
 80287a8:	18e1      	adds	r1, r4, r3
 80287aa:	460b      	mov	r3, r1
 80287ac:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 80287b0:	e9c1 2300 	strd	r2, r3, [r1]
 80287b4:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 80287b8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f6_2  = f3_2 * (int64_t) f6;
 80287bc:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80287c0:	4618      	mov	r0, r3
 80287c2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80287c6:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 80287ca:	461a      	mov	r2, r3
 80287cc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80287d0:	fb02 f501 	mul.w	r5, r2, r1
 80287d4:	fb00 f403 	mul.w	r4, r0, r3
 80287d8:	442c      	add	r4, r5
 80287da:	fba0 2302 	umull	r2, r3, r0, r2
 80287de:	18e1      	adds	r1, r4, r3
 80287e0:	460b      	mov	r3, r1
 80287e2:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 80287e6:	e9c1 2300 	strd	r2, r3, [r1]
 80287ea:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 80287ee:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f7_76 = f3_2 * (int64_t) f7_38;
 80287f2:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 80287f6:	4618      	mov	r0, r3
 80287f8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80287fc:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8028800:	461a      	mov	r2, r3
 8028802:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028806:	fb02 f501 	mul.w	r5, r2, r1
 802880a:	fb00 f403 	mul.w	r4, r0, r3
 802880e:	442c      	add	r4, r5
 8028810:	fba0 2302 	umull	r2, r3, r0, r2
 8028814:	18e1      	adds	r1, r4, r3
 8028816:	460b      	mov	r3, r1
 8028818:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 802881c:	e9c1 2300 	strd	r2, r3, [r1]
 8028820:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8028824:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f8_38 = f3_2 * (int64_t) f8_19;
 8028828:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 802882c:	4618      	mov	r0, r3
 802882e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028832:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8028836:	461a      	mov	r2, r3
 8028838:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802883c:	fb02 f501 	mul.w	r5, r2, r1
 8028840:	fb00 f403 	mul.w	r4, r0, r3
 8028844:	442c      	add	r4, r5
 8028846:	fba0 2302 	umull	r2, r3, r0, r2
 802884a:	18e1      	adds	r1, r4, r3
 802884c:	460b      	mov	r3, r1
 802884e:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8028852:	e9c1 2300 	strd	r2, r3, [r1]
 8028856:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 802885a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f9_76 = f3_2 * (int64_t) f9_38;
 802885e:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8028862:	4618      	mov	r0, r3
 8028864:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028868:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 802886c:	461a      	mov	r2, r3
 802886e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028872:	fb02 f501 	mul.w	r5, r2, r1
 8028876:	fb00 f403 	mul.w	r4, r0, r3
 802887a:	442c      	add	r4, r5
 802887c:	fba0 2302 	umull	r2, r3, r0, r2
 8028880:	18e1      	adds	r1, r4, r3
 8028882:	460b      	mov	r3, r1
 8028884:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8028888:	e9c1 2300 	strd	r2, r3, [r1]
 802888c:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8028890:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f4    = f4   * (int64_t) f4;
 8028894:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8028898:	4618      	mov	r0, r3
 802889a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802889e:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80288a2:	461a      	mov	r2, r3
 80288a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80288a8:	fb02 f501 	mul.w	r5, r2, r1
 80288ac:	fb00 f403 	mul.w	r4, r0, r3
 80288b0:	442c      	add	r4, r5
 80288b2:	fba0 2302 	umull	r2, r3, r0, r2
 80288b6:	18e1      	adds	r1, r4, r3
 80288b8:	460b      	mov	r3, r1
 80288ba:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 80288be:	e9c1 2300 	strd	r2, r3, [r1]
 80288c2:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 80288c6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f5_2  = f4_2 * (int64_t) f5;
 80288ca:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 80288ce:	4618      	mov	r0, r3
 80288d0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80288d4:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 80288d8:	461a      	mov	r2, r3
 80288da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80288de:	fb02 f501 	mul.w	r5, r2, r1
 80288e2:	fb00 f403 	mul.w	r4, r0, r3
 80288e6:	442c      	add	r4, r5
 80288e8:	fba0 2302 	umull	r2, r3, r0, r2
 80288ec:	18e1      	adds	r1, r4, r3
 80288ee:	460b      	mov	r3, r1
 80288f0:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80288f4:	e9c1 2300 	strd	r2, r3, [r1]
 80288f8:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80288fc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f6_38 = f4_2 * (int64_t) f6_19;
 8028900:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8028904:	4618      	mov	r0, r3
 8028906:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802890a:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 802890e:	461a      	mov	r2, r3
 8028910:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028914:	fb02 f501 	mul.w	r5, r2, r1
 8028918:	fb00 f403 	mul.w	r4, r0, r3
 802891c:	442c      	add	r4, r5
 802891e:	fba0 2302 	umull	r2, r3, r0, r2
 8028922:	18e1      	adds	r1, r4, r3
 8028924:	460b      	mov	r3, r1
 8028926:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 802892a:	e9c1 2300 	strd	r2, r3, [r1]
 802892e:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8028932:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f7_38 = f4   * (int64_t) f7_38;
 8028936:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 802893a:	4618      	mov	r0, r3
 802893c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028940:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8028944:	461a      	mov	r2, r3
 8028946:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802894a:	fb02 f501 	mul.w	r5, r2, r1
 802894e:	fb00 f403 	mul.w	r4, r0, r3
 8028952:	442c      	add	r4, r5
 8028954:	fba0 2302 	umull	r2, r3, r0, r2
 8028958:	18e1      	adds	r1, r4, r3
 802895a:	460b      	mov	r3, r1
 802895c:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8028960:	e9c1 2300 	strd	r2, r3, [r1]
 8028964:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8028968:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f8_38 = f4_2 * (int64_t) f8_19;
 802896c:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8028970:	4618      	mov	r0, r3
 8028972:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028976:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 802897a:	461a      	mov	r2, r3
 802897c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028980:	fb02 f501 	mul.w	r5, r2, r1
 8028984:	fb00 f403 	mul.w	r4, r0, r3
 8028988:	442c      	add	r4, r5
 802898a:	fba0 2302 	umull	r2, r3, r0, r2
 802898e:	18e1      	adds	r1, r4, r3
 8028990:	460b      	mov	r3, r1
 8028992:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8028996:	e9c1 2300 	strd	r2, r3, [r1]
 802899a:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 802899e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f9_38 = f4   * (int64_t) f9_38;
 80289a2:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80289a6:	4618      	mov	r0, r3
 80289a8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80289ac:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80289b0:	461a      	mov	r2, r3
 80289b2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80289b6:	fb02 f501 	mul.w	r5, r2, r1
 80289ba:	fb00 f403 	mul.w	r4, r0, r3
 80289be:	442c      	add	r4, r5
 80289c0:	fba0 2302 	umull	r2, r3, r0, r2
 80289c4:	18e1      	adds	r1, r4, r3
 80289c6:	460b      	mov	r3, r1
 80289c8:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
 80289cc:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
    int64_t f5f5_38 = f5   * (int64_t) f5_38;
 80289d0:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 80289d4:	4618      	mov	r0, r3
 80289d6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80289da:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 80289de:	461a      	mov	r2, r3
 80289e0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80289e4:	fb02 f501 	mul.w	r5, r2, r1
 80289e8:	fb00 f403 	mul.w	r4, r0, r3
 80289ec:	442c      	add	r4, r5
 80289ee:	fba0 2302 	umull	r2, r3, r0, r2
 80289f2:	18e1      	adds	r1, r4, r3
 80289f4:	460b      	mov	r3, r1
 80289f6:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
 80289fa:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
    int64_t f5f6_38 = f5_2 * (int64_t) f6_19;
 80289fe:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8028a02:	4618      	mov	r0, r3
 8028a04:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028a08:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8028a0c:	461a      	mov	r2, r3
 8028a0e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028a12:	fb02 f501 	mul.w	r5, r2, r1
 8028a16:	fb00 f403 	mul.w	r4, r0, r3
 8028a1a:	442c      	add	r4, r5
 8028a1c:	fba0 2302 	umull	r2, r3, r0, r2
 8028a20:	18e1      	adds	r1, r4, r3
 8028a22:	460b      	mov	r3, r1
 8028a24:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
 8028a28:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
    int64_t f5f7_76 = f5_2 * (int64_t) f7_38;
 8028a2c:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8028a30:	4618      	mov	r0, r3
 8028a32:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028a36:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8028a3a:	461a      	mov	r2, r3
 8028a3c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028a40:	fb02 f501 	mul.w	r5, r2, r1
 8028a44:	fb00 f403 	mul.w	r4, r0, r3
 8028a48:	442c      	add	r4, r5
 8028a4a:	fba0 2302 	umull	r2, r3, r0, r2
 8028a4e:	18e1      	adds	r1, r4, r3
 8028a50:	460b      	mov	r3, r1
 8028a52:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
 8028a56:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
    int64_t f5f8_38 = f5_2 * (int64_t) f8_19;
 8028a5a:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8028a5e:	4618      	mov	r0, r3
 8028a60:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028a64:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8028a68:	461a      	mov	r2, r3
 8028a6a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028a6e:	fb02 f501 	mul.w	r5, r2, r1
 8028a72:	fb00 f403 	mul.w	r4, r0, r3
 8028a76:	442c      	add	r4, r5
 8028a78:	fba0 2302 	umull	r2, r3, r0, r2
 8028a7c:	18e1      	adds	r1, r4, r3
 8028a7e:	460b      	mov	r3, r1
 8028a80:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
 8028a84:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
    int64_t f5f9_76 = f5_2 * (int64_t) f9_38;
 8028a88:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8028a8c:	4618      	mov	r0, r3
 8028a8e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028a92:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8028a96:	461a      	mov	r2, r3
 8028a98:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028a9c:	fb02 f501 	mul.w	r5, r2, r1
 8028aa0:	fb00 f403 	mul.w	r4, r0, r3
 8028aa4:	442c      	add	r4, r5
 8028aa6:	fba0 2302 	umull	r2, r3, r0, r2
 8028aaa:	18e1      	adds	r1, r4, r3
 8028aac:	460b      	mov	r3, r1
 8028aae:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
 8028ab2:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
    int64_t f6f6_19 = f6   * (int64_t) f6_19;
 8028ab6:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8028aba:	4618      	mov	r0, r3
 8028abc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028ac0:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8028ac4:	461a      	mov	r2, r3
 8028ac6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028aca:	fb02 f501 	mul.w	r5, r2, r1
 8028ace:	fb00 f403 	mul.w	r4, r0, r3
 8028ad2:	442c      	add	r4, r5
 8028ad4:	fba0 2302 	umull	r2, r3, r0, r2
 8028ad8:	18e1      	adds	r1, r4, r3
 8028ada:	460b      	mov	r3, r1
 8028adc:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
 8028ae0:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
    int64_t f6f7_38 = f6   * (int64_t) f7_38;
 8028ae4:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8028ae8:	4618      	mov	r0, r3
 8028aea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028aee:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8028af2:	461a      	mov	r2, r3
 8028af4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028af8:	fb02 f501 	mul.w	r5, r2, r1
 8028afc:	fb00 f403 	mul.w	r4, r0, r3
 8028b00:	442c      	add	r4, r5
 8028b02:	fba0 2302 	umull	r2, r3, r0, r2
 8028b06:	18e1      	adds	r1, r4, r3
 8028b08:	460b      	mov	r3, r1
 8028b0a:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
 8028b0e:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
    int64_t f6f8_38 = f6_2 * (int64_t) f8_19;
 8028b12:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8028b16:	4618      	mov	r0, r3
 8028b18:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028b1c:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8028b20:	461a      	mov	r2, r3
 8028b22:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028b26:	fb02 f501 	mul.w	r5, r2, r1
 8028b2a:	fb00 f403 	mul.w	r4, r0, r3
 8028b2e:	442c      	add	r4, r5
 8028b30:	fba0 2302 	umull	r2, r3, r0, r2
 8028b34:	18e1      	adds	r1, r4, r3
 8028b36:	460b      	mov	r3, r1
 8028b38:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
 8028b3c:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
    int64_t f6f9_38 = f6   * (int64_t) f9_38;
 8028b40:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8028b44:	4618      	mov	r0, r3
 8028b46:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028b4a:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8028b4e:	461a      	mov	r2, r3
 8028b50:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028b54:	fb02 f501 	mul.w	r5, r2, r1
 8028b58:	fb00 f403 	mul.w	r4, r0, r3
 8028b5c:	442c      	add	r4, r5
 8028b5e:	fba0 2302 	umull	r2, r3, r0, r2
 8028b62:	18e1      	adds	r1, r4, r3
 8028b64:	460b      	mov	r3, r1
 8028b66:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
 8028b6a:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
    int64_t f7f7_38 = f7   * (int64_t) f7_38;
 8028b6e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8028b72:	4618      	mov	r0, r3
 8028b74:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028b78:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8028b7c:	461a      	mov	r2, r3
 8028b7e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028b82:	fb02 f501 	mul.w	r5, r2, r1
 8028b86:	fb00 f403 	mul.w	r4, r0, r3
 8028b8a:	442c      	add	r4, r5
 8028b8c:	fba0 2302 	umull	r2, r3, r0, r2
 8028b90:	18e1      	adds	r1, r4, r3
 8028b92:	460b      	mov	r3, r1
 8028b94:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
 8028b98:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
    int64_t f7f8_38 = f7_2 * (int64_t) f8_19;
 8028b9c:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8028ba0:	4618      	mov	r0, r3
 8028ba2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028ba6:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8028baa:	461a      	mov	r2, r3
 8028bac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028bb0:	fb02 f501 	mul.w	r5, r2, r1
 8028bb4:	fb00 f403 	mul.w	r4, r0, r3
 8028bb8:	442c      	add	r4, r5
 8028bba:	fba0 2302 	umull	r2, r3, r0, r2
 8028bbe:	18e1      	adds	r1, r4, r3
 8028bc0:	460b      	mov	r3, r1
 8028bc2:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
 8028bc6:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
    int64_t f7f9_76 = f7_2 * (int64_t) f9_38;
 8028bca:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8028bce:	4618      	mov	r0, r3
 8028bd0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028bd4:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8028bd8:	461a      	mov	r2, r3
 8028bda:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028bde:	fb02 f501 	mul.w	r5, r2, r1
 8028be2:	fb00 f403 	mul.w	r4, r0, r3
 8028be6:	442c      	add	r4, r5
 8028be8:	fba0 2302 	umull	r2, r3, r0, r2
 8028bec:	18e1      	adds	r1, r4, r3
 8028bee:	460b      	mov	r3, r1
 8028bf0:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
 8028bf4:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
    int64_t f8f8_19 = f8   * (int64_t) f8_19;
 8028bf8:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8028bfc:	4618      	mov	r0, r3
 8028bfe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028c02:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8028c06:	461a      	mov	r2, r3
 8028c08:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028c0c:	fb02 f501 	mul.w	r5, r2, r1
 8028c10:	fb00 f403 	mul.w	r4, r0, r3
 8028c14:	442c      	add	r4, r5
 8028c16:	fba0 2302 	umull	r2, r3, r0, r2
 8028c1a:	18e1      	adds	r1, r4, r3
 8028c1c:	460b      	mov	r3, r1
 8028c1e:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
 8028c22:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
    int64_t f8f9_38 = f8   * (int64_t) f9_38;
 8028c26:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8028c2a:	4618      	mov	r0, r3
 8028c2c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028c30:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8028c34:	461a      	mov	r2, r3
 8028c36:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028c3a:	fb02 f501 	mul.w	r5, r2, r1
 8028c3e:	fb00 f403 	mul.w	r4, r0, r3
 8028c42:	442c      	add	r4, r5
 8028c44:	fba0 2302 	umull	r2, r3, r0, r2
 8028c48:	18e1      	adds	r1, r4, r3
 8028c4a:	460b      	mov	r3, r1
 8028c4c:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
 8028c50:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
    int64_t f9f9_38 = f9   * (int64_t) f9_38;
 8028c54:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8028c58:	4618      	mov	r0, r3
 8028c5a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028c5e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8028c62:	461a      	mov	r2, r3
 8028c64:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028c68:	fb02 f501 	mul.w	r5, r2, r1
 8028c6c:	fb00 f403 	mul.w	r4, r0, r3
 8028c70:	442c      	add	r4, r5
 8028c72:	fba0 2302 	umull	r2, r3, r0, r2
 8028c76:	18e1      	adds	r1, r4, r3
 8028c78:	460b      	mov	r3, r1
 8028c7a:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
 8028c7e:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
    int64_t h0 = f0f0  + f1f9_76 + f2f8_38 + f3f7_76 + f4f6_38 + f5f5_38;
 8028c82:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8028c86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028c8a:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8028c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028c92:	eb10 0802 	adds.w	r8, r0, r2
 8028c96:	eb41 0903 	adc.w	r9, r1, r3
 8028c9a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8028c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028ca2:	eb18 0a02 	adds.w	sl, r8, r2
 8028ca6:	eb49 0b03 	adc.w	fp, r9, r3
 8028caa:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8028cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028cb2:	eb1a 0102 	adds.w	r1, sl, r2
 8028cb6:	f8c7 12d0 	str.w	r1, [r7, #720]	; 0x2d0
 8028cba:	eb4b 0303 	adc.w	r3, fp, r3
 8028cbe:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8028cc2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8028cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028cca:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 8028cce:	4621      	mov	r1, r4
 8028cd0:	1889      	adds	r1, r1, r2
 8028cd2:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 8028cd6:	4629      	mov	r1, r5
 8028cd8:	eb43 0101 	adc.w	r1, r3, r1
 8028cdc:	f8c7 12cc 	str.w	r1, [r7, #716]	; 0x2cc
 8028ce0:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 8028ce4:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	; 0x2c8
 8028ce8:	4621      	mov	r1, r4
 8028cea:	1851      	adds	r1, r2, r1
 8028cec:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 8028cf0:	4629      	mov	r1, r5
 8028cf2:	eb43 0101 	adc.w	r1, r3, r1
 8028cf6:	f8c7 1164 	str.w	r1, [r7, #356]	; 0x164
 8028cfa:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 8028cfe:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    int64_t h1 = f0f1_2 + f2f9_38 + f3f8_38 + f4f7_38 + f5f6_38;
 8028d02:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8028d06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028d0a:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8028d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028d12:	1884      	adds	r4, r0, r2
 8028d14:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 8028d18:	eb41 0303 	adc.w	r3, r1, r3
 8028d1c:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8028d20:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8028d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028d28:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 8028d2c:	4621      	mov	r1, r4
 8028d2e:	1889      	adds	r1, r1, r2
 8028d30:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 8028d34:	4629      	mov	r1, r5
 8028d36:	eb43 0101 	adc.w	r1, r3, r1
 8028d3a:	f8c7 12bc 	str.w	r1, [r7, #700]	; 0x2bc
 8028d3e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8028d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028d46:	e9d7 45ae 	ldrd	r4, r5, [r7, #696]	; 0x2b8
 8028d4a:	4621      	mov	r1, r4
 8028d4c:	1889      	adds	r1, r1, r2
 8028d4e:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8028d52:	4629      	mov	r1, r5
 8028d54:	eb43 0101 	adc.w	r1, r3, r1
 8028d58:	f8c7 12b4 	str.w	r1, [r7, #692]	; 0x2b4
 8028d5c:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 8028d60:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 8028d64:	4621      	mov	r1, r4
 8028d66:	1851      	adds	r1, r2, r1
 8028d68:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8028d6c:	4629      	mov	r1, r5
 8028d6e:	eb43 0101 	adc.w	r1, r3, r1
 8028d72:	f8c7 115c 	str.w	r1, [r7, #348]	; 0x15c
 8028d76:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 8028d7a:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    int64_t h2 = f0f2_2 + f1f1_2 + f3f9_76 + f4f8_38 + f5f7_76 + f6f6_19;
 8028d7e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8028d82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028d86:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8028d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028d8e:	1884      	adds	r4, r0, r2
 8028d90:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 8028d94:	eb41 0303 	adc.w	r3, r1, r3
 8028d98:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8028d9c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8028da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028da4:	e9d7 45aa 	ldrd	r4, r5, [r7, #680]	; 0x2a8
 8028da8:	4621      	mov	r1, r4
 8028daa:	1889      	adds	r1, r1, r2
 8028dac:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 8028db0:	4629      	mov	r1, r5
 8028db2:	eb43 0101 	adc.w	r1, r3, r1
 8028db6:	f8c7 12a4 	str.w	r1, [r7, #676]	; 0x2a4
 8028dba:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8028dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028dc2:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	; 0x2a0
 8028dc6:	4621      	mov	r1, r4
 8028dc8:	1889      	adds	r1, r1, r2
 8028dca:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8028dce:	4629      	mov	r1, r5
 8028dd0:	eb43 0101 	adc.w	r1, r3, r1
 8028dd4:	f8c7 129c 	str.w	r1, [r7, #668]	; 0x29c
 8028dd8:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 8028ddc:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 8028de0:	4621      	mov	r1, r4
 8028de2:	1889      	adds	r1, r1, r2
 8028de4:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8028de8:	4629      	mov	r1, r5
 8028dea:	eb43 0101 	adc.w	r1, r3, r1
 8028dee:	f8c7 1294 	str.w	r1, [r7, #660]	; 0x294
 8028df2:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 8028df6:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	; 0x290
 8028dfa:	4621      	mov	r1, r4
 8028dfc:	1851      	adds	r1, r2, r1
 8028dfe:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8028e02:	4629      	mov	r1, r5
 8028e04:	eb43 0101 	adc.w	r1, r3, r1
 8028e08:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 8028e0c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8028e10:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    int64_t h3 = f0f3_2 + f1f2_2 + f4f9_38 + f5f8_38 + f6f7_38;
 8028e14:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8028e18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028e1c:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8028e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028e24:	1884      	adds	r4, r0, r2
 8028e26:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 8028e2a:	eb41 0303 	adc.w	r3, r1, r3
 8028e2e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8028e32:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 8028e36:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 8028e3a:	4621      	mov	r1, r4
 8028e3c:	1889      	adds	r1, r1, r2
 8028e3e:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8028e42:	4629      	mov	r1, r5
 8028e44:	eb43 0101 	adc.w	r1, r3, r1
 8028e48:	f8c7 1284 	str.w	r1, [r7, #644]	; 0x284
 8028e4c:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 8028e50:	e9d7 45a0 	ldrd	r4, r5, [r7, #640]	; 0x280
 8028e54:	4621      	mov	r1, r4
 8028e56:	1889      	adds	r1, r1, r2
 8028e58:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8028e5c:	4629      	mov	r1, r5
 8028e5e:	eb43 0101 	adc.w	r1, r3, r1
 8028e62:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 8028e66:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 8028e6a:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	; 0x278
 8028e6e:	4621      	mov	r1, r4
 8028e70:	1851      	adds	r1, r2, r1
 8028e72:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8028e76:	4629      	mov	r1, r5
 8028e78:	eb43 0101 	adc.w	r1, r3, r1
 8028e7c:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8028e80:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8028e84:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    int64_t h4 = f0f4_2 + f1f3_4 + f2f2   + f5f9_76 + f6f8_38 + f7f7_38;
 8028e88:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8028e8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028e90:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8028e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028e98:	1884      	adds	r4, r0, r2
 8028e9a:	f8c7 4270 	str.w	r4, [r7, #624]	; 0x270
 8028e9e:	eb41 0303 	adc.w	r3, r1, r3
 8028ea2:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8028ea6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8028eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028eae:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 8028eb2:	4621      	mov	r1, r4
 8028eb4:	1889      	adds	r1, r1, r2
 8028eb6:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8028eba:	4629      	mov	r1, r5
 8028ebc:	eb43 0101 	adc.w	r1, r3, r1
 8028ec0:	f8c7 126c 	str.w	r1, [r7, #620]	; 0x26c
 8028ec4:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8028ec8:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 8028ecc:	4621      	mov	r1, r4
 8028ece:	1889      	adds	r1, r1, r2
 8028ed0:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8028ed4:	4629      	mov	r1, r5
 8028ed6:	eb43 0101 	adc.w	r1, r3, r1
 8028eda:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 8028ede:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8028ee2:	e9d7 4598 	ldrd	r4, r5, [r7, #608]	; 0x260
 8028ee6:	4621      	mov	r1, r4
 8028ee8:	1889      	adds	r1, r1, r2
 8028eea:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 8028eee:	4629      	mov	r1, r5
 8028ef0:	eb43 0101 	adc.w	r1, r3, r1
 8028ef4:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 8028ef8:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 8028efc:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 8028f00:	4621      	mov	r1, r4
 8028f02:	1851      	adds	r1, r2, r1
 8028f04:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8028f08:	4629      	mov	r1, r5
 8028f0a:	eb43 0101 	adc.w	r1, r3, r1
 8028f0e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8028f12:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8028f16:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    int64_t h5 = f0f5_2 + f1f4_2 + f2f3_2 + f6f9_38 + f7f8_38;
 8028f1a:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8028f1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028f22:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8028f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028f2a:	1884      	adds	r4, r0, r2
 8028f2c:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 8028f30:	eb41 0303 	adc.w	r3, r1, r3
 8028f34:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8028f38:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8028f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028f40:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	; 0x250
 8028f44:	4621      	mov	r1, r4
 8028f46:	1889      	adds	r1, r1, r2
 8028f48:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8028f4c:	4629      	mov	r1, r5
 8028f4e:	eb43 0101 	adc.w	r1, r3, r1
 8028f52:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 8028f56:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 8028f5a:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 8028f5e:	4621      	mov	r1, r4
 8028f60:	1889      	adds	r1, r1, r2
 8028f62:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 8028f66:	4629      	mov	r1, r5
 8028f68:	eb43 0101 	adc.w	r1, r3, r1
 8028f6c:	f8c7 1244 	str.w	r1, [r7, #580]	; 0x244
 8028f70:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 8028f74:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 8028f78:	4621      	mov	r1, r4
 8028f7a:	1851      	adds	r1, r2, r1
 8028f7c:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8028f80:	4629      	mov	r1, r5
 8028f82:	eb43 0101 	adc.w	r1, r3, r1
 8028f86:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 8028f8a:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8028f8e:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    int64_t h6 = f0f6_2 + f1f5_4 + f2f4_2 + f3f3_2 + f7f9_76 + f8f8_19;
 8028f92:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8028f96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028f9a:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8028f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028fa2:	1884      	adds	r4, r0, r2
 8028fa4:	f8c7 4238 	str.w	r4, [r7, #568]	; 0x238
 8028fa8:	eb41 0303 	adc.w	r3, r1, r3
 8028fac:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8028fb0:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8028fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028fb8:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 8028fbc:	4621      	mov	r1, r4
 8028fbe:	1889      	adds	r1, r1, r2
 8028fc0:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8028fc4:	4629      	mov	r1, r5
 8028fc6:	eb43 0101 	adc.w	r1, r3, r1
 8028fca:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 8028fce:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8028fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028fd6:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	; 0x230
 8028fda:	4621      	mov	r1, r4
 8028fdc:	1889      	adds	r1, r1, r2
 8028fde:	f8c7 1228 	str.w	r1, [r7, #552]	; 0x228
 8028fe2:	4629      	mov	r1, r5
 8028fe4:	eb43 0101 	adc.w	r1, r3, r1
 8028fe8:	f8c7 122c 	str.w	r1, [r7, #556]	; 0x22c
 8028fec:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 8028ff0:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 8028ff4:	4621      	mov	r1, r4
 8028ff6:	1889      	adds	r1, r1, r2
 8028ff8:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8028ffc:	4629      	mov	r1, r5
 8028ffe:	eb43 0101 	adc.w	r1, r3, r1
 8029002:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 8029006:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 802900a:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 802900e:	4621      	mov	r1, r4
 8029010:	1851      	adds	r1, r2, r1
 8029012:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8029016:	4629      	mov	r1, r5
 8029018:	eb43 0101 	adc.w	r1, r3, r1
 802901c:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8029020:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8029024:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    int64_t h7 = f0f7_2 + f1f6_2 + f2f5_2 + f3f4_2 + f8f9_38;
 8029028:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 802902c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8029030:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8029034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029038:	1884      	adds	r4, r0, r2
 802903a:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 802903e:	eb41 0303 	adc.w	r3, r1, r3
 8029042:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8029046:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 802904a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802904e:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8029052:	4621      	mov	r1, r4
 8029054:	1889      	adds	r1, r1, r2
 8029056:	f8c7 1210 	str.w	r1, [r7, #528]	; 0x210
 802905a:	4629      	mov	r1, r5
 802905c:	eb43 0101 	adc.w	r1, r3, r1
 8029060:	f8c7 1214 	str.w	r1, [r7, #532]	; 0x214
 8029064:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8029068:	e9d3 2300 	ldrd	r2, r3, [r3]
 802906c:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 8029070:	4621      	mov	r1, r4
 8029072:	1889      	adds	r1, r1, r2
 8029074:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8029078:	4629      	mov	r1, r5
 802907a:	eb43 0101 	adc.w	r1, r3, r1
 802907e:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 8029082:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8029086:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 802908a:	4621      	mov	r1, r4
 802908c:	1851      	adds	r1, r2, r1
 802908e:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8029092:	4629      	mov	r1, r5
 8029094:	eb43 0101 	adc.w	r1, r3, r1
 8029098:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 802909c:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 80290a0:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    int64_t h8 = f0f8_2 + f1f7_4 + f2f6_2 + f3f5_4 + f4f4   + f9f9_38;
 80290a4:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80290a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80290ac:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80290b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80290b4:	1884      	adds	r4, r0, r2
 80290b6:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 80290ba:	eb41 0303 	adc.w	r3, r1, r3
 80290be:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80290c2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80290c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80290ca:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 80290ce:	4621      	mov	r1, r4
 80290d0:	1889      	adds	r1, r1, r2
 80290d2:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 80290d6:	4629      	mov	r1, r5
 80290d8:	eb43 0101 	adc.w	r1, r3, r1
 80290dc:	f8c7 11fc 	str.w	r1, [r7, #508]	; 0x1fc
 80290e0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80290e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80290e8:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	; 0x1f8
 80290ec:	4621      	mov	r1, r4
 80290ee:	1889      	adds	r1, r1, r2
 80290f0:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 80290f4:	4629      	mov	r1, r5
 80290f6:	eb43 0101 	adc.w	r1, r3, r1
 80290fa:	f8c7 11f4 	str.w	r1, [r7, #500]	; 0x1f4
 80290fe:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8029102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029106:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 802910a:	4621      	mov	r1, r4
 802910c:	1889      	adds	r1, r1, r2
 802910e:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8029112:	4629      	mov	r1, r5
 8029114:	eb43 0101 	adc.w	r1, r3, r1
 8029118:	f8c7 11ec 	str.w	r1, [r7, #492]	; 0x1ec
 802911c:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 8029120:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8029124:	4621      	mov	r1, r4
 8029126:	1851      	adds	r1, r2, r1
 8029128:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 802912c:	4629      	mov	r1, r5
 802912e:	eb43 0101 	adc.w	r1, r3, r1
 8029132:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8029136:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 802913a:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    int64_t h9 = f0f9_2 + f1f8_2 + f2f7_2 + f3f6_2 + f4f5_2;
 802913e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8029142:	e9d3 0100 	ldrd	r0, r1, [r3]
 8029146:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 802914a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802914e:	1884      	adds	r4, r0, r2
 8029150:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 8029154:	eb41 0303 	adc.w	r3, r1, r3
 8029158:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 802915c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8029160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029164:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8029168:	4621      	mov	r1, r4
 802916a:	1889      	adds	r1, r1, r2
 802916c:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 8029170:	4629      	mov	r1, r5
 8029172:	eb43 0101 	adc.w	r1, r3, r1
 8029176:	f8c7 11dc 	str.w	r1, [r7, #476]	; 0x1dc
 802917a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 802917e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029182:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 8029186:	4621      	mov	r1, r4
 8029188:	1889      	adds	r1, r1, r2
 802918a:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 802918e:	4629      	mov	r1, r5
 8029190:	eb43 0101 	adc.w	r1, r3, r1
 8029194:	f8c7 11d4 	str.w	r1, [r7, #468]	; 0x1d4
 8029198:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 802919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80291a0:	e9d7 4574 	ldrd	r4, r5, [r7, #464]	; 0x1d0
 80291a4:	4621      	mov	r1, r4
 80291a6:	1851      	adds	r1, r2, r1
 80291a8:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 80291ac:	4629      	mov	r1, r5
 80291ae:	eb43 0101 	adc.w	r1, r3, r1
 80291b2:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 80291b6:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 80291ba:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    int64_t carry5;
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;
    h0 += h0;
 80291be:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 80291c2:	1891      	adds	r1, r2, r2
 80291c4:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80291c8:	415b      	adcs	r3, r3
 80291ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80291ce:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80291d2:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    h1 += h1;
 80291d6:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 80291da:	1891      	adds	r1, r2, r2
 80291dc:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80291e0:	415b      	adcs	r3, r3
 80291e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80291e6:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80291ea:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    h2 += h2;
 80291ee:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 80291f2:	1891      	adds	r1, r2, r2
 80291f4:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80291f8:	415b      	adcs	r3, r3
 80291fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80291fe:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8029202:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    h3 += h3;
 8029206:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 802920a:	1891      	adds	r1, r2, r2
 802920c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8029210:	415b      	adcs	r3, r3
 8029212:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8029216:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 802921a:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    h4 += h4;
 802921e:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8029222:	1891      	adds	r1, r2, r2
 8029224:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8029228:	415b      	adcs	r3, r3
 802922a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 802922e:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8029232:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    h5 += h5;
 8029236:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 802923a:	1891      	adds	r1, r2, r2
 802923c:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8029240:	415b      	adcs	r3, r3
 8029242:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8029246:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 802924a:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    h6 += h6;
 802924e:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8029252:	1891      	adds	r1, r2, r2
 8029254:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8029258:	415b      	adcs	r3, r3
 802925a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802925e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8029262:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    h7 += h7;
 8029266:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 802926a:	1891      	adds	r1, r2, r2
 802926c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8029270:	415b      	adcs	r3, r3
 8029272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8029276:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 802927a:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    h8 += h8;
 802927e:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 8029282:	1891      	adds	r1, r2, r2
 8029284:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8029288:	415b      	adcs	r3, r3
 802928a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 802928e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8029292:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    h9 += h9;
 8029296:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 802929a:	1891      	adds	r1, r2, r2
 802929c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80292a0:	415b      	adcs	r3, r3
 80292a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80292a6:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80292aa:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 80292ae:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 80292b2:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80292b6:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 80292ba:	f143 0300 	adc.w	r3, r3, #0
 80292be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80292c2:	f04f 0200 	mov.w	r2, #0
 80292c6:	f04f 0300 	mov.w	r3, #0
 80292ca:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 80292ce:	4621      	mov	r1, r4
 80292d0:	0e8a      	lsrs	r2, r1, #26
 80292d2:	4629      	mov	r1, r5
 80292d4:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80292d8:	4629      	mov	r1, r5
 80292da:	168b      	asrs	r3, r1, #26
 80292dc:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
    h1 += carry0;
 80292e0:	e9d7 01dc 	ldrd	r0, r1, [r7, #880]	; 0x370
 80292e4:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 80292e8:	1884      	adds	r4, r0, r2
 80292ea:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80292ee:	eb41 0303 	adc.w	r3, r1, r3
 80292f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80292f6:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80292fa:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    h0 -= carry0 << 26;
 80292fe:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8029302:	f04f 0000 	mov.w	r0, #0
 8029306:	f04f 0100 	mov.w	r1, #0
 802930a:	0699      	lsls	r1, r3, #26
 802930c:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8029310:	0690      	lsls	r0, r2, #26
 8029312:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8029316:	1a14      	subs	r4, r2, r0
 8029318:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 802931c:	eb63 0301 	sbc.w	r3, r3, r1
 8029320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8029324:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8029328:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 802932c:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8029330:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8029334:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 8029338:	f143 0300 	adc.w	r3, r3, #0
 802933c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8029340:	f04f 0200 	mov.w	r2, #0
 8029344:	f04f 0300 	mov.w	r3, #0
 8029348:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 802934c:	4621      	mov	r1, r4
 802934e:	0e8a      	lsrs	r2, r1, #26
 8029350:	4629      	mov	r1, r5
 8029352:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8029356:	4629      	mov	r1, r5
 8029358:	168b      	asrs	r3, r1, #26
 802935a:	e9c7 23c8 	strd	r2, r3, [r7, #800]	; 0x320
    h5 += carry4;
 802935e:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	; 0x350
 8029362:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8029366:	1884      	adds	r4, r0, r2
 8029368:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 802936c:	eb41 0303 	adc.w	r3, r1, r3
 8029370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8029374:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8029378:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    h4 -= carry4 << 26;
 802937c:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8029380:	f04f 0000 	mov.w	r0, #0
 8029384:	f04f 0100 	mov.w	r1, #0
 8029388:	0699      	lsls	r1, r3, #26
 802938a:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 802938e:	0690      	lsls	r0, r2, #26
 8029390:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8029394:	1a14      	subs	r4, r2, r0
 8029396:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 802939a:	eb63 0301 	sbc.w	r3, r3, r1
 802939e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80293a2:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80293a6:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 80293aa:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 80293ae:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 80293b2:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 80293b6:	f143 0300 	adc.w	r3, r3, #0
 80293ba:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80293be:	f04f 0200 	mov.w	r2, #0
 80293c2:	f04f 0300 	mov.w	r3, #0
 80293c6:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 80293ca:	4621      	mov	r1, r4
 80293cc:	0e4a      	lsrs	r2, r1, #25
 80293ce:	4629      	mov	r1, r5
 80293d0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80293d4:	4629      	mov	r1, r5
 80293d6:	164b      	asrs	r3, r1, #25
 80293d8:	e9c7 23c6 	strd	r2, r3, [r7, #792]	; 0x318
    h2 += carry1;
 80293dc:	e9d7 01da 	ldrd	r0, r1, [r7, #872]	; 0x368
 80293e0:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 80293e4:	1884      	adds	r4, r0, r2
 80293e6:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80293ea:	eb41 0303 	adc.w	r3, r1, r3
 80293ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80293f2:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80293f6:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    h1 -= carry1 << 25;
 80293fa:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 80293fe:	f04f 0000 	mov.w	r0, #0
 8029402:	f04f 0100 	mov.w	r1, #0
 8029406:	0659      	lsls	r1, r3, #25
 8029408:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 802940c:	0650      	lsls	r0, r2, #25
 802940e:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8029412:	1a14      	subs	r4, r2, r0
 8029414:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8029418:	eb63 0301 	sbc.w	r3, r3, r1
 802941c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8029420:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8029424:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 8029428:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 802942c:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8029430:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8029434:	f143 0300 	adc.w	r3, r3, #0
 8029438:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 802943c:	f04f 0200 	mov.w	r2, #0
 8029440:	f04f 0300 	mov.w	r3, #0
 8029444:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 8029448:	4621      	mov	r1, r4
 802944a:	0e4a      	lsrs	r2, r1, #25
 802944c:	4629      	mov	r1, r5
 802944e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8029452:	4629      	mov	r1, r5
 8029454:	164b      	asrs	r3, r1, #25
 8029456:	e9c7 23c4 	strd	r2, r3, [r7, #784]	; 0x310
    h6 += carry5;
 802945a:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	; 0x348
 802945e:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8029462:	1884      	adds	r4, r0, r2
 8029464:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8029468:	eb41 0303 	adc.w	r3, r1, r3
 802946c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8029470:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8029474:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    h5 -= carry5 << 25;
 8029478:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 802947c:	f04f 0000 	mov.w	r0, #0
 8029480:	f04f 0100 	mov.w	r1, #0
 8029484:	0659      	lsls	r1, r3, #25
 8029486:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 802948a:	0650      	lsls	r0, r2, #25
 802948c:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8029490:	1a14      	subs	r4, r2, r0
 8029492:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8029496:	eb63 0301 	sbc.w	r3, r3, r1
 802949a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802949e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80294a2:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 80294a6:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 80294aa:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80294ae:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 80294b2:	f143 0300 	adc.w	r3, r3, #0
 80294b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80294ba:	f04f 0200 	mov.w	r2, #0
 80294be:	f04f 0300 	mov.w	r3, #0
 80294c2:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80294c6:	4621      	mov	r1, r4
 80294c8:	0e8a      	lsrs	r2, r1, #26
 80294ca:	4629      	mov	r1, r5
 80294cc:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80294d0:	4629      	mov	r1, r5
 80294d2:	168b      	asrs	r3, r1, #26
 80294d4:	e9c7 23c2 	strd	r2, r3, [r7, #776]	; 0x308
    h3 += carry2;
 80294d8:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 80294dc:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 80294e0:	1884      	adds	r4, r0, r2
 80294e2:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 80294e6:	eb41 0303 	adc.w	r3, r1, r3
 80294ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80294ee:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80294f2:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    h2 -= carry2 << 26;
 80294f6:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 80294fa:	f04f 0000 	mov.w	r0, #0
 80294fe:	f04f 0100 	mov.w	r1, #0
 8029502:	0699      	lsls	r1, r3, #26
 8029504:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8029508:	0690      	lsls	r0, r2, #26
 802950a:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 802950e:	1a14      	subs	r4, r2, r0
 8029510:	67bc      	str	r4, [r7, #120]	; 0x78
 8029512:	eb63 0301 	sbc.w	r3, r3, r1
 8029516:	67fb      	str	r3, [r7, #124]	; 0x7c
 8029518:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 802951c:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 8029520:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8029524:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8029528:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 802952c:	f143 0300 	adc.w	r3, r3, #0
 8029530:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8029534:	f04f 0200 	mov.w	r2, #0
 8029538:	f04f 0300 	mov.w	r3, #0
 802953c:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8029540:	4621      	mov	r1, r4
 8029542:	0e8a      	lsrs	r2, r1, #26
 8029544:	4629      	mov	r1, r5
 8029546:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 802954a:	4629      	mov	r1, r5
 802954c:	168b      	asrs	r3, r1, #26
 802954e:	e9c7 23c0 	strd	r2, r3, [r7, #768]	; 0x300
    h7 += carry6;
 8029552:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8029556:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 802955a:	1884      	adds	r4, r0, r2
 802955c:	673c      	str	r4, [r7, #112]	; 0x70
 802955e:	eb41 0303 	adc.w	r3, r1, r3
 8029562:	677b      	str	r3, [r7, #116]	; 0x74
 8029564:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8029568:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    h6 -= carry6 << 26;
 802956c:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8029570:	f04f 0000 	mov.w	r0, #0
 8029574:	f04f 0100 	mov.w	r1, #0
 8029578:	0699      	lsls	r1, r3, #26
 802957a:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 802957e:	0690      	lsls	r0, r2, #26
 8029580:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8029584:	1a14      	subs	r4, r2, r0
 8029586:	66bc      	str	r4, [r7, #104]	; 0x68
 8029588:	eb63 0301 	sbc.w	r3, r3, r1
 802958c:	66fb      	str	r3, [r7, #108]	; 0x6c
 802958e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8029592:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 8029596:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 802959a:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 802959e:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 80295a2:	f143 0300 	adc.w	r3, r3, #0
 80295a6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80295aa:	f04f 0200 	mov.w	r2, #0
 80295ae:	f04f 0300 	mov.w	r3, #0
 80295b2:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 80295b6:	4621      	mov	r1, r4
 80295b8:	0e4a      	lsrs	r2, r1, #25
 80295ba:	4629      	mov	r1, r5
 80295bc:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80295c0:	4629      	mov	r1, r5
 80295c2:	164b      	asrs	r3, r1, #25
 80295c4:	e9c7 23be 	strd	r2, r3, [r7, #760]	; 0x2f8
    h4 += carry3;
 80295c8:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	; 0x358
 80295cc:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 80295d0:	1884      	adds	r4, r0, r2
 80295d2:	663c      	str	r4, [r7, #96]	; 0x60
 80295d4:	eb41 0303 	adc.w	r3, r1, r3
 80295d8:	667b      	str	r3, [r7, #100]	; 0x64
 80295da:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80295de:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    h3 -= carry3 << 25;
 80295e2:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 80295e6:	f04f 0000 	mov.w	r0, #0
 80295ea:	f04f 0100 	mov.w	r1, #0
 80295ee:	0659      	lsls	r1, r3, #25
 80295f0:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80295f4:	0650      	lsls	r0, r2, #25
 80295f6:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 80295fa:	1a14      	subs	r4, r2, r0
 80295fc:	65bc      	str	r4, [r7, #88]	; 0x58
 80295fe:	eb63 0301 	sbc.w	r3, r3, r1
 8029602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029604:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8029608:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 802960c:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8029610:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8029614:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8029618:	f143 0300 	adc.w	r3, r3, #0
 802961c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8029620:	f04f 0200 	mov.w	r2, #0
 8029624:	f04f 0300 	mov.w	r3, #0
 8029628:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 802962c:	4621      	mov	r1, r4
 802962e:	0e4a      	lsrs	r2, r1, #25
 8029630:	4629      	mov	r1, r5
 8029632:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8029636:	4629      	mov	r1, r5
 8029638:	164b      	asrs	r3, r1, #25
 802963a:	e9c7 23bc 	strd	r2, r3, [r7, #752]	; 0x2f0
    h8 += carry7;
 802963e:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 8029642:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8029646:	1884      	adds	r4, r0, r2
 8029648:	653c      	str	r4, [r7, #80]	; 0x50
 802964a:	eb41 0303 	adc.w	r3, r1, r3
 802964e:	657b      	str	r3, [r7, #84]	; 0x54
 8029650:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8029654:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    h7 -= carry7 << 25;
 8029658:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 802965c:	f04f 0000 	mov.w	r0, #0
 8029660:	f04f 0100 	mov.w	r1, #0
 8029664:	0659      	lsls	r1, r3, #25
 8029666:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 802966a:	0650      	lsls	r0, r2, #25
 802966c:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8029670:	1a14      	subs	r4, r2, r0
 8029672:	64bc      	str	r4, [r7, #72]	; 0x48
 8029674:	eb63 0301 	sbc.w	r3, r3, r1
 8029678:	64fb      	str	r3, [r7, #76]	; 0x4c
 802967a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 802967e:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8029682:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8029686:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 802968a:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 802968e:	f143 0300 	adc.w	r3, r3, #0
 8029692:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8029696:	f04f 0200 	mov.w	r2, #0
 802969a:	f04f 0300 	mov.w	r3, #0
 802969e:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 80296a2:	4621      	mov	r1, r4
 80296a4:	0e8a      	lsrs	r2, r1, #26
 80296a6:	4629      	mov	r1, r5
 80296a8:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80296ac:	4629      	mov	r1, r5
 80296ae:	168b      	asrs	r3, r1, #26
 80296b0:	e9c7 23c8 	strd	r2, r3, [r7, #800]	; 0x320
    h5 += carry4;
 80296b4:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	; 0x350
 80296b8:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 80296bc:	1884      	adds	r4, r0, r2
 80296be:	643c      	str	r4, [r7, #64]	; 0x40
 80296c0:	eb41 0303 	adc.w	r3, r1, r3
 80296c4:	647b      	str	r3, [r7, #68]	; 0x44
 80296c6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80296ca:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    h4 -= carry4 << 26;
 80296ce:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 80296d2:	f04f 0000 	mov.w	r0, #0
 80296d6:	f04f 0100 	mov.w	r1, #0
 80296da:	0699      	lsls	r1, r3, #26
 80296dc:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80296e0:	0690      	lsls	r0, r2, #26
 80296e2:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 80296e6:	1a14      	subs	r4, r2, r0
 80296e8:	63bc      	str	r4, [r7, #56]	; 0x38
 80296ea:	eb63 0301 	sbc.w	r3, r3, r1
 80296ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80296f0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80296f4:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 80296f8:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 80296fc:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8029700:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8029704:	f143 0300 	adc.w	r3, r3, #0
 8029708:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 802970c:	f04f 0200 	mov.w	r2, #0
 8029710:	f04f 0300 	mov.w	r3, #0
 8029714:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 8029718:	4621      	mov	r1, r4
 802971a:	0e8a      	lsrs	r2, r1, #26
 802971c:	4629      	mov	r1, r5
 802971e:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8029722:	4629      	mov	r1, r5
 8029724:	168b      	asrs	r3, r1, #26
 8029726:	e9c7 23ba 	strd	r2, r3, [r7, #744]	; 0x2e8
    h9 += carry8;
 802972a:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 802972e:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8029732:	1884      	adds	r4, r0, r2
 8029734:	633c      	str	r4, [r7, #48]	; 0x30
 8029736:	eb41 0303 	adc.w	r3, r1, r3
 802973a:	637b      	str	r3, [r7, #52]	; 0x34
 802973c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8029740:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    h8 -= carry8 << 26;
 8029744:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8029748:	f04f 0000 	mov.w	r0, #0
 802974c:	f04f 0100 	mov.w	r1, #0
 8029750:	0699      	lsls	r1, r3, #26
 8029752:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8029756:	0690      	lsls	r0, r2, #26
 8029758:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 802975c:	1a14      	subs	r4, r2, r0
 802975e:	62bc      	str	r4, [r7, #40]	; 0x28
 8029760:	eb63 0301 	sbc.w	r3, r3, r1
 8029764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029766:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 802976a:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 802976e:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 8029772:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8029776:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 802977a:	f143 0300 	adc.w	r3, r3, #0
 802977e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8029782:	f04f 0200 	mov.w	r2, #0
 8029786:	f04f 0300 	mov.w	r3, #0
 802978a:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 802978e:	4621      	mov	r1, r4
 8029790:	0e4a      	lsrs	r2, r1, #25
 8029792:	4629      	mov	r1, r5
 8029794:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8029798:	4629      	mov	r1, r5
 802979a:	164b      	asrs	r3, r1, #25
 802979c:	e9c7 23b8 	strd	r2, r3, [r7, #736]	; 0x2e0
    h0 += carry9 * 19;
 80297a0:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 80297a4:	4622      	mov	r2, r4
 80297a6:	462b      	mov	r3, r5
 80297a8:	f04f 0000 	mov.w	r0, #0
 80297ac:	f04f 0100 	mov.w	r1, #0
 80297b0:	00d9      	lsls	r1, r3, #3
 80297b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80297b6:	00d0      	lsls	r0, r2, #3
 80297b8:	4602      	mov	r2, r0
 80297ba:	460b      	mov	r3, r1
 80297bc:	1912      	adds	r2, r2, r4
 80297be:	eb45 0303 	adc.w	r3, r5, r3
 80297c2:	1891      	adds	r1, r2, r2
 80297c4:	6239      	str	r1, [r7, #32]
 80297c6:	415b      	adcs	r3, r3
 80297c8:	627b      	str	r3, [r7, #36]	; 0x24
 80297ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80297ce:	1911      	adds	r1, r2, r4
 80297d0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 80297d4:	416b      	adcs	r3, r5
 80297d6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80297da:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 80297de:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 80297e2:	4621      	mov	r1, r4
 80297e4:	1851      	adds	r1, r2, r1
 80297e6:	61b9      	str	r1, [r7, #24]
 80297e8:	4629      	mov	r1, r5
 80297ea:	eb43 0101 	adc.w	r1, r3, r1
 80297ee:	61f9      	str	r1, [r7, #28]
 80297f0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80297f4:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    h9 -= carry9 << 25;
 80297f8:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 80297fc:	f04f 0200 	mov.w	r2, #0
 8029800:	f04f 0300 	mov.w	r3, #0
 8029804:	064b      	lsls	r3, r1, #25
 8029806:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 802980a:	0642      	lsls	r2, r0, #25
 802980c:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 8029810:	1a84      	subs	r4, r0, r2
 8029812:	613c      	str	r4, [r7, #16]
 8029814:	eb61 0303 	sbc.w	r3, r1, r3
 8029818:	617b      	str	r3, [r7, #20]
 802981a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 802981e:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8029822:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8029826:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 802982a:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 802982e:	f143 0300 	adc.w	r3, r3, #0
 8029832:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8029836:	f04f 0200 	mov.w	r2, #0
 802983a:	f04f 0300 	mov.w	r3, #0
 802983e:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8029842:	4621      	mov	r1, r4
 8029844:	0e8a      	lsrs	r2, r1, #26
 8029846:	4629      	mov	r1, r5
 8029848:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 802984c:	4629      	mov	r1, r5
 802984e:	168b      	asrs	r3, r1, #26
 8029850:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
    h1 += carry0;
 8029854:	e9d7 01dc 	ldrd	r0, r1, [r7, #880]	; 0x370
 8029858:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 802985c:	1884      	adds	r4, r0, r2
 802985e:	60bc      	str	r4, [r7, #8]
 8029860:	eb41 0303 	adc.w	r3, r1, r3
 8029864:	60fb      	str	r3, [r7, #12]
 8029866:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 802986a:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    h0 -= carry0 << 26;
 802986e:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 8029872:	f04f 0200 	mov.w	r2, #0
 8029876:	f04f 0300 	mov.w	r3, #0
 802987a:	068b      	lsls	r3, r1, #26
 802987c:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8029880:	0682      	lsls	r2, r0, #26
 8029882:	e9d7 01de 	ldrd	r0, r1, [r7, #888]	; 0x378
 8029886:	1a84      	subs	r4, r0, r2
 8029888:	603c      	str	r4, [r7, #0]
 802988a:	eb61 0303 	sbc.w	r3, r1, r3
 802988e:	607b      	str	r3, [r7, #4]
 8029890:	e9d7 3400 	ldrd	r3, r4, [r7]
 8029894:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    h[0] = (int32_t) h0;
 8029898:	f507 735e 	add.w	r3, r7, #888	; 0x378
 802989c:	681a      	ldr	r2, [r3, #0]
 802989e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80298a2:	681b      	ldr	r3, [r3, #0]
 80298a4:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 80298a6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80298aa:	681b      	ldr	r3, [r3, #0]
 80298ac:	3304      	adds	r3, #4
 80298ae:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80298b2:	6812      	ldr	r2, [r2, #0]
 80298b4:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 80298b6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80298ba:	681b      	ldr	r3, [r3, #0]
 80298bc:	3308      	adds	r3, #8
 80298be:	f507 725a 	add.w	r2, r7, #872	; 0x368
 80298c2:	6812      	ldr	r2, [r2, #0]
 80298c4:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 80298c6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80298ca:	681b      	ldr	r3, [r3, #0]
 80298cc:	330c      	adds	r3, #12
 80298ce:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80298d2:	6812      	ldr	r2, [r2, #0]
 80298d4:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 80298d6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80298da:	681b      	ldr	r3, [r3, #0]
 80298dc:	3310      	adds	r3, #16
 80298de:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80298e2:	6812      	ldr	r2, [r2, #0]
 80298e4:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 80298e6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80298ea:	681b      	ldr	r3, [r3, #0]
 80298ec:	3314      	adds	r3, #20
 80298ee:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80298f2:	6812      	ldr	r2, [r2, #0]
 80298f4:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 80298f6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80298fa:	681b      	ldr	r3, [r3, #0]
 80298fc:	3318      	adds	r3, #24
 80298fe:	f507 7252 	add.w	r2, r7, #840	; 0x348
 8029902:	6812      	ldr	r2, [r2, #0]
 8029904:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 8029906:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 802990a:	681b      	ldr	r3, [r3, #0]
 802990c:	331c      	adds	r3, #28
 802990e:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8029912:	6812      	ldr	r2, [r2, #0]
 8029914:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 8029916:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 802991a:	681b      	ldr	r3, [r3, #0]
 802991c:	3320      	adds	r3, #32
 802991e:	f507 724e 	add.w	r2, r7, #824	; 0x338
 8029922:	6812      	ldr	r2, [r2, #0]
 8029924:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 8029926:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 802992a:	681b      	ldr	r3, [r3, #0]
 802992c:	3324      	adds	r3, #36	; 0x24
 802992e:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8029932:	6812      	ldr	r2, [r2, #0]
 8029934:	601a      	str	r2, [r3, #0]
}
 8029936:	bf00      	nop
 8029938:	f207 579c 	addw	r7, r7, #1436	; 0x59c
 802993c:	46bd      	mov	sp, r7
 802993e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8029942:	4770      	bx	lr

08029944 <fe_sub>:

Postconditions:
   |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

void fe_sub(fe h, const fe f, const fe g) {
 8029944:	b480      	push	{r7}
 8029946:	b0a3      	sub	sp, #140	; 0x8c
 8029948:	af00      	add	r7, sp, #0
 802994a:	60f8      	str	r0, [r7, #12]
 802994c:	60b9      	str	r1, [r7, #8]
 802994e:	607a      	str	r2, [r7, #4]
    int32_t f0 = f[0];
 8029950:	68bb      	ldr	r3, [r7, #8]
 8029952:	681b      	ldr	r3, [r3, #0]
 8029954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    int32_t f1 = f[1];
 8029958:	68bb      	ldr	r3, [r7, #8]
 802995a:	685b      	ldr	r3, [r3, #4]
 802995c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int32_t f2 = f[2];
 8029960:	68bb      	ldr	r3, [r7, #8]
 8029962:	689b      	ldr	r3, [r3, #8]
 8029964:	67fb      	str	r3, [r7, #124]	; 0x7c
    int32_t f3 = f[3];
 8029966:	68bb      	ldr	r3, [r7, #8]
 8029968:	68db      	ldr	r3, [r3, #12]
 802996a:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t f4 = f[4];
 802996c:	68bb      	ldr	r3, [r7, #8]
 802996e:	691b      	ldr	r3, [r3, #16]
 8029970:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t f5 = f[5];
 8029972:	68bb      	ldr	r3, [r7, #8]
 8029974:	695b      	ldr	r3, [r3, #20]
 8029976:	673b      	str	r3, [r7, #112]	; 0x70
    int32_t f6 = f[6];
 8029978:	68bb      	ldr	r3, [r7, #8]
 802997a:	699b      	ldr	r3, [r3, #24]
 802997c:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t f7 = f[7];
 802997e:	68bb      	ldr	r3, [r7, #8]
 8029980:	69db      	ldr	r3, [r3, #28]
 8029982:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t f8 = f[8];
 8029984:	68bb      	ldr	r3, [r7, #8]
 8029986:	6a1b      	ldr	r3, [r3, #32]
 8029988:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t f9 = f[9];
 802998a:	68bb      	ldr	r3, [r7, #8]
 802998c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802998e:	663b      	str	r3, [r7, #96]	; 0x60
    int32_t g0 = g[0];
 8029990:	687b      	ldr	r3, [r7, #4]
 8029992:	681b      	ldr	r3, [r3, #0]
 8029994:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t g1 = g[1];
 8029996:	687b      	ldr	r3, [r7, #4]
 8029998:	685b      	ldr	r3, [r3, #4]
 802999a:	65bb      	str	r3, [r7, #88]	; 0x58
    int32_t g2 = g[2];
 802999c:	687b      	ldr	r3, [r7, #4]
 802999e:	689b      	ldr	r3, [r3, #8]
 80299a0:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t g3 = g[3];
 80299a2:	687b      	ldr	r3, [r7, #4]
 80299a4:	68db      	ldr	r3, [r3, #12]
 80299a6:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t g4 = g[4];
 80299a8:	687b      	ldr	r3, [r7, #4]
 80299aa:	691b      	ldr	r3, [r3, #16]
 80299ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t g5 = g[5];
 80299ae:	687b      	ldr	r3, [r7, #4]
 80299b0:	695b      	ldr	r3, [r3, #20]
 80299b2:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t g6 = g[6];
 80299b4:	687b      	ldr	r3, [r7, #4]
 80299b6:	699b      	ldr	r3, [r3, #24]
 80299b8:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t g7 = g[7];
 80299ba:	687b      	ldr	r3, [r7, #4]
 80299bc:	69db      	ldr	r3, [r3, #28]
 80299be:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t g8 = g[8];
 80299c0:	687b      	ldr	r3, [r7, #4]
 80299c2:	6a1b      	ldr	r3, [r3, #32]
 80299c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t g9 = g[9];
 80299c6:	687b      	ldr	r3, [r7, #4]
 80299c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80299ca:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t h0 = f0 - g0;
 80299cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80299d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80299d2:	1ad3      	subs	r3, r2, r3
 80299d4:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t h1 = f1 - g1;
 80299d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80299da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80299dc:	1ad3      	subs	r3, r2, r3
 80299de:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t h2 = f2 - g2;
 80299e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80299e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80299e4:	1ad3      	subs	r3, r2, r3
 80299e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t h3 = f3 - g3;
 80299e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80299ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80299ec:	1ad3      	subs	r3, r2, r3
 80299ee:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t h4 = f4 - g4;
 80299f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80299f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80299f4:	1ad3      	subs	r3, r2, r3
 80299f6:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h5 = f5 - g5;
 80299f8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80299fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80299fc:	1ad3      	subs	r3, r2, r3
 80299fe:	623b      	str	r3, [r7, #32]
    int32_t h6 = f6 - g6;
 8029a00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8029a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029a04:	1ad3      	subs	r3, r2, r3
 8029a06:	61fb      	str	r3, [r7, #28]
    int32_t h7 = f7 - g7;
 8029a08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8029a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029a0c:	1ad3      	subs	r3, r2, r3
 8029a0e:	61bb      	str	r3, [r7, #24]
    int32_t h8 = f8 - g8;
 8029a10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8029a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029a14:	1ad3      	subs	r3, r2, r3
 8029a16:	617b      	str	r3, [r7, #20]
    int32_t h9 = f9 - g9;
 8029a18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8029a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029a1c:	1ad3      	subs	r3, r2, r3
 8029a1e:	613b      	str	r3, [r7, #16]

    h[0] = h0;
 8029a20:	68fb      	ldr	r3, [r7, #12]
 8029a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029a24:	601a      	str	r2, [r3, #0]
    h[1] = h1;
 8029a26:	68fb      	ldr	r3, [r7, #12]
 8029a28:	3304      	adds	r3, #4
 8029a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029a2c:	601a      	str	r2, [r3, #0]
    h[2] = h2;
 8029a2e:	68fb      	ldr	r3, [r7, #12]
 8029a30:	3308      	adds	r3, #8
 8029a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029a34:	601a      	str	r2, [r3, #0]
    h[3] = h3;
 8029a36:	68fb      	ldr	r3, [r7, #12]
 8029a38:	330c      	adds	r3, #12
 8029a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8029a3c:	601a      	str	r2, [r3, #0]
    h[4] = h4;
 8029a3e:	68fb      	ldr	r3, [r7, #12]
 8029a40:	3310      	adds	r3, #16
 8029a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029a44:	601a      	str	r2, [r3, #0]
    h[5] = h5;
 8029a46:	68fb      	ldr	r3, [r7, #12]
 8029a48:	3314      	adds	r3, #20
 8029a4a:	6a3a      	ldr	r2, [r7, #32]
 8029a4c:	601a      	str	r2, [r3, #0]
    h[6] = h6;
 8029a4e:	68fb      	ldr	r3, [r7, #12]
 8029a50:	3318      	adds	r3, #24
 8029a52:	69fa      	ldr	r2, [r7, #28]
 8029a54:	601a      	str	r2, [r3, #0]
    h[7] = h7;
 8029a56:	68fb      	ldr	r3, [r7, #12]
 8029a58:	331c      	adds	r3, #28
 8029a5a:	69ba      	ldr	r2, [r7, #24]
 8029a5c:	601a      	str	r2, [r3, #0]
    h[8] = h8;
 8029a5e:	68fb      	ldr	r3, [r7, #12]
 8029a60:	3320      	adds	r3, #32
 8029a62:	697a      	ldr	r2, [r7, #20]
 8029a64:	601a      	str	r2, [r3, #0]
    h[9] = h9;
 8029a66:	68fb      	ldr	r3, [r7, #12]
 8029a68:	3324      	adds	r3, #36	; 0x24
 8029a6a:	693a      	ldr	r2, [r7, #16]
 8029a6c:	601a      	str	r2, [r3, #0]
}
 8029a6e:	bf00      	nop
 8029a70:	378c      	adds	r7, #140	; 0x8c
 8029a72:	46bd      	mov	sp, r7
 8029a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029a78:	4770      	bx	lr

08029a7a <fe_tobytes>:

  Have q+2^(-255)x = 2^(-255)(h + 19 2^(-25) h9 + 2^(-1))
  so floor(2^(-255)(h + 19 2^(-25) h9 + 2^(-1))) = q.
*/

void fe_tobytes(unsigned char *s, const fe h) {
 8029a7a:	b480      	push	{r7}
 8029a7c:	b099      	sub	sp, #100	; 0x64
 8029a7e:	af00      	add	r7, sp, #0
 8029a80:	6078      	str	r0, [r7, #4]
 8029a82:	6039      	str	r1, [r7, #0]
    int32_t h0 = h[0];
 8029a84:	683b      	ldr	r3, [r7, #0]
 8029a86:	681b      	ldr	r3, [r3, #0]
 8029a88:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t h1 = h[1];
 8029a8a:	683b      	ldr	r3, [r7, #0]
 8029a8c:	685b      	ldr	r3, [r3, #4]
 8029a8e:	65bb      	str	r3, [r7, #88]	; 0x58
    int32_t h2 = h[2];
 8029a90:	683b      	ldr	r3, [r7, #0]
 8029a92:	689b      	ldr	r3, [r3, #8]
 8029a94:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t h3 = h[3];
 8029a96:	683b      	ldr	r3, [r7, #0]
 8029a98:	68db      	ldr	r3, [r3, #12]
 8029a9a:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t h4 = h[4];
 8029a9c:	683b      	ldr	r3, [r7, #0]
 8029a9e:	691b      	ldr	r3, [r3, #16]
 8029aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t h5 = h[5];
 8029aa2:	683b      	ldr	r3, [r7, #0]
 8029aa4:	695b      	ldr	r3, [r3, #20]
 8029aa6:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t h6 = h[6];
 8029aa8:	683b      	ldr	r3, [r7, #0]
 8029aaa:	699b      	ldr	r3, [r3, #24]
 8029aac:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t h7 = h[7];
 8029aae:	683b      	ldr	r3, [r7, #0]
 8029ab0:	69db      	ldr	r3, [r3, #28]
 8029ab2:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t h8 = h[8];
 8029ab4:	683b      	ldr	r3, [r7, #0]
 8029ab6:	6a1b      	ldr	r3, [r3, #32]
 8029ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t h9 = h[9];
 8029aba:	683b      	ldr	r3, [r7, #0]
 8029abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8029abe:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t carry5;
    int32_t carry6;
    int32_t carry7;
    int32_t carry8;
    int32_t carry9;
    q = (19 * h9 + (((int32_t) 1) << 24)) >> 25;
 8029ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029ac2:	4613      	mov	r3, r2
 8029ac4:	00db      	lsls	r3, r3, #3
 8029ac6:	4413      	add	r3, r2
 8029ac8:	005b      	lsls	r3, r3, #1
 8029aca:	4413      	add	r3, r2
 8029acc:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8029ad0:	165b      	asrs	r3, r3, #25
 8029ad2:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h0 + q) >> 26;
 8029ad4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8029ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029ad8:	4413      	add	r3, r2
 8029ada:	169b      	asrs	r3, r3, #26
 8029adc:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h1 + q) >> 25;
 8029ade:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029ae2:	4413      	add	r3, r2
 8029ae4:	165b      	asrs	r3, r3, #25
 8029ae6:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h2 + q) >> 26;
 8029ae8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8029aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029aec:	4413      	add	r3, r2
 8029aee:	169b      	asrs	r3, r3, #26
 8029af0:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h3 + q) >> 25;
 8029af2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8029af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029af6:	4413      	add	r3, r2
 8029af8:	165b      	asrs	r3, r3, #25
 8029afa:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h4 + q) >> 26;
 8029afc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029b00:	4413      	add	r3, r2
 8029b02:	169b      	asrs	r3, r3, #26
 8029b04:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h5 + q) >> 25;
 8029b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8029b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029b0a:	4413      	add	r3, r2
 8029b0c:	165b      	asrs	r3, r3, #25
 8029b0e:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h6 + q) >> 26;
 8029b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8029b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029b14:	4413      	add	r3, r2
 8029b16:	169b      	asrs	r3, r3, #26
 8029b18:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h7 + q) >> 25;
 8029b1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8029b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029b1e:	4413      	add	r3, r2
 8029b20:	165b      	asrs	r3, r3, #25
 8029b22:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h8 + q) >> 26;
 8029b24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8029b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029b28:	4413      	add	r3, r2
 8029b2a:	169b      	asrs	r3, r3, #26
 8029b2c:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h9 + q) >> 25;
 8029b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029b32:	4413      	add	r3, r2
 8029b34:	165b      	asrs	r3, r3, #25
 8029b36:	637b      	str	r3, [r7, #52]	; 0x34
    /* Goal: Output h-(2^255-19)q, which is between 0 and 2^255-20. */
    h0 += 19 * q;
 8029b38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029b3a:	4613      	mov	r3, r2
 8029b3c:	00db      	lsls	r3, r3, #3
 8029b3e:	4413      	add	r3, r2
 8029b40:	005b      	lsls	r3, r3, #1
 8029b42:	4413      	add	r3, r2
 8029b44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8029b46:	4413      	add	r3, r2
 8029b48:	65fb      	str	r3, [r7, #92]	; 0x5c
    /* Goal: Output h-2^255 q, which is between 0 and 2^255-20. */
    carry0 = h0 >> 26;
 8029b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029b4c:	169b      	asrs	r3, r3, #26
 8029b4e:	633b      	str	r3, [r7, #48]	; 0x30
    h1 += carry0;
 8029b50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029b54:	4413      	add	r3, r2
 8029b56:	65bb      	str	r3, [r7, #88]	; 0x58
    h0 -= carry0 << 26;
 8029b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029b5a:	069b      	lsls	r3, r3, #26
 8029b5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8029b5e:	1ad3      	subs	r3, r2, r3
 8029b60:	65fb      	str	r3, [r7, #92]	; 0x5c
    carry1 = h1 >> 25;
 8029b62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029b64:	165b      	asrs	r3, r3, #25
 8029b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    h2 += carry1;
 8029b68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8029b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029b6c:	4413      	add	r3, r2
 8029b6e:	657b      	str	r3, [r7, #84]	; 0x54
    h1 -= carry1 << 25;
 8029b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029b72:	065b      	lsls	r3, r3, #25
 8029b74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029b76:	1ad3      	subs	r3, r2, r3
 8029b78:	65bb      	str	r3, [r7, #88]	; 0x58
    carry2 = h2 >> 26;
 8029b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029b7c:	169b      	asrs	r3, r3, #26
 8029b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    h3 += carry2;
 8029b80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8029b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029b84:	4413      	add	r3, r2
 8029b86:	653b      	str	r3, [r7, #80]	; 0x50
    h2 -= carry2 << 26;
 8029b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029b8a:	069b      	lsls	r3, r3, #26
 8029b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8029b8e:	1ad3      	subs	r3, r2, r3
 8029b90:	657b      	str	r3, [r7, #84]	; 0x54
    carry3 = h3 >> 25;
 8029b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029b94:	165b      	asrs	r3, r3, #25
 8029b96:	627b      	str	r3, [r7, #36]	; 0x24
    h4 += carry3;
 8029b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029b9c:	4413      	add	r3, r2
 8029b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    h3 -= carry3 << 25;
 8029ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029ba2:	065b      	lsls	r3, r3, #25
 8029ba4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8029ba6:	1ad3      	subs	r3, r2, r3
 8029ba8:	653b      	str	r3, [r7, #80]	; 0x50
    carry4 = h4 >> 26;
 8029baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029bac:	169b      	asrs	r3, r3, #26
 8029bae:	623b      	str	r3, [r7, #32]
    h5 += carry4;
 8029bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8029bb2:	6a3b      	ldr	r3, [r7, #32]
 8029bb4:	4413      	add	r3, r2
 8029bb6:	64bb      	str	r3, [r7, #72]	; 0x48
    h4 -= carry4 << 26;
 8029bb8:	6a3b      	ldr	r3, [r7, #32]
 8029bba:	069b      	lsls	r3, r3, #26
 8029bbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8029bbe:	1ad3      	subs	r3, r2, r3
 8029bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    carry5 = h5 >> 25;
 8029bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029bc4:	165b      	asrs	r3, r3, #25
 8029bc6:	61fb      	str	r3, [r7, #28]
    h6 += carry5;
 8029bc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8029bca:	69fb      	ldr	r3, [r7, #28]
 8029bcc:	4413      	add	r3, r2
 8029bce:	647b      	str	r3, [r7, #68]	; 0x44
    h5 -= carry5 << 25;
 8029bd0:	69fb      	ldr	r3, [r7, #28]
 8029bd2:	065b      	lsls	r3, r3, #25
 8029bd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8029bd6:	1ad3      	subs	r3, r2, r3
 8029bd8:	64bb      	str	r3, [r7, #72]	; 0x48
    carry6 = h6 >> 26;
 8029bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029bdc:	169b      	asrs	r3, r3, #26
 8029bde:	61bb      	str	r3, [r7, #24]
    h7 += carry6;
 8029be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8029be2:	69bb      	ldr	r3, [r7, #24]
 8029be4:	4413      	add	r3, r2
 8029be6:	643b      	str	r3, [r7, #64]	; 0x40
    h6 -= carry6 << 26;
 8029be8:	69bb      	ldr	r3, [r7, #24]
 8029bea:	069b      	lsls	r3, r3, #26
 8029bec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8029bee:	1ad3      	subs	r3, r2, r3
 8029bf0:	647b      	str	r3, [r7, #68]	; 0x44
    carry7 = h7 >> 25;
 8029bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029bf4:	165b      	asrs	r3, r3, #25
 8029bf6:	617b      	str	r3, [r7, #20]
    h8 += carry7;
 8029bf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8029bfa:	697b      	ldr	r3, [r7, #20]
 8029bfc:	4413      	add	r3, r2
 8029bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    h7 -= carry7 << 25;
 8029c00:	697b      	ldr	r3, [r7, #20]
 8029c02:	065b      	lsls	r3, r3, #25
 8029c04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8029c06:	1ad3      	subs	r3, r2, r3
 8029c08:	643b      	str	r3, [r7, #64]	; 0x40
    carry8 = h8 >> 26;
 8029c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029c0c:	169b      	asrs	r3, r3, #26
 8029c0e:	613b      	str	r3, [r7, #16]
    h9 += carry8;
 8029c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029c12:	693b      	ldr	r3, [r7, #16]
 8029c14:	4413      	add	r3, r2
 8029c16:	63bb      	str	r3, [r7, #56]	; 0x38
    h8 -= carry8 << 26;
 8029c18:	693b      	ldr	r3, [r7, #16]
 8029c1a:	069b      	lsls	r3, r3, #26
 8029c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8029c1e:	1ad3      	subs	r3, r2, r3
 8029c20:	63fb      	str	r3, [r7, #60]	; 0x3c
    carry9 = h9 >> 25;
 8029c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029c24:	165b      	asrs	r3, r3, #25
 8029c26:	60fb      	str	r3, [r7, #12]
    h9 -= carry9 << 25;
 8029c28:	68fb      	ldr	r3, [r7, #12]
 8029c2a:	065b      	lsls	r3, r3, #25
 8029c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029c2e:	1ad3      	subs	r3, r2, r3
 8029c30:	63bb      	str	r3, [r7, #56]	; 0x38
    Goal: Output h0+...+2^255 h10-2^255 q, which is between 0 and 2^255-20.
    Have h0+...+2^230 h9 between 0 and 2^255-1;
    evidently 2^255 h10-2^255 q = 0.
    Goal: Output h0+...+2^230 h9.
    */
    s[0] = (unsigned char) (h0 >> 0);
 8029c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029c34:	b2da      	uxtb	r2, r3
 8029c36:	687b      	ldr	r3, [r7, #4]
 8029c38:	701a      	strb	r2, [r3, #0]
    s[1] = (unsigned char) (h0 >> 8);
 8029c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029c3c:	121a      	asrs	r2, r3, #8
 8029c3e:	687b      	ldr	r3, [r7, #4]
 8029c40:	3301      	adds	r3, #1
 8029c42:	b2d2      	uxtb	r2, r2
 8029c44:	701a      	strb	r2, [r3, #0]
    s[2] = (unsigned char) (h0 >> 16);
 8029c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029c48:	141a      	asrs	r2, r3, #16
 8029c4a:	687b      	ldr	r3, [r7, #4]
 8029c4c:	3302      	adds	r3, #2
 8029c4e:	b2d2      	uxtb	r2, r2
 8029c50:	701a      	strb	r2, [r3, #0]
    s[3] = (unsigned char) ((h0 >> 24) | (h1 << 2));
 8029c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029c54:	161b      	asrs	r3, r3, #24
 8029c56:	b25a      	sxtb	r2, r3
 8029c58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029c5a:	009b      	lsls	r3, r3, #2
 8029c5c:	b25b      	sxtb	r3, r3
 8029c5e:	4313      	orrs	r3, r2
 8029c60:	b25a      	sxtb	r2, r3
 8029c62:	687b      	ldr	r3, [r7, #4]
 8029c64:	3303      	adds	r3, #3
 8029c66:	b2d2      	uxtb	r2, r2
 8029c68:	701a      	strb	r2, [r3, #0]
    s[4] = (unsigned char) (h1 >> 6);
 8029c6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029c6c:	119a      	asrs	r2, r3, #6
 8029c6e:	687b      	ldr	r3, [r7, #4]
 8029c70:	3304      	adds	r3, #4
 8029c72:	b2d2      	uxtb	r2, r2
 8029c74:	701a      	strb	r2, [r3, #0]
    s[5] = (unsigned char) (h1 >> 14);
 8029c76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029c78:	139a      	asrs	r2, r3, #14
 8029c7a:	687b      	ldr	r3, [r7, #4]
 8029c7c:	3305      	adds	r3, #5
 8029c7e:	b2d2      	uxtb	r2, r2
 8029c80:	701a      	strb	r2, [r3, #0]
    s[6] = (unsigned char) ((h1 >> 22) | (h2 << 3));
 8029c82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029c84:	159b      	asrs	r3, r3, #22
 8029c86:	b25a      	sxtb	r2, r3
 8029c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029c8a:	00db      	lsls	r3, r3, #3
 8029c8c:	b25b      	sxtb	r3, r3
 8029c8e:	4313      	orrs	r3, r2
 8029c90:	b25a      	sxtb	r2, r3
 8029c92:	687b      	ldr	r3, [r7, #4]
 8029c94:	3306      	adds	r3, #6
 8029c96:	b2d2      	uxtb	r2, r2
 8029c98:	701a      	strb	r2, [r3, #0]
    s[7] = (unsigned char) (h2 >> 5);
 8029c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029c9c:	115a      	asrs	r2, r3, #5
 8029c9e:	687b      	ldr	r3, [r7, #4]
 8029ca0:	3307      	adds	r3, #7
 8029ca2:	b2d2      	uxtb	r2, r2
 8029ca4:	701a      	strb	r2, [r3, #0]
    s[8] = (unsigned char) (h2 >> 13);
 8029ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029ca8:	135a      	asrs	r2, r3, #13
 8029caa:	687b      	ldr	r3, [r7, #4]
 8029cac:	3308      	adds	r3, #8
 8029cae:	b2d2      	uxtb	r2, r2
 8029cb0:	701a      	strb	r2, [r3, #0]
    s[9] = (unsigned char) ((h2 >> 21) | (h3 << 5));
 8029cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029cb4:	155b      	asrs	r3, r3, #21
 8029cb6:	b25a      	sxtb	r2, r3
 8029cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029cba:	015b      	lsls	r3, r3, #5
 8029cbc:	b25b      	sxtb	r3, r3
 8029cbe:	4313      	orrs	r3, r2
 8029cc0:	b25a      	sxtb	r2, r3
 8029cc2:	687b      	ldr	r3, [r7, #4]
 8029cc4:	3309      	adds	r3, #9
 8029cc6:	b2d2      	uxtb	r2, r2
 8029cc8:	701a      	strb	r2, [r3, #0]
    s[10] = (unsigned char) (h3 >> 3);
 8029cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029ccc:	10da      	asrs	r2, r3, #3
 8029cce:	687b      	ldr	r3, [r7, #4]
 8029cd0:	330a      	adds	r3, #10
 8029cd2:	b2d2      	uxtb	r2, r2
 8029cd4:	701a      	strb	r2, [r3, #0]
    s[11] = (unsigned char) (h3 >> 11);
 8029cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029cd8:	12da      	asrs	r2, r3, #11
 8029cda:	687b      	ldr	r3, [r7, #4]
 8029cdc:	330b      	adds	r3, #11
 8029cde:	b2d2      	uxtb	r2, r2
 8029ce0:	701a      	strb	r2, [r3, #0]
    s[12] = (unsigned char) ((h3 >> 19) | (h4 << 6));
 8029ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029ce4:	14db      	asrs	r3, r3, #19
 8029ce6:	b25a      	sxtb	r2, r3
 8029ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029cea:	019b      	lsls	r3, r3, #6
 8029cec:	b25b      	sxtb	r3, r3
 8029cee:	4313      	orrs	r3, r2
 8029cf0:	b25a      	sxtb	r2, r3
 8029cf2:	687b      	ldr	r3, [r7, #4]
 8029cf4:	330c      	adds	r3, #12
 8029cf6:	b2d2      	uxtb	r2, r2
 8029cf8:	701a      	strb	r2, [r3, #0]
    s[13] = (unsigned char) (h4 >> 2);
 8029cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029cfc:	109a      	asrs	r2, r3, #2
 8029cfe:	687b      	ldr	r3, [r7, #4]
 8029d00:	330d      	adds	r3, #13
 8029d02:	b2d2      	uxtb	r2, r2
 8029d04:	701a      	strb	r2, [r3, #0]
    s[14] = (unsigned char) (h4 >> 10);
 8029d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d08:	129a      	asrs	r2, r3, #10
 8029d0a:	687b      	ldr	r3, [r7, #4]
 8029d0c:	330e      	adds	r3, #14
 8029d0e:	b2d2      	uxtb	r2, r2
 8029d10:	701a      	strb	r2, [r3, #0]
    s[15] = (unsigned char) (h4 >> 18);
 8029d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d14:	149a      	asrs	r2, r3, #18
 8029d16:	687b      	ldr	r3, [r7, #4]
 8029d18:	330f      	adds	r3, #15
 8029d1a:	b2d2      	uxtb	r2, r2
 8029d1c:	701a      	strb	r2, [r3, #0]
    s[16] = (unsigned char) (h5 >> 0);
 8029d1e:	687b      	ldr	r3, [r7, #4]
 8029d20:	3310      	adds	r3, #16
 8029d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8029d24:	b2d2      	uxtb	r2, r2
 8029d26:	701a      	strb	r2, [r3, #0]
    s[17] = (unsigned char) (h5 >> 8);
 8029d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029d2a:	121a      	asrs	r2, r3, #8
 8029d2c:	687b      	ldr	r3, [r7, #4]
 8029d2e:	3311      	adds	r3, #17
 8029d30:	b2d2      	uxtb	r2, r2
 8029d32:	701a      	strb	r2, [r3, #0]
    s[18] = (unsigned char) (h5 >> 16);
 8029d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029d36:	141a      	asrs	r2, r3, #16
 8029d38:	687b      	ldr	r3, [r7, #4]
 8029d3a:	3312      	adds	r3, #18
 8029d3c:	b2d2      	uxtb	r2, r2
 8029d3e:	701a      	strb	r2, [r3, #0]
    s[19] = (unsigned char) ((h5 >> 24) | (h6 << 1));
 8029d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029d42:	161b      	asrs	r3, r3, #24
 8029d44:	b25a      	sxtb	r2, r3
 8029d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029d48:	005b      	lsls	r3, r3, #1
 8029d4a:	b25b      	sxtb	r3, r3
 8029d4c:	4313      	orrs	r3, r2
 8029d4e:	b25a      	sxtb	r2, r3
 8029d50:	687b      	ldr	r3, [r7, #4]
 8029d52:	3313      	adds	r3, #19
 8029d54:	b2d2      	uxtb	r2, r2
 8029d56:	701a      	strb	r2, [r3, #0]
    s[20] = (unsigned char) (h6 >> 7);
 8029d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029d5a:	11da      	asrs	r2, r3, #7
 8029d5c:	687b      	ldr	r3, [r7, #4]
 8029d5e:	3314      	adds	r3, #20
 8029d60:	b2d2      	uxtb	r2, r2
 8029d62:	701a      	strb	r2, [r3, #0]
    s[21] = (unsigned char) (h6 >> 15);
 8029d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029d66:	13da      	asrs	r2, r3, #15
 8029d68:	687b      	ldr	r3, [r7, #4]
 8029d6a:	3315      	adds	r3, #21
 8029d6c:	b2d2      	uxtb	r2, r2
 8029d6e:	701a      	strb	r2, [r3, #0]
    s[22] = (unsigned char) ((h6 >> 23) | (h7 << 3));
 8029d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029d72:	15db      	asrs	r3, r3, #23
 8029d74:	b25a      	sxtb	r2, r3
 8029d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029d78:	00db      	lsls	r3, r3, #3
 8029d7a:	b25b      	sxtb	r3, r3
 8029d7c:	4313      	orrs	r3, r2
 8029d7e:	b25a      	sxtb	r2, r3
 8029d80:	687b      	ldr	r3, [r7, #4]
 8029d82:	3316      	adds	r3, #22
 8029d84:	b2d2      	uxtb	r2, r2
 8029d86:	701a      	strb	r2, [r3, #0]
    s[23] = (unsigned char) (h7 >> 5);
 8029d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029d8a:	115a      	asrs	r2, r3, #5
 8029d8c:	687b      	ldr	r3, [r7, #4]
 8029d8e:	3317      	adds	r3, #23
 8029d90:	b2d2      	uxtb	r2, r2
 8029d92:	701a      	strb	r2, [r3, #0]
    s[24] = (unsigned char) (h7 >> 13);
 8029d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029d96:	135a      	asrs	r2, r3, #13
 8029d98:	687b      	ldr	r3, [r7, #4]
 8029d9a:	3318      	adds	r3, #24
 8029d9c:	b2d2      	uxtb	r2, r2
 8029d9e:	701a      	strb	r2, [r3, #0]
    s[25] = (unsigned char) ((h7 >> 21) | (h8 << 4));
 8029da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029da2:	155b      	asrs	r3, r3, #21
 8029da4:	b25a      	sxtb	r2, r3
 8029da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029da8:	011b      	lsls	r3, r3, #4
 8029daa:	b25b      	sxtb	r3, r3
 8029dac:	4313      	orrs	r3, r2
 8029dae:	b25a      	sxtb	r2, r3
 8029db0:	687b      	ldr	r3, [r7, #4]
 8029db2:	3319      	adds	r3, #25
 8029db4:	b2d2      	uxtb	r2, r2
 8029db6:	701a      	strb	r2, [r3, #0]
    s[26] = (unsigned char) (h8 >> 4);
 8029db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029dba:	111a      	asrs	r2, r3, #4
 8029dbc:	687b      	ldr	r3, [r7, #4]
 8029dbe:	331a      	adds	r3, #26
 8029dc0:	b2d2      	uxtb	r2, r2
 8029dc2:	701a      	strb	r2, [r3, #0]
    s[27] = (unsigned char) (h8 >> 12);
 8029dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029dc6:	131a      	asrs	r2, r3, #12
 8029dc8:	687b      	ldr	r3, [r7, #4]
 8029dca:	331b      	adds	r3, #27
 8029dcc:	b2d2      	uxtb	r2, r2
 8029dce:	701a      	strb	r2, [r3, #0]
    s[28] = (unsigned char) ((h8 >> 20) | (h9 << 6));
 8029dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029dd2:	151b      	asrs	r3, r3, #20
 8029dd4:	b25a      	sxtb	r2, r3
 8029dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029dd8:	019b      	lsls	r3, r3, #6
 8029dda:	b25b      	sxtb	r3, r3
 8029ddc:	4313      	orrs	r3, r2
 8029dde:	b25a      	sxtb	r2, r3
 8029de0:	687b      	ldr	r3, [r7, #4]
 8029de2:	331c      	adds	r3, #28
 8029de4:	b2d2      	uxtb	r2, r2
 8029de6:	701a      	strb	r2, [r3, #0]
    s[29] = (unsigned char) (h9 >> 2);
 8029de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029dea:	109a      	asrs	r2, r3, #2
 8029dec:	687b      	ldr	r3, [r7, #4]
 8029dee:	331d      	adds	r3, #29
 8029df0:	b2d2      	uxtb	r2, r2
 8029df2:	701a      	strb	r2, [r3, #0]
    s[30] = (unsigned char) (h9 >> 10);
 8029df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029df6:	129a      	asrs	r2, r3, #10
 8029df8:	687b      	ldr	r3, [r7, #4]
 8029dfa:	331e      	adds	r3, #30
 8029dfc:	b2d2      	uxtb	r2, r2
 8029dfe:	701a      	strb	r2, [r3, #0]
    s[31] = (unsigned char) (h9 >> 18);
 8029e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029e02:	149a      	asrs	r2, r3, #18
 8029e04:	687b      	ldr	r3, [r7, #4]
 8029e06:	331f      	adds	r3, #31
 8029e08:	b2d2      	uxtb	r2, r2
 8029e0a:	701a      	strb	r2, [r3, #0]
}
 8029e0c:	bf00      	nop
 8029e0e:	3764      	adds	r7, #100	; 0x64
 8029e10:	46bd      	mov	sp, r7
 8029e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e16:	4770      	bx	lr

08029e18 <ge_add>:

/*
r = p + q
*/

void ge_add(ge_p1p1 *r, const ge_p3 *p, const ge_cached *q) {
 8029e18:	b580      	push	{r7, lr}
 8029e1a:	b08e      	sub	sp, #56	; 0x38
 8029e1c:	af00      	add	r7, sp, #0
 8029e1e:	60f8      	str	r0, [r7, #12]
 8029e20:	60b9      	str	r1, [r7, #8]
 8029e22:	607a      	str	r2, [r7, #4]
    fe t0;
    fe_add(r->X, p->Y, p->X);
 8029e24:	68f8      	ldr	r0, [r7, #12]
 8029e26:	68bb      	ldr	r3, [r7, #8]
 8029e28:	3328      	adds	r3, #40	; 0x28
 8029e2a:	68ba      	ldr	r2, [r7, #8]
 8029e2c:	4619      	mov	r1, r3
 8029e2e:	f7f8 ff48 	bl	8022cc2 <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 8029e32:	68fb      	ldr	r3, [r7, #12]
 8029e34:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8029e38:	68bb      	ldr	r3, [r7, #8]
 8029e3a:	3328      	adds	r3, #40	; 0x28
 8029e3c:	68ba      	ldr	r2, [r7, #8]
 8029e3e:	4619      	mov	r1, r3
 8029e40:	f7ff fd80 	bl	8029944 <fe_sub>
    fe_mul(r->Z, r->X, q->YplusX);
 8029e44:	68fb      	ldr	r3, [r7, #12]
 8029e46:	3350      	adds	r3, #80	; 0x50
 8029e48:	68f9      	ldr	r1, [r7, #12]
 8029e4a:	687a      	ldr	r2, [r7, #4]
 8029e4c:	4618      	mov	r0, r3
 8029e4e:	f7f9 fe17 	bl	8023a80 <fe_mul>
    fe_mul(r->Y, r->Y, q->YminusX);
 8029e52:	68fb      	ldr	r3, [r7, #12]
 8029e54:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8029e58:	68fb      	ldr	r3, [r7, #12]
 8029e5a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8029e5e:	687b      	ldr	r3, [r7, #4]
 8029e60:	3328      	adds	r3, #40	; 0x28
 8029e62:	461a      	mov	r2, r3
 8029e64:	f7f9 fe0c 	bl	8023a80 <fe_mul>
    fe_mul(r->T, q->T2d, p->T);
 8029e68:	68fb      	ldr	r3, [r7, #12]
 8029e6a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8029e6e:	687b      	ldr	r3, [r7, #4]
 8029e70:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8029e74:	68bb      	ldr	r3, [r7, #8]
 8029e76:	3378      	adds	r3, #120	; 0x78
 8029e78:	461a      	mov	r2, r3
 8029e7a:	f7f9 fe01 	bl	8023a80 <fe_mul>
    fe_mul(r->X, p->Z, q->Z);
 8029e7e:	68f8      	ldr	r0, [r7, #12]
 8029e80:	68bb      	ldr	r3, [r7, #8]
 8029e82:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8029e86:	687b      	ldr	r3, [r7, #4]
 8029e88:	3350      	adds	r3, #80	; 0x50
 8029e8a:	461a      	mov	r2, r3
 8029e8c:	f7f9 fdf8 	bl	8023a80 <fe_mul>
    fe_add(t0, r->X, r->X);
 8029e90:	68f9      	ldr	r1, [r7, #12]
 8029e92:	68fa      	ldr	r2, [r7, #12]
 8029e94:	f107 0310 	add.w	r3, r7, #16
 8029e98:	4618      	mov	r0, r3
 8029e9a:	f7f8 ff12 	bl	8022cc2 <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 8029e9e:	68f8      	ldr	r0, [r7, #12]
 8029ea0:	68fb      	ldr	r3, [r7, #12]
 8029ea2:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8029ea6:	68fb      	ldr	r3, [r7, #12]
 8029ea8:	3328      	adds	r3, #40	; 0x28
 8029eaa:	461a      	mov	r2, r3
 8029eac:	f7ff fd4a 	bl	8029944 <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 8029eb0:	68fb      	ldr	r3, [r7, #12]
 8029eb2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8029eb6:	68fb      	ldr	r3, [r7, #12]
 8029eb8:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8029ebc:	68fb      	ldr	r3, [r7, #12]
 8029ebe:	3328      	adds	r3, #40	; 0x28
 8029ec0:	461a      	mov	r2, r3
 8029ec2:	f7f8 fefe 	bl	8022cc2 <fe_add>
    fe_add(r->Z, t0, r->T);
 8029ec6:	68fb      	ldr	r3, [r7, #12]
 8029ec8:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8029ecc:	68fb      	ldr	r3, [r7, #12]
 8029ece:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8029ed2:	f107 0310 	add.w	r3, r7, #16
 8029ed6:	4619      	mov	r1, r3
 8029ed8:	f7f8 fef3 	bl	8022cc2 <fe_add>
    fe_sub(r->T, t0, r->T);
 8029edc:	68fb      	ldr	r3, [r7, #12]
 8029ede:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8029ee2:	68fb      	ldr	r3, [r7, #12]
 8029ee4:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8029ee8:	f107 0310 	add.w	r3, r7, #16
 8029eec:	4619      	mov	r1, r3
 8029eee:	f7ff fd29 	bl	8029944 <fe_sub>
}
 8029ef2:	bf00      	nop
 8029ef4:	3738      	adds	r7, #56	; 0x38
 8029ef6:	46bd      	mov	sp, r7
 8029ef8:	bd80      	pop	{r7, pc}

08029efa <slide>:


static void slide(signed char *r, const unsigned char *a) {
 8029efa:	b480      	push	{r7}
 8029efc:	b087      	sub	sp, #28
 8029efe:	af00      	add	r7, sp, #0
 8029f00:	6078      	str	r0, [r7, #4]
 8029f02:	6039      	str	r1, [r7, #0]
    int i;
    int b;
    int k;

    for (i = 0; i < 256; ++i) {
 8029f04:	2300      	movs	r3, #0
 8029f06:	617b      	str	r3, [r7, #20]
 8029f08:	e016      	b.n	8029f38 <slide+0x3e>
        r[i] = 1 & (a[i >> 3] >> (i & 7));
 8029f0a:	697b      	ldr	r3, [r7, #20]
 8029f0c:	10db      	asrs	r3, r3, #3
 8029f0e:	461a      	mov	r2, r3
 8029f10:	683b      	ldr	r3, [r7, #0]
 8029f12:	4413      	add	r3, r2
 8029f14:	781b      	ldrb	r3, [r3, #0]
 8029f16:	461a      	mov	r2, r3
 8029f18:	697b      	ldr	r3, [r7, #20]
 8029f1a:	f003 0307 	and.w	r3, r3, #7
 8029f1e:	fa42 f303 	asr.w	r3, r2, r3
 8029f22:	b25a      	sxtb	r2, r3
 8029f24:	697b      	ldr	r3, [r7, #20]
 8029f26:	6879      	ldr	r1, [r7, #4]
 8029f28:	440b      	add	r3, r1
 8029f2a:	f002 0201 	and.w	r2, r2, #1
 8029f2e:	b252      	sxtb	r2, r2
 8029f30:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 256; ++i) {
 8029f32:	697b      	ldr	r3, [r7, #20]
 8029f34:	3301      	adds	r3, #1
 8029f36:	617b      	str	r3, [r7, #20]
 8029f38:	697b      	ldr	r3, [r7, #20]
 8029f3a:	2bff      	cmp	r3, #255	; 0xff
 8029f3c:	dde5      	ble.n	8029f0a <slide+0x10>
    }

    for (i = 0; i < 256; ++i)
 8029f3e:	2300      	movs	r3, #0
 8029f40:	617b      	str	r3, [r7, #20]
 8029f42:	e0ab      	b.n	802a09c <slide+0x1a2>
        if (r[i]) {
 8029f44:	697b      	ldr	r3, [r7, #20]
 8029f46:	687a      	ldr	r2, [r7, #4]
 8029f48:	4413      	add	r3, r2
 8029f4a:	f993 3000 	ldrsb.w	r3, [r3]
 8029f4e:	2b00      	cmp	r3, #0
 8029f50:	f000 80a1 	beq.w	802a096 <slide+0x19c>
            for (b = 1; b <= 6 && i + b < 256; ++b) {
 8029f54:	2301      	movs	r3, #1
 8029f56:	613b      	str	r3, [r7, #16]
 8029f58:	e092      	b.n	802a080 <slide+0x186>
                if (r[i + b]) {
 8029f5a:	697a      	ldr	r2, [r7, #20]
 8029f5c:	693b      	ldr	r3, [r7, #16]
 8029f5e:	4413      	add	r3, r2
 8029f60:	461a      	mov	r2, r3
 8029f62:	687b      	ldr	r3, [r7, #4]
 8029f64:	4413      	add	r3, r2
 8029f66:	f993 3000 	ldrsb.w	r3, [r3]
 8029f6a:	2b00      	cmp	r3, #0
 8029f6c:	f000 8085 	beq.w	802a07a <slide+0x180>
                    if (r[i] + (r[i + b] << b) <= 15) {
 8029f70:	697b      	ldr	r3, [r7, #20]
 8029f72:	687a      	ldr	r2, [r7, #4]
 8029f74:	4413      	add	r3, r2
 8029f76:	f993 3000 	ldrsb.w	r3, [r3]
 8029f7a:	4619      	mov	r1, r3
 8029f7c:	697a      	ldr	r2, [r7, #20]
 8029f7e:	693b      	ldr	r3, [r7, #16]
 8029f80:	4413      	add	r3, r2
 8029f82:	461a      	mov	r2, r3
 8029f84:	687b      	ldr	r3, [r7, #4]
 8029f86:	4413      	add	r3, r2
 8029f88:	f993 3000 	ldrsb.w	r3, [r3]
 8029f8c:	461a      	mov	r2, r3
 8029f8e:	693b      	ldr	r3, [r7, #16]
 8029f90:	fa02 f303 	lsl.w	r3, r2, r3
 8029f94:	440b      	add	r3, r1
 8029f96:	2b0f      	cmp	r3, #15
 8029f98:	dc22      	bgt.n	8029fe0 <slide+0xe6>
                        r[i] += r[i + b] << b;
 8029f9a:	697b      	ldr	r3, [r7, #20]
 8029f9c:	687a      	ldr	r2, [r7, #4]
 8029f9e:	4413      	add	r3, r2
 8029fa0:	f993 3000 	ldrsb.w	r3, [r3]
 8029fa4:	b2da      	uxtb	r2, r3
 8029fa6:	6979      	ldr	r1, [r7, #20]
 8029fa8:	693b      	ldr	r3, [r7, #16]
 8029faa:	440b      	add	r3, r1
 8029fac:	4619      	mov	r1, r3
 8029fae:	687b      	ldr	r3, [r7, #4]
 8029fb0:	440b      	add	r3, r1
 8029fb2:	f993 3000 	ldrsb.w	r3, [r3]
 8029fb6:	4619      	mov	r1, r3
 8029fb8:	693b      	ldr	r3, [r7, #16]
 8029fba:	fa01 f303 	lsl.w	r3, r1, r3
 8029fbe:	b2db      	uxtb	r3, r3
 8029fc0:	4413      	add	r3, r2
 8029fc2:	b2d9      	uxtb	r1, r3
 8029fc4:	697b      	ldr	r3, [r7, #20]
 8029fc6:	687a      	ldr	r2, [r7, #4]
 8029fc8:	4413      	add	r3, r2
 8029fca:	b24a      	sxtb	r2, r1
 8029fcc:	701a      	strb	r2, [r3, #0]
                        r[i + b] = 0;
 8029fce:	697a      	ldr	r2, [r7, #20]
 8029fd0:	693b      	ldr	r3, [r7, #16]
 8029fd2:	4413      	add	r3, r2
 8029fd4:	461a      	mov	r2, r3
 8029fd6:	687b      	ldr	r3, [r7, #4]
 8029fd8:	4413      	add	r3, r2
 8029fda:	2200      	movs	r2, #0
 8029fdc:	701a      	strb	r2, [r3, #0]
 8029fde:	e04c      	b.n	802a07a <slide+0x180>
                    } else if (r[i] - (r[i + b] << b) >= -15) {
 8029fe0:	697b      	ldr	r3, [r7, #20]
 8029fe2:	687a      	ldr	r2, [r7, #4]
 8029fe4:	4413      	add	r3, r2
 8029fe6:	f993 3000 	ldrsb.w	r3, [r3]
 8029fea:	4619      	mov	r1, r3
 8029fec:	697a      	ldr	r2, [r7, #20]
 8029fee:	693b      	ldr	r3, [r7, #16]
 8029ff0:	4413      	add	r3, r2
 8029ff2:	461a      	mov	r2, r3
 8029ff4:	687b      	ldr	r3, [r7, #4]
 8029ff6:	4413      	add	r3, r2
 8029ff8:	f993 3000 	ldrsb.w	r3, [r3]
 8029ffc:	461a      	mov	r2, r3
 8029ffe:	693b      	ldr	r3, [r7, #16]
 802a000:	fa02 f303 	lsl.w	r3, r2, r3
 802a004:	1acb      	subs	r3, r1, r3
 802a006:	f113 0f0f 	cmn.w	r3, #15
 802a00a:	db43      	blt.n	802a094 <slide+0x19a>
                        r[i] -= r[i + b] << b;
 802a00c:	697b      	ldr	r3, [r7, #20]
 802a00e:	687a      	ldr	r2, [r7, #4]
 802a010:	4413      	add	r3, r2
 802a012:	f993 3000 	ldrsb.w	r3, [r3]
 802a016:	b2da      	uxtb	r2, r3
 802a018:	6979      	ldr	r1, [r7, #20]
 802a01a:	693b      	ldr	r3, [r7, #16]
 802a01c:	440b      	add	r3, r1
 802a01e:	4619      	mov	r1, r3
 802a020:	687b      	ldr	r3, [r7, #4]
 802a022:	440b      	add	r3, r1
 802a024:	f993 3000 	ldrsb.w	r3, [r3]
 802a028:	4619      	mov	r1, r3
 802a02a:	693b      	ldr	r3, [r7, #16]
 802a02c:	fa01 f303 	lsl.w	r3, r1, r3
 802a030:	b2db      	uxtb	r3, r3
 802a032:	1ad3      	subs	r3, r2, r3
 802a034:	b2d9      	uxtb	r1, r3
 802a036:	697b      	ldr	r3, [r7, #20]
 802a038:	687a      	ldr	r2, [r7, #4]
 802a03a:	4413      	add	r3, r2
 802a03c:	b24a      	sxtb	r2, r1
 802a03e:	701a      	strb	r2, [r3, #0]

                        for (k = i + b; k < 256; ++k) {
 802a040:	697a      	ldr	r2, [r7, #20]
 802a042:	693b      	ldr	r3, [r7, #16]
 802a044:	4413      	add	r3, r2
 802a046:	60fb      	str	r3, [r7, #12]
 802a048:	e014      	b.n	802a074 <slide+0x17a>
                            if (!r[k]) {
 802a04a:	68fb      	ldr	r3, [r7, #12]
 802a04c:	687a      	ldr	r2, [r7, #4]
 802a04e:	4413      	add	r3, r2
 802a050:	f993 3000 	ldrsb.w	r3, [r3]
 802a054:	2b00      	cmp	r3, #0
 802a056:	d105      	bne.n	802a064 <slide+0x16a>
                                r[k] = 1;
 802a058:	68fb      	ldr	r3, [r7, #12]
 802a05a:	687a      	ldr	r2, [r7, #4]
 802a05c:	4413      	add	r3, r2
 802a05e:	2201      	movs	r2, #1
 802a060:	701a      	strb	r2, [r3, #0]
                                break;
 802a062:	e00a      	b.n	802a07a <slide+0x180>
                            }

                            r[k] = 0;
 802a064:	68fb      	ldr	r3, [r7, #12]
 802a066:	687a      	ldr	r2, [r7, #4]
 802a068:	4413      	add	r3, r2
 802a06a:	2200      	movs	r2, #0
 802a06c:	701a      	strb	r2, [r3, #0]
                        for (k = i + b; k < 256; ++k) {
 802a06e:	68fb      	ldr	r3, [r7, #12]
 802a070:	3301      	adds	r3, #1
 802a072:	60fb      	str	r3, [r7, #12]
 802a074:	68fb      	ldr	r3, [r7, #12]
 802a076:	2bff      	cmp	r3, #255	; 0xff
 802a078:	dde7      	ble.n	802a04a <slide+0x150>
            for (b = 1; b <= 6 && i + b < 256; ++b) {
 802a07a:	693b      	ldr	r3, [r7, #16]
 802a07c:	3301      	adds	r3, #1
 802a07e:	613b      	str	r3, [r7, #16]
 802a080:	693b      	ldr	r3, [r7, #16]
 802a082:	2b06      	cmp	r3, #6
 802a084:	dc07      	bgt.n	802a096 <slide+0x19c>
 802a086:	697a      	ldr	r2, [r7, #20]
 802a088:	693b      	ldr	r3, [r7, #16]
 802a08a:	4413      	add	r3, r2
 802a08c:	2bff      	cmp	r3, #255	; 0xff
 802a08e:	f77f af64 	ble.w	8029f5a <slide+0x60>
 802a092:	e000      	b.n	802a096 <slide+0x19c>
                        }
                    } else {
                        break;
 802a094:	bf00      	nop
    for (i = 0; i < 256; ++i)
 802a096:	697b      	ldr	r3, [r7, #20]
 802a098:	3301      	adds	r3, #1
 802a09a:	617b      	str	r3, [r7, #20]
 802a09c:	697b      	ldr	r3, [r7, #20]
 802a09e:	2bff      	cmp	r3, #255	; 0xff
 802a0a0:	f77f af50 	ble.w	8029f44 <slide+0x4a>
                    }
                }
            }
        }
}
 802a0a4:	bf00      	nop
 802a0a6:	bf00      	nop
 802a0a8:	371c      	adds	r7, #28
 802a0aa:	46bd      	mov	sp, r7
 802a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0b0:	4770      	bx	lr
	...

0802a0b4 <ge_double_scalarmult_vartime>:
where a = a[0]+256*a[1]+...+256^31 a[31].
and b = b[0]+256*b[1]+...+256^31 b[31].
B is the Ed25519 base point (x,4/5) with x positive.
*/

void ge_double_scalarmult_vartime(ge_p2 *r, const unsigned char *a, const ge_p3 *A, const unsigned char *b) {
 802a0b4:	b590      	push	{r4, r7, lr}
 802a0b6:	f6ad 0dfc 	subw	sp, sp, #2300	; 0x8fc
 802a0ba:	af00      	add	r7, sp, #0
 802a0bc:	f107 040c 	add.w	r4, r7, #12
 802a0c0:	6020      	str	r0, [r4, #0]
 802a0c2:	f107 0008 	add.w	r0, r7, #8
 802a0c6:	6001      	str	r1, [r0, #0]
 802a0c8:	1d39      	adds	r1, r7, #4
 802a0ca:	600a      	str	r2, [r1, #0]
 802a0cc:	463a      	mov	r2, r7
 802a0ce:	6013      	str	r3, [r2, #0]
    ge_cached Ai[8]; /* A,3A,5A,7A,9A,11A,13A,15A */
    ge_p1p1 t;
    ge_p3 u;
    ge_p3 A2;
    int i;
    slide(aslide, a);
 802a0d0:	f107 0308 	add.w	r3, r7, #8
 802a0d4:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 802a0d8:	6819      	ldr	r1, [r3, #0]
 802a0da:	4610      	mov	r0, r2
 802a0dc:	f7ff ff0d 	bl	8029efa <slide>
    slide(bslide, b);
 802a0e0:	463b      	mov	r3, r7
 802a0e2:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 802a0e6:	6819      	ldr	r1, [r3, #0]
 802a0e8:	4610      	mov	r0, r2
 802a0ea:	f7ff ff06 	bl	8029efa <slide>
    ge_p3_to_cached(&Ai[0], A);
 802a0ee:	1d3b      	adds	r3, r7, #4
 802a0f0:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 802a0f4:	6819      	ldr	r1, [r3, #0]
 802a0f6:	4610      	mov	r0, r2
 802a0f8:	f000 fc4c 	bl	802a994 <ge_p3_to_cached>
    ge_p3_dbl(&t, A);
 802a0fc:	1d3b      	adds	r3, r7, #4
 802a0fe:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 802a102:	6819      	ldr	r1, [r3, #0]
 802a104:	4610      	mov	r0, r2
 802a106:	f000 fc2f 	bl	802a968 <ge_p3_dbl>
    ge_p1p1_to_p3(&A2, &t);
 802a10a:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 802a10e:	f107 0314 	add.w	r3, r7, #20
 802a112:	4611      	mov	r1, r2
 802a114:	4618      	mov	r0, r3
 802a116:	f000 fb89 	bl	802a82c <ge_p1p1_to_p3>
    ge_add(&t, &A2, &Ai[0]);
 802a11a:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 802a11e:	f107 0114 	add.w	r1, r7, #20
 802a122:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802a126:	4618      	mov	r0, r3
 802a128:	f7ff fe76 	bl	8029e18 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 802a12c:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 802a130:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 802a134:	4611      	mov	r1, r2
 802a136:	4618      	mov	r0, r3
 802a138:	f000 fb78 	bl	802a82c <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[1], &u);
 802a13c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 802a140:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 802a144:	33a0      	adds	r3, #160	; 0xa0
 802a146:	4611      	mov	r1, r2
 802a148:	4618      	mov	r0, r3
 802a14a:	f000 fc23 	bl	802a994 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[1]);
 802a14e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 802a152:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 802a156:	f107 0114 	add.w	r1, r7, #20
 802a15a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802a15e:	4618      	mov	r0, r3
 802a160:	f7ff fe5a 	bl	8029e18 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 802a164:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 802a168:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 802a16c:	4611      	mov	r1, r2
 802a16e:	4618      	mov	r0, r3
 802a170:	f000 fb5c 	bl	802a82c <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[2], &u);
 802a174:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 802a178:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 802a17c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 802a180:	4611      	mov	r1, r2
 802a182:	4618      	mov	r0, r3
 802a184:	f000 fc06 	bl	802a994 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[2]);
 802a188:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 802a18c:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 802a190:	f107 0114 	add.w	r1, r7, #20
 802a194:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802a198:	4618      	mov	r0, r3
 802a19a:	f7ff fe3d 	bl	8029e18 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 802a19e:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 802a1a2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 802a1a6:	4611      	mov	r1, r2
 802a1a8:	4618      	mov	r0, r3
 802a1aa:	f000 fb3f 	bl	802a82c <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[3], &u);
 802a1ae:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 802a1b2:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 802a1b6:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 802a1ba:	4611      	mov	r1, r2
 802a1bc:	4618      	mov	r0, r3
 802a1be:	f000 fbe9 	bl	802a994 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[3]);
 802a1c2:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 802a1c6:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 802a1ca:	f107 0114 	add.w	r1, r7, #20
 802a1ce:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802a1d2:	4618      	mov	r0, r3
 802a1d4:	f7ff fe20 	bl	8029e18 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 802a1d8:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 802a1dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 802a1e0:	4611      	mov	r1, r2
 802a1e2:	4618      	mov	r0, r3
 802a1e4:	f000 fb22 	bl	802a82c <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[4], &u);
 802a1e8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 802a1ec:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 802a1f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 802a1f4:	4611      	mov	r1, r2
 802a1f6:	4618      	mov	r0, r3
 802a1f8:	f000 fbcc 	bl	802a994 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[4]);
 802a1fc:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 802a200:	f503 7220 	add.w	r2, r3, #640	; 0x280
 802a204:	f107 0114 	add.w	r1, r7, #20
 802a208:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802a20c:	4618      	mov	r0, r3
 802a20e:	f7ff fe03 	bl	8029e18 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 802a212:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 802a216:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 802a21a:	4611      	mov	r1, r2
 802a21c:	4618      	mov	r0, r3
 802a21e:	f000 fb05 	bl	802a82c <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[5], &u);
 802a222:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 802a226:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 802a22a:	f503 7348 	add.w	r3, r3, #800	; 0x320
 802a22e:	4611      	mov	r1, r2
 802a230:	4618      	mov	r0, r3
 802a232:	f000 fbaf 	bl	802a994 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[5]);
 802a236:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 802a23a:	f503 7248 	add.w	r2, r3, #800	; 0x320
 802a23e:	f107 0114 	add.w	r1, r7, #20
 802a242:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802a246:	4618      	mov	r0, r3
 802a248:	f7ff fde6 	bl	8029e18 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 802a24c:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 802a250:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 802a254:	4611      	mov	r1, r2
 802a256:	4618      	mov	r0, r3
 802a258:	f000 fae8 	bl	802a82c <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[6], &u);
 802a25c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 802a260:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 802a264:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 802a268:	4611      	mov	r1, r2
 802a26a:	4618      	mov	r0, r3
 802a26c:	f000 fb92 	bl	802a994 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[6]);
 802a270:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 802a274:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
 802a278:	f107 0114 	add.w	r1, r7, #20
 802a27c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802a280:	4618      	mov	r0, r3
 802a282:	f7ff fdc9 	bl	8029e18 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 802a286:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 802a28a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 802a28e:	4611      	mov	r1, r2
 802a290:	4618      	mov	r0, r3
 802a292:	f000 facb 	bl	802a82c <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[7], &u);
 802a296:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 802a29a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 802a29e:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 802a2a2:	4611      	mov	r1, r2
 802a2a4:	4618      	mov	r0, r3
 802a2a6:	f000 fb75 	bl	802a994 <ge_p3_to_cached>
    ge_p2_0(r);
 802a2aa:	f107 030c 	add.w	r3, r7, #12
 802a2ae:	6818      	ldr	r0, [r3, #0]
 802a2b0:	f000 faeb 	bl	802a88a <ge_p2_0>

    for (i = 255; i >= 0; --i) {
 802a2b4:	23ff      	movs	r3, #255	; 0xff
 802a2b6:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 802a2ba:	e018      	b.n	802a2ee <ge_double_scalarmult_vartime+0x23a>
        if (aslide[i] || bslide[i]) {
 802a2bc:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 802a2c0:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 802a2c4:	4413      	add	r3, r2
 802a2c6:	f993 3000 	ldrsb.w	r3, [r3]
 802a2ca:	2b00      	cmp	r3, #0
 802a2cc:	f040 80d5 	bne.w	802a47a <ge_double_scalarmult_vartime+0x3c6>
 802a2d0:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 802a2d4:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 802a2d8:	4413      	add	r3, r2
 802a2da:	f993 3000 	ldrsb.w	r3, [r3]
 802a2de:	2b00      	cmp	r3, #0
 802a2e0:	f040 80cb 	bne.w	802a47a <ge_double_scalarmult_vartime+0x3c6>
    for (i = 255; i >= 0; --i) {
 802a2e4:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 802a2e8:	3b01      	subs	r3, #1
 802a2ea:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 802a2ee:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 802a2f2:	2b00      	cmp	r3, #0
 802a2f4:	dae2      	bge.n	802a2bc <ge_double_scalarmult_vartime+0x208>
            break;
        }
    }

    for (; i >= 0; --i) {
 802a2f6:	e0c0      	b.n	802a47a <ge_double_scalarmult_vartime+0x3c6>
        ge_p2_dbl(&t, r);
 802a2f8:	f107 030c 	add.w	r3, r7, #12
 802a2fc:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 802a300:	6819      	ldr	r1, [r3, #0]
 802a302:	4610      	mov	r0, r2
 802a304:	f000 fad7 	bl	802a8b6 <ge_p2_dbl>

        if (aslide[i] > 0) {
 802a308:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 802a30c:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 802a310:	4413      	add	r3, r2
 802a312:	f993 3000 	ldrsb.w	r3, [r3]
 802a316:	2b00      	cmp	r3, #0
 802a318:	dd22      	ble.n	802a360 <ge_double_scalarmult_vartime+0x2ac>
            ge_p1p1_to_p3(&u, &t);
 802a31a:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 802a31e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 802a322:	4611      	mov	r1, r2
 802a324:	4618      	mov	r0, r3
 802a326:	f000 fa81 	bl	802a82c <ge_p1p1_to_p3>
            ge_add(&t, &u, &Ai[aslide[i] / 2]);
 802a32a:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 802a32e:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 802a332:	4413      	add	r3, r2
 802a334:	f993 3000 	ldrsb.w	r3, [r3]
 802a338:	0fda      	lsrs	r2, r3, #31
 802a33a:	4413      	add	r3, r2
 802a33c:	105b      	asrs	r3, r3, #1
 802a33e:	b25b      	sxtb	r3, r3
 802a340:	4619      	mov	r1, r3
 802a342:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 802a346:	460b      	mov	r3, r1
 802a348:	009b      	lsls	r3, r3, #2
 802a34a:	440b      	add	r3, r1
 802a34c:	015b      	lsls	r3, r3, #5
 802a34e:	441a      	add	r2, r3
 802a350:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 802a354:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802a358:	4618      	mov	r0, r3
 802a35a:	f7ff fd5d 	bl	8029e18 <ge_add>
 802a35e:	e02a      	b.n	802a3b6 <ge_double_scalarmult_vartime+0x302>
        } else if (aslide[i] < 0) {
 802a360:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 802a364:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 802a368:	4413      	add	r3, r2
 802a36a:	f993 3000 	ldrsb.w	r3, [r3]
 802a36e:	2b00      	cmp	r3, #0
 802a370:	da21      	bge.n	802a3b6 <ge_double_scalarmult_vartime+0x302>
            ge_p1p1_to_p3(&u, &t);
 802a372:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 802a376:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 802a37a:	4611      	mov	r1, r2
 802a37c:	4618      	mov	r0, r3
 802a37e:	f000 fa55 	bl	802a82c <ge_p1p1_to_p3>
            ge_sub(&t, &u, &Ai[(-aslide[i]) / 2]);
 802a382:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 802a386:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 802a38a:	4413      	add	r3, r2
 802a38c:	f993 3000 	ldrsb.w	r3, [r3]
 802a390:	0fda      	lsrs	r2, r3, #31
 802a392:	4413      	add	r3, r2
 802a394:	105b      	asrs	r3, r3, #1
 802a396:	425b      	negs	r3, r3
 802a398:	4619      	mov	r1, r3
 802a39a:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 802a39e:	460b      	mov	r3, r1
 802a3a0:	009b      	lsls	r3, r3, #2
 802a3a2:	440b      	add	r3, r1
 802a3a4:	015b      	lsls	r3, r3, #5
 802a3a6:	441a      	add	r2, r3
 802a3a8:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 802a3ac:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802a3b0:	4618      	mov	r0, r3
 802a3b2:	f000 fb3e 	bl	802aa32 <ge_sub>
        }

        if (bslide[i] > 0) {
 802a3b6:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 802a3ba:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 802a3be:	4413      	add	r3, r2
 802a3c0:	f993 3000 	ldrsb.w	r3, [r3]
 802a3c4:	2b00      	cmp	r3, #0
 802a3c6:	dd21      	ble.n	802a40c <ge_double_scalarmult_vartime+0x358>
            ge_p1p1_to_p3(&u, &t);
 802a3c8:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 802a3cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 802a3d0:	4611      	mov	r1, r2
 802a3d2:	4618      	mov	r0, r3
 802a3d4:	f000 fa2a 	bl	802a82c <ge_p1p1_to_p3>
            ge_madd(&t, &u, &Bi[bslide[i] / 2]);
 802a3d8:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 802a3dc:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 802a3e0:	4413      	add	r3, r2
 802a3e2:	f993 3000 	ldrsb.w	r3, [r3]
 802a3e6:	0fda      	lsrs	r2, r3, #31
 802a3e8:	4413      	add	r3, r2
 802a3ea:	105b      	asrs	r3, r3, #1
 802a3ec:	b25b      	sxtb	r3, r3
 802a3ee:	461a      	mov	r2, r3
 802a3f0:	4613      	mov	r3, r2
 802a3f2:	011b      	lsls	r3, r3, #4
 802a3f4:	1a9b      	subs	r3, r3, r2
 802a3f6:	00db      	lsls	r3, r3, #3
 802a3f8:	4a25      	ldr	r2, [pc, #148]	; (802a490 <ge_double_scalarmult_vartime+0x3dc>)
 802a3fa:	441a      	add	r2, r3
 802a3fc:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 802a400:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802a404:	4618      	mov	r0, r3
 802a406:	f000 f913 	bl	802a630 <ge_madd>
 802a40a:	e029      	b.n	802a460 <ge_double_scalarmult_vartime+0x3ac>
        } else if (bslide[i] < 0) {
 802a40c:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 802a410:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 802a414:	4413      	add	r3, r2
 802a416:	f993 3000 	ldrsb.w	r3, [r3]
 802a41a:	2b00      	cmp	r3, #0
 802a41c:	da20      	bge.n	802a460 <ge_double_scalarmult_vartime+0x3ac>
            ge_p1p1_to_p3(&u, &t);
 802a41e:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 802a422:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 802a426:	4611      	mov	r1, r2
 802a428:	4618      	mov	r0, r3
 802a42a:	f000 f9ff 	bl	802a82c <ge_p1p1_to_p3>
            ge_msub(&t, &u, &Bi[(-bslide[i]) / 2]);
 802a42e:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 802a432:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 802a436:	4413      	add	r3, r2
 802a438:	f993 3000 	ldrsb.w	r3, [r3]
 802a43c:	0fda      	lsrs	r2, r3, #31
 802a43e:	4413      	add	r3, r2
 802a440:	105b      	asrs	r3, r3, #1
 802a442:	425b      	negs	r3, r3
 802a444:	461a      	mov	r2, r3
 802a446:	4613      	mov	r3, r2
 802a448:	011b      	lsls	r3, r3, #4
 802a44a:	1a9b      	subs	r3, r3, r2
 802a44c:	00db      	lsls	r3, r3, #3
 802a44e:	4a10      	ldr	r2, [pc, #64]	; (802a490 <ge_double_scalarmult_vartime+0x3dc>)
 802a450:	441a      	add	r2, r3
 802a452:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 802a456:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802a45a:	4618      	mov	r0, r3
 802a45c:	f000 f954 	bl	802a708 <ge_msub>
        }

        ge_p1p1_to_p2(r, &t);
 802a460:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 802a464:	f107 030c 	add.w	r3, r7, #12
 802a468:	4611      	mov	r1, r2
 802a46a:	6818      	ldr	r0, [r3, #0]
 802a46c:	f000 f9b8 	bl	802a7e0 <ge_p1p1_to_p2>
    for (; i >= 0; --i) {
 802a470:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 802a474:	3b01      	subs	r3, #1
 802a476:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 802a47a:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 802a47e:	2b00      	cmp	r3, #0
 802a480:	f6bf af3a 	bge.w	802a2f8 <ge_double_scalarmult_vartime+0x244>
    }
}
 802a484:	bf00      	nop
 802a486:	bf00      	nop
 802a488:	f607 07fc 	addw	r7, r7, #2300	; 0x8fc
 802a48c:	46bd      	mov	sp, r7
 802a48e:	bd90      	pop	{r4, r7, pc}
 802a490:	0803f85c 	.word	0x0803f85c

0802a494 <ge_frombytes_negate_vartime>:

static const fe sqrtm1 = {
    -32595792, -7943725, 9377950, 3500415, 12389472, -272473, -25146209, -2005654, 326686, 11406482
};

int ge_frombytes_negate_vartime(ge_p3 *h, const unsigned char *s) {
 802a494:	b580      	push	{r7, lr}
 802a496:	b0b4      	sub	sp, #208	; 0xd0
 802a498:	af00      	add	r7, sp, #0
 802a49a:	6078      	str	r0, [r7, #4]
 802a49c:	6039      	str	r1, [r7, #0]
    fe u;
    fe v;
    fe v3;
    fe vxx;
    fe check;
    fe_frombytes(h->Y, s);
 802a49e:	687b      	ldr	r3, [r7, #4]
 802a4a0:	3328      	adds	r3, #40	; 0x28
 802a4a2:	6839      	ldr	r1, [r7, #0]
 802a4a4:	4618      	mov	r0, r3
 802a4a6:	f7f8 fcf7 	bl	8022e98 <fe_frombytes>
    fe_1(h->Z);
 802a4aa:	687b      	ldr	r3, [r7, #4]
 802a4ac:	3350      	adds	r3, #80	; 0x50
 802a4ae:	4618      	mov	r0, r3
 802a4b0:	f7f8 fbd6 	bl	8022c60 <fe_1>
    fe_sq(u, h->Y);
 802a4b4:	687b      	ldr	r3, [r7, #4]
 802a4b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 802a4ba:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 802a4be:	4611      	mov	r1, r2
 802a4c0:	4618      	mov	r0, r3
 802a4c2:	f7fc f9ec 	bl	802689e <fe_sq>
    fe_mul(v, u, d);
 802a4c6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 802a4ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802a4ce:	4a56      	ldr	r2, [pc, #344]	; (802a628 <ge_frombytes_negate_vartime+0x194>)
 802a4d0:	4618      	mov	r0, r3
 802a4d2:	f7f9 fad5 	bl	8023a80 <fe_mul>
    fe_sub(u, u, h->Z);     /* u = y^2-1 */
 802a4d6:	687b      	ldr	r3, [r7, #4]
 802a4d8:	f103 0250 	add.w	r2, r3, #80	; 0x50
 802a4dc:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 802a4e0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 802a4e4:	4618      	mov	r0, r3
 802a4e6:	f7ff fa2d 	bl	8029944 <fe_sub>
    fe_add(v, v, h->Z);     /* v = dy^2+1 */
 802a4ea:	687b      	ldr	r3, [r7, #4]
 802a4ec:	f103 0250 	add.w	r2, r3, #80	; 0x50
 802a4f0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 802a4f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 802a4f8:	4618      	mov	r0, r3
 802a4fa:	f7f8 fbe2 	bl	8022cc2 <fe_add>
    fe_sq(v3, v);
 802a4fe:	f107 0280 	add.w	r2, r7, #128	; 0x80
 802a502:	f107 0358 	add.w	r3, r7, #88	; 0x58
 802a506:	4611      	mov	r1, r2
 802a508:	4618      	mov	r0, r3
 802a50a:	f7fc f9c8 	bl	802689e <fe_sq>
    fe_mul(v3, v3, v);      /* v3 = v^3 */
 802a50e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 802a512:	f107 0158 	add.w	r1, r7, #88	; 0x58
 802a516:	f107 0358 	add.w	r3, r7, #88	; 0x58
 802a51a:	4618      	mov	r0, r3
 802a51c:	f7f9 fab0 	bl	8023a80 <fe_mul>
    fe_sq(h->X, v3);
 802a520:	687b      	ldr	r3, [r7, #4]
 802a522:	f107 0258 	add.w	r2, r7, #88	; 0x58
 802a526:	4611      	mov	r1, r2
 802a528:	4618      	mov	r0, r3
 802a52a:	f7fc f9b8 	bl	802689e <fe_sq>
    fe_mul(h->X, h->X, v);
 802a52e:	687b      	ldr	r3, [r7, #4]
 802a530:	6879      	ldr	r1, [r7, #4]
 802a532:	f107 0280 	add.w	r2, r7, #128	; 0x80
 802a536:	4618      	mov	r0, r3
 802a538:	f7f9 faa2 	bl	8023a80 <fe_mul>
    fe_mul(h->X, h->X, u);  /* x = uv^7 */
 802a53c:	687b      	ldr	r3, [r7, #4]
 802a53e:	6879      	ldr	r1, [r7, #4]
 802a540:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 802a544:	4618      	mov	r0, r3
 802a546:	f7f9 fa9b 	bl	8023a80 <fe_mul>
    fe_pow22523(h->X, h->X); /* x = (uv^7)^((q-5)/8) */
 802a54a:	687b      	ldr	r3, [r7, #4]
 802a54c:	687a      	ldr	r2, [r7, #4]
 802a54e:	4611      	mov	r1, r2
 802a550:	4618      	mov	r0, r3
 802a552:	f7fb fffe 	bl	8026552 <fe_pow22523>
    fe_mul(h->X, h->X, v3);
 802a556:	687b      	ldr	r3, [r7, #4]
 802a558:	6879      	ldr	r1, [r7, #4]
 802a55a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 802a55e:	4618      	mov	r0, r3
 802a560:	f7f9 fa8e 	bl	8023a80 <fe_mul>
    fe_mul(h->X, h->X, u);  /* x = uv^3(uv^7)^((q-5)/8) */
 802a564:	687b      	ldr	r3, [r7, #4]
 802a566:	6879      	ldr	r1, [r7, #4]
 802a568:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 802a56c:	4618      	mov	r0, r3
 802a56e:	f7f9 fa87 	bl	8023a80 <fe_mul>
    fe_sq(vxx, h->X);
 802a572:	687a      	ldr	r2, [r7, #4]
 802a574:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a578:	4611      	mov	r1, r2
 802a57a:	4618      	mov	r0, r3
 802a57c:	f7fc f98f 	bl	802689e <fe_sq>
    fe_mul(vxx, vxx, v);
 802a580:	f107 0280 	add.w	r2, r7, #128	; 0x80
 802a584:	f107 0130 	add.w	r1, r7, #48	; 0x30
 802a588:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a58c:	4618      	mov	r0, r3
 802a58e:	f7f9 fa77 	bl	8023a80 <fe_mul>
    fe_sub(check, vxx, u);  /* vx^2-u */
 802a592:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 802a596:	f107 0130 	add.w	r1, r7, #48	; 0x30
 802a59a:	f107 0308 	add.w	r3, r7, #8
 802a59e:	4618      	mov	r0, r3
 802a5a0:	f7ff f9d0 	bl	8029944 <fe_sub>

    if (fe_isnonzero(check)) {
 802a5a4:	f107 0308 	add.w	r3, r7, #8
 802a5a8:	4618      	mov	r0, r3
 802a5aa:	f7f9 f98b 	bl	80238c4 <fe_isnonzero>
 802a5ae:	4603      	mov	r3, r0
 802a5b0:	2b00      	cmp	r3, #0
 802a5b2:	d019      	beq.n	802a5e8 <ge_frombytes_negate_vartime+0x154>
        fe_add(check, vxx, u); /* vx^2+u */
 802a5b4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 802a5b8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 802a5bc:	f107 0308 	add.w	r3, r7, #8
 802a5c0:	4618      	mov	r0, r3
 802a5c2:	f7f8 fb7e 	bl	8022cc2 <fe_add>

        if (fe_isnonzero(check)) {
 802a5c6:	f107 0308 	add.w	r3, r7, #8
 802a5ca:	4618      	mov	r0, r3
 802a5cc:	f7f9 f97a 	bl	80238c4 <fe_isnonzero>
 802a5d0:	4603      	mov	r3, r0
 802a5d2:	2b00      	cmp	r3, #0
 802a5d4:	d002      	beq.n	802a5dc <ge_frombytes_negate_vartime+0x148>
            return -1;
 802a5d6:	f04f 33ff 	mov.w	r3, #4294967295
 802a5da:	e021      	b.n	802a620 <ge_frombytes_negate_vartime+0x18c>
        }

        fe_mul(h->X, h->X, sqrtm1);
 802a5dc:	687b      	ldr	r3, [r7, #4]
 802a5de:	6879      	ldr	r1, [r7, #4]
 802a5e0:	4a12      	ldr	r2, [pc, #72]	; (802a62c <ge_frombytes_negate_vartime+0x198>)
 802a5e2:	4618      	mov	r0, r3
 802a5e4:	f7f9 fa4c 	bl	8023a80 <fe_mul>
    }

    if (fe_isnegative(h->X) == (s[31] >> 7)) {
 802a5e8:	687b      	ldr	r3, [r7, #4]
 802a5ea:	4618      	mov	r0, r3
 802a5ec:	f7f9 f959 	bl	80238a2 <fe_isnegative>
 802a5f0:	4602      	mov	r2, r0
 802a5f2:	683b      	ldr	r3, [r7, #0]
 802a5f4:	331f      	adds	r3, #31
 802a5f6:	781b      	ldrb	r3, [r3, #0]
 802a5f8:	09db      	lsrs	r3, r3, #7
 802a5fa:	b2db      	uxtb	r3, r3
 802a5fc:	429a      	cmp	r2, r3
 802a5fe:	d105      	bne.n	802a60c <ge_frombytes_negate_vartime+0x178>
        fe_neg(h->X, h->X);
 802a600:	687b      	ldr	r3, [r7, #4]
 802a602:	687a      	ldr	r2, [r7, #4]
 802a604:	4611      	mov	r1, r2
 802a606:	4618      	mov	r0, r3
 802a608:	f7fb ff35 	bl	8026476 <fe_neg>
    }

    fe_mul(h->T, h->X, h->Y);
 802a60c:	687b      	ldr	r3, [r7, #4]
 802a60e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802a612:	6879      	ldr	r1, [r7, #4]
 802a614:	687b      	ldr	r3, [r7, #4]
 802a616:	3328      	adds	r3, #40	; 0x28
 802a618:	461a      	mov	r2, r3
 802a61a:	f7f9 fa31 	bl	8023a80 <fe_mul>
    return 0;
 802a61e:	2300      	movs	r3, #0
}
 802a620:	4618      	mov	r0, r3
 802a622:	37d0      	adds	r7, #208	; 0xd0
 802a624:	46bd      	mov	sp, r7
 802a626:	bd80      	pop	{r7, pc}
 802a628:	0803fc1c 	.word	0x0803fc1c
 802a62c:	0803fc44 	.word	0x0803fc44

0802a630 <ge_madd>:

/*
r = p + q
*/

void ge_madd(ge_p1p1 *r, const ge_p3 *p, const ge_precomp *q) {
 802a630:	b580      	push	{r7, lr}
 802a632:	b08e      	sub	sp, #56	; 0x38
 802a634:	af00      	add	r7, sp, #0
 802a636:	60f8      	str	r0, [r7, #12]
 802a638:	60b9      	str	r1, [r7, #8]
 802a63a:	607a      	str	r2, [r7, #4]
    fe t0;
    fe_add(r->X, p->Y, p->X);
 802a63c:	68f8      	ldr	r0, [r7, #12]
 802a63e:	68bb      	ldr	r3, [r7, #8]
 802a640:	3328      	adds	r3, #40	; 0x28
 802a642:	68ba      	ldr	r2, [r7, #8]
 802a644:	4619      	mov	r1, r3
 802a646:	f7f8 fb3c 	bl	8022cc2 <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 802a64a:	68fb      	ldr	r3, [r7, #12]
 802a64c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a650:	68bb      	ldr	r3, [r7, #8]
 802a652:	3328      	adds	r3, #40	; 0x28
 802a654:	68ba      	ldr	r2, [r7, #8]
 802a656:	4619      	mov	r1, r3
 802a658:	f7ff f974 	bl	8029944 <fe_sub>
    fe_mul(r->Z, r->X, q->yplusx);
 802a65c:	68fb      	ldr	r3, [r7, #12]
 802a65e:	3350      	adds	r3, #80	; 0x50
 802a660:	68f9      	ldr	r1, [r7, #12]
 802a662:	687a      	ldr	r2, [r7, #4]
 802a664:	4618      	mov	r0, r3
 802a666:	f7f9 fa0b 	bl	8023a80 <fe_mul>
    fe_mul(r->Y, r->Y, q->yminusx);
 802a66a:	68fb      	ldr	r3, [r7, #12]
 802a66c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a670:	68fb      	ldr	r3, [r7, #12]
 802a672:	f103 0128 	add.w	r1, r3, #40	; 0x28
 802a676:	687b      	ldr	r3, [r7, #4]
 802a678:	3328      	adds	r3, #40	; 0x28
 802a67a:	461a      	mov	r2, r3
 802a67c:	f7f9 fa00 	bl	8023a80 <fe_mul>
    fe_mul(r->T, q->xy2d, p->T);
 802a680:	68fb      	ldr	r3, [r7, #12]
 802a682:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802a686:	687b      	ldr	r3, [r7, #4]
 802a688:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802a68c:	68bb      	ldr	r3, [r7, #8]
 802a68e:	3378      	adds	r3, #120	; 0x78
 802a690:	461a      	mov	r2, r3
 802a692:	f7f9 f9f5 	bl	8023a80 <fe_mul>
    fe_add(t0, p->Z, p->Z);
 802a696:	68bb      	ldr	r3, [r7, #8]
 802a698:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802a69c:	68bb      	ldr	r3, [r7, #8]
 802a69e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 802a6a2:	f107 0310 	add.w	r3, r7, #16
 802a6a6:	4618      	mov	r0, r3
 802a6a8:	f7f8 fb0b 	bl	8022cc2 <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 802a6ac:	68f8      	ldr	r0, [r7, #12]
 802a6ae:	68fb      	ldr	r3, [r7, #12]
 802a6b0:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802a6b4:	68fb      	ldr	r3, [r7, #12]
 802a6b6:	3328      	adds	r3, #40	; 0x28
 802a6b8:	461a      	mov	r2, r3
 802a6ba:	f7ff f943 	bl	8029944 <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 802a6be:	68fb      	ldr	r3, [r7, #12]
 802a6c0:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a6c4:	68fb      	ldr	r3, [r7, #12]
 802a6c6:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802a6ca:	68fb      	ldr	r3, [r7, #12]
 802a6cc:	3328      	adds	r3, #40	; 0x28
 802a6ce:	461a      	mov	r2, r3
 802a6d0:	f7f8 faf7 	bl	8022cc2 <fe_add>
    fe_add(r->Z, t0, r->T);
 802a6d4:	68fb      	ldr	r3, [r7, #12]
 802a6d6:	f103 0050 	add.w	r0, r3, #80	; 0x50
 802a6da:	68fb      	ldr	r3, [r7, #12]
 802a6dc:	f103 0278 	add.w	r2, r3, #120	; 0x78
 802a6e0:	f107 0310 	add.w	r3, r7, #16
 802a6e4:	4619      	mov	r1, r3
 802a6e6:	f7f8 faec 	bl	8022cc2 <fe_add>
    fe_sub(r->T, t0, r->T);
 802a6ea:	68fb      	ldr	r3, [r7, #12]
 802a6ec:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802a6f0:	68fb      	ldr	r3, [r7, #12]
 802a6f2:	f103 0278 	add.w	r2, r3, #120	; 0x78
 802a6f6:	f107 0310 	add.w	r3, r7, #16
 802a6fa:	4619      	mov	r1, r3
 802a6fc:	f7ff f922 	bl	8029944 <fe_sub>
}
 802a700:	bf00      	nop
 802a702:	3738      	adds	r7, #56	; 0x38
 802a704:	46bd      	mov	sp, r7
 802a706:	bd80      	pop	{r7, pc}

0802a708 <ge_msub>:

/*
r = p - q
*/

void ge_msub(ge_p1p1 *r, const ge_p3 *p, const ge_precomp *q) {
 802a708:	b580      	push	{r7, lr}
 802a70a:	b08e      	sub	sp, #56	; 0x38
 802a70c:	af00      	add	r7, sp, #0
 802a70e:	60f8      	str	r0, [r7, #12]
 802a710:	60b9      	str	r1, [r7, #8]
 802a712:	607a      	str	r2, [r7, #4]
    fe t0;

    fe_add(r->X, p->Y, p->X);
 802a714:	68f8      	ldr	r0, [r7, #12]
 802a716:	68bb      	ldr	r3, [r7, #8]
 802a718:	3328      	adds	r3, #40	; 0x28
 802a71a:	68ba      	ldr	r2, [r7, #8]
 802a71c:	4619      	mov	r1, r3
 802a71e:	f7f8 fad0 	bl	8022cc2 <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 802a722:	68fb      	ldr	r3, [r7, #12]
 802a724:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a728:	68bb      	ldr	r3, [r7, #8]
 802a72a:	3328      	adds	r3, #40	; 0x28
 802a72c:	68ba      	ldr	r2, [r7, #8]
 802a72e:	4619      	mov	r1, r3
 802a730:	f7ff f908 	bl	8029944 <fe_sub>
    fe_mul(r->Z, r->X, q->yminusx);
 802a734:	68fb      	ldr	r3, [r7, #12]
 802a736:	f103 0050 	add.w	r0, r3, #80	; 0x50
 802a73a:	68f9      	ldr	r1, [r7, #12]
 802a73c:	687b      	ldr	r3, [r7, #4]
 802a73e:	3328      	adds	r3, #40	; 0x28
 802a740:	461a      	mov	r2, r3
 802a742:	f7f9 f99d 	bl	8023a80 <fe_mul>
    fe_mul(r->Y, r->Y, q->yplusx);
 802a746:	68fb      	ldr	r3, [r7, #12]
 802a748:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a74c:	68fb      	ldr	r3, [r7, #12]
 802a74e:	3328      	adds	r3, #40	; 0x28
 802a750:	687a      	ldr	r2, [r7, #4]
 802a752:	4619      	mov	r1, r3
 802a754:	f7f9 f994 	bl	8023a80 <fe_mul>
    fe_mul(r->T, q->xy2d, p->T);
 802a758:	68fb      	ldr	r3, [r7, #12]
 802a75a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802a75e:	687b      	ldr	r3, [r7, #4]
 802a760:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802a764:	68bb      	ldr	r3, [r7, #8]
 802a766:	3378      	adds	r3, #120	; 0x78
 802a768:	461a      	mov	r2, r3
 802a76a:	f7f9 f989 	bl	8023a80 <fe_mul>
    fe_add(t0, p->Z, p->Z);
 802a76e:	68bb      	ldr	r3, [r7, #8]
 802a770:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802a774:	68bb      	ldr	r3, [r7, #8]
 802a776:	f103 0250 	add.w	r2, r3, #80	; 0x50
 802a77a:	f107 0310 	add.w	r3, r7, #16
 802a77e:	4618      	mov	r0, r3
 802a780:	f7f8 fa9f 	bl	8022cc2 <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 802a784:	68f8      	ldr	r0, [r7, #12]
 802a786:	68fb      	ldr	r3, [r7, #12]
 802a788:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802a78c:	68fb      	ldr	r3, [r7, #12]
 802a78e:	3328      	adds	r3, #40	; 0x28
 802a790:	461a      	mov	r2, r3
 802a792:	f7ff f8d7 	bl	8029944 <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 802a796:	68fb      	ldr	r3, [r7, #12]
 802a798:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a79c:	68fb      	ldr	r3, [r7, #12]
 802a79e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802a7a2:	68fb      	ldr	r3, [r7, #12]
 802a7a4:	3328      	adds	r3, #40	; 0x28
 802a7a6:	461a      	mov	r2, r3
 802a7a8:	f7f8 fa8b 	bl	8022cc2 <fe_add>
    fe_sub(r->Z, t0, r->T);
 802a7ac:	68fb      	ldr	r3, [r7, #12]
 802a7ae:	f103 0050 	add.w	r0, r3, #80	; 0x50
 802a7b2:	68fb      	ldr	r3, [r7, #12]
 802a7b4:	f103 0278 	add.w	r2, r3, #120	; 0x78
 802a7b8:	f107 0310 	add.w	r3, r7, #16
 802a7bc:	4619      	mov	r1, r3
 802a7be:	f7ff f8c1 	bl	8029944 <fe_sub>
    fe_add(r->T, t0, r->T);
 802a7c2:	68fb      	ldr	r3, [r7, #12]
 802a7c4:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802a7c8:	68fb      	ldr	r3, [r7, #12]
 802a7ca:	f103 0278 	add.w	r2, r3, #120	; 0x78
 802a7ce:	f107 0310 	add.w	r3, r7, #16
 802a7d2:	4619      	mov	r1, r3
 802a7d4:	f7f8 fa75 	bl	8022cc2 <fe_add>
}
 802a7d8:	bf00      	nop
 802a7da:	3738      	adds	r7, #56	; 0x38
 802a7dc:	46bd      	mov	sp, r7
 802a7de:	bd80      	pop	{r7, pc}

0802a7e0 <ge_p1p1_to_p2>:

/*
r = p
*/

void ge_p1p1_to_p2(ge_p2 *r, const ge_p1p1 *p) {
 802a7e0:	b580      	push	{r7, lr}
 802a7e2:	b082      	sub	sp, #8
 802a7e4:	af00      	add	r7, sp, #0
 802a7e6:	6078      	str	r0, [r7, #4]
 802a7e8:	6039      	str	r1, [r7, #0]
    fe_mul(r->X, p->X, p->T);
 802a7ea:	6878      	ldr	r0, [r7, #4]
 802a7ec:	6839      	ldr	r1, [r7, #0]
 802a7ee:	683b      	ldr	r3, [r7, #0]
 802a7f0:	3378      	adds	r3, #120	; 0x78
 802a7f2:	461a      	mov	r2, r3
 802a7f4:	f7f9 f944 	bl	8023a80 <fe_mul>
    fe_mul(r->Y, p->Y, p->Z);
 802a7f8:	687b      	ldr	r3, [r7, #4]
 802a7fa:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a7fe:	683b      	ldr	r3, [r7, #0]
 802a800:	f103 0128 	add.w	r1, r3, #40	; 0x28
 802a804:	683b      	ldr	r3, [r7, #0]
 802a806:	3350      	adds	r3, #80	; 0x50
 802a808:	461a      	mov	r2, r3
 802a80a:	f7f9 f939 	bl	8023a80 <fe_mul>
    fe_mul(r->Z, p->Z, p->T);
 802a80e:	687b      	ldr	r3, [r7, #4]
 802a810:	f103 0050 	add.w	r0, r3, #80	; 0x50
 802a814:	683b      	ldr	r3, [r7, #0]
 802a816:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802a81a:	683b      	ldr	r3, [r7, #0]
 802a81c:	3378      	adds	r3, #120	; 0x78
 802a81e:	461a      	mov	r2, r3
 802a820:	f7f9 f92e 	bl	8023a80 <fe_mul>
}
 802a824:	bf00      	nop
 802a826:	3708      	adds	r7, #8
 802a828:	46bd      	mov	sp, r7
 802a82a:	bd80      	pop	{r7, pc}

0802a82c <ge_p1p1_to_p3>:

/*
r = p
*/

void ge_p1p1_to_p3(ge_p3 *r, const ge_p1p1 *p) {
 802a82c:	b580      	push	{r7, lr}
 802a82e:	b082      	sub	sp, #8
 802a830:	af00      	add	r7, sp, #0
 802a832:	6078      	str	r0, [r7, #4]
 802a834:	6039      	str	r1, [r7, #0]
    fe_mul(r->X, p->X, p->T);
 802a836:	6878      	ldr	r0, [r7, #4]
 802a838:	6839      	ldr	r1, [r7, #0]
 802a83a:	683b      	ldr	r3, [r7, #0]
 802a83c:	3378      	adds	r3, #120	; 0x78
 802a83e:	461a      	mov	r2, r3
 802a840:	f7f9 f91e 	bl	8023a80 <fe_mul>
    fe_mul(r->Y, p->Y, p->Z);
 802a844:	687b      	ldr	r3, [r7, #4]
 802a846:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a84a:	683b      	ldr	r3, [r7, #0]
 802a84c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 802a850:	683b      	ldr	r3, [r7, #0]
 802a852:	3350      	adds	r3, #80	; 0x50
 802a854:	461a      	mov	r2, r3
 802a856:	f7f9 f913 	bl	8023a80 <fe_mul>
    fe_mul(r->Z, p->Z, p->T);
 802a85a:	687b      	ldr	r3, [r7, #4]
 802a85c:	f103 0050 	add.w	r0, r3, #80	; 0x50
 802a860:	683b      	ldr	r3, [r7, #0]
 802a862:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802a866:	683b      	ldr	r3, [r7, #0]
 802a868:	3378      	adds	r3, #120	; 0x78
 802a86a:	461a      	mov	r2, r3
 802a86c:	f7f9 f908 	bl	8023a80 <fe_mul>
    fe_mul(r->T, p->X, p->Y);
 802a870:	687b      	ldr	r3, [r7, #4]
 802a872:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802a876:	6839      	ldr	r1, [r7, #0]
 802a878:	683b      	ldr	r3, [r7, #0]
 802a87a:	3328      	adds	r3, #40	; 0x28
 802a87c:	461a      	mov	r2, r3
 802a87e:	f7f9 f8ff 	bl	8023a80 <fe_mul>
}
 802a882:	bf00      	nop
 802a884:	3708      	adds	r7, #8
 802a886:	46bd      	mov	sp, r7
 802a888:	bd80      	pop	{r7, pc}

0802a88a <ge_p2_0>:


void ge_p2_0(ge_p2 *h) {
 802a88a:	b580      	push	{r7, lr}
 802a88c:	b082      	sub	sp, #8
 802a88e:	af00      	add	r7, sp, #0
 802a890:	6078      	str	r0, [r7, #4]
    fe_0(h->X);
 802a892:	687b      	ldr	r3, [r7, #4]
 802a894:	4618      	mov	r0, r3
 802a896:	f7f8 f9b2 	bl	8022bfe <fe_0>
    fe_1(h->Y);
 802a89a:	687b      	ldr	r3, [r7, #4]
 802a89c:	3328      	adds	r3, #40	; 0x28
 802a89e:	4618      	mov	r0, r3
 802a8a0:	f7f8 f9de 	bl	8022c60 <fe_1>
    fe_1(h->Z);
 802a8a4:	687b      	ldr	r3, [r7, #4]
 802a8a6:	3350      	adds	r3, #80	; 0x50
 802a8a8:	4618      	mov	r0, r3
 802a8aa:	f7f8 f9d9 	bl	8022c60 <fe_1>
}
 802a8ae:	bf00      	nop
 802a8b0:	3708      	adds	r7, #8
 802a8b2:	46bd      	mov	sp, r7
 802a8b4:	bd80      	pop	{r7, pc}

0802a8b6 <ge_p2_dbl>:

/*
r = 2 * p
*/

void ge_p2_dbl(ge_p1p1 *r, const ge_p2 *p) {
 802a8b6:	b580      	push	{r7, lr}
 802a8b8:	b08c      	sub	sp, #48	; 0x30
 802a8ba:	af00      	add	r7, sp, #0
 802a8bc:	6078      	str	r0, [r7, #4]
 802a8be:	6039      	str	r1, [r7, #0]
    fe t0;

    fe_sq(r->X, p->X);
 802a8c0:	687b      	ldr	r3, [r7, #4]
 802a8c2:	683a      	ldr	r2, [r7, #0]
 802a8c4:	4611      	mov	r1, r2
 802a8c6:	4618      	mov	r0, r3
 802a8c8:	f7fb ffe9 	bl	802689e <fe_sq>
    fe_sq(r->Z, p->Y);
 802a8cc:	687b      	ldr	r3, [r7, #4]
 802a8ce:	f103 0250 	add.w	r2, r3, #80	; 0x50
 802a8d2:	683b      	ldr	r3, [r7, #0]
 802a8d4:	3328      	adds	r3, #40	; 0x28
 802a8d6:	4619      	mov	r1, r3
 802a8d8:	4610      	mov	r0, r2
 802a8da:	f7fb ffe0 	bl	802689e <fe_sq>
    fe_sq2(r->T, p->Z);
 802a8de:	687b      	ldr	r3, [r7, #4]
 802a8e0:	f103 0278 	add.w	r2, r3, #120	; 0x78
 802a8e4:	683b      	ldr	r3, [r7, #0]
 802a8e6:	3350      	adds	r3, #80	; 0x50
 802a8e8:	4619      	mov	r1, r3
 802a8ea:	4610      	mov	r0, r2
 802a8ec:	f7fd fba6 	bl	802803c <fe_sq2>
    fe_add(r->Y, p->X, p->Y);
 802a8f0:	687b      	ldr	r3, [r7, #4]
 802a8f2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a8f6:	6839      	ldr	r1, [r7, #0]
 802a8f8:	683b      	ldr	r3, [r7, #0]
 802a8fa:	3328      	adds	r3, #40	; 0x28
 802a8fc:	461a      	mov	r2, r3
 802a8fe:	f7f8 f9e0 	bl	8022cc2 <fe_add>
    fe_sq(t0, r->Y);
 802a902:	687b      	ldr	r3, [r7, #4]
 802a904:	f103 0228 	add.w	r2, r3, #40	; 0x28
 802a908:	f107 0308 	add.w	r3, r7, #8
 802a90c:	4611      	mov	r1, r2
 802a90e:	4618      	mov	r0, r3
 802a910:	f7fb ffc5 	bl	802689e <fe_sq>
    fe_add(r->Y, r->Z, r->X);
 802a914:	687b      	ldr	r3, [r7, #4]
 802a916:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a91a:	687b      	ldr	r3, [r7, #4]
 802a91c:	3350      	adds	r3, #80	; 0x50
 802a91e:	687a      	ldr	r2, [r7, #4]
 802a920:	4619      	mov	r1, r3
 802a922:	f7f8 f9ce 	bl	8022cc2 <fe_add>
    fe_sub(r->Z, r->Z, r->X);
 802a926:	687b      	ldr	r3, [r7, #4]
 802a928:	f103 0050 	add.w	r0, r3, #80	; 0x50
 802a92c:	687b      	ldr	r3, [r7, #4]
 802a92e:	3350      	adds	r3, #80	; 0x50
 802a930:	687a      	ldr	r2, [r7, #4]
 802a932:	4619      	mov	r1, r3
 802a934:	f7ff f806 	bl	8029944 <fe_sub>
    fe_sub(r->X, t0, r->Y);
 802a938:	6878      	ldr	r0, [r7, #4]
 802a93a:	687b      	ldr	r3, [r7, #4]
 802a93c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 802a940:	f107 0308 	add.w	r3, r7, #8
 802a944:	4619      	mov	r1, r3
 802a946:	f7fe fffd 	bl	8029944 <fe_sub>
    fe_sub(r->T, r->T, r->Z);
 802a94a:	687b      	ldr	r3, [r7, #4]
 802a94c:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802a950:	687b      	ldr	r3, [r7, #4]
 802a952:	f103 0178 	add.w	r1, r3, #120	; 0x78
 802a956:	687b      	ldr	r3, [r7, #4]
 802a958:	3350      	adds	r3, #80	; 0x50
 802a95a:	461a      	mov	r2, r3
 802a95c:	f7fe fff2 	bl	8029944 <fe_sub>
}
 802a960:	bf00      	nop
 802a962:	3730      	adds	r7, #48	; 0x30
 802a964:	46bd      	mov	sp, r7
 802a966:	bd80      	pop	{r7, pc}

0802a968 <ge_p3_dbl>:

/*
r = 2 * p
*/

void ge_p3_dbl(ge_p1p1 *r, const ge_p3 *p) {
 802a968:	b580      	push	{r7, lr}
 802a96a:	b0a0      	sub	sp, #128	; 0x80
 802a96c:	af00      	add	r7, sp, #0
 802a96e:	6078      	str	r0, [r7, #4]
 802a970:	6039      	str	r1, [r7, #0]
    ge_p2 q;
    ge_p3_to_p2(&q, p);
 802a972:	f107 0308 	add.w	r3, r7, #8
 802a976:	6839      	ldr	r1, [r7, #0]
 802a978:	4618      	mov	r0, r3
 802a97a:	f000 f839 	bl	802a9f0 <ge_p3_to_p2>
    ge_p2_dbl(r, &q);
 802a97e:	f107 0308 	add.w	r3, r7, #8
 802a982:	4619      	mov	r1, r3
 802a984:	6878      	ldr	r0, [r7, #4]
 802a986:	f7ff ff96 	bl	802a8b6 <ge_p2_dbl>
}
 802a98a:	bf00      	nop
 802a98c:	3780      	adds	r7, #128	; 0x80
 802a98e:	46bd      	mov	sp, r7
 802a990:	bd80      	pop	{r7, pc}
	...

0802a994 <ge_p3_to_cached>:

static const fe d2 = {
    -21827239, -5839606, -30745221, 13898782, 229458, 15978800, -12551817, -6495438, 29715968, 9444199
};

void ge_p3_to_cached(ge_cached *r, const ge_p3 *p) {
 802a994:	b580      	push	{r7, lr}
 802a996:	b082      	sub	sp, #8
 802a998:	af00      	add	r7, sp, #0
 802a99a:	6078      	str	r0, [r7, #4]
 802a99c:	6039      	str	r1, [r7, #0]
    fe_add(r->YplusX, p->Y, p->X);
 802a99e:	6878      	ldr	r0, [r7, #4]
 802a9a0:	683b      	ldr	r3, [r7, #0]
 802a9a2:	3328      	adds	r3, #40	; 0x28
 802a9a4:	683a      	ldr	r2, [r7, #0]
 802a9a6:	4619      	mov	r1, r3
 802a9a8:	f7f8 f98b 	bl	8022cc2 <fe_add>
    fe_sub(r->YminusX, p->Y, p->X);
 802a9ac:	687b      	ldr	r3, [r7, #4]
 802a9ae:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a9b2:	683b      	ldr	r3, [r7, #0]
 802a9b4:	3328      	adds	r3, #40	; 0x28
 802a9b6:	683a      	ldr	r2, [r7, #0]
 802a9b8:	4619      	mov	r1, r3
 802a9ba:	f7fe ffc3 	bl	8029944 <fe_sub>
    fe_copy(r->Z, p->Z);
 802a9be:	687b      	ldr	r3, [r7, #4]
 802a9c0:	f103 0250 	add.w	r2, r3, #80	; 0x50
 802a9c4:	683b      	ldr	r3, [r7, #0]
 802a9c6:	3350      	adds	r3, #80	; 0x50
 802a9c8:	4619      	mov	r1, r3
 802a9ca:	4610      	mov	r0, r2
 802a9cc:	f7f8 fa14 	bl	8022df8 <fe_copy>
    fe_mul(r->T2d, p->T, d2);
 802a9d0:	687b      	ldr	r3, [r7, #4]
 802a9d2:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802a9d6:	683b      	ldr	r3, [r7, #0]
 802a9d8:	3378      	adds	r3, #120	; 0x78
 802a9da:	4a04      	ldr	r2, [pc, #16]	; (802a9ec <ge_p3_to_cached+0x58>)
 802a9dc:	4619      	mov	r1, r3
 802a9de:	f7f9 f84f 	bl	8023a80 <fe_mul>
}
 802a9e2:	bf00      	nop
 802a9e4:	3708      	adds	r7, #8
 802a9e6:	46bd      	mov	sp, r7
 802a9e8:	bd80      	pop	{r7, pc}
 802a9ea:	bf00      	nop
 802a9ec:	0803fc6c 	.word	0x0803fc6c

0802a9f0 <ge_p3_to_p2>:

/*
r = p
*/

void ge_p3_to_p2(ge_p2 *r, const ge_p3 *p) {
 802a9f0:	b580      	push	{r7, lr}
 802a9f2:	b082      	sub	sp, #8
 802a9f4:	af00      	add	r7, sp, #0
 802a9f6:	6078      	str	r0, [r7, #4]
 802a9f8:	6039      	str	r1, [r7, #0]
    fe_copy(r->X, p->X);
 802a9fa:	687b      	ldr	r3, [r7, #4]
 802a9fc:	683a      	ldr	r2, [r7, #0]
 802a9fe:	4611      	mov	r1, r2
 802aa00:	4618      	mov	r0, r3
 802aa02:	f7f8 f9f9 	bl	8022df8 <fe_copy>
    fe_copy(r->Y, p->Y);
 802aa06:	687b      	ldr	r3, [r7, #4]
 802aa08:	f103 0228 	add.w	r2, r3, #40	; 0x28
 802aa0c:	683b      	ldr	r3, [r7, #0]
 802aa0e:	3328      	adds	r3, #40	; 0x28
 802aa10:	4619      	mov	r1, r3
 802aa12:	4610      	mov	r0, r2
 802aa14:	f7f8 f9f0 	bl	8022df8 <fe_copy>
    fe_copy(r->Z, p->Z);
 802aa18:	687b      	ldr	r3, [r7, #4]
 802aa1a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 802aa1e:	683b      	ldr	r3, [r7, #0]
 802aa20:	3350      	adds	r3, #80	; 0x50
 802aa22:	4619      	mov	r1, r3
 802aa24:	4610      	mov	r0, r2
 802aa26:	f7f8 f9e7 	bl	8022df8 <fe_copy>
}
 802aa2a:	bf00      	nop
 802aa2c:	3708      	adds	r7, #8
 802aa2e:	46bd      	mov	sp, r7
 802aa30:	bd80      	pop	{r7, pc}

0802aa32 <ge_sub>:

/*
r = p - q
*/

void ge_sub(ge_p1p1 *r, const ge_p3 *p, const ge_cached *q) {
 802aa32:	b580      	push	{r7, lr}
 802aa34:	b08e      	sub	sp, #56	; 0x38
 802aa36:	af00      	add	r7, sp, #0
 802aa38:	60f8      	str	r0, [r7, #12]
 802aa3a:	60b9      	str	r1, [r7, #8]
 802aa3c:	607a      	str	r2, [r7, #4]
    fe t0;
    
    fe_add(r->X, p->Y, p->X);
 802aa3e:	68f8      	ldr	r0, [r7, #12]
 802aa40:	68bb      	ldr	r3, [r7, #8]
 802aa42:	3328      	adds	r3, #40	; 0x28
 802aa44:	68ba      	ldr	r2, [r7, #8]
 802aa46:	4619      	mov	r1, r3
 802aa48:	f7f8 f93b 	bl	8022cc2 <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 802aa4c:	68fb      	ldr	r3, [r7, #12]
 802aa4e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802aa52:	68bb      	ldr	r3, [r7, #8]
 802aa54:	3328      	adds	r3, #40	; 0x28
 802aa56:	68ba      	ldr	r2, [r7, #8]
 802aa58:	4619      	mov	r1, r3
 802aa5a:	f7fe ff73 	bl	8029944 <fe_sub>
    fe_mul(r->Z, r->X, q->YminusX);
 802aa5e:	68fb      	ldr	r3, [r7, #12]
 802aa60:	f103 0050 	add.w	r0, r3, #80	; 0x50
 802aa64:	68f9      	ldr	r1, [r7, #12]
 802aa66:	687b      	ldr	r3, [r7, #4]
 802aa68:	3328      	adds	r3, #40	; 0x28
 802aa6a:	461a      	mov	r2, r3
 802aa6c:	f7f9 f808 	bl	8023a80 <fe_mul>
    fe_mul(r->Y, r->Y, q->YplusX);
 802aa70:	68fb      	ldr	r3, [r7, #12]
 802aa72:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802aa76:	68fb      	ldr	r3, [r7, #12]
 802aa78:	3328      	adds	r3, #40	; 0x28
 802aa7a:	687a      	ldr	r2, [r7, #4]
 802aa7c:	4619      	mov	r1, r3
 802aa7e:	f7f8 ffff 	bl	8023a80 <fe_mul>
    fe_mul(r->T, q->T2d, p->T);
 802aa82:	68fb      	ldr	r3, [r7, #12]
 802aa84:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802aa88:	687b      	ldr	r3, [r7, #4]
 802aa8a:	f103 0178 	add.w	r1, r3, #120	; 0x78
 802aa8e:	68bb      	ldr	r3, [r7, #8]
 802aa90:	3378      	adds	r3, #120	; 0x78
 802aa92:	461a      	mov	r2, r3
 802aa94:	f7f8 fff4 	bl	8023a80 <fe_mul>
    fe_mul(r->X, p->Z, q->Z);
 802aa98:	68f8      	ldr	r0, [r7, #12]
 802aa9a:	68bb      	ldr	r3, [r7, #8]
 802aa9c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802aaa0:	687b      	ldr	r3, [r7, #4]
 802aaa2:	3350      	adds	r3, #80	; 0x50
 802aaa4:	461a      	mov	r2, r3
 802aaa6:	f7f8 ffeb 	bl	8023a80 <fe_mul>
    fe_add(t0, r->X, r->X);
 802aaaa:	68f9      	ldr	r1, [r7, #12]
 802aaac:	68fa      	ldr	r2, [r7, #12]
 802aaae:	f107 0310 	add.w	r3, r7, #16
 802aab2:	4618      	mov	r0, r3
 802aab4:	f7f8 f905 	bl	8022cc2 <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 802aab8:	68f8      	ldr	r0, [r7, #12]
 802aaba:	68fb      	ldr	r3, [r7, #12]
 802aabc:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802aac0:	68fb      	ldr	r3, [r7, #12]
 802aac2:	3328      	adds	r3, #40	; 0x28
 802aac4:	461a      	mov	r2, r3
 802aac6:	f7fe ff3d 	bl	8029944 <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 802aaca:	68fb      	ldr	r3, [r7, #12]
 802aacc:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802aad0:	68fb      	ldr	r3, [r7, #12]
 802aad2:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802aad6:	68fb      	ldr	r3, [r7, #12]
 802aad8:	3328      	adds	r3, #40	; 0x28
 802aada:	461a      	mov	r2, r3
 802aadc:	f7f8 f8f1 	bl	8022cc2 <fe_add>
    fe_sub(r->Z, t0, r->T);
 802aae0:	68fb      	ldr	r3, [r7, #12]
 802aae2:	f103 0050 	add.w	r0, r3, #80	; 0x50
 802aae6:	68fb      	ldr	r3, [r7, #12]
 802aae8:	f103 0278 	add.w	r2, r3, #120	; 0x78
 802aaec:	f107 0310 	add.w	r3, r7, #16
 802aaf0:	4619      	mov	r1, r3
 802aaf2:	f7fe ff27 	bl	8029944 <fe_sub>
    fe_add(r->T, t0, r->T);
 802aaf6:	68fb      	ldr	r3, [r7, #12]
 802aaf8:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802aafc:	68fb      	ldr	r3, [r7, #12]
 802aafe:	f103 0278 	add.w	r2, r3, #120	; 0x78
 802ab02:	f107 0310 	add.w	r3, r7, #16
 802ab06:	4619      	mov	r1, r3
 802ab08:	f7f8 f8db 	bl	8022cc2 <fe_add>
}
 802ab0c:	bf00      	nop
 802ab0e:	3738      	adds	r7, #56	; 0x38
 802ab10:	46bd      	mov	sp, r7
 802ab12:	bd80      	pop	{r7, pc}

0802ab14 <ge_tobytes>:


void ge_tobytes(unsigned char *s, const ge_p2 *h) {
 802ab14:	b580      	push	{r7, lr}
 802ab16:	b0a0      	sub	sp, #128	; 0x80
 802ab18:	af00      	add	r7, sp, #0
 802ab1a:	6078      	str	r0, [r7, #4]
 802ab1c:	6039      	str	r1, [r7, #0]
    fe recip;
    fe x;
    fe y;
    fe_invert(recip, h->Z);
 802ab1e:	683b      	ldr	r3, [r7, #0]
 802ab20:	f103 0250 	add.w	r2, r3, #80	; 0x50
 802ab24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 802ab28:	4611      	mov	r1, r2
 802ab2a:	4618      	mov	r0, r3
 802ab2c:	f7f8 fd12 	bl	8023554 <fe_invert>
    fe_mul(x, h->X, recip);
 802ab30:	6839      	ldr	r1, [r7, #0]
 802ab32:	f107 0258 	add.w	r2, r7, #88	; 0x58
 802ab36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802ab3a:	4618      	mov	r0, r3
 802ab3c:	f7f8 ffa0 	bl	8023a80 <fe_mul>
    fe_mul(y, h->Y, recip);
 802ab40:	683b      	ldr	r3, [r7, #0]
 802ab42:	f103 0128 	add.w	r1, r3, #40	; 0x28
 802ab46:	f107 0258 	add.w	r2, r7, #88	; 0x58
 802ab4a:	f107 0308 	add.w	r3, r7, #8
 802ab4e:	4618      	mov	r0, r3
 802ab50:	f7f8 ff96 	bl	8023a80 <fe_mul>
    fe_tobytes(s, y);
 802ab54:	f107 0308 	add.w	r3, r7, #8
 802ab58:	4619      	mov	r1, r3
 802ab5a:	6878      	ldr	r0, [r7, #4]
 802ab5c:	f7fe ff8d 	bl	8029a7a <fe_tobytes>
    s[31] ^= fe_isnegative(x) << 7;
 802ab60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802ab64:	4618      	mov	r0, r3
 802ab66:	f7f8 fe9c 	bl	80238a2 <fe_isnegative>
 802ab6a:	4603      	mov	r3, r0
 802ab6c:	01d9      	lsls	r1, r3, #7
 802ab6e:	687b      	ldr	r3, [r7, #4]
 802ab70:	331f      	adds	r3, #31
 802ab72:	781b      	ldrb	r3, [r3, #0]
 802ab74:	b25a      	sxtb	r2, r3
 802ab76:	b24b      	sxtb	r3, r1
 802ab78:	4053      	eors	r3, r2
 802ab7a:	b25a      	sxtb	r2, r3
 802ab7c:	687b      	ldr	r3, [r7, #4]
 802ab7e:	331f      	adds	r3, #31
 802ab80:	b2d2      	uxtb	r2, r2
 802ab82:	701a      	strb	r2, [r3, #0]
}
 802ab84:	bf00      	nop
 802ab86:	3780      	adds	r7, #128	; 0x80
 802ab88:	46bd      	mov	sp, r7
 802ab8a:	bd80      	pop	{r7, pc}

0802ab8c <Update_Signature>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Update_Signature(Certificate *cert, uint8_t* signature){
 802ab8c:	b480      	push	{r7}
 802ab8e:	b085      	sub	sp, #20
 802ab90:	af00      	add	r7, sp, #0
 802ab92:	6078      	str	r0, [r7, #4]
 802ab94:	6039      	str	r1, [r7, #0]
	for(uint8_t index = 0; index < 64; index++){
 802ab96:	2300      	movs	r3, #0
 802ab98:	73fb      	strb	r3, [r7, #15]
 802ab9a:	e009      	b.n	802abb0 <Update_Signature+0x24>
		cert->signature[index] = signature[index];
 802ab9c:	7bfb      	ldrb	r3, [r7, #15]
 802ab9e:	683a      	ldr	r2, [r7, #0]
 802aba0:	441a      	add	r2, r3
 802aba2:	7bfb      	ldrb	r3, [r7, #15]
 802aba4:	7811      	ldrb	r1, [r2, #0]
 802aba6:	687a      	ldr	r2, [r7, #4]
 802aba8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < 64; index++){
 802abaa:	7bfb      	ldrb	r3, [r7, #15]
 802abac:	3301      	adds	r3, #1
 802abae:	73fb      	strb	r3, [r7, #15]
 802abb0:	7bfb      	ldrb	r3, [r7, #15]
 802abb2:	2b3f      	cmp	r3, #63	; 0x3f
 802abb4:	d9f2      	bls.n	802ab9c <Update_Signature+0x10>
	}
}
 802abb6:	bf00      	nop
 802abb8:	bf00      	nop
 802abba:	3714      	adds	r7, #20
 802abbc:	46bd      	mov	sp, r7
 802abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802abc2:	4770      	bx	lr

0802abc4 <Update_Publickey>:

void Update_Publickey(Certificate *cert, uint8_t* publickey){
 802abc4:	b480      	push	{r7}
 802abc6:	b085      	sub	sp, #20
 802abc8:	af00      	add	r7, sp, #0
 802abca:	6078      	str	r0, [r7, #4]
 802abcc:	6039      	str	r1, [r7, #0]
	for(uint8_t index = 0;index < 32; index++){
 802abce:	2300      	movs	r3, #0
 802abd0:	73fb      	strb	r3, [r7, #15]
 802abd2:	e00c      	b.n	802abee <Update_Publickey+0x2a>
		cert->publickey[index] = publickey[index];
 802abd4:	7bfb      	ldrb	r3, [r7, #15]
 802abd6:	683a      	ldr	r2, [r7, #0]
 802abd8:	441a      	add	r2, r3
 802abda:	7bfb      	ldrb	r3, [r7, #15]
 802abdc:	7811      	ldrb	r1, [r2, #0]
 802abde:	687a      	ldr	r2, [r7, #4]
 802abe0:	4413      	add	r3, r2
 802abe2:	460a      	mov	r2, r1
 802abe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	for(uint8_t index = 0;index < 32; index++){
 802abe8:	7bfb      	ldrb	r3, [r7, #15]
 802abea:	3301      	adds	r3, #1
 802abec:	73fb      	strb	r3, [r7, #15]
 802abee:	7bfb      	ldrb	r3, [r7, #15]
 802abf0:	2b1f      	cmp	r3, #31
 802abf2:	d9ef      	bls.n	802abd4 <Update_Publickey+0x10>
	}
}
 802abf4:	bf00      	nop
 802abf6:	bf00      	nop
 802abf8:	3714      	adds	r7, #20
 802abfa:	46bd      	mov	sp, r7
 802abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac00:	4770      	bx	lr

0802ac02 <Update_HashValue>:

void Update_HashValue(Certificate *cert, uint8_t* hashvalue){
 802ac02:	b480      	push	{r7}
 802ac04:	b085      	sub	sp, #20
 802ac06:	af00      	add	r7, sp, #0
 802ac08:	6078      	str	r0, [r7, #4]
 802ac0a:	6039      	str	r1, [r7, #0]
	for(uint8_t index = 0;index < 32; index++){
 802ac0c:	2300      	movs	r3, #0
 802ac0e:	73fb      	strb	r3, [r7, #15]
 802ac10:	e00c      	b.n	802ac2c <Update_HashValue+0x2a>
			cert->hash[index] = hashvalue[index];
 802ac12:	7bfb      	ldrb	r3, [r7, #15]
 802ac14:	683a      	ldr	r2, [r7, #0]
 802ac16:	441a      	add	r2, r3
 802ac18:	7bfb      	ldrb	r3, [r7, #15]
 802ac1a:	7811      	ldrb	r1, [r2, #0]
 802ac1c:	687a      	ldr	r2, [r7, #4]
 802ac1e:	4413      	add	r3, r2
 802ac20:	460a      	mov	r2, r1
 802ac22:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	for(uint8_t index = 0;index < 32; index++){
 802ac26:	7bfb      	ldrb	r3, [r7, #15]
 802ac28:	3301      	adds	r3, #1
 802ac2a:	73fb      	strb	r3, [r7, #15]
 802ac2c:	7bfb      	ldrb	r3, [r7, #15]
 802ac2e:	2b1f      	cmp	r3, #31
 802ac30:	d9ef      	bls.n	802ac12 <Update_HashValue+0x10>
	}
}
 802ac32:	bf00      	nop
 802ac34:	bf00      	nop
 802ac36:	3714      	adds	r7, #20
 802ac38:	46bd      	mov	sp, r7
 802ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac3e:	4770      	bx	lr

0802ac40 <Update_Application1Cert>:
	Update_Signature(&Bootloader_Cert, signature);
	Update_Publickey(&Bootloader_Cert, publickey);
	Update_HashValue(&Bootloader_Cert, hashvalue);
}

void Update_Application1Cert(uint8_t* signature, uint8_t* publickey, uint8_t* hashvalue){
 802ac40:	b580      	push	{r7, lr}
 802ac42:	b084      	sub	sp, #16
 802ac44:	af00      	add	r7, sp, #0
 802ac46:	60f8      	str	r0, [r7, #12]
 802ac48:	60b9      	str	r1, [r7, #8]
 802ac4a:	607a      	str	r2, [r7, #4]
	Update_Signature(&Application1_Cert, signature);
 802ac4c:	68f9      	ldr	r1, [r7, #12]
 802ac4e:	4807      	ldr	r0, [pc, #28]	; (802ac6c <Update_Application1Cert+0x2c>)
 802ac50:	f7ff ff9c 	bl	802ab8c <Update_Signature>
	Update_Publickey(&Application1_Cert, publickey);
 802ac54:	68b9      	ldr	r1, [r7, #8]
 802ac56:	4805      	ldr	r0, [pc, #20]	; (802ac6c <Update_Application1Cert+0x2c>)
 802ac58:	f7ff ffb4 	bl	802abc4 <Update_Publickey>
	Update_HashValue(&Application1_Cert, hashvalue);
 802ac5c:	6879      	ldr	r1, [r7, #4]
 802ac5e:	4803      	ldr	r0, [pc, #12]	; (802ac6c <Update_Application1Cert+0x2c>)
 802ac60:	f7ff ffcf 	bl	802ac02 <Update_HashValue>
}
 802ac64:	bf00      	nop
 802ac66:	3710      	adds	r7, #16
 802ac68:	46bd      	mov	sp, r7
 802ac6a:	bd80      	pop	{r7, pc}
 802ac6c:	200002ac 	.word	0x200002ac

0802ac70 <Update_Application2Cert>:

void Update_Application2Cert(uint8_t* signature, uint8_t* publickey, uint8_t* hashvalue){
 802ac70:	b580      	push	{r7, lr}
 802ac72:	b084      	sub	sp, #16
 802ac74:	af00      	add	r7, sp, #0
 802ac76:	60f8      	str	r0, [r7, #12]
 802ac78:	60b9      	str	r1, [r7, #8]
 802ac7a:	607a      	str	r2, [r7, #4]
	Update_Signature(&Application2_Cert, signature);
 802ac7c:	68f9      	ldr	r1, [r7, #12]
 802ac7e:	4807      	ldr	r0, [pc, #28]	; (802ac9c <Update_Application2Cert+0x2c>)
 802ac80:	f7ff ff84 	bl	802ab8c <Update_Signature>
	Update_Publickey(&Application2_Cert, publickey);
 802ac84:	68b9      	ldr	r1, [r7, #8]
 802ac86:	4805      	ldr	r0, [pc, #20]	; (802ac9c <Update_Application2Cert+0x2c>)
 802ac88:	f7ff ff9c 	bl	802abc4 <Update_Publickey>
	Update_HashValue(&Application2_Cert, hashvalue);
 802ac8c:	6879      	ldr	r1, [r7, #4]
 802ac8e:	4803      	ldr	r0, [pc, #12]	; (802ac9c <Update_Application2Cert+0x2c>)
 802ac90:	f7ff ffb7 	bl	802ac02 <Update_HashValue>
}
 802ac94:	bf00      	nop
 802ac96:	3710      	adds	r7, #16
 802ac98:	46bd      	mov	sp, r7
 802ac9a:	bd80      	pop	{r7, pc}
 802ac9c:	2000034c 	.word	0x2000034c

0802aca0 <goto_application>:



static void goto_application(uint32_t slotadd)
{
 802aca0:	b580      	push	{r7, lr}
 802aca2:	b084      	sub	sp, #16
 802aca4:	af00      	add	r7, sp, #0
 802aca6:	6078      	str	r0, [r7, #4]
//  printf("Gonna Jump to Application\r\n");

  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (slotadd + 4U)));
 802aca8:	687b      	ldr	r3, [r7, #4]
 802acaa:	3304      	adds	r3, #4
 802acac:	681b      	ldr	r3, [r3, #0]
 802acae:	60fb      	str	r3, [r7, #12]

//  __set_MSP(*(volatile uint32_t*) 0x08020000);

  // Turn OFF the Green Led to tell the user that Bootloader is not running
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
  app_reset_handler();    //call the app reset handler
 802acb0:	68fb      	ldr	r3, [r7, #12]
 802acb2:	4798      	blx	r3
}
 802acb4:	bf00      	nop
 802acb6:	3710      	adds	r7, #16
 802acb8:	46bd      	mov	sp, r7
 802acba:	bd80      	pop	{r7, pc}

0802acbc <HAL_UART_RxCpltCallback>:
uint8_t rx = 0;
uint8_t rx_header[15] = {0,};
uint8_t buftest[] = "NGUYEN VAN NHI";
uint32_t crc = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 802acbc:	b580      	push	{r7, lr}
 802acbe:	b082      	sub	sp, #8
 802acc0:	af00      	add	r7, sp, #0
 802acc2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart6.Instance){
 802acc4:	687b      	ldr	r3, [r7, #4]
 802acc6:	681a      	ldr	r2, [r3, #0]
 802acc8:	4b0e      	ldr	r3, [pc, #56]	; (802ad04 <HAL_UART_RxCpltCallback+0x48>)
 802acca:	681b      	ldr	r3, [r3, #0]
 802accc:	429a      	cmp	r2, r3
 802acce:	d115      	bne.n	802acfc <HAL_UART_RxCpltCallback+0x40>
			if(!strncmp("OTA",(char*)rx_buf, 3)){
 802acd0:	2203      	movs	r2, #3
 802acd2:	490d      	ldr	r1, [pc, #52]	; (802ad08 <HAL_UART_RxCpltCallback+0x4c>)
 802acd4:	480d      	ldr	r0, [pc, #52]	; (802ad0c <HAL_UART_RxCpltCallback+0x50>)
 802acd6:	f010 ff50 	bl	803bb7a <strncmp>
 802acda:	4603      	mov	r3, r0
 802acdc:	2b00      	cmp	r3, #0
 802acde:	d103      	bne.n	802ace8 <HAL_UART_RxCpltCallback+0x2c>
				flag = 1;
 802ace0:	4b0b      	ldr	r3, [pc, #44]	; (802ad10 <HAL_UART_RxCpltCallback+0x54>)
 802ace2:	2201      	movs	r2, #1
 802ace4:	701a      	strb	r2, [r3, #0]
 802ace6:	e004      	b.n	802acf2 <HAL_UART_RxCpltCallback+0x36>
			}
			else{
				HAL_UART_Receive_IT(&huart6, rx_buf, 3);
 802ace8:	2203      	movs	r2, #3
 802acea:	4907      	ldr	r1, [pc, #28]	; (802ad08 <HAL_UART_RxCpltCallback+0x4c>)
 802acec:	4805      	ldr	r0, [pc, #20]	; (802ad04 <HAL_UART_RxCpltCallback+0x48>)
 802acee:	f00b fcb4 	bl	803665a <HAL_UART_Receive_IT>
			}
			memset(rx_buf, 0, 3);
 802acf2:	2203      	movs	r2, #3
 802acf4:	2100      	movs	r1, #0
 802acf6:	4804      	ldr	r0, [pc, #16]	; (802ad08 <HAL_UART_RxCpltCallback+0x4c>)
 802acf8:	f00f ff9a 	bl	803ac30 <memset>
	}
}
 802acfc:	bf00      	nop
 802acfe:	3708      	adds	r7, #8
 802ad00:	46bd      	mov	sp, r7
 802ad02:	bd80      	pop	{r7, pc}
 802ad04:	20000620 	.word	0x20000620
 802ad08:	200003ec 	.word	0x200003ec
 802ad0c:	0803f058 	.word	0x0803f058
 802ad10:	200003ef 	.word	0x200003ef

0802ad14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802ad14:	b580      	push	{r7, lr}
 802ad16:	f5ad 6db2 	sub.w	sp, sp, #1424	; 0x590
 802ad1a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802ad1c:	f007 ff7e 	bl	8032c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802ad20:	f000 fc6a 	bl	802b5f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 802ad24:	f000 fdce 	bl	802b8c4 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 802ad28:	f000 fda2 	bl	802b870 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 802ad2c:	f000 fd24 	bl	802b778 <MX_TIM1_Init>
  MX_SDIO_SD_Init();
 802ad30:	f000 fccc 	bl	802b6cc <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 802ad34:	f00d f8ac 	bl	8037e90 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 802ad38:	f000 fd70 	bl	802b81c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 802ad3c:	f000 fce6 	bl	802b70c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, rx_buf, 3);
 802ad40:	2203      	movs	r2, #3
 802ad42:	495d      	ldr	r1, [pc, #372]	; (802aeb8 <main+0x1a4>)
 802ad44:	485d      	ldr	r0, [pc, #372]	; (802aebc <main+0x1a8>)
 802ad46:	f00b fc88 	bl	803665a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim1);
 802ad4a:	485d      	ldr	r0, [pc, #372]	; (802aec0 <main+0x1ac>)
 802ad4c:	f00b f81e 	bl	8035d8c <HAL_TIM_Base_Start>
  uint16_t time = 0;
 802ad50:	2300      	movs	r3, #0
 802ad52:	f8a7 357a 	strh.w	r3, [r7, #1402]	; 0x57a
  uint32_t total_time = 0;
 802ad56:	2300      	movs	r3, #0
 802ad58:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
//  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
//  HAL_Delay(500);
//  goto_application(FLASH_SLOT_1_ADD);
  FATFS fatfs;
  FIL myfile;
  uint8_t buffer[100] = {0,};
 802ad5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 802ad60:	2200      	movs	r2, #0
 802ad62:	601a      	str	r2, [r3, #0]
 802ad64:	3304      	adds	r3, #4
 802ad66:	2260      	movs	r2, #96	; 0x60
 802ad68:	2100      	movs	r1, #0
 802ad6a:	4618      	mov	r0, r3
 802ad6c:	f00f ff60 	bl	803ac30 <memset>
//	  else{
//		  goto_application(FLASH_SLOT_0_ADD);
//	  }

//
	  HAL_UART_Transmit(&huart2, "\r*****THIS IS BOOTLOADER PROGRAM*****\n\r", 39, 1000);
 802ad70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802ad74:	2227      	movs	r2, #39	; 0x27
 802ad76:	4953      	ldr	r1, [pc, #332]	; (802aec4 <main+0x1b0>)
 802ad78:	4853      	ldr	r0, [pc, #332]	; (802aec8 <main+0x1b4>)
 802ad7a:	f00b fb3a 	bl	80363f2 <HAL_UART_Transmit>
	  Frame_ReadCfg(&Flash_Cfg);
 802ad7e:	4853      	ldr	r0, [pc, #332]	; (802aecc <main+0x1b8>)
 802ad80:	f7f6 feba 	bl	8021af8 <Frame_ReadCfg>
	  if((defResetCause)Flash_Cfg.ResetCause == RESET_NORMAL){
 802ad84:	4b51      	ldr	r3, [pc, #324]	; (802aecc <main+0x1b8>)
 802ad86:	785b      	ldrb	r3, [r3, #1]
 802ad88:	2b00      	cmp	r3, #0
 802ad8a:	f040 80b7 	bne.w	802aefc <main+0x1e8>
		  if(Flash_Cfg.FlashOnGoing == FLASH_SLOT_1){
 802ad8e:	4b4f      	ldr	r3, [pc, #316]	; (802aecc <main+0x1b8>)
 802ad90:	781b      	ldrb	r3, [r3, #0]
 802ad92:	2b01      	cmp	r3, #1
 802ad94:	d144      	bne.n	802ae20 <main+0x10c>
			  W25qxx_Init();
 802ad96:	f7f7 fba7 	bl	80224e8 <W25qxx_Init>
			  W25qxx_ReadSector(sig, 2, 0, 64);
 802ad9a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 802ad9e:	2340      	movs	r3, #64	; 0x40
 802ada0:	2200      	movs	r2, #0
 802ada2:	2102      	movs	r1, #2
 802ada4:	f7f7 fe34 	bl	8022a10 <W25qxx_ReadSector>
			  W25qxx_ReadSector(pub, 2, 64, 32);
 802ada8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 802adac:	2320      	movs	r3, #32
 802adae:	2240      	movs	r2, #64	; 0x40
 802adb0:	2102      	movs	r1, #2
 802adb2:	f7f7 fe2d 	bl	8022a10 <W25qxx_ReadSector>
			  W25qxx_ReadSector(hashval, 2, 64 + 32, 64);
 802adb6:	1d38      	adds	r0, r7, #4
 802adb8:	2340      	movs	r3, #64	; 0x40
 802adba:	2260      	movs	r2, #96	; 0x60
 802adbc:	2102      	movs	r1, #2
 802adbe:	f7f7 fe27 	bl	8022a10 <W25qxx_ReadSector>
			  int size_file = read_file_and_store_into_flash(&fatfs,&myfile,"appa.bin", FA_READ, FLASH_SLOT_1, signature, publickey, hashvalue);
 802adc2:	f507 7184 	add.w	r1, r7, #264	; 0x108
 802adc6:	f507 704e 	add.w	r0, r7, #824	; 0x338
 802adca:	4b41      	ldr	r3, [pc, #260]	; (802aed0 <main+0x1bc>)
 802adcc:	9303      	str	r3, [sp, #12]
 802adce:	4b41      	ldr	r3, [pc, #260]	; (802aed4 <main+0x1c0>)
 802add0:	9302      	str	r3, [sp, #8]
 802add2:	4b41      	ldr	r3, [pc, #260]	; (802aed8 <main+0x1c4>)
 802add4:	9301      	str	r3, [sp, #4]
 802add6:	2301      	movs	r3, #1
 802add8:	9300      	str	r3, [sp, #0]
 802adda:	2301      	movs	r3, #1
 802addc:	4a3f      	ldr	r2, [pc, #252]	; (802aedc <main+0x1c8>)
 802adde:	f7f6 ffb5 	bl	8021d4c <read_file_and_store_into_flash>
 802ade2:	4603      	mov	r3, r0
 802ade4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			  tree_hash_on_flash(FLASH_SLOT_1, md,size_file, &round);
 802ade8:	f8d7 256c 	ldr.w	r2, [r7, #1388]	; 0x56c
 802adec:	4b3c      	ldr	r3, [pc, #240]	; (802aee0 <main+0x1cc>)
 802adee:	493d      	ldr	r1, [pc, #244]	; (802aee4 <main+0x1d0>)
 802adf0:	2001      	movs	r0, #1
 802adf2:	f7f7 f92f 	bl	8022054 <tree_hash_on_flash>
			  if (ed25519_verify(sig, md, 64, pub)) {
 802adf6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802adfa:	f107 0064 	add.w	r0, r7, #100	; 0x64
 802adfe:	2240      	movs	r2, #64	; 0x40
 802ae00:	4938      	ldr	r1, [pc, #224]	; (802aee4 <main+0x1d0>)
 802ae02:	f007 fe63 	bl	8032acc <ed25519_verify>
 802ae06:	4603      	mov	r3, r0
 802ae08:	2b00      	cmp	r3, #0
 802ae0a:	d009      	beq.n	802ae20 <main+0x10c>
				  HAL_UART_Transmit(&huart2, "\r*****APPLICATION1 IS RUNNING*****\n\r", 39, 1000);
 802ae0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802ae10:	2227      	movs	r2, #39	; 0x27
 802ae12:	4935      	ldr	r1, [pc, #212]	; (802aee8 <main+0x1d4>)
 802ae14:	482c      	ldr	r0, [pc, #176]	; (802aec8 <main+0x1b4>)
 802ae16:	f00b faec 	bl	80363f2 <HAL_UART_Transmit>
				  goto_application(FLASH_SLOT_1_ADD);
 802ae1a:	4834      	ldr	r0, [pc, #208]	; (802aeec <main+0x1d8>)
 802ae1c:	f7ff ff40 	bl	802aca0 <goto_application>
			  }
		  }

		  if(Flash_Cfg.FlashOnGoing == FLASH_SLOT_2){
 802ae20:	4b2a      	ldr	r3, [pc, #168]	; (802aecc <main+0x1b8>)
 802ae22:	781b      	ldrb	r3, [r3, #0]
 802ae24:	2b02      	cmp	r3, #2
 802ae26:	d1a3      	bne.n	802ad70 <main+0x5c>
			  W25qxx_Init();
 802ae28:	f7f7 fb5e 	bl	80224e8 <W25qxx_Init>
			  W25qxx_ReadSector(sig, 3, 0, 64);
 802ae2c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 802ae30:	2340      	movs	r3, #64	; 0x40
 802ae32:	2200      	movs	r2, #0
 802ae34:	2103      	movs	r1, #3
 802ae36:	f7f7 fdeb 	bl	8022a10 <W25qxx_ReadSector>
			  W25qxx_ReadSector(pub, 3, 64, 32);
 802ae3a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 802ae3e:	2320      	movs	r3, #32
 802ae40:	2240      	movs	r2, #64	; 0x40
 802ae42:	2103      	movs	r1, #3
 802ae44:	f7f7 fde4 	bl	8022a10 <W25qxx_ReadSector>
			  W25qxx_ReadSector(hashval, 3, 64 + 32, 64);
 802ae48:	1d38      	adds	r0, r7, #4
 802ae4a:	2340      	movs	r3, #64	; 0x40
 802ae4c:	2260      	movs	r2, #96	; 0x60
 802ae4e:	2103      	movs	r1, #3
 802ae50:	f7f7 fdde 	bl	8022a10 <W25qxx_ReadSector>
			  int size_file = read_file_and_store_into_flash(&fatfs,&myfile,"appb.bin", FA_READ, FLASH_SLOT_2, signature, publickey, hashvalue);
 802ae54:	f507 7184 	add.w	r1, r7, #264	; 0x108
 802ae58:	f507 704e 	add.w	r0, r7, #824	; 0x338
 802ae5c:	4b1c      	ldr	r3, [pc, #112]	; (802aed0 <main+0x1bc>)
 802ae5e:	9303      	str	r3, [sp, #12]
 802ae60:	4b1c      	ldr	r3, [pc, #112]	; (802aed4 <main+0x1c0>)
 802ae62:	9302      	str	r3, [sp, #8]
 802ae64:	4b1c      	ldr	r3, [pc, #112]	; (802aed8 <main+0x1c4>)
 802ae66:	9301      	str	r3, [sp, #4]
 802ae68:	2302      	movs	r3, #2
 802ae6a:	9300      	str	r3, [sp, #0]
 802ae6c:	2301      	movs	r3, #1
 802ae6e:	4a20      	ldr	r2, [pc, #128]	; (802aef0 <main+0x1dc>)
 802ae70:	f7f6 ff6c 	bl	8021d4c <read_file_and_store_into_flash>
 802ae74:	4603      	mov	r3, r0
 802ae76:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			  tree_hash_on_flash(FLASH_SLOT_2, md,size_file, &round);
 802ae7a:	f8d7 2568 	ldr.w	r2, [r7, #1384]	; 0x568
 802ae7e:	4b18      	ldr	r3, [pc, #96]	; (802aee0 <main+0x1cc>)
 802ae80:	4918      	ldr	r1, [pc, #96]	; (802aee4 <main+0x1d0>)
 802ae82:	2002      	movs	r0, #2
 802ae84:	f7f7 f8e6 	bl	8022054 <tree_hash_on_flash>
			  if (ed25519_verify(sig, md, 64, pub)) {
 802ae88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 802ae8c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 802ae90:	2240      	movs	r2, #64	; 0x40
 802ae92:	4914      	ldr	r1, [pc, #80]	; (802aee4 <main+0x1d0>)
 802ae94:	f007 fe1a 	bl	8032acc <ed25519_verify>
 802ae98:	4603      	mov	r3, r0
 802ae9a:	2b00      	cmp	r3, #0
 802ae9c:	f43f af68 	beq.w	802ad70 <main+0x5c>
				  HAL_UART_Transmit(&huart2, "\r*****APPLICATION2 IS RUNNING*****\n\r", 39, 1000);
 802aea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802aea4:	2227      	movs	r2, #39	; 0x27
 802aea6:	4913      	ldr	r1, [pc, #76]	; (802aef4 <main+0x1e0>)
 802aea8:	4807      	ldr	r0, [pc, #28]	; (802aec8 <main+0x1b4>)
 802aeaa:	f00b faa2 	bl	80363f2 <HAL_UART_Transmit>
				  goto_application(FLASH_SLOT_2_ADD);
 802aeae:	4812      	ldr	r0, [pc, #72]	; (802aef8 <main+0x1e4>)
 802aeb0:	f7ff fef6 	bl	802aca0 <goto_application>
 802aeb4:	e75c      	b.n	802ad70 <main+0x5c>
 802aeb6:	bf00      	nop
 802aeb8:	200003ec 	.word	0x200003ec
 802aebc:	20000620 	.word	0x20000620
 802aec0:	20000554 	.word	0x20000554
 802aec4:	0803f05c 	.word	0x0803f05c
 802aec8:	200006a4 	.word	0x200006a4
 802aecc:	200002a8 	.word	0x200002a8
 802aed0:	20000664 	.word	0x20000664
 802aed4:	20000534 	.word	0x20000534
 802aed8:	200004f4 	.word	0x200004f4
 802aedc:	0803f084 	.word	0x0803f084
 802aee0:	20000430 	.word	0x20000430
 802aee4:	200003f0 	.word	0x200003f0
 802aee8:	0803f090 	.word	0x0803f090
 802aeec:	08060000 	.word	0x08060000
 802aef0:	0803f0b8 	.word	0x0803f0b8
 802aef4:	0803f0c4 	.word	0x0803f0c4
 802aef8:	080a0000 	.word	0x080a0000
			  }
		  }

	  }
	  else if((defResetCause)Flash_Cfg.ResetCause == RESET_OTA){
 802aefc:	4bc8      	ldr	r3, [pc, #800]	; (802b220 <main+0x50c>)
 802aefe:	785b      	ldrb	r3, [r3, #1]
 802af00:	2b01      	cmp	r3, #1
 802af02:	f040 8340 	bne.w	802b586 <main+0x872>
		  while(flag == 0);
 802af06:	bf00      	nop
 802af08:	4bc6      	ldr	r3, [pc, #792]	; (802b224 <main+0x510>)
 802af0a:	781b      	ldrb	r3, [r3, #0]
 802af0c:	2b00      	cmp	r3, #0
 802af0e:	d0fb      	beq.n	802af08 <main+0x1f4>
		  if(flag == 1){
 802af10:	4bc4      	ldr	r3, [pc, #784]	; (802b224 <main+0x510>)
 802af12:	781b      	ldrb	r3, [r3, #0]
 802af14:	2b01      	cmp	r3, #1
 802af16:	f47f af2b 	bne.w	802ad70 <main+0x5c>
			  {
				  HAL_UART_Transmit(&huart2, "\r       UPDATING OTA...\n\r", 25, 1000);
 802af1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802af1e:	2219      	movs	r2, #25
 802af20:	49c1      	ldr	r1, [pc, #772]	; (802b228 <main+0x514>)
 802af22:	48c2      	ldr	r0, [pc, #776]	; (802b22c <main+0x518>)
 802af24:	f00b fa65 	bl	80363f2 <HAL_UART_Transmit>
				  Flash_Cfg.ResetCause = RESET_NORMAL;
 802af28:	4bbd      	ldr	r3, [pc, #756]	; (802b220 <main+0x50c>)
 802af2a:	2200      	movs	r2, #0
 802af2c:	705a      	strb	r2, [r3, #1]
				  if(Flash_Cfg.FlashOnGoing == FLASH_SLOT_1){
 802af2e:	4bbc      	ldr	r3, [pc, #752]	; (802b220 <main+0x50c>)
 802af30:	781b      	ldrb	r3, [r3, #0]
 802af32:	2b01      	cmp	r3, #1
 802af34:	f040 81aa 	bne.w	802b28c <main+0x578>
					  TIM1->CNT = 0;
 802af38:	4bbd      	ldr	r3, [pc, #756]	; (802b230 <main+0x51c>)
 802af3a:	2200      	movs	r2, #0
 802af3c:	625a      	str	r2, [r3, #36]	; 0x24
					  if(ota_and_write_to_sd_card(&fatfs, &myfile, "appb.bin", FA_WRITE|FA_CREATE_ALWAYS) == HAL_OK) {
 802af3e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 802af42:	f507 704e 	add.w	r0, r7, #824	; 0x338
 802af46:	230a      	movs	r3, #10
 802af48:	4aba      	ldr	r2, [pc, #744]	; (802b234 <main+0x520>)
 802af4a:	f7f6 fdf9 	bl	8021b40 <ota_and_write_to_sd_card>
 802af4e:	4603      	mov	r3, r0
 802af50:	2b00      	cmp	r3, #0
 802af52:	f040 815e 	bne.w	802b212 <main+0x4fe>
						  time = TIM1->CNT;
 802af56:	4bb6      	ldr	r3, [pc, #728]	; (802b230 <main+0x51c>)
 802af58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802af5a:	f8a7 357a 	strh.w	r3, [r7, #1402]	; 0x57a
						  total_time += time;
 802af5e:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802af62:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 802af66:	4413      	add	r3, r2
 802af68:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
						  HAL_UART_Transmit(&huart2, "\r       OTA SUCCESSFULL !!!\n\r", 29, 1000);
 802af6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802af70:	221d      	movs	r2, #29
 802af72:	49b1      	ldr	r1, [pc, #708]	; (802b238 <main+0x524>)
 802af74:	48ad      	ldr	r0, [pc, #692]	; (802b22c <main+0x518>)
 802af76:	f00b fa3c 	bl	80363f2 <HAL_UART_Transmit>
						  sprintf(buffer,"\r            -TIME: %.2f\n\r", (float)time/5.0);
 802af7a:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802af7e:	ee07 3a90 	vmov	s15, r3
 802af82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802af86:	ee17 0a90 	vmov	r0, s15
 802af8a:	f7f5 fadd 	bl	8020548 <__aeabi_f2d>
 802af8e:	f04f 0200 	mov.w	r2, #0
 802af92:	4baa      	ldr	r3, [pc, #680]	; (802b23c <main+0x528>)
 802af94:	f7f5 fc5a 	bl	802084c <__aeabi_ddiv>
 802af98:	4602      	mov	r2, r0
 802af9a:	460b      	mov	r3, r1
 802af9c:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 802afa0:	49a7      	ldr	r1, [pc, #668]	; (802b240 <main+0x52c>)
 802afa2:	f010 fd87 	bl	803bab4 <siprintf>
						  HAL_UART_Transmit(&huart2, buffer, 25, 1000);
 802afa6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802afaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802afae:	2219      	movs	r2, #25
 802afb0:	489e      	ldr	r0, [pc, #632]	; (802b22c <main+0x518>)
 802afb2:	f00b fa1e 	bl	80363f2 <HAL_UART_Transmit>
						  memset(buffer, 0, 100);
 802afb6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 802afba:	2264      	movs	r2, #100	; 0x64
 802afbc:	2100      	movs	r1, #0
 802afbe:	4618      	mov	r0, r3
 802afc0:	f00f fe36 	bl	803ac30 <memset>

						  TIM1->CNT = 0;
 802afc4:	4b9a      	ldr	r3, [pc, #616]	; (802b230 <main+0x51c>)
 802afc6:	2200      	movs	r2, #0
 802afc8:	625a      	str	r2, [r3, #36]	; 0x24
						  int size_file = read_file_and_store_into_flash(&fatfs,&myfile,"appb.bin", FA_READ, FLASH_SLOT_2, signature, publickey, hashvalue);
 802afca:	f507 7184 	add.w	r1, r7, #264	; 0x108
 802afce:	f507 704e 	add.w	r0, r7, #824	; 0x338
 802afd2:	4b9c      	ldr	r3, [pc, #624]	; (802b244 <main+0x530>)
 802afd4:	9303      	str	r3, [sp, #12]
 802afd6:	4b9c      	ldr	r3, [pc, #624]	; (802b248 <main+0x534>)
 802afd8:	9302      	str	r3, [sp, #8]
 802afda:	4b9c      	ldr	r3, [pc, #624]	; (802b24c <main+0x538>)
 802afdc:	9301      	str	r3, [sp, #4]
 802afde:	2302      	movs	r3, #2
 802afe0:	9300      	str	r3, [sp, #0]
 802afe2:	2301      	movs	r3, #1
 802afe4:	4a93      	ldr	r2, [pc, #588]	; (802b234 <main+0x520>)
 802afe6:	f7f6 feb1 	bl	8021d4c <read_file_and_store_into_flash>
 802afea:	4603      	mov	r3, r0
 802afec:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
						  time = TIM1->CNT;
 802aff0:	4b8f      	ldr	r3, [pc, #572]	; (802b230 <main+0x51c>)
 802aff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802aff4:	f8a7 357a 	strh.w	r3, [r7, #1402]	; 0x57a
						  total_time += time;
 802aff8:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802affc:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 802b000:	4413      	add	r3, r2
 802b002:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
						  HAL_UART_Transmit(&huart2, "\r       -READ APPLICATION2 AND STORE IN FLASH\n\r", 50, 1000);
 802b006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b00a:	2232      	movs	r2, #50	; 0x32
 802b00c:	4990      	ldr	r1, [pc, #576]	; (802b250 <main+0x53c>)
 802b00e:	4887      	ldr	r0, [pc, #540]	; (802b22c <main+0x518>)
 802b010:	f00b f9ef 	bl	80363f2 <HAL_UART_Transmit>
						  sprintf(buffer, "\r              +SIZE: %d BYTES\n\r              +TIME: %.2f(MS)\n\r", size_file, (float)time/5.0);
 802b014:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802b018:	ee07 3a90 	vmov	s15, r3
 802b01c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802b020:	ee17 0a90 	vmov	r0, s15
 802b024:	f7f5 fa90 	bl	8020548 <__aeabi_f2d>
 802b028:	f04f 0200 	mov.w	r2, #0
 802b02c:	4b83      	ldr	r3, [pc, #524]	; (802b23c <main+0x528>)
 802b02e:	f7f5 fc0d 	bl	802084c <__aeabi_ddiv>
 802b032:	4602      	mov	r2, r0
 802b034:	460b      	mov	r3, r1
 802b036:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 802b03a:	e9cd 2300 	strd	r2, r3, [sp]
 802b03e:	f8d7 2570 	ldr.w	r2, [r7, #1392]	; 0x570
 802b042:	4984      	ldr	r1, [pc, #528]	; (802b254 <main+0x540>)
 802b044:	f010 fd36 	bl	803bab4 <siprintf>
						  HAL_UART_Transmit(&huart2, buffer, 100, 1000);
 802b048:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802b04c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b050:	2264      	movs	r2, #100	; 0x64
 802b052:	4876      	ldr	r0, [pc, #472]	; (802b22c <main+0x518>)
 802b054:	f00b f9cd 	bl	80363f2 <HAL_UART_Transmit>
						  memset(buffer, 0, 100);
 802b058:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 802b05c:	2264      	movs	r2, #100	; 0x64
 802b05e:	2100      	movs	r1, #0
 802b060:	4618      	mov	r0, r3
 802b062:	f00f fde5 	bl	803ac30 <memset>

						  TIM1->CNT = 0;
 802b066:	4b72      	ldr	r3, [pc, #456]	; (802b230 <main+0x51c>)
 802b068:	2200      	movs	r2, #0
 802b06a:	625a      	str	r2, [r3, #36]	; 0x24
						  tree_hash_on_flash(FLASH_SLOT_2, md,size_file, &round);
 802b06c:	f8d7 2570 	ldr.w	r2, [r7, #1392]	; 0x570
 802b070:	4b79      	ldr	r3, [pc, #484]	; (802b258 <main+0x544>)
 802b072:	497a      	ldr	r1, [pc, #488]	; (802b25c <main+0x548>)
 802b074:	2002      	movs	r0, #2
 802b076:	f7f6 ffed 	bl	8022054 <tree_hash_on_flash>
						  time = TIM1->CNT;
 802b07a:	4b6d      	ldr	r3, [pc, #436]	; (802b230 <main+0x51c>)
 802b07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b07e:	f8a7 357a 	strh.w	r3, [r7, #1402]	; 0x57a
						  total_time += time;
 802b082:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802b086:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 802b08a:	4413      	add	r3, r2
 802b08c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
						  HAL_UART_Transmit(&huart2, "\r       -TREE HASH IN FLASH\n\r", 28, 1000);
 802b090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b094:	221c      	movs	r2, #28
 802b096:	4972      	ldr	r1, [pc, #456]	; (802b260 <main+0x54c>)
 802b098:	4864      	ldr	r0, [pc, #400]	; (802b22c <main+0x518>)
 802b09a:	f00b f9aa 	bl	80363f2 <HAL_UART_Transmit>
						  sprintf(buffer, "\r              +TIME: %.2f(MS)\n\r", (float)time/5.0);
 802b09e:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802b0a2:	ee07 3a90 	vmov	s15, r3
 802b0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802b0aa:	ee17 0a90 	vmov	r0, s15
 802b0ae:	f7f5 fa4b 	bl	8020548 <__aeabi_f2d>
 802b0b2:	f04f 0200 	mov.w	r2, #0
 802b0b6:	4b61      	ldr	r3, [pc, #388]	; (802b23c <main+0x528>)
 802b0b8:	f7f5 fbc8 	bl	802084c <__aeabi_ddiv>
 802b0bc:	4602      	mov	r2, r0
 802b0be:	460b      	mov	r3, r1
 802b0c0:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 802b0c4:	4967      	ldr	r1, [pc, #412]	; (802b264 <main+0x550>)
 802b0c6:	f010 fcf5 	bl	803bab4 <siprintf>
						  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 802b0ca:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802b0ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b0d2:	2228      	movs	r2, #40	; 0x28
 802b0d4:	4855      	ldr	r0, [pc, #340]	; (802b22c <main+0x518>)
 802b0d6:	f00b f98c 	bl	80363f2 <HAL_UART_Transmit>
						  memset(buffer, 0, 100);
 802b0da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 802b0de:	2264      	movs	r2, #100	; 0x64
 802b0e0:	2100      	movs	r1, #0
 802b0e2:	4618      	mov	r0, r3
 802b0e4:	f00f fda4 	bl	803ac30 <memset>

						  TIM1->CNT = 0;
 802b0e8:	4b51      	ldr	r3, [pc, #324]	; (802b230 <main+0x51c>)
 802b0ea:	2200      	movs	r2, #0
 802b0ec:	625a      	str	r2, [r3, #36]	; 0x24
						  if (ed25519_verify(signature, md, 64, publickey)) {
 802b0ee:	4b56      	ldr	r3, [pc, #344]	; (802b248 <main+0x534>)
 802b0f0:	2240      	movs	r2, #64	; 0x40
 802b0f2:	495a      	ldr	r1, [pc, #360]	; (802b25c <main+0x548>)
 802b0f4:	4855      	ldr	r0, [pc, #340]	; (802b24c <main+0x538>)
 802b0f6:	f007 fce9 	bl	8032acc <ed25519_verify>
 802b0fa:	4603      	mov	r3, r0
 802b0fc:	2b00      	cmp	r3, #0
 802b0fe:	f000 8081 	beq.w	802b204 <main+0x4f0>

							  W25qxx_Init();
 802b102:	f7f7 f9f1 	bl	80224e8 <W25qxx_Init>
							  W25qxx_EraseSector(3);
 802b106:	2003      	movs	r0, #3
 802b108:	f7f7 fab6 	bl	8022678 <W25qxx_EraseSector>
							  Update_Application2Cert(signature, publickey, hashvalue);
 802b10c:	4a4d      	ldr	r2, [pc, #308]	; (802b244 <main+0x530>)
 802b10e:	494e      	ldr	r1, [pc, #312]	; (802b248 <main+0x534>)
 802b110:	484e      	ldr	r0, [pc, #312]	; (802b24c <main+0x538>)
 802b112:	f7ff fdad 	bl	802ac70 <Update_Application2Cert>
							  W25qxx_WriteSector(Application2_Cert.signature, 3, 0, 64);
 802b116:	2340      	movs	r3, #64	; 0x40
 802b118:	2200      	movs	r2, #0
 802b11a:	2103      	movs	r1, #3
 802b11c:	4852      	ldr	r0, [pc, #328]	; (802b268 <main+0x554>)
 802b11e:	f7f7 fb99 	bl	8022854 <W25qxx_WriteSector>
							  W25qxx_WriteSector(Application2_Cert.publickey, 3, 0 + 64, 32);
 802b122:	2320      	movs	r3, #32
 802b124:	2240      	movs	r2, #64	; 0x40
 802b126:	2103      	movs	r1, #3
 802b128:	4850      	ldr	r0, [pc, #320]	; (802b26c <main+0x558>)
 802b12a:	f7f7 fb93 	bl	8022854 <W25qxx_WriteSector>
							  W25qxx_WriteSector(Application2_Cert.hash, 3, 0 + 32 + 64, 64);
 802b12e:	2340      	movs	r3, #64	; 0x40
 802b130:	2260      	movs	r2, #96	; 0x60
 802b132:	2103      	movs	r1, #3
 802b134:	484e      	ldr	r0, [pc, #312]	; (802b270 <main+0x55c>)
 802b136:	f7f7 fb8d 	bl	8022854 <W25qxx_WriteSector>


							  time = TIM1->CNT;
 802b13a:	4b3d      	ldr	r3, [pc, #244]	; (802b230 <main+0x51c>)
 802b13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b13e:	f8a7 357a 	strh.w	r3, [r7, #1402]	; 0x57a
							  total_time += time;
 802b142:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802b146:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 802b14a:	4413      	add	r3, r2
 802b14c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
							  HAL_UART_Transmit(&huart2, "\r       -VERIFY APPLICATION2 SUCCESSFULL\n\r", 60, 1000);
 802b150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b154:	223c      	movs	r2, #60	; 0x3c
 802b156:	4947      	ldr	r1, [pc, #284]	; (802b274 <main+0x560>)
 802b158:	4834      	ldr	r0, [pc, #208]	; (802b22c <main+0x518>)
 802b15a:	f00b f94a 	bl	80363f2 <HAL_UART_Transmit>
							  sprintf(buffer, "\r              +TIME: %.2f(MS)\n\r", (float)time/5.0);
 802b15e:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802b162:	ee07 3a90 	vmov	s15, r3
 802b166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802b16a:	ee17 0a90 	vmov	r0, s15
 802b16e:	f7f5 f9eb 	bl	8020548 <__aeabi_f2d>
 802b172:	f04f 0200 	mov.w	r2, #0
 802b176:	4b31      	ldr	r3, [pc, #196]	; (802b23c <main+0x528>)
 802b178:	f7f5 fb68 	bl	802084c <__aeabi_ddiv>
 802b17c:	4602      	mov	r2, r0
 802b17e:	460b      	mov	r3, r1
 802b180:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 802b184:	4937      	ldr	r1, [pc, #220]	; (802b264 <main+0x550>)
 802b186:	f010 fc95 	bl	803bab4 <siprintf>
							  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 802b18a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802b18e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b192:	2228      	movs	r2, #40	; 0x28
 802b194:	4825      	ldr	r0, [pc, #148]	; (802b22c <main+0x518>)
 802b196:	f00b f92c 	bl	80363f2 <HAL_UART_Transmit>
							  sprintf(buffer, "\r       -TOTAL TIME: %.2f(MS)\n\r", (float)total_time/5.0);
 802b19a:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 802b19e:	ee07 3a90 	vmov	s15, r3
 802b1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802b1a6:	ee17 0a90 	vmov	r0, s15
 802b1aa:	f7f5 f9cd 	bl	8020548 <__aeabi_f2d>
 802b1ae:	f04f 0200 	mov.w	r2, #0
 802b1b2:	4b22      	ldr	r3, [pc, #136]	; (802b23c <main+0x528>)
 802b1b4:	f7f5 fb4a 	bl	802084c <__aeabi_ddiv>
 802b1b8:	4602      	mov	r2, r0
 802b1ba:	460b      	mov	r3, r1
 802b1bc:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 802b1c0:	492d      	ldr	r1, [pc, #180]	; (802b278 <main+0x564>)
 802b1c2:	f010 fc77 	bl	803bab4 <siprintf>
							  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 802b1c6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802b1ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b1ce:	2228      	movs	r2, #40	; 0x28
 802b1d0:	4816      	ldr	r0, [pc, #88]	; (802b22c <main+0x518>)
 802b1d2:	f00b f90e 	bl	80363f2 <HAL_UART_Transmit>

							  HAL_UART_Transmit(&huart2, "\r*****APPLICATION2 IS RUNNING*****\n\r", 50, 1000);
 802b1d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b1da:	2232      	movs	r2, #50	; 0x32
 802b1dc:	4927      	ldr	r1, [pc, #156]	; (802b27c <main+0x568>)
 802b1de:	4813      	ldr	r0, [pc, #76]	; (802b22c <main+0x518>)
 802b1e0:	f00b f907 	bl	80363f2 <HAL_UART_Transmit>

							  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 802b1e4:	2201      	movs	r2, #1
 802b1e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802b1ea:	4825      	ldr	r0, [pc, #148]	; (802b280 <main+0x56c>)
 802b1ec:	f008 fbc4 	bl	8033978 <HAL_GPIO_WritePin>
							  Flash_Cfg.FlashOnGoing = FLASH_SLOT_2;
 802b1f0:	4b0b      	ldr	r3, [pc, #44]	; (802b220 <main+0x50c>)
 802b1f2:	2202      	movs	r2, #2
 802b1f4:	701a      	strb	r2, [r3, #0]
							  Frame_WriteCfg(&Flash_Cfg);
 802b1f6:	480a      	ldr	r0, [pc, #40]	; (802b220 <main+0x50c>)
 802b1f8:	f7f6 fc2e 	bl	8021a58 <Frame_WriteCfg>
							  goto_application(FLASH_SLOT_2_ADD);
 802b1fc:	4821      	ldr	r0, [pc, #132]	; (802b284 <main+0x570>)
 802b1fe:	f7ff fd4f 	bl	802aca0 <goto_application>
 802b202:	e1bb      	b.n	802b57c <main+0x868>
						  } else {
							  Frame_WriteCfg(&Flash_Cfg);
 802b204:	4806      	ldr	r0, [pc, #24]	; (802b220 <main+0x50c>)
 802b206:	f7f6 fc27 	bl	8021a58 <Frame_WriteCfg>
							  goto_application(FLASH_SLOT_1_ADD);
 802b20a:	481f      	ldr	r0, [pc, #124]	; (802b288 <main+0x574>)
 802b20c:	f7ff fd48 	bl	802aca0 <goto_application>
 802b210:	e1b4      	b.n	802b57c <main+0x868>
						  }

					  }
					  else{
						  Frame_WriteCfg(&Flash_Cfg);
 802b212:	4803      	ldr	r0, [pc, #12]	; (802b220 <main+0x50c>)
 802b214:	f7f6 fc20 	bl	8021a58 <Frame_WriteCfg>
						  goto_application(FLASH_SLOT_1_ADD);
 802b218:	481b      	ldr	r0, [pc, #108]	; (802b288 <main+0x574>)
 802b21a:	f7ff fd41 	bl	802aca0 <goto_application>
 802b21e:	e1ad      	b.n	802b57c <main+0x868>
 802b220:	200002a8 	.word	0x200002a8
 802b224:	200003ef 	.word	0x200003ef
 802b228:	0803f0ec 	.word	0x0803f0ec
 802b22c:	200006a4 	.word	0x200006a4
 802b230:	40010000 	.word	0x40010000
 802b234:	0803f0b8 	.word	0x0803f0b8
 802b238:	0803f108 	.word	0x0803f108
 802b23c:	40140000 	.word	0x40140000
 802b240:	0803f128 	.word	0x0803f128
 802b244:	20000664 	.word	0x20000664
 802b248:	20000534 	.word	0x20000534
 802b24c:	200004f4 	.word	0x200004f4
 802b250:	0803f144 	.word	0x0803f144
 802b254:	0803f174 	.word	0x0803f174
 802b258:	20000430 	.word	0x20000430
 802b25c:	200003f0 	.word	0x200003f0
 802b260:	0803f1b4 	.word	0x0803f1b4
 802b264:	0803f1d4 	.word	0x0803f1d4
 802b268:	2000034c 	.word	0x2000034c
 802b26c:	2000038c 	.word	0x2000038c
 802b270:	200003ac 	.word	0x200003ac
 802b274:	0803f1f8 	.word	0x0803f1f8
 802b278:	0803f224 	.word	0x0803f224
 802b27c:	0803f0c4 	.word	0x0803f0c4
 802b280:	40020c00 	.word	0x40020c00
 802b284:	080a0000 	.word	0x080a0000
 802b288:	08060000 	.word	0x08060000
					  }
				  }
				  else if(Flash_Cfg.FlashOnGoing == FLASH_SLOT_2){
 802b28c:	4bc0      	ldr	r3, [pc, #768]	; (802b590 <main+0x87c>)
 802b28e:	781b      	ldrb	r3, [r3, #0]
 802b290:	2b02      	cmp	r3, #2
 802b292:	f040 8173 	bne.w	802b57c <main+0x868>
					  TIM1->CNT = 0;
 802b296:	4bbf      	ldr	r3, [pc, #764]	; (802b594 <main+0x880>)
 802b298:	2200      	movs	r2, #0
 802b29a:	625a      	str	r2, [r3, #36]	; 0x24
					  if(ota_and_write_to_sd_card(&fatfs, &myfile, "appa.bin", FA_WRITE|FA_CREATE_ALWAYS) == HAL_OK) {
 802b29c:	f507 7184 	add.w	r1, r7, #264	; 0x108
 802b2a0:	f507 704e 	add.w	r0, r7, #824	; 0x338
 802b2a4:	230a      	movs	r3, #10
 802b2a6:	4abc      	ldr	r2, [pc, #752]	; (802b598 <main+0x884>)
 802b2a8:	f7f6 fc4a 	bl	8021b40 <ota_and_write_to_sd_card>
 802b2ac:	4603      	mov	r3, r0
 802b2ae:	2b00      	cmp	r3, #0
 802b2b0:	f040 815e 	bne.w	802b570 <main+0x85c>
						  time = TIM1->CNT;
 802b2b4:	4bb7      	ldr	r3, [pc, #732]	; (802b594 <main+0x880>)
 802b2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b2b8:	f8a7 357a 	strh.w	r3, [r7, #1402]	; 0x57a
						  total_time += time;
 802b2bc:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802b2c0:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 802b2c4:	4413      	add	r3, r2
 802b2c6:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
						  HAL_UART_Transmit(&huart2, "\r       OTA SUCCESSFULL !!!\n\r", 29, 1000);
 802b2ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b2ce:	221d      	movs	r2, #29
 802b2d0:	49b2      	ldr	r1, [pc, #712]	; (802b59c <main+0x888>)
 802b2d2:	48b3      	ldr	r0, [pc, #716]	; (802b5a0 <main+0x88c>)
 802b2d4:	f00b f88d 	bl	80363f2 <HAL_UART_Transmit>
						  sprintf(buffer,"\r            -TIME: %.2f\n\r", (float)time/5.0);
 802b2d8:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802b2dc:	ee07 3a90 	vmov	s15, r3
 802b2e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802b2e4:	ee17 0a90 	vmov	r0, s15
 802b2e8:	f7f5 f92e 	bl	8020548 <__aeabi_f2d>
 802b2ec:	f04f 0200 	mov.w	r2, #0
 802b2f0:	4bac      	ldr	r3, [pc, #688]	; (802b5a4 <main+0x890>)
 802b2f2:	f7f5 faab 	bl	802084c <__aeabi_ddiv>
 802b2f6:	4602      	mov	r2, r0
 802b2f8:	460b      	mov	r3, r1
 802b2fa:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 802b2fe:	49aa      	ldr	r1, [pc, #680]	; (802b5a8 <main+0x894>)
 802b300:	f010 fbd8 	bl	803bab4 <siprintf>
						  HAL_UART_Transmit(&huart2, buffer, 30, 1000);
 802b304:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802b308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b30c:	221e      	movs	r2, #30
 802b30e:	48a4      	ldr	r0, [pc, #656]	; (802b5a0 <main+0x88c>)
 802b310:	f00b f86f 	bl	80363f2 <HAL_UART_Transmit>
						  memset(buffer, 0, 100);
 802b314:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 802b318:	2264      	movs	r2, #100	; 0x64
 802b31a:	2100      	movs	r1, #0
 802b31c:	4618      	mov	r0, r3
 802b31e:	f00f fc87 	bl	803ac30 <memset>

						  TIM1->CNT = 0;
 802b322:	4b9c      	ldr	r3, [pc, #624]	; (802b594 <main+0x880>)
 802b324:	2200      	movs	r2, #0
 802b326:	625a      	str	r2, [r3, #36]	; 0x24
						  int size_file = read_file_and_store_into_flash(&fatfs,&myfile,"appa.bin", FA_READ, FLASH_SLOT_1, signature, publickey, hashvalue);
 802b328:	f507 7184 	add.w	r1, r7, #264	; 0x108
 802b32c:	f507 704e 	add.w	r0, r7, #824	; 0x338
 802b330:	4b9e      	ldr	r3, [pc, #632]	; (802b5ac <main+0x898>)
 802b332:	9303      	str	r3, [sp, #12]
 802b334:	4b9e      	ldr	r3, [pc, #632]	; (802b5b0 <main+0x89c>)
 802b336:	9302      	str	r3, [sp, #8]
 802b338:	4b9e      	ldr	r3, [pc, #632]	; (802b5b4 <main+0x8a0>)
 802b33a:	9301      	str	r3, [sp, #4]
 802b33c:	2301      	movs	r3, #1
 802b33e:	9300      	str	r3, [sp, #0]
 802b340:	2301      	movs	r3, #1
 802b342:	4a95      	ldr	r2, [pc, #596]	; (802b598 <main+0x884>)
 802b344:	f7f6 fd02 	bl	8021d4c <read_file_and_store_into_flash>
 802b348:	4603      	mov	r3, r0
 802b34a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
						  time = TIM1->CNT;
 802b34e:	4b91      	ldr	r3, [pc, #580]	; (802b594 <main+0x880>)
 802b350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b352:	f8a7 357a 	strh.w	r3, [r7, #1402]	; 0x57a
						  total_time += time;
 802b356:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802b35a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 802b35e:	4413      	add	r3, r2
 802b360:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
						  HAL_UART_Transmit(&huart2, "\r       -READ APPLICATION1 AND STORE IN FLASH\n\r", 50, 1000);
 802b364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b368:	2232      	movs	r2, #50	; 0x32
 802b36a:	4993      	ldr	r1, [pc, #588]	; (802b5b8 <main+0x8a4>)
 802b36c:	488c      	ldr	r0, [pc, #560]	; (802b5a0 <main+0x88c>)
 802b36e:	f00b f840 	bl	80363f2 <HAL_UART_Transmit>
						  sprintf(buffer, "\r              +SIZE: %d BYTES\n\r              +TIME: %.2f(MS)\n\r", size_file, (float)time/5.0);
 802b372:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802b376:	ee07 3a90 	vmov	s15, r3
 802b37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802b37e:	ee17 0a90 	vmov	r0, s15
 802b382:	f7f5 f8e1 	bl	8020548 <__aeabi_f2d>
 802b386:	f04f 0200 	mov.w	r2, #0
 802b38a:	4b86      	ldr	r3, [pc, #536]	; (802b5a4 <main+0x890>)
 802b38c:	f7f5 fa5e 	bl	802084c <__aeabi_ddiv>
 802b390:	4602      	mov	r2, r0
 802b392:	460b      	mov	r3, r1
 802b394:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 802b398:	e9cd 2300 	strd	r2, r3, [sp]
 802b39c:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 802b3a0:	4986      	ldr	r1, [pc, #536]	; (802b5bc <main+0x8a8>)
 802b3a2:	f010 fb87 	bl	803bab4 <siprintf>
						  HAL_UART_Transmit(&huart2, buffer, 100, 1000);
 802b3a6:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802b3aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b3ae:	2264      	movs	r2, #100	; 0x64
 802b3b0:	487b      	ldr	r0, [pc, #492]	; (802b5a0 <main+0x88c>)
 802b3b2:	f00b f81e 	bl	80363f2 <HAL_UART_Transmit>
						  memset(buffer, 0, 100);
 802b3b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 802b3ba:	2264      	movs	r2, #100	; 0x64
 802b3bc:	2100      	movs	r1, #0
 802b3be:	4618      	mov	r0, r3
 802b3c0:	f00f fc36 	bl	803ac30 <memset>


						  TIM1->CNT = 0;
 802b3c4:	4b73      	ldr	r3, [pc, #460]	; (802b594 <main+0x880>)
 802b3c6:	2200      	movs	r2, #0
 802b3c8:	625a      	str	r2, [r3, #36]	; 0x24
						  tree_hash_on_flash(FLASH_SLOT_1, md,size_file, &round);
 802b3ca:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 802b3ce:	4b7c      	ldr	r3, [pc, #496]	; (802b5c0 <main+0x8ac>)
 802b3d0:	497c      	ldr	r1, [pc, #496]	; (802b5c4 <main+0x8b0>)
 802b3d2:	2001      	movs	r0, #1
 802b3d4:	f7f6 fe3e 	bl	8022054 <tree_hash_on_flash>
						  time = TIM1->CNT;
 802b3d8:	4b6e      	ldr	r3, [pc, #440]	; (802b594 <main+0x880>)
 802b3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b3dc:	f8a7 357a 	strh.w	r3, [r7, #1402]	; 0x57a
						  total_time += time;
 802b3e0:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802b3e4:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 802b3e8:	4413      	add	r3, r2
 802b3ea:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
						  HAL_UART_Transmit(&huart2, "\r       -TREE HASH IN FLASH\n\r", 28, 1000);
 802b3ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b3f2:	221c      	movs	r2, #28
 802b3f4:	4974      	ldr	r1, [pc, #464]	; (802b5c8 <main+0x8b4>)
 802b3f6:	486a      	ldr	r0, [pc, #424]	; (802b5a0 <main+0x88c>)
 802b3f8:	f00a fffb 	bl	80363f2 <HAL_UART_Transmit>
						  sprintf(buffer, "\r              +TIME: %.2f(MS)\n\r", (float)time/5.0);
 802b3fc:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802b400:	ee07 3a90 	vmov	s15, r3
 802b404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802b408:	ee17 0a90 	vmov	r0, s15
 802b40c:	f7f5 f89c 	bl	8020548 <__aeabi_f2d>
 802b410:	f04f 0200 	mov.w	r2, #0
 802b414:	4b63      	ldr	r3, [pc, #396]	; (802b5a4 <main+0x890>)
 802b416:	f7f5 fa19 	bl	802084c <__aeabi_ddiv>
 802b41a:	4602      	mov	r2, r0
 802b41c:	460b      	mov	r3, r1
 802b41e:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 802b422:	496a      	ldr	r1, [pc, #424]	; (802b5cc <main+0x8b8>)
 802b424:	f010 fb46 	bl	803bab4 <siprintf>
						  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 802b428:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802b42c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b430:	2228      	movs	r2, #40	; 0x28
 802b432:	485b      	ldr	r0, [pc, #364]	; (802b5a0 <main+0x88c>)
 802b434:	f00a ffdd 	bl	80363f2 <HAL_UART_Transmit>
						  memset(buffer, 0, 100);
 802b438:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 802b43c:	2264      	movs	r2, #100	; 0x64
 802b43e:	2100      	movs	r1, #0
 802b440:	4618      	mov	r0, r3
 802b442:	f00f fbf5 	bl	803ac30 <memset>

						  TIM1->CNT = 0;
 802b446:	4b53      	ldr	r3, [pc, #332]	; (802b594 <main+0x880>)
 802b448:	2200      	movs	r2, #0
 802b44a:	625a      	str	r2, [r3, #36]	; 0x24
						  if (ed25519_verify(signature, md, 64, publickey)) {
 802b44c:	4b58      	ldr	r3, [pc, #352]	; (802b5b0 <main+0x89c>)
 802b44e:	2240      	movs	r2, #64	; 0x40
 802b450:	495c      	ldr	r1, [pc, #368]	; (802b5c4 <main+0x8b0>)
 802b452:	4858      	ldr	r0, [pc, #352]	; (802b5b4 <main+0x8a0>)
 802b454:	f007 fb3a 	bl	8032acc <ed25519_verify>
 802b458:	4603      	mov	r3, r0
 802b45a:	2b00      	cmp	r3, #0
 802b45c:	f000 8081 	beq.w	802b562 <main+0x84e>

							  W25qxx_Init();
 802b460:	f7f7 f842 	bl	80224e8 <W25qxx_Init>
							  W25qxx_EraseSector(2);
 802b464:	2002      	movs	r0, #2
 802b466:	f7f7 f907 	bl	8022678 <W25qxx_EraseSector>
							  Update_Application1Cert(signature, publickey, hashvalue);
 802b46a:	4a50      	ldr	r2, [pc, #320]	; (802b5ac <main+0x898>)
 802b46c:	4950      	ldr	r1, [pc, #320]	; (802b5b0 <main+0x89c>)
 802b46e:	4851      	ldr	r0, [pc, #324]	; (802b5b4 <main+0x8a0>)
 802b470:	f7ff fbe6 	bl	802ac40 <Update_Application1Cert>
							  W25qxx_WriteSector(Application1_Cert.signature, 2, 0, 64);
 802b474:	2340      	movs	r3, #64	; 0x40
 802b476:	2200      	movs	r2, #0
 802b478:	2102      	movs	r1, #2
 802b47a:	4855      	ldr	r0, [pc, #340]	; (802b5d0 <main+0x8bc>)
 802b47c:	f7f7 f9ea 	bl	8022854 <W25qxx_WriteSector>
							  W25qxx_WriteSector(Application1_Cert.publickey, 2, 0 + 64, 32);
 802b480:	2320      	movs	r3, #32
 802b482:	2240      	movs	r2, #64	; 0x40
 802b484:	2102      	movs	r1, #2
 802b486:	4853      	ldr	r0, [pc, #332]	; (802b5d4 <main+0x8c0>)
 802b488:	f7f7 f9e4 	bl	8022854 <W25qxx_WriteSector>
							  W25qxx_WriteSector(Application1_Cert.hash, 2, 0 + 32 + 64, 64);
 802b48c:	2340      	movs	r3, #64	; 0x40
 802b48e:	2260      	movs	r2, #96	; 0x60
 802b490:	2102      	movs	r1, #2
 802b492:	4851      	ldr	r0, [pc, #324]	; (802b5d8 <main+0x8c4>)
 802b494:	f7f7 f9de 	bl	8022854 <W25qxx_WriteSector>

							  time = TIM1->CNT;
 802b498:	4b3e      	ldr	r3, [pc, #248]	; (802b594 <main+0x880>)
 802b49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802b49c:	f8a7 357a 	strh.w	r3, [r7, #1402]	; 0x57a
							  total_time += time;
 802b4a0:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802b4a4:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 802b4a8:	4413      	add	r3, r2
 802b4aa:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
							  HAL_UART_Transmit(&huart2, "\r       -VERIFY APPLICATION2 SUCCESSFULL\n\r", 60, 1000);
 802b4ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b4b2:	223c      	movs	r2, #60	; 0x3c
 802b4b4:	4949      	ldr	r1, [pc, #292]	; (802b5dc <main+0x8c8>)
 802b4b6:	483a      	ldr	r0, [pc, #232]	; (802b5a0 <main+0x88c>)
 802b4b8:	f00a ff9b 	bl	80363f2 <HAL_UART_Transmit>
							  sprintf(buffer, "\r              +TIME: %.2f(MS)\n\r", (float)time/5.0);
 802b4bc:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 802b4c0:	ee07 3a90 	vmov	s15, r3
 802b4c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802b4c8:	ee17 0a90 	vmov	r0, s15
 802b4cc:	f7f5 f83c 	bl	8020548 <__aeabi_f2d>
 802b4d0:	f04f 0200 	mov.w	r2, #0
 802b4d4:	4b33      	ldr	r3, [pc, #204]	; (802b5a4 <main+0x890>)
 802b4d6:	f7f5 f9b9 	bl	802084c <__aeabi_ddiv>
 802b4da:	4602      	mov	r2, r0
 802b4dc:	460b      	mov	r3, r1
 802b4de:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 802b4e2:	493a      	ldr	r1, [pc, #232]	; (802b5cc <main+0x8b8>)
 802b4e4:	f010 fae6 	bl	803bab4 <siprintf>
							  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 802b4e8:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802b4ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b4f0:	2228      	movs	r2, #40	; 0x28
 802b4f2:	482b      	ldr	r0, [pc, #172]	; (802b5a0 <main+0x88c>)
 802b4f4:	f00a ff7d 	bl	80363f2 <HAL_UART_Transmit>
							  sprintf(buffer, "\r       -TOTAL TIME: %.2f(MS)\n\r", (float)total_time/5.0);
 802b4f8:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 802b4fc:	ee07 3a90 	vmov	s15, r3
 802b500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802b504:	ee17 0a90 	vmov	r0, s15
 802b508:	f7f5 f81e 	bl	8020548 <__aeabi_f2d>
 802b50c:	f04f 0200 	mov.w	r2, #0
 802b510:	4b24      	ldr	r3, [pc, #144]	; (802b5a4 <main+0x890>)
 802b512:	f7f5 f99b 	bl	802084c <__aeabi_ddiv>
 802b516:	4602      	mov	r2, r0
 802b518:	460b      	mov	r3, r1
 802b51a:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 802b51e:	4930      	ldr	r1, [pc, #192]	; (802b5e0 <main+0x8cc>)
 802b520:	f010 fac8 	bl	803bab4 <siprintf>
							  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 802b524:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802b528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b52c:	2228      	movs	r2, #40	; 0x28
 802b52e:	481c      	ldr	r0, [pc, #112]	; (802b5a0 <main+0x88c>)
 802b530:	f00a ff5f 	bl	80363f2 <HAL_UART_Transmit>

							  HAL_UART_Transmit(&huart2, "\r*****APPLICATION1 IS RUNNING*****\n\r", 50, 1000);
 802b534:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802b538:	2232      	movs	r2, #50	; 0x32
 802b53a:	492a      	ldr	r1, [pc, #168]	; (802b5e4 <main+0x8d0>)
 802b53c:	4818      	ldr	r0, [pc, #96]	; (802b5a0 <main+0x88c>)
 802b53e:	f00a ff58 	bl	80363f2 <HAL_UART_Transmit>


							  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 802b542:	2201      	movs	r2, #1
 802b544:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802b548:	4827      	ldr	r0, [pc, #156]	; (802b5e8 <main+0x8d4>)
 802b54a:	f008 fa15 	bl	8033978 <HAL_GPIO_WritePin>
							  Flash_Cfg.FlashOnGoing = FLASH_SLOT_1;
 802b54e:	4b10      	ldr	r3, [pc, #64]	; (802b590 <main+0x87c>)
 802b550:	2201      	movs	r2, #1
 802b552:	701a      	strb	r2, [r3, #0]
							  Frame_WriteCfg(&Flash_Cfg);
 802b554:	480e      	ldr	r0, [pc, #56]	; (802b590 <main+0x87c>)
 802b556:	f7f6 fa7f 	bl	8021a58 <Frame_WriteCfg>
							  goto_application(FLASH_SLOT_1_ADD);
 802b55a:	4824      	ldr	r0, [pc, #144]	; (802b5ec <main+0x8d8>)
 802b55c:	f7ff fba0 	bl	802aca0 <goto_application>
 802b560:	e00c      	b.n	802b57c <main+0x868>
						  } else {
							  Frame_WriteCfg(&Flash_Cfg);
 802b562:	480b      	ldr	r0, [pc, #44]	; (802b590 <main+0x87c>)
 802b564:	f7f6 fa78 	bl	8021a58 <Frame_WriteCfg>
							  goto_application(FLASH_SLOT_2_ADD);
 802b568:	4821      	ldr	r0, [pc, #132]	; (802b5f0 <main+0x8dc>)
 802b56a:	f7ff fb99 	bl	802aca0 <goto_application>
 802b56e:	e005      	b.n	802b57c <main+0x868>
						  }
					  }
					  else{
						  Frame_WriteCfg(&Flash_Cfg);
 802b570:	4807      	ldr	r0, [pc, #28]	; (802b590 <main+0x87c>)
 802b572:	f7f6 fa71 	bl	8021a58 <Frame_WriteCfg>
						  goto_application(FLASH_SLOT_2_ADD);
 802b576:	481e      	ldr	r0, [pc, #120]	; (802b5f0 <main+0x8dc>)
 802b578:	f7ff fb92 	bl	802aca0 <goto_application>
					  }
				  }
				flag = 0;
 802b57c:	4b1d      	ldr	r3, [pc, #116]	; (802b5f4 <main+0x8e0>)
 802b57e:	2200      	movs	r2, #0
 802b580:	701a      	strb	r2, [r3, #0]
 802b582:	f7ff bbf5 	b.w	802ad70 <main+0x5c>
			  }
		  }
	  }
	  else{
		  goto_application(FLASH_SLOT_1_ADD);
 802b586:	4819      	ldr	r0, [pc, #100]	; (802b5ec <main+0x8d8>)
 802b588:	f7ff fb8a 	bl	802aca0 <goto_application>
	  HAL_UART_Transmit(&huart2, "\r*****THIS IS BOOTLOADER PROGRAM*****\n\r", 39, 1000);
 802b58c:	f7ff bbf0 	b.w	802ad70 <main+0x5c>
 802b590:	200002a8 	.word	0x200002a8
 802b594:	40010000 	.word	0x40010000
 802b598:	0803f084 	.word	0x0803f084
 802b59c:	0803f108 	.word	0x0803f108
 802b5a0:	200006a4 	.word	0x200006a4
 802b5a4:	40140000 	.word	0x40140000
 802b5a8:	0803f128 	.word	0x0803f128
 802b5ac:	20000664 	.word	0x20000664
 802b5b0:	20000534 	.word	0x20000534
 802b5b4:	200004f4 	.word	0x200004f4
 802b5b8:	0803f244 	.word	0x0803f244
 802b5bc:	0803f174 	.word	0x0803f174
 802b5c0:	20000430 	.word	0x20000430
 802b5c4:	200003f0 	.word	0x200003f0
 802b5c8:	0803f1b4 	.word	0x0803f1b4
 802b5cc:	0803f1d4 	.word	0x0803f1d4
 802b5d0:	200002ac 	.word	0x200002ac
 802b5d4:	200002ec 	.word	0x200002ec
 802b5d8:	2000030c 	.word	0x2000030c
 802b5dc:	0803f1f8 	.word	0x0803f1f8
 802b5e0:	0803f224 	.word	0x0803f224
 802b5e4:	0803f090 	.word	0x0803f090
 802b5e8:	40020c00 	.word	0x40020c00
 802b5ec:	08060000 	.word	0x08060000
 802b5f0:	080a0000 	.word	0x080a0000
 802b5f4:	200003ef 	.word	0x200003ef

0802b5f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802b5f8:	b580      	push	{r7, lr}
 802b5fa:	b094      	sub	sp, #80	; 0x50
 802b5fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802b5fe:	f107 0320 	add.w	r3, r7, #32
 802b602:	2230      	movs	r2, #48	; 0x30
 802b604:	2100      	movs	r1, #0
 802b606:	4618      	mov	r0, r3
 802b608:	f00f fb12 	bl	803ac30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802b60c:	f107 030c 	add.w	r3, r7, #12
 802b610:	2200      	movs	r2, #0
 802b612:	601a      	str	r2, [r3, #0]
 802b614:	605a      	str	r2, [r3, #4]
 802b616:	609a      	str	r2, [r3, #8]
 802b618:	60da      	str	r2, [r3, #12]
 802b61a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 802b61c:	2300      	movs	r3, #0
 802b61e:	60bb      	str	r3, [r7, #8]
 802b620:	4b28      	ldr	r3, [pc, #160]	; (802b6c4 <SystemClock_Config+0xcc>)
 802b622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b624:	4a27      	ldr	r2, [pc, #156]	; (802b6c4 <SystemClock_Config+0xcc>)
 802b626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802b62a:	6413      	str	r3, [r2, #64]	; 0x40
 802b62c:	4b25      	ldr	r3, [pc, #148]	; (802b6c4 <SystemClock_Config+0xcc>)
 802b62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802b630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802b634:	60bb      	str	r3, [r7, #8]
 802b636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802b638:	2300      	movs	r3, #0
 802b63a:	607b      	str	r3, [r7, #4]
 802b63c:	4b22      	ldr	r3, [pc, #136]	; (802b6c8 <SystemClock_Config+0xd0>)
 802b63e:	681b      	ldr	r3, [r3, #0]
 802b640:	4a21      	ldr	r2, [pc, #132]	; (802b6c8 <SystemClock_Config+0xd0>)
 802b642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802b646:	6013      	str	r3, [r2, #0]
 802b648:	4b1f      	ldr	r3, [pc, #124]	; (802b6c8 <SystemClock_Config+0xd0>)
 802b64a:	681b      	ldr	r3, [r3, #0]
 802b64c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802b650:	607b      	str	r3, [r7, #4]
 802b652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 802b654:	2302      	movs	r3, #2
 802b656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 802b658:	2301      	movs	r3, #1
 802b65a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 802b65c:	2310      	movs	r3, #16
 802b65e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802b660:	2302      	movs	r3, #2
 802b662:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 802b664:	2300      	movs	r3, #0
 802b666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 802b668:	2308      	movs	r3, #8
 802b66a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 802b66c:	23a8      	movs	r3, #168	; 0xa8
 802b66e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802b670:	2302      	movs	r3, #2
 802b672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 802b674:	2304      	movs	r3, #4
 802b676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802b678:	f107 0320 	add.w	r3, r7, #32
 802b67c:	4618      	mov	r0, r3
 802b67e:	f008 f995 	bl	80339ac <HAL_RCC_OscConfig>
 802b682:	4603      	mov	r3, r0
 802b684:	2b00      	cmp	r3, #0
 802b686:	d001      	beq.n	802b68c <SystemClock_Config+0x94>
  {
    Error_Handler();
 802b688:	f000 f9e4 	bl	802ba54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802b68c:	230f      	movs	r3, #15
 802b68e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802b690:	2302      	movs	r3, #2
 802b692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802b694:	2300      	movs	r3, #0
 802b696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802b698:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802b69c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 802b69e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802b6a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 802b6a4:	f107 030c 	add.w	r3, r7, #12
 802b6a8:	2105      	movs	r1, #5
 802b6aa:	4618      	mov	r0, r3
 802b6ac:	f008 fbf6 	bl	8033e9c <HAL_RCC_ClockConfig>
 802b6b0:	4603      	mov	r3, r0
 802b6b2:	2b00      	cmp	r3, #0
 802b6b4:	d001      	beq.n	802b6ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 802b6b6:	f000 f9cd 	bl	802ba54 <Error_Handler>
  }
}
 802b6ba:	bf00      	nop
 802b6bc:	3750      	adds	r7, #80	; 0x50
 802b6be:	46bd      	mov	sp, r7
 802b6c0:	bd80      	pop	{r7, pc}
 802b6c2:	bf00      	nop
 802b6c4:	40023800 	.word	0x40023800
 802b6c8:	40007000 	.word	0x40007000

0802b6cc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 802b6cc:	b480      	push	{r7}
 802b6ce:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 802b6d0:	4b0c      	ldr	r3, [pc, #48]	; (802b704 <MX_SDIO_SD_Init+0x38>)
 802b6d2:	4a0d      	ldr	r2, [pc, #52]	; (802b708 <MX_SDIO_SD_Init+0x3c>)
 802b6d4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 802b6d6:	4b0b      	ldr	r3, [pc, #44]	; (802b704 <MX_SDIO_SD_Init+0x38>)
 802b6d8:	2200      	movs	r2, #0
 802b6da:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 802b6dc:	4b09      	ldr	r3, [pc, #36]	; (802b704 <MX_SDIO_SD_Init+0x38>)
 802b6de:	2200      	movs	r2, #0
 802b6e0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 802b6e2:	4b08      	ldr	r3, [pc, #32]	; (802b704 <MX_SDIO_SD_Init+0x38>)
 802b6e4:	2200      	movs	r2, #0
 802b6e6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 802b6e8:	4b06      	ldr	r3, [pc, #24]	; (802b704 <MX_SDIO_SD_Init+0x38>)
 802b6ea:	2200      	movs	r2, #0
 802b6ec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 802b6ee:	4b05      	ldr	r3, [pc, #20]	; (802b704 <MX_SDIO_SD_Init+0x38>)
 802b6f0:	2200      	movs	r2, #0
 802b6f2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 802b6f4:	4b03      	ldr	r3, [pc, #12]	; (802b704 <MX_SDIO_SD_Init+0x38>)
 802b6f6:	2202      	movs	r2, #2
 802b6f8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 802b6fa:	bf00      	nop
 802b6fc:	46bd      	mov	sp, r7
 802b6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b702:	4770      	bx	lr
 802b704:	2000059c 	.word	0x2000059c
 802b708:	40012c00 	.word	0x40012c00

0802b70c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 802b70c:	b580      	push	{r7, lr}
 802b70e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 802b710:	4b17      	ldr	r3, [pc, #92]	; (802b770 <MX_SPI2_Init+0x64>)
 802b712:	4a18      	ldr	r2, [pc, #96]	; (802b774 <MX_SPI2_Init+0x68>)
 802b714:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 802b716:	4b16      	ldr	r3, [pc, #88]	; (802b770 <MX_SPI2_Init+0x64>)
 802b718:	f44f 7282 	mov.w	r2, #260	; 0x104
 802b71c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 802b71e:	4b14      	ldr	r3, [pc, #80]	; (802b770 <MX_SPI2_Init+0x64>)
 802b720:	2200      	movs	r2, #0
 802b722:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 802b724:	4b12      	ldr	r3, [pc, #72]	; (802b770 <MX_SPI2_Init+0x64>)
 802b726:	2200      	movs	r2, #0
 802b728:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 802b72a:	4b11      	ldr	r3, [pc, #68]	; (802b770 <MX_SPI2_Init+0x64>)
 802b72c:	2200      	movs	r2, #0
 802b72e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 802b730:	4b0f      	ldr	r3, [pc, #60]	; (802b770 <MX_SPI2_Init+0x64>)
 802b732:	2200      	movs	r2, #0
 802b734:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 802b736:	4b0e      	ldr	r3, [pc, #56]	; (802b770 <MX_SPI2_Init+0x64>)
 802b738:	f44f 7200 	mov.w	r2, #512	; 0x200
 802b73c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 802b73e:	4b0c      	ldr	r3, [pc, #48]	; (802b770 <MX_SPI2_Init+0x64>)
 802b740:	2200      	movs	r2, #0
 802b742:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 802b744:	4b0a      	ldr	r3, [pc, #40]	; (802b770 <MX_SPI2_Init+0x64>)
 802b746:	2200      	movs	r2, #0
 802b748:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 802b74a:	4b09      	ldr	r3, [pc, #36]	; (802b770 <MX_SPI2_Init+0x64>)
 802b74c:	2200      	movs	r2, #0
 802b74e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802b750:	4b07      	ldr	r3, [pc, #28]	; (802b770 <MX_SPI2_Init+0x64>)
 802b752:	2200      	movs	r2, #0
 802b754:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 802b756:	4b06      	ldr	r3, [pc, #24]	; (802b770 <MX_SPI2_Init+0x64>)
 802b758:	220a      	movs	r2, #10
 802b75a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 802b75c:	4804      	ldr	r0, [pc, #16]	; (802b770 <MX_SPI2_Init+0x64>)
 802b75e:	f009 fd1d 	bl	803519c <HAL_SPI_Init>
 802b762:	4603      	mov	r3, r0
 802b764:	2b00      	cmp	r3, #0
 802b766:	d001      	beq.n	802b76c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 802b768:	f000 f974 	bl	802ba54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 802b76c:	bf00      	nop
 802b76e:	bd80      	pop	{r7, pc}
 802b770:	2000049c 	.word	0x2000049c
 802b774:	40003800 	.word	0x40003800

0802b778 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 802b778:	b580      	push	{r7, lr}
 802b77a:	b086      	sub	sp, #24
 802b77c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802b77e:	f107 0308 	add.w	r3, r7, #8
 802b782:	2200      	movs	r2, #0
 802b784:	601a      	str	r2, [r3, #0]
 802b786:	605a      	str	r2, [r3, #4]
 802b788:	609a      	str	r2, [r3, #8]
 802b78a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802b78c:	463b      	mov	r3, r7
 802b78e:	2200      	movs	r2, #0
 802b790:	601a      	str	r2, [r3, #0]
 802b792:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 802b794:	4b1f      	ldr	r3, [pc, #124]	; (802b814 <MX_TIM1_Init+0x9c>)
 802b796:	4a20      	ldr	r2, [pc, #128]	; (802b818 <MX_TIM1_Init+0xa0>)
 802b798:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 33600-1;
 802b79a:	4b1e      	ldr	r3, [pc, #120]	; (802b814 <MX_TIM1_Init+0x9c>)
 802b79c:	f248 323f 	movw	r2, #33599	; 0x833f
 802b7a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 802b7a2:	4b1c      	ldr	r3, [pc, #112]	; (802b814 <MX_TIM1_Init+0x9c>)
 802b7a4:	2200      	movs	r2, #0
 802b7a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 802b7a8:	4b1a      	ldr	r3, [pc, #104]	; (802b814 <MX_TIM1_Init+0x9c>)
 802b7aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802b7ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802b7b0:	4b18      	ldr	r3, [pc, #96]	; (802b814 <MX_TIM1_Init+0x9c>)
 802b7b2:	2200      	movs	r2, #0
 802b7b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 802b7b6:	4b17      	ldr	r3, [pc, #92]	; (802b814 <MX_TIM1_Init+0x9c>)
 802b7b8:	2200      	movs	r2, #0
 802b7ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802b7bc:	4b15      	ldr	r3, [pc, #84]	; (802b814 <MX_TIM1_Init+0x9c>)
 802b7be:	2200      	movs	r2, #0
 802b7c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 802b7c2:	4814      	ldr	r0, [pc, #80]	; (802b814 <MX_TIM1_Init+0x9c>)
 802b7c4:	f00a fa92 	bl	8035cec <HAL_TIM_Base_Init>
 802b7c8:	4603      	mov	r3, r0
 802b7ca:	2b00      	cmp	r3, #0
 802b7cc:	d001      	beq.n	802b7d2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 802b7ce:	f000 f941 	bl	802ba54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802b7d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802b7d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 802b7d8:	f107 0308 	add.w	r3, r7, #8
 802b7dc:	4619      	mov	r1, r3
 802b7de:	480d      	ldr	r0, [pc, #52]	; (802b814 <MX_TIM1_Init+0x9c>)
 802b7e0:	f00a fb3c 	bl	8035e5c <HAL_TIM_ConfigClockSource>
 802b7e4:	4603      	mov	r3, r0
 802b7e6:	2b00      	cmp	r3, #0
 802b7e8:	d001      	beq.n	802b7ee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 802b7ea:	f000 f933 	bl	802ba54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802b7ee:	2300      	movs	r3, #0
 802b7f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802b7f2:	2300      	movs	r3, #0
 802b7f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 802b7f6:	463b      	mov	r3, r7
 802b7f8:	4619      	mov	r1, r3
 802b7fa:	4806      	ldr	r0, [pc, #24]	; (802b814 <MX_TIM1_Init+0x9c>)
 802b7fc:	f00a fd30 	bl	8036260 <HAL_TIMEx_MasterConfigSynchronization>
 802b800:	4603      	mov	r3, r0
 802b802:	2b00      	cmp	r3, #0
 802b804:	d001      	beq.n	802b80a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 802b806:	f000 f925 	bl	802ba54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 802b80a:	bf00      	nop
 802b80c:	3718      	adds	r7, #24
 802b80e:	46bd      	mov	sp, r7
 802b810:	bd80      	pop	{r7, pc}
 802b812:	bf00      	nop
 802b814:	20000554 	.word	0x20000554
 802b818:	40010000 	.word	0x40010000

0802b81c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 802b81c:	b580      	push	{r7, lr}
 802b81e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 802b820:	4b11      	ldr	r3, [pc, #68]	; (802b868 <MX_USART2_UART_Init+0x4c>)
 802b822:	4a12      	ldr	r2, [pc, #72]	; (802b86c <MX_USART2_UART_Init+0x50>)
 802b824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 802b826:	4b10      	ldr	r3, [pc, #64]	; (802b868 <MX_USART2_UART_Init+0x4c>)
 802b828:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 802b82c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802b82e:	4b0e      	ldr	r3, [pc, #56]	; (802b868 <MX_USART2_UART_Init+0x4c>)
 802b830:	2200      	movs	r2, #0
 802b832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 802b834:	4b0c      	ldr	r3, [pc, #48]	; (802b868 <MX_USART2_UART_Init+0x4c>)
 802b836:	2200      	movs	r2, #0
 802b838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802b83a:	4b0b      	ldr	r3, [pc, #44]	; (802b868 <MX_USART2_UART_Init+0x4c>)
 802b83c:	2200      	movs	r2, #0
 802b83e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 802b840:	4b09      	ldr	r3, [pc, #36]	; (802b868 <MX_USART2_UART_Init+0x4c>)
 802b842:	220c      	movs	r2, #12
 802b844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802b846:	4b08      	ldr	r3, [pc, #32]	; (802b868 <MX_USART2_UART_Init+0x4c>)
 802b848:	2200      	movs	r2, #0
 802b84a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802b84c:	4b06      	ldr	r3, [pc, #24]	; (802b868 <MX_USART2_UART_Init+0x4c>)
 802b84e:	2200      	movs	r2, #0
 802b850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802b852:	4805      	ldr	r0, [pc, #20]	; (802b868 <MX_USART2_UART_Init+0x4c>)
 802b854:	f00a fd80 	bl	8036358 <HAL_UART_Init>
 802b858:	4603      	mov	r3, r0
 802b85a:	2b00      	cmp	r3, #0
 802b85c:	d001      	beq.n	802b862 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 802b85e:	f000 f8f9 	bl	802ba54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802b862:	bf00      	nop
 802b864:	bd80      	pop	{r7, pc}
 802b866:	bf00      	nop
 802b868:	200006a4 	.word	0x200006a4
 802b86c:	40004400 	.word	0x40004400

0802b870 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 802b870:	b580      	push	{r7, lr}
 802b872:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 802b874:	4b11      	ldr	r3, [pc, #68]	; (802b8bc <MX_USART6_UART_Init+0x4c>)
 802b876:	4a12      	ldr	r2, [pc, #72]	; (802b8c0 <MX_USART6_UART_Init+0x50>)
 802b878:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 802b87a:	4b10      	ldr	r3, [pc, #64]	; (802b8bc <MX_USART6_UART_Init+0x4c>)
 802b87c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802b880:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 802b882:	4b0e      	ldr	r3, [pc, #56]	; (802b8bc <MX_USART6_UART_Init+0x4c>)
 802b884:	2200      	movs	r2, #0
 802b886:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 802b888:	4b0c      	ldr	r3, [pc, #48]	; (802b8bc <MX_USART6_UART_Init+0x4c>)
 802b88a:	2200      	movs	r2, #0
 802b88c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 802b88e:	4b0b      	ldr	r3, [pc, #44]	; (802b8bc <MX_USART6_UART_Init+0x4c>)
 802b890:	2200      	movs	r2, #0
 802b892:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 802b894:	4b09      	ldr	r3, [pc, #36]	; (802b8bc <MX_USART6_UART_Init+0x4c>)
 802b896:	220c      	movs	r2, #12
 802b898:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802b89a:	4b08      	ldr	r3, [pc, #32]	; (802b8bc <MX_USART6_UART_Init+0x4c>)
 802b89c:	2200      	movs	r2, #0
 802b89e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 802b8a0:	4b06      	ldr	r3, [pc, #24]	; (802b8bc <MX_USART6_UART_Init+0x4c>)
 802b8a2:	2200      	movs	r2, #0
 802b8a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 802b8a6:	4805      	ldr	r0, [pc, #20]	; (802b8bc <MX_USART6_UART_Init+0x4c>)
 802b8a8:	f00a fd56 	bl	8036358 <HAL_UART_Init>
 802b8ac:	4603      	mov	r3, r0
 802b8ae:	2b00      	cmp	r3, #0
 802b8b0:	d001      	beq.n	802b8b6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 802b8b2:	f000 f8cf 	bl	802ba54 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 802b8b6:	bf00      	nop
 802b8b8:	bd80      	pop	{r7, pc}
 802b8ba:	bf00      	nop
 802b8bc:	20000620 	.word	0x20000620
 802b8c0:	40011400 	.word	0x40011400

0802b8c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 802b8c4:	b580      	push	{r7, lr}
 802b8c6:	b08c      	sub	sp, #48	; 0x30
 802b8c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802b8ca:	f107 031c 	add.w	r3, r7, #28
 802b8ce:	2200      	movs	r2, #0
 802b8d0:	601a      	str	r2, [r3, #0]
 802b8d2:	605a      	str	r2, [r3, #4]
 802b8d4:	609a      	str	r2, [r3, #8]
 802b8d6:	60da      	str	r2, [r3, #12]
 802b8d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802b8da:	2300      	movs	r3, #0
 802b8dc:	61bb      	str	r3, [r7, #24]
 802b8de:	4b57      	ldr	r3, [pc, #348]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b8e2:	4a56      	ldr	r2, [pc, #344]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b8e4:	f043 0310 	orr.w	r3, r3, #16
 802b8e8:	6313      	str	r3, [r2, #48]	; 0x30
 802b8ea:	4b54      	ldr	r3, [pc, #336]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b8ee:	f003 0310 	and.w	r3, r3, #16
 802b8f2:	61bb      	str	r3, [r7, #24]
 802b8f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802b8f6:	2300      	movs	r3, #0
 802b8f8:	617b      	str	r3, [r7, #20]
 802b8fa:	4b50      	ldr	r3, [pc, #320]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b8fe:	4a4f      	ldr	r2, [pc, #316]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b900:	f043 0304 	orr.w	r3, r3, #4
 802b904:	6313      	str	r3, [r2, #48]	; 0x30
 802b906:	4b4d      	ldr	r3, [pc, #308]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b90a:	f003 0304 	and.w	r3, r3, #4
 802b90e:	617b      	str	r3, [r7, #20]
 802b910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802b912:	2300      	movs	r3, #0
 802b914:	613b      	str	r3, [r7, #16]
 802b916:	4b49      	ldr	r3, [pc, #292]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b91a:	4a48      	ldr	r2, [pc, #288]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b91c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b920:	6313      	str	r3, [r2, #48]	; 0x30
 802b922:	4b46      	ldr	r3, [pc, #280]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802b92a:	613b      	str	r3, [r7, #16]
 802b92c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802b92e:	2300      	movs	r3, #0
 802b930:	60fb      	str	r3, [r7, #12]
 802b932:	4b42      	ldr	r3, [pc, #264]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b936:	4a41      	ldr	r2, [pc, #260]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b938:	f043 0301 	orr.w	r3, r3, #1
 802b93c:	6313      	str	r3, [r2, #48]	; 0x30
 802b93e:	4b3f      	ldr	r3, [pc, #252]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b942:	f003 0301 	and.w	r3, r3, #1
 802b946:	60fb      	str	r3, [r7, #12]
 802b948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802b94a:	2300      	movs	r3, #0
 802b94c:	60bb      	str	r3, [r7, #8]
 802b94e:	4b3b      	ldr	r3, [pc, #236]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b952:	4a3a      	ldr	r2, [pc, #232]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b954:	f043 0302 	orr.w	r3, r3, #2
 802b958:	6313      	str	r3, [r2, #48]	; 0x30
 802b95a:	4b38      	ldr	r3, [pc, #224]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b95e:	f003 0302 	and.w	r3, r3, #2
 802b962:	60bb      	str	r3, [r7, #8]
 802b964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802b966:	2300      	movs	r3, #0
 802b968:	607b      	str	r3, [r7, #4]
 802b96a:	4b34      	ldr	r3, [pc, #208]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b96e:	4a33      	ldr	r2, [pc, #204]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b970:	f043 0308 	orr.w	r3, r3, #8
 802b974:	6313      	str	r3, [r2, #48]	; 0x30
 802b976:	4b31      	ldr	r3, [pc, #196]	; (802ba3c <MX_GPIO_Init+0x178>)
 802b978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802b97a:	f003 0308 	and.w	r3, r3, #8
 802b97e:	607b      	str	r3, [r7, #4]
 802b980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 802b982:	2200      	movs	r2, #0
 802b984:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802b988:	482d      	ldr	r0, [pc, #180]	; (802ba40 <MX_GPIO_Init+0x17c>)
 802b98a:	f007 fff5 	bl	8033978 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 802b98e:	2200      	movs	r2, #0
 802b990:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802b994:	482b      	ldr	r0, [pc, #172]	; (802ba44 <MX_GPIO_Init+0x180>)
 802b996:	f007 ffef 	bl	8033978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 802b99a:	2200      	movs	r2, #0
 802b99c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 802b9a0:	4829      	ldr	r0, [pc, #164]	; (802ba48 <MX_GPIO_Init+0x184>)
 802b9a2:	f007 ffe9 	bl	8033978 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 802b9a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802b9aa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802b9ac:	2301      	movs	r3, #1
 802b9ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b9b0:	2300      	movs	r3, #0
 802b9b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802b9b4:	2300      	movs	r3, #0
 802b9b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802b9b8:	f107 031c 	add.w	r3, r7, #28
 802b9bc:	4619      	mov	r1, r3
 802b9be:	4820      	ldr	r0, [pc, #128]	; (802ba40 <MX_GPIO_Init+0x17c>)
 802b9c0:	f007 fe3e 	bl	8033640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 802b9c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802b9c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802b9ca:	2300      	movs	r3, #0
 802b9cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b9ce:	2300      	movs	r3, #0
 802b9d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802b9d2:	f107 031c 	add.w	r3, r7, #28
 802b9d6:	4619      	mov	r1, r3
 802b9d8:	481c      	ldr	r0, [pc, #112]	; (802ba4c <MX_GPIO_Init+0x188>)
 802b9da:	f007 fe31 	bl	8033640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 802b9de:	2301      	movs	r3, #1
 802b9e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802b9e2:	2300      	movs	r3, #0
 802b9e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802b9e6:	2300      	movs	r3, #0
 802b9e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802b9ea:	f107 031c 	add.w	r3, r7, #28
 802b9ee:	4619      	mov	r1, r3
 802b9f0:	4817      	ldr	r0, [pc, #92]	; (802ba50 <MX_GPIO_Init+0x18c>)
 802b9f2:	f007 fe25 	bl	8033640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 802b9f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802b9fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802b9fc:	2301      	movs	r3, #1
 802b9fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802ba00:	2300      	movs	r3, #0
 802ba02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802ba04:	2300      	movs	r3, #0
 802ba06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802ba08:	f107 031c 	add.w	r3, r7, #28
 802ba0c:	4619      	mov	r1, r3
 802ba0e:	480d      	ldr	r0, [pc, #52]	; (802ba44 <MX_GPIO_Init+0x180>)
 802ba10:	f007 fe16 	bl	8033640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 802ba14:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 802ba18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802ba1a:	2301      	movs	r3, #1
 802ba1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802ba1e:	2300      	movs	r3, #0
 802ba20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802ba22:	2300      	movs	r3, #0
 802ba24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802ba26:	f107 031c 	add.w	r3, r7, #28
 802ba2a:	4619      	mov	r1, r3
 802ba2c:	4806      	ldr	r0, [pc, #24]	; (802ba48 <MX_GPIO_Init+0x184>)
 802ba2e:	f007 fe07 	bl	8033640 <HAL_GPIO_Init>

}
 802ba32:	bf00      	nop
 802ba34:	3730      	adds	r7, #48	; 0x30
 802ba36:	46bd      	mov	sp, r7
 802ba38:	bd80      	pop	{r7, pc}
 802ba3a:	bf00      	nop
 802ba3c:	40023800 	.word	0x40023800
 802ba40:	40021000 	.word	0x40021000
 802ba44:	40020400 	.word	0x40020400
 802ba48:	40020c00 	.word	0x40020c00
 802ba4c:	40020800 	.word	0x40020800
 802ba50:	40020000 	.word	0x40020000

0802ba54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802ba54:	b480      	push	{r7}
 802ba56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802ba58:	b672      	cpsid	i
}
 802ba5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 802ba5c:	e7fe      	b.n	802ba5c <Error_Handler+0x8>

0802ba5e <load_3>:
#include "fixedint.h"
#include "sc.h"

static uint64_t load_3(const unsigned char *in) {
 802ba5e:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 802ba62:	b085      	sub	sp, #20
 802ba64:	af00      	add	r7, sp, #0
 802ba66:	6078      	str	r0, [r7, #4]
    uint64_t result;

    result = (uint64_t) in[0];
 802ba68:	687b      	ldr	r3, [r7, #4]
 802ba6a:	781b      	ldrb	r3, [r3, #0]
 802ba6c:	b2da      	uxtb	r2, r3
 802ba6e:	f04f 0300 	mov.w	r3, #0
 802ba72:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result |= ((uint64_t) in[1]) << 8;
 802ba76:	687b      	ldr	r3, [r7, #4]
 802ba78:	3301      	adds	r3, #1
 802ba7a:	781b      	ldrb	r3, [r3, #0]
 802ba7c:	b2d8      	uxtb	r0, r3
 802ba7e:	f04f 0100 	mov.w	r1, #0
 802ba82:	f04f 0200 	mov.w	r2, #0
 802ba86:	f04f 0300 	mov.w	r3, #0
 802ba8a:	020b      	lsls	r3, r1, #8
 802ba8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 802ba90:	0202      	lsls	r2, r0, #8
 802ba92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802ba96:	ea40 0802 	orr.w	r8, r0, r2
 802ba9a:	ea41 0903 	orr.w	r9, r1, r3
 802ba9e:	e9c7 8902 	strd	r8, r9, [r7, #8]
    result |= ((uint64_t) in[2]) << 16;
 802baa2:	687b      	ldr	r3, [r7, #4]
 802baa4:	3302      	adds	r3, #2
 802baa6:	781b      	ldrb	r3, [r3, #0]
 802baa8:	b2d8      	uxtb	r0, r3
 802baaa:	f04f 0100 	mov.w	r1, #0
 802baae:	f04f 0200 	mov.w	r2, #0
 802bab2:	f04f 0300 	mov.w	r3, #0
 802bab6:	040b      	lsls	r3, r1, #16
 802bab8:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 802babc:	0402      	lsls	r2, r0, #16
 802babe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802bac2:	ea40 0402 	orr.w	r4, r0, r2
 802bac6:	ea41 0503 	orr.w	r5, r1, r3
 802baca:	e9c7 4502 	strd	r4, r5, [r7, #8]

    return result;
 802bace:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 802bad2:	4610      	mov	r0, r2
 802bad4:	4619      	mov	r1, r3
 802bad6:	3714      	adds	r7, #20
 802bad8:	46bd      	mov	sp, r7
 802bada:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 802bade:	4770      	bx	lr

0802bae0 <load_4>:

static uint64_t load_4(const unsigned char *in) {
 802bae0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802bae4:	b086      	sub	sp, #24
 802bae6:	af00      	add	r7, sp, #0
 802bae8:	60f8      	str	r0, [r7, #12]
    uint64_t result;

    result = (uint64_t) in[0];
 802baea:	68fb      	ldr	r3, [r7, #12]
 802baec:	781b      	ldrb	r3, [r3, #0]
 802baee:	b2da      	uxtb	r2, r3
 802baf0:	f04f 0300 	mov.w	r3, #0
 802baf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[1]) << 8;
 802baf8:	68fb      	ldr	r3, [r7, #12]
 802bafa:	3301      	adds	r3, #1
 802bafc:	781b      	ldrb	r3, [r3, #0]
 802bafe:	b2d8      	uxtb	r0, r3
 802bb00:	f04f 0100 	mov.w	r1, #0
 802bb04:	f04f 0200 	mov.w	r2, #0
 802bb08:	f04f 0300 	mov.w	r3, #0
 802bb0c:	020b      	lsls	r3, r1, #8
 802bb0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 802bb12:	0202      	lsls	r2, r0, #8
 802bb14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802bb18:	ea40 0602 	orr.w	r6, r0, r2
 802bb1c:	603e      	str	r6, [r7, #0]
 802bb1e:	430b      	orrs	r3, r1
 802bb20:	607b      	str	r3, [r7, #4]
 802bb22:	e9d7 2300 	ldrd	r2, r3, [r7]
 802bb26:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[2]) << 16;
 802bb2a:	68fb      	ldr	r3, [r7, #12]
 802bb2c:	3302      	adds	r3, #2
 802bb2e:	781b      	ldrb	r3, [r3, #0]
 802bb30:	b2d8      	uxtb	r0, r3
 802bb32:	f04f 0100 	mov.w	r1, #0
 802bb36:	f04f 0200 	mov.w	r2, #0
 802bb3a:	f04f 0300 	mov.w	r3, #0
 802bb3e:	040b      	lsls	r3, r1, #16
 802bb40:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 802bb44:	0402      	lsls	r2, r0, #16
 802bb46:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802bb4a:	ea40 0a02 	orr.w	sl, r0, r2
 802bb4e:	ea41 0b03 	orr.w	fp, r1, r3
 802bb52:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    result |= ((uint64_t) in[3]) << 24;
 802bb56:	68fb      	ldr	r3, [r7, #12]
 802bb58:	3303      	adds	r3, #3
 802bb5a:	781b      	ldrb	r3, [r3, #0]
 802bb5c:	b2da      	uxtb	r2, r3
 802bb5e:	f04f 0300 	mov.w	r3, #0
 802bb62:	0a15      	lsrs	r5, r2, #8
 802bb64:	0614      	lsls	r4, r2, #24
 802bb66:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802bb6a:	ea42 0804 	orr.w	r8, r2, r4
 802bb6e:	ea43 0905 	orr.w	r9, r3, r5
 802bb72:	e9c7 8904 	strd	r8, r9, [r7, #16]
    
    return result;
 802bb76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 802bb7a:	4610      	mov	r0, r2
 802bb7c:	4619      	mov	r1, r3
 802bb7e:	3718      	adds	r7, #24
 802bb80:	46bd      	mov	sp, r7
 802bb82:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802bb86:	4770      	bx	lr

0802bb88 <sc_reduce>:
  s[0]+256*s[1]+...+256^31*s[31] = s mod l
  where l = 2^252 + 27742317777372353535851937790883648493.
  Overwrites s in place.
*/

void sc_reduce(unsigned char *s) {
 802bb88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802bb8c:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 802bb90:	af00      	add	r7, sp, #0
 802bb92:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bb96:	6018      	str	r0, [r3, #0]
    int64_t s0 = 2097151 & load_3(s);
 802bb98:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bb9c:	6818      	ldr	r0, [r3, #0]
 802bb9e:	f7ff ff5e 	bl	802ba5e <load_3>
 802bba2:	4602      	mov	r2, r0
 802bba4:	460b      	mov	r3, r1
 802bba6:	4610      	mov	r0, r2
 802bba8:	4619      	mov	r1, r3
 802bbaa:	4af0      	ldr	r2, [pc, #960]	; (802bf6c <sc_reduce+0x3e4>)
 802bbac:	f04f 0300 	mov.w	r3, #0
 802bbb0:	ea00 0402 	and.w	r4, r0, r2
 802bbb4:	ea01 0503 	and.w	r5, r1, r3
 802bbb8:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802bbbc:	e9c3 4500 	strd	r4, r5, [r3]
    int64_t s1 = 2097151 & (load_4(s + 2) >> 5);
 802bbc0:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bbc4:	681b      	ldr	r3, [r3, #0]
 802bbc6:	3302      	adds	r3, #2
 802bbc8:	4618      	mov	r0, r3
 802bbca:	f7ff ff89 	bl	802bae0 <load_4>
 802bbce:	4602      	mov	r2, r0
 802bbd0:	460b      	mov	r3, r1
 802bbd2:	f04f 0000 	mov.w	r0, #0
 802bbd6:	f04f 0100 	mov.w	r1, #0
 802bbda:	0950      	lsrs	r0, r2, #5
 802bbdc:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 802bbe0:	0959      	lsrs	r1, r3, #5
 802bbe2:	4ae2      	ldr	r2, [pc, #904]	; (802bf6c <sc_reduce+0x3e4>)
 802bbe4:	f04f 0300 	mov.w	r3, #0
 802bbe8:	ea00 0802 	and.w	r8, r0, r2
 802bbec:	ea01 0903 	and.w	r9, r1, r3
 802bbf0:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802bbf4:	e9c3 8900 	strd	r8, r9, [r3]
    int64_t s2 = 2097151 & (load_3(s + 5) >> 2);
 802bbf8:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bbfc:	681b      	ldr	r3, [r3, #0]
 802bbfe:	3305      	adds	r3, #5
 802bc00:	4618      	mov	r0, r3
 802bc02:	f7ff ff2c 	bl	802ba5e <load_3>
 802bc06:	4602      	mov	r2, r0
 802bc08:	460b      	mov	r3, r1
 802bc0a:	f04f 0000 	mov.w	r0, #0
 802bc0e:	f04f 0100 	mov.w	r1, #0
 802bc12:	0890      	lsrs	r0, r2, #2
 802bc14:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 802bc18:	0899      	lsrs	r1, r3, #2
 802bc1a:	4ad4      	ldr	r2, [pc, #848]	; (802bf6c <sc_reduce+0x3e4>)
 802bc1c:	f04f 0300 	mov.w	r3, #0
 802bc20:	ea00 0a02 	and.w	sl, r0, r2
 802bc24:	ea01 0b03 	and.w	fp, r1, r3
 802bc28:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802bc2c:	e9c3 ab00 	strd	sl, fp, [r3]
    int64_t s3 = 2097151 & (load_4(s + 7) >> 7);
 802bc30:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bc34:	681b      	ldr	r3, [r3, #0]
 802bc36:	3307      	adds	r3, #7
 802bc38:	4618      	mov	r0, r3
 802bc3a:	f7ff ff51 	bl	802bae0 <load_4>
 802bc3e:	4602      	mov	r2, r0
 802bc40:	460b      	mov	r3, r1
 802bc42:	f04f 0000 	mov.w	r0, #0
 802bc46:	f04f 0100 	mov.w	r1, #0
 802bc4a:	09d0      	lsrs	r0, r2, #7
 802bc4c:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 802bc50:	09d9      	lsrs	r1, r3, #7
 802bc52:	4ac6      	ldr	r2, [pc, #792]	; (802bf6c <sc_reduce+0x3e4>)
 802bc54:	f04f 0300 	mov.w	r3, #0
 802bc58:	ea00 0402 	and.w	r4, r0, r2
 802bc5c:	f8c7 4620 	str.w	r4, [r7, #1568]	; 0x620
 802bc60:	400b      	ands	r3, r1
 802bc62:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 802bc66:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 802bc6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bc6e:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802bc72:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s4 = 2097151 & (load_4(s + 10) >> 4);
 802bc76:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bc7a:	681b      	ldr	r3, [r3, #0]
 802bc7c:	330a      	adds	r3, #10
 802bc7e:	4618      	mov	r0, r3
 802bc80:	f7ff ff2e 	bl	802bae0 <load_4>
 802bc84:	4602      	mov	r2, r0
 802bc86:	460b      	mov	r3, r1
 802bc88:	f04f 0000 	mov.w	r0, #0
 802bc8c:	f04f 0100 	mov.w	r1, #0
 802bc90:	0910      	lsrs	r0, r2, #4
 802bc92:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 802bc96:	0919      	lsrs	r1, r3, #4
 802bc98:	4ab4      	ldr	r2, [pc, #720]	; (802bf6c <sc_reduce+0x3e4>)
 802bc9a:	f04f 0300 	mov.w	r3, #0
 802bc9e:	ea00 0402 	and.w	r4, r0, r2
 802bca2:	f8c7 4618 	str.w	r4, [r7, #1560]	; 0x618
 802bca6:	400b      	ands	r3, r1
 802bca8:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 802bcac:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 802bcb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bcb4:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802bcb8:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s5 = 2097151 & (load_3(s + 13) >> 1);
 802bcbc:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bcc0:	681b      	ldr	r3, [r3, #0]
 802bcc2:	330d      	adds	r3, #13
 802bcc4:	4618      	mov	r0, r3
 802bcc6:	f7ff feca 	bl	802ba5e <load_3>
 802bcca:	4602      	mov	r2, r0
 802bccc:	460b      	mov	r3, r1
 802bcce:	f04f 0000 	mov.w	r0, #0
 802bcd2:	f04f 0100 	mov.w	r1, #0
 802bcd6:	0850      	lsrs	r0, r2, #1
 802bcd8:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 802bcdc:	0859      	lsrs	r1, r3, #1
 802bcde:	4aa3      	ldr	r2, [pc, #652]	; (802bf6c <sc_reduce+0x3e4>)
 802bce0:	f04f 0300 	mov.w	r3, #0
 802bce4:	ea00 0402 	and.w	r4, r0, r2
 802bce8:	f8c7 4610 	str.w	r4, [r7, #1552]	; 0x610
 802bcec:	400b      	ands	r3, r1
 802bcee:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 802bcf2:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 802bcf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bcfa:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802bcfe:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s6 = 2097151 & (load_4(s + 15) >> 6);
 802bd02:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bd06:	681b      	ldr	r3, [r3, #0]
 802bd08:	330f      	adds	r3, #15
 802bd0a:	4618      	mov	r0, r3
 802bd0c:	f7ff fee8 	bl	802bae0 <load_4>
 802bd10:	4602      	mov	r2, r0
 802bd12:	460b      	mov	r3, r1
 802bd14:	f04f 0000 	mov.w	r0, #0
 802bd18:	f04f 0100 	mov.w	r1, #0
 802bd1c:	0990      	lsrs	r0, r2, #6
 802bd1e:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 802bd22:	0999      	lsrs	r1, r3, #6
 802bd24:	4a91      	ldr	r2, [pc, #580]	; (802bf6c <sc_reduce+0x3e4>)
 802bd26:	f04f 0300 	mov.w	r3, #0
 802bd2a:	ea00 0402 	and.w	r4, r0, r2
 802bd2e:	f8c7 4608 	str.w	r4, [r7, #1544]	; 0x608
 802bd32:	400b      	ands	r3, r1
 802bd34:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 802bd38:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 802bd3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bd40:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802bd44:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s7 = 2097151 & (load_3(s + 18) >> 3);
 802bd48:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bd4c:	681b      	ldr	r3, [r3, #0]
 802bd4e:	3312      	adds	r3, #18
 802bd50:	4618      	mov	r0, r3
 802bd52:	f7ff fe84 	bl	802ba5e <load_3>
 802bd56:	4602      	mov	r2, r0
 802bd58:	460b      	mov	r3, r1
 802bd5a:	f04f 0000 	mov.w	r0, #0
 802bd5e:	f04f 0100 	mov.w	r1, #0
 802bd62:	08d0      	lsrs	r0, r2, #3
 802bd64:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 802bd68:	08d9      	lsrs	r1, r3, #3
 802bd6a:	4a80      	ldr	r2, [pc, #512]	; (802bf6c <sc_reduce+0x3e4>)
 802bd6c:	f04f 0300 	mov.w	r3, #0
 802bd70:	ea00 0402 	and.w	r4, r0, r2
 802bd74:	f8c7 4600 	str.w	r4, [r7, #1536]	; 0x600
 802bd78:	400b      	ands	r3, r1
 802bd7a:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 802bd7e:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 802bd82:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bd86:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802bd8a:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s8 = 2097151 & load_3(s + 21);
 802bd8e:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bd92:	681b      	ldr	r3, [r3, #0]
 802bd94:	3315      	adds	r3, #21
 802bd96:	4618      	mov	r0, r3
 802bd98:	f7ff fe61 	bl	802ba5e <load_3>
 802bd9c:	4602      	mov	r2, r0
 802bd9e:	460b      	mov	r3, r1
 802bda0:	4610      	mov	r0, r2
 802bda2:	4619      	mov	r1, r3
 802bda4:	4a71      	ldr	r2, [pc, #452]	; (802bf6c <sc_reduce+0x3e4>)
 802bda6:	f04f 0300 	mov.w	r3, #0
 802bdaa:	ea00 0402 	and.w	r4, r0, r2
 802bdae:	f8c7 45f8 	str.w	r4, [r7, #1528]	; 0x5f8
 802bdb2:	400b      	ands	r3, r1
 802bdb4:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 802bdb8:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 802bdbc:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bdc0:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802bdc4:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s9 = 2097151 & (load_4(s + 23) >> 5);
 802bdc8:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bdcc:	681b      	ldr	r3, [r3, #0]
 802bdce:	3317      	adds	r3, #23
 802bdd0:	4618      	mov	r0, r3
 802bdd2:	f7ff fe85 	bl	802bae0 <load_4>
 802bdd6:	4602      	mov	r2, r0
 802bdd8:	460b      	mov	r3, r1
 802bdda:	f04f 0000 	mov.w	r0, #0
 802bdde:	f04f 0100 	mov.w	r1, #0
 802bde2:	0950      	lsrs	r0, r2, #5
 802bde4:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 802bde8:	0959      	lsrs	r1, r3, #5
 802bdea:	4a60      	ldr	r2, [pc, #384]	; (802bf6c <sc_reduce+0x3e4>)
 802bdec:	f04f 0300 	mov.w	r3, #0
 802bdf0:	ea00 0402 	and.w	r4, r0, r2
 802bdf4:	f8c7 45f0 	str.w	r4, [r7, #1520]	; 0x5f0
 802bdf8:	400b      	ands	r3, r1
 802bdfa:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 802bdfe:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 802be02:	e9d3 3400 	ldrd	r3, r4, [r3]
 802be06:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802be0a:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s10 = 2097151 & (load_3(s + 26) >> 2);
 802be0e:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802be12:	681b      	ldr	r3, [r3, #0]
 802be14:	331a      	adds	r3, #26
 802be16:	4618      	mov	r0, r3
 802be18:	f7ff fe21 	bl	802ba5e <load_3>
 802be1c:	4602      	mov	r2, r0
 802be1e:	460b      	mov	r3, r1
 802be20:	f04f 0000 	mov.w	r0, #0
 802be24:	f04f 0100 	mov.w	r1, #0
 802be28:	0890      	lsrs	r0, r2, #2
 802be2a:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 802be2e:	0899      	lsrs	r1, r3, #2
 802be30:	4a4e      	ldr	r2, [pc, #312]	; (802bf6c <sc_reduce+0x3e4>)
 802be32:	f04f 0300 	mov.w	r3, #0
 802be36:	ea00 0402 	and.w	r4, r0, r2
 802be3a:	f8c7 45e8 	str.w	r4, [r7, #1512]	; 0x5e8
 802be3e:	400b      	ands	r3, r1
 802be40:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 802be44:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 802be48:	e9d3 3400 	ldrd	r3, r4, [r3]
 802be4c:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802be50:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s11 = 2097151 & (load_4(s + 28) >> 7);
 802be54:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802be58:	681b      	ldr	r3, [r3, #0]
 802be5a:	331c      	adds	r3, #28
 802be5c:	4618      	mov	r0, r3
 802be5e:	f7ff fe3f 	bl	802bae0 <load_4>
 802be62:	4602      	mov	r2, r0
 802be64:	460b      	mov	r3, r1
 802be66:	f04f 0000 	mov.w	r0, #0
 802be6a:	f04f 0100 	mov.w	r1, #0
 802be6e:	09d0      	lsrs	r0, r2, #7
 802be70:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 802be74:	09d9      	lsrs	r1, r3, #7
 802be76:	4a3d      	ldr	r2, [pc, #244]	; (802bf6c <sc_reduce+0x3e4>)
 802be78:	f04f 0300 	mov.w	r3, #0
 802be7c:	ea00 0402 	and.w	r4, r0, r2
 802be80:	f8c7 45e0 	str.w	r4, [r7, #1504]	; 0x5e0
 802be84:	400b      	ands	r3, r1
 802be86:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 802be8a:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 802be8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 802be92:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802be96:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s12 = 2097151 & (load_4(s + 31) >> 4);
 802be9a:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802be9e:	681b      	ldr	r3, [r3, #0]
 802bea0:	331f      	adds	r3, #31
 802bea2:	4618      	mov	r0, r3
 802bea4:	f7ff fe1c 	bl	802bae0 <load_4>
 802bea8:	4602      	mov	r2, r0
 802beaa:	460b      	mov	r3, r1
 802beac:	f04f 0000 	mov.w	r0, #0
 802beb0:	f04f 0100 	mov.w	r1, #0
 802beb4:	0910      	lsrs	r0, r2, #4
 802beb6:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 802beba:	0919      	lsrs	r1, r3, #4
 802bebc:	4a2b      	ldr	r2, [pc, #172]	; (802bf6c <sc_reduce+0x3e4>)
 802bebe:	f04f 0300 	mov.w	r3, #0
 802bec2:	ea00 0402 	and.w	r4, r0, r2
 802bec6:	f8c7 45d8 	str.w	r4, [r7, #1496]	; 0x5d8
 802beca:	400b      	ands	r3, r1
 802becc:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 802bed0:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 802bed4:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bed8:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802bedc:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s13 = 2097151 & (load_3(s + 34) >> 1);
 802bee0:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bee4:	681b      	ldr	r3, [r3, #0]
 802bee6:	3322      	adds	r3, #34	; 0x22
 802bee8:	4618      	mov	r0, r3
 802beea:	f7ff fdb8 	bl	802ba5e <load_3>
 802beee:	4602      	mov	r2, r0
 802bef0:	460b      	mov	r3, r1
 802bef2:	f04f 0000 	mov.w	r0, #0
 802bef6:	f04f 0100 	mov.w	r1, #0
 802befa:	0850      	lsrs	r0, r2, #1
 802befc:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 802bf00:	0859      	lsrs	r1, r3, #1
 802bf02:	4a1a      	ldr	r2, [pc, #104]	; (802bf6c <sc_reduce+0x3e4>)
 802bf04:	f04f 0300 	mov.w	r3, #0
 802bf08:	ea00 0402 	and.w	r4, r0, r2
 802bf0c:	f8c7 45d0 	str.w	r4, [r7, #1488]	; 0x5d0
 802bf10:	400b      	ands	r3, r1
 802bf12:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 802bf16:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 802bf1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bf1e:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 802bf22:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s14 = 2097151 & (load_4(s + 36) >> 6);
 802bf26:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bf2a:	681b      	ldr	r3, [r3, #0]
 802bf2c:	3324      	adds	r3, #36	; 0x24
 802bf2e:	4618      	mov	r0, r3
 802bf30:	f7ff fdd6 	bl	802bae0 <load_4>
 802bf34:	4602      	mov	r2, r0
 802bf36:	460b      	mov	r3, r1
 802bf38:	f04f 0000 	mov.w	r0, #0
 802bf3c:	f04f 0100 	mov.w	r1, #0
 802bf40:	0990      	lsrs	r0, r2, #6
 802bf42:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 802bf46:	0999      	lsrs	r1, r3, #6
 802bf48:	4a08      	ldr	r2, [pc, #32]	; (802bf6c <sc_reduce+0x3e4>)
 802bf4a:	f04f 0300 	mov.w	r3, #0
 802bf4e:	ea00 0402 	and.w	r4, r0, r2
 802bf52:	f8c7 45c8 	str.w	r4, [r7, #1480]	; 0x5c8
 802bf56:	400b      	ands	r3, r1
 802bf58:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 802bf5c:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 802bf60:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bf64:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 802bf68:	e002      	b.n	802bf70 <sc_reduce+0x3e8>
 802bf6a:	bf00      	nop
 802bf6c:	001fffff 	.word	0x001fffff
 802bf70:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s15 = 2097151 & (load_3(s + 39) >> 3);
 802bf74:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bf78:	681b      	ldr	r3, [r3, #0]
 802bf7a:	3327      	adds	r3, #39	; 0x27
 802bf7c:	4618      	mov	r0, r3
 802bf7e:	f7ff fd6e 	bl	802ba5e <load_3>
 802bf82:	4602      	mov	r2, r0
 802bf84:	460b      	mov	r3, r1
 802bf86:	f04f 0000 	mov.w	r0, #0
 802bf8a:	f04f 0100 	mov.w	r1, #0
 802bf8e:	08d0      	lsrs	r0, r2, #3
 802bf90:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 802bf94:	08d9      	lsrs	r1, r3, #3
 802bf96:	4aec      	ldr	r2, [pc, #944]	; (802c348 <sc_reduce+0x7c0>)
 802bf98:	f04f 0300 	mov.w	r3, #0
 802bf9c:	ea00 0402 	and.w	r4, r0, r2
 802bfa0:	f8c7 45c0 	str.w	r4, [r7, #1472]	; 0x5c0
 802bfa4:	400b      	ands	r3, r1
 802bfa6:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 802bfaa:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 802bfae:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bfb2:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 802bfb6:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s16 = 2097151 & load_3(s + 42);
 802bfba:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bfbe:	681b      	ldr	r3, [r3, #0]
 802bfc0:	332a      	adds	r3, #42	; 0x2a
 802bfc2:	4618      	mov	r0, r3
 802bfc4:	f7ff fd4b 	bl	802ba5e <load_3>
 802bfc8:	4602      	mov	r2, r0
 802bfca:	460b      	mov	r3, r1
 802bfcc:	4610      	mov	r0, r2
 802bfce:	4619      	mov	r1, r3
 802bfd0:	4add      	ldr	r2, [pc, #884]	; (802c348 <sc_reduce+0x7c0>)
 802bfd2:	f04f 0300 	mov.w	r3, #0
 802bfd6:	ea00 0402 	and.w	r4, r0, r2
 802bfda:	f8c7 45b8 	str.w	r4, [r7, #1464]	; 0x5b8
 802bfde:	400b      	ands	r3, r1
 802bfe0:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 802bfe4:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 802bfe8:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bfec:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 802bff0:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s17 = 2097151 & (load_4(s + 44) >> 5);
 802bff4:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802bff8:	681b      	ldr	r3, [r3, #0]
 802bffa:	332c      	adds	r3, #44	; 0x2c
 802bffc:	4618      	mov	r0, r3
 802bffe:	f7ff fd6f 	bl	802bae0 <load_4>
 802c002:	4602      	mov	r2, r0
 802c004:	460b      	mov	r3, r1
 802c006:	f04f 0000 	mov.w	r0, #0
 802c00a:	f04f 0100 	mov.w	r1, #0
 802c00e:	0950      	lsrs	r0, r2, #5
 802c010:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 802c014:	0959      	lsrs	r1, r3, #5
 802c016:	4acc      	ldr	r2, [pc, #816]	; (802c348 <sc_reduce+0x7c0>)
 802c018:	f04f 0300 	mov.w	r3, #0
 802c01c:	ea00 0402 	and.w	r4, r0, r2
 802c020:	f8c7 45b0 	str.w	r4, [r7, #1456]	; 0x5b0
 802c024:	400b      	ands	r3, r1
 802c026:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 802c02a:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 802c02e:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c032:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 802c036:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s18 = 2097151 & (load_3(s + 47) >> 2);
 802c03a:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802c03e:	681b      	ldr	r3, [r3, #0]
 802c040:	332f      	adds	r3, #47	; 0x2f
 802c042:	4618      	mov	r0, r3
 802c044:	f7ff fd0b 	bl	802ba5e <load_3>
 802c048:	4602      	mov	r2, r0
 802c04a:	460b      	mov	r3, r1
 802c04c:	f04f 0000 	mov.w	r0, #0
 802c050:	f04f 0100 	mov.w	r1, #0
 802c054:	0890      	lsrs	r0, r2, #2
 802c056:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 802c05a:	0899      	lsrs	r1, r3, #2
 802c05c:	4aba      	ldr	r2, [pc, #744]	; (802c348 <sc_reduce+0x7c0>)
 802c05e:	f04f 0300 	mov.w	r3, #0
 802c062:	ea00 0402 	and.w	r4, r0, r2
 802c066:	f8c7 45a8 	str.w	r4, [r7, #1448]	; 0x5a8
 802c06a:	400b      	ands	r3, r1
 802c06c:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 802c070:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 802c074:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c078:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 802c07c:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s19 = 2097151 & (load_4(s + 49) >> 7);
 802c080:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802c084:	681b      	ldr	r3, [r3, #0]
 802c086:	3331      	adds	r3, #49	; 0x31
 802c088:	4618      	mov	r0, r3
 802c08a:	f7ff fd29 	bl	802bae0 <load_4>
 802c08e:	4602      	mov	r2, r0
 802c090:	460b      	mov	r3, r1
 802c092:	f04f 0000 	mov.w	r0, #0
 802c096:	f04f 0100 	mov.w	r1, #0
 802c09a:	09d0      	lsrs	r0, r2, #7
 802c09c:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 802c0a0:	09d9      	lsrs	r1, r3, #7
 802c0a2:	4aa9      	ldr	r2, [pc, #676]	; (802c348 <sc_reduce+0x7c0>)
 802c0a4:	f04f 0300 	mov.w	r3, #0
 802c0a8:	ea00 0402 	and.w	r4, r0, r2
 802c0ac:	f8c7 45a0 	str.w	r4, [r7, #1440]	; 0x5a0
 802c0b0:	400b      	ands	r3, r1
 802c0b2:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 802c0b6:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 802c0ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c0be:	f507 62f2 	add.w	r2, r7, #1936	; 0x790
 802c0c2:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s20 = 2097151 & (load_4(s + 52) >> 4);
 802c0c6:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802c0ca:	681b      	ldr	r3, [r3, #0]
 802c0cc:	3334      	adds	r3, #52	; 0x34
 802c0ce:	4618      	mov	r0, r3
 802c0d0:	f7ff fd06 	bl	802bae0 <load_4>
 802c0d4:	4602      	mov	r2, r0
 802c0d6:	460b      	mov	r3, r1
 802c0d8:	f04f 0000 	mov.w	r0, #0
 802c0dc:	f04f 0100 	mov.w	r1, #0
 802c0e0:	0910      	lsrs	r0, r2, #4
 802c0e2:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 802c0e6:	0919      	lsrs	r1, r3, #4
 802c0e8:	4a97      	ldr	r2, [pc, #604]	; (802c348 <sc_reduce+0x7c0>)
 802c0ea:	f04f 0300 	mov.w	r3, #0
 802c0ee:	ea00 0402 	and.w	r4, r0, r2
 802c0f2:	f8c7 4598 	str.w	r4, [r7, #1432]	; 0x598
 802c0f6:	400b      	ands	r3, r1
 802c0f8:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 802c0fc:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 802c100:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c104:	f507 62f1 	add.w	r2, r7, #1928	; 0x788
 802c108:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s21 = 2097151 & (load_3(s + 55) >> 1);
 802c10c:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802c110:	681b      	ldr	r3, [r3, #0]
 802c112:	3337      	adds	r3, #55	; 0x37
 802c114:	4618      	mov	r0, r3
 802c116:	f7ff fca2 	bl	802ba5e <load_3>
 802c11a:	4602      	mov	r2, r0
 802c11c:	460b      	mov	r3, r1
 802c11e:	f04f 0000 	mov.w	r0, #0
 802c122:	f04f 0100 	mov.w	r1, #0
 802c126:	0850      	lsrs	r0, r2, #1
 802c128:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 802c12c:	0859      	lsrs	r1, r3, #1
 802c12e:	4a86      	ldr	r2, [pc, #536]	; (802c348 <sc_reduce+0x7c0>)
 802c130:	f04f 0300 	mov.w	r3, #0
 802c134:	ea00 0402 	and.w	r4, r0, r2
 802c138:	f8c7 4590 	str.w	r4, [r7, #1424]	; 0x590
 802c13c:	400b      	ands	r3, r1
 802c13e:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 802c142:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 802c146:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c14a:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 802c14e:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s22 = 2097151 & (load_4(s + 57) >> 6);
 802c152:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802c156:	681b      	ldr	r3, [r3, #0]
 802c158:	3339      	adds	r3, #57	; 0x39
 802c15a:	4618      	mov	r0, r3
 802c15c:	f7ff fcc0 	bl	802bae0 <load_4>
 802c160:	4602      	mov	r2, r0
 802c162:	460b      	mov	r3, r1
 802c164:	f04f 0000 	mov.w	r0, #0
 802c168:	f04f 0100 	mov.w	r1, #0
 802c16c:	0990      	lsrs	r0, r2, #6
 802c16e:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 802c172:	0999      	lsrs	r1, r3, #6
 802c174:	4a74      	ldr	r2, [pc, #464]	; (802c348 <sc_reduce+0x7c0>)
 802c176:	f04f 0300 	mov.w	r3, #0
 802c17a:	ea00 0402 	and.w	r4, r0, r2
 802c17e:	f8c7 4588 	str.w	r4, [r7, #1416]	; 0x588
 802c182:	400b      	ands	r3, r1
 802c184:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 802c188:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 802c18c:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c190:	f507 62ef 	add.w	r2, r7, #1912	; 0x778
 802c194:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s23 = (load_4(s + 60) >> 3);
 802c198:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802c19c:	681b      	ldr	r3, [r3, #0]
 802c19e:	333c      	adds	r3, #60	; 0x3c
 802c1a0:	4618      	mov	r0, r3
 802c1a2:	f7ff fc9d 	bl	802bae0 <load_4>
 802c1a6:	4602      	mov	r2, r0
 802c1a8:	460b      	mov	r3, r1
 802c1aa:	f04f 0000 	mov.w	r0, #0
 802c1ae:	f04f 0100 	mov.w	r1, #0
 802c1b2:	08d0      	lsrs	r0, r2, #3
 802c1b4:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 802c1b8:	08d9      	lsrs	r1, r3, #3
 802c1ba:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 802c1be:	e9c3 0100 	strd	r0, r1, [r3]
    int64_t carry13;
    int64_t carry14;
    int64_t carry15;
    int64_t carry16;

    s11 += s23 * 666643;
 802c1c2:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 802c1c6:	4b61      	ldr	r3, [pc, #388]	; (802c34c <sc_reduce+0x7c4>)
 802c1c8:	fb03 f102 	mul.w	r1, r3, r2
 802c1cc:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802c1d0:	2300      	movs	r3, #0
 802c1d2:	fb03 f302 	mul.w	r3, r3, r2
 802c1d6:	18cc      	adds	r4, r1, r3
 802c1d8:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802c1dc:	4b5b      	ldr	r3, [pc, #364]	; (802c34c <sc_reduce+0x7c4>)
 802c1de:	fba2 0103 	umull	r0, r1, r2, r3
 802c1e2:	1863      	adds	r3, r4, r1
 802c1e4:	4619      	mov	r1, r3
 802c1e6:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802c1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c1ee:	1814      	adds	r4, r2, r0
 802c1f0:	f8c7 4580 	str.w	r4, [r7, #1408]	; 0x580
 802c1f4:	414b      	adcs	r3, r1
 802c1f6:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 802c1fa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 802c1fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c202:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802c206:	e9c2 3400 	strd	r3, r4, [r2]
    s12 += s23 * 470296;
 802c20a:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 802c20e:	4b50      	ldr	r3, [pc, #320]	; (802c350 <sc_reduce+0x7c8>)
 802c210:	fb03 f102 	mul.w	r1, r3, r2
 802c214:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802c218:	2300      	movs	r3, #0
 802c21a:	fb03 f302 	mul.w	r3, r3, r2
 802c21e:	18cc      	adds	r4, r1, r3
 802c220:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802c224:	4b4a      	ldr	r3, [pc, #296]	; (802c350 <sc_reduce+0x7c8>)
 802c226:	fba2 0103 	umull	r0, r1, r2, r3
 802c22a:	1863      	adds	r3, r4, r1
 802c22c:	4619      	mov	r1, r3
 802c22e:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c236:	1814      	adds	r4, r2, r0
 802c238:	f8c7 4578 	str.w	r4, [r7, #1400]	; 0x578
 802c23c:	414b      	adcs	r3, r1
 802c23e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 802c242:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 802c246:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c24a:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802c24e:	e9c2 3400 	strd	r3, r4, [r2]
    s13 += s23 * 654183;
 802c252:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 802c256:	4b3f      	ldr	r3, [pc, #252]	; (802c354 <sc_reduce+0x7cc>)
 802c258:	fb03 f102 	mul.w	r1, r3, r2
 802c25c:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802c260:	2300      	movs	r3, #0
 802c262:	fb03 f302 	mul.w	r3, r3, r2
 802c266:	18cc      	adds	r4, r1, r3
 802c268:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802c26c:	4b39      	ldr	r3, [pc, #228]	; (802c354 <sc_reduce+0x7cc>)
 802c26e:	fba2 0103 	umull	r0, r1, r2, r3
 802c272:	1863      	adds	r3, r4, r1
 802c274:	4619      	mov	r1, r3
 802c276:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 802c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c27e:	1814      	adds	r4, r2, r0
 802c280:	f8c7 4570 	str.w	r4, [r7, #1392]	; 0x570
 802c284:	414b      	adcs	r3, r1
 802c286:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 802c28a:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 802c28e:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c292:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 802c296:	e9c2 3400 	strd	r3, r4, [r2]
    s14 -= s23 * 997805;
 802c29a:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 802c29e:	4b2e      	ldr	r3, [pc, #184]	; (802c358 <sc_reduce+0x7d0>)
 802c2a0:	fb03 f102 	mul.w	r1, r3, r2
 802c2a4:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802c2a8:	f04f 33ff 	mov.w	r3, #4294967295
 802c2ac:	fb03 f302 	mul.w	r3, r3, r2
 802c2b0:	18cc      	adds	r4, r1, r3
 802c2b2:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802c2b6:	4b28      	ldr	r3, [pc, #160]	; (802c358 <sc_reduce+0x7d0>)
 802c2b8:	fba2 0103 	umull	r0, r1, r2, r3
 802c2bc:	1863      	adds	r3, r4, r1
 802c2be:	4619      	mov	r1, r3
 802c2c0:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 802c2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c2c8:	1814      	adds	r4, r2, r0
 802c2ca:	f8c7 4568 	str.w	r4, [r7, #1384]	; 0x568
 802c2ce:	414b      	adcs	r3, r1
 802c2d0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 802c2d4:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 802c2d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c2dc:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 802c2e0:	e9c2 3400 	strd	r3, r4, [r2]
    s15 += s23 * 136657;
 802c2e4:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 802c2e8:	4b1c      	ldr	r3, [pc, #112]	; (802c35c <sc_reduce+0x7d4>)
 802c2ea:	fb03 f102 	mul.w	r1, r3, r2
 802c2ee:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802c2f2:	2300      	movs	r3, #0
 802c2f4:	fb03 f302 	mul.w	r3, r3, r2
 802c2f8:	18cc      	adds	r4, r1, r3
 802c2fa:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802c2fe:	4b17      	ldr	r3, [pc, #92]	; (802c35c <sc_reduce+0x7d4>)
 802c300:	fba2 0103 	umull	r0, r1, r2, r3
 802c304:	1863      	adds	r3, r4, r1
 802c306:	4619      	mov	r1, r3
 802c308:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 802c30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c310:	1814      	adds	r4, r2, r0
 802c312:	f8c7 4560 	str.w	r4, [r7, #1376]	; 0x560
 802c316:	414b      	adcs	r3, r1
 802c318:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 802c31c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 802c320:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c324:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 802c328:	e9c2 3400 	strd	r3, r4, [r2]
    s16 -= s23 * 683901;
 802c32c:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 802c330:	4b0b      	ldr	r3, [pc, #44]	; (802c360 <sc_reduce+0x7d8>)
 802c332:	fb03 f102 	mul.w	r1, r3, r2
 802c336:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802c33a:	f04f 33ff 	mov.w	r3, #4294967295
 802c33e:	fb03 f302 	mul.w	r3, r3, r2
 802c342:	18cc      	adds	r4, r1, r3
 802c344:	e00e      	b.n	802c364 <sc_reduce+0x7dc>
 802c346:	bf00      	nop
 802c348:	001fffff 	.word	0x001fffff
 802c34c:	000a2c13 	.word	0x000a2c13
 802c350:	00072d18 	.word	0x00072d18
 802c354:	0009fb67 	.word	0x0009fb67
 802c358:	fff0c653 	.word	0xfff0c653
 802c35c:	000215d1 	.word	0x000215d1
 802c360:	fff59083 	.word	0xfff59083
 802c364:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802c368:	4be5      	ldr	r3, [pc, #916]	; (802c700 <sc_reduce+0xb78>)
 802c36a:	fba2 0103 	umull	r0, r1, r2, r3
 802c36e:	1863      	adds	r3, r4, r1
 802c370:	4619      	mov	r1, r3
 802c372:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 802c376:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c37a:	1814      	adds	r4, r2, r0
 802c37c:	f8c7 4558 	str.w	r4, [r7, #1368]	; 0x558
 802c380:	414b      	adcs	r3, r1
 802c382:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 802c386:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 802c38a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c38e:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 802c392:	e9c2 3400 	strd	r3, r4, [r2]
    s23 = 0;
 802c396:	f04f 0200 	mov.w	r2, #0
 802c39a:	f04f 0300 	mov.w	r3, #0
 802c39e:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 802c3a2:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += s22 * 666643;
 802c3a6:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 802c3aa:	4bd6      	ldr	r3, [pc, #856]	; (802c704 <sc_reduce+0xb7c>)
 802c3ac:	fb03 f102 	mul.w	r1, r3, r2
 802c3b0:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802c3b4:	2300      	movs	r3, #0
 802c3b6:	fb03 f302 	mul.w	r3, r3, r2
 802c3ba:	18cc      	adds	r4, r1, r3
 802c3bc:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802c3c0:	4bd0      	ldr	r3, [pc, #832]	; (802c704 <sc_reduce+0xb7c>)
 802c3c2:	fba2 0103 	umull	r0, r1, r2, r3
 802c3c6:	1863      	adds	r3, r4, r1
 802c3c8:	4619      	mov	r1, r3
 802c3ca:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c3d2:	1814      	adds	r4, r2, r0
 802c3d4:	f8c7 4550 	str.w	r4, [r7, #1360]	; 0x550
 802c3d8:	414b      	adcs	r3, r1
 802c3da:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 802c3de:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 802c3e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c3e6:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802c3ea:	e9c2 3400 	strd	r3, r4, [r2]
    s11 += s22 * 470296;
 802c3ee:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 802c3f2:	4bc5      	ldr	r3, [pc, #788]	; (802c708 <sc_reduce+0xb80>)
 802c3f4:	fb03 f102 	mul.w	r1, r3, r2
 802c3f8:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802c3fc:	2300      	movs	r3, #0
 802c3fe:	fb03 f302 	mul.w	r3, r3, r2
 802c402:	18cc      	adds	r4, r1, r3
 802c404:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802c408:	4bbf      	ldr	r3, [pc, #764]	; (802c708 <sc_reduce+0xb80>)
 802c40a:	fba2 0103 	umull	r0, r1, r2, r3
 802c40e:	1863      	adds	r3, r4, r1
 802c410:	4619      	mov	r1, r3
 802c412:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802c416:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c41a:	1814      	adds	r4, r2, r0
 802c41c:	f8c7 4548 	str.w	r4, [r7, #1352]	; 0x548
 802c420:	414b      	adcs	r3, r1
 802c422:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 802c426:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 802c42a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c42e:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802c432:	e9c2 3400 	strd	r3, r4, [r2]
    s12 += s22 * 654183;
 802c436:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 802c43a:	4bb4      	ldr	r3, [pc, #720]	; (802c70c <sc_reduce+0xb84>)
 802c43c:	fb03 f102 	mul.w	r1, r3, r2
 802c440:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802c444:	2300      	movs	r3, #0
 802c446:	fb03 f302 	mul.w	r3, r3, r2
 802c44a:	18cc      	adds	r4, r1, r3
 802c44c:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802c450:	4bae      	ldr	r3, [pc, #696]	; (802c70c <sc_reduce+0xb84>)
 802c452:	fba2 0103 	umull	r0, r1, r2, r3
 802c456:	1863      	adds	r3, r4, r1
 802c458:	4619      	mov	r1, r3
 802c45a:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c462:	1814      	adds	r4, r2, r0
 802c464:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
 802c468:	414b      	adcs	r3, r1
 802c46a:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 802c46e:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 802c472:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c476:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802c47a:	e9c2 3400 	strd	r3, r4, [r2]
    s13 -= s22 * 997805;
 802c47e:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 802c482:	4ba3      	ldr	r3, [pc, #652]	; (802c710 <sc_reduce+0xb88>)
 802c484:	fb03 f102 	mul.w	r1, r3, r2
 802c488:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802c48c:	f04f 33ff 	mov.w	r3, #4294967295
 802c490:	fb03 f302 	mul.w	r3, r3, r2
 802c494:	18cc      	adds	r4, r1, r3
 802c496:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802c49a:	4b9d      	ldr	r3, [pc, #628]	; (802c710 <sc_reduce+0xb88>)
 802c49c:	fba2 0103 	umull	r0, r1, r2, r3
 802c4a0:	1863      	adds	r3, r4, r1
 802c4a2:	4619      	mov	r1, r3
 802c4a4:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 802c4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c4ac:	1814      	adds	r4, r2, r0
 802c4ae:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
 802c4b2:	414b      	adcs	r3, r1
 802c4b4:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 802c4b8:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 802c4bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c4c0:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 802c4c4:	e9c2 3400 	strd	r3, r4, [r2]
    s14 += s22 * 136657;
 802c4c8:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 802c4cc:	4b91      	ldr	r3, [pc, #580]	; (802c714 <sc_reduce+0xb8c>)
 802c4ce:	fb03 f102 	mul.w	r1, r3, r2
 802c4d2:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802c4d6:	2300      	movs	r3, #0
 802c4d8:	fb03 f302 	mul.w	r3, r3, r2
 802c4dc:	18cc      	adds	r4, r1, r3
 802c4de:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802c4e2:	4b8c      	ldr	r3, [pc, #560]	; (802c714 <sc_reduce+0xb8c>)
 802c4e4:	fba2 0103 	umull	r0, r1, r2, r3
 802c4e8:	1863      	adds	r3, r4, r1
 802c4ea:	4619      	mov	r1, r3
 802c4ec:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 802c4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c4f4:	1814      	adds	r4, r2, r0
 802c4f6:	f8c7 4530 	str.w	r4, [r7, #1328]	; 0x530
 802c4fa:	414b      	adcs	r3, r1
 802c4fc:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 802c500:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 802c504:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c508:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 802c50c:	e9c2 3400 	strd	r3, r4, [r2]
    s15 -= s22 * 683901;
 802c510:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 802c514:	4b7a      	ldr	r3, [pc, #488]	; (802c700 <sc_reduce+0xb78>)
 802c516:	fb03 f102 	mul.w	r1, r3, r2
 802c51a:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802c51e:	f04f 33ff 	mov.w	r3, #4294967295
 802c522:	fb03 f302 	mul.w	r3, r3, r2
 802c526:	18cc      	adds	r4, r1, r3
 802c528:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802c52c:	4b74      	ldr	r3, [pc, #464]	; (802c700 <sc_reduce+0xb78>)
 802c52e:	fba2 0103 	umull	r0, r1, r2, r3
 802c532:	1863      	adds	r3, r4, r1
 802c534:	4619      	mov	r1, r3
 802c536:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 802c53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c53e:	1814      	adds	r4, r2, r0
 802c540:	f8c7 4528 	str.w	r4, [r7, #1320]	; 0x528
 802c544:	414b      	adcs	r3, r1
 802c546:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 802c54a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 802c54e:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c552:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 802c556:	e9c2 3400 	strd	r3, r4, [r2]
    s22 = 0;
 802c55a:	f04f 0200 	mov.w	r2, #0
 802c55e:	f04f 0300 	mov.w	r3, #0
 802c562:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 802c566:	e9c1 2300 	strd	r2, r3, [r1]
    s9 += s21 * 666643;
 802c56a:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 802c56e:	4b65      	ldr	r3, [pc, #404]	; (802c704 <sc_reduce+0xb7c>)
 802c570:	fb03 f102 	mul.w	r1, r3, r2
 802c574:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802c578:	2300      	movs	r3, #0
 802c57a:	fb03 f302 	mul.w	r3, r3, r2
 802c57e:	18cc      	adds	r4, r1, r3
 802c580:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802c584:	4b5f      	ldr	r3, [pc, #380]	; (802c704 <sc_reduce+0xb7c>)
 802c586:	fba2 0103 	umull	r0, r1, r2, r3
 802c58a:	1863      	adds	r3, r4, r1
 802c58c:	4619      	mov	r1, r3
 802c58e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802c592:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c596:	1814      	adds	r4, r2, r0
 802c598:	f8c7 4520 	str.w	r4, [r7, #1312]	; 0x520
 802c59c:	414b      	adcs	r3, r1
 802c59e:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 802c5a2:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 802c5a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c5aa:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802c5ae:	e9c2 3400 	strd	r3, r4, [r2]
    s10 += s21 * 470296;
 802c5b2:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 802c5b6:	4b54      	ldr	r3, [pc, #336]	; (802c708 <sc_reduce+0xb80>)
 802c5b8:	fb03 f102 	mul.w	r1, r3, r2
 802c5bc:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802c5c0:	2300      	movs	r3, #0
 802c5c2:	fb03 f302 	mul.w	r3, r3, r2
 802c5c6:	18cc      	adds	r4, r1, r3
 802c5c8:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802c5cc:	4b4e      	ldr	r3, [pc, #312]	; (802c708 <sc_reduce+0xb80>)
 802c5ce:	fba2 0103 	umull	r0, r1, r2, r3
 802c5d2:	1863      	adds	r3, r4, r1
 802c5d4:	4619      	mov	r1, r3
 802c5d6:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802c5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c5de:	1814      	adds	r4, r2, r0
 802c5e0:	f8c7 4518 	str.w	r4, [r7, #1304]	; 0x518
 802c5e4:	414b      	adcs	r3, r1
 802c5e6:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 802c5ea:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 802c5ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c5f2:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802c5f6:	e9c2 3400 	strd	r3, r4, [r2]
    s11 += s21 * 654183;
 802c5fa:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 802c5fe:	4b43      	ldr	r3, [pc, #268]	; (802c70c <sc_reduce+0xb84>)
 802c600:	fb03 f102 	mul.w	r1, r3, r2
 802c604:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802c608:	2300      	movs	r3, #0
 802c60a:	fb03 f302 	mul.w	r3, r3, r2
 802c60e:	18cc      	adds	r4, r1, r3
 802c610:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802c614:	4b3d      	ldr	r3, [pc, #244]	; (802c70c <sc_reduce+0xb84>)
 802c616:	fba2 0103 	umull	r0, r1, r2, r3
 802c61a:	1863      	adds	r3, r4, r1
 802c61c:	4619      	mov	r1, r3
 802c61e:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802c622:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c626:	1814      	adds	r4, r2, r0
 802c628:	f8c7 4510 	str.w	r4, [r7, #1296]	; 0x510
 802c62c:	414b      	adcs	r3, r1
 802c62e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 802c632:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 802c636:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c63a:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802c63e:	e9c2 3400 	strd	r3, r4, [r2]
    s12 -= s21 * 997805;
 802c642:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 802c646:	4b32      	ldr	r3, [pc, #200]	; (802c710 <sc_reduce+0xb88>)
 802c648:	fb03 f102 	mul.w	r1, r3, r2
 802c64c:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802c650:	f04f 33ff 	mov.w	r3, #4294967295
 802c654:	fb03 f302 	mul.w	r3, r3, r2
 802c658:	18cc      	adds	r4, r1, r3
 802c65a:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802c65e:	4b2c      	ldr	r3, [pc, #176]	; (802c710 <sc_reduce+0xb88>)
 802c660:	fba2 0103 	umull	r0, r1, r2, r3
 802c664:	1863      	adds	r3, r4, r1
 802c666:	4619      	mov	r1, r3
 802c668:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802c66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c670:	1814      	adds	r4, r2, r0
 802c672:	f8c7 4508 	str.w	r4, [r7, #1288]	; 0x508
 802c676:	414b      	adcs	r3, r1
 802c678:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 802c67c:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 802c680:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c684:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802c688:	e9c2 3400 	strd	r3, r4, [r2]
    s13 += s21 * 136657;
 802c68c:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 802c690:	4b20      	ldr	r3, [pc, #128]	; (802c714 <sc_reduce+0xb8c>)
 802c692:	fb03 f102 	mul.w	r1, r3, r2
 802c696:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802c69a:	2300      	movs	r3, #0
 802c69c:	fb03 f302 	mul.w	r3, r3, r2
 802c6a0:	18cc      	adds	r4, r1, r3
 802c6a2:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802c6a6:	4b1b      	ldr	r3, [pc, #108]	; (802c714 <sc_reduce+0xb8c>)
 802c6a8:	fba2 0103 	umull	r0, r1, r2, r3
 802c6ac:	1863      	adds	r3, r4, r1
 802c6ae:	4619      	mov	r1, r3
 802c6b0:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 802c6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c6b8:	1814      	adds	r4, r2, r0
 802c6ba:	f8c7 4500 	str.w	r4, [r7, #1280]	; 0x500
 802c6be:	414b      	adcs	r3, r1
 802c6c0:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 802c6c4:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 802c6c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c6cc:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 802c6d0:	e9c2 3400 	strd	r3, r4, [r2]
    s14 -= s21 * 683901;
 802c6d4:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 802c6d8:	4b09      	ldr	r3, [pc, #36]	; (802c700 <sc_reduce+0xb78>)
 802c6da:	fb03 f102 	mul.w	r1, r3, r2
 802c6de:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802c6e2:	f04f 33ff 	mov.w	r3, #4294967295
 802c6e6:	fb03 f302 	mul.w	r3, r3, r2
 802c6ea:	18cc      	adds	r4, r1, r3
 802c6ec:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802c6f0:	4b03      	ldr	r3, [pc, #12]	; (802c700 <sc_reduce+0xb78>)
 802c6f2:	fba2 0103 	umull	r0, r1, r2, r3
 802c6f6:	1863      	adds	r3, r4, r1
 802c6f8:	4619      	mov	r1, r3
 802c6fa:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 802c6fe:	e00b      	b.n	802c718 <sc_reduce+0xb90>
 802c700:	fff59083 	.word	0xfff59083
 802c704:	000a2c13 	.word	0x000a2c13
 802c708:	00072d18 	.word	0x00072d18
 802c70c:	0009fb67 	.word	0x0009fb67
 802c710:	fff0c653 	.word	0xfff0c653
 802c714:	000215d1 	.word	0x000215d1
 802c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c71c:	1814      	adds	r4, r2, r0
 802c71e:	f8c7 44f8 	str.w	r4, [r7, #1272]	; 0x4f8
 802c722:	414b      	adcs	r3, r1
 802c724:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 802c728:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 802c72c:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c730:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 802c734:	e9c2 3400 	strd	r3, r4, [r2]
    s21 = 0;
 802c738:	f04f 0200 	mov.w	r2, #0
 802c73c:	f04f 0300 	mov.w	r3, #0
 802c740:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 802c744:	e9c1 2300 	strd	r2, r3, [r1]
    s8 += s20 * 666643;
 802c748:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 802c74c:	4be5      	ldr	r3, [pc, #916]	; (802cae4 <sc_reduce+0xf5c>)
 802c74e:	fb03 f102 	mul.w	r1, r3, r2
 802c752:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802c756:	2300      	movs	r3, #0
 802c758:	fb03 f302 	mul.w	r3, r3, r2
 802c75c:	18cc      	adds	r4, r1, r3
 802c75e:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802c762:	4be0      	ldr	r3, [pc, #896]	; (802cae4 <sc_reduce+0xf5c>)
 802c764:	fba2 0103 	umull	r0, r1, r2, r3
 802c768:	1863      	adds	r3, r4, r1
 802c76a:	4619      	mov	r1, r3
 802c76c:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802c770:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c774:	1814      	adds	r4, r2, r0
 802c776:	f8c7 44f0 	str.w	r4, [r7, #1264]	; 0x4f0
 802c77a:	414b      	adcs	r3, r1
 802c77c:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 802c780:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 802c784:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c788:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802c78c:	e9c2 3400 	strd	r3, r4, [r2]
    s9 += s20 * 470296;
 802c790:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 802c794:	4bd4      	ldr	r3, [pc, #848]	; (802cae8 <sc_reduce+0xf60>)
 802c796:	fb03 f102 	mul.w	r1, r3, r2
 802c79a:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802c79e:	2300      	movs	r3, #0
 802c7a0:	fb03 f302 	mul.w	r3, r3, r2
 802c7a4:	18cc      	adds	r4, r1, r3
 802c7a6:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802c7aa:	4bcf      	ldr	r3, [pc, #828]	; (802cae8 <sc_reduce+0xf60>)
 802c7ac:	fba2 0103 	umull	r0, r1, r2, r3
 802c7b0:	1863      	adds	r3, r4, r1
 802c7b2:	4619      	mov	r1, r3
 802c7b4:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802c7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c7bc:	1814      	adds	r4, r2, r0
 802c7be:	f8c7 44e8 	str.w	r4, [r7, #1256]	; 0x4e8
 802c7c2:	414b      	adcs	r3, r1
 802c7c4:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 802c7c8:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 802c7cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c7d0:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802c7d4:	e9c2 3400 	strd	r3, r4, [r2]
    s10 += s20 * 654183;
 802c7d8:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 802c7dc:	4bc3      	ldr	r3, [pc, #780]	; (802caec <sc_reduce+0xf64>)
 802c7de:	fb03 f102 	mul.w	r1, r3, r2
 802c7e2:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802c7e6:	2300      	movs	r3, #0
 802c7e8:	fb03 f302 	mul.w	r3, r3, r2
 802c7ec:	18cc      	adds	r4, r1, r3
 802c7ee:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802c7f2:	4bbe      	ldr	r3, [pc, #760]	; (802caec <sc_reduce+0xf64>)
 802c7f4:	fba2 0103 	umull	r0, r1, r2, r3
 802c7f8:	1863      	adds	r3, r4, r1
 802c7fa:	4619      	mov	r1, r3
 802c7fc:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802c800:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c804:	1814      	adds	r4, r2, r0
 802c806:	f8c7 44e0 	str.w	r4, [r7, #1248]	; 0x4e0
 802c80a:	414b      	adcs	r3, r1
 802c80c:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 802c810:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 802c814:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c818:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802c81c:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= s20 * 997805;
 802c820:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 802c824:	4bb2      	ldr	r3, [pc, #712]	; (802caf0 <sc_reduce+0xf68>)
 802c826:	fb03 f102 	mul.w	r1, r3, r2
 802c82a:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802c82e:	f04f 33ff 	mov.w	r3, #4294967295
 802c832:	fb03 f302 	mul.w	r3, r3, r2
 802c836:	18cc      	adds	r4, r1, r3
 802c838:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802c83c:	4bac      	ldr	r3, [pc, #688]	; (802caf0 <sc_reduce+0xf68>)
 802c83e:	fba2 0103 	umull	r0, r1, r2, r3
 802c842:	1863      	adds	r3, r4, r1
 802c844:	4619      	mov	r1, r3
 802c846:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802c84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c84e:	1814      	adds	r4, r2, r0
 802c850:	f8c7 44d8 	str.w	r4, [r7, #1240]	; 0x4d8
 802c854:	414b      	adcs	r3, r1
 802c856:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 802c85a:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 802c85e:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c862:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802c866:	e9c2 3400 	strd	r3, r4, [r2]
    s12 += s20 * 136657;
 802c86a:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 802c86e:	4ba1      	ldr	r3, [pc, #644]	; (802caf4 <sc_reduce+0xf6c>)
 802c870:	fb03 f102 	mul.w	r1, r3, r2
 802c874:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802c878:	2300      	movs	r3, #0
 802c87a:	fb03 f302 	mul.w	r3, r3, r2
 802c87e:	18cc      	adds	r4, r1, r3
 802c880:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802c884:	4b9b      	ldr	r3, [pc, #620]	; (802caf4 <sc_reduce+0xf6c>)
 802c886:	fba2 0103 	umull	r0, r1, r2, r3
 802c88a:	1863      	adds	r3, r4, r1
 802c88c:	4619      	mov	r1, r3
 802c88e:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c896:	1814      	adds	r4, r2, r0
 802c898:	f8c7 44d0 	str.w	r4, [r7, #1232]	; 0x4d0
 802c89c:	414b      	adcs	r3, r1
 802c89e:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 802c8a2:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 802c8a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c8aa:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802c8ae:	e9c2 3400 	strd	r3, r4, [r2]
    s13 -= s20 * 683901;
 802c8b2:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 802c8b6:	4b90      	ldr	r3, [pc, #576]	; (802caf8 <sc_reduce+0xf70>)
 802c8b8:	fb03 f102 	mul.w	r1, r3, r2
 802c8bc:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802c8c0:	f04f 33ff 	mov.w	r3, #4294967295
 802c8c4:	fb03 f302 	mul.w	r3, r3, r2
 802c8c8:	18cc      	adds	r4, r1, r3
 802c8ca:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802c8ce:	4b8a      	ldr	r3, [pc, #552]	; (802caf8 <sc_reduce+0xf70>)
 802c8d0:	fba2 0103 	umull	r0, r1, r2, r3
 802c8d4:	1863      	adds	r3, r4, r1
 802c8d6:	4619      	mov	r1, r3
 802c8d8:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 802c8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c8e0:	1814      	adds	r4, r2, r0
 802c8e2:	f8c7 44c8 	str.w	r4, [r7, #1224]	; 0x4c8
 802c8e6:	414b      	adcs	r3, r1
 802c8e8:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 802c8ec:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 802c8f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c8f4:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 802c8f8:	e9c2 3400 	strd	r3, r4, [r2]
    s20 = 0;
 802c8fc:	f04f 0200 	mov.w	r2, #0
 802c900:	f04f 0300 	mov.w	r3, #0
 802c904:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 802c908:	e9c1 2300 	strd	r2, r3, [r1]
    s7 += s19 * 666643;
 802c90c:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 802c910:	4b74      	ldr	r3, [pc, #464]	; (802cae4 <sc_reduce+0xf5c>)
 802c912:	fb03 f102 	mul.w	r1, r3, r2
 802c916:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802c91a:	2300      	movs	r3, #0
 802c91c:	fb03 f302 	mul.w	r3, r3, r2
 802c920:	18cc      	adds	r4, r1, r3
 802c922:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802c926:	4b6f      	ldr	r3, [pc, #444]	; (802cae4 <sc_reduce+0xf5c>)
 802c928:	fba2 0103 	umull	r0, r1, r2, r3
 802c92c:	1863      	adds	r3, r4, r1
 802c92e:	4619      	mov	r1, r3
 802c930:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802c934:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c938:	1814      	adds	r4, r2, r0
 802c93a:	f8c7 44c0 	str.w	r4, [r7, #1216]	; 0x4c0
 802c93e:	414b      	adcs	r3, r1
 802c940:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 802c944:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 802c948:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c94c:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802c950:	e9c2 3400 	strd	r3, r4, [r2]
    s8 += s19 * 470296;
 802c954:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 802c958:	4b63      	ldr	r3, [pc, #396]	; (802cae8 <sc_reduce+0xf60>)
 802c95a:	fb03 f102 	mul.w	r1, r3, r2
 802c95e:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802c962:	2300      	movs	r3, #0
 802c964:	fb03 f302 	mul.w	r3, r3, r2
 802c968:	18cc      	adds	r4, r1, r3
 802c96a:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802c96e:	4b5e      	ldr	r3, [pc, #376]	; (802cae8 <sc_reduce+0xf60>)
 802c970:	fba2 0103 	umull	r0, r1, r2, r3
 802c974:	1863      	adds	r3, r4, r1
 802c976:	4619      	mov	r1, r3
 802c978:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c980:	1814      	adds	r4, r2, r0
 802c982:	f8c7 44b8 	str.w	r4, [r7, #1208]	; 0x4b8
 802c986:	414b      	adcs	r3, r1
 802c988:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 802c98c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 802c990:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c994:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802c998:	e9c2 3400 	strd	r3, r4, [r2]
    s9 += s19 * 654183;
 802c99c:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 802c9a0:	4b52      	ldr	r3, [pc, #328]	; (802caec <sc_reduce+0xf64>)
 802c9a2:	fb03 f102 	mul.w	r1, r3, r2
 802c9a6:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802c9aa:	2300      	movs	r3, #0
 802c9ac:	fb03 f302 	mul.w	r3, r3, r2
 802c9b0:	18cc      	adds	r4, r1, r3
 802c9b2:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802c9b6:	4b4d      	ldr	r3, [pc, #308]	; (802caec <sc_reduce+0xf64>)
 802c9b8:	fba2 0103 	umull	r0, r1, r2, r3
 802c9bc:	1863      	adds	r3, r4, r1
 802c9be:	4619      	mov	r1, r3
 802c9c0:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c9c8:	1814      	adds	r4, r2, r0
 802c9ca:	f8c7 44b0 	str.w	r4, [r7, #1200]	; 0x4b0
 802c9ce:	414b      	adcs	r3, r1
 802c9d0:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 802c9d4:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 802c9d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c9dc:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802c9e0:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= s19 * 997805;
 802c9e4:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 802c9e8:	4b41      	ldr	r3, [pc, #260]	; (802caf0 <sc_reduce+0xf68>)
 802c9ea:	fb03 f102 	mul.w	r1, r3, r2
 802c9ee:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802c9f2:	f04f 33ff 	mov.w	r3, #4294967295
 802c9f6:	fb03 f302 	mul.w	r3, r3, r2
 802c9fa:	18cc      	adds	r4, r1, r3
 802c9fc:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802ca00:	4b3b      	ldr	r3, [pc, #236]	; (802caf0 <sc_reduce+0xf68>)
 802ca02:	fba2 0103 	umull	r0, r1, r2, r3
 802ca06:	1863      	adds	r3, r4, r1
 802ca08:	4619      	mov	r1, r3
 802ca0a:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802ca0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ca12:	1814      	adds	r4, r2, r0
 802ca14:	f8c7 44a8 	str.w	r4, [r7, #1192]	; 0x4a8
 802ca18:	414b      	adcs	r3, r1
 802ca1a:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 802ca1e:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 802ca22:	e9d3 3400 	ldrd	r3, r4, [r3]
 802ca26:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802ca2a:	e9c2 3400 	strd	r3, r4, [r2]
    s11 += s19 * 136657;
 802ca2e:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 802ca32:	4b30      	ldr	r3, [pc, #192]	; (802caf4 <sc_reduce+0xf6c>)
 802ca34:	fb03 f102 	mul.w	r1, r3, r2
 802ca38:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802ca3c:	2300      	movs	r3, #0
 802ca3e:	fb03 f302 	mul.w	r3, r3, r2
 802ca42:	18cc      	adds	r4, r1, r3
 802ca44:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802ca48:	4b2a      	ldr	r3, [pc, #168]	; (802caf4 <sc_reduce+0xf6c>)
 802ca4a:	fba2 0103 	umull	r0, r1, r2, r3
 802ca4e:	1863      	adds	r3, r4, r1
 802ca50:	4619      	mov	r1, r3
 802ca52:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802ca56:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ca5a:	1814      	adds	r4, r2, r0
 802ca5c:	f8c7 44a0 	str.w	r4, [r7, #1184]	; 0x4a0
 802ca60:	414b      	adcs	r3, r1
 802ca62:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 802ca66:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 802ca6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802ca6e:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802ca72:	e9c2 3400 	strd	r3, r4, [r2]
    s12 -= s19 * 683901;
 802ca76:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 802ca7a:	4b1f      	ldr	r3, [pc, #124]	; (802caf8 <sc_reduce+0xf70>)
 802ca7c:	fb03 f102 	mul.w	r1, r3, r2
 802ca80:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802ca84:	f04f 33ff 	mov.w	r3, #4294967295
 802ca88:	fb03 f302 	mul.w	r3, r3, r2
 802ca8c:	18cc      	adds	r4, r1, r3
 802ca8e:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802ca92:	4b19      	ldr	r3, [pc, #100]	; (802caf8 <sc_reduce+0xf70>)
 802ca94:	fba2 0103 	umull	r0, r1, r2, r3
 802ca98:	1863      	adds	r3, r4, r1
 802ca9a:	4619      	mov	r1, r3
 802ca9c:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802caa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802caa4:	1814      	adds	r4, r2, r0
 802caa6:	f8c7 4498 	str.w	r4, [r7, #1176]	; 0x498
 802caaa:	414b      	adcs	r3, r1
 802caac:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 802cab0:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 802cab4:	e9d3 3400 	ldrd	r3, r4, [r3]
 802cab8:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802cabc:	e9c2 3400 	strd	r3, r4, [r2]
    s19 = 0;
 802cac0:	f04f 0200 	mov.w	r2, #0
 802cac4:	f04f 0300 	mov.w	r3, #0
 802cac8:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 802cacc:	e9c1 2300 	strd	r2, r3, [r1]
    s6 += s18 * 666643;
 802cad0:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 802cad4:	4b03      	ldr	r3, [pc, #12]	; (802cae4 <sc_reduce+0xf5c>)
 802cad6:	fb03 f102 	mul.w	r1, r3, r2
 802cada:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802cade:	2300      	movs	r3, #0
 802cae0:	e00c      	b.n	802cafc <sc_reduce+0xf74>
 802cae2:	bf00      	nop
 802cae4:	000a2c13 	.word	0x000a2c13
 802cae8:	00072d18 	.word	0x00072d18
 802caec:	0009fb67 	.word	0x0009fb67
 802caf0:	fff0c653 	.word	0xfff0c653
 802caf4:	000215d1 	.word	0x000215d1
 802caf8:	fff59083 	.word	0xfff59083
 802cafc:	fb03 f302 	mul.w	r3, r3, r2
 802cb00:	18cc      	adds	r4, r1, r3
 802cb02:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802cb06:	4bef      	ldr	r3, [pc, #956]	; (802cec4 <sc_reduce+0x133c>)
 802cb08:	fba2 0103 	umull	r0, r1, r2, r3
 802cb0c:	1863      	adds	r3, r4, r1
 802cb0e:	4619      	mov	r1, r3
 802cb10:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802cb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cb18:	1814      	adds	r4, r2, r0
 802cb1a:	f8c7 4490 	str.w	r4, [r7, #1168]	; 0x490
 802cb1e:	414b      	adcs	r3, r1
 802cb20:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 802cb24:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 802cb28:	e9d3 3400 	ldrd	r3, r4, [r3]
 802cb2c:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802cb30:	e9c2 3400 	strd	r3, r4, [r2]
    s7 += s18 * 470296;
 802cb34:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 802cb38:	4be3      	ldr	r3, [pc, #908]	; (802cec8 <sc_reduce+0x1340>)
 802cb3a:	fb03 f102 	mul.w	r1, r3, r2
 802cb3e:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802cb42:	2300      	movs	r3, #0
 802cb44:	fb03 f302 	mul.w	r3, r3, r2
 802cb48:	18cc      	adds	r4, r1, r3
 802cb4a:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802cb4e:	4bde      	ldr	r3, [pc, #888]	; (802cec8 <sc_reduce+0x1340>)
 802cb50:	fba2 0103 	umull	r0, r1, r2, r3
 802cb54:	1863      	adds	r3, r4, r1
 802cb56:	4619      	mov	r1, r3
 802cb58:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802cb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cb60:	1814      	adds	r4, r2, r0
 802cb62:	f8c7 4488 	str.w	r4, [r7, #1160]	; 0x488
 802cb66:	414b      	adcs	r3, r1
 802cb68:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 802cb6c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 802cb70:	e9d3 3400 	ldrd	r3, r4, [r3]
 802cb74:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802cb78:	e9c2 3400 	strd	r3, r4, [r2]
    s8 += s18 * 654183;
 802cb7c:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 802cb80:	4bd2      	ldr	r3, [pc, #840]	; (802cecc <sc_reduce+0x1344>)
 802cb82:	fb03 f102 	mul.w	r1, r3, r2
 802cb86:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802cb8a:	2300      	movs	r3, #0
 802cb8c:	fb03 f302 	mul.w	r3, r3, r2
 802cb90:	18cc      	adds	r4, r1, r3
 802cb92:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802cb96:	4bcd      	ldr	r3, [pc, #820]	; (802cecc <sc_reduce+0x1344>)
 802cb98:	fba2 0103 	umull	r0, r1, r2, r3
 802cb9c:	1863      	adds	r3, r4, r1
 802cb9e:	4619      	mov	r1, r3
 802cba0:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cba8:	1814      	adds	r4, r2, r0
 802cbaa:	f8c7 4480 	str.w	r4, [r7, #1152]	; 0x480
 802cbae:	414b      	adcs	r3, r1
 802cbb0:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 802cbb4:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 802cbb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 802cbbc:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802cbc0:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= s18 * 997805;
 802cbc4:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 802cbc8:	4bc1      	ldr	r3, [pc, #772]	; (802ced0 <sc_reduce+0x1348>)
 802cbca:	fb03 f102 	mul.w	r1, r3, r2
 802cbce:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802cbd2:	f04f 33ff 	mov.w	r3, #4294967295
 802cbd6:	fb03 f302 	mul.w	r3, r3, r2
 802cbda:	18cc      	adds	r4, r1, r3
 802cbdc:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802cbe0:	4bbb      	ldr	r3, [pc, #748]	; (802ced0 <sc_reduce+0x1348>)
 802cbe2:	fba2 0103 	umull	r0, r1, r2, r3
 802cbe6:	1863      	adds	r3, r4, r1
 802cbe8:	4619      	mov	r1, r3
 802cbea:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802cbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cbf2:	1814      	adds	r4, r2, r0
 802cbf4:	f8c7 4478 	str.w	r4, [r7, #1144]	; 0x478
 802cbf8:	414b      	adcs	r3, r1
 802cbfa:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 802cbfe:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 802cc02:	e9d3 3400 	ldrd	r3, r4, [r3]
 802cc06:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802cc0a:	e9c2 3400 	strd	r3, r4, [r2]
    s10 += s18 * 136657;
 802cc0e:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 802cc12:	4bb0      	ldr	r3, [pc, #704]	; (802ced4 <sc_reduce+0x134c>)
 802cc14:	fb03 f102 	mul.w	r1, r3, r2
 802cc18:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802cc1c:	2300      	movs	r3, #0
 802cc1e:	fb03 f302 	mul.w	r3, r3, r2
 802cc22:	18cc      	adds	r4, r1, r3
 802cc24:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802cc28:	4baa      	ldr	r3, [pc, #680]	; (802ced4 <sc_reduce+0x134c>)
 802cc2a:	fba2 0103 	umull	r0, r1, r2, r3
 802cc2e:	1863      	adds	r3, r4, r1
 802cc30:	4619      	mov	r1, r3
 802cc32:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802cc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cc3a:	1814      	adds	r4, r2, r0
 802cc3c:	f8c7 4470 	str.w	r4, [r7, #1136]	; 0x470
 802cc40:	414b      	adcs	r3, r1
 802cc42:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 802cc46:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 802cc4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802cc4e:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802cc52:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= s18 * 683901;
 802cc56:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 802cc5a:	4b9f      	ldr	r3, [pc, #636]	; (802ced8 <sc_reduce+0x1350>)
 802cc5c:	fb03 f102 	mul.w	r1, r3, r2
 802cc60:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802cc64:	f04f 33ff 	mov.w	r3, #4294967295
 802cc68:	fb03 f302 	mul.w	r3, r3, r2
 802cc6c:	18cc      	adds	r4, r1, r3
 802cc6e:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802cc72:	4b99      	ldr	r3, [pc, #612]	; (802ced8 <sc_reduce+0x1350>)
 802cc74:	fba2 0103 	umull	r0, r1, r2, r3
 802cc78:	1863      	adds	r3, r4, r1
 802cc7a:	4619      	mov	r1, r3
 802cc7c:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802cc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cc84:	1814      	adds	r4, r2, r0
 802cc86:	f8c7 4468 	str.w	r4, [r7, #1128]	; 0x468
 802cc8a:	414b      	adcs	r3, r1
 802cc8c:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 802cc90:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 802cc94:	e9d3 3400 	ldrd	r3, r4, [r3]
 802cc98:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802cc9c:	e9c2 3400 	strd	r3, r4, [r2]
    s18 = 0;
 802cca0:	f04f 0200 	mov.w	r2, #0
 802cca4:	f04f 0300 	mov.w	r3, #0
 802cca8:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 802ccac:	e9c1 2300 	strd	r2, r3, [r1]
    carry6 = (s6 + (1 << 20)) >> 21;
 802ccb0:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802ccb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ccb8:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802ccbc:	f8c7 16d8 	str.w	r1, [r7, #1752]	; 0x6d8
 802ccc0:	f143 0300 	adc.w	r3, r3, #0
 802ccc4:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 802ccc8:	f04f 0200 	mov.w	r2, #0
 802cccc:	f04f 0300 	mov.w	r3, #0
 802ccd0:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 802ccd4:	e9d1 4500 	ldrd	r4, r5, [r1]
 802ccd8:	4621      	mov	r1, r4
 802ccda:	0d4a      	lsrs	r2, r1, #21
 802ccdc:	4629      	mov	r1, r5
 802ccde:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802cce2:	4629      	mov	r1, r5
 802cce4:	154b      	asrs	r3, r1, #21
 802cce6:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 802ccea:	e9c1 2300 	strd	r2, r3, [r1]
    s7 += carry6;
 802ccee:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802ccf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ccf6:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802ccfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ccfe:	1884      	adds	r4, r0, r2
 802cd00:	f8c7 4460 	str.w	r4, [r7, #1120]	; 0x460
 802cd04:	eb41 0303 	adc.w	r3, r1, r3
 802cd08:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 802cd0c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 802cd10:	e9d3 3400 	ldrd	r3, r4, [r3]
 802cd14:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802cd18:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 802cd1c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cd24:	f04f 0000 	mov.w	r0, #0
 802cd28:	f04f 0100 	mov.w	r1, #0
 802cd2c:	0559      	lsls	r1, r3, #21
 802cd2e:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802cd32:	0550      	lsls	r0, r2, #21
 802cd34:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802cd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cd3c:	1a14      	subs	r4, r2, r0
 802cd3e:	f8c7 4458 	str.w	r4, [r7, #1112]	; 0x458
 802cd42:	eb63 0301 	sbc.w	r3, r3, r1
 802cd46:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 802cd4a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 802cd4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 802cd52:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802cd56:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = (s8 + (1 << 20)) >> 21;
 802cd5a:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802cd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cd62:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802cd66:	f8c7 16d0 	str.w	r1, [r7, #1744]	; 0x6d0
 802cd6a:	f143 0300 	adc.w	r3, r3, #0
 802cd6e:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 802cd72:	f04f 0200 	mov.w	r2, #0
 802cd76:	f04f 0300 	mov.w	r3, #0
 802cd7a:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 802cd7e:	e9d1 4500 	ldrd	r4, r5, [r1]
 802cd82:	4621      	mov	r1, r4
 802cd84:	0d4a      	lsrs	r2, r1, #21
 802cd86:	4629      	mov	r1, r5
 802cd88:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802cd8c:	4629      	mov	r1, r5
 802cd8e:	154b      	asrs	r3, r1, #21
 802cd90:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 802cd94:	e9c1 2300 	strd	r2, r3, [r1]
    s9 += carry8;
 802cd98:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802cd9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802cda0:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802cda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cda8:	1884      	adds	r4, r0, r2
 802cdaa:	f8c7 4450 	str.w	r4, [r7, #1104]	; 0x450
 802cdae:	eb41 0303 	adc.w	r3, r1, r3
 802cdb2:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 802cdb6:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 802cdba:	e9d3 3400 	ldrd	r3, r4, [r3]
 802cdbe:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802cdc2:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 802cdc6:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802cdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cdce:	f04f 0000 	mov.w	r0, #0
 802cdd2:	f04f 0100 	mov.w	r1, #0
 802cdd6:	0559      	lsls	r1, r3, #21
 802cdd8:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802cddc:	0550      	lsls	r0, r2, #21
 802cdde:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802cde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cde6:	1a14      	subs	r4, r2, r0
 802cde8:	f8c7 4448 	str.w	r4, [r7, #1096]	; 0x448
 802cdec:	eb63 0301 	sbc.w	r3, r3, r1
 802cdf0:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 802cdf4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 802cdf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 802cdfc:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802ce00:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = (s10 + (1 << 20)) >> 21;
 802ce04:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802ce08:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ce0c:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802ce10:	f8c7 16c8 	str.w	r1, [r7, #1736]	; 0x6c8
 802ce14:	f143 0300 	adc.w	r3, r3, #0
 802ce18:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 802ce1c:	f04f 0200 	mov.w	r2, #0
 802ce20:	f04f 0300 	mov.w	r3, #0
 802ce24:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 802ce28:	e9d1 4500 	ldrd	r4, r5, [r1]
 802ce2c:	4621      	mov	r1, r4
 802ce2e:	0d4a      	lsrs	r2, r1, #21
 802ce30:	4629      	mov	r1, r5
 802ce32:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802ce36:	4629      	mov	r1, r5
 802ce38:	154b      	asrs	r3, r1, #21
 802ce3a:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 802ce3e:	e9c1 2300 	strd	r2, r3, [r1]
    s11 += carry10;
 802ce42:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802ce46:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ce4a:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ce52:	1884      	adds	r4, r0, r2
 802ce54:	f8c7 4440 	str.w	r4, [r7, #1088]	; 0x440
 802ce58:	eb41 0303 	adc.w	r3, r1, r3
 802ce5c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 802ce60:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 802ce64:	e9d3 3400 	ldrd	r3, r4, [r3]
 802ce68:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802ce6c:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 802ce70:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802ce74:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ce78:	f04f 0000 	mov.w	r0, #0
 802ce7c:	f04f 0100 	mov.w	r1, #0
 802ce80:	0559      	lsls	r1, r3, #21
 802ce82:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802ce86:	0550      	lsls	r0, r2, #21
 802ce88:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802ce8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ce90:	1a14      	subs	r4, r2, r0
 802ce92:	f8c7 4438 	str.w	r4, [r7, #1080]	; 0x438
 802ce96:	eb63 0301 	sbc.w	r3, r3, r1
 802ce9a:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 802ce9e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 802cea2:	e9d3 3400 	ldrd	r3, r4, [r3]
 802cea6:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802ceaa:	e9c2 3400 	strd	r3, r4, [r2]
    carry12 = (s12 + (1 << 20)) >> 21;
 802ceae:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802ceb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ceb6:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802ceba:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 802cebe:	f143 0300 	adc.w	r3, r3, #0
 802cec2:	e00b      	b.n	802cedc <sc_reduce+0x1354>
 802cec4:	000a2c13 	.word	0x000a2c13
 802cec8:	00072d18 	.word	0x00072d18
 802cecc:	0009fb67 	.word	0x0009fb67
 802ced0:	fff0c653 	.word	0xfff0c653
 802ced4:	000215d1 	.word	0x000215d1
 802ced8:	fff59083 	.word	0xfff59083
 802cedc:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 802cee0:	f04f 0200 	mov.w	r2, #0
 802cee4:	f04f 0300 	mov.w	r3, #0
 802cee8:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 802ceec:	e9d1 4500 	ldrd	r4, r5, [r1]
 802cef0:	4621      	mov	r1, r4
 802cef2:	0d4a      	lsrs	r2, r1, #21
 802cef4:	4629      	mov	r1, r5
 802cef6:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802cefa:	4629      	mov	r1, r5
 802cefc:	154b      	asrs	r3, r1, #21
 802cefe:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 802cf02:	e9c1 2300 	strd	r2, r3, [r1]
    s13 += carry12;
 802cf06:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 802cf0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802cf0e:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 802cf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cf16:	1884      	adds	r4, r0, r2
 802cf18:	f8c7 4430 	str.w	r4, [r7, #1072]	; 0x430
 802cf1c:	eb41 0303 	adc.w	r3, r1, r3
 802cf20:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 802cf24:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 802cf28:	e9d3 3400 	ldrd	r3, r4, [r3]
 802cf2c:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 802cf30:	e9c2 3400 	strd	r3, r4, [r2]
    s12 -= carry12 << 21;
 802cf34:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 802cf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cf3c:	f04f 0000 	mov.w	r0, #0
 802cf40:	f04f 0100 	mov.w	r1, #0
 802cf44:	0559      	lsls	r1, r3, #21
 802cf46:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802cf4a:	0550      	lsls	r0, r2, #21
 802cf4c:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802cf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cf54:	1a14      	subs	r4, r2, r0
 802cf56:	f8c7 4428 	str.w	r4, [r7, #1064]	; 0x428
 802cf5a:	eb63 0301 	sbc.w	r3, r3, r1
 802cf5e:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 802cf62:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802cf66:	e9d3 3400 	ldrd	r3, r4, [r3]
 802cf6a:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802cf6e:	e9c2 3400 	strd	r3, r4, [r2]
    carry14 = (s14 + (1 << 20)) >> 21;
 802cf72:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 802cf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cf7a:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802cf7e:	f8c7 16b8 	str.w	r1, [r7, #1720]	; 0x6b8
 802cf82:	f143 0300 	adc.w	r3, r3, #0
 802cf86:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 802cf8a:	f04f 0200 	mov.w	r2, #0
 802cf8e:	f04f 0300 	mov.w	r3, #0
 802cf92:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 802cf96:	e9d1 4500 	ldrd	r4, r5, [r1]
 802cf9a:	4621      	mov	r1, r4
 802cf9c:	0d4a      	lsrs	r2, r1, #21
 802cf9e:	4629      	mov	r1, r5
 802cfa0:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802cfa4:	4629      	mov	r1, r5
 802cfa6:	154b      	asrs	r3, r1, #21
 802cfa8:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 802cfac:	e9c1 2300 	strd	r2, r3, [r1]
    s15 += carry14;
 802cfb0:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 802cfb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 802cfb8:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 802cfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cfc0:	1884      	adds	r4, r0, r2
 802cfc2:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
 802cfc6:	eb41 0303 	adc.w	r3, r1, r3
 802cfca:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 802cfce:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 802cfd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 802cfd6:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 802cfda:	e9c2 3400 	strd	r3, r4, [r2]
    s14 -= carry14 << 21;
 802cfde:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 802cfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cfe6:	f04f 0000 	mov.w	r0, #0
 802cfea:	f04f 0100 	mov.w	r1, #0
 802cfee:	0559      	lsls	r1, r3, #21
 802cff0:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802cff4:	0550      	lsls	r0, r2, #21
 802cff6:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 802cffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cffe:	1a14      	subs	r4, r2, r0
 802d000:	f8c7 4418 	str.w	r4, [r7, #1048]	; 0x418
 802d004:	eb63 0301 	sbc.w	r3, r3, r1
 802d008:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 802d00c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 802d010:	e9d3 3400 	ldrd	r3, r4, [r3]
 802d014:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 802d018:	e9c2 3400 	strd	r3, r4, [r2]
    carry16 = (s16 + (1 << 20)) >> 21;
 802d01c:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 802d020:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d024:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d028:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 802d02c:	f143 0300 	adc.w	r3, r3, #0
 802d030:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 802d034:	f04f 0200 	mov.w	r2, #0
 802d038:	f04f 0300 	mov.w	r3, #0
 802d03c:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 802d040:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d044:	4621      	mov	r1, r4
 802d046:	0d4a      	lsrs	r2, r1, #21
 802d048:	4629      	mov	r1, r5
 802d04a:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d04e:	4629      	mov	r1, r5
 802d050:	154b      	asrs	r3, r1, #21
 802d052:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 802d056:	e9c1 2300 	strd	r2, r3, [r1]
    s17 += carry16;
 802d05a:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 802d05e:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d062:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 802d066:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d06a:	1884      	adds	r4, r0, r2
 802d06c:	f8c7 4410 	str.w	r4, [r7, #1040]	; 0x410
 802d070:	eb41 0303 	adc.w	r3, r1, r3
 802d074:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 802d078:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 802d07c:	e9d3 3400 	ldrd	r3, r4, [r3]
 802d080:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 802d084:	e9c2 3400 	strd	r3, r4, [r2]
    s16 -= carry16 << 21;
 802d088:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 802d08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d090:	f04f 0000 	mov.w	r0, #0
 802d094:	f04f 0100 	mov.w	r1, #0
 802d098:	0559      	lsls	r1, r3, #21
 802d09a:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d09e:	0550      	lsls	r0, r2, #21
 802d0a0:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 802d0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d0a8:	1a14      	subs	r4, r2, r0
 802d0aa:	f8c7 4408 	str.w	r4, [r7, #1032]	; 0x408
 802d0ae:	eb63 0301 	sbc.w	r3, r3, r1
 802d0b2:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 802d0b6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 802d0ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 802d0be:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 802d0c2:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = (s7 + (1 << 20)) >> 21;
 802d0c6:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802d0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d0ce:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d0d2:	f8c7 16a8 	str.w	r1, [r7, #1704]	; 0x6a8
 802d0d6:	f143 0300 	adc.w	r3, r3, #0
 802d0da:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 802d0de:	f04f 0200 	mov.w	r2, #0
 802d0e2:	f04f 0300 	mov.w	r3, #0
 802d0e6:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 802d0ea:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d0ee:	4621      	mov	r1, r4
 802d0f0:	0d4a      	lsrs	r2, r1, #21
 802d0f2:	4629      	mov	r1, r5
 802d0f4:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d0f8:	4629      	mov	r1, r5
 802d0fa:	154b      	asrs	r3, r1, #21
 802d0fc:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 802d100:	e9c1 2300 	strd	r2, r3, [r1]
    s8 += carry7;
 802d104:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802d108:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d10c:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d114:	1884      	adds	r4, r0, r2
 802d116:	f8c7 4400 	str.w	r4, [r7, #1024]	; 0x400
 802d11a:	eb41 0303 	adc.w	r3, r1, r3
 802d11e:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 802d122:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 802d126:	e9d3 3400 	ldrd	r3, r4, [r3]
 802d12a:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802d12e:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 802d132:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802d136:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d13a:	f04f 0000 	mov.w	r0, #0
 802d13e:	f04f 0100 	mov.w	r1, #0
 802d142:	0559      	lsls	r1, r3, #21
 802d144:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d148:	0550      	lsls	r0, r2, #21
 802d14a:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802d14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d152:	1a14      	subs	r4, r2, r0
 802d154:	f8c7 43f8 	str.w	r4, [r7, #1016]	; 0x3f8
 802d158:	eb63 0301 	sbc.w	r3, r3, r1
 802d15c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 802d160:	e9d7 34fe 	ldrd	r3, r4, [r7, #1016]	; 0x3f8
 802d164:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802d168:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = (s9 + (1 << 20)) >> 21;
 802d16c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802d170:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d174:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d178:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 802d17c:	f143 0300 	adc.w	r3, r3, #0
 802d180:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 802d184:	f04f 0200 	mov.w	r2, #0
 802d188:	f04f 0300 	mov.w	r3, #0
 802d18c:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 802d190:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d194:	4621      	mov	r1, r4
 802d196:	0d4a      	lsrs	r2, r1, #21
 802d198:	4629      	mov	r1, r5
 802d19a:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d19e:	4629      	mov	r1, r5
 802d1a0:	154b      	asrs	r3, r1, #21
 802d1a2:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 802d1a6:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += carry9;
 802d1aa:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802d1ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d1b2:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802d1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d1ba:	1884      	adds	r4, r0, r2
 802d1bc:	f8c7 43f0 	str.w	r4, [r7, #1008]	; 0x3f0
 802d1c0:	eb41 0303 	adc.w	r3, r1, r3
 802d1c4:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 802d1c8:	e9d7 34fc 	ldrd	r3, r4, [r7, #1008]	; 0x3f0
 802d1cc:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802d1d0:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 802d1d4:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802d1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d1dc:	f04f 0000 	mov.w	r0, #0
 802d1e0:	f04f 0100 	mov.w	r1, #0
 802d1e4:	0559      	lsls	r1, r3, #21
 802d1e6:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d1ea:	0550      	lsls	r0, r2, #21
 802d1ec:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802d1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d1f4:	1a14      	subs	r4, r2, r0
 802d1f6:	f8c7 43e8 	str.w	r4, [r7, #1000]	; 0x3e8
 802d1fa:	eb63 0301 	sbc.w	r3, r3, r1
 802d1fe:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 802d202:	e9d7 34fa 	ldrd	r3, r4, [r7, #1000]	; 0x3e8
 802d206:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802d20a:	e9c2 3400 	strd	r3, r4, [r2]
    carry11 = (s11 + (1 << 20)) >> 21;
 802d20e:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802d212:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d216:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d21a:	f8c7 1698 	str.w	r1, [r7, #1688]	; 0x698
 802d21e:	f143 0300 	adc.w	r3, r3, #0
 802d222:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 802d226:	f04f 0200 	mov.w	r2, #0
 802d22a:	f04f 0300 	mov.w	r3, #0
 802d22e:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 802d232:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d236:	4621      	mov	r1, r4
 802d238:	0d4a      	lsrs	r2, r1, #21
 802d23a:	4629      	mov	r1, r5
 802d23c:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d240:	4629      	mov	r1, r5
 802d242:	154b      	asrs	r3, r1, #21
 802d244:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 802d248:	e9c1 2300 	strd	r2, r3, [r1]
    s12 += carry11;
 802d24c:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802d250:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d254:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 802d258:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d25c:	1884      	adds	r4, r0, r2
 802d25e:	f8c7 43e0 	str.w	r4, [r7, #992]	; 0x3e0
 802d262:	eb41 0303 	adc.w	r3, r1, r3
 802d266:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 802d26a:	e9d7 34f8 	ldrd	r3, r4, [r7, #992]	; 0x3e0
 802d26e:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802d272:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= carry11 << 21;
 802d276:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 802d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d27e:	f04f 0000 	mov.w	r0, #0
 802d282:	f04f 0100 	mov.w	r1, #0
 802d286:	0559      	lsls	r1, r3, #21
 802d288:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d28c:	0550      	lsls	r0, r2, #21
 802d28e:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802d292:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d296:	1a14      	subs	r4, r2, r0
 802d298:	f8c7 43d8 	str.w	r4, [r7, #984]	; 0x3d8
 802d29c:	eb63 0301 	sbc.w	r3, r3, r1
 802d2a0:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 802d2a4:	e9d7 34f6 	ldrd	r3, r4, [r7, #984]	; 0x3d8
 802d2a8:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802d2ac:	e9c2 3400 	strd	r3, r4, [r2]
    carry13 = (s13 + (1 << 20)) >> 21;
 802d2b0:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 802d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d2b8:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d2bc:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 802d2c0:	f143 0300 	adc.w	r3, r3, #0
 802d2c4:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 802d2c8:	f04f 0200 	mov.w	r2, #0
 802d2cc:	f04f 0300 	mov.w	r3, #0
 802d2d0:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 802d2d4:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d2d8:	4621      	mov	r1, r4
 802d2da:	0d4a      	lsrs	r2, r1, #21
 802d2dc:	4629      	mov	r1, r5
 802d2de:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d2e2:	4629      	mov	r1, r5
 802d2e4:	154b      	asrs	r3, r1, #21
 802d2e6:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 802d2ea:	e9c1 2300 	strd	r2, r3, [r1]
    s14 += carry13;
 802d2ee:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 802d2f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d2f6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 802d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d2fe:	1884      	adds	r4, r0, r2
 802d300:	f8c7 43d0 	str.w	r4, [r7, #976]	; 0x3d0
 802d304:	eb41 0303 	adc.w	r3, r1, r3
 802d308:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 802d30c:	e9d7 34f4 	ldrd	r3, r4, [r7, #976]	; 0x3d0
 802d310:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 802d314:	e9c2 3400 	strd	r3, r4, [r2]
    s13 -= carry13 << 21;
 802d318:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 802d31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d320:	f04f 0000 	mov.w	r0, #0
 802d324:	f04f 0100 	mov.w	r1, #0
 802d328:	0559      	lsls	r1, r3, #21
 802d32a:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d32e:	0550      	lsls	r0, r2, #21
 802d330:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 802d334:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d338:	1a14      	subs	r4, r2, r0
 802d33a:	f8c7 43c8 	str.w	r4, [r7, #968]	; 0x3c8
 802d33e:	eb63 0301 	sbc.w	r3, r3, r1
 802d342:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 802d346:	e9d7 34f2 	ldrd	r3, r4, [r7, #968]	; 0x3c8
 802d34a:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 802d34e:	e9c2 3400 	strd	r3, r4, [r2]
    carry15 = (s15 + (1 << 20)) >> 21;
 802d352:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 802d356:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d35a:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d35e:	f8c7 1688 	str.w	r1, [r7, #1672]	; 0x688
 802d362:	f143 0300 	adc.w	r3, r3, #0
 802d366:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 802d36a:	f04f 0200 	mov.w	r2, #0
 802d36e:	f04f 0300 	mov.w	r3, #0
 802d372:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 802d376:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d37a:	4621      	mov	r1, r4
 802d37c:	0d4a      	lsrs	r2, r1, #21
 802d37e:	4629      	mov	r1, r5
 802d380:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d384:	4629      	mov	r1, r5
 802d386:	154b      	asrs	r3, r1, #21
 802d388:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 802d38c:	e9c1 2300 	strd	r2, r3, [r1]
    s16 += carry15;
 802d390:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 802d394:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d398:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 802d39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d3a0:	1884      	adds	r4, r0, r2
 802d3a2:	f8c7 43c0 	str.w	r4, [r7, #960]	; 0x3c0
 802d3a6:	eb41 0303 	adc.w	r3, r1, r3
 802d3aa:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 802d3ae:	e9d7 34f0 	ldrd	r3, r4, [r7, #960]	; 0x3c0
 802d3b2:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 802d3b6:	e9c2 3400 	strd	r3, r4, [r2]
    s15 -= carry15 << 21;
 802d3ba:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 802d3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d3c2:	f04f 0000 	mov.w	r0, #0
 802d3c6:	f04f 0100 	mov.w	r1, #0
 802d3ca:	0559      	lsls	r1, r3, #21
 802d3cc:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d3d0:	0550      	lsls	r0, r2, #21
 802d3d2:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 802d3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d3da:	1a14      	subs	r4, r2, r0
 802d3dc:	f8c7 43b8 	str.w	r4, [r7, #952]	; 0x3b8
 802d3e0:	eb63 0301 	sbc.w	r3, r3, r1
 802d3e4:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 802d3e8:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 802d3ec:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 802d3f0:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s17 * 666643;
 802d3f4:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 802d3f8:	4be4      	ldr	r3, [pc, #912]	; (802d78c <sc_reduce+0x1c04>)
 802d3fa:	fb03 f102 	mul.w	r1, r3, r2
 802d3fe:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802d402:	2300      	movs	r3, #0
 802d404:	fb03 f302 	mul.w	r3, r3, r2
 802d408:	18cc      	adds	r4, r1, r3
 802d40a:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802d40e:	4bdf      	ldr	r3, [pc, #892]	; (802d78c <sc_reduce+0x1c04>)
 802d410:	fba2 0103 	umull	r0, r1, r2, r3
 802d414:	1863      	adds	r3, r4, r1
 802d416:	4619      	mov	r1, r3
 802d418:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802d41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d420:	1814      	adds	r4, r2, r0
 802d422:	f8c7 43b0 	str.w	r4, [r7, #944]	; 0x3b0
 802d426:	414b      	adcs	r3, r1
 802d428:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 802d42c:	e9d7 34ec 	ldrd	r3, r4, [r7, #944]	; 0x3b0
 802d430:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802d434:	e9c2 3400 	strd	r3, r4, [r2]
    s6 += s17 * 470296;
 802d438:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 802d43c:	4bd4      	ldr	r3, [pc, #848]	; (802d790 <sc_reduce+0x1c08>)
 802d43e:	fb03 f102 	mul.w	r1, r3, r2
 802d442:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802d446:	2300      	movs	r3, #0
 802d448:	fb03 f302 	mul.w	r3, r3, r2
 802d44c:	18cc      	adds	r4, r1, r3
 802d44e:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802d452:	4bcf      	ldr	r3, [pc, #828]	; (802d790 <sc_reduce+0x1c08>)
 802d454:	fba2 0103 	umull	r0, r1, r2, r3
 802d458:	1863      	adds	r3, r4, r1
 802d45a:	4619      	mov	r1, r3
 802d45c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802d460:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d464:	1814      	adds	r4, r2, r0
 802d466:	f8c7 43a8 	str.w	r4, [r7, #936]	; 0x3a8
 802d46a:	414b      	adcs	r3, r1
 802d46c:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 802d470:	e9d7 34ea 	ldrd	r3, r4, [r7, #936]	; 0x3a8
 802d474:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802d478:	e9c2 3400 	strd	r3, r4, [r2]
    s7 += s17 * 654183;
 802d47c:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 802d480:	4bc4      	ldr	r3, [pc, #784]	; (802d794 <sc_reduce+0x1c0c>)
 802d482:	fb03 f102 	mul.w	r1, r3, r2
 802d486:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802d48a:	2300      	movs	r3, #0
 802d48c:	fb03 f302 	mul.w	r3, r3, r2
 802d490:	18cc      	adds	r4, r1, r3
 802d492:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802d496:	4bbf      	ldr	r3, [pc, #764]	; (802d794 <sc_reduce+0x1c0c>)
 802d498:	fba2 0103 	umull	r0, r1, r2, r3
 802d49c:	1863      	adds	r3, r4, r1
 802d49e:	4619      	mov	r1, r3
 802d4a0:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802d4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d4a8:	1814      	adds	r4, r2, r0
 802d4aa:	f8c7 43a0 	str.w	r4, [r7, #928]	; 0x3a0
 802d4ae:	414b      	adcs	r3, r1
 802d4b0:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 802d4b4:	e9d7 34e8 	ldrd	r3, r4, [r7, #928]	; 0x3a0
 802d4b8:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802d4bc:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= s17 * 997805;
 802d4c0:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 802d4c4:	4bb4      	ldr	r3, [pc, #720]	; (802d798 <sc_reduce+0x1c10>)
 802d4c6:	fb03 f102 	mul.w	r1, r3, r2
 802d4ca:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802d4ce:	f04f 33ff 	mov.w	r3, #4294967295
 802d4d2:	fb03 f302 	mul.w	r3, r3, r2
 802d4d6:	18cc      	adds	r4, r1, r3
 802d4d8:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802d4dc:	4bae      	ldr	r3, [pc, #696]	; (802d798 <sc_reduce+0x1c10>)
 802d4de:	fba2 0103 	umull	r0, r1, r2, r3
 802d4e2:	1863      	adds	r3, r4, r1
 802d4e4:	4619      	mov	r1, r3
 802d4e6:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802d4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d4ee:	1814      	adds	r4, r2, r0
 802d4f0:	f8c7 4398 	str.w	r4, [r7, #920]	; 0x398
 802d4f4:	414b      	adcs	r3, r1
 802d4f6:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 802d4fa:	e9d7 34e6 	ldrd	r3, r4, [r7, #920]	; 0x398
 802d4fe:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802d502:	e9c2 3400 	strd	r3, r4, [r2]
    s9 += s17 * 136657;
 802d506:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 802d50a:	4ba4      	ldr	r3, [pc, #656]	; (802d79c <sc_reduce+0x1c14>)
 802d50c:	fb03 f102 	mul.w	r1, r3, r2
 802d510:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802d514:	2300      	movs	r3, #0
 802d516:	fb03 f302 	mul.w	r3, r3, r2
 802d51a:	18cc      	adds	r4, r1, r3
 802d51c:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802d520:	4b9e      	ldr	r3, [pc, #632]	; (802d79c <sc_reduce+0x1c14>)
 802d522:	fba2 0103 	umull	r0, r1, r2, r3
 802d526:	1863      	adds	r3, r4, r1
 802d528:	4619      	mov	r1, r3
 802d52a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802d52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d532:	1814      	adds	r4, r2, r0
 802d534:	f8c7 4390 	str.w	r4, [r7, #912]	; 0x390
 802d538:	414b      	adcs	r3, r1
 802d53a:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 802d53e:	e9d7 34e4 	ldrd	r3, r4, [r7, #912]	; 0x390
 802d542:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802d546:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= s17 * 683901;
 802d54a:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 802d54e:	4b94      	ldr	r3, [pc, #592]	; (802d7a0 <sc_reduce+0x1c18>)
 802d550:	fb03 f102 	mul.w	r1, r3, r2
 802d554:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802d558:	f04f 33ff 	mov.w	r3, #4294967295
 802d55c:	fb03 f302 	mul.w	r3, r3, r2
 802d560:	18cc      	adds	r4, r1, r3
 802d562:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802d566:	4b8e      	ldr	r3, [pc, #568]	; (802d7a0 <sc_reduce+0x1c18>)
 802d568:	fba2 0103 	umull	r0, r1, r2, r3
 802d56c:	1863      	adds	r3, r4, r1
 802d56e:	4619      	mov	r1, r3
 802d570:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802d574:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d578:	1814      	adds	r4, r2, r0
 802d57a:	f8c7 4388 	str.w	r4, [r7, #904]	; 0x388
 802d57e:	414b      	adcs	r3, r1
 802d580:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 802d584:	e9d7 34e2 	ldrd	r3, r4, [r7, #904]	; 0x388
 802d588:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802d58c:	e9c2 3400 	strd	r3, r4, [r2]
    s17 = 0;
 802d590:	f04f 0200 	mov.w	r2, #0
 802d594:	f04f 0300 	mov.w	r3, #0
 802d598:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 802d59c:	e9c1 2300 	strd	r2, r3, [r1]
    s4 += s16 * 666643;
 802d5a0:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 802d5a4:	4b79      	ldr	r3, [pc, #484]	; (802d78c <sc_reduce+0x1c04>)
 802d5a6:	fb03 f102 	mul.w	r1, r3, r2
 802d5aa:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802d5ae:	2300      	movs	r3, #0
 802d5b0:	fb03 f302 	mul.w	r3, r3, r2
 802d5b4:	18cc      	adds	r4, r1, r3
 802d5b6:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802d5ba:	4b74      	ldr	r3, [pc, #464]	; (802d78c <sc_reduce+0x1c04>)
 802d5bc:	fba2 0103 	umull	r0, r1, r2, r3
 802d5c0:	1863      	adds	r3, r4, r1
 802d5c2:	4619      	mov	r1, r3
 802d5c4:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802d5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d5cc:	1814      	adds	r4, r2, r0
 802d5ce:	f8c7 4380 	str.w	r4, [r7, #896]	; 0x380
 802d5d2:	414b      	adcs	r3, r1
 802d5d4:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 802d5d8:	e9d7 34e0 	ldrd	r3, r4, [r7, #896]	; 0x380
 802d5dc:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802d5e0:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s16 * 470296;
 802d5e4:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 802d5e8:	4b69      	ldr	r3, [pc, #420]	; (802d790 <sc_reduce+0x1c08>)
 802d5ea:	fb03 f102 	mul.w	r1, r3, r2
 802d5ee:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802d5f2:	2300      	movs	r3, #0
 802d5f4:	fb03 f302 	mul.w	r3, r3, r2
 802d5f8:	18cc      	adds	r4, r1, r3
 802d5fa:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802d5fe:	4b64      	ldr	r3, [pc, #400]	; (802d790 <sc_reduce+0x1c08>)
 802d600:	fba2 0103 	umull	r0, r1, r2, r3
 802d604:	1863      	adds	r3, r4, r1
 802d606:	4619      	mov	r1, r3
 802d608:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802d60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d610:	1814      	adds	r4, r2, r0
 802d612:	f8c7 4378 	str.w	r4, [r7, #888]	; 0x378
 802d616:	414b      	adcs	r3, r1
 802d618:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 802d61c:	e9d7 34de 	ldrd	r3, r4, [r7, #888]	; 0x378
 802d620:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802d624:	e9c2 3400 	strd	r3, r4, [r2]
    s6 += s16 * 654183;
 802d628:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 802d62c:	4b59      	ldr	r3, [pc, #356]	; (802d794 <sc_reduce+0x1c0c>)
 802d62e:	fb03 f102 	mul.w	r1, r3, r2
 802d632:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802d636:	2300      	movs	r3, #0
 802d638:	fb03 f302 	mul.w	r3, r3, r2
 802d63c:	18cc      	adds	r4, r1, r3
 802d63e:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802d642:	4b54      	ldr	r3, [pc, #336]	; (802d794 <sc_reduce+0x1c0c>)
 802d644:	fba2 0103 	umull	r0, r1, r2, r3
 802d648:	1863      	adds	r3, r4, r1
 802d64a:	4619      	mov	r1, r3
 802d64c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802d650:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d654:	1814      	adds	r4, r2, r0
 802d656:	f8c7 4370 	str.w	r4, [r7, #880]	; 0x370
 802d65a:	414b      	adcs	r3, r1
 802d65c:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 802d660:	e9d7 34dc 	ldrd	r3, r4, [r7, #880]	; 0x370
 802d664:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802d668:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= s16 * 997805;
 802d66c:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 802d670:	4b49      	ldr	r3, [pc, #292]	; (802d798 <sc_reduce+0x1c10>)
 802d672:	fb03 f102 	mul.w	r1, r3, r2
 802d676:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802d67a:	f04f 33ff 	mov.w	r3, #4294967295
 802d67e:	fb03 f302 	mul.w	r3, r3, r2
 802d682:	18cc      	adds	r4, r1, r3
 802d684:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802d688:	4b43      	ldr	r3, [pc, #268]	; (802d798 <sc_reduce+0x1c10>)
 802d68a:	fba2 0103 	umull	r0, r1, r2, r3
 802d68e:	1863      	adds	r3, r4, r1
 802d690:	4619      	mov	r1, r3
 802d692:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802d696:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d69a:	1814      	adds	r4, r2, r0
 802d69c:	f8c7 4368 	str.w	r4, [r7, #872]	; 0x368
 802d6a0:	414b      	adcs	r3, r1
 802d6a2:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 802d6a6:	e9d7 34da 	ldrd	r3, r4, [r7, #872]	; 0x368
 802d6aa:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802d6ae:	e9c2 3400 	strd	r3, r4, [r2]
    s8 += s16 * 136657;
 802d6b2:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 802d6b6:	4b39      	ldr	r3, [pc, #228]	; (802d79c <sc_reduce+0x1c14>)
 802d6b8:	fb03 f102 	mul.w	r1, r3, r2
 802d6bc:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802d6c0:	2300      	movs	r3, #0
 802d6c2:	fb03 f302 	mul.w	r3, r3, r2
 802d6c6:	18cc      	adds	r4, r1, r3
 802d6c8:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802d6cc:	4b33      	ldr	r3, [pc, #204]	; (802d79c <sc_reduce+0x1c14>)
 802d6ce:	fba2 0103 	umull	r0, r1, r2, r3
 802d6d2:	1863      	adds	r3, r4, r1
 802d6d4:	4619      	mov	r1, r3
 802d6d6:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802d6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d6de:	1814      	adds	r4, r2, r0
 802d6e0:	f8c7 4360 	str.w	r4, [r7, #864]	; 0x360
 802d6e4:	414b      	adcs	r3, r1
 802d6e6:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 802d6ea:	e9d7 34d8 	ldrd	r3, r4, [r7, #864]	; 0x360
 802d6ee:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802d6f2:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= s16 * 683901;
 802d6f6:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 802d6fa:	4b29      	ldr	r3, [pc, #164]	; (802d7a0 <sc_reduce+0x1c18>)
 802d6fc:	fb03 f102 	mul.w	r1, r3, r2
 802d700:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802d704:	f04f 33ff 	mov.w	r3, #4294967295
 802d708:	fb03 f302 	mul.w	r3, r3, r2
 802d70c:	18cc      	adds	r4, r1, r3
 802d70e:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802d712:	4b23      	ldr	r3, [pc, #140]	; (802d7a0 <sc_reduce+0x1c18>)
 802d714:	fba2 0103 	umull	r0, r1, r2, r3
 802d718:	1863      	adds	r3, r4, r1
 802d71a:	4619      	mov	r1, r3
 802d71c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802d720:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d724:	1814      	adds	r4, r2, r0
 802d726:	f8c7 4358 	str.w	r4, [r7, #856]	; 0x358
 802d72a:	414b      	adcs	r3, r1
 802d72c:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 802d730:	e9d7 34d6 	ldrd	r3, r4, [r7, #856]	; 0x358
 802d734:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802d738:	e9c2 3400 	strd	r3, r4, [r2]
    s16 = 0;
 802d73c:	f04f 0200 	mov.w	r2, #0
 802d740:	f04f 0300 	mov.w	r3, #0
 802d744:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 802d748:	e9c1 2300 	strd	r2, r3, [r1]
    s3 += s15 * 666643;
 802d74c:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 802d750:	4b0e      	ldr	r3, [pc, #56]	; (802d78c <sc_reduce+0x1c04>)
 802d752:	fb03 f102 	mul.w	r1, r3, r2
 802d756:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802d75a:	2300      	movs	r3, #0
 802d75c:	fb03 f302 	mul.w	r3, r3, r2
 802d760:	18cc      	adds	r4, r1, r3
 802d762:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802d766:	4b09      	ldr	r3, [pc, #36]	; (802d78c <sc_reduce+0x1c04>)
 802d768:	fba2 0103 	umull	r0, r1, r2, r3
 802d76c:	1863      	adds	r3, r4, r1
 802d76e:	4619      	mov	r1, r3
 802d770:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802d774:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d778:	1814      	adds	r4, r2, r0
 802d77a:	f8c7 4350 	str.w	r4, [r7, #848]	; 0x350
 802d77e:	414b      	adcs	r3, r1
 802d780:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 802d784:	e9d7 34d4 	ldrd	r3, r4, [r7, #848]	; 0x350
 802d788:	e00c      	b.n	802d7a4 <sc_reduce+0x1c1c>
 802d78a:	bf00      	nop
 802d78c:	000a2c13 	.word	0x000a2c13
 802d790:	00072d18 	.word	0x00072d18
 802d794:	0009fb67 	.word	0x0009fb67
 802d798:	fff0c653 	.word	0xfff0c653
 802d79c:	000215d1 	.word	0x000215d1
 802d7a0:	fff59083 	.word	0xfff59083
 802d7a4:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802d7a8:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s15 * 470296;
 802d7ac:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 802d7b0:	4be4      	ldr	r3, [pc, #912]	; (802db44 <sc_reduce+0x1fbc>)
 802d7b2:	fb03 f102 	mul.w	r1, r3, r2
 802d7b6:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802d7ba:	2300      	movs	r3, #0
 802d7bc:	fb03 f302 	mul.w	r3, r3, r2
 802d7c0:	18cc      	adds	r4, r1, r3
 802d7c2:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802d7c6:	4bdf      	ldr	r3, [pc, #892]	; (802db44 <sc_reduce+0x1fbc>)
 802d7c8:	fba2 0103 	umull	r0, r1, r2, r3
 802d7cc:	1863      	adds	r3, r4, r1
 802d7ce:	4619      	mov	r1, r3
 802d7d0:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802d7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d7d8:	1814      	adds	r4, r2, r0
 802d7da:	f8c7 4348 	str.w	r4, [r7, #840]	; 0x348
 802d7de:	414b      	adcs	r3, r1
 802d7e0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 802d7e4:	e9d7 34d2 	ldrd	r3, r4, [r7, #840]	; 0x348
 802d7e8:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802d7ec:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s15 * 654183;
 802d7f0:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 802d7f4:	4bd4      	ldr	r3, [pc, #848]	; (802db48 <sc_reduce+0x1fc0>)
 802d7f6:	fb03 f102 	mul.w	r1, r3, r2
 802d7fa:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802d7fe:	2300      	movs	r3, #0
 802d800:	fb03 f302 	mul.w	r3, r3, r2
 802d804:	18cc      	adds	r4, r1, r3
 802d806:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802d80a:	4bcf      	ldr	r3, [pc, #828]	; (802db48 <sc_reduce+0x1fc0>)
 802d80c:	fba2 0103 	umull	r0, r1, r2, r3
 802d810:	1863      	adds	r3, r4, r1
 802d812:	4619      	mov	r1, r3
 802d814:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802d818:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d81c:	1814      	adds	r4, r2, r0
 802d81e:	f8c7 4340 	str.w	r4, [r7, #832]	; 0x340
 802d822:	414b      	adcs	r3, r1
 802d824:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 802d828:	e9d7 34d0 	ldrd	r3, r4, [r7, #832]	; 0x340
 802d82c:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802d830:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= s15 * 997805;
 802d834:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 802d838:	4bc4      	ldr	r3, [pc, #784]	; (802db4c <sc_reduce+0x1fc4>)
 802d83a:	fb03 f102 	mul.w	r1, r3, r2
 802d83e:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802d842:	f04f 33ff 	mov.w	r3, #4294967295
 802d846:	fb03 f302 	mul.w	r3, r3, r2
 802d84a:	18cc      	adds	r4, r1, r3
 802d84c:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802d850:	4bbe      	ldr	r3, [pc, #760]	; (802db4c <sc_reduce+0x1fc4>)
 802d852:	fba2 0103 	umull	r0, r1, r2, r3
 802d856:	1863      	adds	r3, r4, r1
 802d858:	4619      	mov	r1, r3
 802d85a:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802d85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d862:	1814      	adds	r4, r2, r0
 802d864:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 802d868:	414b      	adcs	r3, r1
 802d86a:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 802d86e:	e9d7 34ce 	ldrd	r3, r4, [r7, #824]	; 0x338
 802d872:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802d876:	e9c2 3400 	strd	r3, r4, [r2]
    s7 += s15 * 136657;
 802d87a:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 802d87e:	4bb4      	ldr	r3, [pc, #720]	; (802db50 <sc_reduce+0x1fc8>)
 802d880:	fb03 f102 	mul.w	r1, r3, r2
 802d884:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802d888:	2300      	movs	r3, #0
 802d88a:	fb03 f302 	mul.w	r3, r3, r2
 802d88e:	18cc      	adds	r4, r1, r3
 802d890:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802d894:	4bae      	ldr	r3, [pc, #696]	; (802db50 <sc_reduce+0x1fc8>)
 802d896:	fba2 0103 	umull	r0, r1, r2, r3
 802d89a:	1863      	adds	r3, r4, r1
 802d89c:	4619      	mov	r1, r3
 802d89e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802d8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d8a6:	1814      	adds	r4, r2, r0
 802d8a8:	f8c7 4330 	str.w	r4, [r7, #816]	; 0x330
 802d8ac:	414b      	adcs	r3, r1
 802d8ae:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 802d8b2:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 802d8b6:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802d8ba:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= s15 * 683901;
 802d8be:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 802d8c2:	4ba4      	ldr	r3, [pc, #656]	; (802db54 <sc_reduce+0x1fcc>)
 802d8c4:	fb03 f102 	mul.w	r1, r3, r2
 802d8c8:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802d8cc:	f04f 33ff 	mov.w	r3, #4294967295
 802d8d0:	fb03 f302 	mul.w	r3, r3, r2
 802d8d4:	18cc      	adds	r4, r1, r3
 802d8d6:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802d8da:	4b9e      	ldr	r3, [pc, #632]	; (802db54 <sc_reduce+0x1fcc>)
 802d8dc:	fba2 0103 	umull	r0, r1, r2, r3
 802d8e0:	1863      	adds	r3, r4, r1
 802d8e2:	4619      	mov	r1, r3
 802d8e4:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802d8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d8ec:	1814      	adds	r4, r2, r0
 802d8ee:	f8c7 4328 	str.w	r4, [r7, #808]	; 0x328
 802d8f2:	414b      	adcs	r3, r1
 802d8f4:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 802d8f8:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 802d8fc:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802d900:	e9c2 3400 	strd	r3, r4, [r2]
    s15 = 0;
 802d904:	f04f 0200 	mov.w	r2, #0
 802d908:	f04f 0300 	mov.w	r3, #0
 802d90c:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 802d910:	e9c1 2300 	strd	r2, r3, [r1]
    s2 += s14 * 666643;
 802d914:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 802d918:	4b8f      	ldr	r3, [pc, #572]	; (802db58 <sc_reduce+0x1fd0>)
 802d91a:	fb03 f102 	mul.w	r1, r3, r2
 802d91e:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802d922:	2300      	movs	r3, #0
 802d924:	fb03 f302 	mul.w	r3, r3, r2
 802d928:	18cc      	adds	r4, r1, r3
 802d92a:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802d92e:	4b8a      	ldr	r3, [pc, #552]	; (802db58 <sc_reduce+0x1fd0>)
 802d930:	fba2 0103 	umull	r0, r1, r2, r3
 802d934:	1863      	adds	r3, r4, r1
 802d936:	4619      	mov	r1, r3
 802d938:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802d93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d940:	1814      	adds	r4, r2, r0
 802d942:	f8c7 4320 	str.w	r4, [r7, #800]	; 0x320
 802d946:	414b      	adcs	r3, r1
 802d948:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 802d94c:	e9d7 34c8 	ldrd	r3, r4, [r7, #800]	; 0x320
 802d950:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802d954:	e9c2 3400 	strd	r3, r4, [r2]
    s3 += s14 * 470296;
 802d958:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 802d95c:	4b79      	ldr	r3, [pc, #484]	; (802db44 <sc_reduce+0x1fbc>)
 802d95e:	fb03 f102 	mul.w	r1, r3, r2
 802d962:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802d966:	2300      	movs	r3, #0
 802d968:	fb03 f302 	mul.w	r3, r3, r2
 802d96c:	18cc      	adds	r4, r1, r3
 802d96e:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802d972:	4b74      	ldr	r3, [pc, #464]	; (802db44 <sc_reduce+0x1fbc>)
 802d974:	fba2 0103 	umull	r0, r1, r2, r3
 802d978:	1863      	adds	r3, r4, r1
 802d97a:	4619      	mov	r1, r3
 802d97c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802d980:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d984:	1814      	adds	r4, r2, r0
 802d986:	f8c7 4318 	str.w	r4, [r7, #792]	; 0x318
 802d98a:	414b      	adcs	r3, r1
 802d98c:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 802d990:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 802d994:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802d998:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s14 * 654183;
 802d99c:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 802d9a0:	4b69      	ldr	r3, [pc, #420]	; (802db48 <sc_reduce+0x1fc0>)
 802d9a2:	fb03 f102 	mul.w	r1, r3, r2
 802d9a6:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802d9aa:	2300      	movs	r3, #0
 802d9ac:	fb03 f302 	mul.w	r3, r3, r2
 802d9b0:	18cc      	adds	r4, r1, r3
 802d9b2:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802d9b6:	4b64      	ldr	r3, [pc, #400]	; (802db48 <sc_reduce+0x1fc0>)
 802d9b8:	fba2 0103 	umull	r0, r1, r2, r3
 802d9bc:	1863      	adds	r3, r4, r1
 802d9be:	4619      	mov	r1, r3
 802d9c0:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802d9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d9c8:	1814      	adds	r4, r2, r0
 802d9ca:	f8c7 4310 	str.w	r4, [r7, #784]	; 0x310
 802d9ce:	414b      	adcs	r3, r1
 802d9d0:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 802d9d4:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 802d9d8:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802d9dc:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s14 * 997805;
 802d9e0:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 802d9e4:	4b59      	ldr	r3, [pc, #356]	; (802db4c <sc_reduce+0x1fc4>)
 802d9e6:	fb03 f102 	mul.w	r1, r3, r2
 802d9ea:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802d9ee:	f04f 33ff 	mov.w	r3, #4294967295
 802d9f2:	fb03 f302 	mul.w	r3, r3, r2
 802d9f6:	18cc      	adds	r4, r1, r3
 802d9f8:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802d9fc:	4b53      	ldr	r3, [pc, #332]	; (802db4c <sc_reduce+0x1fc4>)
 802d9fe:	fba2 0103 	umull	r0, r1, r2, r3
 802da02:	1863      	adds	r3, r4, r1
 802da04:	4619      	mov	r1, r3
 802da06:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802da0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802da0e:	1814      	adds	r4, r2, r0
 802da10:	f8c7 4308 	str.w	r4, [r7, #776]	; 0x308
 802da14:	414b      	adcs	r3, r1
 802da16:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 802da1a:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 802da1e:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802da22:	e9c2 3400 	strd	r3, r4, [r2]
    s6 += s14 * 136657;
 802da26:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 802da2a:	4b49      	ldr	r3, [pc, #292]	; (802db50 <sc_reduce+0x1fc8>)
 802da2c:	fb03 f102 	mul.w	r1, r3, r2
 802da30:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802da34:	2300      	movs	r3, #0
 802da36:	fb03 f302 	mul.w	r3, r3, r2
 802da3a:	18cc      	adds	r4, r1, r3
 802da3c:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802da40:	4b43      	ldr	r3, [pc, #268]	; (802db50 <sc_reduce+0x1fc8>)
 802da42:	fba2 0103 	umull	r0, r1, r2, r3
 802da46:	1863      	adds	r3, r4, r1
 802da48:	4619      	mov	r1, r3
 802da4a:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802da4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802da52:	1814      	adds	r4, r2, r0
 802da54:	f8c7 4300 	str.w	r4, [r7, #768]	; 0x300
 802da58:	414b      	adcs	r3, r1
 802da5a:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 802da5e:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 802da62:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802da66:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= s14 * 683901;
 802da6a:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 802da6e:	4b39      	ldr	r3, [pc, #228]	; (802db54 <sc_reduce+0x1fcc>)
 802da70:	fb03 f102 	mul.w	r1, r3, r2
 802da74:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802da78:	f04f 33ff 	mov.w	r3, #4294967295
 802da7c:	fb03 f302 	mul.w	r3, r3, r2
 802da80:	18cc      	adds	r4, r1, r3
 802da82:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802da86:	4b33      	ldr	r3, [pc, #204]	; (802db54 <sc_reduce+0x1fcc>)
 802da88:	fba2 0103 	umull	r0, r1, r2, r3
 802da8c:	1863      	adds	r3, r4, r1
 802da8e:	4619      	mov	r1, r3
 802da90:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802da94:	e9d3 2300 	ldrd	r2, r3, [r3]
 802da98:	1814      	adds	r4, r2, r0
 802da9a:	f8c7 42f8 	str.w	r4, [r7, #760]	; 0x2f8
 802da9e:	414b      	adcs	r3, r1
 802daa0:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 802daa4:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 802daa8:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802daac:	e9c2 3400 	strd	r3, r4, [r2]
    s14 = 0;
 802dab0:	f04f 0200 	mov.w	r2, #0
 802dab4:	f04f 0300 	mov.w	r3, #0
 802dab8:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 802dabc:	e9c1 2300 	strd	r2, r3, [r1]
    s1 += s13 * 666643;
 802dac0:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 802dac4:	4b24      	ldr	r3, [pc, #144]	; (802db58 <sc_reduce+0x1fd0>)
 802dac6:	fb03 f102 	mul.w	r1, r3, r2
 802daca:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802dace:	2300      	movs	r3, #0
 802dad0:	fb03 f302 	mul.w	r3, r3, r2
 802dad4:	18cc      	adds	r4, r1, r3
 802dad6:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802dada:	4b1f      	ldr	r3, [pc, #124]	; (802db58 <sc_reduce+0x1fd0>)
 802dadc:	fba2 0103 	umull	r0, r1, r2, r3
 802dae0:	1863      	adds	r3, r4, r1
 802dae2:	4619      	mov	r1, r3
 802dae4:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802dae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802daec:	1814      	adds	r4, r2, r0
 802daee:	f8c7 42f0 	str.w	r4, [r7, #752]	; 0x2f0
 802daf2:	414b      	adcs	r3, r1
 802daf4:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 802daf8:	e9d7 34bc 	ldrd	r3, r4, [r7, #752]	; 0x2f0
 802dafc:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802db00:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s13 * 470296;
 802db04:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 802db08:	4b0e      	ldr	r3, [pc, #56]	; (802db44 <sc_reduce+0x1fbc>)
 802db0a:	fb03 f102 	mul.w	r1, r3, r2
 802db0e:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802db12:	2300      	movs	r3, #0
 802db14:	fb03 f302 	mul.w	r3, r3, r2
 802db18:	18cc      	adds	r4, r1, r3
 802db1a:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802db1e:	4b09      	ldr	r3, [pc, #36]	; (802db44 <sc_reduce+0x1fbc>)
 802db20:	fba2 0103 	umull	r0, r1, r2, r3
 802db24:	1863      	adds	r3, r4, r1
 802db26:	4619      	mov	r1, r3
 802db28:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802db2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802db30:	1814      	adds	r4, r2, r0
 802db32:	f8c7 42e8 	str.w	r4, [r7, #744]	; 0x2e8
 802db36:	414b      	adcs	r3, r1
 802db38:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 802db3c:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 802db40:	e00c      	b.n	802db5c <sc_reduce+0x1fd4>
 802db42:	bf00      	nop
 802db44:	00072d18 	.word	0x00072d18
 802db48:	0009fb67 	.word	0x0009fb67
 802db4c:	fff0c653 	.word	0xfff0c653
 802db50:	000215d1 	.word	0x000215d1
 802db54:	fff59083 	.word	0xfff59083
 802db58:	000a2c13 	.word	0x000a2c13
 802db5c:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802db60:	e9c2 3400 	strd	r3, r4, [r2]
    s3 += s13 * 654183;
 802db64:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 802db68:	4be9      	ldr	r3, [pc, #932]	; (802df10 <sc_reduce+0x2388>)
 802db6a:	fb03 f102 	mul.w	r1, r3, r2
 802db6e:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802db72:	2300      	movs	r3, #0
 802db74:	fb03 f302 	mul.w	r3, r3, r2
 802db78:	18cc      	adds	r4, r1, r3
 802db7a:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802db7e:	4be4      	ldr	r3, [pc, #912]	; (802df10 <sc_reduce+0x2388>)
 802db80:	fba2 0103 	umull	r0, r1, r2, r3
 802db84:	1863      	adds	r3, r4, r1
 802db86:	4619      	mov	r1, r3
 802db88:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802db8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802db90:	1814      	adds	r4, r2, r0
 802db92:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 802db96:	414b      	adcs	r3, r1
 802db98:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 802db9c:	e9d7 34b8 	ldrd	r3, r4, [r7, #736]	; 0x2e0
 802dba0:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802dba4:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= s13 * 997805;
 802dba8:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 802dbac:	4bd9      	ldr	r3, [pc, #868]	; (802df14 <sc_reduce+0x238c>)
 802dbae:	fb03 f102 	mul.w	r1, r3, r2
 802dbb2:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802dbb6:	f04f 33ff 	mov.w	r3, #4294967295
 802dbba:	fb03 f302 	mul.w	r3, r3, r2
 802dbbe:	18cc      	adds	r4, r1, r3
 802dbc0:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802dbc4:	4bd3      	ldr	r3, [pc, #844]	; (802df14 <sc_reduce+0x238c>)
 802dbc6:	fba2 0103 	umull	r0, r1, r2, r3
 802dbca:	1863      	adds	r3, r4, r1
 802dbcc:	4619      	mov	r1, r3
 802dbce:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dbd6:	1814      	adds	r4, r2, r0
 802dbd8:	f8c7 42d8 	str.w	r4, [r7, #728]	; 0x2d8
 802dbdc:	414b      	adcs	r3, r1
 802dbde:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 802dbe2:	e9d7 34b6 	ldrd	r3, r4, [r7, #728]	; 0x2d8
 802dbe6:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802dbea:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s13 * 136657;
 802dbee:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 802dbf2:	4bc9      	ldr	r3, [pc, #804]	; (802df18 <sc_reduce+0x2390>)
 802dbf4:	fb03 f102 	mul.w	r1, r3, r2
 802dbf8:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802dbfc:	2300      	movs	r3, #0
 802dbfe:	fb03 f302 	mul.w	r3, r3, r2
 802dc02:	18cc      	adds	r4, r1, r3
 802dc04:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802dc08:	4bc3      	ldr	r3, [pc, #780]	; (802df18 <sc_reduce+0x2390>)
 802dc0a:	fba2 0103 	umull	r0, r1, r2, r3
 802dc0e:	1863      	adds	r3, r4, r1
 802dc10:	4619      	mov	r1, r3
 802dc12:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802dc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dc1a:	1814      	adds	r4, r2, r0
 802dc1c:	f8c7 42d0 	str.w	r4, [r7, #720]	; 0x2d0
 802dc20:	414b      	adcs	r3, r1
 802dc22:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 802dc26:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 802dc2a:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802dc2e:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= s13 * 683901;
 802dc32:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 802dc36:	4bb9      	ldr	r3, [pc, #740]	; (802df1c <sc_reduce+0x2394>)
 802dc38:	fb03 f102 	mul.w	r1, r3, r2
 802dc3c:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802dc40:	f04f 33ff 	mov.w	r3, #4294967295
 802dc44:	fb03 f302 	mul.w	r3, r3, r2
 802dc48:	18cc      	adds	r4, r1, r3
 802dc4a:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802dc4e:	4bb3      	ldr	r3, [pc, #716]	; (802df1c <sc_reduce+0x2394>)
 802dc50:	fba2 0103 	umull	r0, r1, r2, r3
 802dc54:	1863      	adds	r3, r4, r1
 802dc56:	4619      	mov	r1, r3
 802dc58:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802dc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dc60:	1814      	adds	r4, r2, r0
 802dc62:	f8c7 42c8 	str.w	r4, [r7, #712]	; 0x2c8
 802dc66:	414b      	adcs	r3, r1
 802dc68:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 802dc6c:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 802dc70:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802dc74:	e9c2 3400 	strd	r3, r4, [r2]
    s13 = 0;
 802dc78:	f04f 0200 	mov.w	r2, #0
 802dc7c:	f04f 0300 	mov.w	r3, #0
 802dc80:	f507 61f8 	add.w	r1, r7, #1984	; 0x7c0
 802dc84:	e9c1 2300 	strd	r2, r3, [r1]
    s0 += s12 * 666643;
 802dc88:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802dc8c:	4ba4      	ldr	r3, [pc, #656]	; (802df20 <sc_reduce+0x2398>)
 802dc8e:	fb03 f102 	mul.w	r1, r3, r2
 802dc92:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802dc96:	2300      	movs	r3, #0
 802dc98:	fb03 f302 	mul.w	r3, r3, r2
 802dc9c:	18cc      	adds	r4, r1, r3
 802dc9e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802dca2:	4b9f      	ldr	r3, [pc, #636]	; (802df20 <sc_reduce+0x2398>)
 802dca4:	fba2 0103 	umull	r0, r1, r2, r3
 802dca8:	1863      	adds	r3, r4, r1
 802dcaa:	4619      	mov	r1, r3
 802dcac:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802dcb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dcb4:	1814      	adds	r4, r2, r0
 802dcb6:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 802dcba:	414b      	adcs	r3, r1
 802dcbc:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 802dcc0:	e9d7 34b0 	ldrd	r3, r4, [r7, #704]	; 0x2c0
 802dcc4:	f607 0228 	addw	r2, r7, #2088	; 0x828
 802dcc8:	e9c2 3400 	strd	r3, r4, [r2]
    s1 += s12 * 470296;
 802dccc:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802dcd0:	4b94      	ldr	r3, [pc, #592]	; (802df24 <sc_reduce+0x239c>)
 802dcd2:	fb03 f102 	mul.w	r1, r3, r2
 802dcd6:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802dcda:	2300      	movs	r3, #0
 802dcdc:	fb03 f302 	mul.w	r3, r3, r2
 802dce0:	18cc      	adds	r4, r1, r3
 802dce2:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802dce6:	4b8f      	ldr	r3, [pc, #572]	; (802df24 <sc_reduce+0x239c>)
 802dce8:	fba2 0103 	umull	r0, r1, r2, r3
 802dcec:	1863      	adds	r3, r4, r1
 802dcee:	4619      	mov	r1, r3
 802dcf0:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802dcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dcf8:	1814      	adds	r4, r2, r0
 802dcfa:	f8c7 42b8 	str.w	r4, [r7, #696]	; 0x2b8
 802dcfe:	414b      	adcs	r3, r1
 802dd00:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 802dd04:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 802dd08:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802dd0c:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s12 * 654183;
 802dd10:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802dd14:	4b7e      	ldr	r3, [pc, #504]	; (802df10 <sc_reduce+0x2388>)
 802dd16:	fb03 f102 	mul.w	r1, r3, r2
 802dd1a:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802dd1e:	2300      	movs	r3, #0
 802dd20:	fb03 f302 	mul.w	r3, r3, r2
 802dd24:	18cc      	adds	r4, r1, r3
 802dd26:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802dd2a:	4b79      	ldr	r3, [pc, #484]	; (802df10 <sc_reduce+0x2388>)
 802dd2c:	fba2 0103 	umull	r0, r1, r2, r3
 802dd30:	1863      	adds	r3, r4, r1
 802dd32:	4619      	mov	r1, r3
 802dd34:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802dd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd3c:	1814      	adds	r4, r2, r0
 802dd3e:	f8c7 42b0 	str.w	r4, [r7, #688]	; 0x2b0
 802dd42:	414b      	adcs	r3, r1
 802dd44:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 802dd48:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 802dd4c:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802dd50:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= s12 * 997805;
 802dd54:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802dd58:	4b6e      	ldr	r3, [pc, #440]	; (802df14 <sc_reduce+0x238c>)
 802dd5a:	fb03 f102 	mul.w	r1, r3, r2
 802dd5e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802dd62:	f04f 33ff 	mov.w	r3, #4294967295
 802dd66:	fb03 f302 	mul.w	r3, r3, r2
 802dd6a:	18cc      	adds	r4, r1, r3
 802dd6c:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802dd70:	4b68      	ldr	r3, [pc, #416]	; (802df14 <sc_reduce+0x238c>)
 802dd72:	fba2 0103 	umull	r0, r1, r2, r3
 802dd76:	1863      	adds	r3, r4, r1
 802dd78:	4619      	mov	r1, r3
 802dd7a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802dd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd82:	1814      	adds	r4, r2, r0
 802dd84:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 802dd88:	414b      	adcs	r3, r1
 802dd8a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 802dd8e:	e9d7 34aa 	ldrd	r3, r4, [r7, #680]	; 0x2a8
 802dd92:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802dd96:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s12 * 136657;
 802dd9a:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802dd9e:	4b5e      	ldr	r3, [pc, #376]	; (802df18 <sc_reduce+0x2390>)
 802dda0:	fb03 f102 	mul.w	r1, r3, r2
 802dda4:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802dda8:	2300      	movs	r3, #0
 802ddaa:	fb03 f302 	mul.w	r3, r3, r2
 802ddae:	18cc      	adds	r4, r1, r3
 802ddb0:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802ddb4:	4b58      	ldr	r3, [pc, #352]	; (802df18 <sc_reduce+0x2390>)
 802ddb6:	fba2 0103 	umull	r0, r1, r2, r3
 802ddba:	1863      	adds	r3, r4, r1
 802ddbc:	4619      	mov	r1, r3
 802ddbe:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802ddc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ddc6:	1814      	adds	r4, r2, r0
 802ddc8:	f8c7 42a0 	str.w	r4, [r7, #672]	; 0x2a0
 802ddcc:	414b      	adcs	r3, r1
 802ddce:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 802ddd2:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 802ddd6:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802ddda:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s12 * 683901;
 802ddde:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802dde2:	4b4e      	ldr	r3, [pc, #312]	; (802df1c <sc_reduce+0x2394>)
 802dde4:	fb03 f102 	mul.w	r1, r3, r2
 802dde8:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802ddec:	f04f 33ff 	mov.w	r3, #4294967295
 802ddf0:	fb03 f302 	mul.w	r3, r3, r2
 802ddf4:	18cc      	adds	r4, r1, r3
 802ddf6:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802ddfa:	4b48      	ldr	r3, [pc, #288]	; (802df1c <sc_reduce+0x2394>)
 802ddfc:	fba2 0103 	umull	r0, r1, r2, r3
 802de00:	1863      	adds	r3, r4, r1
 802de02:	4619      	mov	r1, r3
 802de04:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802de08:	e9d3 2300 	ldrd	r2, r3, [r3]
 802de0c:	1814      	adds	r4, r2, r0
 802de0e:	f8c7 4298 	str.w	r4, [r7, #664]	; 0x298
 802de12:	414b      	adcs	r3, r1
 802de14:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 802de18:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 802de1c:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802de20:	e9c2 3400 	strd	r3, r4, [r2]
    s12 = 0;
 802de24:	f04f 0200 	mov.w	r2, #0
 802de28:	f04f 0300 	mov.w	r3, #0
 802de2c:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 802de30:	e9c1 2300 	strd	r2, r3, [r1]
    carry0 = (s0 + (1 << 20)) >> 21;
 802de34:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802de38:	e9d3 2300 	ldrd	r2, r3, [r3]
 802de3c:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802de40:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 802de44:	f143 0300 	adc.w	r3, r3, #0
 802de48:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 802de4c:	f04f 0200 	mov.w	r2, #0
 802de50:	f04f 0300 	mov.w	r3, #0
 802de54:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 802de58:	e9d1 4500 	ldrd	r4, r5, [r1]
 802de5c:	4621      	mov	r1, r4
 802de5e:	0d4a      	lsrs	r2, r1, #21
 802de60:	4629      	mov	r1, r5
 802de62:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802de66:	4629      	mov	r1, r5
 802de68:	154b      	asrs	r3, r1, #21
 802de6a:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 802de6e:	e9c1 2300 	strd	r2, r3, [r1]
    s1 += carry0;
 802de72:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802de76:	e9d3 0100 	ldrd	r0, r1, [r3]
 802de7a:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802de7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802de82:	1884      	adds	r4, r0, r2
 802de84:	f8c7 4290 	str.w	r4, [r7, #656]	; 0x290
 802de88:	eb41 0303 	adc.w	r3, r1, r3
 802de8c:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 802de90:	e9d7 34a4 	ldrd	r3, r4, [r7, #656]	; 0x290
 802de94:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802de98:	e9c2 3400 	strd	r3, r4, [r2]
    s0 -= carry0 << 21;
 802de9c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802dea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dea4:	f04f 0000 	mov.w	r0, #0
 802dea8:	f04f 0100 	mov.w	r1, #0
 802deac:	0559      	lsls	r1, r3, #21
 802deae:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802deb2:	0550      	lsls	r0, r2, #21
 802deb4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802deb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802debc:	1a14      	subs	r4, r2, r0
 802debe:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 802dec2:	eb63 0301 	sbc.w	r3, r3, r1
 802dec6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 802deca:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 802dece:	f607 0228 	addw	r2, r7, #2088	; 0x828
 802ded2:	e9c2 3400 	strd	r3, r4, [r2]
    carry2 = (s2 + (1 << 20)) >> 21;
 802ded6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802deda:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dede:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802dee2:	f8c7 1678 	str.w	r1, [r7, #1656]	; 0x678
 802dee6:	f143 0300 	adc.w	r3, r3, #0
 802deea:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 802deee:	f04f 0200 	mov.w	r2, #0
 802def2:	f04f 0300 	mov.w	r3, #0
 802def6:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 802defa:	e9d1 4500 	ldrd	r4, r5, [r1]
 802defe:	4621      	mov	r1, r4
 802df00:	0d4a      	lsrs	r2, r1, #21
 802df02:	4629      	mov	r1, r5
 802df04:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802df08:	4629      	mov	r1, r5
 802df0a:	154b      	asrs	r3, r1, #21
 802df0c:	e00c      	b.n	802df28 <sc_reduce+0x23a0>
 802df0e:	bf00      	nop
 802df10:	0009fb67 	.word	0x0009fb67
 802df14:	fff0c653 	.word	0xfff0c653
 802df18:	000215d1 	.word	0x000215d1
 802df1c:	fff59083 	.word	0xfff59083
 802df20:	000a2c13 	.word	0x000a2c13
 802df24:	00072d18 	.word	0x00072d18
 802df28:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 802df2c:	e9c1 2300 	strd	r2, r3, [r1]
    s3 += carry2;
 802df30:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802df34:	e9d3 0100 	ldrd	r0, r1, [r3]
 802df38:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802df3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df40:	1884      	adds	r4, r0, r2
 802df42:	f8c7 4280 	str.w	r4, [r7, #640]	; 0x280
 802df46:	eb41 0303 	adc.w	r3, r1, r3
 802df4a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 802df4e:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 802df52:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802df56:	e9c2 3400 	strd	r3, r4, [r2]
    s2 -= carry2 << 21;
 802df5a:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802df5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df62:	f04f 0000 	mov.w	r0, #0
 802df66:	f04f 0100 	mov.w	r1, #0
 802df6a:	0559      	lsls	r1, r3, #21
 802df6c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802df70:	0550      	lsls	r0, r2, #21
 802df72:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802df76:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df7a:	1a14      	subs	r4, r2, r0
 802df7c:	f8c7 4278 	str.w	r4, [r7, #632]	; 0x278
 802df80:	eb63 0301 	sbc.w	r3, r3, r1
 802df84:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 802df88:	e9d7 349e 	ldrd	r3, r4, [r7, #632]	; 0x278
 802df8c:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802df90:	e9c2 3400 	strd	r3, r4, [r2]
    carry4 = (s4 + (1 << 20)) >> 21;
 802df94:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802df98:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df9c:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802dfa0:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 802dfa4:	f143 0300 	adc.w	r3, r3, #0
 802dfa8:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 802dfac:	f04f 0200 	mov.w	r2, #0
 802dfb0:	f04f 0300 	mov.w	r3, #0
 802dfb4:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 802dfb8:	e9d1 4500 	ldrd	r4, r5, [r1]
 802dfbc:	4621      	mov	r1, r4
 802dfbe:	0d4a      	lsrs	r2, r1, #21
 802dfc0:	4629      	mov	r1, r5
 802dfc2:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802dfc6:	4629      	mov	r1, r5
 802dfc8:	154b      	asrs	r3, r1, #21
 802dfca:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 802dfce:	e9c1 2300 	strd	r2, r3, [r1]
    s5 += carry4;
 802dfd2:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802dfd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 802dfda:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802dfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dfe2:	1884      	adds	r4, r0, r2
 802dfe4:	f8c7 4270 	str.w	r4, [r7, #624]	; 0x270
 802dfe8:	eb41 0303 	adc.w	r3, r1, r3
 802dfec:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 802dff0:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 802dff4:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802dff8:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= carry4 << 21;
 802dffc:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802e000:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e004:	f04f 0000 	mov.w	r0, #0
 802e008:	f04f 0100 	mov.w	r1, #0
 802e00c:	0559      	lsls	r1, r3, #21
 802e00e:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e012:	0550      	lsls	r0, r2, #21
 802e014:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802e018:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e01c:	1a14      	subs	r4, r2, r0
 802e01e:	f8c7 4268 	str.w	r4, [r7, #616]	; 0x268
 802e022:	eb63 0301 	sbc.w	r3, r3, r1
 802e026:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 802e02a:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 802e02e:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802e032:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = (s6 + (1 << 20)) >> 21;
 802e036:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e03e:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802e042:	f8c7 1668 	str.w	r1, [r7, #1640]	; 0x668
 802e046:	f143 0300 	adc.w	r3, r3, #0
 802e04a:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 802e04e:	f04f 0200 	mov.w	r2, #0
 802e052:	f04f 0300 	mov.w	r3, #0
 802e056:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 802e05a:	e9d1 4500 	ldrd	r4, r5, [r1]
 802e05e:	4621      	mov	r1, r4
 802e060:	0d4a      	lsrs	r2, r1, #21
 802e062:	4629      	mov	r1, r5
 802e064:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802e068:	4629      	mov	r1, r5
 802e06a:	154b      	asrs	r3, r1, #21
 802e06c:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 802e070:	e9c1 2300 	strd	r2, r3, [r1]
    s7 += carry6;
 802e074:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802e078:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e07c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802e080:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e084:	1884      	adds	r4, r0, r2
 802e086:	f8c7 4260 	str.w	r4, [r7, #608]	; 0x260
 802e08a:	eb41 0303 	adc.w	r3, r1, r3
 802e08e:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 802e092:	e9d7 3498 	ldrd	r3, r4, [r7, #608]	; 0x260
 802e096:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802e09a:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 802e09e:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802e0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e0a6:	f04f 0000 	mov.w	r0, #0
 802e0aa:	f04f 0100 	mov.w	r1, #0
 802e0ae:	0559      	lsls	r1, r3, #21
 802e0b0:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e0b4:	0550      	lsls	r0, r2, #21
 802e0b6:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802e0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e0be:	1a14      	subs	r4, r2, r0
 802e0c0:	f8c7 4258 	str.w	r4, [r7, #600]	; 0x258
 802e0c4:	eb63 0301 	sbc.w	r3, r3, r1
 802e0c8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 802e0cc:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 802e0d0:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802e0d4:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = (s8 + (1 << 20)) >> 21;
 802e0d8:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e0e0:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802e0e4:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 802e0e8:	f143 0300 	adc.w	r3, r3, #0
 802e0ec:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 802e0f0:	f04f 0200 	mov.w	r2, #0
 802e0f4:	f04f 0300 	mov.w	r3, #0
 802e0f8:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 802e0fc:	e9d1 4500 	ldrd	r4, r5, [r1]
 802e100:	4621      	mov	r1, r4
 802e102:	0d4a      	lsrs	r2, r1, #21
 802e104:	4629      	mov	r1, r5
 802e106:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802e10a:	4629      	mov	r1, r5
 802e10c:	154b      	asrs	r3, r1, #21
 802e10e:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 802e112:	e9c1 2300 	strd	r2, r3, [r1]
    s9 += carry8;
 802e116:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802e11a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e11e:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802e122:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e126:	1884      	adds	r4, r0, r2
 802e128:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 802e12c:	eb41 0303 	adc.w	r3, r1, r3
 802e130:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 802e134:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 802e138:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802e13c:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 802e140:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802e144:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e148:	f04f 0000 	mov.w	r0, #0
 802e14c:	f04f 0100 	mov.w	r1, #0
 802e150:	0559      	lsls	r1, r3, #21
 802e152:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e156:	0550      	lsls	r0, r2, #21
 802e158:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802e15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e160:	1a14      	subs	r4, r2, r0
 802e162:	f8c7 4248 	str.w	r4, [r7, #584]	; 0x248
 802e166:	eb63 0301 	sbc.w	r3, r3, r1
 802e16a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 802e16e:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 802e172:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802e176:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = (s10 + (1 << 20)) >> 21;
 802e17a:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802e17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e182:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802e186:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 802e18a:	f143 0300 	adc.w	r3, r3, #0
 802e18e:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 802e192:	f04f 0200 	mov.w	r2, #0
 802e196:	f04f 0300 	mov.w	r3, #0
 802e19a:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 802e19e:	e9d1 4500 	ldrd	r4, r5, [r1]
 802e1a2:	4621      	mov	r1, r4
 802e1a4:	0d4a      	lsrs	r2, r1, #21
 802e1a6:	4629      	mov	r1, r5
 802e1a8:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802e1ac:	4629      	mov	r1, r5
 802e1ae:	154b      	asrs	r3, r1, #21
 802e1b0:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 802e1b4:	e9c1 2300 	strd	r2, r3, [r1]
    s11 += carry10;
 802e1b8:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802e1bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e1c0:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802e1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e1c8:	1884      	adds	r4, r0, r2
 802e1ca:	f8c7 4240 	str.w	r4, [r7, #576]	; 0x240
 802e1ce:	eb41 0303 	adc.w	r3, r1, r3
 802e1d2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 802e1d6:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 802e1da:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802e1de:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 802e1e2:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802e1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e1ea:	f04f 0000 	mov.w	r0, #0
 802e1ee:	f04f 0100 	mov.w	r1, #0
 802e1f2:	0559      	lsls	r1, r3, #21
 802e1f4:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e1f8:	0550      	lsls	r0, r2, #21
 802e1fa:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802e1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e202:	1a14      	subs	r4, r2, r0
 802e204:	f8c7 4238 	str.w	r4, [r7, #568]	; 0x238
 802e208:	eb63 0301 	sbc.w	r3, r3, r1
 802e20c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 802e210:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 802e214:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802e218:	e9c2 3400 	strd	r3, r4, [r2]
    carry1 = (s1 + (1 << 20)) >> 21;
 802e21c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802e220:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e224:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802e228:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 802e22c:	f143 0300 	adc.w	r3, r3, #0
 802e230:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 802e234:	f04f 0200 	mov.w	r2, #0
 802e238:	f04f 0300 	mov.w	r3, #0
 802e23c:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 802e240:	e9d1 4500 	ldrd	r4, r5, [r1]
 802e244:	4621      	mov	r1, r4
 802e246:	0d4a      	lsrs	r2, r1, #21
 802e248:	4629      	mov	r1, r5
 802e24a:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802e24e:	4629      	mov	r1, r5
 802e250:	154b      	asrs	r3, r1, #21
 802e252:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 802e256:	e9c1 2300 	strd	r2, r3, [r1]
    s2 += carry1;
 802e25a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802e25e:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e262:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802e266:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e26a:	1884      	adds	r4, r0, r2
 802e26c:	f8c7 4230 	str.w	r4, [r7, #560]	; 0x230
 802e270:	eb41 0303 	adc.w	r3, r1, r3
 802e274:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 802e278:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 802e27c:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802e280:	e9c2 3400 	strd	r3, r4, [r2]
    s1 -= carry1 << 21;
 802e284:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802e288:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e28c:	f04f 0000 	mov.w	r0, #0
 802e290:	f04f 0100 	mov.w	r1, #0
 802e294:	0559      	lsls	r1, r3, #21
 802e296:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e29a:	0550      	lsls	r0, r2, #21
 802e29c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802e2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e2a4:	1a14      	subs	r4, r2, r0
 802e2a6:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 802e2aa:	eb63 0301 	sbc.w	r3, r3, r1
 802e2ae:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 802e2b2:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 802e2b6:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802e2ba:	e9c2 3400 	strd	r3, r4, [r2]
    carry3 = (s3 + (1 << 20)) >> 21;
 802e2be:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802e2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e2c6:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802e2ca:	f8c7 1648 	str.w	r1, [r7, #1608]	; 0x648
 802e2ce:	f143 0300 	adc.w	r3, r3, #0
 802e2d2:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 802e2d6:	f04f 0200 	mov.w	r2, #0
 802e2da:	f04f 0300 	mov.w	r3, #0
 802e2de:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 802e2e2:	e9d1 4500 	ldrd	r4, r5, [r1]
 802e2e6:	4621      	mov	r1, r4
 802e2e8:	0d4a      	lsrs	r2, r1, #21
 802e2ea:	4629      	mov	r1, r5
 802e2ec:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802e2f0:	4629      	mov	r1, r5
 802e2f2:	154b      	asrs	r3, r1, #21
 802e2f4:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 802e2f8:	e9c1 2300 	strd	r2, r3, [r1]
    s4 += carry3;
 802e2fc:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802e300:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e304:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802e308:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e30c:	1884      	adds	r4, r0, r2
 802e30e:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 802e312:	eb41 0303 	adc.w	r3, r1, r3
 802e316:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802e31a:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 802e31e:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802e322:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= carry3 << 21;
 802e326:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802e32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e32e:	f04f 0000 	mov.w	r0, #0
 802e332:	f04f 0100 	mov.w	r1, #0
 802e336:	0559      	lsls	r1, r3, #21
 802e338:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e33c:	0550      	lsls	r0, r2, #21
 802e33e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802e342:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e346:	1a14      	subs	r4, r2, r0
 802e348:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 802e34c:	eb63 0301 	sbc.w	r3, r3, r1
 802e350:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 802e354:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	; 0x218
 802e358:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802e35c:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = (s5 + (1 << 20)) >> 21;
 802e360:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802e364:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e368:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802e36c:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 802e370:	f143 0300 	adc.w	r3, r3, #0
 802e374:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 802e378:	f04f 0200 	mov.w	r2, #0
 802e37c:	f04f 0300 	mov.w	r3, #0
 802e380:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 802e384:	e9d1 4500 	ldrd	r4, r5, [r1]
 802e388:	4621      	mov	r1, r4
 802e38a:	0d4a      	lsrs	r2, r1, #21
 802e38c:	4629      	mov	r1, r5
 802e38e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802e392:	4629      	mov	r1, r5
 802e394:	154b      	asrs	r3, r1, #21
 802e396:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 802e39a:	e9c1 2300 	strd	r2, r3, [r1]
    s6 += carry5;
 802e39e:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802e3a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e3a6:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802e3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e3ae:	1884      	adds	r4, r0, r2
 802e3b0:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 802e3b4:	eb41 0303 	adc.w	r3, r1, r3
 802e3b8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 802e3bc:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 802e3c0:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802e3c4:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= carry5 << 21;
 802e3c8:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802e3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e3d0:	f04f 0000 	mov.w	r0, #0
 802e3d4:	f04f 0100 	mov.w	r1, #0
 802e3d8:	0559      	lsls	r1, r3, #21
 802e3da:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e3de:	0550      	lsls	r0, r2, #21
 802e3e0:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802e3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e3e8:	1a14      	subs	r4, r2, r0
 802e3ea:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 802e3ee:	eb63 0301 	sbc.w	r3, r3, r1
 802e3f2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 802e3f6:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 802e3fa:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802e3fe:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = (s7 + (1 << 20)) >> 21;
 802e402:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802e406:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e40a:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802e40e:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 802e412:	f143 0300 	adc.w	r3, r3, #0
 802e416:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 802e41a:	f04f 0200 	mov.w	r2, #0
 802e41e:	f04f 0300 	mov.w	r3, #0
 802e422:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 802e426:	e9d1 4500 	ldrd	r4, r5, [r1]
 802e42a:	4621      	mov	r1, r4
 802e42c:	0d4a      	lsrs	r2, r1, #21
 802e42e:	4629      	mov	r1, r5
 802e430:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802e434:	4629      	mov	r1, r5
 802e436:	154b      	asrs	r3, r1, #21
 802e438:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 802e43c:	e9c1 2300 	strd	r2, r3, [r1]
    s8 += carry7;
 802e440:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802e444:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e448:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802e44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e450:	1884      	adds	r4, r0, r2
 802e452:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 802e456:	eb41 0303 	adc.w	r3, r1, r3
 802e45a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 802e45e:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 802e462:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802e466:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 802e46a:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802e46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e472:	f04f 0000 	mov.w	r0, #0
 802e476:	f04f 0100 	mov.w	r1, #0
 802e47a:	0559      	lsls	r1, r3, #21
 802e47c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e480:	0550      	lsls	r0, r2, #21
 802e482:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802e486:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e48a:	1a14      	subs	r4, r2, r0
 802e48c:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 802e490:	eb63 0301 	sbc.w	r3, r3, r1
 802e494:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 802e498:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 802e49c:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802e4a0:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = (s9 + (1 << 20)) >> 21;
 802e4a4:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802e4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e4ac:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802e4b0:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 802e4b4:	f143 0300 	adc.w	r3, r3, #0
 802e4b8:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 802e4bc:	f04f 0200 	mov.w	r2, #0
 802e4c0:	f04f 0300 	mov.w	r3, #0
 802e4c4:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 802e4c8:	e9d1 4500 	ldrd	r4, r5, [r1]
 802e4cc:	4621      	mov	r1, r4
 802e4ce:	0d4a      	lsrs	r2, r1, #21
 802e4d0:	4629      	mov	r1, r5
 802e4d2:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802e4d6:	4629      	mov	r1, r5
 802e4d8:	154b      	asrs	r3, r1, #21
 802e4da:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 802e4de:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += carry9;
 802e4e2:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802e4e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e4ea:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802e4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e4f2:	1884      	adds	r4, r0, r2
 802e4f4:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 802e4f8:	eb41 0303 	adc.w	r3, r1, r3
 802e4fc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 802e500:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 802e504:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802e508:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 802e50c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802e510:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e514:	f04f 0000 	mov.w	r0, #0
 802e518:	f04f 0100 	mov.w	r1, #0
 802e51c:	0559      	lsls	r1, r3, #21
 802e51e:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e522:	0550      	lsls	r0, r2, #21
 802e524:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802e528:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e52c:	1a14      	subs	r4, r2, r0
 802e52e:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 802e532:	eb63 0301 	sbc.w	r3, r3, r1
 802e536:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802e53a:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 802e53e:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802e542:	e9c2 3400 	strd	r3, r4, [r2]
    carry11 = (s11 + (1 << 20)) >> 21;
 802e546:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e54e:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802e552:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 802e556:	f143 0300 	adc.w	r3, r3, #0
 802e55a:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 802e55e:	f04f 0200 	mov.w	r2, #0
 802e562:	f04f 0300 	mov.w	r3, #0
 802e566:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 802e56a:	e9d1 4500 	ldrd	r4, r5, [r1]
 802e56e:	4621      	mov	r1, r4
 802e570:	0d4a      	lsrs	r2, r1, #21
 802e572:	4629      	mov	r1, r5
 802e574:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802e578:	4629      	mov	r1, r5
 802e57a:	154b      	asrs	r3, r1, #21
 802e57c:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 802e580:	e9c1 2300 	strd	r2, r3, [r1]
    s12 += carry11;
 802e584:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802e588:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e58c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 802e590:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e594:	1884      	adds	r4, r0, r2
 802e596:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 802e59a:	eb41 0303 	adc.w	r3, r1, r3
 802e59e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 802e5a2:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 802e5a6:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802e5aa:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= carry11 << 21;
 802e5ae:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 802e5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e5b6:	f04f 0000 	mov.w	r0, #0
 802e5ba:	f04f 0100 	mov.w	r1, #0
 802e5be:	0559      	lsls	r1, r3, #21
 802e5c0:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e5c4:	0550      	lsls	r0, r2, #21
 802e5c6:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802e5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e5ce:	1a14      	subs	r4, r2, r0
 802e5d0:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 802e5d4:	eb63 0301 	sbc.w	r3, r3, r1
 802e5d8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 802e5dc:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 802e5e0:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802e5e4:	e9c2 3400 	strd	r3, r4, [r2]
    s0 += s12 * 666643;
 802e5e8:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802e5ec:	4bee      	ldr	r3, [pc, #952]	; (802e9a8 <sc_reduce+0x2e20>)
 802e5ee:	fb03 f102 	mul.w	r1, r3, r2
 802e5f2:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e5f6:	2300      	movs	r3, #0
 802e5f8:	fb03 f302 	mul.w	r3, r3, r2
 802e5fc:	18cc      	adds	r4, r1, r3
 802e5fe:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e602:	4be9      	ldr	r3, [pc, #932]	; (802e9a8 <sc_reduce+0x2e20>)
 802e604:	fba2 0103 	umull	r0, r1, r2, r3
 802e608:	1863      	adds	r3, r4, r1
 802e60a:	4619      	mov	r1, r3
 802e60c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802e610:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e614:	1814      	adds	r4, r2, r0
 802e616:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 802e61a:	414b      	adcs	r3, r1
 802e61c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 802e620:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 802e624:	f607 0228 	addw	r2, r7, #2088	; 0x828
 802e628:	e9c2 3400 	strd	r3, r4, [r2]
    s1 += s12 * 470296;
 802e62c:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802e630:	4bde      	ldr	r3, [pc, #888]	; (802e9ac <sc_reduce+0x2e24>)
 802e632:	fb03 f102 	mul.w	r1, r3, r2
 802e636:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e63a:	2300      	movs	r3, #0
 802e63c:	fb03 f302 	mul.w	r3, r3, r2
 802e640:	18cc      	adds	r4, r1, r3
 802e642:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e646:	4bd9      	ldr	r3, [pc, #868]	; (802e9ac <sc_reduce+0x2e24>)
 802e648:	fba2 0103 	umull	r0, r1, r2, r3
 802e64c:	1863      	adds	r3, r4, r1
 802e64e:	4619      	mov	r1, r3
 802e650:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802e654:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e658:	1814      	adds	r4, r2, r0
 802e65a:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 802e65e:	414b      	adcs	r3, r1
 802e660:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 802e664:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 802e668:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802e66c:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s12 * 654183;
 802e670:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802e674:	4bce      	ldr	r3, [pc, #824]	; (802e9b0 <sc_reduce+0x2e28>)
 802e676:	fb03 f102 	mul.w	r1, r3, r2
 802e67a:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e67e:	2300      	movs	r3, #0
 802e680:	fb03 f302 	mul.w	r3, r3, r2
 802e684:	18cc      	adds	r4, r1, r3
 802e686:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e68a:	4bc9      	ldr	r3, [pc, #804]	; (802e9b0 <sc_reduce+0x2e28>)
 802e68c:	fba2 0103 	umull	r0, r1, r2, r3
 802e690:	1863      	adds	r3, r4, r1
 802e692:	4619      	mov	r1, r3
 802e694:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802e698:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e69c:	1814      	adds	r4, r2, r0
 802e69e:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 802e6a2:	414b      	adcs	r3, r1
 802e6a4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 802e6a8:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 802e6ac:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802e6b0:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= s12 * 997805;
 802e6b4:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802e6b8:	4bbe      	ldr	r3, [pc, #760]	; (802e9b4 <sc_reduce+0x2e2c>)
 802e6ba:	fb03 f102 	mul.w	r1, r3, r2
 802e6be:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e6c2:	f04f 33ff 	mov.w	r3, #4294967295
 802e6c6:	fb03 f302 	mul.w	r3, r3, r2
 802e6ca:	18cc      	adds	r4, r1, r3
 802e6cc:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e6d0:	4bb8      	ldr	r3, [pc, #736]	; (802e9b4 <sc_reduce+0x2e2c>)
 802e6d2:	fba2 0103 	umull	r0, r1, r2, r3
 802e6d6:	1863      	adds	r3, r4, r1
 802e6d8:	4619      	mov	r1, r3
 802e6da:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802e6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e6e2:	1814      	adds	r4, r2, r0
 802e6e4:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 802e6e8:	414b      	adcs	r3, r1
 802e6ea:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 802e6ee:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 802e6f2:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802e6f6:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s12 * 136657;
 802e6fa:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802e6fe:	4bae      	ldr	r3, [pc, #696]	; (802e9b8 <sc_reduce+0x2e30>)
 802e700:	fb03 f102 	mul.w	r1, r3, r2
 802e704:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e708:	2300      	movs	r3, #0
 802e70a:	fb03 f302 	mul.w	r3, r3, r2
 802e70e:	18cc      	adds	r4, r1, r3
 802e710:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e714:	4ba8      	ldr	r3, [pc, #672]	; (802e9b8 <sc_reduce+0x2e30>)
 802e716:	fba2 0103 	umull	r0, r1, r2, r3
 802e71a:	1863      	adds	r3, r4, r1
 802e71c:	4619      	mov	r1, r3
 802e71e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802e722:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e726:	1814      	adds	r4, r2, r0
 802e728:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 802e72c:	414b      	adcs	r3, r1
 802e72e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 802e732:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	; 0x1b0
 802e736:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802e73a:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s12 * 683901;
 802e73e:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802e742:	4b9e      	ldr	r3, [pc, #632]	; (802e9bc <sc_reduce+0x2e34>)
 802e744:	fb03 f102 	mul.w	r1, r3, r2
 802e748:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e74c:	f04f 33ff 	mov.w	r3, #4294967295
 802e750:	fb03 f302 	mul.w	r3, r3, r2
 802e754:	18cc      	adds	r4, r1, r3
 802e756:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e75a:	4b98      	ldr	r3, [pc, #608]	; (802e9bc <sc_reduce+0x2e34>)
 802e75c:	fba2 0103 	umull	r0, r1, r2, r3
 802e760:	1863      	adds	r3, r4, r1
 802e762:	4619      	mov	r1, r3
 802e764:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802e768:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e76c:	1814      	adds	r4, r2, r0
 802e76e:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 802e772:	414b      	adcs	r3, r1
 802e774:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 802e778:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 802e77c:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802e780:	e9c2 3400 	strd	r3, r4, [r2]
    s12 = 0;
 802e784:	f04f 0200 	mov.w	r2, #0
 802e788:	f04f 0300 	mov.w	r3, #0
 802e78c:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 802e790:	e9c1 2300 	strd	r2, r3, [r1]
    carry0 = s0 >> 21;
 802e794:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802e798:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e79c:	f04f 0000 	mov.w	r0, #0
 802e7a0:	f04f 0100 	mov.w	r1, #0
 802e7a4:	0d50      	lsrs	r0, r2, #21
 802e7a6:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e7aa:	1559      	asrs	r1, r3, #21
 802e7ac:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802e7b0:	e9c3 0100 	strd	r0, r1, [r3]
    s1 += carry0;
 802e7b4:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802e7b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e7bc:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802e7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e7c4:	1884      	adds	r4, r0, r2
 802e7c6:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 802e7ca:	eb41 0303 	adc.w	r3, r1, r3
 802e7ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 802e7d2:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 802e7d6:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802e7da:	e9c2 3400 	strd	r3, r4, [r2]
    s0 -= carry0 << 21;
 802e7de:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802e7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e7e6:	f04f 0000 	mov.w	r0, #0
 802e7ea:	f04f 0100 	mov.w	r1, #0
 802e7ee:	0559      	lsls	r1, r3, #21
 802e7f0:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e7f4:	0550      	lsls	r0, r2, #21
 802e7f6:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802e7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e7fe:	1a14      	subs	r4, r2, r0
 802e800:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 802e804:	eb63 0301 	sbc.w	r3, r3, r1
 802e808:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 802e80c:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 802e810:	f607 0228 	addw	r2, r7, #2088	; 0x828
 802e814:	e9c2 3400 	strd	r3, r4, [r2]
    carry1 = s1 >> 21;
 802e818:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802e81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e820:	f04f 0000 	mov.w	r0, #0
 802e824:	f04f 0100 	mov.w	r1, #0
 802e828:	0d50      	lsrs	r0, r2, #21
 802e82a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e82e:	1559      	asrs	r1, r3, #21
 802e830:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802e834:	e9c3 0100 	strd	r0, r1, [r3]
    s2 += carry1;
 802e838:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802e83c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e840:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802e844:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e848:	1884      	adds	r4, r0, r2
 802e84a:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 802e84e:	eb41 0303 	adc.w	r3, r1, r3
 802e852:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 802e856:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 802e85a:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802e85e:	e9c2 3400 	strd	r3, r4, [r2]
    s1 -= carry1 << 21;
 802e862:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802e866:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e86a:	f04f 0000 	mov.w	r0, #0
 802e86e:	f04f 0100 	mov.w	r1, #0
 802e872:	0559      	lsls	r1, r3, #21
 802e874:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e878:	0550      	lsls	r0, r2, #21
 802e87a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802e87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e882:	1a14      	subs	r4, r2, r0
 802e884:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 802e888:	eb63 0301 	sbc.w	r3, r3, r1
 802e88c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 802e890:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 802e894:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802e898:	e9c2 3400 	strd	r3, r4, [r2]
    carry2 = s2 >> 21;
 802e89c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802e8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e8a4:	f04f 0000 	mov.w	r0, #0
 802e8a8:	f04f 0100 	mov.w	r1, #0
 802e8ac:	0d50      	lsrs	r0, r2, #21
 802e8ae:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e8b2:	1559      	asrs	r1, r3, #21
 802e8b4:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802e8b8:	e9c3 0100 	strd	r0, r1, [r3]
    s3 += carry2;
 802e8bc:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802e8c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e8c4:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802e8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e8cc:	1884      	adds	r4, r0, r2
 802e8ce:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 802e8d2:	eb41 0303 	adc.w	r3, r1, r3
 802e8d6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 802e8da:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 802e8de:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802e8e2:	e9c2 3400 	strd	r3, r4, [r2]
    s2 -= carry2 << 21;
 802e8e6:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802e8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e8ee:	f04f 0000 	mov.w	r0, #0
 802e8f2:	f04f 0100 	mov.w	r1, #0
 802e8f6:	0559      	lsls	r1, r3, #21
 802e8f8:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e8fc:	0550      	lsls	r0, r2, #21
 802e8fe:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802e902:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e906:	1a14      	subs	r4, r2, r0
 802e908:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 802e90c:	eb63 0301 	sbc.w	r3, r3, r1
 802e910:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 802e914:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 802e918:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802e91c:	e9c2 3400 	strd	r3, r4, [r2]
    carry3 = s3 >> 21;
 802e920:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802e924:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e928:	f04f 0000 	mov.w	r0, #0
 802e92c:	f04f 0100 	mov.w	r1, #0
 802e930:	0d50      	lsrs	r0, r2, #21
 802e932:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e936:	1559      	asrs	r1, r3, #21
 802e938:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802e93c:	e9c3 0100 	strd	r0, r1, [r3]
    s4 += carry3;
 802e940:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802e944:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e948:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802e94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e950:	1884      	adds	r4, r0, r2
 802e952:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 802e956:	eb41 0303 	adc.w	r3, r1, r3
 802e95a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 802e95e:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 802e962:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802e966:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= carry3 << 21;
 802e96a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802e96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e972:	f04f 0000 	mov.w	r0, #0
 802e976:	f04f 0100 	mov.w	r1, #0
 802e97a:	0559      	lsls	r1, r3, #21
 802e97c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e980:	0550      	lsls	r0, r2, #21
 802e982:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802e986:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e98a:	1a14      	subs	r4, r2, r0
 802e98c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 802e990:	eb63 0301 	sbc.w	r3, r3, r1
 802e994:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 802e998:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 802e99c:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802e9a0:	e9c2 3400 	strd	r3, r4, [r2]
 802e9a4:	e00c      	b.n	802e9c0 <sc_reduce+0x2e38>
 802e9a6:	bf00      	nop
 802e9a8:	000a2c13 	.word	0x000a2c13
 802e9ac:	00072d18 	.word	0x00072d18
 802e9b0:	0009fb67 	.word	0x0009fb67
 802e9b4:	fff0c653 	.word	0xfff0c653
 802e9b8:	000215d1 	.word	0x000215d1
 802e9bc:	fff59083 	.word	0xfff59083
    carry4 = s4 >> 21;
 802e9c0:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802e9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e9c8:	f04f 0000 	mov.w	r0, #0
 802e9cc:	f04f 0100 	mov.w	r1, #0
 802e9d0:	0d50      	lsrs	r0, r2, #21
 802e9d2:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e9d6:	1559      	asrs	r1, r3, #21
 802e9d8:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802e9dc:	e9c3 0100 	strd	r0, r1, [r3]
    s5 += carry4;
 802e9e0:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802e9e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e9e8:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802e9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e9f0:	1884      	adds	r4, r0, r2
 802e9f2:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 802e9f6:	eb41 0303 	adc.w	r3, r1, r3
 802e9fa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 802e9fe:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 802ea02:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802ea06:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= carry4 << 21;
 802ea0a:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802ea0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ea12:	f04f 0000 	mov.w	r0, #0
 802ea16:	f04f 0100 	mov.w	r1, #0
 802ea1a:	0559      	lsls	r1, r3, #21
 802ea1c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802ea20:	0550      	lsls	r0, r2, #21
 802ea22:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802ea26:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ea2a:	1a14      	subs	r4, r2, r0
 802ea2c:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 802ea30:	eb63 0301 	sbc.w	r3, r3, r1
 802ea34:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 802ea38:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 802ea3c:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802ea40:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = s5 >> 21;
 802ea44:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802ea48:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ea4c:	f04f 0000 	mov.w	r0, #0
 802ea50:	f04f 0100 	mov.w	r1, #0
 802ea54:	0d50      	lsrs	r0, r2, #21
 802ea56:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802ea5a:	1559      	asrs	r1, r3, #21
 802ea5c:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802ea60:	e9c3 0100 	strd	r0, r1, [r3]
    s6 += carry5;
 802ea64:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802ea68:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ea6c:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802ea70:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ea74:	1884      	adds	r4, r0, r2
 802ea76:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 802ea7a:	eb41 0303 	adc.w	r3, r1, r3
 802ea7e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 802ea82:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 802ea86:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802ea8a:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= carry5 << 21;
 802ea8e:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802ea92:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ea96:	f04f 0000 	mov.w	r0, #0
 802ea9a:	f04f 0100 	mov.w	r1, #0
 802ea9e:	0559      	lsls	r1, r3, #21
 802eaa0:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802eaa4:	0550      	lsls	r0, r2, #21
 802eaa6:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802eaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eaae:	1a14      	subs	r4, r2, r0
 802eab0:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 802eab4:	eb63 0301 	sbc.w	r3, r3, r1
 802eab8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 802eabc:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 802eac0:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802eac4:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = s6 >> 21;
 802eac8:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802eacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ead0:	f04f 0000 	mov.w	r0, #0
 802ead4:	f04f 0100 	mov.w	r1, #0
 802ead8:	0d50      	lsrs	r0, r2, #21
 802eada:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802eade:	1559      	asrs	r1, r3, #21
 802eae0:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802eae4:	e9c3 0100 	strd	r0, r1, [r3]
    s7 += carry6;
 802eae8:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802eaec:	e9d3 0100 	ldrd	r0, r1, [r3]
 802eaf0:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802eaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eaf8:	1884      	adds	r4, r0, r2
 802eafa:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 802eafe:	eb41 0303 	adc.w	r3, r1, r3
 802eb02:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 802eb06:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 802eb0a:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802eb0e:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 802eb12:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802eb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eb1a:	f04f 0000 	mov.w	r0, #0
 802eb1e:	f04f 0100 	mov.w	r1, #0
 802eb22:	0559      	lsls	r1, r3, #21
 802eb24:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802eb28:	0550      	lsls	r0, r2, #21
 802eb2a:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802eb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eb32:	1a14      	subs	r4, r2, r0
 802eb34:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 802eb38:	eb63 0301 	sbc.w	r3, r3, r1
 802eb3c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 802eb40:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 802eb44:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802eb48:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = s7 >> 21;
 802eb4c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802eb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eb54:	f04f 0000 	mov.w	r0, #0
 802eb58:	f04f 0100 	mov.w	r1, #0
 802eb5c:	0d50      	lsrs	r0, r2, #21
 802eb5e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802eb62:	1559      	asrs	r1, r3, #21
 802eb64:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802eb68:	e9c3 0100 	strd	r0, r1, [r3]
    s8 += carry7;
 802eb6c:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802eb70:	e9d3 0100 	ldrd	r0, r1, [r3]
 802eb74:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802eb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eb7c:	1884      	adds	r4, r0, r2
 802eb7e:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 802eb82:	eb41 0303 	adc.w	r3, r1, r3
 802eb86:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 802eb8a:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 802eb8e:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802eb92:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 802eb96:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802eb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eb9e:	f04f 0000 	mov.w	r0, #0
 802eba2:	f04f 0100 	mov.w	r1, #0
 802eba6:	0559      	lsls	r1, r3, #21
 802eba8:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802ebac:	0550      	lsls	r0, r2, #21
 802ebae:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802ebb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ebb6:	1a14      	subs	r4, r2, r0
 802ebb8:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 802ebbc:	eb63 0301 	sbc.w	r3, r3, r1
 802ebc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 802ebc4:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 802ebc8:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802ebcc:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = s8 >> 21;
 802ebd0:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802ebd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ebd8:	f04f 0000 	mov.w	r0, #0
 802ebdc:	f04f 0100 	mov.w	r1, #0
 802ebe0:	0d50      	lsrs	r0, r2, #21
 802ebe2:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802ebe6:	1559      	asrs	r1, r3, #21
 802ebe8:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802ebec:	e9c3 0100 	strd	r0, r1, [r3]
    s9 += carry8;
 802ebf0:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802ebf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ebf8:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802ebfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec00:	1884      	adds	r4, r0, r2
 802ec02:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 802ec06:	eb41 0303 	adc.w	r3, r1, r3
 802ec0a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 802ec0e:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 802ec12:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802ec16:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 802ec1a:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802ec1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec22:	f04f 0000 	mov.w	r0, #0
 802ec26:	f04f 0100 	mov.w	r1, #0
 802ec2a:	0559      	lsls	r1, r3, #21
 802ec2c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802ec30:	0550      	lsls	r0, r2, #21
 802ec32:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802ec36:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec3a:	1a14      	subs	r4, r2, r0
 802ec3c:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 802ec40:	eb63 0301 	sbc.w	r3, r3, r1
 802ec44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 802ec48:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 802ec4c:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802ec50:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = s9 >> 21;
 802ec54:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802ec58:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec5c:	f04f 0000 	mov.w	r0, #0
 802ec60:	f04f 0100 	mov.w	r1, #0
 802ec64:	0d50      	lsrs	r0, r2, #21
 802ec66:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802ec6a:	1559      	asrs	r1, r3, #21
 802ec6c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802ec70:	e9c3 0100 	strd	r0, r1, [r3]
    s10 += carry9;
 802ec74:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802ec78:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ec7c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802ec80:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec84:	1884      	adds	r4, r0, r2
 802ec86:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 802ec8a:	eb41 0303 	adc.w	r3, r1, r3
 802ec8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 802ec92:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 802ec96:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802ec9a:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 802ec9e:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802eca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eca6:	f04f 0000 	mov.w	r0, #0
 802ecaa:	f04f 0100 	mov.w	r1, #0
 802ecae:	0559      	lsls	r1, r3, #21
 802ecb0:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802ecb4:	0550      	lsls	r0, r2, #21
 802ecb6:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802ecba:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ecbe:	1a14      	subs	r4, r2, r0
 802ecc0:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 802ecc4:	eb63 0301 	sbc.w	r3, r3, r1
 802ecc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 802eccc:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 802ecd0:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802ecd4:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = s10 >> 21;
 802ecd8:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802ecdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ece0:	f04f 0000 	mov.w	r0, #0
 802ece4:	f04f 0100 	mov.w	r1, #0
 802ece8:	0d50      	lsrs	r0, r2, #21
 802ecea:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802ecee:	1559      	asrs	r1, r3, #21
 802ecf0:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802ecf4:	e9c3 0100 	strd	r0, r1, [r3]
    s11 += carry10;
 802ecf8:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802ecfc:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ed00:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802ed04:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ed08:	1884      	adds	r4, r0, r2
 802ed0a:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 802ed0e:	eb41 0303 	adc.w	r3, r1, r3
 802ed12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 802ed16:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 802ed1a:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802ed1e:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 802ed22:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802ed26:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ed2a:	f04f 0000 	mov.w	r0, #0
 802ed2e:	f04f 0100 	mov.w	r1, #0
 802ed32:	0559      	lsls	r1, r3, #21
 802ed34:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802ed38:	0550      	lsls	r0, r2, #21
 802ed3a:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802ed3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ed42:	1a14      	subs	r4, r2, r0
 802ed44:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 802ed48:	eb63 0301 	sbc.w	r3, r3, r1
 802ed4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 802ed50:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 802ed54:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802ed58:	e9c2 3400 	strd	r3, r4, [r2]
    carry11 = s11 >> 21;
 802ed5c:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802ed60:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ed64:	f04f 0000 	mov.w	r0, #0
 802ed68:	f04f 0100 	mov.w	r1, #0
 802ed6c:	0d50      	lsrs	r0, r2, #21
 802ed6e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802ed72:	1559      	asrs	r1, r3, #21
 802ed74:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 802ed78:	e9c3 0100 	strd	r0, r1, [r3]
    s12 += carry11;
 802ed7c:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802ed80:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ed84:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 802ed88:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ed8c:	1884      	adds	r4, r0, r2
 802ed8e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 802ed92:	eb41 0303 	adc.w	r3, r1, r3
 802ed96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 802ed9a:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 802ed9e:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802eda2:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= carry11 << 21;
 802eda6:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 802edaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802edae:	f04f 0000 	mov.w	r0, #0
 802edb2:	f04f 0100 	mov.w	r1, #0
 802edb6:	0559      	lsls	r1, r3, #21
 802edb8:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802edbc:	0550      	lsls	r0, r2, #21
 802edbe:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802edc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802edc6:	1a14      	subs	r4, r2, r0
 802edc8:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 802edcc:	eb63 0301 	sbc.w	r3, r3, r1
 802edd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 802edd4:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 802edd8:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802eddc:	e9c2 3400 	strd	r3, r4, [r2]
    s0 += s12 * 666643;
 802ede0:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802ede4:	4bed      	ldr	r3, [pc, #948]	; (802f19c <sc_reduce+0x3614>)
 802ede6:	fb03 f102 	mul.w	r1, r3, r2
 802edea:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802edee:	2300      	movs	r3, #0
 802edf0:	fb03 f302 	mul.w	r3, r3, r2
 802edf4:	18cc      	adds	r4, r1, r3
 802edf6:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802edfa:	4be8      	ldr	r3, [pc, #928]	; (802f19c <sc_reduce+0x3614>)
 802edfc:	fba2 0103 	umull	r0, r1, r2, r3
 802ee00:	1863      	adds	r3, r4, r1
 802ee02:	4619      	mov	r1, r3
 802ee04:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802ee08:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ee0c:	1814      	adds	r4, r2, r0
 802ee0e:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 802ee12:	414b      	adcs	r3, r1
 802ee14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802ee18:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 802ee1c:	f607 0228 	addw	r2, r7, #2088	; 0x828
 802ee20:	e9c2 3400 	strd	r3, r4, [r2]
    s1 += s12 * 470296;
 802ee24:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802ee28:	4bdd      	ldr	r3, [pc, #884]	; (802f1a0 <sc_reduce+0x3618>)
 802ee2a:	fb03 f102 	mul.w	r1, r3, r2
 802ee2e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802ee32:	2300      	movs	r3, #0
 802ee34:	fb03 f302 	mul.w	r3, r3, r2
 802ee38:	18cc      	adds	r4, r1, r3
 802ee3a:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802ee3e:	4bd8      	ldr	r3, [pc, #864]	; (802f1a0 <sc_reduce+0x3618>)
 802ee40:	fba2 0103 	umull	r0, r1, r2, r3
 802ee44:	1863      	adds	r3, r4, r1
 802ee46:	4619      	mov	r1, r3
 802ee48:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802ee4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ee50:	1814      	adds	r4, r2, r0
 802ee52:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 802ee56:	414b      	adcs	r3, r1
 802ee58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 802ee5c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 802ee60:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802ee64:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s12 * 654183;
 802ee68:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802ee6c:	4bcd      	ldr	r3, [pc, #820]	; (802f1a4 <sc_reduce+0x361c>)
 802ee6e:	fb03 f102 	mul.w	r1, r3, r2
 802ee72:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802ee76:	2300      	movs	r3, #0
 802ee78:	fb03 f302 	mul.w	r3, r3, r2
 802ee7c:	18cc      	adds	r4, r1, r3
 802ee7e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802ee82:	4bc8      	ldr	r3, [pc, #800]	; (802f1a4 <sc_reduce+0x361c>)
 802ee84:	fba2 0103 	umull	r0, r1, r2, r3
 802ee88:	1863      	adds	r3, r4, r1
 802ee8a:	4619      	mov	r1, r3
 802ee8c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802ee90:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ee94:	1814      	adds	r4, r2, r0
 802ee96:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 802ee9a:	414b      	adcs	r3, r1
 802ee9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 802eea0:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 802eea4:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802eea8:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= s12 * 997805;
 802eeac:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802eeb0:	4bbd      	ldr	r3, [pc, #756]	; (802f1a8 <sc_reduce+0x3620>)
 802eeb2:	fb03 f102 	mul.w	r1, r3, r2
 802eeb6:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802eeba:	f04f 33ff 	mov.w	r3, #4294967295
 802eebe:	fb03 f302 	mul.w	r3, r3, r2
 802eec2:	18cc      	adds	r4, r1, r3
 802eec4:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802eec8:	4bb7      	ldr	r3, [pc, #732]	; (802f1a8 <sc_reduce+0x3620>)
 802eeca:	fba2 0103 	umull	r0, r1, r2, r3
 802eece:	1863      	adds	r3, r4, r1
 802eed0:	4619      	mov	r1, r3
 802eed2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802eed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eeda:	1814      	adds	r4, r2, r0
 802eedc:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 802eee0:	414b      	adcs	r3, r1
 802eee2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802eee6:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 802eeea:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802eeee:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s12 * 136657;
 802eef2:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802eef6:	4bad      	ldr	r3, [pc, #692]	; (802f1ac <sc_reduce+0x3624>)
 802eef8:	fb03 f102 	mul.w	r1, r3, r2
 802eefc:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802ef00:	2300      	movs	r3, #0
 802ef02:	fb03 f302 	mul.w	r3, r3, r2
 802ef06:	18cc      	adds	r4, r1, r3
 802ef08:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802ef0c:	4ba7      	ldr	r3, [pc, #668]	; (802f1ac <sc_reduce+0x3624>)
 802ef0e:	fba2 0103 	umull	r0, r1, r2, r3
 802ef12:	1863      	adds	r3, r4, r1
 802ef14:	4619      	mov	r1, r3
 802ef16:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802ef1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ef1e:	1814      	adds	r4, r2, r0
 802ef20:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 802ef24:	414b      	adcs	r3, r1
 802ef26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802ef2a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 802ef2e:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802ef32:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s12 * 683901;
 802ef36:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802ef3a:	4b9d      	ldr	r3, [pc, #628]	; (802f1b0 <sc_reduce+0x3628>)
 802ef3c:	fb03 f102 	mul.w	r1, r3, r2
 802ef40:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802ef44:	f04f 33ff 	mov.w	r3, #4294967295
 802ef48:	fb03 f302 	mul.w	r3, r3, r2
 802ef4c:	18cc      	adds	r4, r1, r3
 802ef4e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802ef52:	4b97      	ldr	r3, [pc, #604]	; (802f1b0 <sc_reduce+0x3628>)
 802ef54:	fba2 0103 	umull	r0, r1, r2, r3
 802ef58:	1863      	adds	r3, r4, r1
 802ef5a:	4619      	mov	r1, r3
 802ef5c:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802ef60:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ef64:	1814      	adds	r4, r2, r0
 802ef66:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 802ef6a:	414b      	adcs	r3, r1
 802ef6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 802ef70:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 802ef74:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802ef78:	e9c2 3400 	strd	r3, r4, [r2]
    s12 = 0;
 802ef7c:	f04f 0200 	mov.w	r2, #0
 802ef80:	f04f 0300 	mov.w	r3, #0
 802ef84:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 802ef88:	e9c1 2300 	strd	r2, r3, [r1]
    carry0 = s0 >> 21;
 802ef8c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802ef90:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ef94:	f04f 0000 	mov.w	r0, #0
 802ef98:	f04f 0100 	mov.w	r1, #0
 802ef9c:	0d50      	lsrs	r0, r2, #21
 802ef9e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802efa2:	1559      	asrs	r1, r3, #21
 802efa4:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802efa8:	e9c3 0100 	strd	r0, r1, [r3]
    s1 += carry0;
 802efac:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802efb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 802efb4:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802efb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802efbc:	1884      	adds	r4, r0, r2
 802efbe:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 802efc2:	eb41 0303 	adc.w	r3, r1, r3
 802efc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802efca:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 802efce:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802efd2:	e9c2 3400 	strd	r3, r4, [r2]
    s0 -= carry0 << 21;
 802efd6:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802efda:	e9d3 2300 	ldrd	r2, r3, [r3]
 802efde:	f04f 0000 	mov.w	r0, #0
 802efe2:	f04f 0100 	mov.w	r1, #0
 802efe6:	0559      	lsls	r1, r3, #21
 802efe8:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802efec:	0550      	lsls	r0, r2, #21
 802efee:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802eff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eff6:	1a14      	subs	r4, r2, r0
 802eff8:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 802effc:	eb63 0301 	sbc.w	r3, r3, r1
 802f000:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802f004:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 802f008:	f607 0228 	addw	r2, r7, #2088	; 0x828
 802f00c:	e9c2 3400 	strd	r3, r4, [r2]
    carry1 = s1 >> 21;
 802f010:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802f014:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f018:	f04f 0000 	mov.w	r0, #0
 802f01c:	f04f 0100 	mov.w	r1, #0
 802f020:	0d50      	lsrs	r0, r2, #21
 802f022:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802f026:	1559      	asrs	r1, r3, #21
 802f028:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802f02c:	e9c3 0100 	strd	r0, r1, [r3]
    s2 += carry1;
 802f030:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802f034:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f038:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802f03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f040:	1884      	adds	r4, r0, r2
 802f042:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 802f046:	eb41 0303 	adc.w	r3, r1, r3
 802f04a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 802f04e:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 802f052:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802f056:	e9c2 3400 	strd	r3, r4, [r2]
    s1 -= carry1 << 21;
 802f05a:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802f05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f062:	f04f 0000 	mov.w	r0, #0
 802f066:	f04f 0100 	mov.w	r1, #0
 802f06a:	0559      	lsls	r1, r3, #21
 802f06c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802f070:	0550      	lsls	r0, r2, #21
 802f072:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802f076:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f07a:	1a14      	subs	r4, r2, r0
 802f07c:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 802f080:	eb63 0301 	sbc.w	r3, r3, r1
 802f084:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802f088:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 802f08c:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802f090:	e9c2 3400 	strd	r3, r4, [r2]
    carry2 = s2 >> 21;
 802f094:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802f098:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f09c:	f04f 0000 	mov.w	r0, #0
 802f0a0:	f04f 0100 	mov.w	r1, #0
 802f0a4:	0d50      	lsrs	r0, r2, #21
 802f0a6:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802f0aa:	1559      	asrs	r1, r3, #21
 802f0ac:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802f0b0:	e9c3 0100 	strd	r0, r1, [r3]
    s3 += carry2;
 802f0b4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802f0b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f0bc:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802f0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f0c4:	1884      	adds	r4, r0, r2
 802f0c6:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 802f0ca:	eb41 0303 	adc.w	r3, r1, r3
 802f0ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 802f0d2:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 802f0d6:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802f0da:	e9c2 3400 	strd	r3, r4, [r2]
    s2 -= carry2 << 21;
 802f0de:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802f0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f0e6:	f04f 0000 	mov.w	r0, #0
 802f0ea:	f04f 0100 	mov.w	r1, #0
 802f0ee:	0559      	lsls	r1, r3, #21
 802f0f0:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802f0f4:	0550      	lsls	r0, r2, #21
 802f0f6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802f0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f0fe:	1a14      	subs	r4, r2, r0
 802f100:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 802f104:	eb63 0301 	sbc.w	r3, r3, r1
 802f108:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802f10c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 802f110:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802f114:	e9c2 3400 	strd	r3, r4, [r2]
    carry3 = s3 >> 21;
 802f118:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802f11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f120:	f04f 0000 	mov.w	r0, #0
 802f124:	f04f 0100 	mov.w	r1, #0
 802f128:	0d50      	lsrs	r0, r2, #21
 802f12a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802f12e:	1559      	asrs	r1, r3, #21
 802f130:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802f134:	e9c3 0100 	strd	r0, r1, [r3]
    s4 += carry3;
 802f138:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802f13c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f140:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802f144:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f148:	1884      	adds	r4, r0, r2
 802f14a:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 802f14e:	eb41 0303 	adc.w	r3, r1, r3
 802f152:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802f156:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 802f15a:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802f15e:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= carry3 << 21;
 802f162:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802f166:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f16a:	f04f 0000 	mov.w	r0, #0
 802f16e:	f04f 0100 	mov.w	r1, #0
 802f172:	0559      	lsls	r1, r3, #21
 802f174:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802f178:	0550      	lsls	r0, r2, #21
 802f17a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802f17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f182:	1a14      	subs	r4, r2, r0
 802f184:	67bc      	str	r4, [r7, #120]	; 0x78
 802f186:	eb63 0301 	sbc.w	r3, r3, r1
 802f18a:	67fb      	str	r3, [r7, #124]	; 0x7c
 802f18c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 802f190:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802f194:	e9c2 3400 	strd	r3, r4, [r2]
 802f198:	e00c      	b.n	802f1b4 <sc_reduce+0x362c>
 802f19a:	bf00      	nop
 802f19c:	000a2c13 	.word	0x000a2c13
 802f1a0:	00072d18 	.word	0x00072d18
 802f1a4:	0009fb67 	.word	0x0009fb67
 802f1a8:	fff0c653 	.word	0xfff0c653
 802f1ac:	000215d1 	.word	0x000215d1
 802f1b0:	fff59083 	.word	0xfff59083
    carry4 = s4 >> 21;
 802f1b4:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802f1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f1bc:	f04f 0000 	mov.w	r0, #0
 802f1c0:	f04f 0100 	mov.w	r1, #0
 802f1c4:	0d50      	lsrs	r0, r2, #21
 802f1c6:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802f1ca:	1559      	asrs	r1, r3, #21
 802f1cc:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802f1d0:	e9c3 0100 	strd	r0, r1, [r3]
    s5 += carry4;
 802f1d4:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802f1d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f1dc:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802f1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f1e4:	1884      	adds	r4, r0, r2
 802f1e6:	673c      	str	r4, [r7, #112]	; 0x70
 802f1e8:	eb41 0303 	adc.w	r3, r1, r3
 802f1ec:	677b      	str	r3, [r7, #116]	; 0x74
 802f1ee:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 802f1f2:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802f1f6:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= carry4 << 21;
 802f1fa:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802f1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f202:	f04f 0000 	mov.w	r0, #0
 802f206:	f04f 0100 	mov.w	r1, #0
 802f20a:	0559      	lsls	r1, r3, #21
 802f20c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802f210:	0550      	lsls	r0, r2, #21
 802f212:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802f216:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f21a:	1a14      	subs	r4, r2, r0
 802f21c:	66bc      	str	r4, [r7, #104]	; 0x68
 802f21e:	eb63 0301 	sbc.w	r3, r3, r1
 802f222:	66fb      	str	r3, [r7, #108]	; 0x6c
 802f224:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 802f228:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802f22c:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = s5 >> 21;
 802f230:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802f234:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f238:	f04f 0000 	mov.w	r0, #0
 802f23c:	f04f 0100 	mov.w	r1, #0
 802f240:	0d50      	lsrs	r0, r2, #21
 802f242:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802f246:	1559      	asrs	r1, r3, #21
 802f248:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802f24c:	e9c3 0100 	strd	r0, r1, [r3]
    s6 += carry5;
 802f250:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802f254:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f258:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802f25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f260:	1884      	adds	r4, r0, r2
 802f262:	663c      	str	r4, [r7, #96]	; 0x60
 802f264:	eb41 0303 	adc.w	r3, r1, r3
 802f268:	667b      	str	r3, [r7, #100]	; 0x64
 802f26a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 802f26e:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802f272:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= carry5 << 21;
 802f276:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802f27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f27e:	f04f 0000 	mov.w	r0, #0
 802f282:	f04f 0100 	mov.w	r1, #0
 802f286:	0559      	lsls	r1, r3, #21
 802f288:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802f28c:	0550      	lsls	r0, r2, #21
 802f28e:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802f292:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f296:	1a14      	subs	r4, r2, r0
 802f298:	65bc      	str	r4, [r7, #88]	; 0x58
 802f29a:	eb63 0301 	sbc.w	r3, r3, r1
 802f29e:	65fb      	str	r3, [r7, #92]	; 0x5c
 802f2a0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 802f2a4:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802f2a8:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = s6 >> 21;
 802f2ac:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802f2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f2b4:	f04f 0000 	mov.w	r0, #0
 802f2b8:	f04f 0100 	mov.w	r1, #0
 802f2bc:	0d50      	lsrs	r0, r2, #21
 802f2be:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802f2c2:	1559      	asrs	r1, r3, #21
 802f2c4:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802f2c8:	e9c3 0100 	strd	r0, r1, [r3]
    s7 += carry6;
 802f2cc:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802f2d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f2d4:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802f2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f2dc:	1884      	adds	r4, r0, r2
 802f2de:	653c      	str	r4, [r7, #80]	; 0x50
 802f2e0:	eb41 0303 	adc.w	r3, r1, r3
 802f2e4:	657b      	str	r3, [r7, #84]	; 0x54
 802f2e6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 802f2ea:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802f2ee:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 802f2f2:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802f2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f2fa:	f04f 0000 	mov.w	r0, #0
 802f2fe:	f04f 0100 	mov.w	r1, #0
 802f302:	0559      	lsls	r1, r3, #21
 802f304:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802f308:	0550      	lsls	r0, r2, #21
 802f30a:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802f30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f312:	1a14      	subs	r4, r2, r0
 802f314:	64bc      	str	r4, [r7, #72]	; 0x48
 802f316:	eb63 0301 	sbc.w	r3, r3, r1
 802f31a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802f31c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 802f320:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802f324:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = s7 >> 21;
 802f328:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802f32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f330:	f04f 0000 	mov.w	r0, #0
 802f334:	f04f 0100 	mov.w	r1, #0
 802f338:	0d50      	lsrs	r0, r2, #21
 802f33a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802f33e:	1559      	asrs	r1, r3, #21
 802f340:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802f344:	e9c3 0100 	strd	r0, r1, [r3]
    s8 += carry7;
 802f348:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802f34c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f350:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802f354:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f358:	1884      	adds	r4, r0, r2
 802f35a:	643c      	str	r4, [r7, #64]	; 0x40
 802f35c:	eb41 0303 	adc.w	r3, r1, r3
 802f360:	647b      	str	r3, [r7, #68]	; 0x44
 802f362:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 802f366:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802f36a:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 802f36e:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802f372:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f376:	f04f 0000 	mov.w	r0, #0
 802f37a:	f04f 0100 	mov.w	r1, #0
 802f37e:	0559      	lsls	r1, r3, #21
 802f380:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802f384:	0550      	lsls	r0, r2, #21
 802f386:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802f38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f38e:	1a14      	subs	r4, r2, r0
 802f390:	63bc      	str	r4, [r7, #56]	; 0x38
 802f392:	eb63 0301 	sbc.w	r3, r3, r1
 802f396:	63fb      	str	r3, [r7, #60]	; 0x3c
 802f398:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 802f39c:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802f3a0:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = s8 >> 21;
 802f3a4:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802f3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f3ac:	f04f 0000 	mov.w	r0, #0
 802f3b0:	f04f 0100 	mov.w	r1, #0
 802f3b4:	0d50      	lsrs	r0, r2, #21
 802f3b6:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802f3ba:	1559      	asrs	r1, r3, #21
 802f3bc:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802f3c0:	e9c3 0100 	strd	r0, r1, [r3]
    s9 += carry8;
 802f3c4:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802f3c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f3cc:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802f3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f3d4:	1884      	adds	r4, r0, r2
 802f3d6:	633c      	str	r4, [r7, #48]	; 0x30
 802f3d8:	eb41 0303 	adc.w	r3, r1, r3
 802f3dc:	637b      	str	r3, [r7, #52]	; 0x34
 802f3de:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 802f3e2:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802f3e6:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 802f3ea:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802f3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f3f2:	f04f 0000 	mov.w	r0, #0
 802f3f6:	f04f 0100 	mov.w	r1, #0
 802f3fa:	0559      	lsls	r1, r3, #21
 802f3fc:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802f400:	0550      	lsls	r0, r2, #21
 802f402:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802f406:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f40a:	1a14      	subs	r4, r2, r0
 802f40c:	62bc      	str	r4, [r7, #40]	; 0x28
 802f40e:	eb63 0301 	sbc.w	r3, r3, r1
 802f412:	62fb      	str	r3, [r7, #44]	; 0x2c
 802f414:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 802f418:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802f41c:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = s9 >> 21;
 802f420:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802f424:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f428:	f04f 0200 	mov.w	r2, #0
 802f42c:	f04f 0300 	mov.w	r3, #0
 802f430:	0d42      	lsrs	r2, r0, #21
 802f432:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802f436:	154b      	asrs	r3, r1, #21
 802f438:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 802f43c:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += carry9;
 802f440:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802f444:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f448:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802f44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f450:	1884      	adds	r4, r0, r2
 802f452:	623c      	str	r4, [r7, #32]
 802f454:	eb41 0303 	adc.w	r3, r1, r3
 802f458:	627b      	str	r3, [r7, #36]	; 0x24
 802f45a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 802f45e:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802f462:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 802f466:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802f46a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f46e:	f04f 0200 	mov.w	r2, #0
 802f472:	f04f 0300 	mov.w	r3, #0
 802f476:	054b      	lsls	r3, r1, #21
 802f478:	ea43 23d0 	orr.w	r3, r3, r0, lsr #11
 802f47c:	0542      	lsls	r2, r0, #21
 802f47e:	f507 61fc 	add.w	r1, r7, #2016	; 0x7e0
 802f482:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f486:	1a84      	subs	r4, r0, r2
 802f488:	61bc      	str	r4, [r7, #24]
 802f48a:	eb61 0303 	sbc.w	r3, r1, r3
 802f48e:	61fb      	str	r3, [r7, #28]
 802f490:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 802f494:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802f498:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = s10 >> 21;
 802f49c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802f4a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f4a4:	f04f 0200 	mov.w	r2, #0
 802f4a8:	f04f 0300 	mov.w	r3, #0
 802f4ac:	0d42      	lsrs	r2, r0, #21
 802f4ae:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802f4b2:	154b      	asrs	r3, r1, #21
 802f4b4:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 802f4b8:	e9c1 2300 	strd	r2, r3, [r1]
    s11 += carry10;
 802f4bc:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802f4c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f4c4:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802f4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f4cc:	1884      	adds	r4, r0, r2
 802f4ce:	613c      	str	r4, [r7, #16]
 802f4d0:	eb41 0303 	adc.w	r3, r1, r3
 802f4d4:	617b      	str	r3, [r7, #20]
 802f4d6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 802f4da:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802f4de:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 802f4e2:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802f4e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f4ea:	f04f 0200 	mov.w	r2, #0
 802f4ee:	f04f 0300 	mov.w	r3, #0
 802f4f2:	054b      	lsls	r3, r1, #21
 802f4f4:	ea43 23d0 	orr.w	r3, r3, r0, lsr #11
 802f4f8:	0542      	lsls	r2, r0, #21
 802f4fa:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 802f4fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f502:	1a84      	subs	r4, r0, r2
 802f504:	60bc      	str	r4, [r7, #8]
 802f506:	eb61 0303 	sbc.w	r3, r1, r3
 802f50a:	60fb      	str	r3, [r7, #12]
 802f50c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 802f510:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802f514:	e9c2 3400 	strd	r3, r4, [r2]

    s[0] = (unsigned char) (s0 >> 0);
 802f518:	f897 2828 	ldrb.w	r2, [r7, #2088]	; 0x828
 802f51c:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802f520:	681b      	ldr	r3, [r3, #0]
 802f522:	701a      	strb	r2, [r3, #0]
    s[1] = (unsigned char) (s0 >> 8);
 802f524:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802f528:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f52c:	f04f 0200 	mov.w	r2, #0
 802f530:	f04f 0300 	mov.w	r3, #0
 802f534:	0a02      	lsrs	r2, r0, #8
 802f536:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 802f53a:	120b      	asrs	r3, r1, #8
 802f53c:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f540:	6809      	ldr	r1, [r1, #0]
 802f542:	3101      	adds	r1, #1
 802f544:	b2d3      	uxtb	r3, r2
 802f546:	700b      	strb	r3, [r1, #0]
    s[2] = (unsigned char) ((s0 >> 16) | (s1 << 5));
 802f548:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802f54c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f550:	f04f 0200 	mov.w	r2, #0
 802f554:	f04f 0300 	mov.w	r3, #0
 802f558:	0c02      	lsrs	r2, r0, #16
 802f55a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 802f55e:	140b      	asrs	r3, r1, #16
 802f560:	b254      	sxtb	r4, r2
 802f562:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802f566:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f56a:	f04f 0200 	mov.w	r2, #0
 802f56e:	f04f 0300 	mov.w	r3, #0
 802f572:	014b      	lsls	r3, r1, #5
 802f574:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 802f578:	0142      	lsls	r2, r0, #5
 802f57a:	b253      	sxtb	r3, r2
 802f57c:	4323      	orrs	r3, r4
 802f57e:	b25a      	sxtb	r2, r3
 802f580:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802f584:	681b      	ldr	r3, [r3, #0]
 802f586:	3302      	adds	r3, #2
 802f588:	b2d2      	uxtb	r2, r2
 802f58a:	701a      	strb	r2, [r3, #0]
    s[3] = (unsigned char) (s1 >> 3);
 802f58c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802f590:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f594:	f04f 0200 	mov.w	r2, #0
 802f598:	f04f 0300 	mov.w	r3, #0
 802f59c:	08c2      	lsrs	r2, r0, #3
 802f59e:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 802f5a2:	10cb      	asrs	r3, r1, #3
 802f5a4:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f5a8:	6809      	ldr	r1, [r1, #0]
 802f5aa:	3103      	adds	r1, #3
 802f5ac:	b2d3      	uxtb	r3, r2
 802f5ae:	700b      	strb	r3, [r1, #0]
    s[4] = (unsigned char) (s1 >> 11);
 802f5b0:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802f5b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f5b8:	f04f 0200 	mov.w	r2, #0
 802f5bc:	f04f 0300 	mov.w	r3, #0
 802f5c0:	0ac2      	lsrs	r2, r0, #11
 802f5c2:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 802f5c6:	12cb      	asrs	r3, r1, #11
 802f5c8:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f5cc:	6809      	ldr	r1, [r1, #0]
 802f5ce:	3104      	adds	r1, #4
 802f5d0:	b2d3      	uxtb	r3, r2
 802f5d2:	700b      	strb	r3, [r1, #0]
    s[5] = (unsigned char) ((s1 >> 19) | (s2 << 2));
 802f5d4:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802f5d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f5dc:	f04f 0200 	mov.w	r2, #0
 802f5e0:	f04f 0300 	mov.w	r3, #0
 802f5e4:	0cc2      	lsrs	r2, r0, #19
 802f5e6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 802f5ea:	14cb      	asrs	r3, r1, #19
 802f5ec:	b254      	sxtb	r4, r2
 802f5ee:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802f5f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f5f6:	f04f 0200 	mov.w	r2, #0
 802f5fa:	f04f 0300 	mov.w	r3, #0
 802f5fe:	008b      	lsls	r3, r1, #2
 802f600:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 802f604:	0082      	lsls	r2, r0, #2
 802f606:	b253      	sxtb	r3, r2
 802f608:	4323      	orrs	r3, r4
 802f60a:	b25a      	sxtb	r2, r3
 802f60c:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802f610:	681b      	ldr	r3, [r3, #0]
 802f612:	3305      	adds	r3, #5
 802f614:	b2d2      	uxtb	r2, r2
 802f616:	701a      	strb	r2, [r3, #0]
    s[6] = (unsigned char) (s2 >> 6);
 802f618:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802f61c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f620:	f04f 0200 	mov.w	r2, #0
 802f624:	f04f 0300 	mov.w	r3, #0
 802f628:	0982      	lsrs	r2, r0, #6
 802f62a:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 802f62e:	118b      	asrs	r3, r1, #6
 802f630:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f634:	6809      	ldr	r1, [r1, #0]
 802f636:	3106      	adds	r1, #6
 802f638:	b2d3      	uxtb	r3, r2
 802f63a:	700b      	strb	r3, [r1, #0]
    s[7] = (unsigned char) ((s2 >> 14) | (s3 << 7));
 802f63c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802f640:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f644:	f04f 0200 	mov.w	r2, #0
 802f648:	f04f 0300 	mov.w	r3, #0
 802f64c:	0b82      	lsrs	r2, r0, #14
 802f64e:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 802f652:	138b      	asrs	r3, r1, #14
 802f654:	b254      	sxtb	r4, r2
 802f656:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802f65a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f65e:	f04f 0200 	mov.w	r2, #0
 802f662:	f04f 0300 	mov.w	r3, #0
 802f666:	01cb      	lsls	r3, r1, #7
 802f668:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 802f66c:	01c2      	lsls	r2, r0, #7
 802f66e:	b253      	sxtb	r3, r2
 802f670:	4323      	orrs	r3, r4
 802f672:	b25a      	sxtb	r2, r3
 802f674:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802f678:	681b      	ldr	r3, [r3, #0]
 802f67a:	3307      	adds	r3, #7
 802f67c:	b2d2      	uxtb	r2, r2
 802f67e:	701a      	strb	r2, [r3, #0]
    s[8] = (unsigned char) (s3 >> 1);
 802f680:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802f684:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f688:	f04f 0200 	mov.w	r2, #0
 802f68c:	f04f 0300 	mov.w	r3, #0
 802f690:	0842      	lsrs	r2, r0, #1
 802f692:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 802f696:	104b      	asrs	r3, r1, #1
 802f698:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f69c:	6809      	ldr	r1, [r1, #0]
 802f69e:	3108      	adds	r1, #8
 802f6a0:	b2d3      	uxtb	r3, r2
 802f6a2:	700b      	strb	r3, [r1, #0]
    s[9] = (unsigned char) (s3 >> 9);
 802f6a4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802f6a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f6ac:	f04f 0200 	mov.w	r2, #0
 802f6b0:	f04f 0300 	mov.w	r3, #0
 802f6b4:	0a42      	lsrs	r2, r0, #9
 802f6b6:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 802f6ba:	124b      	asrs	r3, r1, #9
 802f6bc:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f6c0:	6809      	ldr	r1, [r1, #0]
 802f6c2:	3109      	adds	r1, #9
 802f6c4:	b2d3      	uxtb	r3, r2
 802f6c6:	700b      	strb	r3, [r1, #0]
    s[10] = (unsigned char) ((s3 >> 17) | (s4 << 4));
 802f6c8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802f6cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f6d0:	f04f 0200 	mov.w	r2, #0
 802f6d4:	f04f 0300 	mov.w	r3, #0
 802f6d8:	0c42      	lsrs	r2, r0, #17
 802f6da:	ea42 32c1 	orr.w	r2, r2, r1, lsl #15
 802f6de:	144b      	asrs	r3, r1, #17
 802f6e0:	b254      	sxtb	r4, r2
 802f6e2:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802f6e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f6ea:	f04f 0200 	mov.w	r2, #0
 802f6ee:	f04f 0300 	mov.w	r3, #0
 802f6f2:	010b      	lsls	r3, r1, #4
 802f6f4:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 802f6f8:	0102      	lsls	r2, r0, #4
 802f6fa:	b253      	sxtb	r3, r2
 802f6fc:	4323      	orrs	r3, r4
 802f6fe:	b25a      	sxtb	r2, r3
 802f700:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802f704:	681b      	ldr	r3, [r3, #0]
 802f706:	330a      	adds	r3, #10
 802f708:	b2d2      	uxtb	r2, r2
 802f70a:	701a      	strb	r2, [r3, #0]
    s[11] = (unsigned char) (s4 >> 4);
 802f70c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802f710:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f714:	f04f 0200 	mov.w	r2, #0
 802f718:	f04f 0300 	mov.w	r3, #0
 802f71c:	0902      	lsrs	r2, r0, #4
 802f71e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 802f722:	110b      	asrs	r3, r1, #4
 802f724:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f728:	6809      	ldr	r1, [r1, #0]
 802f72a:	310b      	adds	r1, #11
 802f72c:	b2d3      	uxtb	r3, r2
 802f72e:	700b      	strb	r3, [r1, #0]
    s[12] = (unsigned char) (s4 >> 12);
 802f730:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802f734:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f738:	f04f 0200 	mov.w	r2, #0
 802f73c:	f04f 0300 	mov.w	r3, #0
 802f740:	0b02      	lsrs	r2, r0, #12
 802f742:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 802f746:	130b      	asrs	r3, r1, #12
 802f748:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f74c:	6809      	ldr	r1, [r1, #0]
 802f74e:	310c      	adds	r1, #12
 802f750:	b2d3      	uxtb	r3, r2
 802f752:	700b      	strb	r3, [r1, #0]
    s[13] = (unsigned char) ((s4 >> 20) | (s5 << 1));
 802f754:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802f758:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f75c:	f04f 0200 	mov.w	r2, #0
 802f760:	f04f 0300 	mov.w	r3, #0
 802f764:	0d02      	lsrs	r2, r0, #20
 802f766:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 802f76a:	150b      	asrs	r3, r1, #20
 802f76c:	b251      	sxtb	r1, r2
 802f76e:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802f772:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f776:	1890      	adds	r0, r2, r2
 802f778:	6038      	str	r0, [r7, #0]
 802f77a:	415b      	adcs	r3, r3
 802f77c:	607b      	str	r3, [r7, #4]
 802f77e:	e9d7 2300 	ldrd	r2, r3, [r7]
 802f782:	b253      	sxtb	r3, r2
 802f784:	430b      	orrs	r3, r1
 802f786:	b25a      	sxtb	r2, r3
 802f788:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802f78c:	681b      	ldr	r3, [r3, #0]
 802f78e:	330d      	adds	r3, #13
 802f790:	b2d2      	uxtb	r2, r2
 802f792:	701a      	strb	r2, [r3, #0]
    s[14] = (unsigned char) (s5 >> 7);
 802f794:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802f798:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f79c:	f04f 0200 	mov.w	r2, #0
 802f7a0:	f04f 0300 	mov.w	r3, #0
 802f7a4:	09c2      	lsrs	r2, r0, #7
 802f7a6:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 802f7aa:	11cb      	asrs	r3, r1, #7
 802f7ac:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f7b0:	6809      	ldr	r1, [r1, #0]
 802f7b2:	310e      	adds	r1, #14
 802f7b4:	b2d3      	uxtb	r3, r2
 802f7b6:	700b      	strb	r3, [r1, #0]
    s[15] = (unsigned char) ((s5 >> 15) | (s6 << 6));
 802f7b8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802f7bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f7c0:	f04f 0200 	mov.w	r2, #0
 802f7c4:	f04f 0300 	mov.w	r3, #0
 802f7c8:	0bc2      	lsrs	r2, r0, #15
 802f7ca:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 802f7ce:	13cb      	asrs	r3, r1, #15
 802f7d0:	b254      	sxtb	r4, r2
 802f7d2:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802f7d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f7da:	f04f 0200 	mov.w	r2, #0
 802f7de:	f04f 0300 	mov.w	r3, #0
 802f7e2:	018b      	lsls	r3, r1, #6
 802f7e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 802f7e8:	0182      	lsls	r2, r0, #6
 802f7ea:	b253      	sxtb	r3, r2
 802f7ec:	4323      	orrs	r3, r4
 802f7ee:	b25a      	sxtb	r2, r3
 802f7f0:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802f7f4:	681b      	ldr	r3, [r3, #0]
 802f7f6:	330f      	adds	r3, #15
 802f7f8:	b2d2      	uxtb	r2, r2
 802f7fa:	701a      	strb	r2, [r3, #0]
    s[16] = (unsigned char) (s6 >> 2);
 802f7fc:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802f800:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f804:	f04f 0200 	mov.w	r2, #0
 802f808:	f04f 0300 	mov.w	r3, #0
 802f80c:	0882      	lsrs	r2, r0, #2
 802f80e:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 802f812:	108b      	asrs	r3, r1, #2
 802f814:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f818:	6809      	ldr	r1, [r1, #0]
 802f81a:	3110      	adds	r1, #16
 802f81c:	b2d3      	uxtb	r3, r2
 802f81e:	700b      	strb	r3, [r1, #0]
    s[17] = (unsigned char) (s6 >> 10);
 802f820:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802f824:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f828:	f04f 0200 	mov.w	r2, #0
 802f82c:	f04f 0300 	mov.w	r3, #0
 802f830:	0a82      	lsrs	r2, r0, #10
 802f832:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 802f836:	128b      	asrs	r3, r1, #10
 802f838:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f83c:	6809      	ldr	r1, [r1, #0]
 802f83e:	3111      	adds	r1, #17
 802f840:	b2d3      	uxtb	r3, r2
 802f842:	700b      	strb	r3, [r1, #0]
    s[18] = (unsigned char) ((s6 >> 18) | (s7 << 3));
 802f844:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802f848:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f84c:	f04f 0200 	mov.w	r2, #0
 802f850:	f04f 0300 	mov.w	r3, #0
 802f854:	0c82      	lsrs	r2, r0, #18
 802f856:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 802f85a:	148b      	asrs	r3, r1, #18
 802f85c:	b254      	sxtb	r4, r2
 802f85e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802f862:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f866:	f04f 0200 	mov.w	r2, #0
 802f86a:	f04f 0300 	mov.w	r3, #0
 802f86e:	00cb      	lsls	r3, r1, #3
 802f870:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 802f874:	00c2      	lsls	r2, r0, #3
 802f876:	b253      	sxtb	r3, r2
 802f878:	4323      	orrs	r3, r4
 802f87a:	b25a      	sxtb	r2, r3
 802f87c:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802f880:	681b      	ldr	r3, [r3, #0]
 802f882:	3312      	adds	r3, #18
 802f884:	b2d2      	uxtb	r2, r2
 802f886:	701a      	strb	r2, [r3, #0]
    s[19] = (unsigned char) (s7 >> 5);
 802f888:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802f88c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f890:	f04f 0200 	mov.w	r2, #0
 802f894:	f04f 0300 	mov.w	r3, #0
 802f898:	0942      	lsrs	r2, r0, #5
 802f89a:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 802f89e:	114b      	asrs	r3, r1, #5
 802f8a0:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f8a4:	6809      	ldr	r1, [r1, #0]
 802f8a6:	3113      	adds	r1, #19
 802f8a8:	b2d3      	uxtb	r3, r2
 802f8aa:	700b      	strb	r3, [r1, #0]
    s[20] = (unsigned char) (s7 >> 13);
 802f8ac:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802f8b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f8b4:	f04f 0200 	mov.w	r2, #0
 802f8b8:	f04f 0300 	mov.w	r3, #0
 802f8bc:	0b42      	lsrs	r2, r0, #13
 802f8be:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 802f8c2:	134b      	asrs	r3, r1, #13
 802f8c4:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f8c8:	6809      	ldr	r1, [r1, #0]
 802f8ca:	3114      	adds	r1, #20
 802f8cc:	b2d3      	uxtb	r3, r2
 802f8ce:	700b      	strb	r3, [r1, #0]
    s[21] = (unsigned char) (s8 >> 0);
 802f8d0:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802f8d4:	681b      	ldr	r3, [r3, #0]
 802f8d6:	3315      	adds	r3, #21
 802f8d8:	f897 27e8 	ldrb.w	r2, [r7, #2024]	; 0x7e8
 802f8dc:	701a      	strb	r2, [r3, #0]
    s[22] = (unsigned char) (s8 >> 8);
 802f8de:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802f8e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f8e6:	f04f 0200 	mov.w	r2, #0
 802f8ea:	f04f 0300 	mov.w	r3, #0
 802f8ee:	0a02      	lsrs	r2, r0, #8
 802f8f0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 802f8f4:	120b      	asrs	r3, r1, #8
 802f8f6:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f8fa:	6809      	ldr	r1, [r1, #0]
 802f8fc:	3116      	adds	r1, #22
 802f8fe:	b2d3      	uxtb	r3, r2
 802f900:	700b      	strb	r3, [r1, #0]
    s[23] = (unsigned char) ((s8 >> 16) | (s9 << 5));
 802f902:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802f906:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f90a:	f04f 0200 	mov.w	r2, #0
 802f90e:	f04f 0300 	mov.w	r3, #0
 802f912:	0c02      	lsrs	r2, r0, #16
 802f914:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 802f918:	140b      	asrs	r3, r1, #16
 802f91a:	b254      	sxtb	r4, r2
 802f91c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802f920:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f924:	f04f 0200 	mov.w	r2, #0
 802f928:	f04f 0300 	mov.w	r3, #0
 802f92c:	014b      	lsls	r3, r1, #5
 802f92e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 802f932:	0142      	lsls	r2, r0, #5
 802f934:	b253      	sxtb	r3, r2
 802f936:	4323      	orrs	r3, r4
 802f938:	b25a      	sxtb	r2, r3
 802f93a:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802f93e:	681b      	ldr	r3, [r3, #0]
 802f940:	3317      	adds	r3, #23
 802f942:	b2d2      	uxtb	r2, r2
 802f944:	701a      	strb	r2, [r3, #0]
    s[24] = (unsigned char) (s9 >> 3);
 802f946:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802f94a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f94e:	f04f 0200 	mov.w	r2, #0
 802f952:	f04f 0300 	mov.w	r3, #0
 802f956:	08c2      	lsrs	r2, r0, #3
 802f958:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 802f95c:	10cb      	asrs	r3, r1, #3
 802f95e:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f962:	6809      	ldr	r1, [r1, #0]
 802f964:	3118      	adds	r1, #24
 802f966:	b2d3      	uxtb	r3, r2
 802f968:	700b      	strb	r3, [r1, #0]
    s[25] = (unsigned char) (s9 >> 11);
 802f96a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802f96e:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f972:	f04f 0200 	mov.w	r2, #0
 802f976:	f04f 0300 	mov.w	r3, #0
 802f97a:	0ac2      	lsrs	r2, r0, #11
 802f97c:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 802f980:	12cb      	asrs	r3, r1, #11
 802f982:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f986:	6809      	ldr	r1, [r1, #0]
 802f988:	3119      	adds	r1, #25
 802f98a:	b2d3      	uxtb	r3, r2
 802f98c:	700b      	strb	r3, [r1, #0]
    s[26] = (unsigned char) ((s9 >> 19) | (s10 << 2));
 802f98e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802f992:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f996:	f04f 0200 	mov.w	r2, #0
 802f99a:	f04f 0300 	mov.w	r3, #0
 802f99e:	0cc2      	lsrs	r2, r0, #19
 802f9a0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 802f9a4:	14cb      	asrs	r3, r1, #19
 802f9a6:	b254      	sxtb	r4, r2
 802f9a8:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802f9ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f9b0:	f04f 0200 	mov.w	r2, #0
 802f9b4:	f04f 0300 	mov.w	r3, #0
 802f9b8:	008b      	lsls	r3, r1, #2
 802f9ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 802f9be:	0082      	lsls	r2, r0, #2
 802f9c0:	b253      	sxtb	r3, r2
 802f9c2:	4323      	orrs	r3, r4
 802f9c4:	b25a      	sxtb	r2, r3
 802f9c6:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802f9ca:	681b      	ldr	r3, [r3, #0]
 802f9cc:	331a      	adds	r3, #26
 802f9ce:	b2d2      	uxtb	r2, r2
 802f9d0:	701a      	strb	r2, [r3, #0]
    s[27] = (unsigned char) (s10 >> 6);
 802f9d2:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802f9d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f9da:	f04f 0200 	mov.w	r2, #0
 802f9de:	f04f 0300 	mov.w	r3, #0
 802f9e2:	0982      	lsrs	r2, r0, #6
 802f9e4:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 802f9e8:	118b      	asrs	r3, r1, #6
 802f9ea:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802f9ee:	6809      	ldr	r1, [r1, #0]
 802f9f0:	311b      	adds	r1, #27
 802f9f2:	b2d3      	uxtb	r3, r2
 802f9f4:	700b      	strb	r3, [r1, #0]
    s[28] = (unsigned char) ((s10 >> 14) | (s11 << 7));
 802f9f6:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802f9fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f9fe:	f04f 0200 	mov.w	r2, #0
 802fa02:	f04f 0300 	mov.w	r3, #0
 802fa06:	0b82      	lsrs	r2, r0, #14
 802fa08:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 802fa0c:	138b      	asrs	r3, r1, #14
 802fa0e:	b254      	sxtb	r4, r2
 802fa10:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802fa14:	e9d3 0100 	ldrd	r0, r1, [r3]
 802fa18:	f04f 0200 	mov.w	r2, #0
 802fa1c:	f04f 0300 	mov.w	r3, #0
 802fa20:	01cb      	lsls	r3, r1, #7
 802fa22:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 802fa26:	01c2      	lsls	r2, r0, #7
 802fa28:	b253      	sxtb	r3, r2
 802fa2a:	4323      	orrs	r3, r4
 802fa2c:	b25a      	sxtb	r2, r3
 802fa2e:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802fa32:	681b      	ldr	r3, [r3, #0]
 802fa34:	331c      	adds	r3, #28
 802fa36:	b2d2      	uxtb	r2, r2
 802fa38:	701a      	strb	r2, [r3, #0]
    s[29] = (unsigned char) (s11 >> 1);
 802fa3a:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802fa3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 802fa42:	f04f 0200 	mov.w	r2, #0
 802fa46:	f04f 0300 	mov.w	r3, #0
 802fa4a:	0842      	lsrs	r2, r0, #1
 802fa4c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 802fa50:	104b      	asrs	r3, r1, #1
 802fa52:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802fa56:	6809      	ldr	r1, [r1, #0]
 802fa58:	311d      	adds	r1, #29
 802fa5a:	b2d3      	uxtb	r3, r2
 802fa5c:	700b      	strb	r3, [r1, #0]
    s[30] = (unsigned char) (s11 >> 9);
 802fa5e:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802fa62:	e9d3 0100 	ldrd	r0, r1, [r3]
 802fa66:	f04f 0200 	mov.w	r2, #0
 802fa6a:	f04f 0300 	mov.w	r3, #0
 802fa6e:	0a42      	lsrs	r2, r0, #9
 802fa70:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 802fa74:	124b      	asrs	r3, r1, #9
 802fa76:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802fa7a:	6809      	ldr	r1, [r1, #0]
 802fa7c:	311e      	adds	r1, #30
 802fa7e:	b2d3      	uxtb	r3, r2
 802fa80:	700b      	strb	r3, [r1, #0]
    s[31] = (unsigned char) (s11 >> 17);
 802fa82:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802fa86:	e9d3 0100 	ldrd	r0, r1, [r3]
 802fa8a:	f04f 0200 	mov.w	r2, #0
 802fa8e:	f04f 0300 	mov.w	r3, #0
 802fa92:	0c42      	lsrs	r2, r0, #17
 802fa94:	ea42 32c1 	orr.w	r2, r2, r1, lsl #15
 802fa98:	144b      	asrs	r3, r1, #17
 802fa9a:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802fa9e:	6809      	ldr	r1, [r1, #0]
 802faa0:	311f      	adds	r1, #31
 802faa2:	b2d3      	uxtb	r3, r2
 802faa4:	700b      	strb	r3, [r1, #0]
}
 802faa6:	bf00      	nop
 802faa8:	f507 6703 	add.w	r7, r7, #2096	; 0x830
 802faac:	46bd      	mov	sp, r7
 802faae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802fab2:	bf00      	nop

0802fab4 <sha3_keccakf>:
#include "sha3.h"

// update the state with given number of rounds

void sha3_keccakf(uint64_t st[25])
{
 802fab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802fab8:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 802fabc:	af00      	add	r7, sp, #0
 802fabe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802fac2:	6018      	str	r0, [r3, #0]
    // constants
    const uint64_t keccakf_rndc[24] = {
 802fac4:	4bc5      	ldr	r3, [pc, #788]	; (802fddc <sha3_keccakf+0x328>)
 802fac6:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 802faca:	4619      	mov	r1, r3
 802facc:	23c0      	movs	r3, #192	; 0xc0
 802face:	461a      	mov	r2, r3
 802fad0:	f00b f8a0 	bl	803ac14 <memcpy>
        0x000000008000808b, 0x800000000000008b, 0x8000000000008089,
        0x8000000000008003, 0x8000000000008002, 0x8000000000000080,
        0x000000000000800a, 0x800000008000000a, 0x8000000080008081,
        0x8000000000008080, 0x0000000080000001, 0x8000000080008008
    };
    const int keccakf_rotc[24] = {
 802fad4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 802fad8:	4ac1      	ldr	r2, [pc, #772]	; (802fde0 <sha3_keccakf+0x32c>)
 802fada:	4618      	mov	r0, r3
 802fadc:	4611      	mov	r1, r2
 802fade:	2360      	movs	r3, #96	; 0x60
 802fae0:	461a      	mov	r2, r3
 802fae2:	f00b f897 	bl	803ac14 <memcpy>
        1,  3,  6,  10, 15, 21, 28, 36, 45, 55, 2,  14,
        27, 41, 56, 8,  25, 43, 62, 18, 39, 61, 20, 44
    };
    const int keccakf_piln[24] = {
 802fae6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 802faea:	4abe      	ldr	r2, [pc, #760]	; (802fde4 <sha3_keccakf+0x330>)
 802faec:	4618      	mov	r0, r3
 802faee:	4611      	mov	r1, r2
 802faf0:	2360      	movs	r3, #96	; 0x60
 802faf2:	461a      	mov	r2, r3
 802faf4:	f00b f88e 	bl	803ac14 <memcpy>
            (((uint64_t) v[6]) << 48) | (((uint64_t) v[7]) << 56);
    }
#endif

    // actual iteration
    for (r = 0; r < KECCAKF_ROUNDS; r++) {
 802faf8:	2300      	movs	r3, #0
 802fafa:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 802fafe:	e1f9      	b.n	802fef4 <sha3_keccakf+0x440>

        // Theta
        for (i = 0; i < 5; i++)
 802fb00:	2300      	movs	r3, #0
 802fb02:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802fb06:	e05c      	b.n	802fbc2 <sha3_keccakf+0x10e>
            bc[i] = st[i] ^ st[i + 5] ^ st[i + 10] ^ st[i + 15] ^ st[i + 20];
 802fb08:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fb0c:	00da      	lsls	r2, r3, #3
 802fb0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802fb12:	681b      	ldr	r3, [r3, #0]
 802fb14:	4413      	add	r3, r2
 802fb16:	e9d3 0100 	ldrd	r0, r1, [r3]
 802fb1a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fb1e:	3305      	adds	r3, #5
 802fb20:	00da      	lsls	r2, r3, #3
 802fb22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802fb26:	681b      	ldr	r3, [r3, #0]
 802fb28:	4413      	add	r3, r2
 802fb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fb2e:	ea80 0402 	eor.w	r4, r0, r2
 802fb32:	653c      	str	r4, [r7, #80]	; 0x50
 802fb34:	404b      	eors	r3, r1
 802fb36:	657b      	str	r3, [r7, #84]	; 0x54
 802fb38:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fb3c:	330a      	adds	r3, #10
 802fb3e:	00da      	lsls	r2, r3, #3
 802fb40:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802fb44:	681b      	ldr	r3, [r3, #0]
 802fb46:	4413      	add	r3, r2
 802fb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fb4c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 802fb50:	4621      	mov	r1, r4
 802fb52:	4051      	eors	r1, r2
 802fb54:	64b9      	str	r1, [r7, #72]	; 0x48
 802fb56:	4629      	mov	r1, r5
 802fb58:	404b      	eors	r3, r1
 802fb5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802fb5c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fb60:	330f      	adds	r3, #15
 802fb62:	00da      	lsls	r2, r3, #3
 802fb64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802fb68:	681b      	ldr	r3, [r3, #0]
 802fb6a:	4413      	add	r3, r2
 802fb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fb70:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 802fb74:	4621      	mov	r1, r4
 802fb76:	4051      	eors	r1, r2
 802fb78:	6439      	str	r1, [r7, #64]	; 0x40
 802fb7a:	4629      	mov	r1, r5
 802fb7c:	404b      	eors	r3, r1
 802fb7e:	647b      	str	r3, [r7, #68]	; 0x44
 802fb80:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fb84:	3314      	adds	r3, #20
 802fb86:	00da      	lsls	r2, r3, #3
 802fb88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802fb8c:	681b      	ldr	r3, [r3, #0]
 802fb8e:	4413      	add	r3, r2
 802fb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fb94:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 802fb98:	4621      	mov	r1, r4
 802fb9a:	4051      	eors	r1, r2
 802fb9c:	63b9      	str	r1, [r7, #56]	; 0x38
 802fb9e:	4629      	mov	r1, r5
 802fba0:	404b      	eors	r3, r1
 802fba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 802fba4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 802fba8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fbac:	00db      	lsls	r3, r3, #3
 802fbae:	4413      	add	r3, r2
 802fbb0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 802fbb4:	e9c3 1200 	strd	r1, r2, [r3]
        for (i = 0; i < 5; i++)
 802fbb8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fbbc:	3301      	adds	r3, #1
 802fbbe:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802fbc2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fbc6:	2b04      	cmp	r3, #4
 802fbc8:	dd9e      	ble.n	802fb08 <sha3_keccakf+0x54>

        for (i = 0; i < 5; i++) {
 802fbca:	2300      	movs	r3, #0
 802fbcc:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802fbd0:	e06c      	b.n	802fcac <sha3_keccakf+0x1f8>
            t = bc[(i + 4) % 5] ^ ROTL64(bc[(i + 1) % 5], 1);
 802fbd2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fbd6:	1d19      	adds	r1, r3, #4
 802fbd8:	4b83      	ldr	r3, [pc, #524]	; (802fde8 <sha3_keccakf+0x334>)
 802fbda:	fb83 2301 	smull	r2, r3, r3, r1
 802fbde:	105a      	asrs	r2, r3, #1
 802fbe0:	17cb      	asrs	r3, r1, #31
 802fbe2:	1ad2      	subs	r2, r2, r3
 802fbe4:	4613      	mov	r3, r2
 802fbe6:	009b      	lsls	r3, r3, #2
 802fbe8:	4413      	add	r3, r2
 802fbea:	1aca      	subs	r2, r1, r3
 802fbec:	f107 0168 	add.w	r1, r7, #104	; 0x68
 802fbf0:	00d3      	lsls	r3, r2, #3
 802fbf2:	440b      	add	r3, r1
 802fbf4:	e9d3 4500 	ldrd	r4, r5, [r3]
 802fbf8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fbfc:	1c59      	adds	r1, r3, #1
 802fbfe:	4b7a      	ldr	r3, [pc, #488]	; (802fde8 <sha3_keccakf+0x334>)
 802fc00:	fb83 2301 	smull	r2, r3, r3, r1
 802fc04:	105a      	asrs	r2, r3, #1
 802fc06:	17cb      	asrs	r3, r1, #31
 802fc08:	1ad2      	subs	r2, r2, r3
 802fc0a:	4613      	mov	r3, r2
 802fc0c:	009b      	lsls	r3, r3, #2
 802fc0e:	4413      	add	r3, r2
 802fc10:	1aca      	subs	r2, r1, r3
 802fc12:	f107 0168 	add.w	r1, r7, #104	; 0x68
 802fc16:	00d3      	lsls	r3, r2, #3
 802fc18:	440b      	add	r3, r1
 802fc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fc1e:	0fd0      	lsrs	r0, r2, #31
 802fc20:	0059      	lsls	r1, r3, #1
 802fc22:	4301      	orrs	r1, r0
 802fc24:	6379      	str	r1, [r7, #52]	; 0x34
 802fc26:	0fd9      	lsrs	r1, r3, #31
 802fc28:	0053      	lsls	r3, r2, #1
 802fc2a:	430b      	orrs	r3, r1
 802fc2c:	633b      	str	r3, [r7, #48]	; 0x30
 802fc2e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 802fc32:	460b      	mov	r3, r1
 802fc34:	4063      	eors	r3, r4
 802fc36:	60bb      	str	r3, [r7, #8]
 802fc38:	4613      	mov	r3, r2
 802fc3a:	406b      	eors	r3, r5
 802fc3c:	60fb      	str	r3, [r7, #12]
 802fc3e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 802fc42:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
            for (j = 0; j < 25; j += 5)
 802fc46:	2300      	movs	r3, #0
 802fc48:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 802fc4c:	e025      	b.n	802fc9a <sha3_keccakf+0x1e6>
                st[j + i] ^= t;
 802fc4e:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 802fc52:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fc56:	4413      	add	r3, r2
 802fc58:	00da      	lsls	r2, r3, #3
 802fc5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802fc5e:	681b      	ldr	r3, [r3, #0]
 802fc60:	4413      	add	r3, r2
 802fc62:	e9d3 0100 	ldrd	r0, r1, [r3]
 802fc66:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 802fc6a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fc6e:	4413      	add	r3, r2
 802fc70:	00da      	lsls	r2, r3, #3
 802fc72:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802fc76:	681b      	ldr	r3, [r3, #0]
 802fc78:	189c      	adds	r4, r3, r2
 802fc7a:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 802fc7e:	ea80 0502 	eor.w	r5, r0, r2
 802fc82:	62bd      	str	r5, [r7, #40]	; 0x28
 802fc84:	404b      	eors	r3, r1
 802fc86:	62fb      	str	r3, [r7, #44]	; 0x2c
 802fc88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802fc8c:	e9c4 2300 	strd	r2, r3, [r4]
            for (j = 0; j < 25; j += 5)
 802fc90:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 802fc94:	3305      	adds	r3, #5
 802fc96:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 802fc9a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 802fc9e:	2b18      	cmp	r3, #24
 802fca0:	ddd5      	ble.n	802fc4e <sha3_keccakf+0x19a>
        for (i = 0; i < 5; i++) {
 802fca2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fca6:	3301      	adds	r3, #1
 802fca8:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802fcac:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fcb0:	2b04      	cmp	r3, #4
 802fcb2:	dd8e      	ble.n	802fbd2 <sha3_keccakf+0x11e>
        }

        // Rho Pi
        t = st[1];
 802fcb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802fcb8:	681b      	ldr	r3, [r3, #0]
 802fcba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802fcbe:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
        for (i = 0; i < 24; i++) {
 802fcc2:	2300      	movs	r3, #0
 802fcc4:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802fcc8:	e05b      	b.n	802fd82 <sha3_keccakf+0x2ce>
            j = keccakf_piln[i];
 802fcca:	f107 0290 	add.w	r2, r7, #144	; 0x90
 802fcce:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fcd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802fcd6:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
            bc[0] = st[j];
 802fcda:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 802fcde:	00da      	lsls	r2, r3, #3
 802fce0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802fce4:	681b      	ldr	r3, [r3, #0]
 802fce6:	4413      	add	r3, r2
 802fce8:	e9d3 0100 	ldrd	r0, r1, [r3]
 802fcec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802fcf0:	e9c3 0100 	strd	r0, r1, [r3]
            st[j] = ROTL64(t, keccakf_rotc[i]);
 802fcf4:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 802fcf8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fcfc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802fd00:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 802fd04:	00da      	lsls	r2, r3, #3
 802fd06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802fd0a:	681b      	ldr	r3, [r3, #0]
 802fd0c:	189d      	adds	r5, r3, r2
 802fd0e:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 802fd12:	f1a4 0120 	sub.w	r1, r4, #32
 802fd16:	f1c4 0020 	rsb	r0, r4, #32
 802fd1a:	fa03 fb04 	lsl.w	fp, r3, r4
 802fd1e:	fa02 f101 	lsl.w	r1, r2, r1
 802fd22:	ea4b 0b01 	orr.w	fp, fp, r1
 802fd26:	fa22 f000 	lsr.w	r0, r2, r0
 802fd2a:	ea4b 0b00 	orr.w	fp, fp, r0
 802fd2e:	fa02 fa04 	lsl.w	sl, r2, r4
 802fd32:	4264      	negs	r4, r4
 802fd34:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 802fd38:	f1c4 0120 	rsb	r1, r4, #32
 802fd3c:	f1a4 0020 	sub.w	r0, r4, #32
 802fd40:	fa22 f804 	lsr.w	r8, r2, r4
 802fd44:	fa03 f101 	lsl.w	r1, r3, r1
 802fd48:	ea48 0801 	orr.w	r8, r8, r1
 802fd4c:	fa23 f000 	lsr.w	r0, r3, r0
 802fd50:	ea48 0800 	orr.w	r8, r8, r0
 802fd54:	fa23 f904 	lsr.w	r9, r3, r4
 802fd58:	ea4a 0308 	orr.w	r3, sl, r8
 802fd5c:	603b      	str	r3, [r7, #0]
 802fd5e:	ea4b 0309 	orr.w	r3, fp, r9
 802fd62:	607b      	str	r3, [r7, #4]
 802fd64:	e9d7 8900 	ldrd	r8, r9, [r7]
 802fd68:	e9c5 8900 	strd	r8, r9, [r5]
            t = bc[0];
 802fd6c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802fd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fd74:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
        for (i = 0; i < 24; i++) {
 802fd78:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fd7c:	3301      	adds	r3, #1
 802fd7e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802fd82:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fd86:	2b17      	cmp	r3, #23
 802fd88:	dd9f      	ble.n	802fcca <sha3_keccakf+0x216>
        }

        //  Chi
        for (j = 0; j < 25; j += 5) {
 802fd8a:	2300      	movs	r3, #0
 802fd8c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 802fd90:	e08c      	b.n	802feac <sha3_keccakf+0x3f8>
            for (i = 0; i < 5; i++)
 802fd92:	2300      	movs	r3, #0
 802fd94:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802fd98:	e018      	b.n	802fdcc <sha3_keccakf+0x318>
                bc[i] = st[j + i];
 802fd9a:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 802fd9e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fda2:	4413      	add	r3, r2
 802fda4:	00da      	lsls	r2, r3, #3
 802fda6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802fdaa:	681b      	ldr	r3, [r3, #0]
 802fdac:	4413      	add	r3, r2
 802fdae:	e9d3 0100 	ldrd	r0, r1, [r3]
 802fdb2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 802fdb6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fdba:	00db      	lsls	r3, r3, #3
 802fdbc:	4413      	add	r3, r2
 802fdbe:	e9c3 0100 	strd	r0, r1, [r3]
            for (i = 0; i < 5; i++)
 802fdc2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fdc6:	3301      	adds	r3, #1
 802fdc8:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802fdcc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fdd0:	2b04      	cmp	r3, #4
 802fdd2:	dde2      	ble.n	802fd9a <sha3_keccakf+0x2e6>
            for (i = 0; i < 5; i++)
 802fdd4:	2300      	movs	r3, #0
 802fdd6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802fdda:	e05e      	b.n	802fe9a <sha3_keccakf+0x3e6>
 802fddc:	0803f278 	.word	0x0803f278
 802fde0:	0803f338 	.word	0x0803f338
 802fde4:	0803f398 	.word	0x0803f398
 802fde8:	66666667 	.word	0x66666667
                st[j + i] ^= (~bc[(i + 1) % 5]) & bc[(i + 2) % 5];
 802fdec:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 802fdf0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fdf4:	4413      	add	r3, r2
 802fdf6:	00da      	lsls	r2, r3, #3
 802fdf8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802fdfc:	681b      	ldr	r3, [r3, #0]
 802fdfe:	4413      	add	r3, r2
 802fe00:	e9d3 4500 	ldrd	r4, r5, [r3]
 802fe04:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fe08:	1c59      	adds	r1, r3, #1
 802fe0a:	4b40      	ldr	r3, [pc, #256]	; (802ff0c <sha3_keccakf+0x458>)
 802fe0c:	fb83 2301 	smull	r2, r3, r3, r1
 802fe10:	105a      	asrs	r2, r3, #1
 802fe12:	17cb      	asrs	r3, r1, #31
 802fe14:	1ad2      	subs	r2, r2, r3
 802fe16:	4613      	mov	r3, r2
 802fe18:	009b      	lsls	r3, r3, #2
 802fe1a:	4413      	add	r3, r2
 802fe1c:	1aca      	subs	r2, r1, r3
 802fe1e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 802fe22:	00d3      	lsls	r3, r2, #3
 802fe24:	440b      	add	r3, r1
 802fe26:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fe2a:	43d1      	mvns	r1, r2
 802fe2c:	65b9      	str	r1, [r7, #88]	; 0x58
 802fe2e:	43db      	mvns	r3, r3
 802fe30:	65fb      	str	r3, [r7, #92]	; 0x5c
 802fe32:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fe36:	1c99      	adds	r1, r3, #2
 802fe38:	4b34      	ldr	r3, [pc, #208]	; (802ff0c <sha3_keccakf+0x458>)
 802fe3a:	fb83 2301 	smull	r2, r3, r3, r1
 802fe3e:	105a      	asrs	r2, r3, #1
 802fe40:	17cb      	asrs	r3, r1, #31
 802fe42:	1ad2      	subs	r2, r2, r3
 802fe44:	4613      	mov	r3, r2
 802fe46:	009b      	lsls	r3, r3, #2
 802fe48:	4413      	add	r3, r2
 802fe4a:	1aca      	subs	r2, r1, r3
 802fe4c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 802fe50:	00d3      	lsls	r3, r2, #3
 802fe52:	440b      	add	r3, r1
 802fe54:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fe58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802fe5a:	4011      	ands	r1, r2
 802fe5c:	6239      	str	r1, [r7, #32]
 802fe5e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 802fe60:	400b      	ands	r3, r1
 802fe62:	627b      	str	r3, [r7, #36]	; 0x24
 802fe64:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 802fe68:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fe6c:	4413      	add	r3, r2
 802fe6e:	00da      	lsls	r2, r3, #3
 802fe70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802fe74:	681b      	ldr	r3, [r3, #0]
 802fe76:	4413      	add	r3, r2
 802fe78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802fe7c:	4602      	mov	r2, r0
 802fe7e:	4062      	eors	r2, r4
 802fe80:	61ba      	str	r2, [r7, #24]
 802fe82:	460a      	mov	r2, r1
 802fe84:	406a      	eors	r2, r5
 802fe86:	61fa      	str	r2, [r7, #28]
 802fe88:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 802fe8c:	e9c3 1200 	strd	r1, r2, [r3]
            for (i = 0; i < 5; i++)
 802fe90:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fe94:	3301      	adds	r3, #1
 802fe96:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802fe9a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802fe9e:	2b04      	cmp	r3, #4
 802fea0:	dda4      	ble.n	802fdec <sha3_keccakf+0x338>
        for (j = 0; j < 25; j += 5) {
 802fea2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 802fea6:	3305      	adds	r3, #5
 802fea8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 802feac:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 802feb0:	2b18      	cmp	r3, #24
 802feb2:	f77f af6e 	ble.w	802fd92 <sha3_keccakf+0x2de>
        }

        //  Iota
        st[0] ^= keccakf_rndc[r];
 802feb6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802feba:	681b      	ldr	r3, [r3, #0]
 802febc:	e9d3 0100 	ldrd	r0, r1, [r3]
 802fec0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 802fec4:	00db      	lsls	r3, r3, #3
 802fec6:	f507 720a 	add.w	r2, r7, #552	; 0x228
 802feca:	4413      	add	r3, r2
 802fecc:	3bd8      	subs	r3, #216	; 0xd8
 802fece:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fed2:	ea80 0402 	eor.w	r4, r0, r2
 802fed6:	613c      	str	r4, [r7, #16]
 802fed8:	404b      	eors	r3, r1
 802feda:	617b      	str	r3, [r7, #20]
 802fedc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802fee0:	681b      	ldr	r3, [r3, #0]
 802fee2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 802fee6:	e9c3 1200 	strd	r1, r2, [r3]
    for (r = 0; r < KECCAKF_ROUNDS; r++) {
 802feea:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 802feee:	3301      	adds	r3, #1
 802fef0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 802fef4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 802fef8:	2b17      	cmp	r3, #23
 802fefa:	f77f ae01 	ble.w	802fb00 <sha3_keccakf+0x4c>
        v[5] = (t >> 40) & 0xFF;
        v[6] = (t >> 48) & 0xFF;
        v[7] = (t >> 56) & 0xFF;
    }
#endif
}
 802fefe:	bf00      	nop
 802ff00:	bf00      	nop
 802ff02:	f507 770a 	add.w	r7, r7, #552	; 0x228
 802ff06:	46bd      	mov	sp, r7
 802ff08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802ff0c:	66666667 	.word	0x66666667

0802ff10 <sha3_init>:

// Initialize the context for SHA3

int sha3_init(sha3_ctx_t *c, int mdlen)
{
 802ff10:	b480      	push	{r7}
 802ff12:	b085      	sub	sp, #20
 802ff14:	af00      	add	r7, sp, #0
 802ff16:	6078      	str	r0, [r7, #4]
 802ff18:	6039      	str	r1, [r7, #0]
    int i;

    for (i = 0; i < 25; i++)
 802ff1a:	2300      	movs	r3, #0
 802ff1c:	60fb      	str	r3, [r7, #12]
 802ff1e:	e00c      	b.n	802ff3a <sha3_init+0x2a>
        c->st.q[i] = 0;
 802ff20:	687a      	ldr	r2, [r7, #4]
 802ff22:	68fb      	ldr	r3, [r7, #12]
 802ff24:	00db      	lsls	r3, r3, #3
 802ff26:	18d1      	adds	r1, r2, r3
 802ff28:	f04f 0200 	mov.w	r2, #0
 802ff2c:	f04f 0300 	mov.w	r3, #0
 802ff30:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 25; i++)
 802ff34:	68fb      	ldr	r3, [r7, #12]
 802ff36:	3301      	adds	r3, #1
 802ff38:	60fb      	str	r3, [r7, #12]
 802ff3a:	68fb      	ldr	r3, [r7, #12]
 802ff3c:	2b18      	cmp	r3, #24
 802ff3e:	ddef      	ble.n	802ff20 <sha3_init+0x10>
    c->mdlen = mdlen;
 802ff40:	687b      	ldr	r3, [r7, #4]
 802ff42:	683a      	ldr	r2, [r7, #0]
 802ff44:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    c->rsiz = 200 - 2 * mdlen;
 802ff48:	683b      	ldr	r3, [r7, #0]
 802ff4a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 802ff4e:	005a      	lsls	r2, r3, #1
 802ff50:	687b      	ldr	r3, [r7, #4]
 802ff52:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    c->pt = 0;
 802ff56:	687b      	ldr	r3, [r7, #4]
 802ff58:	2200      	movs	r2, #0
 802ff5a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    return 1;
 802ff5e:	2301      	movs	r3, #1
}
 802ff60:	4618      	mov	r0, r3
 802ff62:	3714      	adds	r7, #20
 802ff64:	46bd      	mov	sp, r7
 802ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ff6a:	4770      	bx	lr

0802ff6c <sha3_update>:

// update state with more data

int sha3_update(sha3_ctx_t *c, const void *data, size_t len)
{
 802ff6c:	b580      	push	{r7, lr}
 802ff6e:	b086      	sub	sp, #24
 802ff70:	af00      	add	r7, sp, #0
 802ff72:	60f8      	str	r0, [r7, #12]
 802ff74:	60b9      	str	r1, [r7, #8]
 802ff76:	607a      	str	r2, [r7, #4]
    size_t i;
    int j;

    j = c->pt;
 802ff78:	68fb      	ldr	r3, [r7, #12]
 802ff7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 802ff7e:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len; i++) {
 802ff80:	2300      	movs	r3, #0
 802ff82:	617b      	str	r3, [r7, #20]
 802ff84:	e01b      	b.n	802ffbe <sha3_update+0x52>
        c->st.b[j++] ^= ((const uint8_t *) data)[i];
 802ff86:	693b      	ldr	r3, [r7, #16]
 802ff88:	1c5a      	adds	r2, r3, #1
 802ff8a:	613a      	str	r2, [r7, #16]
 802ff8c:	68fa      	ldr	r2, [r7, #12]
 802ff8e:	5cd1      	ldrb	r1, [r2, r3]
 802ff90:	68b8      	ldr	r0, [r7, #8]
 802ff92:	697a      	ldr	r2, [r7, #20]
 802ff94:	4402      	add	r2, r0
 802ff96:	7812      	ldrb	r2, [r2, #0]
 802ff98:	404a      	eors	r2, r1
 802ff9a:	b2d1      	uxtb	r1, r2
 802ff9c:	68fa      	ldr	r2, [r7, #12]
 802ff9e:	54d1      	strb	r1, [r2, r3]
        if (j >= c->rsiz) {
 802ffa0:	68fb      	ldr	r3, [r7, #12]
 802ffa2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 802ffa6:	693a      	ldr	r2, [r7, #16]
 802ffa8:	429a      	cmp	r2, r3
 802ffaa:	db05      	blt.n	802ffb8 <sha3_update+0x4c>
            sha3_keccakf(c->st.q);
 802ffac:	68fb      	ldr	r3, [r7, #12]
 802ffae:	4618      	mov	r0, r3
 802ffb0:	f7ff fd80 	bl	802fab4 <sha3_keccakf>
            j = 0;
 802ffb4:	2300      	movs	r3, #0
 802ffb6:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len; i++) {
 802ffb8:	697b      	ldr	r3, [r7, #20]
 802ffba:	3301      	adds	r3, #1
 802ffbc:	617b      	str	r3, [r7, #20]
 802ffbe:	697a      	ldr	r2, [r7, #20]
 802ffc0:	687b      	ldr	r3, [r7, #4]
 802ffc2:	429a      	cmp	r2, r3
 802ffc4:	d3df      	bcc.n	802ff86 <sha3_update+0x1a>
        }
    }
    c->pt = j;
 802ffc6:	68fb      	ldr	r3, [r7, #12]
 802ffc8:	693a      	ldr	r2, [r7, #16]
 802ffca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    return 1;
 802ffce:	2301      	movs	r3, #1
}
 802ffd0:	4618      	mov	r0, r3
 802ffd2:	3718      	adds	r7, #24
 802ffd4:	46bd      	mov	sp, r7
 802ffd6:	bd80      	pop	{r7, pc}

0802ffd8 <sha3_final>:

// finalize and output a hash

int sha3_final(void *md, sha3_ctx_t *c)
{
 802ffd8:	b580      	push	{r7, lr}
 802ffda:	b084      	sub	sp, #16
 802ffdc:	af00      	add	r7, sp, #0
 802ffde:	6078      	str	r0, [r7, #4]
 802ffe0:	6039      	str	r1, [r7, #0]
    int i;

    c->st.b[c->pt] ^= 0x06;
 802ffe2:	683b      	ldr	r3, [r7, #0]
 802ffe4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 802ffe8:	683a      	ldr	r2, [r7, #0]
 802ffea:	5cd2      	ldrb	r2, [r2, r3]
 802ffec:	683b      	ldr	r3, [r7, #0]
 802ffee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 802fff2:	f082 0206 	eor.w	r2, r2, #6
 802fff6:	b2d1      	uxtb	r1, r2
 802fff8:	683a      	ldr	r2, [r7, #0]
 802fffa:	54d1      	strb	r1, [r2, r3]
    c->st.b[c->rsiz - 1] ^= 0x80;
 802fffc:	683b      	ldr	r3, [r7, #0]
 802fffe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8030002:	3b01      	subs	r3, #1
 8030004:	683a      	ldr	r2, [r7, #0]
 8030006:	5cd3      	ldrb	r3, [r2, r3]
 8030008:	683a      	ldr	r2, [r7, #0]
 803000a:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 803000e:	3a01      	subs	r2, #1
 8030010:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8030014:	43db      	mvns	r3, r3
 8030016:	b2d9      	uxtb	r1, r3
 8030018:	683b      	ldr	r3, [r7, #0]
 803001a:	5499      	strb	r1, [r3, r2]
    sha3_keccakf(c->st.q);
 803001c:	683b      	ldr	r3, [r7, #0]
 803001e:	4618      	mov	r0, r3
 8030020:	f7ff fd48 	bl	802fab4 <sha3_keccakf>

    for (i = 0; i < c->mdlen; i++) {
 8030024:	2300      	movs	r3, #0
 8030026:	60fb      	str	r3, [r7, #12]
 8030028:	e00a      	b.n	8030040 <sha3_final+0x68>
        ((uint8_t *) md)[i] = c->st.b[i];
 803002a:	68fb      	ldr	r3, [r7, #12]
 803002c:	687a      	ldr	r2, [r7, #4]
 803002e:	4413      	add	r3, r2
 8030030:	6839      	ldr	r1, [r7, #0]
 8030032:	68fa      	ldr	r2, [r7, #12]
 8030034:	440a      	add	r2, r1
 8030036:	7812      	ldrb	r2, [r2, #0]
 8030038:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < c->mdlen; i++) {
 803003a:	68fb      	ldr	r3, [r7, #12]
 803003c:	3301      	adds	r3, #1
 803003e:	60fb      	str	r3, [r7, #12]
 8030040:	683b      	ldr	r3, [r7, #0]
 8030042:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8030046:	68fa      	ldr	r2, [r7, #12]
 8030048:	429a      	cmp	r2, r3
 803004a:	dbee      	blt.n	803002a <sha3_final+0x52>
    }

    return 1;
 803004c:	2301      	movs	r3, #1
}
 803004e:	4618      	mov	r0, r3
 8030050:	3710      	adds	r7, #16
 8030052:	46bd      	mov	sp, r7
 8030054:	bd80      	pop	{r7, pc}

08030056 <sha3>:

// compute a SHA-3 hash (md) of given byte length from "in"

void *sha3(const void *in, size_t inlen, void *md, int mdlen)
{
 8030056:	b580      	push	{r7, lr}
 8030058:	b0ba      	sub	sp, #232	; 0xe8
 803005a:	af00      	add	r7, sp, #0
 803005c:	60f8      	str	r0, [r7, #12]
 803005e:	60b9      	str	r1, [r7, #8]
 8030060:	607a      	str	r2, [r7, #4]
 8030062:	603b      	str	r3, [r7, #0]
    sha3_ctx_t sha3;

    sha3_init(&sha3, mdlen);
 8030064:	f107 0310 	add.w	r3, r7, #16
 8030068:	6839      	ldr	r1, [r7, #0]
 803006a:	4618      	mov	r0, r3
 803006c:	f7ff ff50 	bl	802ff10 <sha3_init>
    sha3_update(&sha3, in, inlen);
 8030070:	f107 0310 	add.w	r3, r7, #16
 8030074:	68ba      	ldr	r2, [r7, #8]
 8030076:	68f9      	ldr	r1, [r7, #12]
 8030078:	4618      	mov	r0, r3
 803007a:	f7ff ff77 	bl	802ff6c <sha3_update>
    sha3_final(md, &sha3);
 803007e:	f107 0310 	add.w	r3, r7, #16
 8030082:	4619      	mov	r1, r3
 8030084:	6878      	ldr	r0, [r7, #4]
 8030086:	f7ff ffa7 	bl	802ffd8 <sha3_final>

    return md;
 803008a:	687b      	ldr	r3, [r7, #4]
}
 803008c:	4618      	mov	r0, r3
 803008e:	37e8      	adds	r7, #232	; 0xe8
 8030090:	46bd      	mov	sp, r7
 8030092:	bd80      	pop	{r7, pc}

08030094 <sha512_compress>:
   #define MIN(x, y) ( ((x)<(y))?(x):(y) )
#endif

/* compress 1024-bits */
static int sha512_compress(sha512_context *md, unsigned char *buf)
{
 8030094:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8030098:	f5ad 6d17 	sub.w	sp, sp, #2416	; 0x970
 803009c:	af00      	add	r7, sp, #0
 803009e:	f207 6394 	addw	r3, r7, #1684	; 0x694
 80300a2:	6018      	str	r0, [r3, #0]
 80300a4:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80300a8:	6019      	str	r1, [r3, #0]
    uint64_t S[8], W[80], t0, t1;
    int i;

    /* copy state into S */
    for (i = 0; i < 8; i++) {
 80300aa:	2300      	movs	r3, #0
 80300ac:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 80300b0:	e017      	b.n	80300e2 <sha512_compress+0x4e>
        S[i] = md->state[i];
 80300b2:	f207 6394 	addw	r3, r7, #1684	; 0x694
 80300b6:	681a      	ldr	r2, [r3, #0]
 80300b8:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80300bc:	3301      	adds	r3, #1
 80300be:	00db      	lsls	r3, r3, #3
 80300c0:	4413      	add	r3, r2
 80300c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80300c6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80300ca:	00db      	lsls	r3, r3, #3
 80300cc:	f507 6217 	add.w	r2, r7, #2416	; 0x970
 80300d0:	4413      	add	r3, r2
 80300d2:	3b58      	subs	r3, #88	; 0x58
 80300d4:	e9c3 0100 	strd	r0, r1, [r3]
    for (i = 0; i < 8; i++) {
 80300d8:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80300dc:	3301      	adds	r3, #1
 80300de:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 80300e2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80300e6:	2b07      	cmp	r3, #7
 80300e8:	dde3      	ble.n	80300b2 <sha512_compress+0x1e>
    }

    /* copy the state into 1024-bits into W[0..15] */
    for (i = 0; i < 16; i++) {
 80300ea:	2300      	movs	r3, #0
 80300ec:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 80300f0:	e0e6      	b.n	80302c0 <sha512_compress+0x22c>
        LOAD64H(W[i], buf + (8*i));
 80300f2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80300f6:	00db      	lsls	r3, r3, #3
 80300f8:	461a      	mov	r2, r3
 80300fa:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80300fe:	681b      	ldr	r3, [r3, #0]
 8030100:	4413      	add	r3, r2
 8030102:	781b      	ldrb	r3, [r3, #0]
 8030104:	b2da      	uxtb	r2, r3
 8030106:	f04f 0300 	mov.w	r3, #0
 803010a:	f04f 0400 	mov.w	r4, #0
 803010e:	f04f 0500 	mov.w	r5, #0
 8030112:	0615      	lsls	r5, r2, #24
 8030114:	2400      	movs	r4, #0
 8030116:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 803011a:	00db      	lsls	r3, r3, #3
 803011c:	1c5a      	adds	r2, r3, #1
 803011e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8030122:	681b      	ldr	r3, [r3, #0]
 8030124:	4413      	add	r3, r2
 8030126:	781b      	ldrb	r3, [r3, #0]
 8030128:	b2da      	uxtb	r2, r3
 803012a:	f04f 0300 	mov.w	r3, #0
 803012e:	f04f 0000 	mov.w	r0, #0
 8030132:	f04f 0100 	mov.w	r1, #0
 8030136:	0411      	lsls	r1, r2, #16
 8030138:	2000      	movs	r0, #0
 803013a:	ea44 0300 	orr.w	r3, r4, r0
 803013e:	f8c7 3688 	str.w	r3, [r7, #1672]	; 0x688
 8030142:	ea45 0301 	orr.w	r3, r5, r1
 8030146:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 803014a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 803014e:	00db      	lsls	r3, r3, #3
 8030150:	1c9a      	adds	r2, r3, #2
 8030152:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8030156:	681b      	ldr	r3, [r3, #0]
 8030158:	4413      	add	r3, r2
 803015a:	781b      	ldrb	r3, [r3, #0]
 803015c:	b2da      	uxtb	r2, r3
 803015e:	f04f 0300 	mov.w	r3, #0
 8030162:	f04f 0000 	mov.w	r0, #0
 8030166:	f04f 0100 	mov.w	r1, #0
 803016a:	0211      	lsls	r1, r2, #8
 803016c:	2000      	movs	r0, #0
 803016e:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8030172:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030176:	4623      	mov	r3, r4
 8030178:	4303      	orrs	r3, r0
 803017a:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680
 803017e:	462b      	mov	r3, r5
 8030180:	430b      	orrs	r3, r1
 8030182:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 8030186:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 803018a:	00db      	lsls	r3, r3, #3
 803018c:	1cda      	adds	r2, r3, #3
 803018e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8030192:	681b      	ldr	r3, [r3, #0]
 8030194:	4413      	add	r3, r2
 8030196:	781b      	ldrb	r3, [r3, #0]
 8030198:	b2da      	uxtb	r2, r3
 803019a:	f04f 0300 	mov.w	r3, #0
 803019e:	f04f 0000 	mov.w	r0, #0
 80301a2:	f04f 0100 	mov.w	r1, #0
 80301a6:	0011      	movs	r1, r2
 80301a8:	2000      	movs	r0, #0
 80301aa:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 80301ae:	e9d3 4500 	ldrd	r4, r5, [r3]
 80301b2:	4623      	mov	r3, r4
 80301b4:	4303      	orrs	r3, r0
 80301b6:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
 80301ba:	462b      	mov	r3, r5
 80301bc:	430b      	orrs	r3, r1
 80301be:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 80301c2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80301c6:	00db      	lsls	r3, r3, #3
 80301c8:	1d1a      	adds	r2, r3, #4
 80301ca:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80301ce:	681b      	ldr	r3, [r3, #0]
 80301d0:	4413      	add	r3, r2
 80301d2:	781b      	ldrb	r3, [r3, #0]
 80301d4:	b2da      	uxtb	r2, r3
 80301d6:	f04f 0300 	mov.w	r3, #0
 80301da:	0a11      	lsrs	r1, r2, #8
 80301dc:	f8c7 1674 	str.w	r1, [r7, #1652]	; 0x674
 80301e0:	0613      	lsls	r3, r2, #24
 80301e2:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
 80301e6:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 80301ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 80301ee:	4623      	mov	r3, r4
 80301f0:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80301f4:	e9d2 0100 	ldrd	r0, r1, [r2]
 80301f8:	4602      	mov	r2, r0
 80301fa:	4313      	orrs	r3, r2
 80301fc:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 8030200:	462b      	mov	r3, r5
 8030202:	460a      	mov	r2, r1
 8030204:	4313      	orrs	r3, r2
 8030206:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 803020a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 803020e:	00db      	lsls	r3, r3, #3
 8030210:	1d5a      	adds	r2, r3, #5
 8030212:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8030216:	681b      	ldr	r3, [r3, #0]
 8030218:	4413      	add	r3, r2
 803021a:	781b      	ldrb	r3, [r3, #0]
 803021c:	b2da      	uxtb	r2, r3
 803021e:	f04f 0300 	mov.w	r3, #0
 8030222:	f04f 0000 	mov.w	r0, #0
 8030226:	f04f 0100 	mov.w	r1, #0
 803022a:	0419      	lsls	r1, r3, #16
 803022c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8030230:	0410      	lsls	r0, r2, #16
 8030232:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8030236:	e9d3 4500 	ldrd	r4, r5, [r3]
 803023a:	4623      	mov	r3, r4
 803023c:	ea43 0a00 	orr.w	sl, r3, r0
 8030240:	462b      	mov	r3, r5
 8030242:	ea43 0b01 	orr.w	fp, r3, r1
 8030246:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 803024a:	00db      	lsls	r3, r3, #3
 803024c:	1d9a      	adds	r2, r3, #6
 803024e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8030252:	681b      	ldr	r3, [r3, #0]
 8030254:	4413      	add	r3, r2
 8030256:	781b      	ldrb	r3, [r3, #0]
 8030258:	b2da      	uxtb	r2, r3
 803025a:	f04f 0300 	mov.w	r3, #0
 803025e:	f04f 0000 	mov.w	r0, #0
 8030262:	f04f 0100 	mov.w	r1, #0
 8030266:	0219      	lsls	r1, r3, #8
 8030268:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 803026c:	0210      	lsls	r0, r2, #8
 803026e:	ea4a 0800 	orr.w	r8, sl, r0
 8030272:	ea4b 0901 	orr.w	r9, fp, r1
 8030276:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 803027a:	00db      	lsls	r3, r3, #3
 803027c:	1dda      	adds	r2, r3, #7
 803027e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8030282:	681b      	ldr	r3, [r3, #0]
 8030284:	4413      	add	r3, r2
 8030286:	781b      	ldrb	r3, [r3, #0]
 8030288:	b2da      	uxtb	r2, r3
 803028a:	f04f 0300 	mov.w	r3, #0
 803028e:	ea48 0102 	orr.w	r1, r8, r2
 8030292:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 8030296:	ea49 0303 	orr.w	r3, r9, r3
 803029a:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 803029e:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 80302a2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80302a6:	00db      	lsls	r3, r3, #3
 80302a8:	4413      	add	r3, r2
 80302aa:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 80302ae:	e9d2 1200 	ldrd	r1, r2, [r2]
 80302b2:	e9c3 1200 	strd	r1, r2, [r3]
    for (i = 0; i < 16; i++) {
 80302b6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80302ba:	3301      	adds	r3, #1
 80302bc:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 80302c0:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80302c4:	2b0f      	cmp	r3, #15
 80302c6:	f77f af14 	ble.w	80300f2 <sha512_compress+0x5e>
    }

    /* fill W[16..79] */
    for (i = 16; i < 80; i++) {
 80302ca:	2310      	movs	r3, #16
 80302cc:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 80302d0:	e0f8      	b.n	80304c4 <sha512_compress+0x430>
        W[i] = Gamma1(W[i - 2]) + W[i - 7] + Gamma0(W[i - 15]) + W[i - 16];
 80302d2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80302d6:	3b02      	subs	r3, #2
 80302d8:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 80302dc:	00db      	lsls	r3, r3, #3
 80302de:	4413      	add	r3, r2
 80302e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80302e4:	0358      	lsls	r0, r3, #13
 80302e6:	0cd1      	lsrs	r1, r2, #19
 80302e8:	4301      	orrs	r1, r0
 80302ea:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 80302ee:	0351      	lsls	r1, r2, #13
 80302f0:	0cdb      	lsrs	r3, r3, #19
 80302f2:	430b      	orrs	r3, r1
 80302f4:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 80302f8:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80302fc:	3b02      	subs	r3, #2
 80302fe:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8030302:	00db      	lsls	r3, r3, #3
 8030304:	4413      	add	r3, r2
 8030306:	e9d3 2300 	ldrd	r2, r3, [r3]
 803030a:	0f50      	lsrs	r0, r2, #29
 803030c:	00d9      	lsls	r1, r3, #3
 803030e:	4301      	orrs	r1, r0
 8030310:	f8c7 1654 	str.w	r1, [r7, #1620]	; 0x654
 8030314:	0f59      	lsrs	r1, r3, #29
 8030316:	00d3      	lsls	r3, r2, #3
 8030318:	430b      	orrs	r3, r1
 803031a:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 803031e:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8030322:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030326:	4623      	mov	r3, r4
 8030328:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 803032c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030330:	4602      	mov	r2, r0
 8030332:	4053      	eors	r3, r2
 8030334:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 8030338:	462b      	mov	r3, r5
 803033a:	460a      	mov	r2, r1
 803033c:	4053      	eors	r3, r2
 803033e:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8030342:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030346:	3b02      	subs	r3, #2
 8030348:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 803034c:	00db      	lsls	r3, r3, #3
 803034e:	4413      	add	r3, r2
 8030350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030354:	f04f 0000 	mov.w	r0, #0
 8030358:	f04f 0100 	mov.w	r1, #0
 803035c:	0990      	lsrs	r0, r2, #6
 803035e:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8030362:	0999      	lsrs	r1, r3, #6
 8030364:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 8030368:	e9d3 4500 	ldrd	r4, r5, [r3]
 803036c:	4623      	mov	r3, r4
 803036e:	4043      	eors	r3, r0
 8030370:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
 8030374:	462b      	mov	r3, r5
 8030376:	404b      	eors	r3, r1
 8030378:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 803037c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030380:	3b07      	subs	r3, #7
 8030382:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8030386:	00db      	lsls	r3, r3, #3
 8030388:	4413      	add	r3, r2
 803038a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803038e:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8030392:	e9d1 4500 	ldrd	r4, r5, [r1]
 8030396:	4621      	mov	r1, r4
 8030398:	1889      	adds	r1, r1, r2
 803039a:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 803039e:	4629      	mov	r1, r5
 80303a0:	eb41 0303 	adc.w	r3, r1, r3
 80303a4:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 80303a8:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80303ac:	3b0f      	subs	r3, #15
 80303ae:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 80303b2:	00db      	lsls	r3, r3, #3
 80303b4:	4413      	add	r3, r2
 80303b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80303ba:	07d8      	lsls	r0, r3, #31
 80303bc:	0851      	lsrs	r1, r2, #1
 80303be:	4301      	orrs	r1, r0
 80303c0:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 80303c4:	07d1      	lsls	r1, r2, #31
 80303c6:	085b      	lsrs	r3, r3, #1
 80303c8:	430b      	orrs	r3, r1
 80303ca:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 80303ce:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80303d2:	3b0f      	subs	r3, #15
 80303d4:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 80303d8:	00db      	lsls	r3, r3, #3
 80303da:	4413      	add	r3, r2
 80303dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80303e0:	0618      	lsls	r0, r3, #24
 80303e2:	0a11      	lsrs	r1, r2, #8
 80303e4:	4301      	orrs	r1, r0
 80303e6:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 80303ea:	0611      	lsls	r1, r2, #24
 80303ec:	0a1b      	lsrs	r3, r3, #8
 80303ee:	430b      	orrs	r3, r1
 80303f0:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 80303f4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80303f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80303fc:	4623      	mov	r3, r4
 80303fe:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 8030402:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030406:	4602      	mov	r2, r0
 8030408:	4053      	eors	r3, r2
 803040a:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 803040e:	462b      	mov	r3, r5
 8030410:	460a      	mov	r2, r1
 8030412:	4053      	eors	r3, r2
 8030414:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 8030418:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 803041c:	3b0f      	subs	r3, #15
 803041e:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8030422:	00db      	lsls	r3, r3, #3
 8030424:	4413      	add	r3, r2
 8030426:	e9d3 2300 	ldrd	r2, r3, [r3]
 803042a:	f04f 0000 	mov.w	r0, #0
 803042e:	f04f 0100 	mov.w	r1, #0
 8030432:	09d0      	lsrs	r0, r2, #7
 8030434:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8030438:	09d9      	lsrs	r1, r3, #7
 803043a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 803043e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030442:	4623      	mov	r3, r4
 8030444:	4043      	eors	r3, r0
 8030446:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 803044a:	462b      	mov	r3, r5
 803044c:	404b      	eors	r3, r1
 803044e:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8030452:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8030456:	e9d3 4500 	ldrd	r4, r5, [r3]
 803045a:	4623      	mov	r3, r4
 803045c:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 8030460:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030464:	4602      	mov	r2, r0
 8030466:	189b      	adds	r3, r3, r2
 8030468:	f8c7 3610 	str.w	r3, [r7, #1552]	; 0x610
 803046c:	462b      	mov	r3, r5
 803046e:	460a      	mov	r2, r1
 8030470:	4153      	adcs	r3, r2
 8030472:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8030476:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 803047a:	3b10      	subs	r3, #16
 803047c:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8030480:	00db      	lsls	r3, r3, #3
 8030482:	4413      	add	r3, r2
 8030484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030488:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 803048c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8030490:	4621      	mov	r1, r4
 8030492:	1889      	adds	r1, r1, r2
 8030494:	f8c7 1608 	str.w	r1, [r7, #1544]	; 0x608
 8030498:	4629      	mov	r1, r5
 803049a:	eb41 0303 	adc.w	r3, r1, r3
 803049e:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 80304a2:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 80304a6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80304aa:	00db      	lsls	r3, r3, #3
 80304ac:	4413      	add	r3, r2
 80304ae:	f507 62c1 	add.w	r2, r7, #1544	; 0x608
 80304b2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80304b6:	e9c3 1200 	strd	r1, r2, [r3]
    for (i = 16; i < 80; i++) {
 80304ba:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80304be:	3301      	adds	r3, #1
 80304c0:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 80304c4:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80304c8:	2b4f      	cmp	r3, #79	; 0x4f
 80304ca:	f77f af02 	ble.w	80302d2 <sha512_compress+0x23e>
    t0 = h + Sigma1(e) + Ch(e, f, g) + K[i] + W[i]; \
    t1 = Sigma0(a) + Maj(a, b, c);\
    d += t0; \
    h  = t0 + t1;

    for (i = 0; i < 80; i += 8) {
 80304ce:	2300      	movs	r3, #0
 80304d0:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 80304d4:	f001 bc4b 	b.w	8031d6e <sha512_compress+0x1cda>
       RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],i+0);
 80304d8:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80304dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80304e0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80304e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80304e8:	0498      	lsls	r0, r3, #18
 80304ea:	0b91      	lsrs	r1, r2, #14
 80304ec:	4301      	orrs	r1, r0
 80304ee:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 80304f2:	0491      	lsls	r1, r2, #18
 80304f4:	0b9b      	lsrs	r3, r3, #14
 80304f6:	430b      	orrs	r3, r1
 80304f8:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 80304fc:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8030500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030504:	0398      	lsls	r0, r3, #14
 8030506:	0c91      	lsrs	r1, r2, #18
 8030508:	4301      	orrs	r1, r0
 803050a:	f8c7 15f8 	str.w	r1, [r7, #1528]	; 0x5f8
 803050e:	0391      	lsls	r1, r2, #14
 8030510:	0c9b      	lsrs	r3, r3, #18
 8030512:	430b      	orrs	r3, r1
 8030514:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 8030518:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 803051c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8030520:	4643      	mov	r3, r8
 8030522:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 8030526:	e9d2 0100 	ldrd	r0, r1, [r2]
 803052a:	4602      	mov	r2, r0
 803052c:	4053      	eors	r3, r2
 803052e:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 8030532:	464b      	mov	r3, r9
 8030534:	460a      	mov	r2, r1
 8030536:	4053      	eors	r3, r2
 8030538:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 803053c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8030540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030544:	0a50      	lsrs	r0, r2, #9
 8030546:	05d9      	lsls	r1, r3, #23
 8030548:	4301      	orrs	r1, r0
 803054a:	f8c7 15ec 	str.w	r1, [r7, #1516]	; 0x5ec
 803054e:	0a59      	lsrs	r1, r3, #9
 8030550:	05d3      	lsls	r3, r2, #23
 8030552:	430b      	orrs	r3, r1
 8030554:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
 8030558:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 803055c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8030560:	4643      	mov	r3, r8
 8030562:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 8030566:	e9d2 0100 	ldrd	r0, r1, [r2]
 803056a:	4602      	mov	r2, r0
 803056c:	4053      	eors	r3, r2
 803056e:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 8030572:	464b      	mov	r3, r9
 8030574:	460a      	mov	r2, r1
 8030576:	4053      	eors	r3, r2
 8030578:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 803057c:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8030580:	e9d3 1200 	ldrd	r1, r2, [r3]
 8030584:	460b      	mov	r3, r1
 8030586:	18e3      	adds	r3, r4, r3
 8030588:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
 803058c:	4613      	mov	r3, r2
 803058e:	eb45 0303 	adc.w	r3, r5, r3
 8030592:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 8030596:	f607 1348 	addw	r3, r7, #2376	; 0x948
 803059a:	e9d3 8900 	ldrd	r8, r9, [r3]
 803059e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80305a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80305a6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80305aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80305ae:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80305b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80305b6:	ea80 0602 	eor.w	r6, r0, r2
 80305ba:	f8c7 65d0 	str.w	r6, [r7, #1488]	; 0x5d0
 80305be:	404b      	eors	r3, r1
 80305c0:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 80305c4:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80305c8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80305cc:	460b      	mov	r3, r1
 80305ce:	4023      	ands	r3, r4
 80305d0:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
 80305d4:	4613      	mov	r3, r2
 80305d6:	402b      	ands	r3, r5
 80305d8:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 80305dc:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 80305e0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80305e4:	460b      	mov	r3, r1
 80305e6:	ea88 0303 	eor.w	r3, r8, r3
 80305ea:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 80305ee:	4613      	mov	r3, r2
 80305f0:	ea89 0303 	eor.w	r3, r9, r3
 80305f4:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 80305f8:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 80305fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030600:	4623      	mov	r3, r4
 8030602:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 8030606:	e9d2 0100 	ldrd	r0, r1, [r2]
 803060a:	4602      	mov	r2, r0
 803060c:	189b      	adds	r3, r3, r2
 803060e:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 8030612:	462b      	mov	r3, r5
 8030614:	460a      	mov	r2, r1
 8030616:	4153      	adcs	r3, r2
 8030618:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 803061c:	4af4      	ldr	r2, [pc, #976]	; (80309f0 <sha512_compress+0x95c>)
 803061e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030622:	00db      	lsls	r3, r3, #3
 8030624:	4413      	add	r3, r2
 8030626:	e9d3 2300 	ldrd	r2, r3, [r3]
 803062a:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 803062e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8030632:	4621      	mov	r1, r4
 8030634:	1889      	adds	r1, r1, r2
 8030636:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 803063a:	4629      	mov	r1, r5
 803063c:	eb41 0303 	adc.w	r3, r1, r3
 8030640:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 8030644:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8030648:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 803064c:	00db      	lsls	r3, r3, #3
 803064e:	4413      	add	r3, r2
 8030650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030654:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8030658:	e9d1 4500 	ldrd	r4, r5, [r1]
 803065c:	4621      	mov	r1, r4
 803065e:	1889      	adds	r1, r1, r2
 8030660:	67b9      	str	r1, [r7, #120]	; 0x78
 8030662:	4629      	mov	r1, r5
 8030664:	eb41 0303 	adc.w	r3, r1, r3
 8030668:	67fb      	str	r3, [r7, #124]	; 0x7c
 803066a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 803066e:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8030672:	e9c2 3400 	strd	r3, r4, [r2]
 8030676:	f607 1318 	addw	r3, r7, #2328	; 0x918
 803067a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803067e:	0118      	lsls	r0, r3, #4
 8030680:	0f11      	lsrs	r1, r2, #28
 8030682:	4301      	orrs	r1, r0
 8030684:	f8c7 15a8 	str.w	r1, [r7, #1448]	; 0x5a8
 8030688:	0111      	lsls	r1, r2, #4
 803068a:	0f1b      	lsrs	r3, r3, #28
 803068c:	430b      	orrs	r3, r1
 803068e:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 8030692:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8030696:	e9d3 2300 	ldrd	r2, r3, [r3]
 803069a:	0890      	lsrs	r0, r2, #2
 803069c:	0799      	lsls	r1, r3, #30
 803069e:	4301      	orrs	r1, r0
 80306a0:	f8c7 15a4 	str.w	r1, [r7, #1444]	; 0x5a4
 80306a4:	0899      	lsrs	r1, r3, #2
 80306a6:	0793      	lsls	r3, r2, #30
 80306a8:	430b      	orrs	r3, r1
 80306aa:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 80306ae:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80306b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80306b6:	4623      	mov	r3, r4
 80306b8:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 80306bc:	e9d2 0100 	ldrd	r0, r1, [r2]
 80306c0:	4602      	mov	r2, r0
 80306c2:	4053      	eors	r3, r2
 80306c4:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 80306c8:	462b      	mov	r3, r5
 80306ca:	460a      	mov	r2, r1
 80306cc:	4053      	eors	r3, r2
 80306ce:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 80306d2:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80306d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80306da:	09d0      	lsrs	r0, r2, #7
 80306dc:	0659      	lsls	r1, r3, #25
 80306de:	4301      	orrs	r1, r0
 80306e0:	f8c7 1594 	str.w	r1, [r7, #1428]	; 0x594
 80306e4:	09d9      	lsrs	r1, r3, #7
 80306e6:	0653      	lsls	r3, r2, #25
 80306e8:	430b      	orrs	r3, r1
 80306ea:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 80306ee:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 80306f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80306f6:	4623      	mov	r3, r4
 80306f8:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 80306fc:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030700:	4602      	mov	r2, r0
 8030702:	4053      	eors	r3, r2
 8030704:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 8030708:	462b      	mov	r3, r5
 803070a:	460a      	mov	r2, r1
 803070c:	4053      	eors	r3, r2
 803070e:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8030712:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8030716:	e9d3 0100 	ldrd	r0, r1, [r3]
 803071a:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 803071e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030722:	ea40 0402 	orr.w	r4, r0, r2
 8030726:	f8c7 4580 	str.w	r4, [r7, #1408]	; 0x580
 803072a:	430b      	orrs	r3, r1
 803072c:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8030730:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030738:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 803073c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8030740:	4621      	mov	r1, r4
 8030742:	4011      	ands	r1, r2
 8030744:	f8c7 1578 	str.w	r1, [r7, #1400]	; 0x578
 8030748:	4629      	mov	r1, r5
 803074a:	400b      	ands	r3, r1
 803074c:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8030750:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8030754:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030758:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 803075c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030760:	ea00 0402 	and.w	r4, r0, r2
 8030764:	f8c7 4570 	str.w	r4, [r7, #1392]	; 0x570
 8030768:	400b      	ands	r3, r1
 803076a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 803076e:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8030772:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030776:	4623      	mov	r3, r4
 8030778:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 803077c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030780:	4602      	mov	r2, r0
 8030782:	4313      	orrs	r3, r2
 8030784:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
 8030788:	462b      	mov	r3, r5
 803078a:	460a      	mov	r2, r1
 803078c:	4313      	orrs	r3, r2
 803078e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 8030792:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 8030796:	e9d3 4500 	ldrd	r4, r5, [r3]
 803079a:	4623      	mov	r3, r4
 803079c:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 80307a0:	e9d2 0100 	ldrd	r0, r1, [r2]
 80307a4:	4602      	mov	r2, r0
 80307a6:	189b      	adds	r3, r3, r2
 80307a8:	673b      	str	r3, [r7, #112]	; 0x70
 80307aa:	462b      	mov	r3, r5
 80307ac:	460a      	mov	r2, r1
 80307ae:	4153      	adcs	r3, r2
 80307b0:	677b      	str	r3, [r7, #116]	; 0x74
 80307b2:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80307b6:	f607 1258 	addw	r2, r7, #2392	; 0x958
 80307ba:	e9c2 3400 	strd	r3, r4, [r2]
 80307be:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80307c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80307c6:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80307ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80307ce:	1884      	adds	r4, r0, r2
 80307d0:	f8c7 4560 	str.w	r4, [r7, #1376]	; 0x560
 80307d4:	eb41 0303 	adc.w	r3, r1, r3
 80307d8:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 80307dc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80307e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80307e4:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 80307e8:	e9c2 3400 	strd	r3, r4, [r2]
 80307ec:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80307f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80307f4:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80307f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80307fc:	1884      	adds	r4, r0, r2
 80307fe:	f8c7 4558 	str.w	r4, [r7, #1368]	; 0x558
 8030802:	eb41 0303 	adc.w	r3, r1, r3
 8030806:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 803080a:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 803080e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8030812:	f507 6215 	add.w	r2, r7, #2384	; 0x950
 8030816:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],i+1);
 803081a:	f607 1348 	addw	r3, r7, #2376	; 0x948
 803081e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030822:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8030826:	e9d3 2300 	ldrd	r2, r3, [r3]
 803082a:	0498      	lsls	r0, r3, #18
 803082c:	0b91      	lsrs	r1, r2, #14
 803082e:	4301      	orrs	r1, r0
 8030830:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 8030834:	0491      	lsls	r1, r2, #18
 8030836:	0b9b      	lsrs	r3, r3, #14
 8030838:	430b      	orrs	r3, r1
 803083a:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 803083e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8030842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030846:	0398      	lsls	r0, r3, #14
 8030848:	0c91      	lsrs	r1, r2, #18
 803084a:	4301      	orrs	r1, r0
 803084c:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
 8030850:	0391      	lsls	r1, r2, #14
 8030852:	0c9b      	lsrs	r3, r3, #18
 8030854:	430b      	orrs	r3, r1
 8030856:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 803085a:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 803085e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8030862:	4643      	mov	r3, r8
 8030864:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 8030868:	e9d2 0100 	ldrd	r0, r1, [r2]
 803086c:	4602      	mov	r2, r0
 803086e:	4053      	eors	r3, r2
 8030870:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 8030874:	464b      	mov	r3, r9
 8030876:	460a      	mov	r2, r1
 8030878:	4053      	eors	r3, r2
 803087a:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 803087e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8030882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030886:	0a50      	lsrs	r0, r2, #9
 8030888:	05d9      	lsls	r1, r3, #23
 803088a:	4301      	orrs	r1, r0
 803088c:	f8c7 153c 	str.w	r1, [r7, #1340]	; 0x53c
 8030890:	0a59      	lsrs	r1, r3, #9
 8030892:	05d3      	lsls	r3, r2, #23
 8030894:	430b      	orrs	r3, r1
 8030896:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 803089a:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 803089e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80308a2:	4643      	mov	r3, r8
 80308a4:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 80308a8:	e9d2 0100 	ldrd	r0, r1, [r2]
 80308ac:	4602      	mov	r2, r0
 80308ae:	4053      	eors	r3, r2
 80308b0:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 80308b4:	464b      	mov	r3, r9
 80308b6:	460a      	mov	r2, r1
 80308b8:	4053      	eors	r3, r2
 80308ba:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 80308be:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80308c2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80308c6:	460b      	mov	r3, r1
 80308c8:	18e3      	adds	r3, r4, r3
 80308ca:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 80308ce:	4613      	mov	r3, r2
 80308d0:	eb45 0303 	adc.w	r3, r5, r3
 80308d4:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 80308d8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80308dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80308e0:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80308e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80308e8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80308ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80308f0:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80308f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80308f8:	ea80 0602 	eor.w	r6, r0, r2
 80308fc:	f8c7 6520 	str.w	r6, [r7, #1312]	; 0x520
 8030900:	404b      	eors	r3, r1
 8030902:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8030906:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 803090a:	e9d3 1200 	ldrd	r1, r2, [r3]
 803090e:	460b      	mov	r3, r1
 8030910:	4023      	ands	r3, r4
 8030912:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 8030916:	4613      	mov	r3, r2
 8030918:	402b      	ands	r3, r5
 803091a:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 803091e:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8030922:	e9d3 1200 	ldrd	r1, r2, [r3]
 8030926:	460b      	mov	r3, r1
 8030928:	ea88 0303 	eor.w	r3, r8, r3
 803092c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8030930:	4613      	mov	r3, r2
 8030932:	ea89 0303 	eor.w	r3, r9, r3
 8030936:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 803093a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 803093e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030942:	4623      	mov	r3, r4
 8030944:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 8030948:	e9d2 0100 	ldrd	r0, r1, [r2]
 803094c:	4602      	mov	r2, r0
 803094e:	189b      	adds	r3, r3, r2
 8030950:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 8030954:	462b      	mov	r3, r5
 8030956:	460a      	mov	r2, r1
 8030958:	4153      	adcs	r3, r2
 803095a:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 803095e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030962:	3301      	adds	r3, #1
 8030964:	4a22      	ldr	r2, [pc, #136]	; (80309f0 <sha512_compress+0x95c>)
 8030966:	00db      	lsls	r3, r3, #3
 8030968:	4413      	add	r3, r2
 803096a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803096e:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8030972:	e9d1 4500 	ldrd	r4, r5, [r1]
 8030976:	4621      	mov	r1, r4
 8030978:	1889      	adds	r1, r1, r2
 803097a:	f8c7 1500 	str.w	r1, [r7, #1280]	; 0x500
 803097e:	4629      	mov	r1, r5
 8030980:	eb41 0303 	adc.w	r3, r1, r3
 8030984:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8030988:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 803098c:	3301      	adds	r3, #1
 803098e:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8030992:	00db      	lsls	r3, r3, #3
 8030994:	4413      	add	r3, r2
 8030996:	e9d3 2300 	ldrd	r2, r3, [r3]
 803099a:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 803099e:	e9d1 4500 	ldrd	r4, r5, [r1]
 80309a2:	4621      	mov	r1, r4
 80309a4:	1889      	adds	r1, r1, r2
 80309a6:	66b9      	str	r1, [r7, #104]	; 0x68
 80309a8:	4629      	mov	r1, r5
 80309aa:	eb41 0303 	adc.w	r3, r1, r3
 80309ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80309b0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80309b4:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 80309b8:	e9c2 3400 	strd	r3, r4, [r2]
 80309bc:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80309c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80309c4:	0118      	lsls	r0, r3, #4
 80309c6:	0f11      	lsrs	r1, r2, #28
 80309c8:	4301      	orrs	r1, r0
 80309ca:	f8c7 14f8 	str.w	r1, [r7, #1272]	; 0x4f8
 80309ce:	0111      	lsls	r1, r2, #4
 80309d0:	0f1b      	lsrs	r3, r3, #28
 80309d2:	430b      	orrs	r3, r1
 80309d4:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 80309d8:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80309dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80309e0:	0890      	lsrs	r0, r2, #2
 80309e2:	0799      	lsls	r1, r3, #30
 80309e4:	4301      	orrs	r1, r0
 80309e6:	f8c7 14f4 	str.w	r1, [r7, #1268]	; 0x4f4
 80309ea:	0899      	lsrs	r1, r3, #2
 80309ec:	0793      	lsls	r3, r2, #30
 80309ee:	e001      	b.n	80309f4 <sha512_compress+0x960>
 80309f0:	0803fc98 	.word	0x0803fc98
 80309f4:	430b      	orrs	r3, r1
 80309f6:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 80309fa:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80309fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030a02:	4623      	mov	r3, r4
 8030a04:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 8030a08:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030a0c:	4602      	mov	r2, r0
 8030a0e:	4053      	eors	r3, r2
 8030a10:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8030a14:	462b      	mov	r3, r5
 8030a16:	460a      	mov	r2, r1
 8030a18:	4053      	eors	r3, r2
 8030a1a:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8030a1e:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8030a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030a26:	09d0      	lsrs	r0, r2, #7
 8030a28:	0659      	lsls	r1, r3, #25
 8030a2a:	4301      	orrs	r1, r0
 8030a2c:	f8c7 14e4 	str.w	r1, [r7, #1252]	; 0x4e4
 8030a30:	09d9      	lsrs	r1, r3, #7
 8030a32:	0653      	lsls	r3, r2, #25
 8030a34:	430b      	orrs	r3, r1
 8030a36:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 8030a3a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8030a3e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030a42:	4623      	mov	r3, r4
 8030a44:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8030a48:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030a4c:	4602      	mov	r2, r0
 8030a4e:	4053      	eors	r3, r2
 8030a50:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8030a54:	462b      	mov	r3, r5
 8030a56:	460a      	mov	r2, r1
 8030a58:	4053      	eors	r3, r2
 8030a5a:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 8030a5e:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8030a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030a66:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8030a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030a6e:	ea40 0402 	orr.w	r4, r0, r2
 8030a72:	f8c7 44d0 	str.w	r4, [r7, #1232]	; 0x4d0
 8030a76:	430b      	orrs	r3, r1
 8030a78:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8030a7c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8030a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030a84:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8030a88:	e9d1 4500 	ldrd	r4, r5, [r1]
 8030a8c:	4621      	mov	r1, r4
 8030a8e:	4011      	ands	r1, r2
 8030a90:	f8c7 14c8 	str.w	r1, [r7, #1224]	; 0x4c8
 8030a94:	4629      	mov	r1, r5
 8030a96:	400b      	ands	r3, r1
 8030a98:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8030a9c:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8030aa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030aa4:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8030aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030aac:	ea00 0402 	and.w	r4, r0, r2
 8030ab0:	f8c7 44c0 	str.w	r4, [r7, #1216]	; 0x4c0
 8030ab4:	400b      	ands	r3, r1
 8030ab6:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 8030aba:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8030abe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030ac2:	4623      	mov	r3, r4
 8030ac4:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8030ac8:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030acc:	4602      	mov	r2, r0
 8030ace:	4313      	orrs	r3, r2
 8030ad0:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 8030ad4:	462b      	mov	r3, r5
 8030ad6:	460a      	mov	r2, r1
 8030ad8:	4313      	orrs	r3, r2
 8030ada:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8030ade:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8030ae2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030ae6:	4623      	mov	r3, r4
 8030ae8:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8030aec:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030af0:	4602      	mov	r2, r0
 8030af2:	189b      	adds	r3, r3, r2
 8030af4:	663b      	str	r3, [r7, #96]	; 0x60
 8030af6:	462b      	mov	r3, r5
 8030af8:	460a      	mov	r2, r1
 8030afa:	4153      	adcs	r3, r2
 8030afc:	667b      	str	r3, [r7, #100]	; 0x64
 8030afe:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8030b02:	f607 1258 	addw	r2, r7, #2392	; 0x958
 8030b06:	e9c2 3400 	strd	r3, r4, [r2]
 8030b0a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030b0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030b12:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8030b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030b1a:	1884      	adds	r4, r0, r2
 8030b1c:	f8c7 44b0 	str.w	r4, [r7, #1200]	; 0x4b0
 8030b20:	eb41 0303 	adc.w	r3, r1, r3
 8030b24:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 8030b28:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8030b2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8030b30:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8030b34:	e9c2 3400 	strd	r3, r4, [r2]
 8030b38:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8030b3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030b40:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8030b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030b48:	1884      	adds	r4, r0, r2
 8030b4a:	f8c7 44a8 	str.w	r4, [r7, #1192]	; 0x4a8
 8030b4e:	eb41 0303 	adc.w	r3, r1, r3
 8030b52:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 8030b56:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8030b5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8030b5e:	f607 1248 	addw	r2, r7, #2376	; 0x948
 8030b62:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],i+2);
 8030b66:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8030b6a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030b6e:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030b76:	0498      	lsls	r0, r3, #18
 8030b78:	0b91      	lsrs	r1, r2, #14
 8030b7a:	4301      	orrs	r1, r0
 8030b7c:	f8c7 14a0 	str.w	r1, [r7, #1184]	; 0x4a0
 8030b80:	0491      	lsls	r1, r2, #18
 8030b82:	0b9b      	lsrs	r3, r3, #14
 8030b84:	430b      	orrs	r3, r1
 8030b86:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 8030b8a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030b92:	0398      	lsls	r0, r3, #14
 8030b94:	0c91      	lsrs	r1, r2, #18
 8030b96:	4301      	orrs	r1, r0
 8030b98:	f8c7 1498 	str.w	r1, [r7, #1176]	; 0x498
 8030b9c:	0391      	lsls	r1, r2, #14
 8030b9e:	0c9b      	lsrs	r3, r3, #18
 8030ba0:	430b      	orrs	r3, r1
 8030ba2:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8030ba6:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8030baa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8030bae:	4643      	mov	r3, r8
 8030bb0:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8030bb4:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030bb8:	4602      	mov	r2, r0
 8030bba:	4053      	eors	r3, r2
 8030bbc:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8030bc0:	464b      	mov	r3, r9
 8030bc2:	460a      	mov	r2, r1
 8030bc4:	4053      	eors	r3, r2
 8030bc6:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 8030bca:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030bd2:	0a50      	lsrs	r0, r2, #9
 8030bd4:	05d9      	lsls	r1, r3, #23
 8030bd6:	4301      	orrs	r1, r0
 8030bd8:	f8c7 148c 	str.w	r1, [r7, #1164]	; 0x48c
 8030bdc:	0a59      	lsrs	r1, r3, #9
 8030bde:	05d3      	lsls	r3, r2, #23
 8030be0:	430b      	orrs	r3, r1
 8030be2:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8030be6:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8030bea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8030bee:	4643      	mov	r3, r8
 8030bf0:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8030bf4:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030bf8:	4602      	mov	r2, r0
 8030bfa:	4053      	eors	r3, r2
 8030bfc:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8030c00:	464b      	mov	r3, r9
 8030c02:	460a      	mov	r2, r1
 8030c04:	4053      	eors	r3, r2
 8030c06:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 8030c0a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8030c0e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8030c12:	460b      	mov	r3, r1
 8030c14:	18e3      	adds	r3, r4, r3
 8030c16:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8030c1a:	4613      	mov	r3, r2
 8030c1c:	eb45 0303 	adc.w	r3, r5, r3
 8030c20:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 8030c24:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8030c28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8030c2c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030c30:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030c34:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8030c38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030c3c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8030c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030c44:	ea80 0602 	eor.w	r6, r0, r2
 8030c48:	f8c7 6470 	str.w	r6, [r7, #1136]	; 0x470
 8030c4c:	404b      	eors	r3, r1
 8030c4e:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8030c52:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8030c56:	e9d3 1200 	ldrd	r1, r2, [r3]
 8030c5a:	460b      	mov	r3, r1
 8030c5c:	4023      	ands	r3, r4
 8030c5e:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8030c62:	4613      	mov	r3, r2
 8030c64:	402b      	ands	r3, r5
 8030c66:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8030c6a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8030c6e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8030c72:	460b      	mov	r3, r1
 8030c74:	ea88 0303 	eor.w	r3, r8, r3
 8030c78:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8030c7c:	4613      	mov	r3, r2
 8030c7e:	ea89 0303 	eor.w	r3, r9, r3
 8030c82:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 8030c86:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8030c8a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030c8e:	4623      	mov	r3, r4
 8030c90:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8030c94:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030c98:	4602      	mov	r2, r0
 8030c9a:	189b      	adds	r3, r3, r2
 8030c9c:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8030ca0:	462b      	mov	r3, r5
 8030ca2:	460a      	mov	r2, r1
 8030ca4:	4153      	adcs	r3, r2
 8030ca6:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8030caa:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030cae:	3302      	adds	r3, #2
 8030cb0:	4af4      	ldr	r2, [pc, #976]	; (8031084 <sha512_compress+0xff0>)
 8030cb2:	00db      	lsls	r3, r3, #3
 8030cb4:	4413      	add	r3, r2
 8030cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030cba:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8030cbe:	e9d1 4500 	ldrd	r4, r5, [r1]
 8030cc2:	4621      	mov	r1, r4
 8030cc4:	1889      	adds	r1, r1, r2
 8030cc6:	f8c7 1450 	str.w	r1, [r7, #1104]	; 0x450
 8030cca:	4629      	mov	r1, r5
 8030ccc:	eb41 0303 	adc.w	r3, r1, r3
 8030cd0:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8030cd4:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030cd8:	3302      	adds	r3, #2
 8030cda:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8030cde:	00db      	lsls	r3, r3, #3
 8030ce0:	4413      	add	r3, r2
 8030ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030ce6:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8030cea:	e9d1 4500 	ldrd	r4, r5, [r1]
 8030cee:	4621      	mov	r1, r4
 8030cf0:	1889      	adds	r1, r1, r2
 8030cf2:	65b9      	str	r1, [r7, #88]	; 0x58
 8030cf4:	4629      	mov	r1, r5
 8030cf6:	eb41 0303 	adc.w	r3, r1, r3
 8030cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8030cfc:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8030d00:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8030d04:	e9c2 3400 	strd	r3, r4, [r2]
 8030d08:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030d10:	0118      	lsls	r0, r3, #4
 8030d12:	0f11      	lsrs	r1, r2, #28
 8030d14:	4301      	orrs	r1, r0
 8030d16:	f8c7 1448 	str.w	r1, [r7, #1096]	; 0x448
 8030d1a:	0111      	lsls	r1, r2, #4
 8030d1c:	0f1b      	lsrs	r3, r3, #28
 8030d1e:	430b      	orrs	r3, r1
 8030d20:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8030d24:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030d2c:	0890      	lsrs	r0, r2, #2
 8030d2e:	0799      	lsls	r1, r3, #30
 8030d30:	4301      	orrs	r1, r0
 8030d32:	f8c7 1444 	str.w	r1, [r7, #1092]	; 0x444
 8030d36:	0899      	lsrs	r1, r3, #2
 8030d38:	0793      	lsls	r3, r2, #30
 8030d3a:	430b      	orrs	r3, r1
 8030d3c:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8030d40:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8030d44:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030d48:	4623      	mov	r3, r4
 8030d4a:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8030d4e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030d52:	4602      	mov	r2, r0
 8030d54:	4053      	eors	r3, r2
 8030d56:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8030d5a:	462b      	mov	r3, r5
 8030d5c:	460a      	mov	r2, r1
 8030d5e:	4053      	eors	r3, r2
 8030d60:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8030d64:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030d6c:	09d0      	lsrs	r0, r2, #7
 8030d6e:	0659      	lsls	r1, r3, #25
 8030d70:	4301      	orrs	r1, r0
 8030d72:	f8c7 1434 	str.w	r1, [r7, #1076]	; 0x434
 8030d76:	09d9      	lsrs	r1, r3, #7
 8030d78:	0653      	lsls	r3, r2, #25
 8030d7a:	430b      	orrs	r3, r1
 8030d7c:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8030d80:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8030d84:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030d88:	4623      	mov	r3, r4
 8030d8a:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8030d8e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030d92:	4602      	mov	r2, r0
 8030d94:	4053      	eors	r3, r2
 8030d96:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8030d9a:	462b      	mov	r3, r5
 8030d9c:	460a      	mov	r2, r1
 8030d9e:	4053      	eors	r3, r2
 8030da0:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8030da4:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030dac:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8030db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030db4:	ea40 0402 	orr.w	r4, r0, r2
 8030db8:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
 8030dbc:	430b      	orrs	r3, r1
 8030dbe:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8030dc2:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8030dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030dca:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8030dce:	e9d1 4500 	ldrd	r4, r5, [r1]
 8030dd2:	4621      	mov	r1, r4
 8030dd4:	4011      	ands	r1, r2
 8030dd6:	f8c7 1418 	str.w	r1, [r7, #1048]	; 0x418
 8030dda:	4629      	mov	r1, r5
 8030ddc:	400b      	ands	r3, r1
 8030dde:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8030de2:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030de6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030dea:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8030dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030df2:	ea00 0402 	and.w	r4, r0, r2
 8030df6:	f8c7 4410 	str.w	r4, [r7, #1040]	; 0x410
 8030dfa:	400b      	ands	r3, r1
 8030dfc:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8030e00:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8030e04:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030e08:	4623      	mov	r3, r4
 8030e0a:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8030e0e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030e12:	4602      	mov	r2, r0
 8030e14:	4313      	orrs	r3, r2
 8030e16:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8030e1a:	462b      	mov	r3, r5
 8030e1c:	460a      	mov	r2, r1
 8030e1e:	4313      	orrs	r3, r2
 8030e20:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8030e24:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8030e28:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030e2c:	4623      	mov	r3, r4
 8030e2e:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8030e32:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030e36:	4602      	mov	r2, r0
 8030e38:	189b      	adds	r3, r3, r2
 8030e3a:	653b      	str	r3, [r7, #80]	; 0x50
 8030e3c:	462b      	mov	r3, r5
 8030e3e:	460a      	mov	r2, r1
 8030e40:	4153      	adcs	r3, r2
 8030e42:	657b      	str	r3, [r7, #84]	; 0x54
 8030e44:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8030e48:	f607 1258 	addw	r2, r7, #2392	; 0x958
 8030e4c:	e9c2 3400 	strd	r3, r4, [r2]
 8030e50:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8030e54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030e58:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8030e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030e60:	1884      	adds	r4, r0, r2
 8030e62:	f8c7 4400 	str.w	r4, [r7, #1024]	; 0x400
 8030e66:	eb41 0303 	adc.w	r3, r1, r3
 8030e6a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 8030e6e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8030e72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8030e76:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8030e7a:	e9c2 3400 	strd	r3, r4, [r2]
 8030e7e:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8030e82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030e86:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8030e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030e8e:	1884      	adds	r4, r0, r2
 8030e90:	f8c7 43f8 	str.w	r4, [r7, #1016]	; 0x3f8
 8030e94:	eb41 0303 	adc.w	r3, r1, r3
 8030e98:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8030e9c:	e9d7 34fe 	ldrd	r3, r4, [r7, #1016]	; 0x3f8
 8030ea0:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8030ea4:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],i+3);
 8030ea8:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8030eac:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030eb0:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8030eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030eb8:	0498      	lsls	r0, r3, #18
 8030eba:	0b91      	lsrs	r1, r2, #14
 8030ebc:	4301      	orrs	r1, r0
 8030ebe:	f8c7 13f0 	str.w	r1, [r7, #1008]	; 0x3f0
 8030ec2:	0491      	lsls	r1, r2, #18
 8030ec4:	0b9b      	lsrs	r3, r3, #14
 8030ec6:	430b      	orrs	r3, r1
 8030ec8:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8030ecc:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8030ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030ed4:	0398      	lsls	r0, r3, #14
 8030ed6:	0c91      	lsrs	r1, r2, #18
 8030ed8:	4301      	orrs	r1, r0
 8030eda:	f8c7 13e8 	str.w	r1, [r7, #1000]	; 0x3e8
 8030ede:	0391      	lsls	r1, r2, #14
 8030ee0:	0c9b      	lsrs	r3, r3, #18
 8030ee2:	430b      	orrs	r3, r1
 8030ee4:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8030ee8:	e9d7 89fc 	ldrd	r8, r9, [r7, #1008]	; 0x3f0
 8030eec:	4643      	mov	r3, r8
 8030eee:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 8030ef2:	4602      	mov	r2, r0
 8030ef4:	4053      	eors	r3, r2
 8030ef6:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8030efa:	464b      	mov	r3, r9
 8030efc:	460a      	mov	r2, r1
 8030efe:	4053      	eors	r3, r2
 8030f00:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8030f04:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8030f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030f0c:	0a50      	lsrs	r0, r2, #9
 8030f0e:	05d9      	lsls	r1, r3, #23
 8030f10:	4301      	orrs	r1, r0
 8030f12:	f8c7 13dc 	str.w	r1, [r7, #988]	; 0x3dc
 8030f16:	0a59      	lsrs	r1, r3, #9
 8030f18:	05d3      	lsls	r3, r2, #23
 8030f1a:	430b      	orrs	r3, r1
 8030f1c:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 8030f20:	e9d7 89f8 	ldrd	r8, r9, [r7, #992]	; 0x3e0
 8030f24:	4643      	mov	r3, r8
 8030f26:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 8030f2a:	4602      	mov	r2, r0
 8030f2c:	4053      	eors	r3, r2
 8030f2e:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 8030f32:	464b      	mov	r3, r9
 8030f34:	460a      	mov	r2, r1
 8030f36:	4053      	eors	r3, r2
 8030f38:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 8030f3c:	e9d7 12f4 	ldrd	r1, r2, [r7, #976]	; 0x3d0
 8030f40:	460b      	mov	r3, r1
 8030f42:	18e3      	adds	r3, r4, r3
 8030f44:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 8030f48:	4613      	mov	r3, r2
 8030f4a:	eb45 0303 	adc.w	r3, r5, r3
 8030f4e:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8030f52:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8030f56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8030f5a:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8030f5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030f62:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030f6a:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8030f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030f72:	ea80 0602 	eor.w	r6, r0, r2
 8030f76:	f8c7 63c0 	str.w	r6, [r7, #960]	; 0x3c0
 8030f7a:	404b      	eors	r3, r1
 8030f7c:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8030f80:	e9d7 12f0 	ldrd	r1, r2, [r7, #960]	; 0x3c0
 8030f84:	460b      	mov	r3, r1
 8030f86:	4023      	ands	r3, r4
 8030f88:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8030f8c:	4613      	mov	r3, r2
 8030f8e:	402b      	ands	r3, r5
 8030f90:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8030f94:	e9d7 12ee 	ldrd	r1, r2, [r7, #952]	; 0x3b8
 8030f98:	460b      	mov	r3, r1
 8030f9a:	ea88 0303 	eor.w	r3, r8, r3
 8030f9e:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8030fa2:	4613      	mov	r3, r2
 8030fa4:	ea89 0303 	eor.w	r3, r9, r3
 8030fa8:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8030fac:	e9d7 45f2 	ldrd	r4, r5, [r7, #968]	; 0x3c8
 8030fb0:	4623      	mov	r3, r4
 8030fb2:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	; 0x3b0
 8030fb6:	4602      	mov	r2, r0
 8030fb8:	189b      	adds	r3, r3, r2
 8030fba:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 8030fbe:	462b      	mov	r3, r5
 8030fc0:	460a      	mov	r2, r1
 8030fc2:	4153      	adcs	r3, r2
 8030fc4:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8030fc8:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030fcc:	3303      	adds	r3, #3
 8030fce:	4a2d      	ldr	r2, [pc, #180]	; (8031084 <sha512_compress+0xff0>)
 8030fd0:	00db      	lsls	r3, r3, #3
 8030fd2:	4413      	add	r3, r2
 8030fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030fd8:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 8030fdc:	4621      	mov	r1, r4
 8030fde:	1889      	adds	r1, r1, r2
 8030fe0:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 8030fe4:	4629      	mov	r1, r5
 8030fe6:	eb41 0303 	adc.w	r3, r1, r3
 8030fea:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8030fee:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030ff2:	3303      	adds	r3, #3
 8030ff4:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8030ff8:	00db      	lsls	r3, r3, #3
 8030ffa:	4413      	add	r3, r2
 8030ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031000:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 8031004:	4621      	mov	r1, r4
 8031006:	1889      	adds	r1, r1, r2
 8031008:	64b9      	str	r1, [r7, #72]	; 0x48
 803100a:	4629      	mov	r1, r5
 803100c:	eb41 0303 	adc.w	r3, r1, r3
 8031010:	64fb      	str	r3, [r7, #76]	; 0x4c
 8031012:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8031016:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 803101a:	e9c2 3400 	strd	r3, r4, [r2]
 803101e:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8031022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031026:	0118      	lsls	r0, r3, #4
 8031028:	0f11      	lsrs	r1, r2, #28
 803102a:	4301      	orrs	r1, r0
 803102c:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 8031030:	0111      	lsls	r1, r2, #4
 8031032:	0f1b      	lsrs	r3, r3, #28
 8031034:	430b      	orrs	r3, r1
 8031036:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 803103a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 803103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031042:	0890      	lsrs	r0, r2, #2
 8031044:	0799      	lsls	r1, r3, #30
 8031046:	4301      	orrs	r1, r0
 8031048:	f8c7 1394 	str.w	r1, [r7, #916]	; 0x394
 803104c:	0899      	lsrs	r1, r3, #2
 803104e:	0793      	lsls	r3, r2, #30
 8031050:	430b      	orrs	r3, r1
 8031052:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 8031056:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 803105a:	4623      	mov	r3, r4
 803105c:	e9d7 01e4 	ldrd	r0, r1, [r7, #912]	; 0x390
 8031060:	4602      	mov	r2, r0
 8031062:	4053      	eors	r3, r2
 8031064:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8031068:	462b      	mov	r3, r5
 803106a:	460a      	mov	r2, r1
 803106c:	4053      	eors	r3, r2
 803106e:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8031072:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8031076:	e9d3 2300 	ldrd	r2, r3, [r3]
 803107a:	09d0      	lsrs	r0, r2, #7
 803107c:	0659      	lsls	r1, r3, #25
 803107e:	4301      	orrs	r1, r0
 8031080:	e002      	b.n	8031088 <sha512_compress+0xff4>
 8031082:	bf00      	nop
 8031084:	0803fc98 	.word	0x0803fc98
 8031088:	f8c7 1384 	str.w	r1, [r7, #900]	; 0x384
 803108c:	09d9      	lsrs	r1, r3, #7
 803108e:	0653      	lsls	r3, r2, #25
 8031090:	430b      	orrs	r3, r1
 8031092:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8031096:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 803109a:	4623      	mov	r3, r4
 803109c:	e9d7 01e0 	ldrd	r0, r1, [r7, #896]	; 0x380
 80310a0:	4602      	mov	r2, r0
 80310a2:	4053      	eors	r3, r2
 80310a4:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 80310a8:	462b      	mov	r3, r5
 80310aa:	460a      	mov	r2, r1
 80310ac:	4053      	eors	r3, r2
 80310ae:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 80310b2:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80310b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80310ba:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80310be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80310c2:	ea40 0402 	orr.w	r4, r0, r2
 80310c6:	f8c7 4370 	str.w	r4, [r7, #880]	; 0x370
 80310ca:	430b      	orrs	r3, r1
 80310cc:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 80310d0:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80310d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80310d8:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	; 0x370
 80310dc:	4621      	mov	r1, r4
 80310de:	4011      	ands	r1, r2
 80310e0:	f8c7 1368 	str.w	r1, [r7, #872]	; 0x368
 80310e4:	4629      	mov	r1, r5
 80310e6:	400b      	ands	r3, r1
 80310e8:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 80310ec:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80310f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80310f4:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80310f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80310fc:	ea00 0402 	and.w	r4, r0, r2
 8031100:	f8c7 4360 	str.w	r4, [r7, #864]	; 0x360
 8031104:	400b      	ands	r3, r1
 8031106:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 803110a:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 803110e:	4623      	mov	r3, r4
 8031110:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 8031114:	4602      	mov	r2, r0
 8031116:	4313      	orrs	r3, r2
 8031118:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 803111c:	462b      	mov	r3, r5
 803111e:	460a      	mov	r2, r1
 8031120:	4313      	orrs	r3, r2
 8031122:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8031126:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 803112a:	4623      	mov	r3, r4
 803112c:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	; 0x358
 8031130:	4602      	mov	r2, r0
 8031132:	189b      	adds	r3, r3, r2
 8031134:	643b      	str	r3, [r7, #64]	; 0x40
 8031136:	462b      	mov	r3, r5
 8031138:	460a      	mov	r2, r1
 803113a:	4153      	adcs	r3, r2
 803113c:	647b      	str	r3, [r7, #68]	; 0x44
 803113e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8031142:	f607 1258 	addw	r2, r7, #2392	; 0x958
 8031146:	e9c2 3400 	strd	r3, r4, [r2]
 803114a:	f607 1318 	addw	r3, r7, #2328	; 0x918
 803114e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031152:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8031156:	e9d3 2300 	ldrd	r2, r3, [r3]
 803115a:	1884      	adds	r4, r0, r2
 803115c:	f8c7 4350 	str.w	r4, [r7, #848]	; 0x350
 8031160:	eb41 0303 	adc.w	r3, r1, r3
 8031164:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8031168:	e9d7 34d4 	ldrd	r3, r4, [r7, #848]	; 0x350
 803116c:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8031170:	e9c2 3400 	strd	r3, r4, [r2]
 8031174:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8031178:	e9d3 0100 	ldrd	r0, r1, [r3]
 803117c:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8031180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031184:	1884      	adds	r4, r0, r2
 8031186:	f8c7 4348 	str.w	r4, [r7, #840]	; 0x348
 803118a:	eb41 0303 	adc.w	r3, r1, r3
 803118e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8031192:	e9d7 34d2 	ldrd	r3, r4, [r7, #840]	; 0x348
 8031196:	f607 1238 	addw	r2, r7, #2360	; 0x938
 803119a:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],i+4);
 803119e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80311a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80311a6:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80311aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80311ae:	0498      	lsls	r0, r3, #18
 80311b0:	0b91      	lsrs	r1, r2, #14
 80311b2:	4301      	orrs	r1, r0
 80311b4:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 80311b8:	0491      	lsls	r1, r2, #18
 80311ba:	0b9b      	lsrs	r3, r3, #14
 80311bc:	430b      	orrs	r3, r1
 80311be:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 80311c2:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80311c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80311ca:	0398      	lsls	r0, r3, #14
 80311cc:	0c91      	lsrs	r1, r2, #18
 80311ce:	4301      	orrs	r1, r0
 80311d0:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 80311d4:	0391      	lsls	r1, r2, #14
 80311d6:	0c9b      	lsrs	r3, r3, #18
 80311d8:	430b      	orrs	r3, r1
 80311da:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 80311de:	e9d7 89d0 	ldrd	r8, r9, [r7, #832]	; 0x340
 80311e2:	4643      	mov	r3, r8
 80311e4:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 80311e8:	4602      	mov	r2, r0
 80311ea:	4053      	eors	r3, r2
 80311ec:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 80311f0:	464b      	mov	r3, r9
 80311f2:	460a      	mov	r2, r1
 80311f4:	4053      	eors	r3, r2
 80311f6:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80311fa:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80311fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031202:	0a50      	lsrs	r0, r2, #9
 8031204:	05d9      	lsls	r1, r3, #23
 8031206:	4301      	orrs	r1, r0
 8031208:	f8c7 132c 	str.w	r1, [r7, #812]	; 0x32c
 803120c:	0a59      	lsrs	r1, r3, #9
 803120e:	05d3      	lsls	r3, r2, #23
 8031210:	430b      	orrs	r3, r1
 8031212:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8031216:	e9d7 89cc 	ldrd	r8, r9, [r7, #816]	; 0x330
 803121a:	4643      	mov	r3, r8
 803121c:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 8031220:	4602      	mov	r2, r0
 8031222:	4053      	eors	r3, r2
 8031224:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8031228:	464b      	mov	r3, r9
 803122a:	460a      	mov	r2, r1
 803122c:	4053      	eors	r3, r2
 803122e:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8031232:	e9d7 12c8 	ldrd	r1, r2, [r7, #800]	; 0x320
 8031236:	460b      	mov	r3, r1
 8031238:	18e3      	adds	r3, r4, r3
 803123a:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 803123e:	4613      	mov	r3, r2
 8031240:	eb45 0303 	adc.w	r3, r5, r3
 8031244:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8031248:	f607 1328 	addw	r3, r7, #2344	; 0x928
 803124c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8031250:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8031254:	e9d3 4500 	ldrd	r4, r5, [r3]
 8031258:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 803125c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031260:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8031264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031268:	ea80 0602 	eor.w	r6, r0, r2
 803126c:	f8c7 6310 	str.w	r6, [r7, #784]	; 0x310
 8031270:	404b      	eors	r3, r1
 8031272:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8031276:	e9d7 12c4 	ldrd	r1, r2, [r7, #784]	; 0x310
 803127a:	460b      	mov	r3, r1
 803127c:	4023      	ands	r3, r4
 803127e:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8031282:	4613      	mov	r3, r2
 8031284:	402b      	ands	r3, r5
 8031286:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 803128a:	e9d7 12c2 	ldrd	r1, r2, [r7, #776]	; 0x308
 803128e:	460b      	mov	r3, r1
 8031290:	ea88 0303 	eor.w	r3, r8, r3
 8031294:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8031298:	4613      	mov	r3, r2
 803129a:	ea89 0303 	eor.w	r3, r9, r3
 803129e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 80312a2:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	; 0x318
 80312a6:	4623      	mov	r3, r4
 80312a8:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 80312ac:	4602      	mov	r2, r0
 80312ae:	189b      	adds	r3, r3, r2
 80312b0:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 80312b4:	462b      	mov	r3, r5
 80312b6:	460a      	mov	r2, r1
 80312b8:	4153      	adcs	r3, r2
 80312ba:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 80312be:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80312c2:	3304      	adds	r3, #4
 80312c4:	4af4      	ldr	r2, [pc, #976]	; (8031698 <sha512_compress+0x1604>)
 80312c6:	00db      	lsls	r3, r3, #3
 80312c8:	4413      	add	r3, r2
 80312ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80312ce:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 80312d2:	4621      	mov	r1, r4
 80312d4:	1889      	adds	r1, r1, r2
 80312d6:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 80312da:	4629      	mov	r1, r5
 80312dc:	eb41 0303 	adc.w	r3, r1, r3
 80312e0:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 80312e4:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80312e8:	3304      	adds	r3, #4
 80312ea:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 80312ee:	00db      	lsls	r3, r3, #3
 80312f0:	4413      	add	r3, r2
 80312f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80312f6:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	; 0x2f0
 80312fa:	4621      	mov	r1, r4
 80312fc:	1889      	adds	r1, r1, r2
 80312fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8031300:	4629      	mov	r1, r5
 8031302:	eb41 0303 	adc.w	r3, r1, r3
 8031306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8031308:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 803130c:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8031310:	e9c2 3400 	strd	r3, r4, [r2]
 8031314:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8031318:	e9d3 2300 	ldrd	r2, r3, [r3]
 803131c:	0118      	lsls	r0, r3, #4
 803131e:	0f11      	lsrs	r1, r2, #28
 8031320:	4301      	orrs	r1, r0
 8031322:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 8031326:	0111      	lsls	r1, r2, #4
 8031328:	0f1b      	lsrs	r3, r3, #28
 803132a:	430b      	orrs	r3, r1
 803132c:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8031330:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8031334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031338:	0890      	lsrs	r0, r2, #2
 803133a:	0799      	lsls	r1, r3, #30
 803133c:	4301      	orrs	r1, r0
 803133e:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
 8031342:	0899      	lsrs	r1, r3, #2
 8031344:	0793      	lsls	r3, r2, #30
 8031346:	430b      	orrs	r3, r1
 8031348:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 803134c:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	; 0x2e8
 8031350:	4623      	mov	r3, r4
 8031352:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 8031356:	4602      	mov	r2, r0
 8031358:	4053      	eors	r3, r2
 803135a:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 803135e:	462b      	mov	r3, r5
 8031360:	460a      	mov	r2, r1
 8031362:	4053      	eors	r3, r2
 8031364:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8031368:	f607 1338 	addw	r3, r7, #2360	; 0x938
 803136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031370:	09d0      	lsrs	r0, r2, #7
 8031372:	0659      	lsls	r1, r3, #25
 8031374:	4301      	orrs	r1, r0
 8031376:	f8c7 12d4 	str.w	r1, [r7, #724]	; 0x2d4
 803137a:	09d9      	lsrs	r1, r3, #7
 803137c:	0653      	lsls	r3, r2, #25
 803137e:	430b      	orrs	r3, r1
 8031380:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8031384:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	; 0x2d8
 8031388:	4623      	mov	r3, r4
 803138a:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 803138e:	4602      	mov	r2, r0
 8031390:	4053      	eors	r3, r2
 8031392:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8031396:	462b      	mov	r3, r5
 8031398:	460a      	mov	r2, r1
 803139a:	4053      	eors	r3, r2
 803139c:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 80313a0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80313a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80313a8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80313ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80313b0:	ea40 0402 	orr.w	r4, r0, r2
 80313b4:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 80313b8:	430b      	orrs	r3, r1
 80313ba:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 80313be:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80313c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80313c6:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 80313ca:	4621      	mov	r1, r4
 80313cc:	4011      	ands	r1, r2
 80313ce:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 80313d2:	4629      	mov	r1, r5
 80313d4:	400b      	ands	r3, r1
 80313d6:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 80313da:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80313de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80313e2:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80313e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80313ea:	ea00 0402 	and.w	r4, r0, r2
 80313ee:	f8c7 42b0 	str.w	r4, [r7, #688]	; 0x2b0
 80313f2:	400b      	ands	r3, r1
 80313f4:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80313f8:	e9d7 45ae 	ldrd	r4, r5, [r7, #696]	; 0x2b8
 80313fc:	4623      	mov	r3, r4
 80313fe:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 8031402:	4602      	mov	r2, r0
 8031404:	4313      	orrs	r3, r2
 8031406:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 803140a:	462b      	mov	r3, r5
 803140c:	460a      	mov	r2, r1
 803140e:	4313      	orrs	r3, r2
 8031410:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8031414:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	; 0x2c8
 8031418:	4623      	mov	r3, r4
 803141a:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 803141e:	4602      	mov	r2, r0
 8031420:	189b      	adds	r3, r3, r2
 8031422:	633b      	str	r3, [r7, #48]	; 0x30
 8031424:	462b      	mov	r3, r5
 8031426:	460a      	mov	r2, r1
 8031428:	4153      	adcs	r3, r2
 803142a:	637b      	str	r3, [r7, #52]	; 0x34
 803142c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8031430:	f607 1258 	addw	r2, r7, #2392	; 0x958
 8031434:	e9c2 3400 	strd	r3, r4, [r2]
 8031438:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 803143c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031440:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8031444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031448:	1884      	adds	r4, r0, r2
 803144a:	f8c7 42a0 	str.w	r4, [r7, #672]	; 0x2a0
 803144e:	eb41 0303 	adc.w	r3, r1, r3
 8031452:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8031456:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 803145a:	f507 6215 	add.w	r2, r7, #2384	; 0x950
 803145e:	e9c2 3400 	strd	r3, r4, [r2]
 8031462:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8031466:	e9d3 0100 	ldrd	r0, r1, [r3]
 803146a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 803146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031472:	1884      	adds	r4, r0, r2
 8031474:	f8c7 4298 	str.w	r4, [r7, #664]	; 0x298
 8031478:	eb41 0303 	adc.w	r3, r1, r3
 803147c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8031480:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 8031484:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 8031488:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],i+5);
 803148c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8031490:	e9d3 4500 	ldrd	r4, r5, [r3]
 8031494:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8031498:	e9d3 2300 	ldrd	r2, r3, [r3]
 803149c:	0498      	lsls	r0, r3, #18
 803149e:	0b91      	lsrs	r1, r2, #14
 80314a0:	4301      	orrs	r1, r0
 80314a2:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 80314a6:	0491      	lsls	r1, r2, #18
 80314a8:	0b9b      	lsrs	r3, r3, #14
 80314aa:	430b      	orrs	r3, r1
 80314ac:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80314b0:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80314b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80314b8:	0398      	lsls	r0, r3, #14
 80314ba:	0c91      	lsrs	r1, r2, #18
 80314bc:	4301      	orrs	r1, r0
 80314be:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 80314c2:	0391      	lsls	r1, r2, #14
 80314c4:	0c9b      	lsrs	r3, r3, #18
 80314c6:	430b      	orrs	r3, r1
 80314c8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80314cc:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	; 0x290
 80314d0:	4643      	mov	r3, r8
 80314d2:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	; 0x288
 80314d6:	4602      	mov	r2, r0
 80314d8:	4053      	eors	r3, r2
 80314da:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 80314de:	464b      	mov	r3, r9
 80314e0:	460a      	mov	r2, r1
 80314e2:	4053      	eors	r3, r2
 80314e4:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 80314e8:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80314ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80314f0:	0a50      	lsrs	r0, r2, #9
 80314f2:	05d9      	lsls	r1, r3, #23
 80314f4:	4301      	orrs	r1, r0
 80314f6:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 80314fa:	0a59      	lsrs	r1, r3, #9
 80314fc:	05d3      	lsls	r3, r2, #23
 80314fe:	430b      	orrs	r3, r1
 8031500:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 8031504:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	; 0x280
 8031508:	4643      	mov	r3, r8
 803150a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 803150e:	4602      	mov	r2, r0
 8031510:	4053      	eors	r3, r2
 8031512:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8031516:	464b      	mov	r3, r9
 8031518:	460a      	mov	r2, r1
 803151a:	4053      	eors	r3, r2
 803151c:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8031520:	e9d7 129c 	ldrd	r1, r2, [r7, #624]	; 0x270
 8031524:	460b      	mov	r3, r1
 8031526:	18e3      	adds	r3, r4, r3
 8031528:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 803152c:	4613      	mov	r3, r2
 803152e:	eb45 0303 	adc.w	r3, r5, r3
 8031532:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8031536:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 803153a:	e9d3 8900 	ldrd	r8, r9, [r3]
 803153e:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8031542:	e9d3 4500 	ldrd	r4, r5, [r3]
 8031546:	f607 1318 	addw	r3, r7, #2328	; 0x918
 803154a:	e9d3 0100 	ldrd	r0, r1, [r3]
 803154e:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8031552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031556:	ea80 0602 	eor.w	r6, r0, r2
 803155a:	f8c7 6260 	str.w	r6, [r7, #608]	; 0x260
 803155e:	404b      	eors	r3, r1
 8031560:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8031564:	e9d7 1298 	ldrd	r1, r2, [r7, #608]	; 0x260
 8031568:	460b      	mov	r3, r1
 803156a:	4023      	ands	r3, r4
 803156c:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8031570:	4613      	mov	r3, r2
 8031572:	402b      	ands	r3, r5
 8031574:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8031578:	e9d7 1296 	ldrd	r1, r2, [r7, #600]	; 0x258
 803157c:	460b      	mov	r3, r1
 803157e:	ea88 0303 	eor.w	r3, r8, r3
 8031582:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8031586:	4613      	mov	r3, r2
 8031588:	ea89 0303 	eor.w	r3, r9, r3
 803158c:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8031590:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 8031594:	4623      	mov	r3, r4
 8031596:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	; 0x250
 803159a:	4602      	mov	r2, r0
 803159c:	189b      	adds	r3, r3, r2
 803159e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80315a2:	462b      	mov	r3, r5
 80315a4:	460a      	mov	r2, r1
 80315a6:	4153      	adcs	r3, r2
 80315a8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80315ac:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80315b0:	3305      	adds	r3, #5
 80315b2:	4a39      	ldr	r2, [pc, #228]	; (8031698 <sha512_compress+0x1604>)
 80315b4:	00db      	lsls	r3, r3, #3
 80315b6:	4413      	add	r3, r2
 80315b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80315bc:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 80315c0:	4621      	mov	r1, r4
 80315c2:	1889      	adds	r1, r1, r2
 80315c4:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 80315c8:	4629      	mov	r1, r5
 80315ca:	eb41 0303 	adc.w	r3, r1, r3
 80315ce:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80315d2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80315d6:	3305      	adds	r3, #5
 80315d8:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 80315dc:	00db      	lsls	r3, r3, #3
 80315de:	4413      	add	r3, r2
 80315e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80315e4:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 80315e8:	4621      	mov	r1, r4
 80315ea:	1889      	adds	r1, r1, r2
 80315ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80315ee:	4629      	mov	r1, r5
 80315f0:	eb41 0303 	adc.w	r3, r1, r3
 80315f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80315f6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80315fa:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 80315fe:	e9c2 3400 	strd	r3, r4, [r2]
 8031602:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8031606:	e9d3 2300 	ldrd	r2, r3, [r3]
 803160a:	0118      	lsls	r0, r3, #4
 803160c:	0f11      	lsrs	r1, r2, #28
 803160e:	4301      	orrs	r1, r0
 8031610:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 8031614:	0111      	lsls	r1, r2, #4
 8031616:	0f1b      	lsrs	r3, r3, #28
 8031618:	430b      	orrs	r3, r1
 803161a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 803161e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8031622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031626:	0890      	lsrs	r0, r2, #2
 8031628:	0799      	lsls	r1, r3, #30
 803162a:	4301      	orrs	r1, r0
 803162c:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 8031630:	0899      	lsrs	r1, r3, #2
 8031632:	0793      	lsls	r3, r2, #30
 8031634:	430b      	orrs	r3, r1
 8031636:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 803163a:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 803163e:	4623      	mov	r3, r4
 8031640:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8031644:	4602      	mov	r2, r0
 8031646:	4053      	eors	r3, r2
 8031648:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 803164c:	462b      	mov	r3, r5
 803164e:	460a      	mov	r2, r1
 8031650:	4053      	eors	r3, r2
 8031652:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8031656:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 803165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803165e:	09d0      	lsrs	r0, r2, #7
 8031660:	0659      	lsls	r1, r3, #25
 8031662:	4301      	orrs	r1, r0
 8031664:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 8031668:	09d9      	lsrs	r1, r3, #7
 803166a:	0653      	lsls	r3, r2, #25
 803166c:	430b      	orrs	r3, r1
 803166e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8031672:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 8031676:	4623      	mov	r3, r4
 8031678:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 803167c:	4602      	mov	r2, r0
 803167e:	4053      	eors	r3, r2
 8031680:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8031684:	462b      	mov	r3, r5
 8031686:	460a      	mov	r2, r1
 8031688:	4053      	eors	r3, r2
 803168a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 803168e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8031692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031696:	e001      	b.n	803169c <sha512_compress+0x1608>
 8031698:	0803fc98 	.word	0x0803fc98
 803169c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80316a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80316a4:	ea40 0402 	orr.w	r4, r0, r2
 80316a8:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 80316ac:	430b      	orrs	r3, r1
 80316ae:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80316b2:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80316b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80316ba:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 80316be:	4621      	mov	r1, r4
 80316c0:	4011      	ands	r1, r2
 80316c2:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 80316c6:	4629      	mov	r1, r5
 80316c8:	400b      	ands	r3, r1
 80316ca:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80316ce:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80316d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80316d6:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80316da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80316de:	ea00 0402 	and.w	r4, r0, r2
 80316e2:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 80316e6:	400b      	ands	r3, r1
 80316e8:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80316ec:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 80316f0:	4623      	mov	r3, r4
 80316f2:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 80316f6:	4602      	mov	r2, r0
 80316f8:	4313      	orrs	r3, r2
 80316fa:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80316fe:	462b      	mov	r3, r5
 8031700:	460a      	mov	r2, r1
 8031702:	4313      	orrs	r3, r2
 8031704:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8031708:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 803170c:	4623      	mov	r3, r4
 803170e:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8031712:	4602      	mov	r2, r0
 8031714:	189b      	adds	r3, r3, r2
 8031716:	623b      	str	r3, [r7, #32]
 8031718:	462b      	mov	r3, r5
 803171a:	460a      	mov	r2, r1
 803171c:	4153      	adcs	r3, r2
 803171e:	627b      	str	r3, [r7, #36]	; 0x24
 8031720:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8031724:	f607 1258 	addw	r2, r7, #2392	; 0x958
 8031728:	e9c2 3400 	strd	r3, r4, [r2]
 803172c:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8031730:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031734:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8031738:	e9d3 2300 	ldrd	r2, r3, [r3]
 803173c:	1884      	adds	r4, r0, r2
 803173e:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8031742:	eb41 0303 	adc.w	r3, r1, r3
 8031746:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 803174a:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 803174e:	f607 1248 	addw	r2, r7, #2376	; 0x948
 8031752:	e9c2 3400 	strd	r3, r4, [r2]
 8031756:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 803175a:	e9d3 0100 	ldrd	r0, r1, [r3]
 803175e:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8031762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031766:	1884      	adds	r4, r0, r2
 8031768:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 803176c:	eb41 0303 	adc.w	r3, r1, r3
 8031770:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8031774:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8031778:	f607 1228 	addw	r2, r7, #2344	; 0x928
 803177c:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],i+6);
 8031780:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8031784:	e9d3 4500 	ldrd	r4, r5, [r3]
 8031788:	f607 1348 	addw	r3, r7, #2376	; 0x948
 803178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031790:	0498      	lsls	r0, r3, #18
 8031792:	0b91      	lsrs	r1, r2, #14
 8031794:	4301      	orrs	r1, r0
 8031796:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 803179a:	0491      	lsls	r1, r2, #18
 803179c:	0b9b      	lsrs	r3, r3, #14
 803179e:	430b      	orrs	r3, r1
 80317a0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80317a4:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80317a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80317ac:	0398      	lsls	r0, r3, #14
 80317ae:	0c91      	lsrs	r1, r2, #18
 80317b0:	4301      	orrs	r1, r0
 80317b2:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 80317b6:	0391      	lsls	r1, r2, #14
 80317b8:	0c9b      	lsrs	r3, r3, #18
 80317ba:	430b      	orrs	r3, r1
 80317bc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80317c0:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	; 0x1e0
 80317c4:	4643      	mov	r3, r8
 80317c6:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 80317ca:	4602      	mov	r2, r0
 80317cc:	4053      	eors	r3, r2
 80317ce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80317d2:	464b      	mov	r3, r9
 80317d4:	460a      	mov	r2, r1
 80317d6:	4053      	eors	r3, r2
 80317d8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80317dc:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80317e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80317e4:	0a50      	lsrs	r0, r2, #9
 80317e6:	05d9      	lsls	r1, r3, #23
 80317e8:	4301      	orrs	r1, r0
 80317ea:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 80317ee:	0a59      	lsrs	r1, r3, #9
 80317f0:	05d3      	lsls	r3, r2, #23
 80317f2:	430b      	orrs	r3, r1
 80317f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80317f8:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	; 0x1d0
 80317fc:	4643      	mov	r3, r8
 80317fe:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8031802:	4602      	mov	r2, r0
 8031804:	4053      	eors	r3, r2
 8031806:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 803180a:	464b      	mov	r3, r9
 803180c:	460a      	mov	r2, r1
 803180e:	4053      	eors	r3, r2
 8031810:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8031814:	e9d7 1270 	ldrd	r1, r2, [r7, #448]	; 0x1c0
 8031818:	460b      	mov	r3, r1
 803181a:	18e3      	adds	r3, r4, r3
 803181c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8031820:	4613      	mov	r3, r2
 8031822:	eb45 0303 	adc.w	r3, r5, r3
 8031826:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 803182a:	f607 1318 	addw	r3, r7, #2328	; 0x918
 803182e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8031832:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8031836:	e9d3 4500 	ldrd	r4, r5, [r3]
 803183a:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 803183e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031842:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8031846:	e9d3 2300 	ldrd	r2, r3, [r3]
 803184a:	ea80 0602 	eor.w	r6, r0, r2
 803184e:	f8c7 61b0 	str.w	r6, [r7, #432]	; 0x1b0
 8031852:	404b      	eors	r3, r1
 8031854:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8031858:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 803185c:	460b      	mov	r3, r1
 803185e:	4023      	ands	r3, r4
 8031860:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8031864:	4613      	mov	r3, r2
 8031866:	402b      	ands	r3, r5
 8031868:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 803186c:	e9d7 126a 	ldrd	r1, r2, [r7, #424]	; 0x1a8
 8031870:	460b      	mov	r3, r1
 8031872:	ea88 0303 	eor.w	r3, r8, r3
 8031876:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 803187a:	4613      	mov	r3, r2
 803187c:	ea89 0303 	eor.w	r3, r9, r3
 8031880:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8031884:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8031888:	4623      	mov	r3, r4
 803188a:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 803188e:	4602      	mov	r2, r0
 8031890:	189b      	adds	r3, r3, r2
 8031892:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8031896:	462b      	mov	r3, r5
 8031898:	460a      	mov	r2, r1
 803189a:	4153      	adcs	r3, r2
 803189c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80318a0:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80318a4:	3306      	adds	r3, #6
 80318a6:	4af5      	ldr	r2, [pc, #980]	; (8031c7c <sha512_compress+0x1be8>)
 80318a8:	00db      	lsls	r3, r3, #3
 80318aa:	4413      	add	r3, r2
 80318ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80318b0:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 80318b4:	4621      	mov	r1, r4
 80318b6:	1889      	adds	r1, r1, r2
 80318b8:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 80318bc:	4629      	mov	r1, r5
 80318be:	eb41 0303 	adc.w	r3, r1, r3
 80318c2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80318c6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 80318ca:	3306      	adds	r3, #6
 80318cc:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 80318d0:	00db      	lsls	r3, r3, #3
 80318d2:	4413      	add	r3, r2
 80318d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80318d8:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 80318dc:	4621      	mov	r1, r4
 80318de:	1889      	adds	r1, r1, r2
 80318e0:	61b9      	str	r1, [r7, #24]
 80318e2:	4629      	mov	r1, r5
 80318e4:	eb41 0303 	adc.w	r3, r1, r3
 80318e8:	61fb      	str	r3, [r7, #28]
 80318ea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80318ee:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 80318f2:	e9c2 3400 	strd	r3, r4, [r2]
 80318f6:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80318fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80318fe:	0118      	lsls	r0, r3, #4
 8031900:	0f11      	lsrs	r1, r2, #28
 8031902:	4301      	orrs	r1, r0
 8031904:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8031908:	0111      	lsls	r1, r2, #4
 803190a:	0f1b      	lsrs	r3, r3, #28
 803190c:	430b      	orrs	r3, r1
 803190e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8031912:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8031916:	e9d3 2300 	ldrd	r2, r3, [r3]
 803191a:	0890      	lsrs	r0, r2, #2
 803191c:	0799      	lsls	r1, r3, #30
 803191e:	4301      	orrs	r1, r0
 8031920:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8031924:	0899      	lsrs	r1, r3, #2
 8031926:	0793      	lsls	r3, r2, #30
 8031928:	430b      	orrs	r3, r1
 803192a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 803192e:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8031932:	4623      	mov	r3, r4
 8031934:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8031938:	4602      	mov	r2, r0
 803193a:	4053      	eors	r3, r2
 803193c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8031940:	462b      	mov	r3, r5
 8031942:	460a      	mov	r2, r1
 8031944:	4053      	eors	r3, r2
 8031946:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 803194a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 803194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031952:	09d0      	lsrs	r0, r2, #7
 8031954:	0659      	lsls	r1, r3, #25
 8031956:	4301      	orrs	r1, r0
 8031958:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 803195c:	09d9      	lsrs	r1, r3, #7
 803195e:	0653      	lsls	r3, r2, #25
 8031960:	430b      	orrs	r3, r1
 8031962:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8031966:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 803196a:	4623      	mov	r3, r4
 803196c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8031970:	4602      	mov	r2, r0
 8031972:	4053      	eors	r3, r2
 8031974:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8031978:	462b      	mov	r3, r5
 803197a:	460a      	mov	r2, r1
 803197c:	4053      	eors	r3, r2
 803197e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8031982:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8031986:	e9d3 0100 	ldrd	r0, r1, [r3]
 803198a:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 803198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031992:	ea40 0402 	orr.w	r4, r0, r2
 8031996:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 803199a:	430b      	orrs	r3, r1
 803199c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80319a0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80319a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80319a8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80319ac:	4621      	mov	r1, r4
 80319ae:	4011      	ands	r1, r2
 80319b0:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 80319b4:	4629      	mov	r1, r5
 80319b6:	400b      	ands	r3, r1
 80319b8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80319bc:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80319c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80319c4:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80319c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80319cc:	ea00 0402 	and.w	r4, r0, r2
 80319d0:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 80319d4:	400b      	ands	r3, r1
 80319d6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80319da:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80319de:	4623      	mov	r3, r4
 80319e0:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 80319e4:	4602      	mov	r2, r0
 80319e6:	4313      	orrs	r3, r2
 80319e8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80319ec:	462b      	mov	r3, r5
 80319ee:	460a      	mov	r2, r1
 80319f0:	4313      	orrs	r3, r2
 80319f2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80319f6:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 80319fa:	4623      	mov	r3, r4
 80319fc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8031a00:	4602      	mov	r2, r0
 8031a02:	189b      	adds	r3, r3, r2
 8031a04:	613b      	str	r3, [r7, #16]
 8031a06:	462b      	mov	r3, r5
 8031a08:	460a      	mov	r2, r1
 8031a0a:	4153      	adcs	r3, r2
 8031a0c:	617b      	str	r3, [r7, #20]
 8031a0e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8031a12:	f607 1258 	addw	r2, r7, #2392	; 0x958
 8031a16:	e9c2 3400 	strd	r3, r4, [r2]
 8031a1a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8031a1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031a22:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8031a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031a2a:	1884      	adds	r4, r0, r2
 8031a2c:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8031a30:	eb41 0303 	adc.w	r3, r1, r3
 8031a34:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8031a38:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8031a3c:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8031a40:	e9c2 3400 	strd	r3, r4, [r2]
 8031a44:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8031a48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031a4c:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8031a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031a54:	1884      	adds	r4, r0, r2
 8031a56:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8031a5a:	eb41 0303 	adc.w	r3, r1, r3
 8031a5e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8031a62:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8031a66:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8031a6a:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],i+7);
 8031a6e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8031a72:	e9d3 4500 	ldrd	r4, r5, [r3]
 8031a76:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8031a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031a7e:	0498      	lsls	r0, r3, #18
 8031a80:	0b91      	lsrs	r1, r2, #14
 8031a82:	4301      	orrs	r1, r0
 8031a84:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8031a88:	0491      	lsls	r1, r2, #18
 8031a8a:	0b9b      	lsrs	r3, r3, #14
 8031a8c:	430b      	orrs	r3, r1
 8031a8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8031a92:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8031a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031a9a:	0398      	lsls	r0, r3, #14
 8031a9c:	0c91      	lsrs	r1, r2, #18
 8031a9e:	4301      	orrs	r1, r0
 8031aa0:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8031aa4:	0391      	lsls	r1, r2, #14
 8031aa6:	0c9b      	lsrs	r3, r3, #18
 8031aa8:	430b      	orrs	r3, r1
 8031aaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8031aae:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8031ab2:	4643      	mov	r3, r8
 8031ab4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8031ab8:	4602      	mov	r2, r0
 8031aba:	4053      	eors	r3, r2
 8031abc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8031ac0:	464b      	mov	r3, r9
 8031ac2:	460a      	mov	r2, r1
 8031ac4:	4053      	eors	r3, r2
 8031ac6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8031aca:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8031ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031ad2:	0a50      	lsrs	r0, r2, #9
 8031ad4:	05d9      	lsls	r1, r3, #23
 8031ad6:	4301      	orrs	r1, r0
 8031ad8:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8031adc:	0a59      	lsrs	r1, r3, #9
 8031ade:	05d3      	lsls	r3, r2, #23
 8031ae0:	430b      	orrs	r3, r1
 8031ae2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8031ae6:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8031aea:	4643      	mov	r3, r8
 8031aec:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8031af0:	4602      	mov	r2, r0
 8031af2:	4053      	eors	r3, r2
 8031af4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8031af8:	464b      	mov	r3, r9
 8031afa:	460a      	mov	r2, r1
 8031afc:	4053      	eors	r3, r2
 8031afe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8031b02:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8031b06:	460b      	mov	r3, r1
 8031b08:	18e3      	adds	r3, r4, r3
 8031b0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8031b0e:	4613      	mov	r3, r2
 8031b10:	eb45 0303 	adc.w	r3, r5, r3
 8031b14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8031b18:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8031b1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8031b20:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8031b24:	e9d3 4500 	ldrd	r4, r5, [r3]
 8031b28:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8031b2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031b30:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8031b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031b38:	ea80 0602 	eor.w	r6, r0, r2
 8031b3c:	f8c7 6100 	str.w	r6, [r7, #256]	; 0x100
 8031b40:	404b      	eors	r3, r1
 8031b42:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8031b46:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8031b4a:	460b      	mov	r3, r1
 8031b4c:	4023      	ands	r3, r4
 8031b4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8031b52:	4613      	mov	r3, r2
 8031b54:	402b      	ands	r3, r5
 8031b56:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8031b5a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8031b5e:	460b      	mov	r3, r1
 8031b60:	ea88 0303 	eor.w	r3, r8, r3
 8031b64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8031b68:	4613      	mov	r3, r2
 8031b6a:	ea89 0303 	eor.w	r3, r9, r3
 8031b6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8031b72:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8031b76:	4623      	mov	r3, r4
 8031b78:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8031b7c:	4602      	mov	r2, r0
 8031b7e:	189b      	adds	r3, r3, r2
 8031b80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8031b84:	462b      	mov	r3, r5
 8031b86:	460a      	mov	r2, r1
 8031b88:	4153      	adcs	r3, r2
 8031b8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8031b8e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8031b92:	3307      	adds	r3, #7
 8031b94:	4a39      	ldr	r2, [pc, #228]	; (8031c7c <sha512_compress+0x1be8>)
 8031b96:	00db      	lsls	r3, r3, #3
 8031b98:	4413      	add	r3, r2
 8031b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031b9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8031ba2:	4621      	mov	r1, r4
 8031ba4:	1889      	adds	r1, r1, r2
 8031ba6:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8031baa:	4629      	mov	r1, r5
 8031bac:	eb41 0303 	adc.w	r3, r1, r3
 8031bb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8031bb4:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8031bb8:	3307      	adds	r3, #7
 8031bba:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8031bbe:	00db      	lsls	r3, r3, #3
 8031bc0:	4413      	add	r3, r2
 8031bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031bc6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8031bca:	4621      	mov	r1, r4
 8031bcc:	1889      	adds	r1, r1, r2
 8031bce:	60b9      	str	r1, [r7, #8]
 8031bd0:	4629      	mov	r1, r5
 8031bd2:	eb41 0303 	adc.w	r3, r1, r3
 8031bd6:	60fb      	str	r3, [r7, #12]
 8031bd8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8031bdc:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8031be0:	e9c2 3400 	strd	r3, r4, [r2]
 8031be4:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8031be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031bec:	0118      	lsls	r0, r3, #4
 8031bee:	0f11      	lsrs	r1, r2, #28
 8031bf0:	4301      	orrs	r1, r0
 8031bf2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8031bf6:	0111      	lsls	r1, r2, #4
 8031bf8:	0f1b      	lsrs	r3, r3, #28
 8031bfa:	430b      	orrs	r3, r1
 8031bfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8031c00:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8031c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031c08:	0890      	lsrs	r0, r2, #2
 8031c0a:	0799      	lsls	r1, r3, #30
 8031c0c:	4301      	orrs	r1, r0
 8031c0e:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8031c12:	0899      	lsrs	r1, r3, #2
 8031c14:	0793      	lsls	r3, r2, #30
 8031c16:	430b      	orrs	r3, r1
 8031c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8031c1c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8031c20:	4623      	mov	r3, r4
 8031c22:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8031c26:	4602      	mov	r2, r0
 8031c28:	4053      	eors	r3, r2
 8031c2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8031c2e:	462b      	mov	r3, r5
 8031c30:	460a      	mov	r2, r1
 8031c32:	4053      	eors	r3, r2
 8031c34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8031c38:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8031c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031c40:	09d0      	lsrs	r0, r2, #7
 8031c42:	0659      	lsls	r1, r3, #25
 8031c44:	4301      	orrs	r1, r0
 8031c46:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8031c4a:	09d9      	lsrs	r1, r3, #7
 8031c4c:	0653      	lsls	r3, r2, #25
 8031c4e:	430b      	orrs	r3, r1
 8031c50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8031c54:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8031c58:	4623      	mov	r3, r4
 8031c5a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8031c5e:	4602      	mov	r2, r0
 8031c60:	4053      	eors	r3, r2
 8031c62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8031c66:	462b      	mov	r3, r5
 8031c68:	460a      	mov	r2, r1
 8031c6a:	4053      	eors	r3, r2
 8031c6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8031c70:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8031c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031c78:	e002      	b.n	8031c80 <sha512_compress+0x1bec>
 8031c7a:	bf00      	nop
 8031c7c:	0803fc98 	.word	0x0803fc98
 8031c80:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8031c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031c88:	ea40 0402 	orr.w	r4, r0, r2
 8031c8c:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8031c90:	430b      	orrs	r3, r1
 8031c92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8031c96:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8031c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031c9e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8031ca2:	4621      	mov	r1, r4
 8031ca4:	4011      	ands	r1, r2
 8031ca6:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8031caa:	4629      	mov	r1, r5
 8031cac:	400b      	ands	r3, r1
 8031cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8031cb2:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8031cb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031cba:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8031cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031cc2:	ea00 0402 	and.w	r4, r0, r2
 8031cc6:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8031cca:	400b      	ands	r3, r1
 8031ccc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8031cd0:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8031cd4:	4623      	mov	r3, r4
 8031cd6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8031cda:	4602      	mov	r2, r0
 8031cdc:	4313      	orrs	r3, r2
 8031cde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8031ce2:	462b      	mov	r3, r5
 8031ce4:	460a      	mov	r2, r1
 8031ce6:	4313      	orrs	r3, r2
 8031ce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8031cec:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8031cf0:	4623      	mov	r3, r4
 8031cf2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8031cf6:	4602      	mov	r2, r0
 8031cf8:	189b      	adds	r3, r3, r2
 8031cfa:	603b      	str	r3, [r7, #0]
 8031cfc:	462b      	mov	r3, r5
 8031cfe:	460a      	mov	r2, r1
 8031d00:	4153      	adcs	r3, r2
 8031d02:	607b      	str	r3, [r7, #4]
 8031d04:	e9d7 3400 	ldrd	r3, r4, [r7]
 8031d08:	f607 1258 	addw	r2, r7, #2392	; 0x958
 8031d0c:	e9c2 3400 	strd	r3, r4, [r2]
 8031d10:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8031d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031d18:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8031d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031d20:	1884      	adds	r4, r0, r2
 8031d22:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8031d26:	eb41 0303 	adc.w	r3, r1, r3
 8031d2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8031d2e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8031d32:	f607 1238 	addw	r2, r7, #2360	; 0x938
 8031d36:	e9c2 3400 	strd	r3, r4, [r2]
 8031d3a:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8031d3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031d42:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8031d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031d4a:	1884      	adds	r4, r0, r2
 8031d4c:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8031d50:	eb41 0303 	adc.w	r3, r1, r3
 8031d54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8031d58:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8031d5c:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8031d60:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 80; i += 8) {
 8031d64:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8031d68:	3308      	adds	r3, #8
 8031d6a:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8031d6e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8031d72:	2b4f      	cmp	r3, #79	; 0x4f
 8031d74:	f77e abb0 	ble.w	80304d8 <sha512_compress+0x444>
   #undef RND



    /* feedback */
   for (i = 0; i < 8; i++) {
 8031d78:	2300      	movs	r3, #0
 8031d7a:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8031d7e:	e02a      	b.n	8031dd6 <sha512_compress+0x1d42>
        md->state[i] = md->state[i] + S[i];
 8031d80:	f207 6394 	addw	r3, r7, #1684	; 0x694
 8031d84:	681a      	ldr	r2, [r3, #0]
 8031d86:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8031d8a:	3301      	adds	r3, #1
 8031d8c:	00db      	lsls	r3, r3, #3
 8031d8e:	4413      	add	r3, r2
 8031d90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031d94:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8031d98:	00db      	lsls	r3, r3, #3
 8031d9a:	f507 6217 	add.w	r2, r7, #2416	; 0x970
 8031d9e:	4413      	add	r3, r2
 8031da0:	3b58      	subs	r3, #88	; 0x58
 8031da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031da6:	1884      	adds	r4, r0, r2
 8031da8:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8031dac:	eb41 0303 	adc.w	r3, r1, r3
 8031db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8031db4:	f207 6394 	addw	r3, r7, #1684	; 0x694
 8031db8:	681a      	ldr	r2, [r3, #0]
 8031dba:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8031dbe:	3301      	adds	r3, #1
 8031dc0:	00db      	lsls	r3, r3, #3
 8031dc2:	4413      	add	r3, r2
 8031dc4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8031dc8:	e9c3 1200 	strd	r1, r2, [r3]
   for (i = 0; i < 8; i++) {
 8031dcc:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8031dd0:	3301      	adds	r3, #1
 8031dd2:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8031dd6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8031dda:	2b07      	cmp	r3, #7
 8031ddc:	ddd0      	ble.n	8031d80 <sha512_compress+0x1cec>
    }

    return 0;
 8031dde:	2300      	movs	r3, #0
}
 8031de0:	4618      	mov	r0, r3
 8031de2:	f507 6717 	add.w	r7, r7, #2416	; 0x970
 8031de6:	46bd      	mov	sp, r7
 8031de8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8031dec:	4770      	bx	lr
 8031dee:	bf00      	nop

08031df0 <sha512_init>:
/**
   Initialize the hash state
   @param md   The hash state you wish to initialize
   @return 0 if successful
*/
int sha512_init(sha512_context * md) {
 8031df0:	b480      	push	{r7}
 8031df2:	b083      	sub	sp, #12
 8031df4:	af00      	add	r7, sp, #0
 8031df6:	6078      	str	r0, [r7, #4]
    if (md == NULL) return 1;
 8031df8:	687b      	ldr	r3, [r7, #4]
 8031dfa:	2b00      	cmp	r3, #0
 8031dfc:	d101      	bne.n	8031e02 <sha512_init+0x12>
 8031dfe:	2301      	movs	r3, #1
 8031e00:	e03a      	b.n	8031e78 <sha512_init+0x88>

    md->curlen = 0;
 8031e02:	687b      	ldr	r3, [r7, #4]
 8031e04:	2200      	movs	r2, #0
 8031e06:	649a      	str	r2, [r3, #72]	; 0x48
    md->length = 0;
 8031e08:	6879      	ldr	r1, [r7, #4]
 8031e0a:	f04f 0200 	mov.w	r2, #0
 8031e0e:	f04f 0300 	mov.w	r3, #0
 8031e12:	e9c1 2300 	strd	r2, r3, [r1]
    md->state[0] = (0x6a09e667f3bcc908);
 8031e16:	6879      	ldr	r1, [r7, #4]
 8031e18:	a31b      	add	r3, pc, #108	; (adr r3, 8031e88 <sha512_init+0x98>)
 8031e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031e1e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    md->state[1] = (0xbb67ae8584caa73b);
 8031e22:	6879      	ldr	r1, [r7, #4]
 8031e24:	a31a      	add	r3, pc, #104	; (adr r3, 8031e90 <sha512_init+0xa0>)
 8031e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031e2a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    md->state[2] = (0x3c6ef372fe94f82b);
 8031e2e:	6879      	ldr	r1, [r7, #4]
 8031e30:	a319      	add	r3, pc, #100	; (adr r3, 8031e98 <sha512_init+0xa8>)
 8031e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031e36:	e9c1 2306 	strd	r2, r3, [r1, #24]
    md->state[3] = (0xa54ff53a5f1d36f1);
 8031e3a:	6879      	ldr	r1, [r7, #4]
 8031e3c:	a318      	add	r3, pc, #96	; (adr r3, 8031ea0 <sha512_init+0xb0>)
 8031e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031e42:	e9c1 2308 	strd	r2, r3, [r1, #32]
    md->state[4] = (0x510e527fade682d1);
 8031e46:	6879      	ldr	r1, [r7, #4]
 8031e48:	a317      	add	r3, pc, #92	; (adr r3, 8031ea8 <sha512_init+0xb8>)
 8031e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031e4e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    md->state[5] = (0x9b05688c2b3e6c1f);
 8031e52:	6879      	ldr	r1, [r7, #4]
 8031e54:	a316      	add	r3, pc, #88	; (adr r3, 8031eb0 <sha512_init+0xc0>)
 8031e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031e5a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    md->state[6] = (0x1f83d9abfb41bd6b);
 8031e5e:	6879      	ldr	r1, [r7, #4]
 8031e60:	a315      	add	r3, pc, #84	; (adr r3, 8031eb8 <sha512_init+0xc8>)
 8031e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031e66:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    md->state[7] = (0x5be0cd19137e2179);
 8031e6a:	6879      	ldr	r1, [r7, #4]
 8031e6c:	a314      	add	r3, pc, #80	; (adr r3, 8031ec0 <sha512_init+0xd0>)
 8031e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031e72:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return 0;
 8031e76:	2300      	movs	r3, #0
}
 8031e78:	4618      	mov	r0, r3
 8031e7a:	370c      	adds	r7, #12
 8031e7c:	46bd      	mov	sp, r7
 8031e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031e82:	4770      	bx	lr
 8031e84:	f3af 8000 	nop.w
 8031e88:	f3bcc908 	.word	0xf3bcc908
 8031e8c:	6a09e667 	.word	0x6a09e667
 8031e90:	84caa73b 	.word	0x84caa73b
 8031e94:	bb67ae85 	.word	0xbb67ae85
 8031e98:	fe94f82b 	.word	0xfe94f82b
 8031e9c:	3c6ef372 	.word	0x3c6ef372
 8031ea0:	5f1d36f1 	.word	0x5f1d36f1
 8031ea4:	a54ff53a 	.word	0xa54ff53a
 8031ea8:	ade682d1 	.word	0xade682d1
 8031eac:	510e527f 	.word	0x510e527f
 8031eb0:	2b3e6c1f 	.word	0x2b3e6c1f
 8031eb4:	9b05688c 	.word	0x9b05688c
 8031eb8:	fb41bd6b 	.word	0xfb41bd6b
 8031ebc:	1f83d9ab 	.word	0x1f83d9ab
 8031ec0:	137e2179 	.word	0x137e2179
 8031ec4:	5be0cd19 	.word	0x5be0cd19

08031ec8 <sha512_update>:
   @param in     The data to hash
   @param inlen  The length of the data (octets)
   @return 0 if successful
*/
int sha512_update (sha512_context * md, const unsigned char *in, size_t inlen)               
{                                                                                           
 8031ec8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8031ecc:	b088      	sub	sp, #32
 8031ece:	af00      	add	r7, sp, #0
 8031ed0:	60f8      	str	r0, [r7, #12]
 8031ed2:	60b9      	str	r1, [r7, #8]
 8031ed4:	607a      	str	r2, [r7, #4]
    size_t n;
    size_t i;                                                                        
    int           err;     
    if (md == NULL) return 1;  
 8031ed6:	68fb      	ldr	r3, [r7, #12]
 8031ed8:	2b00      	cmp	r3, #0
 8031eda:	d101      	bne.n	8031ee0 <sha512_update+0x18>
 8031edc:	2301      	movs	r3, #1
 8031ede:	e07b      	b.n	8031fd8 <sha512_update+0x110>
    if (in == NULL) return 1;                                                              
 8031ee0:	68bb      	ldr	r3, [r7, #8]
 8031ee2:	2b00      	cmp	r3, #0
 8031ee4:	d101      	bne.n	8031eea <sha512_update+0x22>
 8031ee6:	2301      	movs	r3, #1
 8031ee8:	e076      	b.n	8031fd8 <sha512_update+0x110>
    if (md->curlen > sizeof(md->buf)) {                             
 8031eea:	68fb      	ldr	r3, [r7, #12]
 8031eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031eee:	2b80      	cmp	r3, #128	; 0x80
 8031ef0:	d96e      	bls.n	8031fd0 <sha512_update+0x108>
       return 1;                                                            
 8031ef2:	2301      	movs	r3, #1
 8031ef4:	e070      	b.n	8031fd8 <sha512_update+0x110>
    }                                                                                       
    while (inlen > 0) {                                                                     
        if (md->curlen == 0 && inlen >= 128) {                           
 8031ef6:	68fb      	ldr	r3, [r7, #12]
 8031ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031efa:	2b00      	cmp	r3, #0
 8031efc:	d11d      	bne.n	8031f3a <sha512_update+0x72>
 8031efe:	687b      	ldr	r3, [r7, #4]
 8031f00:	2b7f      	cmp	r3, #127	; 0x7f
 8031f02:	d91a      	bls.n	8031f3a <sha512_update+0x72>
           if ((err = sha512_compress (md, (unsigned char *)in)) != 0) {               
 8031f04:	68b9      	ldr	r1, [r7, #8]
 8031f06:	68f8      	ldr	r0, [r7, #12]
 8031f08:	f7fe f8c4 	bl	8030094 <sha512_compress>
 8031f0c:	61b8      	str	r0, [r7, #24]
 8031f0e:	69bb      	ldr	r3, [r7, #24]
 8031f10:	2b00      	cmp	r3, #0
 8031f12:	d001      	beq.n	8031f18 <sha512_update+0x50>
              return err;                                                                   
 8031f14:	69bb      	ldr	r3, [r7, #24]
 8031f16:	e05f      	b.n	8031fd8 <sha512_update+0x110>
           }                                                                                
           md->length += 128 * 8;                                        
 8031f18:	68fb      	ldr	r3, [r7, #12]
 8031f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031f1e:	f512 6480 	adds.w	r4, r2, #1024	; 0x400
 8031f22:	f143 0500 	adc.w	r5, r3, #0
 8031f26:	68fb      	ldr	r3, [r7, #12]
 8031f28:	e9c3 4500 	strd	r4, r5, [r3]
           in             += 128;                                                    
 8031f2c:	68bb      	ldr	r3, [r7, #8]
 8031f2e:	3380      	adds	r3, #128	; 0x80
 8031f30:	60bb      	str	r3, [r7, #8]
           inlen          -= 128;                                                    
 8031f32:	687b      	ldr	r3, [r7, #4]
 8031f34:	3b80      	subs	r3, #128	; 0x80
 8031f36:	607b      	str	r3, [r7, #4]
 8031f38:	e04a      	b.n	8031fd0 <sha512_update+0x108>
        } else {                                                                            
           n = MIN(inlen, (128 - md->curlen));
 8031f3a:	68fb      	ldr	r3, [r7, #12]
 8031f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031f3e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8031f42:	687a      	ldr	r2, [r7, #4]
 8031f44:	4293      	cmp	r3, r2
 8031f46:	bf28      	it	cs
 8031f48:	4613      	movcs	r3, r2
 8031f4a:	617b      	str	r3, [r7, #20]

           for (i = 0; i < n; i++) {
 8031f4c:	2300      	movs	r3, #0
 8031f4e:	61fb      	str	r3, [r7, #28]
 8031f50:	e00f      	b.n	8031f72 <sha512_update+0xaa>
            md->buf[i + md->curlen] = in[i];
 8031f52:	68ba      	ldr	r2, [r7, #8]
 8031f54:	69fb      	ldr	r3, [r7, #28]
 8031f56:	441a      	add	r2, r3
 8031f58:	68fb      	ldr	r3, [r7, #12]
 8031f5a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8031f5c:	69fb      	ldr	r3, [r7, #28]
 8031f5e:	440b      	add	r3, r1
 8031f60:	7811      	ldrb	r1, [r2, #0]
 8031f62:	68fa      	ldr	r2, [r7, #12]
 8031f64:	4413      	add	r3, r2
 8031f66:	460a      	mov	r2, r1
 8031f68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
           for (i = 0; i < n; i++) {
 8031f6c:	69fb      	ldr	r3, [r7, #28]
 8031f6e:	3301      	adds	r3, #1
 8031f70:	61fb      	str	r3, [r7, #28]
 8031f72:	69fa      	ldr	r2, [r7, #28]
 8031f74:	697b      	ldr	r3, [r7, #20]
 8031f76:	429a      	cmp	r2, r3
 8031f78:	d3eb      	bcc.n	8031f52 <sha512_update+0x8a>
           }


           md->curlen += n;                                                     
 8031f7a:	68fb      	ldr	r3, [r7, #12]
 8031f7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8031f7e:	697b      	ldr	r3, [r7, #20]
 8031f80:	441a      	add	r2, r3
 8031f82:	68fb      	ldr	r3, [r7, #12]
 8031f84:	649a      	str	r2, [r3, #72]	; 0x48
           in             += n;                                                             
 8031f86:	68ba      	ldr	r2, [r7, #8]
 8031f88:	697b      	ldr	r3, [r7, #20]
 8031f8a:	4413      	add	r3, r2
 8031f8c:	60bb      	str	r3, [r7, #8]
           inlen          -= n;                                                             
 8031f8e:	687a      	ldr	r2, [r7, #4]
 8031f90:	697b      	ldr	r3, [r7, #20]
 8031f92:	1ad3      	subs	r3, r2, r3
 8031f94:	607b      	str	r3, [r7, #4]
           if (md->curlen == 128) {                                      
 8031f96:	68fb      	ldr	r3, [r7, #12]
 8031f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031f9a:	2b80      	cmp	r3, #128	; 0x80
 8031f9c:	d118      	bne.n	8031fd0 <sha512_update+0x108>
              if ((err = sha512_compress (md, md->buf)) != 0) {            
 8031f9e:	68fb      	ldr	r3, [r7, #12]
 8031fa0:	334c      	adds	r3, #76	; 0x4c
 8031fa2:	4619      	mov	r1, r3
 8031fa4:	68f8      	ldr	r0, [r7, #12]
 8031fa6:	f7fe f875 	bl	8030094 <sha512_compress>
 8031faa:	61b8      	str	r0, [r7, #24]
 8031fac:	69bb      	ldr	r3, [r7, #24]
 8031fae:	2b00      	cmp	r3, #0
 8031fb0:	d001      	beq.n	8031fb6 <sha512_update+0xee>
                 return err;                                                                
 8031fb2:	69bb      	ldr	r3, [r7, #24]
 8031fb4:	e010      	b.n	8031fd8 <sha512_update+0x110>
              }                                                                             
              md->length += 8*128;                                       
 8031fb6:	68fb      	ldr	r3, [r7, #12]
 8031fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031fbc:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 8031fc0:	f143 0900 	adc.w	r9, r3, #0
 8031fc4:	68fb      	ldr	r3, [r7, #12]
 8031fc6:	e9c3 8900 	strd	r8, r9, [r3]
              md->curlen = 0;                                                   
 8031fca:	68fb      	ldr	r3, [r7, #12]
 8031fcc:	2200      	movs	r2, #0
 8031fce:	649a      	str	r2, [r3, #72]	; 0x48
    while (inlen > 0) {                                                                     
 8031fd0:	687b      	ldr	r3, [r7, #4]
 8031fd2:	2b00      	cmp	r3, #0
 8031fd4:	d18f      	bne.n	8031ef6 <sha512_update+0x2e>
           }                                                                                
       }                                                                                    
    }                                                                                       
    return 0;                                                                        
 8031fd6:	2300      	movs	r3, #0
}
 8031fd8:	4618      	mov	r0, r3
 8031fda:	3720      	adds	r7, #32
 8031fdc:	46bd      	mov	sp, r7
 8031fde:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08031fe2 <sha512_final>:
   @param md  The hash state
   @param out [out] The destination of the hash (64 bytes)
   @return 0 if successful
*/
   int sha512_final(sha512_context * md, unsigned char *out)
   {
 8031fe2:	b5b0      	push	{r4, r5, r7, lr}
 8031fe4:	b084      	sub	sp, #16
 8031fe6:	af00      	add	r7, sp, #0
 8031fe8:	6078      	str	r0, [r7, #4]
 8031fea:	6039      	str	r1, [r7, #0]
    int i;

    if (md == NULL) return 1;
 8031fec:	687b      	ldr	r3, [r7, #4]
 8031fee:	2b00      	cmp	r3, #0
 8031ff0:	d101      	bne.n	8031ff6 <sha512_final+0x14>
 8031ff2:	2301      	movs	r3, #1
 8031ff4:	e167      	b.n	80322c6 <sha512_final+0x2e4>
    if (out == NULL) return 1;
 8031ff6:	683b      	ldr	r3, [r7, #0]
 8031ff8:	2b00      	cmp	r3, #0
 8031ffa:	d101      	bne.n	8032000 <sha512_final+0x1e>
 8031ffc:	2301      	movs	r3, #1
 8031ffe:	e162      	b.n	80322c6 <sha512_final+0x2e4>

    if (md->curlen >= sizeof(md->buf)) {
 8032000:	687b      	ldr	r3, [r7, #4]
 8032002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8032004:	2b7f      	cmp	r3, #127	; 0x7f
 8032006:	d901      	bls.n	803200c <sha512_final+0x2a>
     return 1;
 8032008:	2301      	movs	r3, #1
 803200a:	e15c      	b.n	80322c6 <sha512_final+0x2e4>
 }

    /* increase the length of the message */
 md->length += md->curlen * (8);
 803200c:	687b      	ldr	r3, [r7, #4]
 803200e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8032012:	687b      	ldr	r3, [r7, #4]
 8032014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8032016:	00db      	lsls	r3, r3, #3
 8032018:	461a      	mov	r2, r3
 803201a:	f04f 0300 	mov.w	r3, #0
 803201e:	1884      	adds	r4, r0, r2
 8032020:	eb41 0503 	adc.w	r5, r1, r3
 8032024:	687b      	ldr	r3, [r7, #4]
 8032026:	e9c3 4500 	strd	r4, r5, [r3]

    /* append the '1' bit */
 md->buf[md->curlen++] = (unsigned char)0x80;
 803202a:	687b      	ldr	r3, [r7, #4]
 803202c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803202e:	1c59      	adds	r1, r3, #1
 8032030:	687a      	ldr	r2, [r7, #4]
 8032032:	6491      	str	r1, [r2, #72]	; 0x48
 8032034:	687a      	ldr	r2, [r7, #4]
 8032036:	4413      	add	r3, r2
 8032038:	2280      	movs	r2, #128	; 0x80
 803203a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* if the length is currently above 112 bytes we append zeros
     * then compress.  Then we can fall back to padding zeros and length
     * encoding like normal.
     */
     if (md->curlen > 112) {
 803203e:	687b      	ldr	r3, [r7, #4]
 8032040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8032042:	2b70      	cmp	r3, #112	; 0x70
 8032044:	d922      	bls.n	803208c <sha512_final+0xaa>
        while (md->curlen < 128) {
 8032046:	e009      	b.n	803205c <sha512_final+0x7a>
            md->buf[md->curlen++] = (unsigned char)0;
 8032048:	687b      	ldr	r3, [r7, #4]
 803204a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803204c:	1c59      	adds	r1, r3, #1
 803204e:	687a      	ldr	r2, [r7, #4]
 8032050:	6491      	str	r1, [r2, #72]	; 0x48
 8032052:	687a      	ldr	r2, [r7, #4]
 8032054:	4413      	add	r3, r2
 8032056:	2200      	movs	r2, #0
 8032058:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        while (md->curlen < 128) {
 803205c:	687b      	ldr	r3, [r7, #4]
 803205e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8032060:	2b7f      	cmp	r3, #127	; 0x7f
 8032062:	d9f1      	bls.n	8032048 <sha512_final+0x66>
        }
        sha512_compress(md, md->buf);
 8032064:	687b      	ldr	r3, [r7, #4]
 8032066:	334c      	adds	r3, #76	; 0x4c
 8032068:	4619      	mov	r1, r3
 803206a:	6878      	ldr	r0, [r7, #4]
 803206c:	f7fe f812 	bl	8030094 <sha512_compress>
        md->curlen = 0;
 8032070:	687b      	ldr	r3, [r7, #4]
 8032072:	2200      	movs	r2, #0
 8032074:	649a      	str	r2, [r3, #72]	; 0x48

    /* pad upto 120 bytes of zeroes 
     * note: that from 112 to 120 is the 64 MSB of the length.  We assume that you won't hash
     * > 2^64 bits of data... :-)
     */
while (md->curlen < 120) {
 8032076:	e009      	b.n	803208c <sha512_final+0xaa>
    md->buf[md->curlen++] = (unsigned char)0;
 8032078:	687b      	ldr	r3, [r7, #4]
 803207a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803207c:	1c59      	adds	r1, r3, #1
 803207e:	687a      	ldr	r2, [r7, #4]
 8032080:	6491      	str	r1, [r2, #72]	; 0x48
 8032082:	687a      	ldr	r2, [r7, #4]
 8032084:	4413      	add	r3, r2
 8032086:	2200      	movs	r2, #0
 8032088:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
while (md->curlen < 120) {
 803208c:	687b      	ldr	r3, [r7, #4]
 803208e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8032090:	2b77      	cmp	r3, #119	; 0x77
 8032092:	d9f1      	bls.n	8032078 <sha512_final+0x96>
}

    /* store length */
STORE64H(md->length, md->buf+120);
 8032094:	687b      	ldr	r3, [r7, #4]
 8032096:	e9d3 0100 	ldrd	r0, r1, [r3]
 803209a:	f04f 0200 	mov.w	r2, #0
 803209e:	f04f 0300 	mov.w	r3, #0
 80320a2:	0e0a      	lsrs	r2, r1, #24
 80320a4:	2300      	movs	r3, #0
 80320a6:	b2d2      	uxtb	r2, r2
 80320a8:	687b      	ldr	r3, [r7, #4]
 80320aa:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 80320ae:	687b      	ldr	r3, [r7, #4]
 80320b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80320b4:	f04f 0200 	mov.w	r2, #0
 80320b8:	f04f 0300 	mov.w	r3, #0
 80320bc:	0c0a      	lsrs	r2, r1, #16
 80320be:	2300      	movs	r3, #0
 80320c0:	b2d2      	uxtb	r2, r2
 80320c2:	687b      	ldr	r3, [r7, #4]
 80320c4:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 80320c8:	687b      	ldr	r3, [r7, #4]
 80320ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80320ce:	f04f 0200 	mov.w	r2, #0
 80320d2:	f04f 0300 	mov.w	r3, #0
 80320d6:	0a0a      	lsrs	r2, r1, #8
 80320d8:	2300      	movs	r3, #0
 80320da:	b2d2      	uxtb	r2, r2
 80320dc:	687b      	ldr	r3, [r7, #4]
 80320de:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 80320e2:	687b      	ldr	r3, [r7, #4]
 80320e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80320e8:	f04f 0200 	mov.w	r2, #0
 80320ec:	f04f 0300 	mov.w	r3, #0
 80320f0:	000a      	movs	r2, r1
 80320f2:	2300      	movs	r3, #0
 80320f4:	b2d2      	uxtb	r2, r2
 80320f6:	687b      	ldr	r3, [r7, #4]
 80320f8:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 80320fc:	687b      	ldr	r3, [r7, #4]
 80320fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8032102:	f04f 0200 	mov.w	r2, #0
 8032106:	f04f 0300 	mov.w	r3, #0
 803210a:	0e02      	lsrs	r2, r0, #24
 803210c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8032110:	0e0b      	lsrs	r3, r1, #24
 8032112:	b2d2      	uxtb	r2, r2
 8032114:	687b      	ldr	r3, [r7, #4]
 8032116:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 803211a:	687b      	ldr	r3, [r7, #4]
 803211c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8032120:	f04f 0200 	mov.w	r2, #0
 8032124:	f04f 0300 	mov.w	r3, #0
 8032128:	0c02      	lsrs	r2, r0, #16
 803212a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 803212e:	0c0b      	lsrs	r3, r1, #16
 8032130:	b2d2      	uxtb	r2, r2
 8032132:	687b      	ldr	r3, [r7, #4]
 8032134:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 8032138:	687b      	ldr	r3, [r7, #4]
 803213a:	e9d3 0100 	ldrd	r0, r1, [r3]
 803213e:	f04f 0200 	mov.w	r2, #0
 8032142:	f04f 0300 	mov.w	r3, #0
 8032146:	0a02      	lsrs	r2, r0, #8
 8032148:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 803214c:	0a0b      	lsrs	r3, r1, #8
 803214e:	b2d2      	uxtb	r2, r2
 8032150:	687b      	ldr	r3, [r7, #4]
 8032152:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 8032156:	687b      	ldr	r3, [r7, #4]
 8032158:	e9d3 2300 	ldrd	r2, r3, [r3]
 803215c:	b2d2      	uxtb	r2, r2
 803215e:	687b      	ldr	r3, [r7, #4]
 8032160:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
sha512_compress(md, md->buf);
 8032164:	687b      	ldr	r3, [r7, #4]
 8032166:	334c      	adds	r3, #76	; 0x4c
 8032168:	4619      	mov	r1, r3
 803216a:	6878      	ldr	r0, [r7, #4]
 803216c:	f7fd ff92 	bl	8030094 <sha512_compress>

    /* copy output */
for (i = 0; i < 8; i++) {
 8032170:	2300      	movs	r3, #0
 8032172:	60fb      	str	r3, [r7, #12]
 8032174:	e0a2      	b.n	80322bc <sha512_final+0x2da>
    STORE64H(md->state[i], out+(8*i));
 8032176:	687a      	ldr	r2, [r7, #4]
 8032178:	68fb      	ldr	r3, [r7, #12]
 803217a:	3301      	adds	r3, #1
 803217c:	00db      	lsls	r3, r3, #3
 803217e:	4413      	add	r3, r2
 8032180:	e9d3 0100 	ldrd	r0, r1, [r3]
 8032184:	f04f 0200 	mov.w	r2, #0
 8032188:	f04f 0300 	mov.w	r3, #0
 803218c:	0e0a      	lsrs	r2, r1, #24
 803218e:	2300      	movs	r3, #0
 8032190:	68f9      	ldr	r1, [r7, #12]
 8032192:	00c9      	lsls	r1, r1, #3
 8032194:	4608      	mov	r0, r1
 8032196:	6839      	ldr	r1, [r7, #0]
 8032198:	4401      	add	r1, r0
 803219a:	b2d3      	uxtb	r3, r2
 803219c:	700b      	strb	r3, [r1, #0]
 803219e:	687a      	ldr	r2, [r7, #4]
 80321a0:	68fb      	ldr	r3, [r7, #12]
 80321a2:	3301      	adds	r3, #1
 80321a4:	00db      	lsls	r3, r3, #3
 80321a6:	4413      	add	r3, r2
 80321a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80321ac:	f04f 0200 	mov.w	r2, #0
 80321b0:	f04f 0300 	mov.w	r3, #0
 80321b4:	0c0a      	lsrs	r2, r1, #16
 80321b6:	2300      	movs	r3, #0
 80321b8:	68f9      	ldr	r1, [r7, #12]
 80321ba:	00c9      	lsls	r1, r1, #3
 80321bc:	3101      	adds	r1, #1
 80321be:	6838      	ldr	r0, [r7, #0]
 80321c0:	4401      	add	r1, r0
 80321c2:	b2d3      	uxtb	r3, r2
 80321c4:	700b      	strb	r3, [r1, #0]
 80321c6:	687a      	ldr	r2, [r7, #4]
 80321c8:	68fb      	ldr	r3, [r7, #12]
 80321ca:	3301      	adds	r3, #1
 80321cc:	00db      	lsls	r3, r3, #3
 80321ce:	4413      	add	r3, r2
 80321d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80321d4:	f04f 0200 	mov.w	r2, #0
 80321d8:	f04f 0300 	mov.w	r3, #0
 80321dc:	0a0a      	lsrs	r2, r1, #8
 80321de:	2300      	movs	r3, #0
 80321e0:	68f9      	ldr	r1, [r7, #12]
 80321e2:	00c9      	lsls	r1, r1, #3
 80321e4:	3102      	adds	r1, #2
 80321e6:	6838      	ldr	r0, [r7, #0]
 80321e8:	4401      	add	r1, r0
 80321ea:	b2d3      	uxtb	r3, r2
 80321ec:	700b      	strb	r3, [r1, #0]
 80321ee:	687a      	ldr	r2, [r7, #4]
 80321f0:	68fb      	ldr	r3, [r7, #12]
 80321f2:	3301      	adds	r3, #1
 80321f4:	00db      	lsls	r3, r3, #3
 80321f6:	4413      	add	r3, r2
 80321f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80321fc:	f04f 0200 	mov.w	r2, #0
 8032200:	f04f 0300 	mov.w	r3, #0
 8032204:	000a      	movs	r2, r1
 8032206:	2300      	movs	r3, #0
 8032208:	68f9      	ldr	r1, [r7, #12]
 803220a:	00c9      	lsls	r1, r1, #3
 803220c:	3103      	adds	r1, #3
 803220e:	6838      	ldr	r0, [r7, #0]
 8032210:	4401      	add	r1, r0
 8032212:	b2d3      	uxtb	r3, r2
 8032214:	700b      	strb	r3, [r1, #0]
 8032216:	687a      	ldr	r2, [r7, #4]
 8032218:	68fb      	ldr	r3, [r7, #12]
 803221a:	3301      	adds	r3, #1
 803221c:	00db      	lsls	r3, r3, #3
 803221e:	4413      	add	r3, r2
 8032220:	e9d3 0100 	ldrd	r0, r1, [r3]
 8032224:	f04f 0200 	mov.w	r2, #0
 8032228:	f04f 0300 	mov.w	r3, #0
 803222c:	0e02      	lsrs	r2, r0, #24
 803222e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8032232:	0e0b      	lsrs	r3, r1, #24
 8032234:	68f9      	ldr	r1, [r7, #12]
 8032236:	00c9      	lsls	r1, r1, #3
 8032238:	3104      	adds	r1, #4
 803223a:	6838      	ldr	r0, [r7, #0]
 803223c:	4401      	add	r1, r0
 803223e:	b2d3      	uxtb	r3, r2
 8032240:	700b      	strb	r3, [r1, #0]
 8032242:	687a      	ldr	r2, [r7, #4]
 8032244:	68fb      	ldr	r3, [r7, #12]
 8032246:	3301      	adds	r3, #1
 8032248:	00db      	lsls	r3, r3, #3
 803224a:	4413      	add	r3, r2
 803224c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8032250:	f04f 0200 	mov.w	r2, #0
 8032254:	f04f 0300 	mov.w	r3, #0
 8032258:	0c02      	lsrs	r2, r0, #16
 803225a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 803225e:	0c0b      	lsrs	r3, r1, #16
 8032260:	68f9      	ldr	r1, [r7, #12]
 8032262:	00c9      	lsls	r1, r1, #3
 8032264:	3105      	adds	r1, #5
 8032266:	6838      	ldr	r0, [r7, #0]
 8032268:	4401      	add	r1, r0
 803226a:	b2d3      	uxtb	r3, r2
 803226c:	700b      	strb	r3, [r1, #0]
 803226e:	687a      	ldr	r2, [r7, #4]
 8032270:	68fb      	ldr	r3, [r7, #12]
 8032272:	3301      	adds	r3, #1
 8032274:	00db      	lsls	r3, r3, #3
 8032276:	4413      	add	r3, r2
 8032278:	e9d3 0100 	ldrd	r0, r1, [r3]
 803227c:	f04f 0200 	mov.w	r2, #0
 8032280:	f04f 0300 	mov.w	r3, #0
 8032284:	0a02      	lsrs	r2, r0, #8
 8032286:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 803228a:	0a0b      	lsrs	r3, r1, #8
 803228c:	68f9      	ldr	r1, [r7, #12]
 803228e:	00c9      	lsls	r1, r1, #3
 8032290:	3106      	adds	r1, #6
 8032292:	6838      	ldr	r0, [r7, #0]
 8032294:	4401      	add	r1, r0
 8032296:	b2d3      	uxtb	r3, r2
 8032298:	700b      	strb	r3, [r1, #0]
 803229a:	687a      	ldr	r2, [r7, #4]
 803229c:	68fb      	ldr	r3, [r7, #12]
 803229e:	3301      	adds	r3, #1
 80322a0:	00db      	lsls	r3, r3, #3
 80322a2:	4413      	add	r3, r2
 80322a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80322a8:	68f9      	ldr	r1, [r7, #12]
 80322aa:	00c9      	lsls	r1, r1, #3
 80322ac:	3107      	adds	r1, #7
 80322ae:	6838      	ldr	r0, [r7, #0]
 80322b0:	4401      	add	r1, r0
 80322b2:	b2d3      	uxtb	r3, r2
 80322b4:	700b      	strb	r3, [r1, #0]
for (i = 0; i < 8; i++) {
 80322b6:	68fb      	ldr	r3, [r7, #12]
 80322b8:	3301      	adds	r3, #1
 80322ba:	60fb      	str	r3, [r7, #12]
 80322bc:	68fb      	ldr	r3, [r7, #12]
 80322be:	2b07      	cmp	r3, #7
 80322c0:	f77f af59 	ble.w	8032176 <sha512_final+0x194>
}

return 0;
 80322c4:	2300      	movs	r3, #0
}
 80322c6:	4618      	mov	r0, r3
 80322c8:	3710      	adds	r7, #16
 80322ca:	46bd      	mov	sp, r7
 80322cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080322d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80322d0:	b480      	push	{r7}
 80322d2:	b083      	sub	sp, #12
 80322d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80322d6:	2300      	movs	r3, #0
 80322d8:	607b      	str	r3, [r7, #4]
 80322da:	4b10      	ldr	r3, [pc, #64]	; (803231c <HAL_MspInit+0x4c>)
 80322dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80322de:	4a0f      	ldr	r2, [pc, #60]	; (803231c <HAL_MspInit+0x4c>)
 80322e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80322e4:	6453      	str	r3, [r2, #68]	; 0x44
 80322e6:	4b0d      	ldr	r3, [pc, #52]	; (803231c <HAL_MspInit+0x4c>)
 80322e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80322ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80322ee:	607b      	str	r3, [r7, #4]
 80322f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80322f2:	2300      	movs	r3, #0
 80322f4:	603b      	str	r3, [r7, #0]
 80322f6:	4b09      	ldr	r3, [pc, #36]	; (803231c <HAL_MspInit+0x4c>)
 80322f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80322fa:	4a08      	ldr	r2, [pc, #32]	; (803231c <HAL_MspInit+0x4c>)
 80322fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8032300:	6413      	str	r3, [r2, #64]	; 0x40
 8032302:	4b06      	ldr	r3, [pc, #24]	; (803231c <HAL_MspInit+0x4c>)
 8032304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 803230a:	603b      	str	r3, [r7, #0]
 803230c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 803230e:	bf00      	nop
 8032310:	370c      	adds	r7, #12
 8032312:	46bd      	mov	sp, r7
 8032314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032318:	4770      	bx	lr
 803231a:	bf00      	nop
 803231c:	40023800 	.word	0x40023800

08032320 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8032320:	b580      	push	{r7, lr}
 8032322:	b08a      	sub	sp, #40	; 0x28
 8032324:	af00      	add	r7, sp, #0
 8032326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8032328:	f107 0314 	add.w	r3, r7, #20
 803232c:	2200      	movs	r2, #0
 803232e:	601a      	str	r2, [r3, #0]
 8032330:	605a      	str	r2, [r3, #4]
 8032332:	609a      	str	r2, [r3, #8]
 8032334:	60da      	str	r2, [r3, #12]
 8032336:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8032338:	687b      	ldr	r3, [r7, #4]
 803233a:	681b      	ldr	r3, [r3, #0]
 803233c:	4a28      	ldr	r2, [pc, #160]	; (80323e0 <HAL_SD_MspInit+0xc0>)
 803233e:	4293      	cmp	r3, r2
 8032340:	d14a      	bne.n	80323d8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8032342:	2300      	movs	r3, #0
 8032344:	613b      	str	r3, [r7, #16]
 8032346:	4b27      	ldr	r3, [pc, #156]	; (80323e4 <HAL_SD_MspInit+0xc4>)
 8032348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803234a:	4a26      	ldr	r2, [pc, #152]	; (80323e4 <HAL_SD_MspInit+0xc4>)
 803234c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8032350:	6453      	str	r3, [r2, #68]	; 0x44
 8032352:	4b24      	ldr	r3, [pc, #144]	; (80323e4 <HAL_SD_MspInit+0xc4>)
 8032354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 803235a:	613b      	str	r3, [r7, #16]
 803235c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 803235e:	2300      	movs	r3, #0
 8032360:	60fb      	str	r3, [r7, #12]
 8032362:	4b20      	ldr	r3, [pc, #128]	; (80323e4 <HAL_SD_MspInit+0xc4>)
 8032364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032366:	4a1f      	ldr	r2, [pc, #124]	; (80323e4 <HAL_SD_MspInit+0xc4>)
 8032368:	f043 0304 	orr.w	r3, r3, #4
 803236c:	6313      	str	r3, [r2, #48]	; 0x30
 803236e:	4b1d      	ldr	r3, [pc, #116]	; (80323e4 <HAL_SD_MspInit+0xc4>)
 8032370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032372:	f003 0304 	and.w	r3, r3, #4
 8032376:	60fb      	str	r3, [r7, #12]
 8032378:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 803237a:	2300      	movs	r3, #0
 803237c:	60bb      	str	r3, [r7, #8]
 803237e:	4b19      	ldr	r3, [pc, #100]	; (80323e4 <HAL_SD_MspInit+0xc4>)
 8032380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032382:	4a18      	ldr	r2, [pc, #96]	; (80323e4 <HAL_SD_MspInit+0xc4>)
 8032384:	f043 0308 	orr.w	r3, r3, #8
 8032388:	6313      	str	r3, [r2, #48]	; 0x30
 803238a:	4b16      	ldr	r3, [pc, #88]	; (80323e4 <HAL_SD_MspInit+0xc4>)
 803238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803238e:	f003 0308 	and.w	r3, r3, #8
 8032392:	60bb      	str	r3, [r7, #8]
 8032394:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8032396:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 803239a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803239c:	2302      	movs	r3, #2
 803239e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80323a0:	2300      	movs	r3, #0
 80323a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80323a4:	2303      	movs	r3, #3
 80323a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80323a8:	230c      	movs	r3, #12
 80323aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80323ac:	f107 0314 	add.w	r3, r7, #20
 80323b0:	4619      	mov	r1, r3
 80323b2:	480d      	ldr	r0, [pc, #52]	; (80323e8 <HAL_SD_MspInit+0xc8>)
 80323b4:	f001 f944 	bl	8033640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80323b8:	2304      	movs	r3, #4
 80323ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80323bc:	2302      	movs	r3, #2
 80323be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80323c0:	2300      	movs	r3, #0
 80323c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80323c4:	2303      	movs	r3, #3
 80323c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80323c8:	230c      	movs	r3, #12
 80323ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80323cc:	f107 0314 	add.w	r3, r7, #20
 80323d0:	4619      	mov	r1, r3
 80323d2:	4806      	ldr	r0, [pc, #24]	; (80323ec <HAL_SD_MspInit+0xcc>)
 80323d4:	f001 f934 	bl	8033640 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80323d8:	bf00      	nop
 80323da:	3728      	adds	r7, #40	; 0x28
 80323dc:	46bd      	mov	sp, r7
 80323de:	bd80      	pop	{r7, pc}
 80323e0:	40012c00 	.word	0x40012c00
 80323e4:	40023800 	.word	0x40023800
 80323e8:	40020800 	.word	0x40020800
 80323ec:	40020c00 	.word	0x40020c00

080323f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80323f0:	b580      	push	{r7, lr}
 80323f2:	b08a      	sub	sp, #40	; 0x28
 80323f4:	af00      	add	r7, sp, #0
 80323f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80323f8:	f107 0314 	add.w	r3, r7, #20
 80323fc:	2200      	movs	r2, #0
 80323fe:	601a      	str	r2, [r3, #0]
 8032400:	605a      	str	r2, [r3, #4]
 8032402:	609a      	str	r2, [r3, #8]
 8032404:	60da      	str	r2, [r3, #12]
 8032406:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8032408:	687b      	ldr	r3, [r7, #4]
 803240a:	681b      	ldr	r3, [r3, #0]
 803240c:	4a19      	ldr	r2, [pc, #100]	; (8032474 <HAL_SPI_MspInit+0x84>)
 803240e:	4293      	cmp	r3, r2
 8032410:	d12c      	bne.n	803246c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8032412:	2300      	movs	r3, #0
 8032414:	613b      	str	r3, [r7, #16]
 8032416:	4b18      	ldr	r3, [pc, #96]	; (8032478 <HAL_SPI_MspInit+0x88>)
 8032418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803241a:	4a17      	ldr	r2, [pc, #92]	; (8032478 <HAL_SPI_MspInit+0x88>)
 803241c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8032420:	6413      	str	r3, [r2, #64]	; 0x40
 8032422:	4b15      	ldr	r3, [pc, #84]	; (8032478 <HAL_SPI_MspInit+0x88>)
 8032424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 803242a:	613b      	str	r3, [r7, #16]
 803242c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 803242e:	2300      	movs	r3, #0
 8032430:	60fb      	str	r3, [r7, #12]
 8032432:	4b11      	ldr	r3, [pc, #68]	; (8032478 <HAL_SPI_MspInit+0x88>)
 8032434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032436:	4a10      	ldr	r2, [pc, #64]	; (8032478 <HAL_SPI_MspInit+0x88>)
 8032438:	f043 0302 	orr.w	r3, r3, #2
 803243c:	6313      	str	r3, [r2, #48]	; 0x30
 803243e:	4b0e      	ldr	r3, [pc, #56]	; (8032478 <HAL_SPI_MspInit+0x88>)
 8032440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032442:	f003 0302 	and.w	r3, r3, #2
 8032446:	60fb      	str	r3, [r7, #12]
 8032448:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 803244a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 803244e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8032450:	2302      	movs	r3, #2
 8032452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8032454:	2300      	movs	r3, #0
 8032456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8032458:	2303      	movs	r3, #3
 803245a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 803245c:	2305      	movs	r3, #5
 803245e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8032460:	f107 0314 	add.w	r3, r7, #20
 8032464:	4619      	mov	r1, r3
 8032466:	4805      	ldr	r0, [pc, #20]	; (803247c <HAL_SPI_MspInit+0x8c>)
 8032468:	f001 f8ea 	bl	8033640 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 803246c:	bf00      	nop
 803246e:	3728      	adds	r7, #40	; 0x28
 8032470:	46bd      	mov	sp, r7
 8032472:	bd80      	pop	{r7, pc}
 8032474:	40003800 	.word	0x40003800
 8032478:	40023800 	.word	0x40023800
 803247c:	40020400 	.word	0x40020400

08032480 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8032480:	b480      	push	{r7}
 8032482:	b085      	sub	sp, #20
 8032484:	af00      	add	r7, sp, #0
 8032486:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8032488:	687b      	ldr	r3, [r7, #4]
 803248a:	681b      	ldr	r3, [r3, #0]
 803248c:	4a0b      	ldr	r2, [pc, #44]	; (80324bc <HAL_TIM_Base_MspInit+0x3c>)
 803248e:	4293      	cmp	r3, r2
 8032490:	d10d      	bne.n	80324ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8032492:	2300      	movs	r3, #0
 8032494:	60fb      	str	r3, [r7, #12]
 8032496:	4b0a      	ldr	r3, [pc, #40]	; (80324c0 <HAL_TIM_Base_MspInit+0x40>)
 8032498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803249a:	4a09      	ldr	r2, [pc, #36]	; (80324c0 <HAL_TIM_Base_MspInit+0x40>)
 803249c:	f043 0301 	orr.w	r3, r3, #1
 80324a0:	6453      	str	r3, [r2, #68]	; 0x44
 80324a2:	4b07      	ldr	r3, [pc, #28]	; (80324c0 <HAL_TIM_Base_MspInit+0x40>)
 80324a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80324a6:	f003 0301 	and.w	r3, r3, #1
 80324aa:	60fb      	str	r3, [r7, #12]
 80324ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80324ae:	bf00      	nop
 80324b0:	3714      	adds	r7, #20
 80324b2:	46bd      	mov	sp, r7
 80324b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80324b8:	4770      	bx	lr
 80324ba:	bf00      	nop
 80324bc:	40010000 	.word	0x40010000
 80324c0:	40023800 	.word	0x40023800

080324c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80324c4:	b580      	push	{r7, lr}
 80324c6:	b08c      	sub	sp, #48	; 0x30
 80324c8:	af00      	add	r7, sp, #0
 80324ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80324cc:	f107 031c 	add.w	r3, r7, #28
 80324d0:	2200      	movs	r2, #0
 80324d2:	601a      	str	r2, [r3, #0]
 80324d4:	605a      	str	r2, [r3, #4]
 80324d6:	609a      	str	r2, [r3, #8]
 80324d8:	60da      	str	r2, [r3, #12]
 80324da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80324dc:	687b      	ldr	r3, [r7, #4]
 80324de:	681b      	ldr	r3, [r3, #0]
 80324e0:	4a36      	ldr	r2, [pc, #216]	; (80325bc <HAL_UART_MspInit+0xf8>)
 80324e2:	4293      	cmp	r3, r2
 80324e4:	d12c      	bne.n	8032540 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80324e6:	2300      	movs	r3, #0
 80324e8:	61bb      	str	r3, [r7, #24]
 80324ea:	4b35      	ldr	r3, [pc, #212]	; (80325c0 <HAL_UART_MspInit+0xfc>)
 80324ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80324ee:	4a34      	ldr	r2, [pc, #208]	; (80325c0 <HAL_UART_MspInit+0xfc>)
 80324f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80324f4:	6413      	str	r3, [r2, #64]	; 0x40
 80324f6:	4b32      	ldr	r3, [pc, #200]	; (80325c0 <HAL_UART_MspInit+0xfc>)
 80324f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80324fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80324fe:	61bb      	str	r3, [r7, #24]
 8032500:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8032502:	2300      	movs	r3, #0
 8032504:	617b      	str	r3, [r7, #20]
 8032506:	4b2e      	ldr	r3, [pc, #184]	; (80325c0 <HAL_UART_MspInit+0xfc>)
 8032508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803250a:	4a2d      	ldr	r2, [pc, #180]	; (80325c0 <HAL_UART_MspInit+0xfc>)
 803250c:	f043 0301 	orr.w	r3, r3, #1
 8032510:	6313      	str	r3, [r2, #48]	; 0x30
 8032512:	4b2b      	ldr	r3, [pc, #172]	; (80325c0 <HAL_UART_MspInit+0xfc>)
 8032514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8032516:	f003 0301 	and.w	r3, r3, #1
 803251a:	617b      	str	r3, [r7, #20]
 803251c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 803251e:	230c      	movs	r3, #12
 8032520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8032522:	2302      	movs	r3, #2
 8032524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8032526:	2300      	movs	r3, #0
 8032528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803252a:	2303      	movs	r3, #3
 803252c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 803252e:	2307      	movs	r3, #7
 8032530:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8032532:	f107 031c 	add.w	r3, r7, #28
 8032536:	4619      	mov	r1, r3
 8032538:	4822      	ldr	r0, [pc, #136]	; (80325c4 <HAL_UART_MspInit+0x100>)
 803253a:	f001 f881 	bl	8033640 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 803253e:	e038      	b.n	80325b2 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8032540:	687b      	ldr	r3, [r7, #4]
 8032542:	681b      	ldr	r3, [r3, #0]
 8032544:	4a20      	ldr	r2, [pc, #128]	; (80325c8 <HAL_UART_MspInit+0x104>)
 8032546:	4293      	cmp	r3, r2
 8032548:	d133      	bne.n	80325b2 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 803254a:	2300      	movs	r3, #0
 803254c:	613b      	str	r3, [r7, #16]
 803254e:	4b1c      	ldr	r3, [pc, #112]	; (80325c0 <HAL_UART_MspInit+0xfc>)
 8032550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032552:	4a1b      	ldr	r2, [pc, #108]	; (80325c0 <HAL_UART_MspInit+0xfc>)
 8032554:	f043 0320 	orr.w	r3, r3, #32
 8032558:	6453      	str	r3, [r2, #68]	; 0x44
 803255a:	4b19      	ldr	r3, [pc, #100]	; (80325c0 <HAL_UART_MspInit+0xfc>)
 803255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803255e:	f003 0320 	and.w	r3, r3, #32
 8032562:	613b      	str	r3, [r7, #16]
 8032564:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8032566:	2300      	movs	r3, #0
 8032568:	60fb      	str	r3, [r7, #12]
 803256a:	4b15      	ldr	r3, [pc, #84]	; (80325c0 <HAL_UART_MspInit+0xfc>)
 803256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803256e:	4a14      	ldr	r2, [pc, #80]	; (80325c0 <HAL_UART_MspInit+0xfc>)
 8032570:	f043 0304 	orr.w	r3, r3, #4
 8032574:	6313      	str	r3, [r2, #48]	; 0x30
 8032576:	4b12      	ldr	r3, [pc, #72]	; (80325c0 <HAL_UART_MspInit+0xfc>)
 8032578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803257a:	f003 0304 	and.w	r3, r3, #4
 803257e:	60fb      	str	r3, [r7, #12]
 8032580:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8032582:	23c0      	movs	r3, #192	; 0xc0
 8032584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8032586:	2302      	movs	r3, #2
 8032588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803258a:	2300      	movs	r3, #0
 803258c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803258e:	2303      	movs	r3, #3
 8032590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8032592:	2308      	movs	r3, #8
 8032594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8032596:	f107 031c 	add.w	r3, r7, #28
 803259a:	4619      	mov	r1, r3
 803259c:	480b      	ldr	r0, [pc, #44]	; (80325cc <HAL_UART_MspInit+0x108>)
 803259e:	f001 f84f 	bl	8033640 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80325a2:	2200      	movs	r2, #0
 80325a4:	2100      	movs	r1, #0
 80325a6:	2047      	movs	r0, #71	; 0x47
 80325a8:	f000 fca9 	bl	8032efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80325ac:	2047      	movs	r0, #71	; 0x47
 80325ae:	f000 fcc2 	bl	8032f36 <HAL_NVIC_EnableIRQ>
}
 80325b2:	bf00      	nop
 80325b4:	3730      	adds	r7, #48	; 0x30
 80325b6:	46bd      	mov	sp, r7
 80325b8:	bd80      	pop	{r7, pc}
 80325ba:	bf00      	nop
 80325bc:	40004400 	.word	0x40004400
 80325c0:	40023800 	.word	0x40023800
 80325c4:	40020000 	.word	0x40020000
 80325c8:	40011400 	.word	0x40011400
 80325cc:	40020800 	.word	0x40020800

080325d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80325d0:	b480      	push	{r7}
 80325d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80325d4:	e7fe      	b.n	80325d4 <NMI_Handler+0x4>

080325d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80325d6:	b480      	push	{r7}
 80325d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80325da:	e7fe      	b.n	80325da <HardFault_Handler+0x4>

080325dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80325dc:	b480      	push	{r7}
 80325de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80325e0:	e7fe      	b.n	80325e0 <MemManage_Handler+0x4>

080325e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80325e2:	b480      	push	{r7}
 80325e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80325e6:	e7fe      	b.n	80325e6 <BusFault_Handler+0x4>

080325e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80325e8:	b480      	push	{r7}
 80325ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80325ec:	e7fe      	b.n	80325ec <UsageFault_Handler+0x4>

080325ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80325ee:	b480      	push	{r7}
 80325f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80325f2:	bf00      	nop
 80325f4:	46bd      	mov	sp, r7
 80325f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80325fa:	4770      	bx	lr

080325fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80325fc:	b480      	push	{r7}
 80325fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8032600:	bf00      	nop
 8032602:	46bd      	mov	sp, r7
 8032604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032608:	4770      	bx	lr

0803260a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 803260a:	b480      	push	{r7}
 803260c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 803260e:	bf00      	nop
 8032610:	46bd      	mov	sp, r7
 8032612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032616:	4770      	bx	lr

08032618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8032618:	b580      	push	{r7, lr}
 803261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 803261c:	f000 fb50 	bl	8032cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8032620:	bf00      	nop
 8032622:	bd80      	pop	{r7, pc}

08032624 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8032624:	b580      	push	{r7, lr}
 8032626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8032628:	4802      	ldr	r0, [pc, #8]	; (8032634 <USART6_IRQHandler+0x10>)
 803262a:	f004 f847 	bl	80366bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 803262e:	bf00      	nop
 8032630:	bd80      	pop	{r7, pc}
 8032632:	bf00      	nop
 8032634:	20000620 	.word	0x20000620

08032638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8032638:	b480      	push	{r7}
 803263a:	af00      	add	r7, sp, #0
	return 1;
 803263c:	2301      	movs	r3, #1
}
 803263e:	4618      	mov	r0, r3
 8032640:	46bd      	mov	sp, r7
 8032642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032646:	4770      	bx	lr

08032648 <_kill>:

int _kill(int pid, int sig)
{
 8032648:	b580      	push	{r7, lr}
 803264a:	b082      	sub	sp, #8
 803264c:	af00      	add	r7, sp, #0
 803264e:	6078      	str	r0, [r7, #4]
 8032650:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8032652:	f008 f895 	bl	803a780 <__errno>
 8032656:	4603      	mov	r3, r0
 8032658:	2216      	movs	r2, #22
 803265a:	601a      	str	r2, [r3, #0]
	return -1;
 803265c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8032660:	4618      	mov	r0, r3
 8032662:	3708      	adds	r7, #8
 8032664:	46bd      	mov	sp, r7
 8032666:	bd80      	pop	{r7, pc}

08032668 <_exit>:

void _exit (int status)
{
 8032668:	b580      	push	{r7, lr}
 803266a:	b082      	sub	sp, #8
 803266c:	af00      	add	r7, sp, #0
 803266e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8032670:	f04f 31ff 	mov.w	r1, #4294967295
 8032674:	6878      	ldr	r0, [r7, #4]
 8032676:	f7ff ffe7 	bl	8032648 <_kill>
	while (1) {}		/* Make sure we hang here */
 803267a:	e7fe      	b.n	803267a <_exit+0x12>

0803267c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 803267c:	b580      	push	{r7, lr}
 803267e:	b086      	sub	sp, #24
 8032680:	af00      	add	r7, sp, #0
 8032682:	60f8      	str	r0, [r7, #12]
 8032684:	60b9      	str	r1, [r7, #8]
 8032686:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8032688:	2300      	movs	r3, #0
 803268a:	617b      	str	r3, [r7, #20]
 803268c:	e00a      	b.n	80326a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 803268e:	f3af 8000 	nop.w
 8032692:	4601      	mov	r1, r0
 8032694:	68bb      	ldr	r3, [r7, #8]
 8032696:	1c5a      	adds	r2, r3, #1
 8032698:	60ba      	str	r2, [r7, #8]
 803269a:	b2ca      	uxtb	r2, r1
 803269c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 803269e:	697b      	ldr	r3, [r7, #20]
 80326a0:	3301      	adds	r3, #1
 80326a2:	617b      	str	r3, [r7, #20]
 80326a4:	697a      	ldr	r2, [r7, #20]
 80326a6:	687b      	ldr	r3, [r7, #4]
 80326a8:	429a      	cmp	r2, r3
 80326aa:	dbf0      	blt.n	803268e <_read+0x12>
	}

return len;
 80326ac:	687b      	ldr	r3, [r7, #4]
}
 80326ae:	4618      	mov	r0, r3
 80326b0:	3718      	adds	r7, #24
 80326b2:	46bd      	mov	sp, r7
 80326b4:	bd80      	pop	{r7, pc}

080326b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80326b6:	b580      	push	{r7, lr}
 80326b8:	b086      	sub	sp, #24
 80326ba:	af00      	add	r7, sp, #0
 80326bc:	60f8      	str	r0, [r7, #12]
 80326be:	60b9      	str	r1, [r7, #8]
 80326c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80326c2:	2300      	movs	r3, #0
 80326c4:	617b      	str	r3, [r7, #20]
 80326c6:	e009      	b.n	80326dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80326c8:	68bb      	ldr	r3, [r7, #8]
 80326ca:	1c5a      	adds	r2, r3, #1
 80326cc:	60ba      	str	r2, [r7, #8]
 80326ce:	781b      	ldrb	r3, [r3, #0]
 80326d0:	4618      	mov	r0, r3
 80326d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80326d6:	697b      	ldr	r3, [r7, #20]
 80326d8:	3301      	adds	r3, #1
 80326da:	617b      	str	r3, [r7, #20]
 80326dc:	697a      	ldr	r2, [r7, #20]
 80326de:	687b      	ldr	r3, [r7, #4]
 80326e0:	429a      	cmp	r2, r3
 80326e2:	dbf1      	blt.n	80326c8 <_write+0x12>
	}
	return len;
 80326e4:	687b      	ldr	r3, [r7, #4]
}
 80326e6:	4618      	mov	r0, r3
 80326e8:	3718      	adds	r7, #24
 80326ea:	46bd      	mov	sp, r7
 80326ec:	bd80      	pop	{r7, pc}

080326ee <_close>:

int _close(int file)
{
 80326ee:	b480      	push	{r7}
 80326f0:	b083      	sub	sp, #12
 80326f2:	af00      	add	r7, sp, #0
 80326f4:	6078      	str	r0, [r7, #4]
	return -1;
 80326f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80326fa:	4618      	mov	r0, r3
 80326fc:	370c      	adds	r7, #12
 80326fe:	46bd      	mov	sp, r7
 8032700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032704:	4770      	bx	lr

08032706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8032706:	b480      	push	{r7}
 8032708:	b083      	sub	sp, #12
 803270a:	af00      	add	r7, sp, #0
 803270c:	6078      	str	r0, [r7, #4]
 803270e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8032710:	683b      	ldr	r3, [r7, #0]
 8032712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8032716:	605a      	str	r2, [r3, #4]
	return 0;
 8032718:	2300      	movs	r3, #0
}
 803271a:	4618      	mov	r0, r3
 803271c:	370c      	adds	r7, #12
 803271e:	46bd      	mov	sp, r7
 8032720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032724:	4770      	bx	lr

08032726 <_isatty>:

int _isatty(int file)
{
 8032726:	b480      	push	{r7}
 8032728:	b083      	sub	sp, #12
 803272a:	af00      	add	r7, sp, #0
 803272c:	6078      	str	r0, [r7, #4]
	return 1;
 803272e:	2301      	movs	r3, #1
}
 8032730:	4618      	mov	r0, r3
 8032732:	370c      	adds	r7, #12
 8032734:	46bd      	mov	sp, r7
 8032736:	f85d 7b04 	ldr.w	r7, [sp], #4
 803273a:	4770      	bx	lr

0803273c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 803273c:	b480      	push	{r7}
 803273e:	b085      	sub	sp, #20
 8032740:	af00      	add	r7, sp, #0
 8032742:	60f8      	str	r0, [r7, #12]
 8032744:	60b9      	str	r1, [r7, #8]
 8032746:	607a      	str	r2, [r7, #4]
	return 0;
 8032748:	2300      	movs	r3, #0
}
 803274a:	4618      	mov	r0, r3
 803274c:	3714      	adds	r7, #20
 803274e:	46bd      	mov	sp, r7
 8032750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032754:	4770      	bx	lr
	...

08032758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8032758:	b580      	push	{r7, lr}
 803275a:	b086      	sub	sp, #24
 803275c:	af00      	add	r7, sp, #0
 803275e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8032760:	4a14      	ldr	r2, [pc, #80]	; (80327b4 <_sbrk+0x5c>)
 8032762:	4b15      	ldr	r3, [pc, #84]	; (80327b8 <_sbrk+0x60>)
 8032764:	1ad3      	subs	r3, r2, r3
 8032766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8032768:	697b      	ldr	r3, [r7, #20]
 803276a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 803276c:	4b13      	ldr	r3, [pc, #76]	; (80327bc <_sbrk+0x64>)
 803276e:	681b      	ldr	r3, [r3, #0]
 8032770:	2b00      	cmp	r3, #0
 8032772:	d102      	bne.n	803277a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8032774:	4b11      	ldr	r3, [pc, #68]	; (80327bc <_sbrk+0x64>)
 8032776:	4a12      	ldr	r2, [pc, #72]	; (80327c0 <_sbrk+0x68>)
 8032778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 803277a:	4b10      	ldr	r3, [pc, #64]	; (80327bc <_sbrk+0x64>)
 803277c:	681a      	ldr	r2, [r3, #0]
 803277e:	687b      	ldr	r3, [r7, #4]
 8032780:	4413      	add	r3, r2
 8032782:	693a      	ldr	r2, [r7, #16]
 8032784:	429a      	cmp	r2, r3
 8032786:	d207      	bcs.n	8032798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8032788:	f007 fffa 	bl	803a780 <__errno>
 803278c:	4603      	mov	r3, r0
 803278e:	220c      	movs	r2, #12
 8032790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8032792:	f04f 33ff 	mov.w	r3, #4294967295
 8032796:	e009      	b.n	80327ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8032798:	4b08      	ldr	r3, [pc, #32]	; (80327bc <_sbrk+0x64>)
 803279a:	681b      	ldr	r3, [r3, #0]
 803279c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 803279e:	4b07      	ldr	r3, [pc, #28]	; (80327bc <_sbrk+0x64>)
 80327a0:	681a      	ldr	r2, [r3, #0]
 80327a2:	687b      	ldr	r3, [r7, #4]
 80327a4:	4413      	add	r3, r2
 80327a6:	4a05      	ldr	r2, [pc, #20]	; (80327bc <_sbrk+0x64>)
 80327a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80327aa:	68fb      	ldr	r3, [r7, #12]
}
 80327ac:	4618      	mov	r0, r3
 80327ae:	3718      	adds	r7, #24
 80327b0:	46bd      	mov	sp, r7
 80327b2:	bd80      	pop	{r7, pc}
 80327b4:	20020000 	.word	0x20020000
 80327b8:	00000400 	.word	0x00000400
 80327bc:	20000434 	.word	0x20000434
 80327c0:	20000b88 	.word	0x20000b88

080327c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80327c4:	b480      	push	{r7}
 80327c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80327c8:	4b07      	ldr	r3, [pc, #28]	; (80327e8 <SystemInit+0x24>)
 80327ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80327ce:	4a06      	ldr	r2, [pc, #24]	; (80327e8 <SystemInit+0x24>)
 80327d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80327d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80327d8:	4b03      	ldr	r3, [pc, #12]	; (80327e8 <SystemInit+0x24>)
 80327da:	4a04      	ldr	r2, [pc, #16]	; (80327ec <SystemInit+0x28>)
 80327dc:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80327de:	bf00      	nop
 80327e0:	46bd      	mov	sp, r7
 80327e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80327e6:	4770      	bx	lr
 80327e8:	e000ed00 	.word	0xe000ed00
 80327ec:	08020000 	.word	0x08020000

080327f0 <consttime_equal>:
#include "sha3.h"
#include "sha512.h"
#include "ge.h"
#include "sc.h"
#include "main.h"
static int consttime_equal(const unsigned char *x, const unsigned char *y) {
 80327f0:	b480      	push	{r7}
 80327f2:	b085      	sub	sp, #20
 80327f4:	af00      	add	r7, sp, #0
 80327f6:	6078      	str	r0, [r7, #4]
 80327f8:	6039      	str	r1, [r7, #0]
    unsigned char r = 0;
 80327fa:	2300      	movs	r3, #0
 80327fc:	73fb      	strb	r3, [r7, #15]

    r = x[0] ^ y[0];
 80327fe:	687b      	ldr	r3, [r7, #4]
 8032800:	781a      	ldrb	r2, [r3, #0]
 8032802:	683b      	ldr	r3, [r7, #0]
 8032804:	781b      	ldrb	r3, [r3, #0]
 8032806:	4053      	eors	r3, r2
 8032808:	73fb      	strb	r3, [r7, #15]
    #define F(i) r |= x[i] ^ y[i]
    F(1);
 803280a:	687b      	ldr	r3, [r7, #4]
 803280c:	3301      	adds	r3, #1
 803280e:	781a      	ldrb	r2, [r3, #0]
 8032810:	683b      	ldr	r3, [r7, #0]
 8032812:	3301      	adds	r3, #1
 8032814:	781b      	ldrb	r3, [r3, #0]
 8032816:	4053      	eors	r3, r2
 8032818:	b2da      	uxtb	r2, r3
 803281a:	7bfb      	ldrb	r3, [r7, #15]
 803281c:	4313      	orrs	r3, r2
 803281e:	73fb      	strb	r3, [r7, #15]
    F(2);
 8032820:	687b      	ldr	r3, [r7, #4]
 8032822:	3302      	adds	r3, #2
 8032824:	781a      	ldrb	r2, [r3, #0]
 8032826:	683b      	ldr	r3, [r7, #0]
 8032828:	3302      	adds	r3, #2
 803282a:	781b      	ldrb	r3, [r3, #0]
 803282c:	4053      	eors	r3, r2
 803282e:	b2da      	uxtb	r2, r3
 8032830:	7bfb      	ldrb	r3, [r7, #15]
 8032832:	4313      	orrs	r3, r2
 8032834:	73fb      	strb	r3, [r7, #15]
    F(3);
 8032836:	687b      	ldr	r3, [r7, #4]
 8032838:	3303      	adds	r3, #3
 803283a:	781a      	ldrb	r2, [r3, #0]
 803283c:	683b      	ldr	r3, [r7, #0]
 803283e:	3303      	adds	r3, #3
 8032840:	781b      	ldrb	r3, [r3, #0]
 8032842:	4053      	eors	r3, r2
 8032844:	b2da      	uxtb	r2, r3
 8032846:	7bfb      	ldrb	r3, [r7, #15]
 8032848:	4313      	orrs	r3, r2
 803284a:	73fb      	strb	r3, [r7, #15]
    F(4);
 803284c:	687b      	ldr	r3, [r7, #4]
 803284e:	3304      	adds	r3, #4
 8032850:	781a      	ldrb	r2, [r3, #0]
 8032852:	683b      	ldr	r3, [r7, #0]
 8032854:	3304      	adds	r3, #4
 8032856:	781b      	ldrb	r3, [r3, #0]
 8032858:	4053      	eors	r3, r2
 803285a:	b2da      	uxtb	r2, r3
 803285c:	7bfb      	ldrb	r3, [r7, #15]
 803285e:	4313      	orrs	r3, r2
 8032860:	73fb      	strb	r3, [r7, #15]
    F(5);
 8032862:	687b      	ldr	r3, [r7, #4]
 8032864:	3305      	adds	r3, #5
 8032866:	781a      	ldrb	r2, [r3, #0]
 8032868:	683b      	ldr	r3, [r7, #0]
 803286a:	3305      	adds	r3, #5
 803286c:	781b      	ldrb	r3, [r3, #0]
 803286e:	4053      	eors	r3, r2
 8032870:	b2da      	uxtb	r2, r3
 8032872:	7bfb      	ldrb	r3, [r7, #15]
 8032874:	4313      	orrs	r3, r2
 8032876:	73fb      	strb	r3, [r7, #15]
    F(6);
 8032878:	687b      	ldr	r3, [r7, #4]
 803287a:	3306      	adds	r3, #6
 803287c:	781a      	ldrb	r2, [r3, #0]
 803287e:	683b      	ldr	r3, [r7, #0]
 8032880:	3306      	adds	r3, #6
 8032882:	781b      	ldrb	r3, [r3, #0]
 8032884:	4053      	eors	r3, r2
 8032886:	b2da      	uxtb	r2, r3
 8032888:	7bfb      	ldrb	r3, [r7, #15]
 803288a:	4313      	orrs	r3, r2
 803288c:	73fb      	strb	r3, [r7, #15]
    F(7);
 803288e:	687b      	ldr	r3, [r7, #4]
 8032890:	3307      	adds	r3, #7
 8032892:	781a      	ldrb	r2, [r3, #0]
 8032894:	683b      	ldr	r3, [r7, #0]
 8032896:	3307      	adds	r3, #7
 8032898:	781b      	ldrb	r3, [r3, #0]
 803289a:	4053      	eors	r3, r2
 803289c:	b2da      	uxtb	r2, r3
 803289e:	7bfb      	ldrb	r3, [r7, #15]
 80328a0:	4313      	orrs	r3, r2
 80328a2:	73fb      	strb	r3, [r7, #15]
    F(8);
 80328a4:	687b      	ldr	r3, [r7, #4]
 80328a6:	3308      	adds	r3, #8
 80328a8:	781a      	ldrb	r2, [r3, #0]
 80328aa:	683b      	ldr	r3, [r7, #0]
 80328ac:	3308      	adds	r3, #8
 80328ae:	781b      	ldrb	r3, [r3, #0]
 80328b0:	4053      	eors	r3, r2
 80328b2:	b2da      	uxtb	r2, r3
 80328b4:	7bfb      	ldrb	r3, [r7, #15]
 80328b6:	4313      	orrs	r3, r2
 80328b8:	73fb      	strb	r3, [r7, #15]
    F(9);
 80328ba:	687b      	ldr	r3, [r7, #4]
 80328bc:	3309      	adds	r3, #9
 80328be:	781a      	ldrb	r2, [r3, #0]
 80328c0:	683b      	ldr	r3, [r7, #0]
 80328c2:	3309      	adds	r3, #9
 80328c4:	781b      	ldrb	r3, [r3, #0]
 80328c6:	4053      	eors	r3, r2
 80328c8:	b2da      	uxtb	r2, r3
 80328ca:	7bfb      	ldrb	r3, [r7, #15]
 80328cc:	4313      	orrs	r3, r2
 80328ce:	73fb      	strb	r3, [r7, #15]
    F(10);
 80328d0:	687b      	ldr	r3, [r7, #4]
 80328d2:	330a      	adds	r3, #10
 80328d4:	781a      	ldrb	r2, [r3, #0]
 80328d6:	683b      	ldr	r3, [r7, #0]
 80328d8:	330a      	adds	r3, #10
 80328da:	781b      	ldrb	r3, [r3, #0]
 80328dc:	4053      	eors	r3, r2
 80328de:	b2da      	uxtb	r2, r3
 80328e0:	7bfb      	ldrb	r3, [r7, #15]
 80328e2:	4313      	orrs	r3, r2
 80328e4:	73fb      	strb	r3, [r7, #15]
    F(11);
 80328e6:	687b      	ldr	r3, [r7, #4]
 80328e8:	330b      	adds	r3, #11
 80328ea:	781a      	ldrb	r2, [r3, #0]
 80328ec:	683b      	ldr	r3, [r7, #0]
 80328ee:	330b      	adds	r3, #11
 80328f0:	781b      	ldrb	r3, [r3, #0]
 80328f2:	4053      	eors	r3, r2
 80328f4:	b2da      	uxtb	r2, r3
 80328f6:	7bfb      	ldrb	r3, [r7, #15]
 80328f8:	4313      	orrs	r3, r2
 80328fa:	73fb      	strb	r3, [r7, #15]
    F(12);
 80328fc:	687b      	ldr	r3, [r7, #4]
 80328fe:	330c      	adds	r3, #12
 8032900:	781a      	ldrb	r2, [r3, #0]
 8032902:	683b      	ldr	r3, [r7, #0]
 8032904:	330c      	adds	r3, #12
 8032906:	781b      	ldrb	r3, [r3, #0]
 8032908:	4053      	eors	r3, r2
 803290a:	b2da      	uxtb	r2, r3
 803290c:	7bfb      	ldrb	r3, [r7, #15]
 803290e:	4313      	orrs	r3, r2
 8032910:	73fb      	strb	r3, [r7, #15]
    F(13);
 8032912:	687b      	ldr	r3, [r7, #4]
 8032914:	330d      	adds	r3, #13
 8032916:	781a      	ldrb	r2, [r3, #0]
 8032918:	683b      	ldr	r3, [r7, #0]
 803291a:	330d      	adds	r3, #13
 803291c:	781b      	ldrb	r3, [r3, #0]
 803291e:	4053      	eors	r3, r2
 8032920:	b2da      	uxtb	r2, r3
 8032922:	7bfb      	ldrb	r3, [r7, #15]
 8032924:	4313      	orrs	r3, r2
 8032926:	73fb      	strb	r3, [r7, #15]
    F(14);
 8032928:	687b      	ldr	r3, [r7, #4]
 803292a:	330e      	adds	r3, #14
 803292c:	781a      	ldrb	r2, [r3, #0]
 803292e:	683b      	ldr	r3, [r7, #0]
 8032930:	330e      	adds	r3, #14
 8032932:	781b      	ldrb	r3, [r3, #0]
 8032934:	4053      	eors	r3, r2
 8032936:	b2da      	uxtb	r2, r3
 8032938:	7bfb      	ldrb	r3, [r7, #15]
 803293a:	4313      	orrs	r3, r2
 803293c:	73fb      	strb	r3, [r7, #15]
    F(15);
 803293e:	687b      	ldr	r3, [r7, #4]
 8032940:	330f      	adds	r3, #15
 8032942:	781a      	ldrb	r2, [r3, #0]
 8032944:	683b      	ldr	r3, [r7, #0]
 8032946:	330f      	adds	r3, #15
 8032948:	781b      	ldrb	r3, [r3, #0]
 803294a:	4053      	eors	r3, r2
 803294c:	b2da      	uxtb	r2, r3
 803294e:	7bfb      	ldrb	r3, [r7, #15]
 8032950:	4313      	orrs	r3, r2
 8032952:	73fb      	strb	r3, [r7, #15]
    F(16);
 8032954:	687b      	ldr	r3, [r7, #4]
 8032956:	3310      	adds	r3, #16
 8032958:	781a      	ldrb	r2, [r3, #0]
 803295a:	683b      	ldr	r3, [r7, #0]
 803295c:	3310      	adds	r3, #16
 803295e:	781b      	ldrb	r3, [r3, #0]
 8032960:	4053      	eors	r3, r2
 8032962:	b2da      	uxtb	r2, r3
 8032964:	7bfb      	ldrb	r3, [r7, #15]
 8032966:	4313      	orrs	r3, r2
 8032968:	73fb      	strb	r3, [r7, #15]
    F(17);
 803296a:	687b      	ldr	r3, [r7, #4]
 803296c:	3311      	adds	r3, #17
 803296e:	781a      	ldrb	r2, [r3, #0]
 8032970:	683b      	ldr	r3, [r7, #0]
 8032972:	3311      	adds	r3, #17
 8032974:	781b      	ldrb	r3, [r3, #0]
 8032976:	4053      	eors	r3, r2
 8032978:	b2da      	uxtb	r2, r3
 803297a:	7bfb      	ldrb	r3, [r7, #15]
 803297c:	4313      	orrs	r3, r2
 803297e:	73fb      	strb	r3, [r7, #15]
    F(18);
 8032980:	687b      	ldr	r3, [r7, #4]
 8032982:	3312      	adds	r3, #18
 8032984:	781a      	ldrb	r2, [r3, #0]
 8032986:	683b      	ldr	r3, [r7, #0]
 8032988:	3312      	adds	r3, #18
 803298a:	781b      	ldrb	r3, [r3, #0]
 803298c:	4053      	eors	r3, r2
 803298e:	b2da      	uxtb	r2, r3
 8032990:	7bfb      	ldrb	r3, [r7, #15]
 8032992:	4313      	orrs	r3, r2
 8032994:	73fb      	strb	r3, [r7, #15]
    F(19);
 8032996:	687b      	ldr	r3, [r7, #4]
 8032998:	3313      	adds	r3, #19
 803299a:	781a      	ldrb	r2, [r3, #0]
 803299c:	683b      	ldr	r3, [r7, #0]
 803299e:	3313      	adds	r3, #19
 80329a0:	781b      	ldrb	r3, [r3, #0]
 80329a2:	4053      	eors	r3, r2
 80329a4:	b2da      	uxtb	r2, r3
 80329a6:	7bfb      	ldrb	r3, [r7, #15]
 80329a8:	4313      	orrs	r3, r2
 80329aa:	73fb      	strb	r3, [r7, #15]
    F(20);
 80329ac:	687b      	ldr	r3, [r7, #4]
 80329ae:	3314      	adds	r3, #20
 80329b0:	781a      	ldrb	r2, [r3, #0]
 80329b2:	683b      	ldr	r3, [r7, #0]
 80329b4:	3314      	adds	r3, #20
 80329b6:	781b      	ldrb	r3, [r3, #0]
 80329b8:	4053      	eors	r3, r2
 80329ba:	b2da      	uxtb	r2, r3
 80329bc:	7bfb      	ldrb	r3, [r7, #15]
 80329be:	4313      	orrs	r3, r2
 80329c0:	73fb      	strb	r3, [r7, #15]
    F(21);
 80329c2:	687b      	ldr	r3, [r7, #4]
 80329c4:	3315      	adds	r3, #21
 80329c6:	781a      	ldrb	r2, [r3, #0]
 80329c8:	683b      	ldr	r3, [r7, #0]
 80329ca:	3315      	adds	r3, #21
 80329cc:	781b      	ldrb	r3, [r3, #0]
 80329ce:	4053      	eors	r3, r2
 80329d0:	b2da      	uxtb	r2, r3
 80329d2:	7bfb      	ldrb	r3, [r7, #15]
 80329d4:	4313      	orrs	r3, r2
 80329d6:	73fb      	strb	r3, [r7, #15]
    F(22);
 80329d8:	687b      	ldr	r3, [r7, #4]
 80329da:	3316      	adds	r3, #22
 80329dc:	781a      	ldrb	r2, [r3, #0]
 80329de:	683b      	ldr	r3, [r7, #0]
 80329e0:	3316      	adds	r3, #22
 80329e2:	781b      	ldrb	r3, [r3, #0]
 80329e4:	4053      	eors	r3, r2
 80329e6:	b2da      	uxtb	r2, r3
 80329e8:	7bfb      	ldrb	r3, [r7, #15]
 80329ea:	4313      	orrs	r3, r2
 80329ec:	73fb      	strb	r3, [r7, #15]
    F(23);
 80329ee:	687b      	ldr	r3, [r7, #4]
 80329f0:	3317      	adds	r3, #23
 80329f2:	781a      	ldrb	r2, [r3, #0]
 80329f4:	683b      	ldr	r3, [r7, #0]
 80329f6:	3317      	adds	r3, #23
 80329f8:	781b      	ldrb	r3, [r3, #0]
 80329fa:	4053      	eors	r3, r2
 80329fc:	b2da      	uxtb	r2, r3
 80329fe:	7bfb      	ldrb	r3, [r7, #15]
 8032a00:	4313      	orrs	r3, r2
 8032a02:	73fb      	strb	r3, [r7, #15]
    F(24);
 8032a04:	687b      	ldr	r3, [r7, #4]
 8032a06:	3318      	adds	r3, #24
 8032a08:	781a      	ldrb	r2, [r3, #0]
 8032a0a:	683b      	ldr	r3, [r7, #0]
 8032a0c:	3318      	adds	r3, #24
 8032a0e:	781b      	ldrb	r3, [r3, #0]
 8032a10:	4053      	eors	r3, r2
 8032a12:	b2da      	uxtb	r2, r3
 8032a14:	7bfb      	ldrb	r3, [r7, #15]
 8032a16:	4313      	orrs	r3, r2
 8032a18:	73fb      	strb	r3, [r7, #15]
    F(25);
 8032a1a:	687b      	ldr	r3, [r7, #4]
 8032a1c:	3319      	adds	r3, #25
 8032a1e:	781a      	ldrb	r2, [r3, #0]
 8032a20:	683b      	ldr	r3, [r7, #0]
 8032a22:	3319      	adds	r3, #25
 8032a24:	781b      	ldrb	r3, [r3, #0]
 8032a26:	4053      	eors	r3, r2
 8032a28:	b2da      	uxtb	r2, r3
 8032a2a:	7bfb      	ldrb	r3, [r7, #15]
 8032a2c:	4313      	orrs	r3, r2
 8032a2e:	73fb      	strb	r3, [r7, #15]
    F(26);
 8032a30:	687b      	ldr	r3, [r7, #4]
 8032a32:	331a      	adds	r3, #26
 8032a34:	781a      	ldrb	r2, [r3, #0]
 8032a36:	683b      	ldr	r3, [r7, #0]
 8032a38:	331a      	adds	r3, #26
 8032a3a:	781b      	ldrb	r3, [r3, #0]
 8032a3c:	4053      	eors	r3, r2
 8032a3e:	b2da      	uxtb	r2, r3
 8032a40:	7bfb      	ldrb	r3, [r7, #15]
 8032a42:	4313      	orrs	r3, r2
 8032a44:	73fb      	strb	r3, [r7, #15]
    F(27);
 8032a46:	687b      	ldr	r3, [r7, #4]
 8032a48:	331b      	adds	r3, #27
 8032a4a:	781a      	ldrb	r2, [r3, #0]
 8032a4c:	683b      	ldr	r3, [r7, #0]
 8032a4e:	331b      	adds	r3, #27
 8032a50:	781b      	ldrb	r3, [r3, #0]
 8032a52:	4053      	eors	r3, r2
 8032a54:	b2da      	uxtb	r2, r3
 8032a56:	7bfb      	ldrb	r3, [r7, #15]
 8032a58:	4313      	orrs	r3, r2
 8032a5a:	73fb      	strb	r3, [r7, #15]
    F(28);
 8032a5c:	687b      	ldr	r3, [r7, #4]
 8032a5e:	331c      	adds	r3, #28
 8032a60:	781a      	ldrb	r2, [r3, #0]
 8032a62:	683b      	ldr	r3, [r7, #0]
 8032a64:	331c      	adds	r3, #28
 8032a66:	781b      	ldrb	r3, [r3, #0]
 8032a68:	4053      	eors	r3, r2
 8032a6a:	b2da      	uxtb	r2, r3
 8032a6c:	7bfb      	ldrb	r3, [r7, #15]
 8032a6e:	4313      	orrs	r3, r2
 8032a70:	73fb      	strb	r3, [r7, #15]
    F(29);
 8032a72:	687b      	ldr	r3, [r7, #4]
 8032a74:	331d      	adds	r3, #29
 8032a76:	781a      	ldrb	r2, [r3, #0]
 8032a78:	683b      	ldr	r3, [r7, #0]
 8032a7a:	331d      	adds	r3, #29
 8032a7c:	781b      	ldrb	r3, [r3, #0]
 8032a7e:	4053      	eors	r3, r2
 8032a80:	b2da      	uxtb	r2, r3
 8032a82:	7bfb      	ldrb	r3, [r7, #15]
 8032a84:	4313      	orrs	r3, r2
 8032a86:	73fb      	strb	r3, [r7, #15]
    F(30);
 8032a88:	687b      	ldr	r3, [r7, #4]
 8032a8a:	331e      	adds	r3, #30
 8032a8c:	781a      	ldrb	r2, [r3, #0]
 8032a8e:	683b      	ldr	r3, [r7, #0]
 8032a90:	331e      	adds	r3, #30
 8032a92:	781b      	ldrb	r3, [r3, #0]
 8032a94:	4053      	eors	r3, r2
 8032a96:	b2da      	uxtb	r2, r3
 8032a98:	7bfb      	ldrb	r3, [r7, #15]
 8032a9a:	4313      	orrs	r3, r2
 8032a9c:	73fb      	strb	r3, [r7, #15]
    F(31);
 8032a9e:	687b      	ldr	r3, [r7, #4]
 8032aa0:	331f      	adds	r3, #31
 8032aa2:	781a      	ldrb	r2, [r3, #0]
 8032aa4:	683b      	ldr	r3, [r7, #0]
 8032aa6:	331f      	adds	r3, #31
 8032aa8:	781b      	ldrb	r3, [r3, #0]
 8032aaa:	4053      	eors	r3, r2
 8032aac:	b2da      	uxtb	r2, r3
 8032aae:	7bfb      	ldrb	r3, [r7, #15]
 8032ab0:	4313      	orrs	r3, r2
 8032ab2:	73fb      	strb	r3, [r7, #15]
    #undef F

    return !r;
 8032ab4:	7bfb      	ldrb	r3, [r7, #15]
 8032ab6:	2b00      	cmp	r3, #0
 8032ab8:	bf0c      	ite	eq
 8032aba:	2301      	moveq	r3, #1
 8032abc:	2300      	movne	r3, #0
 8032abe:	b2db      	uxtb	r3, r3
}
 8032ac0:	4618      	mov	r0, r3
 8032ac2:	3714      	adds	r7, #20
 8032ac4:	46bd      	mov	sp, r7
 8032ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032aca:	4770      	bx	lr

08032acc <ed25519_verify>:

int ed25519_verify(const unsigned char *signature, const unsigned char *message, size_t message_len, const unsigned char *public_key) {
 8032acc:	b590      	push	{r4, r7, lr}
 8032ace:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8032ad2:	af00      	add	r7, sp, #0
 8032ad4:	f107 040c 	add.w	r4, r7, #12
 8032ad8:	6020      	str	r0, [r4, #0]
 8032ada:	f107 0008 	add.w	r0, r7, #8
 8032ade:	6001      	str	r1, [r0, #0]
 8032ae0:	1d39      	adds	r1, r7, #4
 8032ae2:	600a      	str	r2, [r1, #0]
 8032ae4:	463a      	mov	r2, r7
 8032ae6:	6013      	str	r3, [r2, #0]
    unsigned char checker[32];

    ge_p3 A;
    ge_p2 R;

    if (signature[63] & 224) {
 8032ae8:	f107 030c 	add.w	r3, r7, #12
 8032aec:	681b      	ldr	r3, [r3, #0]
 8032aee:	333f      	adds	r3, #63	; 0x3f
 8032af0:	781b      	ldrb	r3, [r3, #0]
 8032af2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8032af6:	2b00      	cmp	r3, #0
 8032af8:	d001      	beq.n	8032afe <ed25519_verify+0x32>
        return 0;
 8032afa:	2300      	movs	r3, #0
 8032afc:	e05d      	b.n	8032bba <ed25519_verify+0xee>
    }

    if (ge_frombytes_negate_vartime(&A, public_key) != 0) {
 8032afe:	463b      	mov	r3, r7
 8032b00:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8032b04:	6819      	ldr	r1, [r3, #0]
 8032b06:	4610      	mov	r0, r2
 8032b08:	f7f7 fcc4 	bl	802a494 <ge_frombytes_negate_vartime>
 8032b0c:	4603      	mov	r3, r0
 8032b0e:	2b00      	cmp	r3, #0
 8032b10:	d001      	beq.n	8032b16 <ed25519_verify+0x4a>
        return 0;
 8032b12:	2300      	movs	r3, #0
 8032b14:	e051      	b.n	8032bba <ed25519_verify+0xee>
    }

#ifdef USE_SHA512
    sha512_context hash;
    sha512_init(&hash);
 8032b16:	f107 0310 	add.w	r3, r7, #16
 8032b1a:	4618      	mov	r0, r3
 8032b1c:	f7ff f968 	bl	8031df0 <sha512_init>
    sha512_update(&hash, signature, 32);
 8032b20:	f107 030c 	add.w	r3, r7, #12
 8032b24:	f107 0010 	add.w	r0, r7, #16
 8032b28:	2220      	movs	r2, #32
 8032b2a:	6819      	ldr	r1, [r3, #0]
 8032b2c:	f7ff f9cc 	bl	8031ec8 <sha512_update>
    sha512_update(&hash, public_key, 32);
 8032b30:	463b      	mov	r3, r7
 8032b32:	f107 0010 	add.w	r0, r7, #16
 8032b36:	2220      	movs	r2, #32
 8032b38:	6819      	ldr	r1, [r3, #0]
 8032b3a:	f7ff f9c5 	bl	8031ec8 <sha512_update>
    sha512_update(&hash, message, message_len);
 8032b3e:	1d3a      	adds	r2, r7, #4
 8032b40:	f107 0308 	add.w	r3, r7, #8
 8032b44:	f107 0010 	add.w	r0, r7, #16
 8032b48:	6812      	ldr	r2, [r2, #0]
 8032b4a:	6819      	ldr	r1, [r3, #0]
 8032b4c:	f7ff f9bc 	bl	8031ec8 <sha512_update>
    sha512_final(&hash, h);
 8032b50:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8032b54:	f107 0310 	add.w	r3, r7, #16
 8032b58:	4611      	mov	r1, r2
 8032b5a:	4618      	mov	r0, r3
 8032b5c:	f7ff fa41 	bl	8031fe2 <sha512_final>
    sha3_update(&sha3, public_key, 32);
    sha3_update(&sha3, message, message_len);
    sha3_final(h, &sha3);
#endif

    sc_reduce(h);
 8032b60:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8032b64:	4618      	mov	r0, r3
 8032b66:	f7f9 f80f 	bl	802bb88 <sc_reduce>
    ge_double_scalarmult_vartime(&R, h, &A, signature + 32);
 8032b6a:	f107 030c 	add.w	r3, r7, #12
 8032b6e:	681b      	ldr	r3, [r3, #0]
 8032b70:	3320      	adds	r3, #32
 8032b72:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8032b76:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8032b7a:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8032b7e:	f7f7 fa99 	bl	802a0b4 <ge_double_scalarmult_vartime>
    ge_tobytes(checker, &R);
 8032b82:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8032b86:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8032b8a:	4611      	mov	r1, r2
 8032b8c:	4618      	mov	r0, r3
 8032b8e:	f7f7 ffc1 	bl	802ab14 <ge_tobytes>

    if (!consttime_equal(checker, signature)) {
 8032b92:	f107 030c 	add.w	r3, r7, #12
 8032b96:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8032b9a:	6819      	ldr	r1, [r3, #0]
 8032b9c:	4610      	mov	r0, r2
 8032b9e:	f7ff fe27 	bl	80327f0 <consttime_equal>
 8032ba2:	4603      	mov	r3, r0
 8032ba4:	2b00      	cmp	r3, #0
 8032ba6:	d107      	bne.n	8032bb8 <ed25519_verify+0xec>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8032ba8:	2201      	movs	r2, #1
 8032baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8032bae:	4805      	ldr	r0, [pc, #20]	; (8032bc4 <ed25519_verify+0xf8>)
 8032bb0:	f000 fee2 	bl	8033978 <HAL_GPIO_WritePin>
        return 0;
 8032bb4:	2300      	movs	r3, #0
 8032bb6:	e000      	b.n	8032bba <ed25519_verify+0xee>
    }

    return 1;
 8032bb8:	2301      	movs	r3, #1
}
 8032bba:	4618      	mov	r0, r3
 8032bbc:	f507 7717 	add.w	r7, r7, #604	; 0x25c
 8032bc0:	46bd      	mov	sp, r7
 8032bc2:	bd90      	pop	{r4, r7, pc}
 8032bc4:	40020c00 	.word	0x40020c00

08032bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8032bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8032c00 <LoopFillZerobss+0x12>


/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8032bcc:	480d      	ldr	r0, [pc, #52]	; (8032c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8032bce:	490e      	ldr	r1, [pc, #56]	; (8032c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8032bd0:	4a0e      	ldr	r2, [pc, #56]	; (8032c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8032bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8032bd4:	e002      	b.n	8032bdc <LoopCopyDataInit>

08032bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8032bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8032bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8032bda:	3304      	adds	r3, #4

08032bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8032bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8032bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8032be0:	d3f9      	bcc.n	8032bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8032be2:	4a0b      	ldr	r2, [pc, #44]	; (8032c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8032be4:	4c0b      	ldr	r4, [pc, #44]	; (8032c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8032be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8032be8:	e001      	b.n	8032bee <LoopFillZerobss>

08032bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8032bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8032bec:	3204      	adds	r2, #4

08032bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8032bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8032bf0:	d3fb      	bcc.n	8032bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8032bf2:	f7ff fde7 	bl	80327c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8032bf6:	f007 ff81 	bl	803aafc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8032bfa:	f7f8 f88b 	bl	802ad14 <main>
  bx  lr    
 8032bfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8032c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8032c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8032c08:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8032c0c:	0804048c 	.word	0x0804048c
  ldr r2, =_sbss
 8032c10:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8032c14:	20000b84 	.word	0x20000b84

08032c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8032c18:	e7fe      	b.n	8032c18 <ADC_IRQHandler>
	...

08032c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8032c1c:	b580      	push	{r7, lr}
 8032c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8032c20:	4b0e      	ldr	r3, [pc, #56]	; (8032c5c <HAL_Init+0x40>)
 8032c22:	681b      	ldr	r3, [r3, #0]
 8032c24:	4a0d      	ldr	r2, [pc, #52]	; (8032c5c <HAL_Init+0x40>)
 8032c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8032c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8032c2c:	4b0b      	ldr	r3, [pc, #44]	; (8032c5c <HAL_Init+0x40>)
 8032c2e:	681b      	ldr	r3, [r3, #0]
 8032c30:	4a0a      	ldr	r2, [pc, #40]	; (8032c5c <HAL_Init+0x40>)
 8032c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8032c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8032c38:	4b08      	ldr	r3, [pc, #32]	; (8032c5c <HAL_Init+0x40>)
 8032c3a:	681b      	ldr	r3, [r3, #0]
 8032c3c:	4a07      	ldr	r2, [pc, #28]	; (8032c5c <HAL_Init+0x40>)
 8032c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8032c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8032c44:	2003      	movs	r0, #3
 8032c46:	f000 f94f 	bl	8032ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8032c4a:	200f      	movs	r0, #15
 8032c4c:	f000 f808 	bl	8032c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8032c50:	f7ff fb3e 	bl	80322d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8032c54:	2300      	movs	r3, #0
}
 8032c56:	4618      	mov	r0, r3
 8032c58:	bd80      	pop	{r7, pc}
 8032c5a:	bf00      	nop
 8032c5c:	40023c00 	.word	0x40023c00

08032c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8032c60:	b580      	push	{r7, lr}
 8032c62:	b082      	sub	sp, #8
 8032c64:	af00      	add	r7, sp, #0
 8032c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8032c68:	4b12      	ldr	r3, [pc, #72]	; (8032cb4 <HAL_InitTick+0x54>)
 8032c6a:	681a      	ldr	r2, [r3, #0]
 8032c6c:	4b12      	ldr	r3, [pc, #72]	; (8032cb8 <HAL_InitTick+0x58>)
 8032c6e:	781b      	ldrb	r3, [r3, #0]
 8032c70:	4619      	mov	r1, r3
 8032c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8032c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8032c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8032c7e:	4618      	mov	r0, r3
 8032c80:	f000 f967 	bl	8032f52 <HAL_SYSTICK_Config>
 8032c84:	4603      	mov	r3, r0
 8032c86:	2b00      	cmp	r3, #0
 8032c88:	d001      	beq.n	8032c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8032c8a:	2301      	movs	r3, #1
 8032c8c:	e00e      	b.n	8032cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8032c8e:	687b      	ldr	r3, [r7, #4]
 8032c90:	2b0f      	cmp	r3, #15
 8032c92:	d80a      	bhi.n	8032caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8032c94:	2200      	movs	r2, #0
 8032c96:	6879      	ldr	r1, [r7, #4]
 8032c98:	f04f 30ff 	mov.w	r0, #4294967295
 8032c9c:	f000 f92f 	bl	8032efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8032ca0:	4a06      	ldr	r2, [pc, #24]	; (8032cbc <HAL_InitTick+0x5c>)
 8032ca2:	687b      	ldr	r3, [r7, #4]
 8032ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8032ca6:	2300      	movs	r3, #0
 8032ca8:	e000      	b.n	8032cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8032caa:	2301      	movs	r3, #1
}
 8032cac:	4618      	mov	r0, r3
 8032cae:	3708      	adds	r7, #8
 8032cb0:	46bd      	mov	sp, r7
 8032cb2:	bd80      	pop	{r7, pc}
 8032cb4:	20000020 	.word	0x20000020
 8032cb8:	20000028 	.word	0x20000028
 8032cbc:	20000024 	.word	0x20000024

08032cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8032cc0:	b480      	push	{r7}
 8032cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8032cc4:	4b06      	ldr	r3, [pc, #24]	; (8032ce0 <HAL_IncTick+0x20>)
 8032cc6:	781b      	ldrb	r3, [r3, #0]
 8032cc8:	461a      	mov	r2, r3
 8032cca:	4b06      	ldr	r3, [pc, #24]	; (8032ce4 <HAL_IncTick+0x24>)
 8032ccc:	681b      	ldr	r3, [r3, #0]
 8032cce:	4413      	add	r3, r2
 8032cd0:	4a04      	ldr	r2, [pc, #16]	; (8032ce4 <HAL_IncTick+0x24>)
 8032cd2:	6013      	str	r3, [r2, #0]
}
 8032cd4:	bf00      	nop
 8032cd6:	46bd      	mov	sp, r7
 8032cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032cdc:	4770      	bx	lr
 8032cde:	bf00      	nop
 8032ce0:	20000028 	.word	0x20000028
 8032ce4:	200006e8 	.word	0x200006e8

08032ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8032ce8:	b480      	push	{r7}
 8032cea:	af00      	add	r7, sp, #0
  return uwTick;
 8032cec:	4b03      	ldr	r3, [pc, #12]	; (8032cfc <HAL_GetTick+0x14>)
 8032cee:	681b      	ldr	r3, [r3, #0]
}
 8032cf0:	4618      	mov	r0, r3
 8032cf2:	46bd      	mov	sp, r7
 8032cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032cf8:	4770      	bx	lr
 8032cfa:	bf00      	nop
 8032cfc:	200006e8 	.word	0x200006e8

08032d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8032d00:	b580      	push	{r7, lr}
 8032d02:	b084      	sub	sp, #16
 8032d04:	af00      	add	r7, sp, #0
 8032d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8032d08:	f7ff ffee 	bl	8032ce8 <HAL_GetTick>
 8032d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8032d0e:	687b      	ldr	r3, [r7, #4]
 8032d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8032d12:	68fb      	ldr	r3, [r7, #12]
 8032d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8032d18:	d005      	beq.n	8032d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8032d1a:	4b0a      	ldr	r3, [pc, #40]	; (8032d44 <HAL_Delay+0x44>)
 8032d1c:	781b      	ldrb	r3, [r3, #0]
 8032d1e:	461a      	mov	r2, r3
 8032d20:	68fb      	ldr	r3, [r7, #12]
 8032d22:	4413      	add	r3, r2
 8032d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8032d26:	bf00      	nop
 8032d28:	f7ff ffde 	bl	8032ce8 <HAL_GetTick>
 8032d2c:	4602      	mov	r2, r0
 8032d2e:	68bb      	ldr	r3, [r7, #8]
 8032d30:	1ad3      	subs	r3, r2, r3
 8032d32:	68fa      	ldr	r2, [r7, #12]
 8032d34:	429a      	cmp	r2, r3
 8032d36:	d8f7      	bhi.n	8032d28 <HAL_Delay+0x28>
  {
  }
}
 8032d38:	bf00      	nop
 8032d3a:	bf00      	nop
 8032d3c:	3710      	adds	r7, #16
 8032d3e:	46bd      	mov	sp, r7
 8032d40:	bd80      	pop	{r7, pc}
 8032d42:	bf00      	nop
 8032d44:	20000028 	.word	0x20000028

08032d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8032d48:	b480      	push	{r7}
 8032d4a:	b085      	sub	sp, #20
 8032d4c:	af00      	add	r7, sp, #0
 8032d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8032d50:	687b      	ldr	r3, [r7, #4]
 8032d52:	f003 0307 	and.w	r3, r3, #7
 8032d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8032d58:	4b0c      	ldr	r3, [pc, #48]	; (8032d8c <__NVIC_SetPriorityGrouping+0x44>)
 8032d5a:	68db      	ldr	r3, [r3, #12]
 8032d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8032d5e:	68ba      	ldr	r2, [r7, #8]
 8032d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8032d64:	4013      	ands	r3, r2
 8032d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8032d68:	68fb      	ldr	r3, [r7, #12]
 8032d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8032d6c:	68bb      	ldr	r3, [r7, #8]
 8032d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8032d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8032d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8032d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8032d7a:	4a04      	ldr	r2, [pc, #16]	; (8032d8c <__NVIC_SetPriorityGrouping+0x44>)
 8032d7c:	68bb      	ldr	r3, [r7, #8]
 8032d7e:	60d3      	str	r3, [r2, #12]
}
 8032d80:	bf00      	nop
 8032d82:	3714      	adds	r7, #20
 8032d84:	46bd      	mov	sp, r7
 8032d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d8a:	4770      	bx	lr
 8032d8c:	e000ed00 	.word	0xe000ed00

08032d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8032d90:	b480      	push	{r7}
 8032d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8032d94:	4b04      	ldr	r3, [pc, #16]	; (8032da8 <__NVIC_GetPriorityGrouping+0x18>)
 8032d96:	68db      	ldr	r3, [r3, #12]
 8032d98:	0a1b      	lsrs	r3, r3, #8
 8032d9a:	f003 0307 	and.w	r3, r3, #7
}
 8032d9e:	4618      	mov	r0, r3
 8032da0:	46bd      	mov	sp, r7
 8032da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032da6:	4770      	bx	lr
 8032da8:	e000ed00 	.word	0xe000ed00

08032dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8032dac:	b480      	push	{r7}
 8032dae:	b083      	sub	sp, #12
 8032db0:	af00      	add	r7, sp, #0
 8032db2:	4603      	mov	r3, r0
 8032db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8032db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8032dba:	2b00      	cmp	r3, #0
 8032dbc:	db0b      	blt.n	8032dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8032dbe:	79fb      	ldrb	r3, [r7, #7]
 8032dc0:	f003 021f 	and.w	r2, r3, #31
 8032dc4:	4907      	ldr	r1, [pc, #28]	; (8032de4 <__NVIC_EnableIRQ+0x38>)
 8032dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8032dca:	095b      	lsrs	r3, r3, #5
 8032dcc:	2001      	movs	r0, #1
 8032dce:	fa00 f202 	lsl.w	r2, r0, r2
 8032dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8032dd6:	bf00      	nop
 8032dd8:	370c      	adds	r7, #12
 8032dda:	46bd      	mov	sp, r7
 8032ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032de0:	4770      	bx	lr
 8032de2:	bf00      	nop
 8032de4:	e000e100 	.word	0xe000e100

08032de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8032de8:	b480      	push	{r7}
 8032dea:	b083      	sub	sp, #12
 8032dec:	af00      	add	r7, sp, #0
 8032dee:	4603      	mov	r3, r0
 8032df0:	6039      	str	r1, [r7, #0]
 8032df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8032df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8032df8:	2b00      	cmp	r3, #0
 8032dfa:	db0a      	blt.n	8032e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8032dfc:	683b      	ldr	r3, [r7, #0]
 8032dfe:	b2da      	uxtb	r2, r3
 8032e00:	490c      	ldr	r1, [pc, #48]	; (8032e34 <__NVIC_SetPriority+0x4c>)
 8032e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8032e06:	0112      	lsls	r2, r2, #4
 8032e08:	b2d2      	uxtb	r2, r2
 8032e0a:	440b      	add	r3, r1
 8032e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8032e10:	e00a      	b.n	8032e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8032e12:	683b      	ldr	r3, [r7, #0]
 8032e14:	b2da      	uxtb	r2, r3
 8032e16:	4908      	ldr	r1, [pc, #32]	; (8032e38 <__NVIC_SetPriority+0x50>)
 8032e18:	79fb      	ldrb	r3, [r7, #7]
 8032e1a:	f003 030f 	and.w	r3, r3, #15
 8032e1e:	3b04      	subs	r3, #4
 8032e20:	0112      	lsls	r2, r2, #4
 8032e22:	b2d2      	uxtb	r2, r2
 8032e24:	440b      	add	r3, r1
 8032e26:	761a      	strb	r2, [r3, #24]
}
 8032e28:	bf00      	nop
 8032e2a:	370c      	adds	r7, #12
 8032e2c:	46bd      	mov	sp, r7
 8032e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032e32:	4770      	bx	lr
 8032e34:	e000e100 	.word	0xe000e100
 8032e38:	e000ed00 	.word	0xe000ed00

08032e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8032e3c:	b480      	push	{r7}
 8032e3e:	b089      	sub	sp, #36	; 0x24
 8032e40:	af00      	add	r7, sp, #0
 8032e42:	60f8      	str	r0, [r7, #12]
 8032e44:	60b9      	str	r1, [r7, #8]
 8032e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8032e48:	68fb      	ldr	r3, [r7, #12]
 8032e4a:	f003 0307 	and.w	r3, r3, #7
 8032e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8032e50:	69fb      	ldr	r3, [r7, #28]
 8032e52:	f1c3 0307 	rsb	r3, r3, #7
 8032e56:	2b04      	cmp	r3, #4
 8032e58:	bf28      	it	cs
 8032e5a:	2304      	movcs	r3, #4
 8032e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8032e5e:	69fb      	ldr	r3, [r7, #28]
 8032e60:	3304      	adds	r3, #4
 8032e62:	2b06      	cmp	r3, #6
 8032e64:	d902      	bls.n	8032e6c <NVIC_EncodePriority+0x30>
 8032e66:	69fb      	ldr	r3, [r7, #28]
 8032e68:	3b03      	subs	r3, #3
 8032e6a:	e000      	b.n	8032e6e <NVIC_EncodePriority+0x32>
 8032e6c:	2300      	movs	r3, #0
 8032e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8032e70:	f04f 32ff 	mov.w	r2, #4294967295
 8032e74:	69bb      	ldr	r3, [r7, #24]
 8032e76:	fa02 f303 	lsl.w	r3, r2, r3
 8032e7a:	43da      	mvns	r2, r3
 8032e7c:	68bb      	ldr	r3, [r7, #8]
 8032e7e:	401a      	ands	r2, r3
 8032e80:	697b      	ldr	r3, [r7, #20]
 8032e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8032e84:	f04f 31ff 	mov.w	r1, #4294967295
 8032e88:	697b      	ldr	r3, [r7, #20]
 8032e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8032e8e:	43d9      	mvns	r1, r3
 8032e90:	687b      	ldr	r3, [r7, #4]
 8032e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8032e94:	4313      	orrs	r3, r2
         );
}
 8032e96:	4618      	mov	r0, r3
 8032e98:	3724      	adds	r7, #36	; 0x24
 8032e9a:	46bd      	mov	sp, r7
 8032e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032ea0:	4770      	bx	lr
	...

08032ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8032ea4:	b580      	push	{r7, lr}
 8032ea6:	b082      	sub	sp, #8
 8032ea8:	af00      	add	r7, sp, #0
 8032eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8032eac:	687b      	ldr	r3, [r7, #4]
 8032eae:	3b01      	subs	r3, #1
 8032eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8032eb4:	d301      	bcc.n	8032eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8032eb6:	2301      	movs	r3, #1
 8032eb8:	e00f      	b.n	8032eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8032eba:	4a0a      	ldr	r2, [pc, #40]	; (8032ee4 <SysTick_Config+0x40>)
 8032ebc:	687b      	ldr	r3, [r7, #4]
 8032ebe:	3b01      	subs	r3, #1
 8032ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8032ec2:	210f      	movs	r1, #15
 8032ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8032ec8:	f7ff ff8e 	bl	8032de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8032ecc:	4b05      	ldr	r3, [pc, #20]	; (8032ee4 <SysTick_Config+0x40>)
 8032ece:	2200      	movs	r2, #0
 8032ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8032ed2:	4b04      	ldr	r3, [pc, #16]	; (8032ee4 <SysTick_Config+0x40>)
 8032ed4:	2207      	movs	r2, #7
 8032ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8032ed8:	2300      	movs	r3, #0
}
 8032eda:	4618      	mov	r0, r3
 8032edc:	3708      	adds	r7, #8
 8032ede:	46bd      	mov	sp, r7
 8032ee0:	bd80      	pop	{r7, pc}
 8032ee2:	bf00      	nop
 8032ee4:	e000e010 	.word	0xe000e010

08032ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8032ee8:	b580      	push	{r7, lr}
 8032eea:	b082      	sub	sp, #8
 8032eec:	af00      	add	r7, sp, #0
 8032eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8032ef0:	6878      	ldr	r0, [r7, #4]
 8032ef2:	f7ff ff29 	bl	8032d48 <__NVIC_SetPriorityGrouping>
}
 8032ef6:	bf00      	nop
 8032ef8:	3708      	adds	r7, #8
 8032efa:	46bd      	mov	sp, r7
 8032efc:	bd80      	pop	{r7, pc}

08032efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8032efe:	b580      	push	{r7, lr}
 8032f00:	b086      	sub	sp, #24
 8032f02:	af00      	add	r7, sp, #0
 8032f04:	4603      	mov	r3, r0
 8032f06:	60b9      	str	r1, [r7, #8]
 8032f08:	607a      	str	r2, [r7, #4]
 8032f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8032f0c:	2300      	movs	r3, #0
 8032f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8032f10:	f7ff ff3e 	bl	8032d90 <__NVIC_GetPriorityGrouping>
 8032f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8032f16:	687a      	ldr	r2, [r7, #4]
 8032f18:	68b9      	ldr	r1, [r7, #8]
 8032f1a:	6978      	ldr	r0, [r7, #20]
 8032f1c:	f7ff ff8e 	bl	8032e3c <NVIC_EncodePriority>
 8032f20:	4602      	mov	r2, r0
 8032f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8032f26:	4611      	mov	r1, r2
 8032f28:	4618      	mov	r0, r3
 8032f2a:	f7ff ff5d 	bl	8032de8 <__NVIC_SetPriority>
}
 8032f2e:	bf00      	nop
 8032f30:	3718      	adds	r7, #24
 8032f32:	46bd      	mov	sp, r7
 8032f34:	bd80      	pop	{r7, pc}

08032f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8032f36:	b580      	push	{r7, lr}
 8032f38:	b082      	sub	sp, #8
 8032f3a:	af00      	add	r7, sp, #0
 8032f3c:	4603      	mov	r3, r0
 8032f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8032f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8032f44:	4618      	mov	r0, r3
 8032f46:	f7ff ff31 	bl	8032dac <__NVIC_EnableIRQ>
}
 8032f4a:	bf00      	nop
 8032f4c:	3708      	adds	r7, #8
 8032f4e:	46bd      	mov	sp, r7
 8032f50:	bd80      	pop	{r7, pc}

08032f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8032f52:	b580      	push	{r7, lr}
 8032f54:	b082      	sub	sp, #8
 8032f56:	af00      	add	r7, sp, #0
 8032f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8032f5a:	6878      	ldr	r0, [r7, #4]
 8032f5c:	f7ff ffa2 	bl	8032ea4 <SysTick_Config>
 8032f60:	4603      	mov	r3, r0
}
 8032f62:	4618      	mov	r0, r3
 8032f64:	3708      	adds	r7, #8
 8032f66:	46bd      	mov	sp, r7
 8032f68:	bd80      	pop	{r7, pc}

08032f6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8032f6a:	b580      	push	{r7, lr}
 8032f6c:	b084      	sub	sp, #16
 8032f6e:	af00      	add	r7, sp, #0
 8032f70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8032f72:	687b      	ldr	r3, [r7, #4]
 8032f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032f76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8032f78:	f7ff feb6 	bl	8032ce8 <HAL_GetTick>
 8032f7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8032f7e:	687b      	ldr	r3, [r7, #4]
 8032f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8032f84:	b2db      	uxtb	r3, r3
 8032f86:	2b02      	cmp	r3, #2
 8032f88:	d008      	beq.n	8032f9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8032f8a:	687b      	ldr	r3, [r7, #4]
 8032f8c:	2280      	movs	r2, #128	; 0x80
 8032f8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8032f90:	687b      	ldr	r3, [r7, #4]
 8032f92:	2200      	movs	r2, #0
 8032f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8032f98:	2301      	movs	r3, #1
 8032f9a:	e052      	b.n	8033042 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8032f9c:	687b      	ldr	r3, [r7, #4]
 8032f9e:	681b      	ldr	r3, [r3, #0]
 8032fa0:	681a      	ldr	r2, [r3, #0]
 8032fa2:	687b      	ldr	r3, [r7, #4]
 8032fa4:	681b      	ldr	r3, [r3, #0]
 8032fa6:	f022 0216 	bic.w	r2, r2, #22
 8032faa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8032fac:	687b      	ldr	r3, [r7, #4]
 8032fae:	681b      	ldr	r3, [r3, #0]
 8032fb0:	695a      	ldr	r2, [r3, #20]
 8032fb2:	687b      	ldr	r3, [r7, #4]
 8032fb4:	681b      	ldr	r3, [r3, #0]
 8032fb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8032fba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8032fbc:	687b      	ldr	r3, [r7, #4]
 8032fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8032fc0:	2b00      	cmp	r3, #0
 8032fc2:	d103      	bne.n	8032fcc <HAL_DMA_Abort+0x62>
 8032fc4:	687b      	ldr	r3, [r7, #4]
 8032fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8032fc8:	2b00      	cmp	r3, #0
 8032fca:	d007      	beq.n	8032fdc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8032fcc:	687b      	ldr	r3, [r7, #4]
 8032fce:	681b      	ldr	r3, [r3, #0]
 8032fd0:	681a      	ldr	r2, [r3, #0]
 8032fd2:	687b      	ldr	r3, [r7, #4]
 8032fd4:	681b      	ldr	r3, [r3, #0]
 8032fd6:	f022 0208 	bic.w	r2, r2, #8
 8032fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8032fdc:	687b      	ldr	r3, [r7, #4]
 8032fde:	681b      	ldr	r3, [r3, #0]
 8032fe0:	681a      	ldr	r2, [r3, #0]
 8032fe2:	687b      	ldr	r3, [r7, #4]
 8032fe4:	681b      	ldr	r3, [r3, #0]
 8032fe6:	f022 0201 	bic.w	r2, r2, #1
 8032fea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8032fec:	e013      	b.n	8033016 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8032fee:	f7ff fe7b 	bl	8032ce8 <HAL_GetTick>
 8032ff2:	4602      	mov	r2, r0
 8032ff4:	68bb      	ldr	r3, [r7, #8]
 8032ff6:	1ad3      	subs	r3, r2, r3
 8032ff8:	2b05      	cmp	r3, #5
 8032ffa:	d90c      	bls.n	8033016 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8032ffc:	687b      	ldr	r3, [r7, #4]
 8032ffe:	2220      	movs	r2, #32
 8033000:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8033002:	687b      	ldr	r3, [r7, #4]
 8033004:	2203      	movs	r2, #3
 8033006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 803300a:	687b      	ldr	r3, [r7, #4]
 803300c:	2200      	movs	r2, #0
 803300e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8033012:	2303      	movs	r3, #3
 8033014:	e015      	b.n	8033042 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8033016:	687b      	ldr	r3, [r7, #4]
 8033018:	681b      	ldr	r3, [r3, #0]
 803301a:	681b      	ldr	r3, [r3, #0]
 803301c:	f003 0301 	and.w	r3, r3, #1
 8033020:	2b00      	cmp	r3, #0
 8033022:	d1e4      	bne.n	8032fee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8033024:	687b      	ldr	r3, [r7, #4]
 8033026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033028:	223f      	movs	r2, #63	; 0x3f
 803302a:	409a      	lsls	r2, r3
 803302c:	68fb      	ldr	r3, [r7, #12]
 803302e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8033030:	687b      	ldr	r3, [r7, #4]
 8033032:	2201      	movs	r2, #1
 8033034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8033038:	687b      	ldr	r3, [r7, #4]
 803303a:	2200      	movs	r2, #0
 803303c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8033040:	2300      	movs	r3, #0
}
 8033042:	4618      	mov	r0, r3
 8033044:	3710      	adds	r7, #16
 8033046:	46bd      	mov	sp, r7
 8033048:	bd80      	pop	{r7, pc}

0803304a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 803304a:	b480      	push	{r7}
 803304c:	b083      	sub	sp, #12
 803304e:	af00      	add	r7, sp, #0
 8033050:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8033052:	687b      	ldr	r3, [r7, #4]
 8033054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8033058:	b2db      	uxtb	r3, r3
 803305a:	2b02      	cmp	r3, #2
 803305c:	d004      	beq.n	8033068 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 803305e:	687b      	ldr	r3, [r7, #4]
 8033060:	2280      	movs	r2, #128	; 0x80
 8033062:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8033064:	2301      	movs	r3, #1
 8033066:	e00c      	b.n	8033082 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8033068:	687b      	ldr	r3, [r7, #4]
 803306a:	2205      	movs	r2, #5
 803306c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8033070:	687b      	ldr	r3, [r7, #4]
 8033072:	681b      	ldr	r3, [r3, #0]
 8033074:	681a      	ldr	r2, [r3, #0]
 8033076:	687b      	ldr	r3, [r7, #4]
 8033078:	681b      	ldr	r3, [r3, #0]
 803307a:	f022 0201 	bic.w	r2, r2, #1
 803307e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8033080:	2300      	movs	r3, #0
}
 8033082:	4618      	mov	r0, r3
 8033084:	370c      	adds	r7, #12
 8033086:	46bd      	mov	sp, r7
 8033088:	f85d 7b04 	ldr.w	r7, [sp], #4
 803308c:	4770      	bx	lr
	...

08033090 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8033090:	b580      	push	{r7, lr}
 8033092:	b086      	sub	sp, #24
 8033094:	af00      	add	r7, sp, #0
 8033096:	60f8      	str	r0, [r7, #12]
 8033098:	60b9      	str	r1, [r7, #8]
 803309a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 803309e:	2301      	movs	r3, #1
 80330a0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80330a2:	4b23      	ldr	r3, [pc, #140]	; (8033130 <HAL_FLASH_Program+0xa0>)
 80330a4:	7e1b      	ldrb	r3, [r3, #24]
 80330a6:	2b01      	cmp	r3, #1
 80330a8:	d101      	bne.n	80330ae <HAL_FLASH_Program+0x1e>
 80330aa:	2302      	movs	r3, #2
 80330ac:	e03b      	b.n	8033126 <HAL_FLASH_Program+0x96>
 80330ae:	4b20      	ldr	r3, [pc, #128]	; (8033130 <HAL_FLASH_Program+0xa0>)
 80330b0:	2201      	movs	r2, #1
 80330b2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80330b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80330b8:	f000 f870 	bl	803319c <FLASH_WaitForLastOperation>
 80330bc:	4603      	mov	r3, r0
 80330be:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80330c0:	7dfb      	ldrb	r3, [r7, #23]
 80330c2:	2b00      	cmp	r3, #0
 80330c4:	d12b      	bne.n	803311e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80330c6:	68fb      	ldr	r3, [r7, #12]
 80330c8:	2b00      	cmp	r3, #0
 80330ca:	d105      	bne.n	80330d8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80330cc:	783b      	ldrb	r3, [r7, #0]
 80330ce:	4619      	mov	r1, r3
 80330d0:	68b8      	ldr	r0, [r7, #8]
 80330d2:	f000 f91b 	bl	803330c <FLASH_Program_Byte>
 80330d6:	e016      	b.n	8033106 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80330d8:	68fb      	ldr	r3, [r7, #12]
 80330da:	2b01      	cmp	r3, #1
 80330dc:	d105      	bne.n	80330ea <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80330de:	883b      	ldrh	r3, [r7, #0]
 80330e0:	4619      	mov	r1, r3
 80330e2:	68b8      	ldr	r0, [r7, #8]
 80330e4:	f000 f8ee 	bl	80332c4 <FLASH_Program_HalfWord>
 80330e8:	e00d      	b.n	8033106 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80330ea:	68fb      	ldr	r3, [r7, #12]
 80330ec:	2b02      	cmp	r3, #2
 80330ee:	d105      	bne.n	80330fc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80330f0:	683b      	ldr	r3, [r7, #0]
 80330f2:	4619      	mov	r1, r3
 80330f4:	68b8      	ldr	r0, [r7, #8]
 80330f6:	f000 f8c3 	bl	8033280 <FLASH_Program_Word>
 80330fa:	e004      	b.n	8033106 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80330fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8033100:	68b8      	ldr	r0, [r7, #8]
 8033102:	f000 f88b 	bl	803321c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8033106:	f24c 3050 	movw	r0, #50000	; 0xc350
 803310a:	f000 f847 	bl	803319c <FLASH_WaitForLastOperation>
 803310e:	4603      	mov	r3, r0
 8033110:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8033112:	4b08      	ldr	r3, [pc, #32]	; (8033134 <HAL_FLASH_Program+0xa4>)
 8033114:	691b      	ldr	r3, [r3, #16]
 8033116:	4a07      	ldr	r2, [pc, #28]	; (8033134 <HAL_FLASH_Program+0xa4>)
 8033118:	f023 0301 	bic.w	r3, r3, #1
 803311c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 803311e:	4b04      	ldr	r3, [pc, #16]	; (8033130 <HAL_FLASH_Program+0xa0>)
 8033120:	2200      	movs	r2, #0
 8033122:	761a      	strb	r2, [r3, #24]
  
  return status;
 8033124:	7dfb      	ldrb	r3, [r7, #23]
}
 8033126:	4618      	mov	r0, r3
 8033128:	3718      	adds	r7, #24
 803312a:	46bd      	mov	sp, r7
 803312c:	bd80      	pop	{r7, pc}
 803312e:	bf00      	nop
 8033130:	200006ec 	.word	0x200006ec
 8033134:	40023c00 	.word	0x40023c00

08033138 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8033138:	b480      	push	{r7}
 803313a:	b083      	sub	sp, #12
 803313c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 803313e:	2300      	movs	r3, #0
 8033140:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8033142:	4b0b      	ldr	r3, [pc, #44]	; (8033170 <HAL_FLASH_Unlock+0x38>)
 8033144:	691b      	ldr	r3, [r3, #16]
 8033146:	2b00      	cmp	r3, #0
 8033148:	da0b      	bge.n	8033162 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 803314a:	4b09      	ldr	r3, [pc, #36]	; (8033170 <HAL_FLASH_Unlock+0x38>)
 803314c:	4a09      	ldr	r2, [pc, #36]	; (8033174 <HAL_FLASH_Unlock+0x3c>)
 803314e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8033150:	4b07      	ldr	r3, [pc, #28]	; (8033170 <HAL_FLASH_Unlock+0x38>)
 8033152:	4a09      	ldr	r2, [pc, #36]	; (8033178 <HAL_FLASH_Unlock+0x40>)
 8033154:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8033156:	4b06      	ldr	r3, [pc, #24]	; (8033170 <HAL_FLASH_Unlock+0x38>)
 8033158:	691b      	ldr	r3, [r3, #16]
 803315a:	2b00      	cmp	r3, #0
 803315c:	da01      	bge.n	8033162 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 803315e:	2301      	movs	r3, #1
 8033160:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8033162:	79fb      	ldrb	r3, [r7, #7]
}
 8033164:	4618      	mov	r0, r3
 8033166:	370c      	adds	r7, #12
 8033168:	46bd      	mov	sp, r7
 803316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803316e:	4770      	bx	lr
 8033170:	40023c00 	.word	0x40023c00
 8033174:	45670123 	.word	0x45670123
 8033178:	cdef89ab 	.word	0xcdef89ab

0803317c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 803317c:	b480      	push	{r7}
 803317e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8033180:	4b05      	ldr	r3, [pc, #20]	; (8033198 <HAL_FLASH_Lock+0x1c>)
 8033182:	691b      	ldr	r3, [r3, #16]
 8033184:	4a04      	ldr	r2, [pc, #16]	; (8033198 <HAL_FLASH_Lock+0x1c>)
 8033186:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 803318a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 803318c:	2300      	movs	r3, #0
}
 803318e:	4618      	mov	r0, r3
 8033190:	46bd      	mov	sp, r7
 8033192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033196:	4770      	bx	lr
 8033198:	40023c00 	.word	0x40023c00

0803319c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 803319c:	b580      	push	{r7, lr}
 803319e:	b084      	sub	sp, #16
 80331a0:	af00      	add	r7, sp, #0
 80331a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80331a4:	2300      	movs	r3, #0
 80331a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80331a8:	4b1a      	ldr	r3, [pc, #104]	; (8033214 <FLASH_WaitForLastOperation+0x78>)
 80331aa:	2200      	movs	r2, #0
 80331ac:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80331ae:	f7ff fd9b 	bl	8032ce8 <HAL_GetTick>
 80331b2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80331b4:	e010      	b.n	80331d8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80331b6:	687b      	ldr	r3, [r7, #4]
 80331b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80331bc:	d00c      	beq.n	80331d8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80331be:	687b      	ldr	r3, [r7, #4]
 80331c0:	2b00      	cmp	r3, #0
 80331c2:	d007      	beq.n	80331d4 <FLASH_WaitForLastOperation+0x38>
 80331c4:	f7ff fd90 	bl	8032ce8 <HAL_GetTick>
 80331c8:	4602      	mov	r2, r0
 80331ca:	68fb      	ldr	r3, [r7, #12]
 80331cc:	1ad3      	subs	r3, r2, r3
 80331ce:	687a      	ldr	r2, [r7, #4]
 80331d0:	429a      	cmp	r2, r3
 80331d2:	d201      	bcs.n	80331d8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80331d4:	2303      	movs	r3, #3
 80331d6:	e019      	b.n	803320c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80331d8:	4b0f      	ldr	r3, [pc, #60]	; (8033218 <FLASH_WaitForLastOperation+0x7c>)
 80331da:	68db      	ldr	r3, [r3, #12]
 80331dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80331e0:	2b00      	cmp	r3, #0
 80331e2:	d1e8      	bne.n	80331b6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80331e4:	4b0c      	ldr	r3, [pc, #48]	; (8033218 <FLASH_WaitForLastOperation+0x7c>)
 80331e6:	68db      	ldr	r3, [r3, #12]
 80331e8:	f003 0301 	and.w	r3, r3, #1
 80331ec:	2b00      	cmp	r3, #0
 80331ee:	d002      	beq.n	80331f6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80331f0:	4b09      	ldr	r3, [pc, #36]	; (8033218 <FLASH_WaitForLastOperation+0x7c>)
 80331f2:	2201      	movs	r2, #1
 80331f4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80331f6:	4b08      	ldr	r3, [pc, #32]	; (8033218 <FLASH_WaitForLastOperation+0x7c>)
 80331f8:	68db      	ldr	r3, [r3, #12]
 80331fa:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80331fe:	2b00      	cmp	r3, #0
 8033200:	d003      	beq.n	803320a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8033202:	f000 f8a5 	bl	8033350 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8033206:	2301      	movs	r3, #1
 8033208:	e000      	b.n	803320c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 803320a:	2300      	movs	r3, #0
  
}  
 803320c:	4618      	mov	r0, r3
 803320e:	3710      	adds	r7, #16
 8033210:	46bd      	mov	sp, r7
 8033212:	bd80      	pop	{r7, pc}
 8033214:	200006ec 	.word	0x200006ec
 8033218:	40023c00 	.word	0x40023c00

0803321c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 803321c:	b480      	push	{r7}
 803321e:	b085      	sub	sp, #20
 8033220:	af00      	add	r7, sp, #0
 8033222:	60f8      	str	r0, [r7, #12]
 8033224:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8033228:	4b14      	ldr	r3, [pc, #80]	; (803327c <FLASH_Program_DoubleWord+0x60>)
 803322a:	691b      	ldr	r3, [r3, #16]
 803322c:	4a13      	ldr	r2, [pc, #76]	; (803327c <FLASH_Program_DoubleWord+0x60>)
 803322e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8033232:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8033234:	4b11      	ldr	r3, [pc, #68]	; (803327c <FLASH_Program_DoubleWord+0x60>)
 8033236:	691b      	ldr	r3, [r3, #16]
 8033238:	4a10      	ldr	r2, [pc, #64]	; (803327c <FLASH_Program_DoubleWord+0x60>)
 803323a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 803323e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8033240:	4b0e      	ldr	r3, [pc, #56]	; (803327c <FLASH_Program_DoubleWord+0x60>)
 8033242:	691b      	ldr	r3, [r3, #16]
 8033244:	4a0d      	ldr	r2, [pc, #52]	; (803327c <FLASH_Program_DoubleWord+0x60>)
 8033246:	f043 0301 	orr.w	r3, r3, #1
 803324a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 803324c:	68fb      	ldr	r3, [r7, #12]
 803324e:	683a      	ldr	r2, [r7, #0]
 8033250:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8033252:	f3bf 8f6f 	isb	sy
}
 8033256:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8033258:	e9d7 0100 	ldrd	r0, r1, [r7]
 803325c:	f04f 0200 	mov.w	r2, #0
 8033260:	f04f 0300 	mov.w	r3, #0
 8033264:	000a      	movs	r2, r1
 8033266:	2300      	movs	r3, #0
 8033268:	68f9      	ldr	r1, [r7, #12]
 803326a:	3104      	adds	r1, #4
 803326c:	4613      	mov	r3, r2
 803326e:	600b      	str	r3, [r1, #0]
}
 8033270:	bf00      	nop
 8033272:	3714      	adds	r7, #20
 8033274:	46bd      	mov	sp, r7
 8033276:	f85d 7b04 	ldr.w	r7, [sp], #4
 803327a:	4770      	bx	lr
 803327c:	40023c00 	.word	0x40023c00

08033280 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8033280:	b480      	push	{r7}
 8033282:	b083      	sub	sp, #12
 8033284:	af00      	add	r7, sp, #0
 8033286:	6078      	str	r0, [r7, #4]
 8033288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 803328a:	4b0d      	ldr	r3, [pc, #52]	; (80332c0 <FLASH_Program_Word+0x40>)
 803328c:	691b      	ldr	r3, [r3, #16]
 803328e:	4a0c      	ldr	r2, [pc, #48]	; (80332c0 <FLASH_Program_Word+0x40>)
 8033290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8033294:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8033296:	4b0a      	ldr	r3, [pc, #40]	; (80332c0 <FLASH_Program_Word+0x40>)
 8033298:	691b      	ldr	r3, [r3, #16]
 803329a:	4a09      	ldr	r2, [pc, #36]	; (80332c0 <FLASH_Program_Word+0x40>)
 803329c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80332a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80332a2:	4b07      	ldr	r3, [pc, #28]	; (80332c0 <FLASH_Program_Word+0x40>)
 80332a4:	691b      	ldr	r3, [r3, #16]
 80332a6:	4a06      	ldr	r2, [pc, #24]	; (80332c0 <FLASH_Program_Word+0x40>)
 80332a8:	f043 0301 	orr.w	r3, r3, #1
 80332ac:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80332ae:	687b      	ldr	r3, [r7, #4]
 80332b0:	683a      	ldr	r2, [r7, #0]
 80332b2:	601a      	str	r2, [r3, #0]
}
 80332b4:	bf00      	nop
 80332b6:	370c      	adds	r7, #12
 80332b8:	46bd      	mov	sp, r7
 80332ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80332be:	4770      	bx	lr
 80332c0:	40023c00 	.word	0x40023c00

080332c4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80332c4:	b480      	push	{r7}
 80332c6:	b083      	sub	sp, #12
 80332c8:	af00      	add	r7, sp, #0
 80332ca:	6078      	str	r0, [r7, #4]
 80332cc:	460b      	mov	r3, r1
 80332ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80332d0:	4b0d      	ldr	r3, [pc, #52]	; (8033308 <FLASH_Program_HalfWord+0x44>)
 80332d2:	691b      	ldr	r3, [r3, #16]
 80332d4:	4a0c      	ldr	r2, [pc, #48]	; (8033308 <FLASH_Program_HalfWord+0x44>)
 80332d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80332da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80332dc:	4b0a      	ldr	r3, [pc, #40]	; (8033308 <FLASH_Program_HalfWord+0x44>)
 80332de:	691b      	ldr	r3, [r3, #16]
 80332e0:	4a09      	ldr	r2, [pc, #36]	; (8033308 <FLASH_Program_HalfWord+0x44>)
 80332e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80332e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80332e8:	4b07      	ldr	r3, [pc, #28]	; (8033308 <FLASH_Program_HalfWord+0x44>)
 80332ea:	691b      	ldr	r3, [r3, #16]
 80332ec:	4a06      	ldr	r2, [pc, #24]	; (8033308 <FLASH_Program_HalfWord+0x44>)
 80332ee:	f043 0301 	orr.w	r3, r3, #1
 80332f2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80332f4:	687b      	ldr	r3, [r7, #4]
 80332f6:	887a      	ldrh	r2, [r7, #2]
 80332f8:	801a      	strh	r2, [r3, #0]
}
 80332fa:	bf00      	nop
 80332fc:	370c      	adds	r7, #12
 80332fe:	46bd      	mov	sp, r7
 8033300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033304:	4770      	bx	lr
 8033306:	bf00      	nop
 8033308:	40023c00 	.word	0x40023c00

0803330c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 803330c:	b480      	push	{r7}
 803330e:	b083      	sub	sp, #12
 8033310:	af00      	add	r7, sp, #0
 8033312:	6078      	str	r0, [r7, #4]
 8033314:	460b      	mov	r3, r1
 8033316:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8033318:	4b0c      	ldr	r3, [pc, #48]	; (803334c <FLASH_Program_Byte+0x40>)
 803331a:	691b      	ldr	r3, [r3, #16]
 803331c:	4a0b      	ldr	r2, [pc, #44]	; (803334c <FLASH_Program_Byte+0x40>)
 803331e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8033322:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8033324:	4b09      	ldr	r3, [pc, #36]	; (803334c <FLASH_Program_Byte+0x40>)
 8033326:	4a09      	ldr	r2, [pc, #36]	; (803334c <FLASH_Program_Byte+0x40>)
 8033328:	691b      	ldr	r3, [r3, #16]
 803332a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 803332c:	4b07      	ldr	r3, [pc, #28]	; (803334c <FLASH_Program_Byte+0x40>)
 803332e:	691b      	ldr	r3, [r3, #16]
 8033330:	4a06      	ldr	r2, [pc, #24]	; (803334c <FLASH_Program_Byte+0x40>)
 8033332:	f043 0301 	orr.w	r3, r3, #1
 8033336:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8033338:	687b      	ldr	r3, [r7, #4]
 803333a:	78fa      	ldrb	r2, [r7, #3]
 803333c:	701a      	strb	r2, [r3, #0]
}
 803333e:	bf00      	nop
 8033340:	370c      	adds	r7, #12
 8033342:	46bd      	mov	sp, r7
 8033344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033348:	4770      	bx	lr
 803334a:	bf00      	nop
 803334c:	40023c00 	.word	0x40023c00

08033350 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8033350:	b480      	push	{r7}
 8033352:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8033354:	4b27      	ldr	r3, [pc, #156]	; (80333f4 <FLASH_SetErrorCode+0xa4>)
 8033356:	68db      	ldr	r3, [r3, #12]
 8033358:	f003 0310 	and.w	r3, r3, #16
 803335c:	2b00      	cmp	r3, #0
 803335e:	d008      	beq.n	8033372 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8033360:	4b25      	ldr	r3, [pc, #148]	; (80333f8 <FLASH_SetErrorCode+0xa8>)
 8033362:	69db      	ldr	r3, [r3, #28]
 8033364:	f043 0310 	orr.w	r3, r3, #16
 8033368:	4a23      	ldr	r2, [pc, #140]	; (80333f8 <FLASH_SetErrorCode+0xa8>)
 803336a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 803336c:	4b21      	ldr	r3, [pc, #132]	; (80333f4 <FLASH_SetErrorCode+0xa4>)
 803336e:	2210      	movs	r2, #16
 8033370:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8033372:	4b20      	ldr	r3, [pc, #128]	; (80333f4 <FLASH_SetErrorCode+0xa4>)
 8033374:	68db      	ldr	r3, [r3, #12]
 8033376:	f003 0320 	and.w	r3, r3, #32
 803337a:	2b00      	cmp	r3, #0
 803337c:	d008      	beq.n	8033390 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 803337e:	4b1e      	ldr	r3, [pc, #120]	; (80333f8 <FLASH_SetErrorCode+0xa8>)
 8033380:	69db      	ldr	r3, [r3, #28]
 8033382:	f043 0308 	orr.w	r3, r3, #8
 8033386:	4a1c      	ldr	r2, [pc, #112]	; (80333f8 <FLASH_SetErrorCode+0xa8>)
 8033388:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 803338a:	4b1a      	ldr	r3, [pc, #104]	; (80333f4 <FLASH_SetErrorCode+0xa4>)
 803338c:	2220      	movs	r2, #32
 803338e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8033390:	4b18      	ldr	r3, [pc, #96]	; (80333f4 <FLASH_SetErrorCode+0xa4>)
 8033392:	68db      	ldr	r3, [r3, #12]
 8033394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8033398:	2b00      	cmp	r3, #0
 803339a:	d008      	beq.n	80333ae <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 803339c:	4b16      	ldr	r3, [pc, #88]	; (80333f8 <FLASH_SetErrorCode+0xa8>)
 803339e:	69db      	ldr	r3, [r3, #28]
 80333a0:	f043 0304 	orr.w	r3, r3, #4
 80333a4:	4a14      	ldr	r2, [pc, #80]	; (80333f8 <FLASH_SetErrorCode+0xa8>)
 80333a6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80333a8:	4b12      	ldr	r3, [pc, #72]	; (80333f4 <FLASH_SetErrorCode+0xa4>)
 80333aa:	2240      	movs	r2, #64	; 0x40
 80333ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80333ae:	4b11      	ldr	r3, [pc, #68]	; (80333f4 <FLASH_SetErrorCode+0xa4>)
 80333b0:	68db      	ldr	r3, [r3, #12]
 80333b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80333b6:	2b00      	cmp	r3, #0
 80333b8:	d008      	beq.n	80333cc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80333ba:	4b0f      	ldr	r3, [pc, #60]	; (80333f8 <FLASH_SetErrorCode+0xa8>)
 80333bc:	69db      	ldr	r3, [r3, #28]
 80333be:	f043 0302 	orr.w	r3, r3, #2
 80333c2:	4a0d      	ldr	r2, [pc, #52]	; (80333f8 <FLASH_SetErrorCode+0xa8>)
 80333c4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80333c6:	4b0b      	ldr	r3, [pc, #44]	; (80333f4 <FLASH_SetErrorCode+0xa4>)
 80333c8:	2280      	movs	r2, #128	; 0x80
 80333ca:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80333cc:	4b09      	ldr	r3, [pc, #36]	; (80333f4 <FLASH_SetErrorCode+0xa4>)
 80333ce:	68db      	ldr	r3, [r3, #12]
 80333d0:	f003 0302 	and.w	r3, r3, #2
 80333d4:	2b00      	cmp	r3, #0
 80333d6:	d008      	beq.n	80333ea <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80333d8:	4b07      	ldr	r3, [pc, #28]	; (80333f8 <FLASH_SetErrorCode+0xa8>)
 80333da:	69db      	ldr	r3, [r3, #28]
 80333dc:	f043 0320 	orr.w	r3, r3, #32
 80333e0:	4a05      	ldr	r2, [pc, #20]	; (80333f8 <FLASH_SetErrorCode+0xa8>)
 80333e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80333e4:	4b03      	ldr	r3, [pc, #12]	; (80333f4 <FLASH_SetErrorCode+0xa4>)
 80333e6:	2202      	movs	r2, #2
 80333e8:	60da      	str	r2, [r3, #12]
  }
}
 80333ea:	bf00      	nop
 80333ec:	46bd      	mov	sp, r7
 80333ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80333f2:	4770      	bx	lr
 80333f4:	40023c00 	.word	0x40023c00
 80333f8:	200006ec 	.word	0x200006ec

080333fc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80333fc:	b580      	push	{r7, lr}
 80333fe:	b084      	sub	sp, #16
 8033400:	af00      	add	r7, sp, #0
 8033402:	6078      	str	r0, [r7, #4]
 8033404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8033406:	2301      	movs	r3, #1
 8033408:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 803340a:	2300      	movs	r3, #0
 803340c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 803340e:	4b31      	ldr	r3, [pc, #196]	; (80334d4 <HAL_FLASHEx_Erase+0xd8>)
 8033410:	7e1b      	ldrb	r3, [r3, #24]
 8033412:	2b01      	cmp	r3, #1
 8033414:	d101      	bne.n	803341a <HAL_FLASHEx_Erase+0x1e>
 8033416:	2302      	movs	r3, #2
 8033418:	e058      	b.n	80334cc <HAL_FLASHEx_Erase+0xd0>
 803341a:	4b2e      	ldr	r3, [pc, #184]	; (80334d4 <HAL_FLASHEx_Erase+0xd8>)
 803341c:	2201      	movs	r2, #1
 803341e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8033420:	f24c 3050 	movw	r0, #50000	; 0xc350
 8033424:	f7ff feba 	bl	803319c <FLASH_WaitForLastOperation>
 8033428:	4603      	mov	r3, r0
 803342a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 803342c:	7bfb      	ldrb	r3, [r7, #15]
 803342e:	2b00      	cmp	r3, #0
 8033430:	d148      	bne.n	80334c4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8033432:	683b      	ldr	r3, [r7, #0]
 8033434:	f04f 32ff 	mov.w	r2, #4294967295
 8033438:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 803343a:	687b      	ldr	r3, [r7, #4]
 803343c:	681b      	ldr	r3, [r3, #0]
 803343e:	2b01      	cmp	r3, #1
 8033440:	d115      	bne.n	803346e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8033442:	687b      	ldr	r3, [r7, #4]
 8033444:	691b      	ldr	r3, [r3, #16]
 8033446:	b2da      	uxtb	r2, r3
 8033448:	687b      	ldr	r3, [r7, #4]
 803344a:	685b      	ldr	r3, [r3, #4]
 803344c:	4619      	mov	r1, r3
 803344e:	4610      	mov	r0, r2
 8033450:	f000 f844 	bl	80334dc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8033454:	f24c 3050 	movw	r0, #50000	; 0xc350
 8033458:	f7ff fea0 	bl	803319c <FLASH_WaitForLastOperation>
 803345c:	4603      	mov	r3, r0
 803345e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8033460:	4b1d      	ldr	r3, [pc, #116]	; (80334d8 <HAL_FLASHEx_Erase+0xdc>)
 8033462:	691b      	ldr	r3, [r3, #16]
 8033464:	4a1c      	ldr	r2, [pc, #112]	; (80334d8 <HAL_FLASHEx_Erase+0xdc>)
 8033466:	f023 0304 	bic.w	r3, r3, #4
 803346a:	6113      	str	r3, [r2, #16]
 803346c:	e028      	b.n	80334c0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 803346e:	687b      	ldr	r3, [r7, #4]
 8033470:	689b      	ldr	r3, [r3, #8]
 8033472:	60bb      	str	r3, [r7, #8]
 8033474:	e01c      	b.n	80334b0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8033476:	687b      	ldr	r3, [r7, #4]
 8033478:	691b      	ldr	r3, [r3, #16]
 803347a:	b2db      	uxtb	r3, r3
 803347c:	4619      	mov	r1, r3
 803347e:	68b8      	ldr	r0, [r7, #8]
 8033480:	f000 f850 	bl	8033524 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8033484:	f24c 3050 	movw	r0, #50000	; 0xc350
 8033488:	f7ff fe88 	bl	803319c <FLASH_WaitForLastOperation>
 803348c:	4603      	mov	r3, r0
 803348e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8033490:	4b11      	ldr	r3, [pc, #68]	; (80334d8 <HAL_FLASHEx_Erase+0xdc>)
 8033492:	691b      	ldr	r3, [r3, #16]
 8033494:	4a10      	ldr	r2, [pc, #64]	; (80334d8 <HAL_FLASHEx_Erase+0xdc>)
 8033496:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 803349a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 803349c:	7bfb      	ldrb	r3, [r7, #15]
 803349e:	2b00      	cmp	r3, #0
 80334a0:	d003      	beq.n	80334aa <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80334a2:	683b      	ldr	r3, [r7, #0]
 80334a4:	68ba      	ldr	r2, [r7, #8]
 80334a6:	601a      	str	r2, [r3, #0]
          break;
 80334a8:	e00a      	b.n	80334c0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80334aa:	68bb      	ldr	r3, [r7, #8]
 80334ac:	3301      	adds	r3, #1
 80334ae:	60bb      	str	r3, [r7, #8]
 80334b0:	687b      	ldr	r3, [r7, #4]
 80334b2:	68da      	ldr	r2, [r3, #12]
 80334b4:	687b      	ldr	r3, [r7, #4]
 80334b6:	689b      	ldr	r3, [r3, #8]
 80334b8:	4413      	add	r3, r2
 80334ba:	68ba      	ldr	r2, [r7, #8]
 80334bc:	429a      	cmp	r2, r3
 80334be:	d3da      	bcc.n	8033476 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80334c0:	f000 f878 	bl	80335b4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80334c4:	4b03      	ldr	r3, [pc, #12]	; (80334d4 <HAL_FLASHEx_Erase+0xd8>)
 80334c6:	2200      	movs	r2, #0
 80334c8:	761a      	strb	r2, [r3, #24]

  return status;
 80334ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80334cc:	4618      	mov	r0, r3
 80334ce:	3710      	adds	r7, #16
 80334d0:	46bd      	mov	sp, r7
 80334d2:	bd80      	pop	{r7, pc}
 80334d4:	200006ec 	.word	0x200006ec
 80334d8:	40023c00 	.word	0x40023c00

080334dc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80334dc:	b480      	push	{r7}
 80334de:	b083      	sub	sp, #12
 80334e0:	af00      	add	r7, sp, #0
 80334e2:	4603      	mov	r3, r0
 80334e4:	6039      	str	r1, [r7, #0]
 80334e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80334e8:	4b0d      	ldr	r3, [pc, #52]	; (8033520 <FLASH_MassErase+0x44>)
 80334ea:	691b      	ldr	r3, [r3, #16]
 80334ec:	4a0c      	ldr	r2, [pc, #48]	; (8033520 <FLASH_MassErase+0x44>)
 80334ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80334f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80334f4:	4b0a      	ldr	r3, [pc, #40]	; (8033520 <FLASH_MassErase+0x44>)
 80334f6:	691b      	ldr	r3, [r3, #16]
 80334f8:	4a09      	ldr	r2, [pc, #36]	; (8033520 <FLASH_MassErase+0x44>)
 80334fa:	f043 0304 	orr.w	r3, r3, #4
 80334fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8033500:	4b07      	ldr	r3, [pc, #28]	; (8033520 <FLASH_MassErase+0x44>)
 8033502:	691a      	ldr	r2, [r3, #16]
 8033504:	79fb      	ldrb	r3, [r7, #7]
 8033506:	021b      	lsls	r3, r3, #8
 8033508:	4313      	orrs	r3, r2
 803350a:	4a05      	ldr	r2, [pc, #20]	; (8033520 <FLASH_MassErase+0x44>)
 803350c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8033510:	6113      	str	r3, [r2, #16]
}
 8033512:	bf00      	nop
 8033514:	370c      	adds	r7, #12
 8033516:	46bd      	mov	sp, r7
 8033518:	f85d 7b04 	ldr.w	r7, [sp], #4
 803351c:	4770      	bx	lr
 803351e:	bf00      	nop
 8033520:	40023c00 	.word	0x40023c00

08033524 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8033524:	b480      	push	{r7}
 8033526:	b085      	sub	sp, #20
 8033528:	af00      	add	r7, sp, #0
 803352a:	6078      	str	r0, [r7, #4]
 803352c:	460b      	mov	r3, r1
 803352e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8033530:	2300      	movs	r3, #0
 8033532:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8033534:	78fb      	ldrb	r3, [r7, #3]
 8033536:	2b00      	cmp	r3, #0
 8033538:	d102      	bne.n	8033540 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 803353a:	2300      	movs	r3, #0
 803353c:	60fb      	str	r3, [r7, #12]
 803353e:	e010      	b.n	8033562 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8033540:	78fb      	ldrb	r3, [r7, #3]
 8033542:	2b01      	cmp	r3, #1
 8033544:	d103      	bne.n	803354e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8033546:	f44f 7380 	mov.w	r3, #256	; 0x100
 803354a:	60fb      	str	r3, [r7, #12]
 803354c:	e009      	b.n	8033562 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 803354e:	78fb      	ldrb	r3, [r7, #3]
 8033550:	2b02      	cmp	r3, #2
 8033552:	d103      	bne.n	803355c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8033554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8033558:	60fb      	str	r3, [r7, #12]
 803355a:	e002      	b.n	8033562 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 803355c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8033560:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8033562:	4b13      	ldr	r3, [pc, #76]	; (80335b0 <FLASH_Erase_Sector+0x8c>)
 8033564:	691b      	ldr	r3, [r3, #16]
 8033566:	4a12      	ldr	r2, [pc, #72]	; (80335b0 <FLASH_Erase_Sector+0x8c>)
 8033568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 803356c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 803356e:	4b10      	ldr	r3, [pc, #64]	; (80335b0 <FLASH_Erase_Sector+0x8c>)
 8033570:	691a      	ldr	r2, [r3, #16]
 8033572:	490f      	ldr	r1, [pc, #60]	; (80335b0 <FLASH_Erase_Sector+0x8c>)
 8033574:	68fb      	ldr	r3, [r7, #12]
 8033576:	4313      	orrs	r3, r2
 8033578:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 803357a:	4b0d      	ldr	r3, [pc, #52]	; (80335b0 <FLASH_Erase_Sector+0x8c>)
 803357c:	691b      	ldr	r3, [r3, #16]
 803357e:	4a0c      	ldr	r2, [pc, #48]	; (80335b0 <FLASH_Erase_Sector+0x8c>)
 8033580:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8033584:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8033586:	4b0a      	ldr	r3, [pc, #40]	; (80335b0 <FLASH_Erase_Sector+0x8c>)
 8033588:	691a      	ldr	r2, [r3, #16]
 803358a:	687b      	ldr	r3, [r7, #4]
 803358c:	00db      	lsls	r3, r3, #3
 803358e:	4313      	orrs	r3, r2
 8033590:	4a07      	ldr	r2, [pc, #28]	; (80335b0 <FLASH_Erase_Sector+0x8c>)
 8033592:	f043 0302 	orr.w	r3, r3, #2
 8033596:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8033598:	4b05      	ldr	r3, [pc, #20]	; (80335b0 <FLASH_Erase_Sector+0x8c>)
 803359a:	691b      	ldr	r3, [r3, #16]
 803359c:	4a04      	ldr	r2, [pc, #16]	; (80335b0 <FLASH_Erase_Sector+0x8c>)
 803359e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80335a2:	6113      	str	r3, [r2, #16]
}
 80335a4:	bf00      	nop
 80335a6:	3714      	adds	r7, #20
 80335a8:	46bd      	mov	sp, r7
 80335aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80335ae:	4770      	bx	lr
 80335b0:	40023c00 	.word	0x40023c00

080335b4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80335b4:	b480      	push	{r7}
 80335b6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80335b8:	4b20      	ldr	r3, [pc, #128]	; (803363c <FLASH_FlushCaches+0x88>)
 80335ba:	681b      	ldr	r3, [r3, #0]
 80335bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80335c0:	2b00      	cmp	r3, #0
 80335c2:	d017      	beq.n	80335f4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80335c4:	4b1d      	ldr	r3, [pc, #116]	; (803363c <FLASH_FlushCaches+0x88>)
 80335c6:	681b      	ldr	r3, [r3, #0]
 80335c8:	4a1c      	ldr	r2, [pc, #112]	; (803363c <FLASH_FlushCaches+0x88>)
 80335ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80335ce:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80335d0:	4b1a      	ldr	r3, [pc, #104]	; (803363c <FLASH_FlushCaches+0x88>)
 80335d2:	681b      	ldr	r3, [r3, #0]
 80335d4:	4a19      	ldr	r2, [pc, #100]	; (803363c <FLASH_FlushCaches+0x88>)
 80335d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80335da:	6013      	str	r3, [r2, #0]
 80335dc:	4b17      	ldr	r3, [pc, #92]	; (803363c <FLASH_FlushCaches+0x88>)
 80335de:	681b      	ldr	r3, [r3, #0]
 80335e0:	4a16      	ldr	r2, [pc, #88]	; (803363c <FLASH_FlushCaches+0x88>)
 80335e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80335e6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80335e8:	4b14      	ldr	r3, [pc, #80]	; (803363c <FLASH_FlushCaches+0x88>)
 80335ea:	681b      	ldr	r3, [r3, #0]
 80335ec:	4a13      	ldr	r2, [pc, #76]	; (803363c <FLASH_FlushCaches+0x88>)
 80335ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80335f2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80335f4:	4b11      	ldr	r3, [pc, #68]	; (803363c <FLASH_FlushCaches+0x88>)
 80335f6:	681b      	ldr	r3, [r3, #0]
 80335f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80335fc:	2b00      	cmp	r3, #0
 80335fe:	d017      	beq.n	8033630 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8033600:	4b0e      	ldr	r3, [pc, #56]	; (803363c <FLASH_FlushCaches+0x88>)
 8033602:	681b      	ldr	r3, [r3, #0]
 8033604:	4a0d      	ldr	r2, [pc, #52]	; (803363c <FLASH_FlushCaches+0x88>)
 8033606:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 803360a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 803360c:	4b0b      	ldr	r3, [pc, #44]	; (803363c <FLASH_FlushCaches+0x88>)
 803360e:	681b      	ldr	r3, [r3, #0]
 8033610:	4a0a      	ldr	r2, [pc, #40]	; (803363c <FLASH_FlushCaches+0x88>)
 8033612:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8033616:	6013      	str	r3, [r2, #0]
 8033618:	4b08      	ldr	r3, [pc, #32]	; (803363c <FLASH_FlushCaches+0x88>)
 803361a:	681b      	ldr	r3, [r3, #0]
 803361c:	4a07      	ldr	r2, [pc, #28]	; (803363c <FLASH_FlushCaches+0x88>)
 803361e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8033622:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8033624:	4b05      	ldr	r3, [pc, #20]	; (803363c <FLASH_FlushCaches+0x88>)
 8033626:	681b      	ldr	r3, [r3, #0]
 8033628:	4a04      	ldr	r2, [pc, #16]	; (803363c <FLASH_FlushCaches+0x88>)
 803362a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 803362e:	6013      	str	r3, [r2, #0]
  }
}
 8033630:	bf00      	nop
 8033632:	46bd      	mov	sp, r7
 8033634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033638:	4770      	bx	lr
 803363a:	bf00      	nop
 803363c:	40023c00 	.word	0x40023c00

08033640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8033640:	b480      	push	{r7}
 8033642:	b089      	sub	sp, #36	; 0x24
 8033644:	af00      	add	r7, sp, #0
 8033646:	6078      	str	r0, [r7, #4]
 8033648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 803364a:	2300      	movs	r3, #0
 803364c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 803364e:	2300      	movs	r3, #0
 8033650:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8033652:	2300      	movs	r3, #0
 8033654:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8033656:	2300      	movs	r3, #0
 8033658:	61fb      	str	r3, [r7, #28]
 803365a:	e16b      	b.n	8033934 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 803365c:	2201      	movs	r2, #1
 803365e:	69fb      	ldr	r3, [r7, #28]
 8033660:	fa02 f303 	lsl.w	r3, r2, r3
 8033664:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8033666:	683b      	ldr	r3, [r7, #0]
 8033668:	681b      	ldr	r3, [r3, #0]
 803366a:	697a      	ldr	r2, [r7, #20]
 803366c:	4013      	ands	r3, r2
 803366e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8033670:	693a      	ldr	r2, [r7, #16]
 8033672:	697b      	ldr	r3, [r7, #20]
 8033674:	429a      	cmp	r2, r3
 8033676:	f040 815a 	bne.w	803392e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 803367a:	683b      	ldr	r3, [r7, #0]
 803367c:	685b      	ldr	r3, [r3, #4]
 803367e:	f003 0303 	and.w	r3, r3, #3
 8033682:	2b01      	cmp	r3, #1
 8033684:	d005      	beq.n	8033692 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8033686:	683b      	ldr	r3, [r7, #0]
 8033688:	685b      	ldr	r3, [r3, #4]
 803368a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 803368e:	2b02      	cmp	r3, #2
 8033690:	d130      	bne.n	80336f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8033692:	687b      	ldr	r3, [r7, #4]
 8033694:	689b      	ldr	r3, [r3, #8]
 8033696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8033698:	69fb      	ldr	r3, [r7, #28]
 803369a:	005b      	lsls	r3, r3, #1
 803369c:	2203      	movs	r2, #3
 803369e:	fa02 f303 	lsl.w	r3, r2, r3
 80336a2:	43db      	mvns	r3, r3
 80336a4:	69ba      	ldr	r2, [r7, #24]
 80336a6:	4013      	ands	r3, r2
 80336a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80336aa:	683b      	ldr	r3, [r7, #0]
 80336ac:	68da      	ldr	r2, [r3, #12]
 80336ae:	69fb      	ldr	r3, [r7, #28]
 80336b0:	005b      	lsls	r3, r3, #1
 80336b2:	fa02 f303 	lsl.w	r3, r2, r3
 80336b6:	69ba      	ldr	r2, [r7, #24]
 80336b8:	4313      	orrs	r3, r2
 80336ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80336bc:	687b      	ldr	r3, [r7, #4]
 80336be:	69ba      	ldr	r2, [r7, #24]
 80336c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80336c2:	687b      	ldr	r3, [r7, #4]
 80336c4:	685b      	ldr	r3, [r3, #4]
 80336c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80336c8:	2201      	movs	r2, #1
 80336ca:	69fb      	ldr	r3, [r7, #28]
 80336cc:	fa02 f303 	lsl.w	r3, r2, r3
 80336d0:	43db      	mvns	r3, r3
 80336d2:	69ba      	ldr	r2, [r7, #24]
 80336d4:	4013      	ands	r3, r2
 80336d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80336d8:	683b      	ldr	r3, [r7, #0]
 80336da:	685b      	ldr	r3, [r3, #4]
 80336dc:	091b      	lsrs	r3, r3, #4
 80336de:	f003 0201 	and.w	r2, r3, #1
 80336e2:	69fb      	ldr	r3, [r7, #28]
 80336e4:	fa02 f303 	lsl.w	r3, r2, r3
 80336e8:	69ba      	ldr	r2, [r7, #24]
 80336ea:	4313      	orrs	r3, r2
 80336ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80336ee:	687b      	ldr	r3, [r7, #4]
 80336f0:	69ba      	ldr	r2, [r7, #24]
 80336f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80336f4:	683b      	ldr	r3, [r7, #0]
 80336f6:	685b      	ldr	r3, [r3, #4]
 80336f8:	f003 0303 	and.w	r3, r3, #3
 80336fc:	2b03      	cmp	r3, #3
 80336fe:	d017      	beq.n	8033730 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8033700:	687b      	ldr	r3, [r7, #4]
 8033702:	68db      	ldr	r3, [r3, #12]
 8033704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8033706:	69fb      	ldr	r3, [r7, #28]
 8033708:	005b      	lsls	r3, r3, #1
 803370a:	2203      	movs	r2, #3
 803370c:	fa02 f303 	lsl.w	r3, r2, r3
 8033710:	43db      	mvns	r3, r3
 8033712:	69ba      	ldr	r2, [r7, #24]
 8033714:	4013      	ands	r3, r2
 8033716:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8033718:	683b      	ldr	r3, [r7, #0]
 803371a:	689a      	ldr	r2, [r3, #8]
 803371c:	69fb      	ldr	r3, [r7, #28]
 803371e:	005b      	lsls	r3, r3, #1
 8033720:	fa02 f303 	lsl.w	r3, r2, r3
 8033724:	69ba      	ldr	r2, [r7, #24]
 8033726:	4313      	orrs	r3, r2
 8033728:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 803372a:	687b      	ldr	r3, [r7, #4]
 803372c:	69ba      	ldr	r2, [r7, #24]
 803372e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8033730:	683b      	ldr	r3, [r7, #0]
 8033732:	685b      	ldr	r3, [r3, #4]
 8033734:	f003 0303 	and.w	r3, r3, #3
 8033738:	2b02      	cmp	r3, #2
 803373a:	d123      	bne.n	8033784 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 803373c:	69fb      	ldr	r3, [r7, #28]
 803373e:	08da      	lsrs	r2, r3, #3
 8033740:	687b      	ldr	r3, [r7, #4]
 8033742:	3208      	adds	r2, #8
 8033744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8033748:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 803374a:	69fb      	ldr	r3, [r7, #28]
 803374c:	f003 0307 	and.w	r3, r3, #7
 8033750:	009b      	lsls	r3, r3, #2
 8033752:	220f      	movs	r2, #15
 8033754:	fa02 f303 	lsl.w	r3, r2, r3
 8033758:	43db      	mvns	r3, r3
 803375a:	69ba      	ldr	r2, [r7, #24]
 803375c:	4013      	ands	r3, r2
 803375e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8033760:	683b      	ldr	r3, [r7, #0]
 8033762:	691a      	ldr	r2, [r3, #16]
 8033764:	69fb      	ldr	r3, [r7, #28]
 8033766:	f003 0307 	and.w	r3, r3, #7
 803376a:	009b      	lsls	r3, r3, #2
 803376c:	fa02 f303 	lsl.w	r3, r2, r3
 8033770:	69ba      	ldr	r2, [r7, #24]
 8033772:	4313      	orrs	r3, r2
 8033774:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8033776:	69fb      	ldr	r3, [r7, #28]
 8033778:	08da      	lsrs	r2, r3, #3
 803377a:	687b      	ldr	r3, [r7, #4]
 803377c:	3208      	adds	r2, #8
 803377e:	69b9      	ldr	r1, [r7, #24]
 8033780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8033784:	687b      	ldr	r3, [r7, #4]
 8033786:	681b      	ldr	r3, [r3, #0]
 8033788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 803378a:	69fb      	ldr	r3, [r7, #28]
 803378c:	005b      	lsls	r3, r3, #1
 803378e:	2203      	movs	r2, #3
 8033790:	fa02 f303 	lsl.w	r3, r2, r3
 8033794:	43db      	mvns	r3, r3
 8033796:	69ba      	ldr	r2, [r7, #24]
 8033798:	4013      	ands	r3, r2
 803379a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 803379c:	683b      	ldr	r3, [r7, #0]
 803379e:	685b      	ldr	r3, [r3, #4]
 80337a0:	f003 0203 	and.w	r2, r3, #3
 80337a4:	69fb      	ldr	r3, [r7, #28]
 80337a6:	005b      	lsls	r3, r3, #1
 80337a8:	fa02 f303 	lsl.w	r3, r2, r3
 80337ac:	69ba      	ldr	r2, [r7, #24]
 80337ae:	4313      	orrs	r3, r2
 80337b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80337b2:	687b      	ldr	r3, [r7, #4]
 80337b4:	69ba      	ldr	r2, [r7, #24]
 80337b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80337b8:	683b      	ldr	r3, [r7, #0]
 80337ba:	685b      	ldr	r3, [r3, #4]
 80337bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80337c0:	2b00      	cmp	r3, #0
 80337c2:	f000 80b4 	beq.w	803392e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80337c6:	2300      	movs	r3, #0
 80337c8:	60fb      	str	r3, [r7, #12]
 80337ca:	4b60      	ldr	r3, [pc, #384]	; (803394c <HAL_GPIO_Init+0x30c>)
 80337cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80337ce:	4a5f      	ldr	r2, [pc, #380]	; (803394c <HAL_GPIO_Init+0x30c>)
 80337d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80337d4:	6453      	str	r3, [r2, #68]	; 0x44
 80337d6:	4b5d      	ldr	r3, [pc, #372]	; (803394c <HAL_GPIO_Init+0x30c>)
 80337d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80337da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80337de:	60fb      	str	r3, [r7, #12]
 80337e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80337e2:	4a5b      	ldr	r2, [pc, #364]	; (8033950 <HAL_GPIO_Init+0x310>)
 80337e4:	69fb      	ldr	r3, [r7, #28]
 80337e6:	089b      	lsrs	r3, r3, #2
 80337e8:	3302      	adds	r3, #2
 80337ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80337ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80337f0:	69fb      	ldr	r3, [r7, #28]
 80337f2:	f003 0303 	and.w	r3, r3, #3
 80337f6:	009b      	lsls	r3, r3, #2
 80337f8:	220f      	movs	r2, #15
 80337fa:	fa02 f303 	lsl.w	r3, r2, r3
 80337fe:	43db      	mvns	r3, r3
 8033800:	69ba      	ldr	r2, [r7, #24]
 8033802:	4013      	ands	r3, r2
 8033804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8033806:	687b      	ldr	r3, [r7, #4]
 8033808:	4a52      	ldr	r2, [pc, #328]	; (8033954 <HAL_GPIO_Init+0x314>)
 803380a:	4293      	cmp	r3, r2
 803380c:	d02b      	beq.n	8033866 <HAL_GPIO_Init+0x226>
 803380e:	687b      	ldr	r3, [r7, #4]
 8033810:	4a51      	ldr	r2, [pc, #324]	; (8033958 <HAL_GPIO_Init+0x318>)
 8033812:	4293      	cmp	r3, r2
 8033814:	d025      	beq.n	8033862 <HAL_GPIO_Init+0x222>
 8033816:	687b      	ldr	r3, [r7, #4]
 8033818:	4a50      	ldr	r2, [pc, #320]	; (803395c <HAL_GPIO_Init+0x31c>)
 803381a:	4293      	cmp	r3, r2
 803381c:	d01f      	beq.n	803385e <HAL_GPIO_Init+0x21e>
 803381e:	687b      	ldr	r3, [r7, #4]
 8033820:	4a4f      	ldr	r2, [pc, #316]	; (8033960 <HAL_GPIO_Init+0x320>)
 8033822:	4293      	cmp	r3, r2
 8033824:	d019      	beq.n	803385a <HAL_GPIO_Init+0x21a>
 8033826:	687b      	ldr	r3, [r7, #4]
 8033828:	4a4e      	ldr	r2, [pc, #312]	; (8033964 <HAL_GPIO_Init+0x324>)
 803382a:	4293      	cmp	r3, r2
 803382c:	d013      	beq.n	8033856 <HAL_GPIO_Init+0x216>
 803382e:	687b      	ldr	r3, [r7, #4]
 8033830:	4a4d      	ldr	r2, [pc, #308]	; (8033968 <HAL_GPIO_Init+0x328>)
 8033832:	4293      	cmp	r3, r2
 8033834:	d00d      	beq.n	8033852 <HAL_GPIO_Init+0x212>
 8033836:	687b      	ldr	r3, [r7, #4]
 8033838:	4a4c      	ldr	r2, [pc, #304]	; (803396c <HAL_GPIO_Init+0x32c>)
 803383a:	4293      	cmp	r3, r2
 803383c:	d007      	beq.n	803384e <HAL_GPIO_Init+0x20e>
 803383e:	687b      	ldr	r3, [r7, #4]
 8033840:	4a4b      	ldr	r2, [pc, #300]	; (8033970 <HAL_GPIO_Init+0x330>)
 8033842:	4293      	cmp	r3, r2
 8033844:	d101      	bne.n	803384a <HAL_GPIO_Init+0x20a>
 8033846:	2307      	movs	r3, #7
 8033848:	e00e      	b.n	8033868 <HAL_GPIO_Init+0x228>
 803384a:	2308      	movs	r3, #8
 803384c:	e00c      	b.n	8033868 <HAL_GPIO_Init+0x228>
 803384e:	2306      	movs	r3, #6
 8033850:	e00a      	b.n	8033868 <HAL_GPIO_Init+0x228>
 8033852:	2305      	movs	r3, #5
 8033854:	e008      	b.n	8033868 <HAL_GPIO_Init+0x228>
 8033856:	2304      	movs	r3, #4
 8033858:	e006      	b.n	8033868 <HAL_GPIO_Init+0x228>
 803385a:	2303      	movs	r3, #3
 803385c:	e004      	b.n	8033868 <HAL_GPIO_Init+0x228>
 803385e:	2302      	movs	r3, #2
 8033860:	e002      	b.n	8033868 <HAL_GPIO_Init+0x228>
 8033862:	2301      	movs	r3, #1
 8033864:	e000      	b.n	8033868 <HAL_GPIO_Init+0x228>
 8033866:	2300      	movs	r3, #0
 8033868:	69fa      	ldr	r2, [r7, #28]
 803386a:	f002 0203 	and.w	r2, r2, #3
 803386e:	0092      	lsls	r2, r2, #2
 8033870:	4093      	lsls	r3, r2
 8033872:	69ba      	ldr	r2, [r7, #24]
 8033874:	4313      	orrs	r3, r2
 8033876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8033878:	4935      	ldr	r1, [pc, #212]	; (8033950 <HAL_GPIO_Init+0x310>)
 803387a:	69fb      	ldr	r3, [r7, #28]
 803387c:	089b      	lsrs	r3, r3, #2
 803387e:	3302      	adds	r3, #2
 8033880:	69ba      	ldr	r2, [r7, #24]
 8033882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8033886:	4b3b      	ldr	r3, [pc, #236]	; (8033974 <HAL_GPIO_Init+0x334>)
 8033888:	681b      	ldr	r3, [r3, #0]
 803388a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 803388c:	693b      	ldr	r3, [r7, #16]
 803388e:	43db      	mvns	r3, r3
 8033890:	69ba      	ldr	r2, [r7, #24]
 8033892:	4013      	ands	r3, r2
 8033894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8033896:	683b      	ldr	r3, [r7, #0]
 8033898:	685b      	ldr	r3, [r3, #4]
 803389a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 803389e:	2b00      	cmp	r3, #0
 80338a0:	d003      	beq.n	80338aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80338a2:	69ba      	ldr	r2, [r7, #24]
 80338a4:	693b      	ldr	r3, [r7, #16]
 80338a6:	4313      	orrs	r3, r2
 80338a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80338aa:	4a32      	ldr	r2, [pc, #200]	; (8033974 <HAL_GPIO_Init+0x334>)
 80338ac:	69bb      	ldr	r3, [r7, #24]
 80338ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80338b0:	4b30      	ldr	r3, [pc, #192]	; (8033974 <HAL_GPIO_Init+0x334>)
 80338b2:	685b      	ldr	r3, [r3, #4]
 80338b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80338b6:	693b      	ldr	r3, [r7, #16]
 80338b8:	43db      	mvns	r3, r3
 80338ba:	69ba      	ldr	r2, [r7, #24]
 80338bc:	4013      	ands	r3, r2
 80338be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80338c0:	683b      	ldr	r3, [r7, #0]
 80338c2:	685b      	ldr	r3, [r3, #4]
 80338c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80338c8:	2b00      	cmp	r3, #0
 80338ca:	d003      	beq.n	80338d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80338cc:	69ba      	ldr	r2, [r7, #24]
 80338ce:	693b      	ldr	r3, [r7, #16]
 80338d0:	4313      	orrs	r3, r2
 80338d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80338d4:	4a27      	ldr	r2, [pc, #156]	; (8033974 <HAL_GPIO_Init+0x334>)
 80338d6:	69bb      	ldr	r3, [r7, #24]
 80338d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80338da:	4b26      	ldr	r3, [pc, #152]	; (8033974 <HAL_GPIO_Init+0x334>)
 80338dc:	689b      	ldr	r3, [r3, #8]
 80338de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80338e0:	693b      	ldr	r3, [r7, #16]
 80338e2:	43db      	mvns	r3, r3
 80338e4:	69ba      	ldr	r2, [r7, #24]
 80338e6:	4013      	ands	r3, r2
 80338e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80338ea:	683b      	ldr	r3, [r7, #0]
 80338ec:	685b      	ldr	r3, [r3, #4]
 80338ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80338f2:	2b00      	cmp	r3, #0
 80338f4:	d003      	beq.n	80338fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80338f6:	69ba      	ldr	r2, [r7, #24]
 80338f8:	693b      	ldr	r3, [r7, #16]
 80338fa:	4313      	orrs	r3, r2
 80338fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80338fe:	4a1d      	ldr	r2, [pc, #116]	; (8033974 <HAL_GPIO_Init+0x334>)
 8033900:	69bb      	ldr	r3, [r7, #24]
 8033902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8033904:	4b1b      	ldr	r3, [pc, #108]	; (8033974 <HAL_GPIO_Init+0x334>)
 8033906:	68db      	ldr	r3, [r3, #12]
 8033908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 803390a:	693b      	ldr	r3, [r7, #16]
 803390c:	43db      	mvns	r3, r3
 803390e:	69ba      	ldr	r2, [r7, #24]
 8033910:	4013      	ands	r3, r2
 8033912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8033914:	683b      	ldr	r3, [r7, #0]
 8033916:	685b      	ldr	r3, [r3, #4]
 8033918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 803391c:	2b00      	cmp	r3, #0
 803391e:	d003      	beq.n	8033928 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8033920:	69ba      	ldr	r2, [r7, #24]
 8033922:	693b      	ldr	r3, [r7, #16]
 8033924:	4313      	orrs	r3, r2
 8033926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8033928:	4a12      	ldr	r2, [pc, #72]	; (8033974 <HAL_GPIO_Init+0x334>)
 803392a:	69bb      	ldr	r3, [r7, #24]
 803392c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 803392e:	69fb      	ldr	r3, [r7, #28]
 8033930:	3301      	adds	r3, #1
 8033932:	61fb      	str	r3, [r7, #28]
 8033934:	69fb      	ldr	r3, [r7, #28]
 8033936:	2b0f      	cmp	r3, #15
 8033938:	f67f ae90 	bls.w	803365c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 803393c:	bf00      	nop
 803393e:	bf00      	nop
 8033940:	3724      	adds	r7, #36	; 0x24
 8033942:	46bd      	mov	sp, r7
 8033944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8033948:	4770      	bx	lr
 803394a:	bf00      	nop
 803394c:	40023800 	.word	0x40023800
 8033950:	40013800 	.word	0x40013800
 8033954:	40020000 	.word	0x40020000
 8033958:	40020400 	.word	0x40020400
 803395c:	40020800 	.word	0x40020800
 8033960:	40020c00 	.word	0x40020c00
 8033964:	40021000 	.word	0x40021000
 8033968:	40021400 	.word	0x40021400
 803396c:	40021800 	.word	0x40021800
 8033970:	40021c00 	.word	0x40021c00
 8033974:	40013c00 	.word	0x40013c00

08033978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8033978:	b480      	push	{r7}
 803397a:	b083      	sub	sp, #12
 803397c:	af00      	add	r7, sp, #0
 803397e:	6078      	str	r0, [r7, #4]
 8033980:	460b      	mov	r3, r1
 8033982:	807b      	strh	r3, [r7, #2]
 8033984:	4613      	mov	r3, r2
 8033986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8033988:	787b      	ldrb	r3, [r7, #1]
 803398a:	2b00      	cmp	r3, #0
 803398c:	d003      	beq.n	8033996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 803398e:	887a      	ldrh	r2, [r7, #2]
 8033990:	687b      	ldr	r3, [r7, #4]
 8033992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8033994:	e003      	b.n	803399e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8033996:	887b      	ldrh	r3, [r7, #2]
 8033998:	041a      	lsls	r2, r3, #16
 803399a:	687b      	ldr	r3, [r7, #4]
 803399c:	619a      	str	r2, [r3, #24]
}
 803399e:	bf00      	nop
 80339a0:	370c      	adds	r7, #12
 80339a2:	46bd      	mov	sp, r7
 80339a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80339a8:	4770      	bx	lr
	...

080339ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80339ac:	b580      	push	{r7, lr}
 80339ae:	b086      	sub	sp, #24
 80339b0:	af00      	add	r7, sp, #0
 80339b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80339b4:	687b      	ldr	r3, [r7, #4]
 80339b6:	2b00      	cmp	r3, #0
 80339b8:	d101      	bne.n	80339be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80339ba:	2301      	movs	r3, #1
 80339bc:	e264      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80339be:	687b      	ldr	r3, [r7, #4]
 80339c0:	681b      	ldr	r3, [r3, #0]
 80339c2:	f003 0301 	and.w	r3, r3, #1
 80339c6:	2b00      	cmp	r3, #0
 80339c8:	d075      	beq.n	8033ab6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80339ca:	4ba3      	ldr	r3, [pc, #652]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 80339cc:	689b      	ldr	r3, [r3, #8]
 80339ce:	f003 030c 	and.w	r3, r3, #12
 80339d2:	2b04      	cmp	r3, #4
 80339d4:	d00c      	beq.n	80339f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80339d6:	4ba0      	ldr	r3, [pc, #640]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 80339d8:	689b      	ldr	r3, [r3, #8]
 80339da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80339de:	2b08      	cmp	r3, #8
 80339e0:	d112      	bne.n	8033a08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80339e2:	4b9d      	ldr	r3, [pc, #628]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 80339e4:	685b      	ldr	r3, [r3, #4]
 80339e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80339ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80339ee:	d10b      	bne.n	8033a08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80339f0:	4b99      	ldr	r3, [pc, #612]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 80339f2:	681b      	ldr	r3, [r3, #0]
 80339f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80339f8:	2b00      	cmp	r3, #0
 80339fa:	d05b      	beq.n	8033ab4 <HAL_RCC_OscConfig+0x108>
 80339fc:	687b      	ldr	r3, [r7, #4]
 80339fe:	685b      	ldr	r3, [r3, #4]
 8033a00:	2b00      	cmp	r3, #0
 8033a02:	d157      	bne.n	8033ab4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8033a04:	2301      	movs	r3, #1
 8033a06:	e23f      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8033a08:	687b      	ldr	r3, [r7, #4]
 8033a0a:	685b      	ldr	r3, [r3, #4]
 8033a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8033a10:	d106      	bne.n	8033a20 <HAL_RCC_OscConfig+0x74>
 8033a12:	4b91      	ldr	r3, [pc, #580]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033a14:	681b      	ldr	r3, [r3, #0]
 8033a16:	4a90      	ldr	r2, [pc, #576]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8033a1c:	6013      	str	r3, [r2, #0]
 8033a1e:	e01d      	b.n	8033a5c <HAL_RCC_OscConfig+0xb0>
 8033a20:	687b      	ldr	r3, [r7, #4]
 8033a22:	685b      	ldr	r3, [r3, #4]
 8033a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8033a28:	d10c      	bne.n	8033a44 <HAL_RCC_OscConfig+0x98>
 8033a2a:	4b8b      	ldr	r3, [pc, #556]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033a2c:	681b      	ldr	r3, [r3, #0]
 8033a2e:	4a8a      	ldr	r2, [pc, #552]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8033a34:	6013      	str	r3, [r2, #0]
 8033a36:	4b88      	ldr	r3, [pc, #544]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033a38:	681b      	ldr	r3, [r3, #0]
 8033a3a:	4a87      	ldr	r2, [pc, #540]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8033a40:	6013      	str	r3, [r2, #0]
 8033a42:	e00b      	b.n	8033a5c <HAL_RCC_OscConfig+0xb0>
 8033a44:	4b84      	ldr	r3, [pc, #528]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033a46:	681b      	ldr	r3, [r3, #0]
 8033a48:	4a83      	ldr	r2, [pc, #524]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8033a4e:	6013      	str	r3, [r2, #0]
 8033a50:	4b81      	ldr	r3, [pc, #516]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033a52:	681b      	ldr	r3, [r3, #0]
 8033a54:	4a80      	ldr	r2, [pc, #512]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8033a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8033a5c:	687b      	ldr	r3, [r7, #4]
 8033a5e:	685b      	ldr	r3, [r3, #4]
 8033a60:	2b00      	cmp	r3, #0
 8033a62:	d013      	beq.n	8033a8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8033a64:	f7ff f940 	bl	8032ce8 <HAL_GetTick>
 8033a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8033a6a:	e008      	b.n	8033a7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8033a6c:	f7ff f93c 	bl	8032ce8 <HAL_GetTick>
 8033a70:	4602      	mov	r2, r0
 8033a72:	693b      	ldr	r3, [r7, #16]
 8033a74:	1ad3      	subs	r3, r2, r3
 8033a76:	2b64      	cmp	r3, #100	; 0x64
 8033a78:	d901      	bls.n	8033a7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8033a7a:	2303      	movs	r3, #3
 8033a7c:	e204      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8033a7e:	4b76      	ldr	r3, [pc, #472]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033a80:	681b      	ldr	r3, [r3, #0]
 8033a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8033a86:	2b00      	cmp	r3, #0
 8033a88:	d0f0      	beq.n	8033a6c <HAL_RCC_OscConfig+0xc0>
 8033a8a:	e014      	b.n	8033ab6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8033a8c:	f7ff f92c 	bl	8032ce8 <HAL_GetTick>
 8033a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8033a92:	e008      	b.n	8033aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8033a94:	f7ff f928 	bl	8032ce8 <HAL_GetTick>
 8033a98:	4602      	mov	r2, r0
 8033a9a:	693b      	ldr	r3, [r7, #16]
 8033a9c:	1ad3      	subs	r3, r2, r3
 8033a9e:	2b64      	cmp	r3, #100	; 0x64
 8033aa0:	d901      	bls.n	8033aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8033aa2:	2303      	movs	r3, #3
 8033aa4:	e1f0      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8033aa6:	4b6c      	ldr	r3, [pc, #432]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033aa8:	681b      	ldr	r3, [r3, #0]
 8033aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8033aae:	2b00      	cmp	r3, #0
 8033ab0:	d1f0      	bne.n	8033a94 <HAL_RCC_OscConfig+0xe8>
 8033ab2:	e000      	b.n	8033ab6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8033ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8033ab6:	687b      	ldr	r3, [r7, #4]
 8033ab8:	681b      	ldr	r3, [r3, #0]
 8033aba:	f003 0302 	and.w	r3, r3, #2
 8033abe:	2b00      	cmp	r3, #0
 8033ac0:	d063      	beq.n	8033b8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8033ac2:	4b65      	ldr	r3, [pc, #404]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033ac4:	689b      	ldr	r3, [r3, #8]
 8033ac6:	f003 030c 	and.w	r3, r3, #12
 8033aca:	2b00      	cmp	r3, #0
 8033acc:	d00b      	beq.n	8033ae6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8033ace:	4b62      	ldr	r3, [pc, #392]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033ad0:	689b      	ldr	r3, [r3, #8]
 8033ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8033ad6:	2b08      	cmp	r3, #8
 8033ad8:	d11c      	bne.n	8033b14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8033ada:	4b5f      	ldr	r3, [pc, #380]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033adc:	685b      	ldr	r3, [r3, #4]
 8033ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8033ae2:	2b00      	cmp	r3, #0
 8033ae4:	d116      	bne.n	8033b14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8033ae6:	4b5c      	ldr	r3, [pc, #368]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033ae8:	681b      	ldr	r3, [r3, #0]
 8033aea:	f003 0302 	and.w	r3, r3, #2
 8033aee:	2b00      	cmp	r3, #0
 8033af0:	d005      	beq.n	8033afe <HAL_RCC_OscConfig+0x152>
 8033af2:	687b      	ldr	r3, [r7, #4]
 8033af4:	68db      	ldr	r3, [r3, #12]
 8033af6:	2b01      	cmp	r3, #1
 8033af8:	d001      	beq.n	8033afe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8033afa:	2301      	movs	r3, #1
 8033afc:	e1c4      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8033afe:	4b56      	ldr	r3, [pc, #344]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033b00:	681b      	ldr	r3, [r3, #0]
 8033b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8033b06:	687b      	ldr	r3, [r7, #4]
 8033b08:	691b      	ldr	r3, [r3, #16]
 8033b0a:	00db      	lsls	r3, r3, #3
 8033b0c:	4952      	ldr	r1, [pc, #328]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033b0e:	4313      	orrs	r3, r2
 8033b10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8033b12:	e03a      	b.n	8033b8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8033b14:	687b      	ldr	r3, [r7, #4]
 8033b16:	68db      	ldr	r3, [r3, #12]
 8033b18:	2b00      	cmp	r3, #0
 8033b1a:	d020      	beq.n	8033b5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8033b1c:	4b4f      	ldr	r3, [pc, #316]	; (8033c5c <HAL_RCC_OscConfig+0x2b0>)
 8033b1e:	2201      	movs	r2, #1
 8033b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8033b22:	f7ff f8e1 	bl	8032ce8 <HAL_GetTick>
 8033b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8033b28:	e008      	b.n	8033b3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8033b2a:	f7ff f8dd 	bl	8032ce8 <HAL_GetTick>
 8033b2e:	4602      	mov	r2, r0
 8033b30:	693b      	ldr	r3, [r7, #16]
 8033b32:	1ad3      	subs	r3, r2, r3
 8033b34:	2b02      	cmp	r3, #2
 8033b36:	d901      	bls.n	8033b3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8033b38:	2303      	movs	r3, #3
 8033b3a:	e1a5      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8033b3c:	4b46      	ldr	r3, [pc, #280]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033b3e:	681b      	ldr	r3, [r3, #0]
 8033b40:	f003 0302 	and.w	r3, r3, #2
 8033b44:	2b00      	cmp	r3, #0
 8033b46:	d0f0      	beq.n	8033b2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8033b48:	4b43      	ldr	r3, [pc, #268]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033b4a:	681b      	ldr	r3, [r3, #0]
 8033b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8033b50:	687b      	ldr	r3, [r7, #4]
 8033b52:	691b      	ldr	r3, [r3, #16]
 8033b54:	00db      	lsls	r3, r3, #3
 8033b56:	4940      	ldr	r1, [pc, #256]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033b58:	4313      	orrs	r3, r2
 8033b5a:	600b      	str	r3, [r1, #0]
 8033b5c:	e015      	b.n	8033b8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8033b5e:	4b3f      	ldr	r3, [pc, #252]	; (8033c5c <HAL_RCC_OscConfig+0x2b0>)
 8033b60:	2200      	movs	r2, #0
 8033b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8033b64:	f7ff f8c0 	bl	8032ce8 <HAL_GetTick>
 8033b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8033b6a:	e008      	b.n	8033b7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8033b6c:	f7ff f8bc 	bl	8032ce8 <HAL_GetTick>
 8033b70:	4602      	mov	r2, r0
 8033b72:	693b      	ldr	r3, [r7, #16]
 8033b74:	1ad3      	subs	r3, r2, r3
 8033b76:	2b02      	cmp	r3, #2
 8033b78:	d901      	bls.n	8033b7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8033b7a:	2303      	movs	r3, #3
 8033b7c:	e184      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8033b7e:	4b36      	ldr	r3, [pc, #216]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033b80:	681b      	ldr	r3, [r3, #0]
 8033b82:	f003 0302 	and.w	r3, r3, #2
 8033b86:	2b00      	cmp	r3, #0
 8033b88:	d1f0      	bne.n	8033b6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8033b8a:	687b      	ldr	r3, [r7, #4]
 8033b8c:	681b      	ldr	r3, [r3, #0]
 8033b8e:	f003 0308 	and.w	r3, r3, #8
 8033b92:	2b00      	cmp	r3, #0
 8033b94:	d030      	beq.n	8033bf8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8033b96:	687b      	ldr	r3, [r7, #4]
 8033b98:	695b      	ldr	r3, [r3, #20]
 8033b9a:	2b00      	cmp	r3, #0
 8033b9c:	d016      	beq.n	8033bcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8033b9e:	4b30      	ldr	r3, [pc, #192]	; (8033c60 <HAL_RCC_OscConfig+0x2b4>)
 8033ba0:	2201      	movs	r2, #1
 8033ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8033ba4:	f7ff f8a0 	bl	8032ce8 <HAL_GetTick>
 8033ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8033baa:	e008      	b.n	8033bbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8033bac:	f7ff f89c 	bl	8032ce8 <HAL_GetTick>
 8033bb0:	4602      	mov	r2, r0
 8033bb2:	693b      	ldr	r3, [r7, #16]
 8033bb4:	1ad3      	subs	r3, r2, r3
 8033bb6:	2b02      	cmp	r3, #2
 8033bb8:	d901      	bls.n	8033bbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8033bba:	2303      	movs	r3, #3
 8033bbc:	e164      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8033bbe:	4b26      	ldr	r3, [pc, #152]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033bc2:	f003 0302 	and.w	r3, r3, #2
 8033bc6:	2b00      	cmp	r3, #0
 8033bc8:	d0f0      	beq.n	8033bac <HAL_RCC_OscConfig+0x200>
 8033bca:	e015      	b.n	8033bf8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8033bcc:	4b24      	ldr	r3, [pc, #144]	; (8033c60 <HAL_RCC_OscConfig+0x2b4>)
 8033bce:	2200      	movs	r2, #0
 8033bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8033bd2:	f7ff f889 	bl	8032ce8 <HAL_GetTick>
 8033bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8033bd8:	e008      	b.n	8033bec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8033bda:	f7ff f885 	bl	8032ce8 <HAL_GetTick>
 8033bde:	4602      	mov	r2, r0
 8033be0:	693b      	ldr	r3, [r7, #16]
 8033be2:	1ad3      	subs	r3, r2, r3
 8033be4:	2b02      	cmp	r3, #2
 8033be6:	d901      	bls.n	8033bec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8033be8:	2303      	movs	r3, #3
 8033bea:	e14d      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8033bec:	4b1a      	ldr	r3, [pc, #104]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033bf0:	f003 0302 	and.w	r3, r3, #2
 8033bf4:	2b00      	cmp	r3, #0
 8033bf6:	d1f0      	bne.n	8033bda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8033bf8:	687b      	ldr	r3, [r7, #4]
 8033bfa:	681b      	ldr	r3, [r3, #0]
 8033bfc:	f003 0304 	and.w	r3, r3, #4
 8033c00:	2b00      	cmp	r3, #0
 8033c02:	f000 80a0 	beq.w	8033d46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8033c06:	2300      	movs	r3, #0
 8033c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8033c0a:	4b13      	ldr	r3, [pc, #76]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8033c12:	2b00      	cmp	r3, #0
 8033c14:	d10f      	bne.n	8033c36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8033c16:	2300      	movs	r3, #0
 8033c18:	60bb      	str	r3, [r7, #8]
 8033c1a:	4b0f      	ldr	r3, [pc, #60]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033c1e:	4a0e      	ldr	r2, [pc, #56]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8033c24:	6413      	str	r3, [r2, #64]	; 0x40
 8033c26:	4b0c      	ldr	r3, [pc, #48]	; (8033c58 <HAL_RCC_OscConfig+0x2ac>)
 8033c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8033c2e:	60bb      	str	r3, [r7, #8]
 8033c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8033c32:	2301      	movs	r3, #1
 8033c34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8033c36:	4b0b      	ldr	r3, [pc, #44]	; (8033c64 <HAL_RCC_OscConfig+0x2b8>)
 8033c38:	681b      	ldr	r3, [r3, #0]
 8033c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8033c3e:	2b00      	cmp	r3, #0
 8033c40:	d121      	bne.n	8033c86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8033c42:	4b08      	ldr	r3, [pc, #32]	; (8033c64 <HAL_RCC_OscConfig+0x2b8>)
 8033c44:	681b      	ldr	r3, [r3, #0]
 8033c46:	4a07      	ldr	r2, [pc, #28]	; (8033c64 <HAL_RCC_OscConfig+0x2b8>)
 8033c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8033c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8033c4e:	f7ff f84b 	bl	8032ce8 <HAL_GetTick>
 8033c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8033c54:	e011      	b.n	8033c7a <HAL_RCC_OscConfig+0x2ce>
 8033c56:	bf00      	nop
 8033c58:	40023800 	.word	0x40023800
 8033c5c:	42470000 	.word	0x42470000
 8033c60:	42470e80 	.word	0x42470e80
 8033c64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8033c68:	f7ff f83e 	bl	8032ce8 <HAL_GetTick>
 8033c6c:	4602      	mov	r2, r0
 8033c6e:	693b      	ldr	r3, [r7, #16]
 8033c70:	1ad3      	subs	r3, r2, r3
 8033c72:	2b02      	cmp	r3, #2
 8033c74:	d901      	bls.n	8033c7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8033c76:	2303      	movs	r3, #3
 8033c78:	e106      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8033c7a:	4b85      	ldr	r3, [pc, #532]	; (8033e90 <HAL_RCC_OscConfig+0x4e4>)
 8033c7c:	681b      	ldr	r3, [r3, #0]
 8033c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8033c82:	2b00      	cmp	r3, #0
 8033c84:	d0f0      	beq.n	8033c68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8033c86:	687b      	ldr	r3, [r7, #4]
 8033c88:	689b      	ldr	r3, [r3, #8]
 8033c8a:	2b01      	cmp	r3, #1
 8033c8c:	d106      	bne.n	8033c9c <HAL_RCC_OscConfig+0x2f0>
 8033c8e:	4b81      	ldr	r3, [pc, #516]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033c92:	4a80      	ldr	r2, [pc, #512]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033c94:	f043 0301 	orr.w	r3, r3, #1
 8033c98:	6713      	str	r3, [r2, #112]	; 0x70
 8033c9a:	e01c      	b.n	8033cd6 <HAL_RCC_OscConfig+0x32a>
 8033c9c:	687b      	ldr	r3, [r7, #4]
 8033c9e:	689b      	ldr	r3, [r3, #8]
 8033ca0:	2b05      	cmp	r3, #5
 8033ca2:	d10c      	bne.n	8033cbe <HAL_RCC_OscConfig+0x312>
 8033ca4:	4b7b      	ldr	r3, [pc, #492]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033ca8:	4a7a      	ldr	r2, [pc, #488]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033caa:	f043 0304 	orr.w	r3, r3, #4
 8033cae:	6713      	str	r3, [r2, #112]	; 0x70
 8033cb0:	4b78      	ldr	r3, [pc, #480]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033cb4:	4a77      	ldr	r2, [pc, #476]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033cb6:	f043 0301 	orr.w	r3, r3, #1
 8033cba:	6713      	str	r3, [r2, #112]	; 0x70
 8033cbc:	e00b      	b.n	8033cd6 <HAL_RCC_OscConfig+0x32a>
 8033cbe:	4b75      	ldr	r3, [pc, #468]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033cc2:	4a74      	ldr	r2, [pc, #464]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033cc4:	f023 0301 	bic.w	r3, r3, #1
 8033cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8033cca:	4b72      	ldr	r3, [pc, #456]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033cce:	4a71      	ldr	r2, [pc, #452]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033cd0:	f023 0304 	bic.w	r3, r3, #4
 8033cd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8033cd6:	687b      	ldr	r3, [r7, #4]
 8033cd8:	689b      	ldr	r3, [r3, #8]
 8033cda:	2b00      	cmp	r3, #0
 8033cdc:	d015      	beq.n	8033d0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8033cde:	f7ff f803 	bl	8032ce8 <HAL_GetTick>
 8033ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8033ce4:	e00a      	b.n	8033cfc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8033ce6:	f7fe ffff 	bl	8032ce8 <HAL_GetTick>
 8033cea:	4602      	mov	r2, r0
 8033cec:	693b      	ldr	r3, [r7, #16]
 8033cee:	1ad3      	subs	r3, r2, r3
 8033cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8033cf4:	4293      	cmp	r3, r2
 8033cf6:	d901      	bls.n	8033cfc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8033cf8:	2303      	movs	r3, #3
 8033cfa:	e0c5      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8033cfc:	4b65      	ldr	r3, [pc, #404]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033d00:	f003 0302 	and.w	r3, r3, #2
 8033d04:	2b00      	cmp	r3, #0
 8033d06:	d0ee      	beq.n	8033ce6 <HAL_RCC_OscConfig+0x33a>
 8033d08:	e014      	b.n	8033d34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8033d0a:	f7fe ffed 	bl	8032ce8 <HAL_GetTick>
 8033d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8033d10:	e00a      	b.n	8033d28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8033d12:	f7fe ffe9 	bl	8032ce8 <HAL_GetTick>
 8033d16:	4602      	mov	r2, r0
 8033d18:	693b      	ldr	r3, [r7, #16]
 8033d1a:	1ad3      	subs	r3, r2, r3
 8033d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8033d20:	4293      	cmp	r3, r2
 8033d22:	d901      	bls.n	8033d28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8033d24:	2303      	movs	r3, #3
 8033d26:	e0af      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8033d28:	4b5a      	ldr	r3, [pc, #360]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033d2c:	f003 0302 	and.w	r3, r3, #2
 8033d30:	2b00      	cmp	r3, #0
 8033d32:	d1ee      	bne.n	8033d12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8033d34:	7dfb      	ldrb	r3, [r7, #23]
 8033d36:	2b01      	cmp	r3, #1
 8033d38:	d105      	bne.n	8033d46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8033d3a:	4b56      	ldr	r3, [pc, #344]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8033d3e:	4a55      	ldr	r2, [pc, #340]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8033d44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8033d46:	687b      	ldr	r3, [r7, #4]
 8033d48:	699b      	ldr	r3, [r3, #24]
 8033d4a:	2b00      	cmp	r3, #0
 8033d4c:	f000 809b 	beq.w	8033e86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8033d50:	4b50      	ldr	r3, [pc, #320]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033d52:	689b      	ldr	r3, [r3, #8]
 8033d54:	f003 030c 	and.w	r3, r3, #12
 8033d58:	2b08      	cmp	r3, #8
 8033d5a:	d05c      	beq.n	8033e16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8033d5c:	687b      	ldr	r3, [r7, #4]
 8033d5e:	699b      	ldr	r3, [r3, #24]
 8033d60:	2b02      	cmp	r3, #2
 8033d62:	d141      	bne.n	8033de8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8033d64:	4b4c      	ldr	r3, [pc, #304]	; (8033e98 <HAL_RCC_OscConfig+0x4ec>)
 8033d66:	2200      	movs	r2, #0
 8033d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8033d6a:	f7fe ffbd 	bl	8032ce8 <HAL_GetTick>
 8033d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8033d70:	e008      	b.n	8033d84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8033d72:	f7fe ffb9 	bl	8032ce8 <HAL_GetTick>
 8033d76:	4602      	mov	r2, r0
 8033d78:	693b      	ldr	r3, [r7, #16]
 8033d7a:	1ad3      	subs	r3, r2, r3
 8033d7c:	2b02      	cmp	r3, #2
 8033d7e:	d901      	bls.n	8033d84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8033d80:	2303      	movs	r3, #3
 8033d82:	e081      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8033d84:	4b43      	ldr	r3, [pc, #268]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033d86:	681b      	ldr	r3, [r3, #0]
 8033d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8033d8c:	2b00      	cmp	r3, #0
 8033d8e:	d1f0      	bne.n	8033d72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8033d90:	687b      	ldr	r3, [r7, #4]
 8033d92:	69da      	ldr	r2, [r3, #28]
 8033d94:	687b      	ldr	r3, [r7, #4]
 8033d96:	6a1b      	ldr	r3, [r3, #32]
 8033d98:	431a      	orrs	r2, r3
 8033d9a:	687b      	ldr	r3, [r7, #4]
 8033d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8033d9e:	019b      	lsls	r3, r3, #6
 8033da0:	431a      	orrs	r2, r3
 8033da2:	687b      	ldr	r3, [r7, #4]
 8033da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8033da6:	085b      	lsrs	r3, r3, #1
 8033da8:	3b01      	subs	r3, #1
 8033daa:	041b      	lsls	r3, r3, #16
 8033dac:	431a      	orrs	r2, r3
 8033dae:	687b      	ldr	r3, [r7, #4]
 8033db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033db2:	061b      	lsls	r3, r3, #24
 8033db4:	4937      	ldr	r1, [pc, #220]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033db6:	4313      	orrs	r3, r2
 8033db8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8033dba:	4b37      	ldr	r3, [pc, #220]	; (8033e98 <HAL_RCC_OscConfig+0x4ec>)
 8033dbc:	2201      	movs	r2, #1
 8033dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8033dc0:	f7fe ff92 	bl	8032ce8 <HAL_GetTick>
 8033dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8033dc6:	e008      	b.n	8033dda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8033dc8:	f7fe ff8e 	bl	8032ce8 <HAL_GetTick>
 8033dcc:	4602      	mov	r2, r0
 8033dce:	693b      	ldr	r3, [r7, #16]
 8033dd0:	1ad3      	subs	r3, r2, r3
 8033dd2:	2b02      	cmp	r3, #2
 8033dd4:	d901      	bls.n	8033dda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8033dd6:	2303      	movs	r3, #3
 8033dd8:	e056      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8033dda:	4b2e      	ldr	r3, [pc, #184]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033ddc:	681b      	ldr	r3, [r3, #0]
 8033dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8033de2:	2b00      	cmp	r3, #0
 8033de4:	d0f0      	beq.n	8033dc8 <HAL_RCC_OscConfig+0x41c>
 8033de6:	e04e      	b.n	8033e86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8033de8:	4b2b      	ldr	r3, [pc, #172]	; (8033e98 <HAL_RCC_OscConfig+0x4ec>)
 8033dea:	2200      	movs	r2, #0
 8033dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8033dee:	f7fe ff7b 	bl	8032ce8 <HAL_GetTick>
 8033df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8033df4:	e008      	b.n	8033e08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8033df6:	f7fe ff77 	bl	8032ce8 <HAL_GetTick>
 8033dfa:	4602      	mov	r2, r0
 8033dfc:	693b      	ldr	r3, [r7, #16]
 8033dfe:	1ad3      	subs	r3, r2, r3
 8033e00:	2b02      	cmp	r3, #2
 8033e02:	d901      	bls.n	8033e08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8033e04:	2303      	movs	r3, #3
 8033e06:	e03f      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8033e08:	4b22      	ldr	r3, [pc, #136]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033e0a:	681b      	ldr	r3, [r3, #0]
 8033e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8033e10:	2b00      	cmp	r3, #0
 8033e12:	d1f0      	bne.n	8033df6 <HAL_RCC_OscConfig+0x44a>
 8033e14:	e037      	b.n	8033e86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8033e16:	687b      	ldr	r3, [r7, #4]
 8033e18:	699b      	ldr	r3, [r3, #24]
 8033e1a:	2b01      	cmp	r3, #1
 8033e1c:	d101      	bne.n	8033e22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8033e1e:	2301      	movs	r3, #1
 8033e20:	e032      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8033e22:	4b1c      	ldr	r3, [pc, #112]	; (8033e94 <HAL_RCC_OscConfig+0x4e8>)
 8033e24:	685b      	ldr	r3, [r3, #4]
 8033e26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8033e28:	687b      	ldr	r3, [r7, #4]
 8033e2a:	699b      	ldr	r3, [r3, #24]
 8033e2c:	2b01      	cmp	r3, #1
 8033e2e:	d028      	beq.n	8033e82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8033e30:	68fb      	ldr	r3, [r7, #12]
 8033e32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8033e36:	687b      	ldr	r3, [r7, #4]
 8033e38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8033e3a:	429a      	cmp	r2, r3
 8033e3c:	d121      	bne.n	8033e82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8033e3e:	68fb      	ldr	r3, [r7, #12]
 8033e40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8033e44:	687b      	ldr	r3, [r7, #4]
 8033e46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8033e48:	429a      	cmp	r2, r3
 8033e4a:	d11a      	bne.n	8033e82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8033e4c:	68fa      	ldr	r2, [r7, #12]
 8033e4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8033e52:	4013      	ands	r3, r2
 8033e54:	687a      	ldr	r2, [r7, #4]
 8033e56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8033e58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8033e5a:	4293      	cmp	r3, r2
 8033e5c:	d111      	bne.n	8033e82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8033e5e:	68fb      	ldr	r3, [r7, #12]
 8033e60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8033e64:	687b      	ldr	r3, [r7, #4]
 8033e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8033e68:	085b      	lsrs	r3, r3, #1
 8033e6a:	3b01      	subs	r3, #1
 8033e6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8033e6e:	429a      	cmp	r2, r3
 8033e70:	d107      	bne.n	8033e82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8033e72:	68fb      	ldr	r3, [r7, #12]
 8033e74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8033e78:	687b      	ldr	r3, [r7, #4]
 8033e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8033e7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8033e7e:	429a      	cmp	r2, r3
 8033e80:	d001      	beq.n	8033e86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8033e82:	2301      	movs	r3, #1
 8033e84:	e000      	b.n	8033e88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8033e86:	2300      	movs	r3, #0
}
 8033e88:	4618      	mov	r0, r3
 8033e8a:	3718      	adds	r7, #24
 8033e8c:	46bd      	mov	sp, r7
 8033e8e:	bd80      	pop	{r7, pc}
 8033e90:	40007000 	.word	0x40007000
 8033e94:	40023800 	.word	0x40023800
 8033e98:	42470060 	.word	0x42470060

08033e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8033e9c:	b580      	push	{r7, lr}
 8033e9e:	b084      	sub	sp, #16
 8033ea0:	af00      	add	r7, sp, #0
 8033ea2:	6078      	str	r0, [r7, #4]
 8033ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8033ea6:	687b      	ldr	r3, [r7, #4]
 8033ea8:	2b00      	cmp	r3, #0
 8033eaa:	d101      	bne.n	8033eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8033eac:	2301      	movs	r3, #1
 8033eae:	e0cc      	b.n	803404a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8033eb0:	4b68      	ldr	r3, [pc, #416]	; (8034054 <HAL_RCC_ClockConfig+0x1b8>)
 8033eb2:	681b      	ldr	r3, [r3, #0]
 8033eb4:	f003 0307 	and.w	r3, r3, #7
 8033eb8:	683a      	ldr	r2, [r7, #0]
 8033eba:	429a      	cmp	r2, r3
 8033ebc:	d90c      	bls.n	8033ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8033ebe:	4b65      	ldr	r3, [pc, #404]	; (8034054 <HAL_RCC_ClockConfig+0x1b8>)
 8033ec0:	683a      	ldr	r2, [r7, #0]
 8033ec2:	b2d2      	uxtb	r2, r2
 8033ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8033ec6:	4b63      	ldr	r3, [pc, #396]	; (8034054 <HAL_RCC_ClockConfig+0x1b8>)
 8033ec8:	681b      	ldr	r3, [r3, #0]
 8033eca:	f003 0307 	and.w	r3, r3, #7
 8033ece:	683a      	ldr	r2, [r7, #0]
 8033ed0:	429a      	cmp	r2, r3
 8033ed2:	d001      	beq.n	8033ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8033ed4:	2301      	movs	r3, #1
 8033ed6:	e0b8      	b.n	803404a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8033ed8:	687b      	ldr	r3, [r7, #4]
 8033eda:	681b      	ldr	r3, [r3, #0]
 8033edc:	f003 0302 	and.w	r3, r3, #2
 8033ee0:	2b00      	cmp	r3, #0
 8033ee2:	d020      	beq.n	8033f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8033ee4:	687b      	ldr	r3, [r7, #4]
 8033ee6:	681b      	ldr	r3, [r3, #0]
 8033ee8:	f003 0304 	and.w	r3, r3, #4
 8033eec:	2b00      	cmp	r3, #0
 8033eee:	d005      	beq.n	8033efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8033ef0:	4b59      	ldr	r3, [pc, #356]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 8033ef2:	689b      	ldr	r3, [r3, #8]
 8033ef4:	4a58      	ldr	r2, [pc, #352]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 8033ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8033efa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8033efc:	687b      	ldr	r3, [r7, #4]
 8033efe:	681b      	ldr	r3, [r3, #0]
 8033f00:	f003 0308 	and.w	r3, r3, #8
 8033f04:	2b00      	cmp	r3, #0
 8033f06:	d005      	beq.n	8033f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8033f08:	4b53      	ldr	r3, [pc, #332]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 8033f0a:	689b      	ldr	r3, [r3, #8]
 8033f0c:	4a52      	ldr	r2, [pc, #328]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 8033f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8033f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8033f14:	4b50      	ldr	r3, [pc, #320]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 8033f16:	689b      	ldr	r3, [r3, #8]
 8033f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8033f1c:	687b      	ldr	r3, [r7, #4]
 8033f1e:	689b      	ldr	r3, [r3, #8]
 8033f20:	494d      	ldr	r1, [pc, #308]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 8033f22:	4313      	orrs	r3, r2
 8033f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8033f26:	687b      	ldr	r3, [r7, #4]
 8033f28:	681b      	ldr	r3, [r3, #0]
 8033f2a:	f003 0301 	and.w	r3, r3, #1
 8033f2e:	2b00      	cmp	r3, #0
 8033f30:	d044      	beq.n	8033fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8033f32:	687b      	ldr	r3, [r7, #4]
 8033f34:	685b      	ldr	r3, [r3, #4]
 8033f36:	2b01      	cmp	r3, #1
 8033f38:	d107      	bne.n	8033f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8033f3a:	4b47      	ldr	r3, [pc, #284]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 8033f3c:	681b      	ldr	r3, [r3, #0]
 8033f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8033f42:	2b00      	cmp	r3, #0
 8033f44:	d119      	bne.n	8033f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8033f46:	2301      	movs	r3, #1
 8033f48:	e07f      	b.n	803404a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8033f4a:	687b      	ldr	r3, [r7, #4]
 8033f4c:	685b      	ldr	r3, [r3, #4]
 8033f4e:	2b02      	cmp	r3, #2
 8033f50:	d003      	beq.n	8033f5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8033f52:	687b      	ldr	r3, [r7, #4]
 8033f54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8033f56:	2b03      	cmp	r3, #3
 8033f58:	d107      	bne.n	8033f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8033f5a:	4b3f      	ldr	r3, [pc, #252]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 8033f5c:	681b      	ldr	r3, [r3, #0]
 8033f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8033f62:	2b00      	cmp	r3, #0
 8033f64:	d109      	bne.n	8033f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8033f66:	2301      	movs	r3, #1
 8033f68:	e06f      	b.n	803404a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8033f6a:	4b3b      	ldr	r3, [pc, #236]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 8033f6c:	681b      	ldr	r3, [r3, #0]
 8033f6e:	f003 0302 	and.w	r3, r3, #2
 8033f72:	2b00      	cmp	r3, #0
 8033f74:	d101      	bne.n	8033f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8033f76:	2301      	movs	r3, #1
 8033f78:	e067      	b.n	803404a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8033f7a:	4b37      	ldr	r3, [pc, #220]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 8033f7c:	689b      	ldr	r3, [r3, #8]
 8033f7e:	f023 0203 	bic.w	r2, r3, #3
 8033f82:	687b      	ldr	r3, [r7, #4]
 8033f84:	685b      	ldr	r3, [r3, #4]
 8033f86:	4934      	ldr	r1, [pc, #208]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 8033f88:	4313      	orrs	r3, r2
 8033f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8033f8c:	f7fe feac 	bl	8032ce8 <HAL_GetTick>
 8033f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8033f92:	e00a      	b.n	8033faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8033f94:	f7fe fea8 	bl	8032ce8 <HAL_GetTick>
 8033f98:	4602      	mov	r2, r0
 8033f9a:	68fb      	ldr	r3, [r7, #12]
 8033f9c:	1ad3      	subs	r3, r2, r3
 8033f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8033fa2:	4293      	cmp	r3, r2
 8033fa4:	d901      	bls.n	8033faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8033fa6:	2303      	movs	r3, #3
 8033fa8:	e04f      	b.n	803404a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8033faa:	4b2b      	ldr	r3, [pc, #172]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 8033fac:	689b      	ldr	r3, [r3, #8]
 8033fae:	f003 020c 	and.w	r2, r3, #12
 8033fb2:	687b      	ldr	r3, [r7, #4]
 8033fb4:	685b      	ldr	r3, [r3, #4]
 8033fb6:	009b      	lsls	r3, r3, #2
 8033fb8:	429a      	cmp	r2, r3
 8033fba:	d1eb      	bne.n	8033f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8033fbc:	4b25      	ldr	r3, [pc, #148]	; (8034054 <HAL_RCC_ClockConfig+0x1b8>)
 8033fbe:	681b      	ldr	r3, [r3, #0]
 8033fc0:	f003 0307 	and.w	r3, r3, #7
 8033fc4:	683a      	ldr	r2, [r7, #0]
 8033fc6:	429a      	cmp	r2, r3
 8033fc8:	d20c      	bcs.n	8033fe4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8033fca:	4b22      	ldr	r3, [pc, #136]	; (8034054 <HAL_RCC_ClockConfig+0x1b8>)
 8033fcc:	683a      	ldr	r2, [r7, #0]
 8033fce:	b2d2      	uxtb	r2, r2
 8033fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8033fd2:	4b20      	ldr	r3, [pc, #128]	; (8034054 <HAL_RCC_ClockConfig+0x1b8>)
 8033fd4:	681b      	ldr	r3, [r3, #0]
 8033fd6:	f003 0307 	and.w	r3, r3, #7
 8033fda:	683a      	ldr	r2, [r7, #0]
 8033fdc:	429a      	cmp	r2, r3
 8033fde:	d001      	beq.n	8033fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8033fe0:	2301      	movs	r3, #1
 8033fe2:	e032      	b.n	803404a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8033fe4:	687b      	ldr	r3, [r7, #4]
 8033fe6:	681b      	ldr	r3, [r3, #0]
 8033fe8:	f003 0304 	and.w	r3, r3, #4
 8033fec:	2b00      	cmp	r3, #0
 8033fee:	d008      	beq.n	8034002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8033ff0:	4b19      	ldr	r3, [pc, #100]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 8033ff2:	689b      	ldr	r3, [r3, #8]
 8033ff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8033ff8:	687b      	ldr	r3, [r7, #4]
 8033ffa:	68db      	ldr	r3, [r3, #12]
 8033ffc:	4916      	ldr	r1, [pc, #88]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 8033ffe:	4313      	orrs	r3, r2
 8034000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8034002:	687b      	ldr	r3, [r7, #4]
 8034004:	681b      	ldr	r3, [r3, #0]
 8034006:	f003 0308 	and.w	r3, r3, #8
 803400a:	2b00      	cmp	r3, #0
 803400c:	d009      	beq.n	8034022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 803400e:	4b12      	ldr	r3, [pc, #72]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 8034010:	689b      	ldr	r3, [r3, #8]
 8034012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8034016:	687b      	ldr	r3, [r7, #4]
 8034018:	691b      	ldr	r3, [r3, #16]
 803401a:	00db      	lsls	r3, r3, #3
 803401c:	490e      	ldr	r1, [pc, #56]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 803401e:	4313      	orrs	r3, r2
 8034020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8034022:	f000 f821 	bl	8034068 <HAL_RCC_GetSysClockFreq>
 8034026:	4602      	mov	r2, r0
 8034028:	4b0b      	ldr	r3, [pc, #44]	; (8034058 <HAL_RCC_ClockConfig+0x1bc>)
 803402a:	689b      	ldr	r3, [r3, #8]
 803402c:	091b      	lsrs	r3, r3, #4
 803402e:	f003 030f 	and.w	r3, r3, #15
 8034032:	490a      	ldr	r1, [pc, #40]	; (803405c <HAL_RCC_ClockConfig+0x1c0>)
 8034034:	5ccb      	ldrb	r3, [r1, r3]
 8034036:	fa22 f303 	lsr.w	r3, r2, r3
 803403a:	4a09      	ldr	r2, [pc, #36]	; (8034060 <HAL_RCC_ClockConfig+0x1c4>)
 803403c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 803403e:	4b09      	ldr	r3, [pc, #36]	; (8034064 <HAL_RCC_ClockConfig+0x1c8>)
 8034040:	681b      	ldr	r3, [r3, #0]
 8034042:	4618      	mov	r0, r3
 8034044:	f7fe fe0c 	bl	8032c60 <HAL_InitTick>

  return HAL_OK;
 8034048:	2300      	movs	r3, #0
}
 803404a:	4618      	mov	r0, r3
 803404c:	3710      	adds	r7, #16
 803404e:	46bd      	mov	sp, r7
 8034050:	bd80      	pop	{r7, pc}
 8034052:	bf00      	nop
 8034054:	40023c00 	.word	0x40023c00
 8034058:	40023800 	.word	0x40023800
 803405c:	0803ff18 	.word	0x0803ff18
 8034060:	20000020 	.word	0x20000020
 8034064:	20000024 	.word	0x20000024

08034068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8034068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 803406c:	b084      	sub	sp, #16
 803406e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8034070:	2300      	movs	r3, #0
 8034072:	607b      	str	r3, [r7, #4]
 8034074:	2300      	movs	r3, #0
 8034076:	60fb      	str	r3, [r7, #12]
 8034078:	2300      	movs	r3, #0
 803407a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 803407c:	2300      	movs	r3, #0
 803407e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8034080:	4b67      	ldr	r3, [pc, #412]	; (8034220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8034082:	689b      	ldr	r3, [r3, #8]
 8034084:	f003 030c 	and.w	r3, r3, #12
 8034088:	2b08      	cmp	r3, #8
 803408a:	d00d      	beq.n	80340a8 <HAL_RCC_GetSysClockFreq+0x40>
 803408c:	2b08      	cmp	r3, #8
 803408e:	f200 80bd 	bhi.w	803420c <HAL_RCC_GetSysClockFreq+0x1a4>
 8034092:	2b00      	cmp	r3, #0
 8034094:	d002      	beq.n	803409c <HAL_RCC_GetSysClockFreq+0x34>
 8034096:	2b04      	cmp	r3, #4
 8034098:	d003      	beq.n	80340a2 <HAL_RCC_GetSysClockFreq+0x3a>
 803409a:	e0b7      	b.n	803420c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 803409c:	4b61      	ldr	r3, [pc, #388]	; (8034224 <HAL_RCC_GetSysClockFreq+0x1bc>)
 803409e:	60bb      	str	r3, [r7, #8]
       break;
 80340a0:	e0b7      	b.n	8034212 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80340a2:	4b61      	ldr	r3, [pc, #388]	; (8034228 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80340a4:	60bb      	str	r3, [r7, #8]
      break;
 80340a6:	e0b4      	b.n	8034212 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80340a8:	4b5d      	ldr	r3, [pc, #372]	; (8034220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80340aa:	685b      	ldr	r3, [r3, #4]
 80340ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80340b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80340b2:	4b5b      	ldr	r3, [pc, #364]	; (8034220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80340b4:	685b      	ldr	r3, [r3, #4]
 80340b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80340ba:	2b00      	cmp	r3, #0
 80340bc:	d04d      	beq.n	803415a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80340be:	4b58      	ldr	r3, [pc, #352]	; (8034220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80340c0:	685b      	ldr	r3, [r3, #4]
 80340c2:	099b      	lsrs	r3, r3, #6
 80340c4:	461a      	mov	r2, r3
 80340c6:	f04f 0300 	mov.w	r3, #0
 80340ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80340ce:	f04f 0100 	mov.w	r1, #0
 80340d2:	ea02 0800 	and.w	r8, r2, r0
 80340d6:	ea03 0901 	and.w	r9, r3, r1
 80340da:	4640      	mov	r0, r8
 80340dc:	4649      	mov	r1, r9
 80340de:	f04f 0200 	mov.w	r2, #0
 80340e2:	f04f 0300 	mov.w	r3, #0
 80340e6:	014b      	lsls	r3, r1, #5
 80340e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80340ec:	0142      	lsls	r2, r0, #5
 80340ee:	4610      	mov	r0, r2
 80340f0:	4619      	mov	r1, r3
 80340f2:	ebb0 0008 	subs.w	r0, r0, r8
 80340f6:	eb61 0109 	sbc.w	r1, r1, r9
 80340fa:	f04f 0200 	mov.w	r2, #0
 80340fe:	f04f 0300 	mov.w	r3, #0
 8034102:	018b      	lsls	r3, r1, #6
 8034104:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8034108:	0182      	lsls	r2, r0, #6
 803410a:	1a12      	subs	r2, r2, r0
 803410c:	eb63 0301 	sbc.w	r3, r3, r1
 8034110:	f04f 0000 	mov.w	r0, #0
 8034114:	f04f 0100 	mov.w	r1, #0
 8034118:	00d9      	lsls	r1, r3, #3
 803411a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 803411e:	00d0      	lsls	r0, r2, #3
 8034120:	4602      	mov	r2, r0
 8034122:	460b      	mov	r3, r1
 8034124:	eb12 0208 	adds.w	r2, r2, r8
 8034128:	eb43 0309 	adc.w	r3, r3, r9
 803412c:	f04f 0000 	mov.w	r0, #0
 8034130:	f04f 0100 	mov.w	r1, #0
 8034134:	0259      	lsls	r1, r3, #9
 8034136:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 803413a:	0250      	lsls	r0, r2, #9
 803413c:	4602      	mov	r2, r0
 803413e:	460b      	mov	r3, r1
 8034140:	4610      	mov	r0, r2
 8034142:	4619      	mov	r1, r3
 8034144:	687b      	ldr	r3, [r7, #4]
 8034146:	461a      	mov	r2, r3
 8034148:	f04f 0300 	mov.w	r3, #0
 803414c:	f7ec fd9c 	bl	8020c88 <__aeabi_uldivmod>
 8034150:	4602      	mov	r2, r0
 8034152:	460b      	mov	r3, r1
 8034154:	4613      	mov	r3, r2
 8034156:	60fb      	str	r3, [r7, #12]
 8034158:	e04a      	b.n	80341f0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 803415a:	4b31      	ldr	r3, [pc, #196]	; (8034220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 803415c:	685b      	ldr	r3, [r3, #4]
 803415e:	099b      	lsrs	r3, r3, #6
 8034160:	461a      	mov	r2, r3
 8034162:	f04f 0300 	mov.w	r3, #0
 8034166:	f240 10ff 	movw	r0, #511	; 0x1ff
 803416a:	f04f 0100 	mov.w	r1, #0
 803416e:	ea02 0400 	and.w	r4, r2, r0
 8034172:	ea03 0501 	and.w	r5, r3, r1
 8034176:	4620      	mov	r0, r4
 8034178:	4629      	mov	r1, r5
 803417a:	f04f 0200 	mov.w	r2, #0
 803417e:	f04f 0300 	mov.w	r3, #0
 8034182:	014b      	lsls	r3, r1, #5
 8034184:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8034188:	0142      	lsls	r2, r0, #5
 803418a:	4610      	mov	r0, r2
 803418c:	4619      	mov	r1, r3
 803418e:	1b00      	subs	r0, r0, r4
 8034190:	eb61 0105 	sbc.w	r1, r1, r5
 8034194:	f04f 0200 	mov.w	r2, #0
 8034198:	f04f 0300 	mov.w	r3, #0
 803419c:	018b      	lsls	r3, r1, #6
 803419e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80341a2:	0182      	lsls	r2, r0, #6
 80341a4:	1a12      	subs	r2, r2, r0
 80341a6:	eb63 0301 	sbc.w	r3, r3, r1
 80341aa:	f04f 0000 	mov.w	r0, #0
 80341ae:	f04f 0100 	mov.w	r1, #0
 80341b2:	00d9      	lsls	r1, r3, #3
 80341b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80341b8:	00d0      	lsls	r0, r2, #3
 80341ba:	4602      	mov	r2, r0
 80341bc:	460b      	mov	r3, r1
 80341be:	1912      	adds	r2, r2, r4
 80341c0:	eb45 0303 	adc.w	r3, r5, r3
 80341c4:	f04f 0000 	mov.w	r0, #0
 80341c8:	f04f 0100 	mov.w	r1, #0
 80341cc:	0299      	lsls	r1, r3, #10
 80341ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80341d2:	0290      	lsls	r0, r2, #10
 80341d4:	4602      	mov	r2, r0
 80341d6:	460b      	mov	r3, r1
 80341d8:	4610      	mov	r0, r2
 80341da:	4619      	mov	r1, r3
 80341dc:	687b      	ldr	r3, [r7, #4]
 80341de:	461a      	mov	r2, r3
 80341e0:	f04f 0300 	mov.w	r3, #0
 80341e4:	f7ec fd50 	bl	8020c88 <__aeabi_uldivmod>
 80341e8:	4602      	mov	r2, r0
 80341ea:	460b      	mov	r3, r1
 80341ec:	4613      	mov	r3, r2
 80341ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80341f0:	4b0b      	ldr	r3, [pc, #44]	; (8034220 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80341f2:	685b      	ldr	r3, [r3, #4]
 80341f4:	0c1b      	lsrs	r3, r3, #16
 80341f6:	f003 0303 	and.w	r3, r3, #3
 80341fa:	3301      	adds	r3, #1
 80341fc:	005b      	lsls	r3, r3, #1
 80341fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8034200:	68fa      	ldr	r2, [r7, #12]
 8034202:	683b      	ldr	r3, [r7, #0]
 8034204:	fbb2 f3f3 	udiv	r3, r2, r3
 8034208:	60bb      	str	r3, [r7, #8]
      break;
 803420a:	e002      	b.n	8034212 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 803420c:	4b05      	ldr	r3, [pc, #20]	; (8034224 <HAL_RCC_GetSysClockFreq+0x1bc>)
 803420e:	60bb      	str	r3, [r7, #8]
      break;
 8034210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8034212:	68bb      	ldr	r3, [r7, #8]
}
 8034214:	4618      	mov	r0, r3
 8034216:	3710      	adds	r7, #16
 8034218:	46bd      	mov	sp, r7
 803421a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 803421e:	bf00      	nop
 8034220:	40023800 	.word	0x40023800
 8034224:	00f42400 	.word	0x00f42400
 8034228:	007a1200 	.word	0x007a1200

0803422c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 803422c:	b480      	push	{r7}
 803422e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8034230:	4b03      	ldr	r3, [pc, #12]	; (8034240 <HAL_RCC_GetHCLKFreq+0x14>)
 8034232:	681b      	ldr	r3, [r3, #0]
}
 8034234:	4618      	mov	r0, r3
 8034236:	46bd      	mov	sp, r7
 8034238:	f85d 7b04 	ldr.w	r7, [sp], #4
 803423c:	4770      	bx	lr
 803423e:	bf00      	nop
 8034240:	20000020 	.word	0x20000020

08034244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8034244:	b580      	push	{r7, lr}
 8034246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8034248:	f7ff fff0 	bl	803422c <HAL_RCC_GetHCLKFreq>
 803424c:	4602      	mov	r2, r0
 803424e:	4b05      	ldr	r3, [pc, #20]	; (8034264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8034250:	689b      	ldr	r3, [r3, #8]
 8034252:	0a9b      	lsrs	r3, r3, #10
 8034254:	f003 0307 	and.w	r3, r3, #7
 8034258:	4903      	ldr	r1, [pc, #12]	; (8034268 <HAL_RCC_GetPCLK1Freq+0x24>)
 803425a:	5ccb      	ldrb	r3, [r1, r3]
 803425c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8034260:	4618      	mov	r0, r3
 8034262:	bd80      	pop	{r7, pc}
 8034264:	40023800 	.word	0x40023800
 8034268:	0803ff28 	.word	0x0803ff28

0803426c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 803426c:	b580      	push	{r7, lr}
 803426e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8034270:	f7ff ffdc 	bl	803422c <HAL_RCC_GetHCLKFreq>
 8034274:	4602      	mov	r2, r0
 8034276:	4b05      	ldr	r3, [pc, #20]	; (803428c <HAL_RCC_GetPCLK2Freq+0x20>)
 8034278:	689b      	ldr	r3, [r3, #8]
 803427a:	0b5b      	lsrs	r3, r3, #13
 803427c:	f003 0307 	and.w	r3, r3, #7
 8034280:	4903      	ldr	r1, [pc, #12]	; (8034290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8034282:	5ccb      	ldrb	r3, [r1, r3]
 8034284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8034288:	4618      	mov	r0, r3
 803428a:	bd80      	pop	{r7, pc}
 803428c:	40023800 	.word	0x40023800
 8034290:	0803ff28 	.word	0x0803ff28

08034294 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8034294:	b580      	push	{r7, lr}
 8034296:	b082      	sub	sp, #8
 8034298:	af00      	add	r7, sp, #0
 803429a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 803429c:	687b      	ldr	r3, [r7, #4]
 803429e:	2b00      	cmp	r3, #0
 80342a0:	d101      	bne.n	80342a6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80342a2:	2301      	movs	r3, #1
 80342a4:	e022      	b.n	80342ec <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80342a6:	687b      	ldr	r3, [r7, #4]
 80342a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80342ac:	b2db      	uxtb	r3, r3
 80342ae:	2b00      	cmp	r3, #0
 80342b0:	d105      	bne.n	80342be <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80342b2:	687b      	ldr	r3, [r7, #4]
 80342b4:	2200      	movs	r2, #0
 80342b6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80342b8:	6878      	ldr	r0, [r7, #4]
 80342ba:	f7fe f831 	bl	8032320 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80342be:	687b      	ldr	r3, [r7, #4]
 80342c0:	2203      	movs	r2, #3
 80342c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80342c6:	6878      	ldr	r0, [r7, #4]
 80342c8:	f000 f814 	bl	80342f4 <HAL_SD_InitCard>
 80342cc:	4603      	mov	r3, r0
 80342ce:	2b00      	cmp	r3, #0
 80342d0:	d001      	beq.n	80342d6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80342d2:	2301      	movs	r3, #1
 80342d4:	e00a      	b.n	80342ec <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80342d6:	687b      	ldr	r3, [r7, #4]
 80342d8:	2200      	movs	r2, #0
 80342da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80342dc:	687b      	ldr	r3, [r7, #4]
 80342de:	2200      	movs	r2, #0
 80342e0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80342e2:	687b      	ldr	r3, [r7, #4]
 80342e4:	2201      	movs	r2, #1
 80342e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80342ea:	2300      	movs	r3, #0
}
 80342ec:	4618      	mov	r0, r3
 80342ee:	3708      	adds	r7, #8
 80342f0:	46bd      	mov	sp, r7
 80342f2:	bd80      	pop	{r7, pc}

080342f4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80342f4:	b5b0      	push	{r4, r5, r7, lr}
 80342f6:	b08e      	sub	sp, #56	; 0x38
 80342f8:	af04      	add	r7, sp, #16
 80342fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80342fc:	2300      	movs	r3, #0
 80342fe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8034300:	2300      	movs	r3, #0
 8034302:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8034304:	2300      	movs	r3, #0
 8034306:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8034308:	2300      	movs	r3, #0
 803430a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 803430c:	2300      	movs	r3, #0
 803430e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8034310:	2376      	movs	r3, #118	; 0x76
 8034312:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8034314:	687b      	ldr	r3, [r7, #4]
 8034316:	681d      	ldr	r5, [r3, #0]
 8034318:	466c      	mov	r4, sp
 803431a:	f107 0314 	add.w	r3, r7, #20
 803431e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8034322:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8034326:	f107 0308 	add.w	r3, r7, #8
 803432a:	cb0e      	ldmia	r3, {r1, r2, r3}
 803432c:	4628      	mov	r0, r5
 803432e:	f003 f87d 	bl	803742c <SDIO_Init>
 8034332:	4603      	mov	r3, r0
 8034334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8034338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 803433c:	2b00      	cmp	r3, #0
 803433e:	d001      	beq.n	8034344 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8034340:	2301      	movs	r3, #1
 8034342:	e04c      	b.n	80343de <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8034344:	4b28      	ldr	r3, [pc, #160]	; (80343e8 <HAL_SD_InitCard+0xf4>)
 8034346:	2200      	movs	r2, #0
 8034348:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 803434a:	687b      	ldr	r3, [r7, #4]
 803434c:	681b      	ldr	r3, [r3, #0]
 803434e:	4618      	mov	r0, r3
 8034350:	f003 f8b5 	bl	80374be <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8034354:	4b24      	ldr	r3, [pc, #144]	; (80343e8 <HAL_SD_InitCard+0xf4>)
 8034356:	2201      	movs	r2, #1
 8034358:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 803435a:	6878      	ldr	r0, [r7, #4]
 803435c:	f000 fe68 	bl	8035030 <SD_PowerON>
 8034360:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8034362:	6a3b      	ldr	r3, [r7, #32]
 8034364:	2b00      	cmp	r3, #0
 8034366:	d00b      	beq.n	8034380 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8034368:	687b      	ldr	r3, [r7, #4]
 803436a:	2201      	movs	r2, #1
 803436c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8034370:	687b      	ldr	r3, [r7, #4]
 8034372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8034374:	6a3b      	ldr	r3, [r7, #32]
 8034376:	431a      	orrs	r2, r3
 8034378:	687b      	ldr	r3, [r7, #4]
 803437a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 803437c:	2301      	movs	r3, #1
 803437e:	e02e      	b.n	80343de <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8034380:	6878      	ldr	r0, [r7, #4]
 8034382:	f000 fd89 	bl	8034e98 <SD_InitCard>
 8034386:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8034388:	6a3b      	ldr	r3, [r7, #32]
 803438a:	2b00      	cmp	r3, #0
 803438c:	d00b      	beq.n	80343a6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 803438e:	687b      	ldr	r3, [r7, #4]
 8034390:	2201      	movs	r2, #1
 8034392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8034396:	687b      	ldr	r3, [r7, #4]
 8034398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 803439a:	6a3b      	ldr	r3, [r7, #32]
 803439c:	431a      	orrs	r2, r3
 803439e:	687b      	ldr	r3, [r7, #4]
 80343a0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80343a2:	2301      	movs	r3, #1
 80343a4:	e01b      	b.n	80343de <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80343a6:	687b      	ldr	r3, [r7, #4]
 80343a8:	681b      	ldr	r3, [r3, #0]
 80343aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80343ae:	4618      	mov	r0, r3
 80343b0:	f003 f918 	bl	80375e4 <SDMMC_CmdBlockLength>
 80343b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80343b6:	6a3b      	ldr	r3, [r7, #32]
 80343b8:	2b00      	cmp	r3, #0
 80343ba:	d00f      	beq.n	80343dc <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80343bc:	687b      	ldr	r3, [r7, #4]
 80343be:	681b      	ldr	r3, [r3, #0]
 80343c0:	4a0a      	ldr	r2, [pc, #40]	; (80343ec <HAL_SD_InitCard+0xf8>)
 80343c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80343c4:	687b      	ldr	r3, [r7, #4]
 80343c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80343c8:	6a3b      	ldr	r3, [r7, #32]
 80343ca:	431a      	orrs	r2, r3
 80343cc:	687b      	ldr	r3, [r7, #4]
 80343ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80343d0:	687b      	ldr	r3, [r7, #4]
 80343d2:	2201      	movs	r2, #1
 80343d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80343d8:	2301      	movs	r3, #1
 80343da:	e000      	b.n	80343de <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80343dc:	2300      	movs	r3, #0
}
 80343de:	4618      	mov	r0, r3
 80343e0:	3728      	adds	r7, #40	; 0x28
 80343e2:	46bd      	mov	sp, r7
 80343e4:	bdb0      	pop	{r4, r5, r7, pc}
 80343e6:	bf00      	nop
 80343e8:	422580a0 	.word	0x422580a0
 80343ec:	004005ff 	.word	0x004005ff

080343f0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80343f0:	b580      	push	{r7, lr}
 80343f2:	b092      	sub	sp, #72	; 0x48
 80343f4:	af00      	add	r7, sp, #0
 80343f6:	60f8      	str	r0, [r7, #12]
 80343f8:	60b9      	str	r1, [r7, #8]
 80343fa:	607a      	str	r2, [r7, #4]
 80343fc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80343fe:	f7fe fc73 	bl	8032ce8 <HAL_GetTick>
 8034402:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8034404:	687b      	ldr	r3, [r7, #4]
 8034406:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8034408:	68bb      	ldr	r3, [r7, #8]
 803440a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 803440c:	68bb      	ldr	r3, [r7, #8]
 803440e:	2b00      	cmp	r3, #0
 8034410:	d107      	bne.n	8034422 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8034412:	68fb      	ldr	r3, [r7, #12]
 8034414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034416:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 803441a:	68fb      	ldr	r3, [r7, #12]
 803441c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 803441e:	2301      	movs	r3, #1
 8034420:	e1bd      	b.n	803479e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8034422:	68fb      	ldr	r3, [r7, #12]
 8034424:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8034428:	b2db      	uxtb	r3, r3
 803442a:	2b01      	cmp	r3, #1
 803442c:	f040 81b0 	bne.w	8034790 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8034430:	68fb      	ldr	r3, [r7, #12]
 8034432:	2200      	movs	r2, #0
 8034434:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8034436:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8034438:	683b      	ldr	r3, [r7, #0]
 803443a:	441a      	add	r2, r3
 803443c:	68fb      	ldr	r3, [r7, #12]
 803443e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8034440:	429a      	cmp	r2, r3
 8034442:	d907      	bls.n	8034454 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8034444:	68fb      	ldr	r3, [r7, #12]
 8034446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034448:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 803444c:	68fb      	ldr	r3, [r7, #12]
 803444e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8034450:	2301      	movs	r3, #1
 8034452:	e1a4      	b.n	803479e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8034454:	68fb      	ldr	r3, [r7, #12]
 8034456:	2203      	movs	r2, #3
 8034458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 803445c:	68fb      	ldr	r3, [r7, #12]
 803445e:	681b      	ldr	r3, [r3, #0]
 8034460:	2200      	movs	r2, #0
 8034462:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8034464:	68fb      	ldr	r3, [r7, #12]
 8034466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034468:	2b01      	cmp	r3, #1
 803446a:	d002      	beq.n	8034472 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 803446c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803446e:	025b      	lsls	r3, r3, #9
 8034470:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8034472:	f04f 33ff 	mov.w	r3, #4294967295
 8034476:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8034478:	683b      	ldr	r3, [r7, #0]
 803447a:	025b      	lsls	r3, r3, #9
 803447c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 803447e:	2390      	movs	r3, #144	; 0x90
 8034480:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8034482:	2302      	movs	r3, #2
 8034484:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8034486:	2300      	movs	r3, #0
 8034488:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 803448a:	2301      	movs	r3, #1
 803448c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 803448e:	68fb      	ldr	r3, [r7, #12]
 8034490:	681b      	ldr	r3, [r3, #0]
 8034492:	f107 0214 	add.w	r2, r7, #20
 8034496:	4611      	mov	r1, r2
 8034498:	4618      	mov	r0, r3
 803449a:	f003 f877 	bl	803758c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 803449e:	683b      	ldr	r3, [r7, #0]
 80344a0:	2b01      	cmp	r3, #1
 80344a2:	d90a      	bls.n	80344ba <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80344a4:	68fb      	ldr	r3, [r7, #12]
 80344a6:	2202      	movs	r2, #2
 80344a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80344aa:	68fb      	ldr	r3, [r7, #12]
 80344ac:	681b      	ldr	r3, [r3, #0]
 80344ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80344b0:	4618      	mov	r0, r3
 80344b2:	f003 f8db 	bl	803766c <SDMMC_CmdReadMultiBlock>
 80344b6:	6478      	str	r0, [r7, #68]	; 0x44
 80344b8:	e009      	b.n	80344ce <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80344ba:	68fb      	ldr	r3, [r7, #12]
 80344bc:	2201      	movs	r2, #1
 80344be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80344c0:	68fb      	ldr	r3, [r7, #12]
 80344c2:	681b      	ldr	r3, [r3, #0]
 80344c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80344c6:	4618      	mov	r0, r3
 80344c8:	f003 f8ae 	bl	8037628 <SDMMC_CmdReadSingleBlock>
 80344cc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80344ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80344d0:	2b00      	cmp	r3, #0
 80344d2:	d012      	beq.n	80344fa <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80344d4:	68fb      	ldr	r3, [r7, #12]
 80344d6:	681b      	ldr	r3, [r3, #0]
 80344d8:	4a7a      	ldr	r2, [pc, #488]	; (80346c4 <HAL_SD_ReadBlocks+0x2d4>)
 80344da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80344dc:	68fb      	ldr	r3, [r7, #12]
 80344de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80344e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80344e2:	431a      	orrs	r2, r3
 80344e4:	68fb      	ldr	r3, [r7, #12]
 80344e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80344e8:	68fb      	ldr	r3, [r7, #12]
 80344ea:	2201      	movs	r2, #1
 80344ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80344f0:	68fb      	ldr	r3, [r7, #12]
 80344f2:	2200      	movs	r2, #0
 80344f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80344f6:	2301      	movs	r3, #1
 80344f8:	e151      	b.n	803479e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80344fa:	69bb      	ldr	r3, [r7, #24]
 80344fc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80344fe:	e061      	b.n	80345c4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8034500:	68fb      	ldr	r3, [r7, #12]
 8034502:	681b      	ldr	r3, [r3, #0]
 8034504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8034506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 803450a:	2b00      	cmp	r3, #0
 803450c:	d03c      	beq.n	8034588 <HAL_SD_ReadBlocks+0x198>
 803450e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034510:	2b00      	cmp	r3, #0
 8034512:	d039      	beq.n	8034588 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8034514:	2300      	movs	r3, #0
 8034516:	643b      	str	r3, [r7, #64]	; 0x40
 8034518:	e033      	b.n	8034582 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 803451a:	68fb      	ldr	r3, [r7, #12]
 803451c:	681b      	ldr	r3, [r3, #0]
 803451e:	4618      	mov	r0, r3
 8034520:	f002 ffaf 	bl	8037482 <SDIO_ReadFIFO>
 8034524:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8034526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034528:	b2da      	uxtb	r2, r3
 803452a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803452c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 803452e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034530:	3301      	adds	r3, #1
 8034532:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8034534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034536:	3b01      	subs	r3, #1
 8034538:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 803453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803453c:	0a1b      	lsrs	r3, r3, #8
 803453e:	b2da      	uxtb	r2, r3
 8034540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034542:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8034544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034546:	3301      	adds	r3, #1
 8034548:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 803454a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803454c:	3b01      	subs	r3, #1
 803454e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8034550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034552:	0c1b      	lsrs	r3, r3, #16
 8034554:	b2da      	uxtb	r2, r3
 8034556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034558:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 803455a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803455c:	3301      	adds	r3, #1
 803455e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8034560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034562:	3b01      	subs	r3, #1
 8034564:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8034566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034568:	0e1b      	lsrs	r3, r3, #24
 803456a:	b2da      	uxtb	r2, r3
 803456c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803456e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8034570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034572:	3301      	adds	r3, #1
 8034574:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8034576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034578:	3b01      	subs	r3, #1
 803457a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 803457c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803457e:	3301      	adds	r3, #1
 8034580:	643b      	str	r3, [r7, #64]	; 0x40
 8034582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8034584:	2b07      	cmp	r3, #7
 8034586:	d9c8      	bls.n	803451a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8034588:	f7fe fbae 	bl	8032ce8 <HAL_GetTick>
 803458c:	4602      	mov	r2, r0
 803458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8034590:	1ad3      	subs	r3, r2, r3
 8034592:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8034594:	429a      	cmp	r2, r3
 8034596:	d902      	bls.n	803459e <HAL_SD_ReadBlocks+0x1ae>
 8034598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803459a:	2b00      	cmp	r3, #0
 803459c:	d112      	bne.n	80345c4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 803459e:	68fb      	ldr	r3, [r7, #12]
 80345a0:	681b      	ldr	r3, [r3, #0]
 80345a2:	4a48      	ldr	r2, [pc, #288]	; (80346c4 <HAL_SD_ReadBlocks+0x2d4>)
 80345a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80345a6:	68fb      	ldr	r3, [r7, #12]
 80345a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80345aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80345ae:	68fb      	ldr	r3, [r7, #12]
 80345b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80345b2:	68fb      	ldr	r3, [r7, #12]
 80345b4:	2201      	movs	r2, #1
 80345b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80345ba:	68fb      	ldr	r3, [r7, #12]
 80345bc:	2200      	movs	r2, #0
 80345be:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80345c0:	2303      	movs	r3, #3
 80345c2:	e0ec      	b.n	803479e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80345c4:	68fb      	ldr	r3, [r7, #12]
 80345c6:	681b      	ldr	r3, [r3, #0]
 80345c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80345ca:	f240 332a 	movw	r3, #810	; 0x32a
 80345ce:	4013      	ands	r3, r2
 80345d0:	2b00      	cmp	r3, #0
 80345d2:	d095      	beq.n	8034500 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80345d4:	68fb      	ldr	r3, [r7, #12]
 80345d6:	681b      	ldr	r3, [r3, #0]
 80345d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80345da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80345de:	2b00      	cmp	r3, #0
 80345e0:	d022      	beq.n	8034628 <HAL_SD_ReadBlocks+0x238>
 80345e2:	683b      	ldr	r3, [r7, #0]
 80345e4:	2b01      	cmp	r3, #1
 80345e6:	d91f      	bls.n	8034628 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80345e8:	68fb      	ldr	r3, [r7, #12]
 80345ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80345ec:	2b03      	cmp	r3, #3
 80345ee:	d01b      	beq.n	8034628 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80345f0:	68fb      	ldr	r3, [r7, #12]
 80345f2:	681b      	ldr	r3, [r3, #0]
 80345f4:	4618      	mov	r0, r3
 80345f6:	f003 f89f 	bl	8037738 <SDMMC_CmdStopTransfer>
 80345fa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80345fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80345fe:	2b00      	cmp	r3, #0
 8034600:	d012      	beq.n	8034628 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8034602:	68fb      	ldr	r3, [r7, #12]
 8034604:	681b      	ldr	r3, [r3, #0]
 8034606:	4a2f      	ldr	r2, [pc, #188]	; (80346c4 <HAL_SD_ReadBlocks+0x2d4>)
 8034608:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 803460a:	68fb      	ldr	r3, [r7, #12]
 803460c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 803460e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8034610:	431a      	orrs	r2, r3
 8034612:	68fb      	ldr	r3, [r7, #12]
 8034614:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8034616:	68fb      	ldr	r3, [r7, #12]
 8034618:	2201      	movs	r2, #1
 803461a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 803461e:	68fb      	ldr	r3, [r7, #12]
 8034620:	2200      	movs	r2, #0
 8034622:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8034624:	2301      	movs	r3, #1
 8034626:	e0ba      	b.n	803479e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8034628:	68fb      	ldr	r3, [r7, #12]
 803462a:	681b      	ldr	r3, [r3, #0]
 803462c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803462e:	f003 0308 	and.w	r3, r3, #8
 8034632:	2b00      	cmp	r3, #0
 8034634:	d012      	beq.n	803465c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8034636:	68fb      	ldr	r3, [r7, #12]
 8034638:	681b      	ldr	r3, [r3, #0]
 803463a:	4a22      	ldr	r2, [pc, #136]	; (80346c4 <HAL_SD_ReadBlocks+0x2d4>)
 803463c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 803463e:	68fb      	ldr	r3, [r7, #12]
 8034640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034642:	f043 0208 	orr.w	r2, r3, #8
 8034646:	68fb      	ldr	r3, [r7, #12]
 8034648:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 803464a:	68fb      	ldr	r3, [r7, #12]
 803464c:	2201      	movs	r2, #1
 803464e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8034652:	68fb      	ldr	r3, [r7, #12]
 8034654:	2200      	movs	r2, #0
 8034656:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8034658:	2301      	movs	r3, #1
 803465a:	e0a0      	b.n	803479e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 803465c:	68fb      	ldr	r3, [r7, #12]
 803465e:	681b      	ldr	r3, [r3, #0]
 8034660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8034662:	f003 0302 	and.w	r3, r3, #2
 8034666:	2b00      	cmp	r3, #0
 8034668:	d012      	beq.n	8034690 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 803466a:	68fb      	ldr	r3, [r7, #12]
 803466c:	681b      	ldr	r3, [r3, #0]
 803466e:	4a15      	ldr	r2, [pc, #84]	; (80346c4 <HAL_SD_ReadBlocks+0x2d4>)
 8034670:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8034672:	68fb      	ldr	r3, [r7, #12]
 8034674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034676:	f043 0202 	orr.w	r2, r3, #2
 803467a:	68fb      	ldr	r3, [r7, #12]
 803467c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 803467e:	68fb      	ldr	r3, [r7, #12]
 8034680:	2201      	movs	r2, #1
 8034682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8034686:	68fb      	ldr	r3, [r7, #12]
 8034688:	2200      	movs	r2, #0
 803468a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 803468c:	2301      	movs	r3, #1
 803468e:	e086      	b.n	803479e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8034690:	68fb      	ldr	r3, [r7, #12]
 8034692:	681b      	ldr	r3, [r3, #0]
 8034694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8034696:	f003 0320 	and.w	r3, r3, #32
 803469a:	2b00      	cmp	r3, #0
 803469c:	d063      	beq.n	8034766 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 803469e:	68fb      	ldr	r3, [r7, #12]
 80346a0:	681b      	ldr	r3, [r3, #0]
 80346a2:	4a08      	ldr	r2, [pc, #32]	; (80346c4 <HAL_SD_ReadBlocks+0x2d4>)
 80346a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80346a6:	68fb      	ldr	r3, [r7, #12]
 80346a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80346aa:	f043 0220 	orr.w	r2, r3, #32
 80346ae:	68fb      	ldr	r3, [r7, #12]
 80346b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80346b2:	68fb      	ldr	r3, [r7, #12]
 80346b4:	2201      	movs	r2, #1
 80346b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80346ba:	68fb      	ldr	r3, [r7, #12]
 80346bc:	2200      	movs	r2, #0
 80346be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80346c0:	2301      	movs	r3, #1
 80346c2:	e06c      	b.n	803479e <HAL_SD_ReadBlocks+0x3ae>
 80346c4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80346c8:	68fb      	ldr	r3, [r7, #12]
 80346ca:	681b      	ldr	r3, [r3, #0]
 80346cc:	4618      	mov	r0, r3
 80346ce:	f002 fed8 	bl	8037482 <SDIO_ReadFIFO>
 80346d2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80346d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80346d6:	b2da      	uxtb	r2, r3
 80346d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80346da:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80346dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80346de:	3301      	adds	r3, #1
 80346e0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80346e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80346e4:	3b01      	subs	r3, #1
 80346e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80346e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80346ea:	0a1b      	lsrs	r3, r3, #8
 80346ec:	b2da      	uxtb	r2, r3
 80346ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80346f0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80346f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80346f4:	3301      	adds	r3, #1
 80346f6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80346f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80346fa:	3b01      	subs	r3, #1
 80346fc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80346fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034700:	0c1b      	lsrs	r3, r3, #16
 8034702:	b2da      	uxtb	r2, r3
 8034704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034706:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8034708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803470a:	3301      	adds	r3, #1
 803470c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 803470e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034710:	3b01      	subs	r3, #1
 8034712:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8034714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8034716:	0e1b      	lsrs	r3, r3, #24
 8034718:	b2da      	uxtb	r2, r3
 803471a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803471c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 803471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034720:	3301      	adds	r3, #1
 8034722:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8034724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034726:	3b01      	subs	r3, #1
 8034728:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 803472a:	f7fe fadd 	bl	8032ce8 <HAL_GetTick>
 803472e:	4602      	mov	r2, r0
 8034730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8034732:	1ad3      	subs	r3, r2, r3
 8034734:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8034736:	429a      	cmp	r2, r3
 8034738:	d902      	bls.n	8034740 <HAL_SD_ReadBlocks+0x350>
 803473a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803473c:	2b00      	cmp	r3, #0
 803473e:	d112      	bne.n	8034766 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8034740:	68fb      	ldr	r3, [r7, #12]
 8034742:	681b      	ldr	r3, [r3, #0]
 8034744:	4a18      	ldr	r2, [pc, #96]	; (80347a8 <HAL_SD_ReadBlocks+0x3b8>)
 8034746:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8034748:	68fb      	ldr	r3, [r7, #12]
 803474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803474c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8034750:	68fb      	ldr	r3, [r7, #12]
 8034752:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8034754:	68fb      	ldr	r3, [r7, #12]
 8034756:	2201      	movs	r2, #1
 8034758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 803475c:	68fb      	ldr	r3, [r7, #12]
 803475e:	2200      	movs	r2, #0
 8034760:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8034762:	2301      	movs	r3, #1
 8034764:	e01b      	b.n	803479e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8034766:	68fb      	ldr	r3, [r7, #12]
 8034768:	681b      	ldr	r3, [r3, #0]
 803476a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803476c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8034770:	2b00      	cmp	r3, #0
 8034772:	d002      	beq.n	803477a <HAL_SD_ReadBlocks+0x38a>
 8034774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034776:	2b00      	cmp	r3, #0
 8034778:	d1a6      	bne.n	80346c8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 803477a:	68fb      	ldr	r3, [r7, #12]
 803477c:	681b      	ldr	r3, [r3, #0]
 803477e:	f240 523a 	movw	r2, #1338	; 0x53a
 8034782:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8034784:	68fb      	ldr	r3, [r7, #12]
 8034786:	2201      	movs	r2, #1
 8034788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 803478c:	2300      	movs	r3, #0
 803478e:	e006      	b.n	803479e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8034790:	68fb      	ldr	r3, [r7, #12]
 8034792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034794:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8034798:	68fb      	ldr	r3, [r7, #12]
 803479a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 803479c:	2301      	movs	r3, #1
  }
}
 803479e:	4618      	mov	r0, r3
 80347a0:	3748      	adds	r7, #72	; 0x48
 80347a2:	46bd      	mov	sp, r7
 80347a4:	bd80      	pop	{r7, pc}
 80347a6:	bf00      	nop
 80347a8:	004005ff 	.word	0x004005ff

080347ac <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80347ac:	b580      	push	{r7, lr}
 80347ae:	b092      	sub	sp, #72	; 0x48
 80347b0:	af00      	add	r7, sp, #0
 80347b2:	60f8      	str	r0, [r7, #12]
 80347b4:	60b9      	str	r1, [r7, #8]
 80347b6:	607a      	str	r2, [r7, #4]
 80347b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80347ba:	f7fe fa95 	bl	8032ce8 <HAL_GetTick>
 80347be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80347c0:	687b      	ldr	r3, [r7, #4]
 80347c2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80347c4:	68bb      	ldr	r3, [r7, #8]
 80347c6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80347c8:	68bb      	ldr	r3, [r7, #8]
 80347ca:	2b00      	cmp	r3, #0
 80347cc:	d107      	bne.n	80347de <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80347ce:	68fb      	ldr	r3, [r7, #12]
 80347d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80347d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80347d6:	68fb      	ldr	r3, [r7, #12]
 80347d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80347da:	2301      	movs	r3, #1
 80347dc:	e166      	b.n	8034aac <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80347de:	68fb      	ldr	r3, [r7, #12]
 80347e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80347e4:	b2db      	uxtb	r3, r3
 80347e6:	2b01      	cmp	r3, #1
 80347e8:	f040 8159 	bne.w	8034a9e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80347ec:	68fb      	ldr	r3, [r7, #12]
 80347ee:	2200      	movs	r2, #0
 80347f0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80347f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80347f4:	683b      	ldr	r3, [r7, #0]
 80347f6:	441a      	add	r2, r3
 80347f8:	68fb      	ldr	r3, [r7, #12]
 80347fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80347fc:	429a      	cmp	r2, r3
 80347fe:	d907      	bls.n	8034810 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8034800:	68fb      	ldr	r3, [r7, #12]
 8034802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034804:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8034808:	68fb      	ldr	r3, [r7, #12]
 803480a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 803480c:	2301      	movs	r3, #1
 803480e:	e14d      	b.n	8034aac <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8034810:	68fb      	ldr	r3, [r7, #12]
 8034812:	2203      	movs	r2, #3
 8034814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8034818:	68fb      	ldr	r3, [r7, #12]
 803481a:	681b      	ldr	r3, [r3, #0]
 803481c:	2200      	movs	r2, #0
 803481e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8034820:	68fb      	ldr	r3, [r7, #12]
 8034822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034824:	2b01      	cmp	r3, #1
 8034826:	d002      	beq.n	803482e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8034828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803482a:	025b      	lsls	r3, r3, #9
 803482c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 803482e:	f04f 33ff 	mov.w	r3, #4294967295
 8034832:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8034834:	683b      	ldr	r3, [r7, #0]
 8034836:	025b      	lsls	r3, r3, #9
 8034838:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 803483a:	2390      	movs	r3, #144	; 0x90
 803483c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 803483e:	2300      	movs	r3, #0
 8034840:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8034842:	2300      	movs	r3, #0
 8034844:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8034846:	2301      	movs	r3, #1
 8034848:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 803484a:	68fb      	ldr	r3, [r7, #12]
 803484c:	681b      	ldr	r3, [r3, #0]
 803484e:	f107 0218 	add.w	r2, r7, #24
 8034852:	4611      	mov	r1, r2
 8034854:	4618      	mov	r0, r3
 8034856:	f002 fe99 	bl	803758c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 803485a:	683b      	ldr	r3, [r7, #0]
 803485c:	2b01      	cmp	r3, #1
 803485e:	d90a      	bls.n	8034876 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8034860:	68fb      	ldr	r3, [r7, #12]
 8034862:	2220      	movs	r2, #32
 8034864:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8034866:	68fb      	ldr	r3, [r7, #12]
 8034868:	681b      	ldr	r3, [r3, #0]
 803486a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 803486c:	4618      	mov	r0, r3
 803486e:	f002 ff41 	bl	80376f4 <SDMMC_CmdWriteMultiBlock>
 8034872:	6478      	str	r0, [r7, #68]	; 0x44
 8034874:	e009      	b.n	803488a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8034876:	68fb      	ldr	r3, [r7, #12]
 8034878:	2210      	movs	r2, #16
 803487a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 803487c:	68fb      	ldr	r3, [r7, #12]
 803487e:	681b      	ldr	r3, [r3, #0]
 8034880:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8034882:	4618      	mov	r0, r3
 8034884:	f002 ff14 	bl	80376b0 <SDMMC_CmdWriteSingleBlock>
 8034888:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 803488a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 803488c:	2b00      	cmp	r3, #0
 803488e:	d012      	beq.n	80348b6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8034890:	68fb      	ldr	r3, [r7, #12]
 8034892:	681b      	ldr	r3, [r3, #0]
 8034894:	4a87      	ldr	r2, [pc, #540]	; (8034ab4 <HAL_SD_WriteBlocks+0x308>)
 8034896:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8034898:	68fb      	ldr	r3, [r7, #12]
 803489a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 803489c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 803489e:	431a      	orrs	r2, r3
 80348a0:	68fb      	ldr	r3, [r7, #12]
 80348a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80348a4:	68fb      	ldr	r3, [r7, #12]
 80348a6:	2201      	movs	r2, #1
 80348a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80348ac:	68fb      	ldr	r3, [r7, #12]
 80348ae:	2200      	movs	r2, #0
 80348b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80348b2:	2301      	movs	r3, #1
 80348b4:	e0fa      	b.n	8034aac <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80348b6:	69fb      	ldr	r3, [r7, #28]
 80348b8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80348ba:	e065      	b.n	8034988 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80348bc:	68fb      	ldr	r3, [r7, #12]
 80348be:	681b      	ldr	r3, [r3, #0]
 80348c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80348c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80348c6:	2b00      	cmp	r3, #0
 80348c8:	d040      	beq.n	803494c <HAL_SD_WriteBlocks+0x1a0>
 80348ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80348cc:	2b00      	cmp	r3, #0
 80348ce:	d03d      	beq.n	803494c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80348d0:	2300      	movs	r3, #0
 80348d2:	643b      	str	r3, [r7, #64]	; 0x40
 80348d4:	e037      	b.n	8034946 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80348d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80348d8:	781b      	ldrb	r3, [r3, #0]
 80348da:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80348dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80348de:	3301      	adds	r3, #1
 80348e0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80348e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80348e4:	3b01      	subs	r3, #1
 80348e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80348e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80348ea:	781b      	ldrb	r3, [r3, #0]
 80348ec:	021a      	lsls	r2, r3, #8
 80348ee:	697b      	ldr	r3, [r7, #20]
 80348f0:	4313      	orrs	r3, r2
 80348f2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80348f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80348f6:	3301      	adds	r3, #1
 80348f8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80348fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80348fc:	3b01      	subs	r3, #1
 80348fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8034900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034902:	781b      	ldrb	r3, [r3, #0]
 8034904:	041a      	lsls	r2, r3, #16
 8034906:	697b      	ldr	r3, [r7, #20]
 8034908:	4313      	orrs	r3, r2
 803490a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 803490c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803490e:	3301      	adds	r3, #1
 8034910:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8034912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034914:	3b01      	subs	r3, #1
 8034916:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8034918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803491a:	781b      	ldrb	r3, [r3, #0]
 803491c:	061a      	lsls	r2, r3, #24
 803491e:	697b      	ldr	r3, [r7, #20]
 8034920:	4313      	orrs	r3, r2
 8034922:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8034924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8034926:	3301      	adds	r3, #1
 8034928:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 803492a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803492c:	3b01      	subs	r3, #1
 803492e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8034930:	68fb      	ldr	r3, [r7, #12]
 8034932:	681b      	ldr	r3, [r3, #0]
 8034934:	f107 0214 	add.w	r2, r7, #20
 8034938:	4611      	mov	r1, r2
 803493a:	4618      	mov	r0, r3
 803493c:	f002 fdae 	bl	803749c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8034940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8034942:	3301      	adds	r3, #1
 8034944:	643b      	str	r3, [r7, #64]	; 0x40
 8034946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8034948:	2b07      	cmp	r3, #7
 803494a:	d9c4      	bls.n	80348d6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 803494c:	f7fe f9cc 	bl	8032ce8 <HAL_GetTick>
 8034950:	4602      	mov	r2, r0
 8034952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8034954:	1ad3      	subs	r3, r2, r3
 8034956:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8034958:	429a      	cmp	r2, r3
 803495a:	d902      	bls.n	8034962 <HAL_SD_WriteBlocks+0x1b6>
 803495c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 803495e:	2b00      	cmp	r3, #0
 8034960:	d112      	bne.n	8034988 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8034962:	68fb      	ldr	r3, [r7, #12]
 8034964:	681b      	ldr	r3, [r3, #0]
 8034966:	4a53      	ldr	r2, [pc, #332]	; (8034ab4 <HAL_SD_WriteBlocks+0x308>)
 8034968:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 803496a:	68fb      	ldr	r3, [r7, #12]
 803496c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 803496e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8034970:	431a      	orrs	r2, r3
 8034972:	68fb      	ldr	r3, [r7, #12]
 8034974:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8034976:	68fb      	ldr	r3, [r7, #12]
 8034978:	2201      	movs	r2, #1
 803497a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 803497e:	68fb      	ldr	r3, [r7, #12]
 8034980:	2200      	movs	r2, #0
 8034982:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8034984:	2303      	movs	r3, #3
 8034986:	e091      	b.n	8034aac <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8034988:	68fb      	ldr	r3, [r7, #12]
 803498a:	681b      	ldr	r3, [r3, #0]
 803498c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 803498e:	f240 331a 	movw	r3, #794	; 0x31a
 8034992:	4013      	ands	r3, r2
 8034994:	2b00      	cmp	r3, #0
 8034996:	d091      	beq.n	80348bc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8034998:	68fb      	ldr	r3, [r7, #12]
 803499a:	681b      	ldr	r3, [r3, #0]
 803499c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80349a2:	2b00      	cmp	r3, #0
 80349a4:	d022      	beq.n	80349ec <HAL_SD_WriteBlocks+0x240>
 80349a6:	683b      	ldr	r3, [r7, #0]
 80349a8:	2b01      	cmp	r3, #1
 80349aa:	d91f      	bls.n	80349ec <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80349ac:	68fb      	ldr	r3, [r7, #12]
 80349ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80349b0:	2b03      	cmp	r3, #3
 80349b2:	d01b      	beq.n	80349ec <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80349b4:	68fb      	ldr	r3, [r7, #12]
 80349b6:	681b      	ldr	r3, [r3, #0]
 80349b8:	4618      	mov	r0, r3
 80349ba:	f002 febd 	bl	8037738 <SDMMC_CmdStopTransfer>
 80349be:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80349c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80349c2:	2b00      	cmp	r3, #0
 80349c4:	d012      	beq.n	80349ec <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80349c6:	68fb      	ldr	r3, [r7, #12]
 80349c8:	681b      	ldr	r3, [r3, #0]
 80349ca:	4a3a      	ldr	r2, [pc, #232]	; (8034ab4 <HAL_SD_WriteBlocks+0x308>)
 80349cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80349ce:	68fb      	ldr	r3, [r7, #12]
 80349d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80349d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80349d4:	431a      	orrs	r2, r3
 80349d6:	68fb      	ldr	r3, [r7, #12]
 80349d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80349da:	68fb      	ldr	r3, [r7, #12]
 80349dc:	2201      	movs	r2, #1
 80349de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80349e2:	68fb      	ldr	r3, [r7, #12]
 80349e4:	2200      	movs	r2, #0
 80349e6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80349e8:	2301      	movs	r3, #1
 80349ea:	e05f      	b.n	8034aac <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80349ec:	68fb      	ldr	r3, [r7, #12]
 80349ee:	681b      	ldr	r3, [r3, #0]
 80349f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80349f2:	f003 0308 	and.w	r3, r3, #8
 80349f6:	2b00      	cmp	r3, #0
 80349f8:	d012      	beq.n	8034a20 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80349fa:	68fb      	ldr	r3, [r7, #12]
 80349fc:	681b      	ldr	r3, [r3, #0]
 80349fe:	4a2d      	ldr	r2, [pc, #180]	; (8034ab4 <HAL_SD_WriteBlocks+0x308>)
 8034a00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8034a02:	68fb      	ldr	r3, [r7, #12]
 8034a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034a06:	f043 0208 	orr.w	r2, r3, #8
 8034a0a:	68fb      	ldr	r3, [r7, #12]
 8034a0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8034a0e:	68fb      	ldr	r3, [r7, #12]
 8034a10:	2201      	movs	r2, #1
 8034a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8034a16:	68fb      	ldr	r3, [r7, #12]
 8034a18:	2200      	movs	r2, #0
 8034a1a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8034a1c:	2301      	movs	r3, #1
 8034a1e:	e045      	b.n	8034aac <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8034a20:	68fb      	ldr	r3, [r7, #12]
 8034a22:	681b      	ldr	r3, [r3, #0]
 8034a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8034a26:	f003 0302 	and.w	r3, r3, #2
 8034a2a:	2b00      	cmp	r3, #0
 8034a2c:	d012      	beq.n	8034a54 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8034a2e:	68fb      	ldr	r3, [r7, #12]
 8034a30:	681b      	ldr	r3, [r3, #0]
 8034a32:	4a20      	ldr	r2, [pc, #128]	; (8034ab4 <HAL_SD_WriteBlocks+0x308>)
 8034a34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8034a36:	68fb      	ldr	r3, [r7, #12]
 8034a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034a3a:	f043 0202 	orr.w	r2, r3, #2
 8034a3e:	68fb      	ldr	r3, [r7, #12]
 8034a40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8034a42:	68fb      	ldr	r3, [r7, #12]
 8034a44:	2201      	movs	r2, #1
 8034a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8034a4a:	68fb      	ldr	r3, [r7, #12]
 8034a4c:	2200      	movs	r2, #0
 8034a4e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8034a50:	2301      	movs	r3, #1
 8034a52:	e02b      	b.n	8034aac <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8034a54:	68fb      	ldr	r3, [r7, #12]
 8034a56:	681b      	ldr	r3, [r3, #0]
 8034a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8034a5a:	f003 0310 	and.w	r3, r3, #16
 8034a5e:	2b00      	cmp	r3, #0
 8034a60:	d012      	beq.n	8034a88 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8034a62:	68fb      	ldr	r3, [r7, #12]
 8034a64:	681b      	ldr	r3, [r3, #0]
 8034a66:	4a13      	ldr	r2, [pc, #76]	; (8034ab4 <HAL_SD_WriteBlocks+0x308>)
 8034a68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8034a6a:	68fb      	ldr	r3, [r7, #12]
 8034a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034a6e:	f043 0210 	orr.w	r2, r3, #16
 8034a72:	68fb      	ldr	r3, [r7, #12]
 8034a74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8034a76:	68fb      	ldr	r3, [r7, #12]
 8034a78:	2201      	movs	r2, #1
 8034a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8034a7e:	68fb      	ldr	r3, [r7, #12]
 8034a80:	2200      	movs	r2, #0
 8034a82:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8034a84:	2301      	movs	r3, #1
 8034a86:	e011      	b.n	8034aac <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8034a88:	68fb      	ldr	r3, [r7, #12]
 8034a8a:	681b      	ldr	r3, [r3, #0]
 8034a8c:	f240 523a 	movw	r2, #1338	; 0x53a
 8034a90:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8034a92:	68fb      	ldr	r3, [r7, #12]
 8034a94:	2201      	movs	r2, #1
 8034a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8034a9a:	2300      	movs	r3, #0
 8034a9c:	e006      	b.n	8034aac <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8034a9e:	68fb      	ldr	r3, [r7, #12]
 8034aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034aa2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8034aa6:	68fb      	ldr	r3, [r7, #12]
 8034aa8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8034aaa:	2301      	movs	r3, #1
  }
}
 8034aac:	4618      	mov	r0, r3
 8034aae:	3748      	adds	r7, #72	; 0x48
 8034ab0:	46bd      	mov	sp, r7
 8034ab2:	bd80      	pop	{r7, pc}
 8034ab4:	004005ff 	.word	0x004005ff

08034ab8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8034ab8:	b480      	push	{r7}
 8034aba:	b083      	sub	sp, #12
 8034abc:	af00      	add	r7, sp, #0
 8034abe:	6078      	str	r0, [r7, #4]
 8034ac0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8034ac2:	687b      	ldr	r3, [r7, #4]
 8034ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8034ac6:	0f9b      	lsrs	r3, r3, #30
 8034ac8:	b2da      	uxtb	r2, r3
 8034aca:	683b      	ldr	r3, [r7, #0]
 8034acc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8034ace:	687b      	ldr	r3, [r7, #4]
 8034ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8034ad2:	0e9b      	lsrs	r3, r3, #26
 8034ad4:	b2db      	uxtb	r3, r3
 8034ad6:	f003 030f 	and.w	r3, r3, #15
 8034ada:	b2da      	uxtb	r2, r3
 8034adc:	683b      	ldr	r3, [r7, #0]
 8034ade:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8034ae0:	687b      	ldr	r3, [r7, #4]
 8034ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8034ae4:	0e1b      	lsrs	r3, r3, #24
 8034ae6:	b2db      	uxtb	r3, r3
 8034ae8:	f003 0303 	and.w	r3, r3, #3
 8034aec:	b2da      	uxtb	r2, r3
 8034aee:	683b      	ldr	r3, [r7, #0]
 8034af0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8034af2:	687b      	ldr	r3, [r7, #4]
 8034af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8034af6:	0c1b      	lsrs	r3, r3, #16
 8034af8:	b2da      	uxtb	r2, r3
 8034afa:	683b      	ldr	r3, [r7, #0]
 8034afc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8034afe:	687b      	ldr	r3, [r7, #4]
 8034b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8034b02:	0a1b      	lsrs	r3, r3, #8
 8034b04:	b2da      	uxtb	r2, r3
 8034b06:	683b      	ldr	r3, [r7, #0]
 8034b08:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8034b0a:	687b      	ldr	r3, [r7, #4]
 8034b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8034b0e:	b2da      	uxtb	r2, r3
 8034b10:	683b      	ldr	r3, [r7, #0]
 8034b12:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8034b14:	687b      	ldr	r3, [r7, #4]
 8034b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8034b18:	0d1b      	lsrs	r3, r3, #20
 8034b1a:	b29a      	uxth	r2, r3
 8034b1c:	683b      	ldr	r3, [r7, #0]
 8034b1e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8034b20:	687b      	ldr	r3, [r7, #4]
 8034b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8034b24:	0c1b      	lsrs	r3, r3, #16
 8034b26:	b2db      	uxtb	r3, r3
 8034b28:	f003 030f 	and.w	r3, r3, #15
 8034b2c:	b2da      	uxtb	r2, r3
 8034b2e:	683b      	ldr	r3, [r7, #0]
 8034b30:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8034b32:	687b      	ldr	r3, [r7, #4]
 8034b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8034b36:	0bdb      	lsrs	r3, r3, #15
 8034b38:	b2db      	uxtb	r3, r3
 8034b3a:	f003 0301 	and.w	r3, r3, #1
 8034b3e:	b2da      	uxtb	r2, r3
 8034b40:	683b      	ldr	r3, [r7, #0]
 8034b42:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8034b44:	687b      	ldr	r3, [r7, #4]
 8034b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8034b48:	0b9b      	lsrs	r3, r3, #14
 8034b4a:	b2db      	uxtb	r3, r3
 8034b4c:	f003 0301 	and.w	r3, r3, #1
 8034b50:	b2da      	uxtb	r2, r3
 8034b52:	683b      	ldr	r3, [r7, #0]
 8034b54:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8034b56:	687b      	ldr	r3, [r7, #4]
 8034b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8034b5a:	0b5b      	lsrs	r3, r3, #13
 8034b5c:	b2db      	uxtb	r3, r3
 8034b5e:	f003 0301 	and.w	r3, r3, #1
 8034b62:	b2da      	uxtb	r2, r3
 8034b64:	683b      	ldr	r3, [r7, #0]
 8034b66:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8034b68:	687b      	ldr	r3, [r7, #4]
 8034b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8034b6c:	0b1b      	lsrs	r3, r3, #12
 8034b6e:	b2db      	uxtb	r3, r3
 8034b70:	f003 0301 	and.w	r3, r3, #1
 8034b74:	b2da      	uxtb	r2, r3
 8034b76:	683b      	ldr	r3, [r7, #0]
 8034b78:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8034b7a:	683b      	ldr	r3, [r7, #0]
 8034b7c:	2200      	movs	r2, #0
 8034b7e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8034b80:	687b      	ldr	r3, [r7, #4]
 8034b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034b84:	2b00      	cmp	r3, #0
 8034b86:	d163      	bne.n	8034c50 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8034b88:	687b      	ldr	r3, [r7, #4]
 8034b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8034b8c:	009a      	lsls	r2, r3, #2
 8034b8e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8034b92:	4013      	ands	r3, r2
 8034b94:	687a      	ldr	r2, [r7, #4]
 8034b96:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8034b98:	0f92      	lsrs	r2, r2, #30
 8034b9a:	431a      	orrs	r2, r3
 8034b9c:	683b      	ldr	r3, [r7, #0]
 8034b9e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8034ba0:	687b      	ldr	r3, [r7, #4]
 8034ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8034ba4:	0edb      	lsrs	r3, r3, #27
 8034ba6:	b2db      	uxtb	r3, r3
 8034ba8:	f003 0307 	and.w	r3, r3, #7
 8034bac:	b2da      	uxtb	r2, r3
 8034bae:	683b      	ldr	r3, [r7, #0]
 8034bb0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8034bb2:	687b      	ldr	r3, [r7, #4]
 8034bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8034bb6:	0e1b      	lsrs	r3, r3, #24
 8034bb8:	b2db      	uxtb	r3, r3
 8034bba:	f003 0307 	and.w	r3, r3, #7
 8034bbe:	b2da      	uxtb	r2, r3
 8034bc0:	683b      	ldr	r3, [r7, #0]
 8034bc2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8034bc4:	687b      	ldr	r3, [r7, #4]
 8034bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8034bc8:	0d5b      	lsrs	r3, r3, #21
 8034bca:	b2db      	uxtb	r3, r3
 8034bcc:	f003 0307 	and.w	r3, r3, #7
 8034bd0:	b2da      	uxtb	r2, r3
 8034bd2:	683b      	ldr	r3, [r7, #0]
 8034bd4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8034bd6:	687b      	ldr	r3, [r7, #4]
 8034bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8034bda:	0c9b      	lsrs	r3, r3, #18
 8034bdc:	b2db      	uxtb	r3, r3
 8034bde:	f003 0307 	and.w	r3, r3, #7
 8034be2:	b2da      	uxtb	r2, r3
 8034be4:	683b      	ldr	r3, [r7, #0]
 8034be6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8034be8:	687b      	ldr	r3, [r7, #4]
 8034bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8034bec:	0bdb      	lsrs	r3, r3, #15
 8034bee:	b2db      	uxtb	r3, r3
 8034bf0:	f003 0307 	and.w	r3, r3, #7
 8034bf4:	b2da      	uxtb	r2, r3
 8034bf6:	683b      	ldr	r3, [r7, #0]
 8034bf8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8034bfa:	683b      	ldr	r3, [r7, #0]
 8034bfc:	691b      	ldr	r3, [r3, #16]
 8034bfe:	1c5a      	adds	r2, r3, #1
 8034c00:	687b      	ldr	r3, [r7, #4]
 8034c02:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8034c04:	683b      	ldr	r3, [r7, #0]
 8034c06:	7e1b      	ldrb	r3, [r3, #24]
 8034c08:	b2db      	uxtb	r3, r3
 8034c0a:	f003 0307 	and.w	r3, r3, #7
 8034c0e:	3302      	adds	r3, #2
 8034c10:	2201      	movs	r2, #1
 8034c12:	fa02 f303 	lsl.w	r3, r2, r3
 8034c16:	687a      	ldr	r2, [r7, #4]
 8034c18:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8034c1a:	fb02 f203 	mul.w	r2, r2, r3
 8034c1e:	687b      	ldr	r3, [r7, #4]
 8034c20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8034c22:	683b      	ldr	r3, [r7, #0]
 8034c24:	7a1b      	ldrb	r3, [r3, #8]
 8034c26:	b2db      	uxtb	r3, r3
 8034c28:	f003 030f 	and.w	r3, r3, #15
 8034c2c:	2201      	movs	r2, #1
 8034c2e:	409a      	lsls	r2, r3
 8034c30:	687b      	ldr	r3, [r7, #4]
 8034c32:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8034c34:	687b      	ldr	r3, [r7, #4]
 8034c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8034c38:	687a      	ldr	r2, [r7, #4]
 8034c3a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8034c3c:	0a52      	lsrs	r2, r2, #9
 8034c3e:	fb02 f203 	mul.w	r2, r2, r3
 8034c42:	687b      	ldr	r3, [r7, #4]
 8034c44:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8034c46:	687b      	ldr	r3, [r7, #4]
 8034c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8034c4c:	661a      	str	r2, [r3, #96]	; 0x60
 8034c4e:	e031      	b.n	8034cb4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8034c50:	687b      	ldr	r3, [r7, #4]
 8034c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034c54:	2b01      	cmp	r3, #1
 8034c56:	d11d      	bne.n	8034c94 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8034c58:	687b      	ldr	r3, [r7, #4]
 8034c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8034c5c:	041b      	lsls	r3, r3, #16
 8034c5e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8034c62:	687b      	ldr	r3, [r7, #4]
 8034c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8034c66:	0c1b      	lsrs	r3, r3, #16
 8034c68:	431a      	orrs	r2, r3
 8034c6a:	683b      	ldr	r3, [r7, #0]
 8034c6c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8034c6e:	683b      	ldr	r3, [r7, #0]
 8034c70:	691b      	ldr	r3, [r3, #16]
 8034c72:	3301      	adds	r3, #1
 8034c74:	029a      	lsls	r2, r3, #10
 8034c76:	687b      	ldr	r3, [r7, #4]
 8034c78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8034c7a:	687b      	ldr	r3, [r7, #4]
 8034c7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8034c7e:	687b      	ldr	r3, [r7, #4]
 8034c80:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8034c82:	687b      	ldr	r3, [r7, #4]
 8034c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8034c88:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8034c8a:	687b      	ldr	r3, [r7, #4]
 8034c8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8034c8e:	687b      	ldr	r3, [r7, #4]
 8034c90:	661a      	str	r2, [r3, #96]	; 0x60
 8034c92:	e00f      	b.n	8034cb4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8034c94:	687b      	ldr	r3, [r7, #4]
 8034c96:	681b      	ldr	r3, [r3, #0]
 8034c98:	4a58      	ldr	r2, [pc, #352]	; (8034dfc <HAL_SD_GetCardCSD+0x344>)
 8034c9a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8034c9c:	687b      	ldr	r3, [r7, #4]
 8034c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8034ca0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8034ca4:	687b      	ldr	r3, [r7, #4]
 8034ca6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8034ca8:	687b      	ldr	r3, [r7, #4]
 8034caa:	2201      	movs	r2, #1
 8034cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8034cb0:	2301      	movs	r3, #1
 8034cb2:	e09d      	b.n	8034df0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8034cb4:	687b      	ldr	r3, [r7, #4]
 8034cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8034cb8:	0b9b      	lsrs	r3, r3, #14
 8034cba:	b2db      	uxtb	r3, r3
 8034cbc:	f003 0301 	and.w	r3, r3, #1
 8034cc0:	b2da      	uxtb	r2, r3
 8034cc2:	683b      	ldr	r3, [r7, #0]
 8034cc4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8034cc6:	687b      	ldr	r3, [r7, #4]
 8034cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8034cca:	09db      	lsrs	r3, r3, #7
 8034ccc:	b2db      	uxtb	r3, r3
 8034cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034cd2:	b2da      	uxtb	r2, r3
 8034cd4:	683b      	ldr	r3, [r7, #0]
 8034cd6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8034cd8:	687b      	ldr	r3, [r7, #4]
 8034cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8034cdc:	b2db      	uxtb	r3, r3
 8034cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034ce2:	b2da      	uxtb	r2, r3
 8034ce4:	683b      	ldr	r3, [r7, #0]
 8034ce6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8034ce8:	687b      	ldr	r3, [r7, #4]
 8034cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034cec:	0fdb      	lsrs	r3, r3, #31
 8034cee:	b2da      	uxtb	r2, r3
 8034cf0:	683b      	ldr	r3, [r7, #0]
 8034cf2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8034cf4:	687b      	ldr	r3, [r7, #4]
 8034cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034cf8:	0f5b      	lsrs	r3, r3, #29
 8034cfa:	b2db      	uxtb	r3, r3
 8034cfc:	f003 0303 	and.w	r3, r3, #3
 8034d00:	b2da      	uxtb	r2, r3
 8034d02:	683b      	ldr	r3, [r7, #0]
 8034d04:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8034d06:	687b      	ldr	r3, [r7, #4]
 8034d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034d0a:	0e9b      	lsrs	r3, r3, #26
 8034d0c:	b2db      	uxtb	r3, r3
 8034d0e:	f003 0307 	and.w	r3, r3, #7
 8034d12:	b2da      	uxtb	r2, r3
 8034d14:	683b      	ldr	r3, [r7, #0]
 8034d16:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8034d18:	687b      	ldr	r3, [r7, #4]
 8034d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034d1c:	0d9b      	lsrs	r3, r3, #22
 8034d1e:	b2db      	uxtb	r3, r3
 8034d20:	f003 030f 	and.w	r3, r3, #15
 8034d24:	b2da      	uxtb	r2, r3
 8034d26:	683b      	ldr	r3, [r7, #0]
 8034d28:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8034d2a:	687b      	ldr	r3, [r7, #4]
 8034d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034d2e:	0d5b      	lsrs	r3, r3, #21
 8034d30:	b2db      	uxtb	r3, r3
 8034d32:	f003 0301 	and.w	r3, r3, #1
 8034d36:	b2da      	uxtb	r2, r3
 8034d38:	683b      	ldr	r3, [r7, #0]
 8034d3a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8034d3e:	683b      	ldr	r3, [r7, #0]
 8034d40:	2200      	movs	r2, #0
 8034d42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8034d46:	687b      	ldr	r3, [r7, #4]
 8034d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034d4a:	0c1b      	lsrs	r3, r3, #16
 8034d4c:	b2db      	uxtb	r3, r3
 8034d4e:	f003 0301 	and.w	r3, r3, #1
 8034d52:	b2da      	uxtb	r2, r3
 8034d54:	683b      	ldr	r3, [r7, #0]
 8034d56:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8034d5a:	687b      	ldr	r3, [r7, #4]
 8034d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034d5e:	0bdb      	lsrs	r3, r3, #15
 8034d60:	b2db      	uxtb	r3, r3
 8034d62:	f003 0301 	and.w	r3, r3, #1
 8034d66:	b2da      	uxtb	r2, r3
 8034d68:	683b      	ldr	r3, [r7, #0]
 8034d6a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8034d6e:	687b      	ldr	r3, [r7, #4]
 8034d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034d72:	0b9b      	lsrs	r3, r3, #14
 8034d74:	b2db      	uxtb	r3, r3
 8034d76:	f003 0301 	and.w	r3, r3, #1
 8034d7a:	b2da      	uxtb	r2, r3
 8034d7c:	683b      	ldr	r3, [r7, #0]
 8034d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8034d82:	687b      	ldr	r3, [r7, #4]
 8034d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034d86:	0b5b      	lsrs	r3, r3, #13
 8034d88:	b2db      	uxtb	r3, r3
 8034d8a:	f003 0301 	and.w	r3, r3, #1
 8034d8e:	b2da      	uxtb	r2, r3
 8034d90:	683b      	ldr	r3, [r7, #0]
 8034d92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8034d96:	687b      	ldr	r3, [r7, #4]
 8034d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034d9a:	0b1b      	lsrs	r3, r3, #12
 8034d9c:	b2db      	uxtb	r3, r3
 8034d9e:	f003 0301 	and.w	r3, r3, #1
 8034da2:	b2da      	uxtb	r2, r3
 8034da4:	683b      	ldr	r3, [r7, #0]
 8034da6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8034daa:	687b      	ldr	r3, [r7, #4]
 8034dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034dae:	0a9b      	lsrs	r3, r3, #10
 8034db0:	b2db      	uxtb	r3, r3
 8034db2:	f003 0303 	and.w	r3, r3, #3
 8034db6:	b2da      	uxtb	r2, r3
 8034db8:	683b      	ldr	r3, [r7, #0]
 8034dba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8034dbe:	687b      	ldr	r3, [r7, #4]
 8034dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034dc2:	0a1b      	lsrs	r3, r3, #8
 8034dc4:	b2db      	uxtb	r3, r3
 8034dc6:	f003 0303 	and.w	r3, r3, #3
 8034dca:	b2da      	uxtb	r2, r3
 8034dcc:	683b      	ldr	r3, [r7, #0]
 8034dce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8034dd2:	687b      	ldr	r3, [r7, #4]
 8034dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034dd6:	085b      	lsrs	r3, r3, #1
 8034dd8:	b2db      	uxtb	r3, r3
 8034dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034dde:	b2da      	uxtb	r2, r3
 8034de0:	683b      	ldr	r3, [r7, #0]
 8034de2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8034de6:	683b      	ldr	r3, [r7, #0]
 8034de8:	2201      	movs	r2, #1
 8034dea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8034dee:	2300      	movs	r3, #0
}
 8034df0:	4618      	mov	r0, r3
 8034df2:	370c      	adds	r7, #12
 8034df4:	46bd      	mov	sp, r7
 8034df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034dfa:	4770      	bx	lr
 8034dfc:	004005ff 	.word	0x004005ff

08034e00 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8034e00:	b480      	push	{r7}
 8034e02:	b083      	sub	sp, #12
 8034e04:	af00      	add	r7, sp, #0
 8034e06:	6078      	str	r0, [r7, #4]
 8034e08:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8034e0a:	687b      	ldr	r3, [r7, #4]
 8034e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8034e0e:	683b      	ldr	r3, [r7, #0]
 8034e10:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8034e12:	687b      	ldr	r3, [r7, #4]
 8034e14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8034e16:	683b      	ldr	r3, [r7, #0]
 8034e18:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8034e1a:	687b      	ldr	r3, [r7, #4]
 8034e1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8034e1e:	683b      	ldr	r3, [r7, #0]
 8034e20:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8034e22:	687b      	ldr	r3, [r7, #4]
 8034e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8034e26:	683b      	ldr	r3, [r7, #0]
 8034e28:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8034e2a:	687b      	ldr	r3, [r7, #4]
 8034e2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8034e2e:	683b      	ldr	r3, [r7, #0]
 8034e30:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8034e32:	687b      	ldr	r3, [r7, #4]
 8034e34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8034e36:	683b      	ldr	r3, [r7, #0]
 8034e38:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8034e3a:	687b      	ldr	r3, [r7, #4]
 8034e3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8034e3e:	683b      	ldr	r3, [r7, #0]
 8034e40:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8034e42:	687b      	ldr	r3, [r7, #4]
 8034e44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8034e46:	683b      	ldr	r3, [r7, #0]
 8034e48:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8034e4a:	2300      	movs	r3, #0
}
 8034e4c:	4618      	mov	r0, r3
 8034e4e:	370c      	adds	r7, #12
 8034e50:	46bd      	mov	sp, r7
 8034e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034e56:	4770      	bx	lr

08034e58 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8034e58:	b580      	push	{r7, lr}
 8034e5a:	b086      	sub	sp, #24
 8034e5c:	af00      	add	r7, sp, #0
 8034e5e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8034e60:	2300      	movs	r3, #0
 8034e62:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8034e64:	f107 030c 	add.w	r3, r7, #12
 8034e68:	4619      	mov	r1, r3
 8034e6a:	6878      	ldr	r0, [r7, #4]
 8034e6c:	f000 f96e 	bl	803514c <SD_SendStatus>
 8034e70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8034e72:	697b      	ldr	r3, [r7, #20]
 8034e74:	2b00      	cmp	r3, #0
 8034e76:	d005      	beq.n	8034e84 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8034e78:	687b      	ldr	r3, [r7, #4]
 8034e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8034e7c:	697b      	ldr	r3, [r7, #20]
 8034e7e:	431a      	orrs	r2, r3
 8034e80:	687b      	ldr	r3, [r7, #4]
 8034e82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8034e84:	68fb      	ldr	r3, [r7, #12]
 8034e86:	0a5b      	lsrs	r3, r3, #9
 8034e88:	f003 030f 	and.w	r3, r3, #15
 8034e8c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8034e8e:	693b      	ldr	r3, [r7, #16]
}
 8034e90:	4618      	mov	r0, r3
 8034e92:	3718      	adds	r7, #24
 8034e94:	46bd      	mov	sp, r7
 8034e96:	bd80      	pop	{r7, pc}

08034e98 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8034e98:	b5b0      	push	{r4, r5, r7, lr}
 8034e9a:	b094      	sub	sp, #80	; 0x50
 8034e9c:	af04      	add	r7, sp, #16
 8034e9e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8034ea0:	2301      	movs	r3, #1
 8034ea2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8034ea4:	687b      	ldr	r3, [r7, #4]
 8034ea6:	681b      	ldr	r3, [r3, #0]
 8034ea8:	4618      	mov	r0, r3
 8034eaa:	f002 fb17 	bl	80374dc <SDIO_GetPowerState>
 8034eae:	4603      	mov	r3, r0
 8034eb0:	2b00      	cmp	r3, #0
 8034eb2:	d102      	bne.n	8034eba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8034eb4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8034eb8:	e0b6      	b.n	8035028 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8034eba:	687b      	ldr	r3, [r7, #4]
 8034ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034ebe:	2b03      	cmp	r3, #3
 8034ec0:	d02f      	beq.n	8034f22 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8034ec2:	687b      	ldr	r3, [r7, #4]
 8034ec4:	681b      	ldr	r3, [r3, #0]
 8034ec6:	4618      	mov	r0, r3
 8034ec8:	f002 fcfd 	bl	80378c6 <SDMMC_CmdSendCID>
 8034ecc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8034ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034ed0:	2b00      	cmp	r3, #0
 8034ed2:	d001      	beq.n	8034ed8 <SD_InitCard+0x40>
    {
      return errorstate;
 8034ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034ed6:	e0a7      	b.n	8035028 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8034ed8:	687b      	ldr	r3, [r7, #4]
 8034eda:	681b      	ldr	r3, [r3, #0]
 8034edc:	2100      	movs	r1, #0
 8034ede:	4618      	mov	r0, r3
 8034ee0:	f002 fb41 	bl	8037566 <SDIO_GetResponse>
 8034ee4:	4602      	mov	r2, r0
 8034ee6:	687b      	ldr	r3, [r7, #4]
 8034ee8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8034eea:	687b      	ldr	r3, [r7, #4]
 8034eec:	681b      	ldr	r3, [r3, #0]
 8034eee:	2104      	movs	r1, #4
 8034ef0:	4618      	mov	r0, r3
 8034ef2:	f002 fb38 	bl	8037566 <SDIO_GetResponse>
 8034ef6:	4602      	mov	r2, r0
 8034ef8:	687b      	ldr	r3, [r7, #4]
 8034efa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8034efc:	687b      	ldr	r3, [r7, #4]
 8034efe:	681b      	ldr	r3, [r3, #0]
 8034f00:	2108      	movs	r1, #8
 8034f02:	4618      	mov	r0, r3
 8034f04:	f002 fb2f 	bl	8037566 <SDIO_GetResponse>
 8034f08:	4602      	mov	r2, r0
 8034f0a:	687b      	ldr	r3, [r7, #4]
 8034f0c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8034f0e:	687b      	ldr	r3, [r7, #4]
 8034f10:	681b      	ldr	r3, [r3, #0]
 8034f12:	210c      	movs	r1, #12
 8034f14:	4618      	mov	r0, r3
 8034f16:	f002 fb26 	bl	8037566 <SDIO_GetResponse>
 8034f1a:	4602      	mov	r2, r0
 8034f1c:	687b      	ldr	r3, [r7, #4]
 8034f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8034f22:	687b      	ldr	r3, [r7, #4]
 8034f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034f26:	2b03      	cmp	r3, #3
 8034f28:	d00d      	beq.n	8034f46 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8034f2a:	687b      	ldr	r3, [r7, #4]
 8034f2c:	681b      	ldr	r3, [r3, #0]
 8034f2e:	f107 020e 	add.w	r2, r7, #14
 8034f32:	4611      	mov	r1, r2
 8034f34:	4618      	mov	r0, r3
 8034f36:	f002 fd03 	bl	8037940 <SDMMC_CmdSetRelAdd>
 8034f3a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8034f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034f3e:	2b00      	cmp	r3, #0
 8034f40:	d001      	beq.n	8034f46 <SD_InitCard+0xae>
    {
      return errorstate;
 8034f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034f44:	e070      	b.n	8035028 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8034f46:	687b      	ldr	r3, [r7, #4]
 8034f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034f4a:	2b03      	cmp	r3, #3
 8034f4c:	d036      	beq.n	8034fbc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8034f4e:	89fb      	ldrh	r3, [r7, #14]
 8034f50:	461a      	mov	r2, r3
 8034f52:	687b      	ldr	r3, [r7, #4]
 8034f54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8034f56:	687b      	ldr	r3, [r7, #4]
 8034f58:	681a      	ldr	r2, [r3, #0]
 8034f5a:	687b      	ldr	r3, [r7, #4]
 8034f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8034f5e:	041b      	lsls	r3, r3, #16
 8034f60:	4619      	mov	r1, r3
 8034f62:	4610      	mov	r0, r2
 8034f64:	f002 fccd 	bl	8037902 <SDMMC_CmdSendCSD>
 8034f68:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8034f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034f6c:	2b00      	cmp	r3, #0
 8034f6e:	d001      	beq.n	8034f74 <SD_InitCard+0xdc>
    {
      return errorstate;
 8034f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034f72:	e059      	b.n	8035028 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8034f74:	687b      	ldr	r3, [r7, #4]
 8034f76:	681b      	ldr	r3, [r3, #0]
 8034f78:	2100      	movs	r1, #0
 8034f7a:	4618      	mov	r0, r3
 8034f7c:	f002 faf3 	bl	8037566 <SDIO_GetResponse>
 8034f80:	4602      	mov	r2, r0
 8034f82:	687b      	ldr	r3, [r7, #4]
 8034f84:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8034f86:	687b      	ldr	r3, [r7, #4]
 8034f88:	681b      	ldr	r3, [r3, #0]
 8034f8a:	2104      	movs	r1, #4
 8034f8c:	4618      	mov	r0, r3
 8034f8e:	f002 faea 	bl	8037566 <SDIO_GetResponse>
 8034f92:	4602      	mov	r2, r0
 8034f94:	687b      	ldr	r3, [r7, #4]
 8034f96:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8034f98:	687b      	ldr	r3, [r7, #4]
 8034f9a:	681b      	ldr	r3, [r3, #0]
 8034f9c:	2108      	movs	r1, #8
 8034f9e:	4618      	mov	r0, r3
 8034fa0:	f002 fae1 	bl	8037566 <SDIO_GetResponse>
 8034fa4:	4602      	mov	r2, r0
 8034fa6:	687b      	ldr	r3, [r7, #4]
 8034fa8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8034faa:	687b      	ldr	r3, [r7, #4]
 8034fac:	681b      	ldr	r3, [r3, #0]
 8034fae:	210c      	movs	r1, #12
 8034fb0:	4618      	mov	r0, r3
 8034fb2:	f002 fad8 	bl	8037566 <SDIO_GetResponse>
 8034fb6:	4602      	mov	r2, r0
 8034fb8:	687b      	ldr	r3, [r7, #4]
 8034fba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8034fbc:	687b      	ldr	r3, [r7, #4]
 8034fbe:	681b      	ldr	r3, [r3, #0]
 8034fc0:	2104      	movs	r1, #4
 8034fc2:	4618      	mov	r0, r3
 8034fc4:	f002 facf 	bl	8037566 <SDIO_GetResponse>
 8034fc8:	4603      	mov	r3, r0
 8034fca:	0d1a      	lsrs	r2, r3, #20
 8034fcc:	687b      	ldr	r3, [r7, #4]
 8034fce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8034fd0:	f107 0310 	add.w	r3, r7, #16
 8034fd4:	4619      	mov	r1, r3
 8034fd6:	6878      	ldr	r0, [r7, #4]
 8034fd8:	f7ff fd6e 	bl	8034ab8 <HAL_SD_GetCardCSD>
 8034fdc:	4603      	mov	r3, r0
 8034fde:	2b00      	cmp	r3, #0
 8034fe0:	d002      	beq.n	8034fe8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8034fe2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8034fe6:	e01f      	b.n	8035028 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8034fe8:	687b      	ldr	r3, [r7, #4]
 8034fea:	6819      	ldr	r1, [r3, #0]
 8034fec:	687b      	ldr	r3, [r7, #4]
 8034fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8034ff0:	041b      	lsls	r3, r3, #16
 8034ff2:	461a      	mov	r2, r3
 8034ff4:	f04f 0300 	mov.w	r3, #0
 8034ff8:	4608      	mov	r0, r1
 8034ffa:	f002 fbbf 	bl	803777c <SDMMC_CmdSelDesel>
 8034ffe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8035000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035002:	2b00      	cmp	r3, #0
 8035004:	d001      	beq.n	803500a <SD_InitCard+0x172>
  {
    return errorstate;
 8035006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8035008:	e00e      	b.n	8035028 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 803500a:	687b      	ldr	r3, [r7, #4]
 803500c:	681d      	ldr	r5, [r3, #0]
 803500e:	687b      	ldr	r3, [r7, #4]
 8035010:	466c      	mov	r4, sp
 8035012:	f103 0210 	add.w	r2, r3, #16
 8035016:	ca07      	ldmia	r2, {r0, r1, r2}
 8035018:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 803501c:	3304      	adds	r3, #4
 803501e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8035020:	4628      	mov	r0, r5
 8035022:	f002 fa03 	bl	803742c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8035026:	2300      	movs	r3, #0
}
 8035028:	4618      	mov	r0, r3
 803502a:	3740      	adds	r7, #64	; 0x40
 803502c:	46bd      	mov	sp, r7
 803502e:	bdb0      	pop	{r4, r5, r7, pc}

08035030 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8035030:	b580      	push	{r7, lr}
 8035032:	b086      	sub	sp, #24
 8035034:	af00      	add	r7, sp, #0
 8035036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8035038:	2300      	movs	r3, #0
 803503a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 803503c:	2300      	movs	r3, #0
 803503e:	617b      	str	r3, [r7, #20]
 8035040:	2300      	movs	r3, #0
 8035042:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8035044:	687b      	ldr	r3, [r7, #4]
 8035046:	681b      	ldr	r3, [r3, #0]
 8035048:	4618      	mov	r0, r3
 803504a:	f002 fbba 	bl	80377c2 <SDMMC_CmdGoIdleState>
 803504e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8035050:	68fb      	ldr	r3, [r7, #12]
 8035052:	2b00      	cmp	r3, #0
 8035054:	d001      	beq.n	803505a <SD_PowerON+0x2a>
  {
    return errorstate;
 8035056:	68fb      	ldr	r3, [r7, #12]
 8035058:	e072      	b.n	8035140 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 803505a:	687b      	ldr	r3, [r7, #4]
 803505c:	681b      	ldr	r3, [r3, #0]
 803505e:	4618      	mov	r0, r3
 8035060:	f002 fbcd 	bl	80377fe <SDMMC_CmdOperCond>
 8035064:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8035066:	68fb      	ldr	r3, [r7, #12]
 8035068:	2b00      	cmp	r3, #0
 803506a:	d00d      	beq.n	8035088 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 803506c:	687b      	ldr	r3, [r7, #4]
 803506e:	2200      	movs	r2, #0
 8035070:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8035072:	687b      	ldr	r3, [r7, #4]
 8035074:	681b      	ldr	r3, [r3, #0]
 8035076:	4618      	mov	r0, r3
 8035078:	f002 fba3 	bl	80377c2 <SDMMC_CmdGoIdleState>
 803507c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 803507e:	68fb      	ldr	r3, [r7, #12]
 8035080:	2b00      	cmp	r3, #0
 8035082:	d004      	beq.n	803508e <SD_PowerON+0x5e>
    {
      return errorstate;
 8035084:	68fb      	ldr	r3, [r7, #12]
 8035086:	e05b      	b.n	8035140 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8035088:	687b      	ldr	r3, [r7, #4]
 803508a:	2201      	movs	r2, #1
 803508c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 803508e:	687b      	ldr	r3, [r7, #4]
 8035090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8035092:	2b01      	cmp	r3, #1
 8035094:	d137      	bne.n	8035106 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8035096:	687b      	ldr	r3, [r7, #4]
 8035098:	681b      	ldr	r3, [r3, #0]
 803509a:	2100      	movs	r1, #0
 803509c:	4618      	mov	r0, r3
 803509e:	f002 fbcd 	bl	803783c <SDMMC_CmdAppCommand>
 80350a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80350a4:	68fb      	ldr	r3, [r7, #12]
 80350a6:	2b00      	cmp	r3, #0
 80350a8:	d02d      	beq.n	8035106 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80350aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80350ae:	e047      	b.n	8035140 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80350b0:	687b      	ldr	r3, [r7, #4]
 80350b2:	681b      	ldr	r3, [r3, #0]
 80350b4:	2100      	movs	r1, #0
 80350b6:	4618      	mov	r0, r3
 80350b8:	f002 fbc0 	bl	803783c <SDMMC_CmdAppCommand>
 80350bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80350be:	68fb      	ldr	r3, [r7, #12]
 80350c0:	2b00      	cmp	r3, #0
 80350c2:	d001      	beq.n	80350c8 <SD_PowerON+0x98>
    {
      return errorstate;
 80350c4:	68fb      	ldr	r3, [r7, #12]
 80350c6:	e03b      	b.n	8035140 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80350c8:	687b      	ldr	r3, [r7, #4]
 80350ca:	681b      	ldr	r3, [r3, #0]
 80350cc:	491e      	ldr	r1, [pc, #120]	; (8035148 <SD_PowerON+0x118>)
 80350ce:	4618      	mov	r0, r3
 80350d0:	f002 fbd6 	bl	8037880 <SDMMC_CmdAppOperCommand>
 80350d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80350d6:	68fb      	ldr	r3, [r7, #12]
 80350d8:	2b00      	cmp	r3, #0
 80350da:	d002      	beq.n	80350e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80350dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80350e0:	e02e      	b.n	8035140 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80350e2:	687b      	ldr	r3, [r7, #4]
 80350e4:	681b      	ldr	r3, [r3, #0]
 80350e6:	2100      	movs	r1, #0
 80350e8:	4618      	mov	r0, r3
 80350ea:	f002 fa3c 	bl	8037566 <SDIO_GetResponse>
 80350ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80350f0:	697b      	ldr	r3, [r7, #20]
 80350f2:	0fdb      	lsrs	r3, r3, #31
 80350f4:	2b01      	cmp	r3, #1
 80350f6:	d101      	bne.n	80350fc <SD_PowerON+0xcc>
 80350f8:	2301      	movs	r3, #1
 80350fa:	e000      	b.n	80350fe <SD_PowerON+0xce>
 80350fc:	2300      	movs	r3, #0
 80350fe:	613b      	str	r3, [r7, #16]

    count++;
 8035100:	68bb      	ldr	r3, [r7, #8]
 8035102:	3301      	adds	r3, #1
 8035104:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8035106:	68bb      	ldr	r3, [r7, #8]
 8035108:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 803510c:	4293      	cmp	r3, r2
 803510e:	d802      	bhi.n	8035116 <SD_PowerON+0xe6>
 8035110:	693b      	ldr	r3, [r7, #16]
 8035112:	2b00      	cmp	r3, #0
 8035114:	d0cc      	beq.n	80350b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8035116:	68bb      	ldr	r3, [r7, #8]
 8035118:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 803511c:	4293      	cmp	r3, r2
 803511e:	d902      	bls.n	8035126 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8035120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8035124:	e00c      	b.n	8035140 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8035126:	697b      	ldr	r3, [r7, #20]
 8035128:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 803512c:	2b00      	cmp	r3, #0
 803512e:	d003      	beq.n	8035138 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8035130:	687b      	ldr	r3, [r7, #4]
 8035132:	2201      	movs	r2, #1
 8035134:	645a      	str	r2, [r3, #68]	; 0x44
 8035136:	e002      	b.n	803513e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8035138:	687b      	ldr	r3, [r7, #4]
 803513a:	2200      	movs	r2, #0
 803513c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 803513e:	2300      	movs	r3, #0
}
 8035140:	4618      	mov	r0, r3
 8035142:	3718      	adds	r7, #24
 8035144:	46bd      	mov	sp, r7
 8035146:	bd80      	pop	{r7, pc}
 8035148:	c1100000 	.word	0xc1100000

0803514c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 803514c:	b580      	push	{r7, lr}
 803514e:	b084      	sub	sp, #16
 8035150:	af00      	add	r7, sp, #0
 8035152:	6078      	str	r0, [r7, #4]
 8035154:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8035156:	683b      	ldr	r3, [r7, #0]
 8035158:	2b00      	cmp	r3, #0
 803515a:	d102      	bne.n	8035162 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 803515c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8035160:	e018      	b.n	8035194 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8035162:	687b      	ldr	r3, [r7, #4]
 8035164:	681a      	ldr	r2, [r3, #0]
 8035166:	687b      	ldr	r3, [r7, #4]
 8035168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803516a:	041b      	lsls	r3, r3, #16
 803516c:	4619      	mov	r1, r3
 803516e:	4610      	mov	r0, r2
 8035170:	f002 fc07 	bl	8037982 <SDMMC_CmdSendStatus>
 8035174:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8035176:	68fb      	ldr	r3, [r7, #12]
 8035178:	2b00      	cmp	r3, #0
 803517a:	d001      	beq.n	8035180 <SD_SendStatus+0x34>
  {
    return errorstate;
 803517c:	68fb      	ldr	r3, [r7, #12]
 803517e:	e009      	b.n	8035194 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8035180:	687b      	ldr	r3, [r7, #4]
 8035182:	681b      	ldr	r3, [r3, #0]
 8035184:	2100      	movs	r1, #0
 8035186:	4618      	mov	r0, r3
 8035188:	f002 f9ed 	bl	8037566 <SDIO_GetResponse>
 803518c:	4602      	mov	r2, r0
 803518e:	683b      	ldr	r3, [r7, #0]
 8035190:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8035192:	2300      	movs	r3, #0
}
 8035194:	4618      	mov	r0, r3
 8035196:	3710      	adds	r7, #16
 8035198:	46bd      	mov	sp, r7
 803519a:	bd80      	pop	{r7, pc}

0803519c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 803519c:	b580      	push	{r7, lr}
 803519e:	b082      	sub	sp, #8
 80351a0:	af00      	add	r7, sp, #0
 80351a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80351a4:	687b      	ldr	r3, [r7, #4]
 80351a6:	2b00      	cmp	r3, #0
 80351a8:	d101      	bne.n	80351ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80351aa:	2301      	movs	r3, #1
 80351ac:	e07b      	b.n	80352a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80351ae:	687b      	ldr	r3, [r7, #4]
 80351b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80351b2:	2b00      	cmp	r3, #0
 80351b4:	d108      	bne.n	80351c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80351b6:	687b      	ldr	r3, [r7, #4]
 80351b8:	685b      	ldr	r3, [r3, #4]
 80351ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80351be:	d009      	beq.n	80351d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80351c0:	687b      	ldr	r3, [r7, #4]
 80351c2:	2200      	movs	r2, #0
 80351c4:	61da      	str	r2, [r3, #28]
 80351c6:	e005      	b.n	80351d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80351c8:	687b      	ldr	r3, [r7, #4]
 80351ca:	2200      	movs	r2, #0
 80351cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80351ce:	687b      	ldr	r3, [r7, #4]
 80351d0:	2200      	movs	r2, #0
 80351d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80351d4:	687b      	ldr	r3, [r7, #4]
 80351d6:	2200      	movs	r2, #0
 80351d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80351da:	687b      	ldr	r3, [r7, #4]
 80351dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80351e0:	b2db      	uxtb	r3, r3
 80351e2:	2b00      	cmp	r3, #0
 80351e4:	d106      	bne.n	80351f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80351e6:	687b      	ldr	r3, [r7, #4]
 80351e8:	2200      	movs	r2, #0
 80351ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80351ee:	6878      	ldr	r0, [r7, #4]
 80351f0:	f7fd f8fe 	bl	80323f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80351f4:	687b      	ldr	r3, [r7, #4]
 80351f6:	2202      	movs	r2, #2
 80351f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80351fc:	687b      	ldr	r3, [r7, #4]
 80351fe:	681b      	ldr	r3, [r3, #0]
 8035200:	681a      	ldr	r2, [r3, #0]
 8035202:	687b      	ldr	r3, [r7, #4]
 8035204:	681b      	ldr	r3, [r3, #0]
 8035206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 803520a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 803520c:	687b      	ldr	r3, [r7, #4]
 803520e:	685b      	ldr	r3, [r3, #4]
 8035210:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8035214:	687b      	ldr	r3, [r7, #4]
 8035216:	689b      	ldr	r3, [r3, #8]
 8035218:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 803521c:	431a      	orrs	r2, r3
 803521e:	687b      	ldr	r3, [r7, #4]
 8035220:	68db      	ldr	r3, [r3, #12]
 8035222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8035226:	431a      	orrs	r2, r3
 8035228:	687b      	ldr	r3, [r7, #4]
 803522a:	691b      	ldr	r3, [r3, #16]
 803522c:	f003 0302 	and.w	r3, r3, #2
 8035230:	431a      	orrs	r2, r3
 8035232:	687b      	ldr	r3, [r7, #4]
 8035234:	695b      	ldr	r3, [r3, #20]
 8035236:	f003 0301 	and.w	r3, r3, #1
 803523a:	431a      	orrs	r2, r3
 803523c:	687b      	ldr	r3, [r7, #4]
 803523e:	699b      	ldr	r3, [r3, #24]
 8035240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8035244:	431a      	orrs	r2, r3
 8035246:	687b      	ldr	r3, [r7, #4]
 8035248:	69db      	ldr	r3, [r3, #28]
 803524a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 803524e:	431a      	orrs	r2, r3
 8035250:	687b      	ldr	r3, [r7, #4]
 8035252:	6a1b      	ldr	r3, [r3, #32]
 8035254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035258:	ea42 0103 	orr.w	r1, r2, r3
 803525c:	687b      	ldr	r3, [r7, #4]
 803525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035260:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8035264:	687b      	ldr	r3, [r7, #4]
 8035266:	681b      	ldr	r3, [r3, #0]
 8035268:	430a      	orrs	r2, r1
 803526a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 803526c:	687b      	ldr	r3, [r7, #4]
 803526e:	699b      	ldr	r3, [r3, #24]
 8035270:	0c1b      	lsrs	r3, r3, #16
 8035272:	f003 0104 	and.w	r1, r3, #4
 8035276:	687b      	ldr	r3, [r7, #4]
 8035278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803527a:	f003 0210 	and.w	r2, r3, #16
 803527e:	687b      	ldr	r3, [r7, #4]
 8035280:	681b      	ldr	r3, [r3, #0]
 8035282:	430a      	orrs	r2, r1
 8035284:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8035286:	687b      	ldr	r3, [r7, #4]
 8035288:	681b      	ldr	r3, [r3, #0]
 803528a:	69da      	ldr	r2, [r3, #28]
 803528c:	687b      	ldr	r3, [r7, #4]
 803528e:	681b      	ldr	r3, [r3, #0]
 8035290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8035294:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8035296:	687b      	ldr	r3, [r7, #4]
 8035298:	2200      	movs	r2, #0
 803529a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 803529c:	687b      	ldr	r3, [r7, #4]
 803529e:	2201      	movs	r2, #1
 80352a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80352a4:	2300      	movs	r3, #0
}
 80352a6:	4618      	mov	r0, r3
 80352a8:	3708      	adds	r7, #8
 80352aa:	46bd      	mov	sp, r7
 80352ac:	bd80      	pop	{r7, pc}

080352ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80352ae:	b580      	push	{r7, lr}
 80352b0:	b088      	sub	sp, #32
 80352b2:	af00      	add	r7, sp, #0
 80352b4:	60f8      	str	r0, [r7, #12]
 80352b6:	60b9      	str	r1, [r7, #8]
 80352b8:	603b      	str	r3, [r7, #0]
 80352ba:	4613      	mov	r3, r2
 80352bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80352be:	2300      	movs	r3, #0
 80352c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80352c2:	68fb      	ldr	r3, [r7, #12]
 80352c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80352c8:	2b01      	cmp	r3, #1
 80352ca:	d101      	bne.n	80352d0 <HAL_SPI_Transmit+0x22>
 80352cc:	2302      	movs	r3, #2
 80352ce:	e126      	b.n	803551e <HAL_SPI_Transmit+0x270>
 80352d0:	68fb      	ldr	r3, [r7, #12]
 80352d2:	2201      	movs	r2, #1
 80352d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80352d8:	f7fd fd06 	bl	8032ce8 <HAL_GetTick>
 80352dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80352de:	88fb      	ldrh	r3, [r7, #6]
 80352e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80352e2:	68fb      	ldr	r3, [r7, #12]
 80352e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80352e8:	b2db      	uxtb	r3, r3
 80352ea:	2b01      	cmp	r3, #1
 80352ec:	d002      	beq.n	80352f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80352ee:	2302      	movs	r3, #2
 80352f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80352f2:	e10b      	b.n	803550c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80352f4:	68bb      	ldr	r3, [r7, #8]
 80352f6:	2b00      	cmp	r3, #0
 80352f8:	d002      	beq.n	8035300 <HAL_SPI_Transmit+0x52>
 80352fa:	88fb      	ldrh	r3, [r7, #6]
 80352fc:	2b00      	cmp	r3, #0
 80352fe:	d102      	bne.n	8035306 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8035300:	2301      	movs	r3, #1
 8035302:	77fb      	strb	r3, [r7, #31]
    goto error;
 8035304:	e102      	b.n	803550c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8035306:	68fb      	ldr	r3, [r7, #12]
 8035308:	2203      	movs	r2, #3
 803530a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 803530e:	68fb      	ldr	r3, [r7, #12]
 8035310:	2200      	movs	r2, #0
 8035312:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8035314:	68fb      	ldr	r3, [r7, #12]
 8035316:	68ba      	ldr	r2, [r7, #8]
 8035318:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 803531a:	68fb      	ldr	r3, [r7, #12]
 803531c:	88fa      	ldrh	r2, [r7, #6]
 803531e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8035320:	68fb      	ldr	r3, [r7, #12]
 8035322:	88fa      	ldrh	r2, [r7, #6]
 8035324:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8035326:	68fb      	ldr	r3, [r7, #12]
 8035328:	2200      	movs	r2, #0
 803532a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 803532c:	68fb      	ldr	r3, [r7, #12]
 803532e:	2200      	movs	r2, #0
 8035330:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8035332:	68fb      	ldr	r3, [r7, #12]
 8035334:	2200      	movs	r2, #0
 8035336:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8035338:	68fb      	ldr	r3, [r7, #12]
 803533a:	2200      	movs	r2, #0
 803533c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 803533e:	68fb      	ldr	r3, [r7, #12]
 8035340:	2200      	movs	r2, #0
 8035342:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8035344:	68fb      	ldr	r3, [r7, #12]
 8035346:	689b      	ldr	r3, [r3, #8]
 8035348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 803534c:	d10f      	bne.n	803536e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 803534e:	68fb      	ldr	r3, [r7, #12]
 8035350:	681b      	ldr	r3, [r3, #0]
 8035352:	681a      	ldr	r2, [r3, #0]
 8035354:	68fb      	ldr	r3, [r7, #12]
 8035356:	681b      	ldr	r3, [r3, #0]
 8035358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 803535c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 803535e:	68fb      	ldr	r3, [r7, #12]
 8035360:	681b      	ldr	r3, [r3, #0]
 8035362:	681a      	ldr	r2, [r3, #0]
 8035364:	68fb      	ldr	r3, [r7, #12]
 8035366:	681b      	ldr	r3, [r3, #0]
 8035368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 803536c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 803536e:	68fb      	ldr	r3, [r7, #12]
 8035370:	681b      	ldr	r3, [r3, #0]
 8035372:	681b      	ldr	r3, [r3, #0]
 8035374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035378:	2b40      	cmp	r3, #64	; 0x40
 803537a:	d007      	beq.n	803538c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 803537c:	68fb      	ldr	r3, [r7, #12]
 803537e:	681b      	ldr	r3, [r3, #0]
 8035380:	681a      	ldr	r2, [r3, #0]
 8035382:	68fb      	ldr	r3, [r7, #12]
 8035384:	681b      	ldr	r3, [r3, #0]
 8035386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803538a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 803538c:	68fb      	ldr	r3, [r7, #12]
 803538e:	68db      	ldr	r3, [r3, #12]
 8035390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8035394:	d14b      	bne.n	803542e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8035396:	68fb      	ldr	r3, [r7, #12]
 8035398:	685b      	ldr	r3, [r3, #4]
 803539a:	2b00      	cmp	r3, #0
 803539c:	d002      	beq.n	80353a4 <HAL_SPI_Transmit+0xf6>
 803539e:	8afb      	ldrh	r3, [r7, #22]
 80353a0:	2b01      	cmp	r3, #1
 80353a2:	d13e      	bne.n	8035422 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80353a4:	68fb      	ldr	r3, [r7, #12]
 80353a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80353a8:	881a      	ldrh	r2, [r3, #0]
 80353aa:	68fb      	ldr	r3, [r7, #12]
 80353ac:	681b      	ldr	r3, [r3, #0]
 80353ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80353b0:	68fb      	ldr	r3, [r7, #12]
 80353b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80353b4:	1c9a      	adds	r2, r3, #2
 80353b6:	68fb      	ldr	r3, [r7, #12]
 80353b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80353ba:	68fb      	ldr	r3, [r7, #12]
 80353bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80353be:	b29b      	uxth	r3, r3
 80353c0:	3b01      	subs	r3, #1
 80353c2:	b29a      	uxth	r2, r3
 80353c4:	68fb      	ldr	r3, [r7, #12]
 80353c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80353c8:	e02b      	b.n	8035422 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80353ca:	68fb      	ldr	r3, [r7, #12]
 80353cc:	681b      	ldr	r3, [r3, #0]
 80353ce:	689b      	ldr	r3, [r3, #8]
 80353d0:	f003 0302 	and.w	r3, r3, #2
 80353d4:	2b02      	cmp	r3, #2
 80353d6:	d112      	bne.n	80353fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80353d8:	68fb      	ldr	r3, [r7, #12]
 80353da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80353dc:	881a      	ldrh	r2, [r3, #0]
 80353de:	68fb      	ldr	r3, [r7, #12]
 80353e0:	681b      	ldr	r3, [r3, #0]
 80353e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80353e4:	68fb      	ldr	r3, [r7, #12]
 80353e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80353e8:	1c9a      	adds	r2, r3, #2
 80353ea:	68fb      	ldr	r3, [r7, #12]
 80353ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80353ee:	68fb      	ldr	r3, [r7, #12]
 80353f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80353f2:	b29b      	uxth	r3, r3
 80353f4:	3b01      	subs	r3, #1
 80353f6:	b29a      	uxth	r2, r3
 80353f8:	68fb      	ldr	r3, [r7, #12]
 80353fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80353fc:	e011      	b.n	8035422 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80353fe:	f7fd fc73 	bl	8032ce8 <HAL_GetTick>
 8035402:	4602      	mov	r2, r0
 8035404:	69bb      	ldr	r3, [r7, #24]
 8035406:	1ad3      	subs	r3, r2, r3
 8035408:	683a      	ldr	r2, [r7, #0]
 803540a:	429a      	cmp	r2, r3
 803540c:	d803      	bhi.n	8035416 <HAL_SPI_Transmit+0x168>
 803540e:	683b      	ldr	r3, [r7, #0]
 8035410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8035414:	d102      	bne.n	803541c <HAL_SPI_Transmit+0x16e>
 8035416:	683b      	ldr	r3, [r7, #0]
 8035418:	2b00      	cmp	r3, #0
 803541a:	d102      	bne.n	8035422 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 803541c:	2303      	movs	r3, #3
 803541e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8035420:	e074      	b.n	803550c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8035422:	68fb      	ldr	r3, [r7, #12]
 8035424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8035426:	b29b      	uxth	r3, r3
 8035428:	2b00      	cmp	r3, #0
 803542a:	d1ce      	bne.n	80353ca <HAL_SPI_Transmit+0x11c>
 803542c:	e04c      	b.n	80354c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 803542e:	68fb      	ldr	r3, [r7, #12]
 8035430:	685b      	ldr	r3, [r3, #4]
 8035432:	2b00      	cmp	r3, #0
 8035434:	d002      	beq.n	803543c <HAL_SPI_Transmit+0x18e>
 8035436:	8afb      	ldrh	r3, [r7, #22]
 8035438:	2b01      	cmp	r3, #1
 803543a:	d140      	bne.n	80354be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 803543c:	68fb      	ldr	r3, [r7, #12]
 803543e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8035440:	68fb      	ldr	r3, [r7, #12]
 8035442:	681b      	ldr	r3, [r3, #0]
 8035444:	330c      	adds	r3, #12
 8035446:	7812      	ldrb	r2, [r2, #0]
 8035448:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 803544a:	68fb      	ldr	r3, [r7, #12]
 803544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803544e:	1c5a      	adds	r2, r3, #1
 8035450:	68fb      	ldr	r3, [r7, #12]
 8035452:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8035454:	68fb      	ldr	r3, [r7, #12]
 8035456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8035458:	b29b      	uxth	r3, r3
 803545a:	3b01      	subs	r3, #1
 803545c:	b29a      	uxth	r2, r3
 803545e:	68fb      	ldr	r3, [r7, #12]
 8035460:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8035462:	e02c      	b.n	80354be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8035464:	68fb      	ldr	r3, [r7, #12]
 8035466:	681b      	ldr	r3, [r3, #0]
 8035468:	689b      	ldr	r3, [r3, #8]
 803546a:	f003 0302 	and.w	r3, r3, #2
 803546e:	2b02      	cmp	r3, #2
 8035470:	d113      	bne.n	803549a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8035472:	68fb      	ldr	r3, [r7, #12]
 8035474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8035476:	68fb      	ldr	r3, [r7, #12]
 8035478:	681b      	ldr	r3, [r3, #0]
 803547a:	330c      	adds	r3, #12
 803547c:	7812      	ldrb	r2, [r2, #0]
 803547e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8035480:	68fb      	ldr	r3, [r7, #12]
 8035482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035484:	1c5a      	adds	r2, r3, #1
 8035486:	68fb      	ldr	r3, [r7, #12]
 8035488:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 803548a:	68fb      	ldr	r3, [r7, #12]
 803548c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 803548e:	b29b      	uxth	r3, r3
 8035490:	3b01      	subs	r3, #1
 8035492:	b29a      	uxth	r2, r3
 8035494:	68fb      	ldr	r3, [r7, #12]
 8035496:	86da      	strh	r2, [r3, #54]	; 0x36
 8035498:	e011      	b.n	80354be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 803549a:	f7fd fc25 	bl	8032ce8 <HAL_GetTick>
 803549e:	4602      	mov	r2, r0
 80354a0:	69bb      	ldr	r3, [r7, #24]
 80354a2:	1ad3      	subs	r3, r2, r3
 80354a4:	683a      	ldr	r2, [r7, #0]
 80354a6:	429a      	cmp	r2, r3
 80354a8:	d803      	bhi.n	80354b2 <HAL_SPI_Transmit+0x204>
 80354aa:	683b      	ldr	r3, [r7, #0]
 80354ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80354b0:	d102      	bne.n	80354b8 <HAL_SPI_Transmit+0x20a>
 80354b2:	683b      	ldr	r3, [r7, #0]
 80354b4:	2b00      	cmp	r3, #0
 80354b6:	d102      	bne.n	80354be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80354b8:	2303      	movs	r3, #3
 80354ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80354bc:	e026      	b.n	803550c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80354be:	68fb      	ldr	r3, [r7, #12]
 80354c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80354c2:	b29b      	uxth	r3, r3
 80354c4:	2b00      	cmp	r3, #0
 80354c6:	d1cd      	bne.n	8035464 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80354c8:	69ba      	ldr	r2, [r7, #24]
 80354ca:	6839      	ldr	r1, [r7, #0]
 80354cc:	68f8      	ldr	r0, [r7, #12]
 80354ce:	f000 fbcb 	bl	8035c68 <SPI_EndRxTxTransaction>
 80354d2:	4603      	mov	r3, r0
 80354d4:	2b00      	cmp	r3, #0
 80354d6:	d002      	beq.n	80354de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80354d8:	68fb      	ldr	r3, [r7, #12]
 80354da:	2220      	movs	r2, #32
 80354dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80354de:	68fb      	ldr	r3, [r7, #12]
 80354e0:	689b      	ldr	r3, [r3, #8]
 80354e2:	2b00      	cmp	r3, #0
 80354e4:	d10a      	bne.n	80354fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80354e6:	2300      	movs	r3, #0
 80354e8:	613b      	str	r3, [r7, #16]
 80354ea:	68fb      	ldr	r3, [r7, #12]
 80354ec:	681b      	ldr	r3, [r3, #0]
 80354ee:	68db      	ldr	r3, [r3, #12]
 80354f0:	613b      	str	r3, [r7, #16]
 80354f2:	68fb      	ldr	r3, [r7, #12]
 80354f4:	681b      	ldr	r3, [r3, #0]
 80354f6:	689b      	ldr	r3, [r3, #8]
 80354f8:	613b      	str	r3, [r7, #16]
 80354fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80354fc:	68fb      	ldr	r3, [r7, #12]
 80354fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035500:	2b00      	cmp	r3, #0
 8035502:	d002      	beq.n	803550a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8035504:	2301      	movs	r3, #1
 8035506:	77fb      	strb	r3, [r7, #31]
 8035508:	e000      	b.n	803550c <HAL_SPI_Transmit+0x25e>
  }

error:
 803550a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 803550c:	68fb      	ldr	r3, [r7, #12]
 803550e:	2201      	movs	r2, #1
 8035510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8035514:	68fb      	ldr	r3, [r7, #12]
 8035516:	2200      	movs	r2, #0
 8035518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 803551c:	7ffb      	ldrb	r3, [r7, #31]
}
 803551e:	4618      	mov	r0, r3
 8035520:	3720      	adds	r7, #32
 8035522:	46bd      	mov	sp, r7
 8035524:	bd80      	pop	{r7, pc}

08035526 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8035526:	b580      	push	{r7, lr}
 8035528:	b088      	sub	sp, #32
 803552a:	af02      	add	r7, sp, #8
 803552c:	60f8      	str	r0, [r7, #12]
 803552e:	60b9      	str	r1, [r7, #8]
 8035530:	603b      	str	r3, [r7, #0]
 8035532:	4613      	mov	r3, r2
 8035534:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8035536:	2300      	movs	r3, #0
 8035538:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 803553a:	68fb      	ldr	r3, [r7, #12]
 803553c:	685b      	ldr	r3, [r3, #4]
 803553e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8035542:	d112      	bne.n	803556a <HAL_SPI_Receive+0x44>
 8035544:	68fb      	ldr	r3, [r7, #12]
 8035546:	689b      	ldr	r3, [r3, #8]
 8035548:	2b00      	cmp	r3, #0
 803554a:	d10e      	bne.n	803556a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 803554c:	68fb      	ldr	r3, [r7, #12]
 803554e:	2204      	movs	r2, #4
 8035550:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8035554:	88fa      	ldrh	r2, [r7, #6]
 8035556:	683b      	ldr	r3, [r7, #0]
 8035558:	9300      	str	r3, [sp, #0]
 803555a:	4613      	mov	r3, r2
 803555c:	68ba      	ldr	r2, [r7, #8]
 803555e:	68b9      	ldr	r1, [r7, #8]
 8035560:	68f8      	ldr	r0, [r7, #12]
 8035562:	f000 f8f1 	bl	8035748 <HAL_SPI_TransmitReceive>
 8035566:	4603      	mov	r3, r0
 8035568:	e0ea      	b.n	8035740 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 803556a:	68fb      	ldr	r3, [r7, #12]
 803556c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8035570:	2b01      	cmp	r3, #1
 8035572:	d101      	bne.n	8035578 <HAL_SPI_Receive+0x52>
 8035574:	2302      	movs	r3, #2
 8035576:	e0e3      	b.n	8035740 <HAL_SPI_Receive+0x21a>
 8035578:	68fb      	ldr	r3, [r7, #12]
 803557a:	2201      	movs	r2, #1
 803557c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8035580:	f7fd fbb2 	bl	8032ce8 <HAL_GetTick>
 8035584:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8035586:	68fb      	ldr	r3, [r7, #12]
 8035588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 803558c:	b2db      	uxtb	r3, r3
 803558e:	2b01      	cmp	r3, #1
 8035590:	d002      	beq.n	8035598 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8035592:	2302      	movs	r3, #2
 8035594:	75fb      	strb	r3, [r7, #23]
    goto error;
 8035596:	e0ca      	b.n	803572e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8035598:	68bb      	ldr	r3, [r7, #8]
 803559a:	2b00      	cmp	r3, #0
 803559c:	d002      	beq.n	80355a4 <HAL_SPI_Receive+0x7e>
 803559e:	88fb      	ldrh	r3, [r7, #6]
 80355a0:	2b00      	cmp	r3, #0
 80355a2:	d102      	bne.n	80355aa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80355a4:	2301      	movs	r3, #1
 80355a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80355a8:	e0c1      	b.n	803572e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80355aa:	68fb      	ldr	r3, [r7, #12]
 80355ac:	2204      	movs	r2, #4
 80355ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80355b2:	68fb      	ldr	r3, [r7, #12]
 80355b4:	2200      	movs	r2, #0
 80355b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80355b8:	68fb      	ldr	r3, [r7, #12]
 80355ba:	68ba      	ldr	r2, [r7, #8]
 80355bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80355be:	68fb      	ldr	r3, [r7, #12]
 80355c0:	88fa      	ldrh	r2, [r7, #6]
 80355c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80355c4:	68fb      	ldr	r3, [r7, #12]
 80355c6:	88fa      	ldrh	r2, [r7, #6]
 80355c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80355ca:	68fb      	ldr	r3, [r7, #12]
 80355cc:	2200      	movs	r2, #0
 80355ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80355d0:	68fb      	ldr	r3, [r7, #12]
 80355d2:	2200      	movs	r2, #0
 80355d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80355d6:	68fb      	ldr	r3, [r7, #12]
 80355d8:	2200      	movs	r2, #0
 80355da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80355dc:	68fb      	ldr	r3, [r7, #12]
 80355de:	2200      	movs	r2, #0
 80355e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80355e2:	68fb      	ldr	r3, [r7, #12]
 80355e4:	2200      	movs	r2, #0
 80355e6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80355e8:	68fb      	ldr	r3, [r7, #12]
 80355ea:	689b      	ldr	r3, [r3, #8]
 80355ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80355f0:	d10f      	bne.n	8035612 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80355f2:	68fb      	ldr	r3, [r7, #12]
 80355f4:	681b      	ldr	r3, [r3, #0]
 80355f6:	681a      	ldr	r2, [r3, #0]
 80355f8:	68fb      	ldr	r3, [r7, #12]
 80355fa:	681b      	ldr	r3, [r3, #0]
 80355fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8035600:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8035602:	68fb      	ldr	r3, [r7, #12]
 8035604:	681b      	ldr	r3, [r3, #0]
 8035606:	681a      	ldr	r2, [r3, #0]
 8035608:	68fb      	ldr	r3, [r7, #12]
 803560a:	681b      	ldr	r3, [r3, #0]
 803560c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8035610:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8035612:	68fb      	ldr	r3, [r7, #12]
 8035614:	681b      	ldr	r3, [r3, #0]
 8035616:	681b      	ldr	r3, [r3, #0]
 8035618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803561c:	2b40      	cmp	r3, #64	; 0x40
 803561e:	d007      	beq.n	8035630 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8035620:	68fb      	ldr	r3, [r7, #12]
 8035622:	681b      	ldr	r3, [r3, #0]
 8035624:	681a      	ldr	r2, [r3, #0]
 8035626:	68fb      	ldr	r3, [r7, #12]
 8035628:	681b      	ldr	r3, [r3, #0]
 803562a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 803562e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8035630:	68fb      	ldr	r3, [r7, #12]
 8035632:	68db      	ldr	r3, [r3, #12]
 8035634:	2b00      	cmp	r3, #0
 8035636:	d162      	bne.n	80356fe <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8035638:	e02e      	b.n	8035698 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 803563a:	68fb      	ldr	r3, [r7, #12]
 803563c:	681b      	ldr	r3, [r3, #0]
 803563e:	689b      	ldr	r3, [r3, #8]
 8035640:	f003 0301 	and.w	r3, r3, #1
 8035644:	2b01      	cmp	r3, #1
 8035646:	d115      	bne.n	8035674 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8035648:	68fb      	ldr	r3, [r7, #12]
 803564a:	681b      	ldr	r3, [r3, #0]
 803564c:	f103 020c 	add.w	r2, r3, #12
 8035650:	68fb      	ldr	r3, [r7, #12]
 8035652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035654:	7812      	ldrb	r2, [r2, #0]
 8035656:	b2d2      	uxtb	r2, r2
 8035658:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 803565a:	68fb      	ldr	r3, [r7, #12]
 803565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803565e:	1c5a      	adds	r2, r3, #1
 8035660:	68fb      	ldr	r3, [r7, #12]
 8035662:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8035664:	68fb      	ldr	r3, [r7, #12]
 8035666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8035668:	b29b      	uxth	r3, r3
 803566a:	3b01      	subs	r3, #1
 803566c:	b29a      	uxth	r2, r3
 803566e:	68fb      	ldr	r3, [r7, #12]
 8035670:	87da      	strh	r2, [r3, #62]	; 0x3e
 8035672:	e011      	b.n	8035698 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8035674:	f7fd fb38 	bl	8032ce8 <HAL_GetTick>
 8035678:	4602      	mov	r2, r0
 803567a:	693b      	ldr	r3, [r7, #16]
 803567c:	1ad3      	subs	r3, r2, r3
 803567e:	683a      	ldr	r2, [r7, #0]
 8035680:	429a      	cmp	r2, r3
 8035682:	d803      	bhi.n	803568c <HAL_SPI_Receive+0x166>
 8035684:	683b      	ldr	r3, [r7, #0]
 8035686:	f1b3 3fff 	cmp.w	r3, #4294967295
 803568a:	d102      	bne.n	8035692 <HAL_SPI_Receive+0x16c>
 803568c:	683b      	ldr	r3, [r7, #0]
 803568e:	2b00      	cmp	r3, #0
 8035690:	d102      	bne.n	8035698 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8035692:	2303      	movs	r3, #3
 8035694:	75fb      	strb	r3, [r7, #23]
          goto error;
 8035696:	e04a      	b.n	803572e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8035698:	68fb      	ldr	r3, [r7, #12]
 803569a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 803569c:	b29b      	uxth	r3, r3
 803569e:	2b00      	cmp	r3, #0
 80356a0:	d1cb      	bne.n	803563a <HAL_SPI_Receive+0x114>
 80356a2:	e031      	b.n	8035708 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80356a4:	68fb      	ldr	r3, [r7, #12]
 80356a6:	681b      	ldr	r3, [r3, #0]
 80356a8:	689b      	ldr	r3, [r3, #8]
 80356aa:	f003 0301 	and.w	r3, r3, #1
 80356ae:	2b01      	cmp	r3, #1
 80356b0:	d113      	bne.n	80356da <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80356b2:	68fb      	ldr	r3, [r7, #12]
 80356b4:	681b      	ldr	r3, [r3, #0]
 80356b6:	68da      	ldr	r2, [r3, #12]
 80356b8:	68fb      	ldr	r3, [r7, #12]
 80356ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80356bc:	b292      	uxth	r2, r2
 80356be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80356c0:	68fb      	ldr	r3, [r7, #12]
 80356c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80356c4:	1c9a      	adds	r2, r3, #2
 80356c6:	68fb      	ldr	r3, [r7, #12]
 80356c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80356ca:	68fb      	ldr	r3, [r7, #12]
 80356cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80356ce:	b29b      	uxth	r3, r3
 80356d0:	3b01      	subs	r3, #1
 80356d2:	b29a      	uxth	r2, r3
 80356d4:	68fb      	ldr	r3, [r7, #12]
 80356d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80356d8:	e011      	b.n	80356fe <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80356da:	f7fd fb05 	bl	8032ce8 <HAL_GetTick>
 80356de:	4602      	mov	r2, r0
 80356e0:	693b      	ldr	r3, [r7, #16]
 80356e2:	1ad3      	subs	r3, r2, r3
 80356e4:	683a      	ldr	r2, [r7, #0]
 80356e6:	429a      	cmp	r2, r3
 80356e8:	d803      	bhi.n	80356f2 <HAL_SPI_Receive+0x1cc>
 80356ea:	683b      	ldr	r3, [r7, #0]
 80356ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80356f0:	d102      	bne.n	80356f8 <HAL_SPI_Receive+0x1d2>
 80356f2:	683b      	ldr	r3, [r7, #0]
 80356f4:	2b00      	cmp	r3, #0
 80356f6:	d102      	bne.n	80356fe <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80356f8:	2303      	movs	r3, #3
 80356fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80356fc:	e017      	b.n	803572e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80356fe:	68fb      	ldr	r3, [r7, #12]
 8035700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8035702:	b29b      	uxth	r3, r3
 8035704:	2b00      	cmp	r3, #0
 8035706:	d1cd      	bne.n	80356a4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8035708:	693a      	ldr	r2, [r7, #16]
 803570a:	6839      	ldr	r1, [r7, #0]
 803570c:	68f8      	ldr	r0, [r7, #12]
 803570e:	f000 fa45 	bl	8035b9c <SPI_EndRxTransaction>
 8035712:	4603      	mov	r3, r0
 8035714:	2b00      	cmp	r3, #0
 8035716:	d002      	beq.n	803571e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8035718:	68fb      	ldr	r3, [r7, #12]
 803571a:	2220      	movs	r2, #32
 803571c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 803571e:	68fb      	ldr	r3, [r7, #12]
 8035720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035722:	2b00      	cmp	r3, #0
 8035724:	d002      	beq.n	803572c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8035726:	2301      	movs	r3, #1
 8035728:	75fb      	strb	r3, [r7, #23]
 803572a:	e000      	b.n	803572e <HAL_SPI_Receive+0x208>
  }

error :
 803572c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 803572e:	68fb      	ldr	r3, [r7, #12]
 8035730:	2201      	movs	r2, #1
 8035732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8035736:	68fb      	ldr	r3, [r7, #12]
 8035738:	2200      	movs	r2, #0
 803573a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 803573e:	7dfb      	ldrb	r3, [r7, #23]
}
 8035740:	4618      	mov	r0, r3
 8035742:	3718      	adds	r7, #24
 8035744:	46bd      	mov	sp, r7
 8035746:	bd80      	pop	{r7, pc}

08035748 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8035748:	b580      	push	{r7, lr}
 803574a:	b08c      	sub	sp, #48	; 0x30
 803574c:	af00      	add	r7, sp, #0
 803574e:	60f8      	str	r0, [r7, #12]
 8035750:	60b9      	str	r1, [r7, #8]
 8035752:	607a      	str	r2, [r7, #4]
 8035754:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8035756:	2301      	movs	r3, #1
 8035758:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 803575a:	2300      	movs	r3, #0
 803575c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8035760:	68fb      	ldr	r3, [r7, #12]
 8035762:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8035766:	2b01      	cmp	r3, #1
 8035768:	d101      	bne.n	803576e <HAL_SPI_TransmitReceive+0x26>
 803576a:	2302      	movs	r3, #2
 803576c:	e18a      	b.n	8035a84 <HAL_SPI_TransmitReceive+0x33c>
 803576e:	68fb      	ldr	r3, [r7, #12]
 8035770:	2201      	movs	r2, #1
 8035772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8035776:	f7fd fab7 	bl	8032ce8 <HAL_GetTick>
 803577a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 803577c:	68fb      	ldr	r3, [r7, #12]
 803577e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8035782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8035786:	68fb      	ldr	r3, [r7, #12]
 8035788:	685b      	ldr	r3, [r3, #4]
 803578a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 803578c:	887b      	ldrh	r3, [r7, #2]
 803578e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8035790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8035794:	2b01      	cmp	r3, #1
 8035796:	d00f      	beq.n	80357b8 <HAL_SPI_TransmitReceive+0x70>
 8035798:	69fb      	ldr	r3, [r7, #28]
 803579a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 803579e:	d107      	bne.n	80357b0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80357a0:	68fb      	ldr	r3, [r7, #12]
 80357a2:	689b      	ldr	r3, [r3, #8]
 80357a4:	2b00      	cmp	r3, #0
 80357a6:	d103      	bne.n	80357b0 <HAL_SPI_TransmitReceive+0x68>
 80357a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80357ac:	2b04      	cmp	r3, #4
 80357ae:	d003      	beq.n	80357b8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80357b0:	2302      	movs	r3, #2
 80357b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80357b6:	e15b      	b.n	8035a70 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80357b8:	68bb      	ldr	r3, [r7, #8]
 80357ba:	2b00      	cmp	r3, #0
 80357bc:	d005      	beq.n	80357ca <HAL_SPI_TransmitReceive+0x82>
 80357be:	687b      	ldr	r3, [r7, #4]
 80357c0:	2b00      	cmp	r3, #0
 80357c2:	d002      	beq.n	80357ca <HAL_SPI_TransmitReceive+0x82>
 80357c4:	887b      	ldrh	r3, [r7, #2]
 80357c6:	2b00      	cmp	r3, #0
 80357c8:	d103      	bne.n	80357d2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80357ca:	2301      	movs	r3, #1
 80357cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80357d0:	e14e      	b.n	8035a70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80357d2:	68fb      	ldr	r3, [r7, #12]
 80357d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80357d8:	b2db      	uxtb	r3, r3
 80357da:	2b04      	cmp	r3, #4
 80357dc:	d003      	beq.n	80357e6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80357de:	68fb      	ldr	r3, [r7, #12]
 80357e0:	2205      	movs	r2, #5
 80357e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80357e6:	68fb      	ldr	r3, [r7, #12]
 80357e8:	2200      	movs	r2, #0
 80357ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80357ec:	68fb      	ldr	r3, [r7, #12]
 80357ee:	687a      	ldr	r2, [r7, #4]
 80357f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80357f2:	68fb      	ldr	r3, [r7, #12]
 80357f4:	887a      	ldrh	r2, [r7, #2]
 80357f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80357f8:	68fb      	ldr	r3, [r7, #12]
 80357fa:	887a      	ldrh	r2, [r7, #2]
 80357fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80357fe:	68fb      	ldr	r3, [r7, #12]
 8035800:	68ba      	ldr	r2, [r7, #8]
 8035802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8035804:	68fb      	ldr	r3, [r7, #12]
 8035806:	887a      	ldrh	r2, [r7, #2]
 8035808:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 803580a:	68fb      	ldr	r3, [r7, #12]
 803580c:	887a      	ldrh	r2, [r7, #2]
 803580e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8035810:	68fb      	ldr	r3, [r7, #12]
 8035812:	2200      	movs	r2, #0
 8035814:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8035816:	68fb      	ldr	r3, [r7, #12]
 8035818:	2200      	movs	r2, #0
 803581a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 803581c:	68fb      	ldr	r3, [r7, #12]
 803581e:	681b      	ldr	r3, [r3, #0]
 8035820:	681b      	ldr	r3, [r3, #0]
 8035822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035826:	2b40      	cmp	r3, #64	; 0x40
 8035828:	d007      	beq.n	803583a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 803582a:	68fb      	ldr	r3, [r7, #12]
 803582c:	681b      	ldr	r3, [r3, #0]
 803582e:	681a      	ldr	r2, [r3, #0]
 8035830:	68fb      	ldr	r3, [r7, #12]
 8035832:	681b      	ldr	r3, [r3, #0]
 8035834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8035838:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 803583a:	68fb      	ldr	r3, [r7, #12]
 803583c:	68db      	ldr	r3, [r3, #12]
 803583e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8035842:	d178      	bne.n	8035936 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8035844:	68fb      	ldr	r3, [r7, #12]
 8035846:	685b      	ldr	r3, [r3, #4]
 8035848:	2b00      	cmp	r3, #0
 803584a:	d002      	beq.n	8035852 <HAL_SPI_TransmitReceive+0x10a>
 803584c:	8b7b      	ldrh	r3, [r7, #26]
 803584e:	2b01      	cmp	r3, #1
 8035850:	d166      	bne.n	8035920 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8035852:	68fb      	ldr	r3, [r7, #12]
 8035854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035856:	881a      	ldrh	r2, [r3, #0]
 8035858:	68fb      	ldr	r3, [r7, #12]
 803585a:	681b      	ldr	r3, [r3, #0]
 803585c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 803585e:	68fb      	ldr	r3, [r7, #12]
 8035860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035862:	1c9a      	adds	r2, r3, #2
 8035864:	68fb      	ldr	r3, [r7, #12]
 8035866:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8035868:	68fb      	ldr	r3, [r7, #12]
 803586a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 803586c:	b29b      	uxth	r3, r3
 803586e:	3b01      	subs	r3, #1
 8035870:	b29a      	uxth	r2, r3
 8035872:	68fb      	ldr	r3, [r7, #12]
 8035874:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8035876:	e053      	b.n	8035920 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8035878:	68fb      	ldr	r3, [r7, #12]
 803587a:	681b      	ldr	r3, [r3, #0]
 803587c:	689b      	ldr	r3, [r3, #8]
 803587e:	f003 0302 	and.w	r3, r3, #2
 8035882:	2b02      	cmp	r3, #2
 8035884:	d11b      	bne.n	80358be <HAL_SPI_TransmitReceive+0x176>
 8035886:	68fb      	ldr	r3, [r7, #12]
 8035888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 803588a:	b29b      	uxth	r3, r3
 803588c:	2b00      	cmp	r3, #0
 803588e:	d016      	beq.n	80358be <HAL_SPI_TransmitReceive+0x176>
 8035890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035892:	2b01      	cmp	r3, #1
 8035894:	d113      	bne.n	80358be <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8035896:	68fb      	ldr	r3, [r7, #12]
 8035898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803589a:	881a      	ldrh	r2, [r3, #0]
 803589c:	68fb      	ldr	r3, [r7, #12]
 803589e:	681b      	ldr	r3, [r3, #0]
 80358a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80358a2:	68fb      	ldr	r3, [r7, #12]
 80358a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80358a6:	1c9a      	adds	r2, r3, #2
 80358a8:	68fb      	ldr	r3, [r7, #12]
 80358aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80358ac:	68fb      	ldr	r3, [r7, #12]
 80358ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80358b0:	b29b      	uxth	r3, r3
 80358b2:	3b01      	subs	r3, #1
 80358b4:	b29a      	uxth	r2, r3
 80358b6:	68fb      	ldr	r3, [r7, #12]
 80358b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80358ba:	2300      	movs	r3, #0
 80358bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80358be:	68fb      	ldr	r3, [r7, #12]
 80358c0:	681b      	ldr	r3, [r3, #0]
 80358c2:	689b      	ldr	r3, [r3, #8]
 80358c4:	f003 0301 	and.w	r3, r3, #1
 80358c8:	2b01      	cmp	r3, #1
 80358ca:	d119      	bne.n	8035900 <HAL_SPI_TransmitReceive+0x1b8>
 80358cc:	68fb      	ldr	r3, [r7, #12]
 80358ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80358d0:	b29b      	uxth	r3, r3
 80358d2:	2b00      	cmp	r3, #0
 80358d4:	d014      	beq.n	8035900 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80358d6:	68fb      	ldr	r3, [r7, #12]
 80358d8:	681b      	ldr	r3, [r3, #0]
 80358da:	68da      	ldr	r2, [r3, #12]
 80358dc:	68fb      	ldr	r3, [r7, #12]
 80358de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80358e0:	b292      	uxth	r2, r2
 80358e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80358e4:	68fb      	ldr	r3, [r7, #12]
 80358e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80358e8:	1c9a      	adds	r2, r3, #2
 80358ea:	68fb      	ldr	r3, [r7, #12]
 80358ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80358ee:	68fb      	ldr	r3, [r7, #12]
 80358f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80358f2:	b29b      	uxth	r3, r3
 80358f4:	3b01      	subs	r3, #1
 80358f6:	b29a      	uxth	r2, r3
 80358f8:	68fb      	ldr	r3, [r7, #12]
 80358fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80358fc:	2301      	movs	r3, #1
 80358fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8035900:	f7fd f9f2 	bl	8032ce8 <HAL_GetTick>
 8035904:	4602      	mov	r2, r0
 8035906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035908:	1ad3      	subs	r3, r2, r3
 803590a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803590c:	429a      	cmp	r2, r3
 803590e:	d807      	bhi.n	8035920 <HAL_SPI_TransmitReceive+0x1d8>
 8035910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8035912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8035916:	d003      	beq.n	8035920 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8035918:	2303      	movs	r3, #3
 803591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 803591e:	e0a7      	b.n	8035a70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8035920:	68fb      	ldr	r3, [r7, #12]
 8035922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8035924:	b29b      	uxth	r3, r3
 8035926:	2b00      	cmp	r3, #0
 8035928:	d1a6      	bne.n	8035878 <HAL_SPI_TransmitReceive+0x130>
 803592a:	68fb      	ldr	r3, [r7, #12]
 803592c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 803592e:	b29b      	uxth	r3, r3
 8035930:	2b00      	cmp	r3, #0
 8035932:	d1a1      	bne.n	8035878 <HAL_SPI_TransmitReceive+0x130>
 8035934:	e07c      	b.n	8035a30 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8035936:	68fb      	ldr	r3, [r7, #12]
 8035938:	685b      	ldr	r3, [r3, #4]
 803593a:	2b00      	cmp	r3, #0
 803593c:	d002      	beq.n	8035944 <HAL_SPI_TransmitReceive+0x1fc>
 803593e:	8b7b      	ldrh	r3, [r7, #26]
 8035940:	2b01      	cmp	r3, #1
 8035942:	d16b      	bne.n	8035a1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8035944:	68fb      	ldr	r3, [r7, #12]
 8035946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8035948:	68fb      	ldr	r3, [r7, #12]
 803594a:	681b      	ldr	r3, [r3, #0]
 803594c:	330c      	adds	r3, #12
 803594e:	7812      	ldrb	r2, [r2, #0]
 8035950:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8035952:	68fb      	ldr	r3, [r7, #12]
 8035954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8035956:	1c5a      	adds	r2, r3, #1
 8035958:	68fb      	ldr	r3, [r7, #12]
 803595a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 803595c:	68fb      	ldr	r3, [r7, #12]
 803595e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8035960:	b29b      	uxth	r3, r3
 8035962:	3b01      	subs	r3, #1
 8035964:	b29a      	uxth	r2, r3
 8035966:	68fb      	ldr	r3, [r7, #12]
 8035968:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 803596a:	e057      	b.n	8035a1c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 803596c:	68fb      	ldr	r3, [r7, #12]
 803596e:	681b      	ldr	r3, [r3, #0]
 8035970:	689b      	ldr	r3, [r3, #8]
 8035972:	f003 0302 	and.w	r3, r3, #2
 8035976:	2b02      	cmp	r3, #2
 8035978:	d11c      	bne.n	80359b4 <HAL_SPI_TransmitReceive+0x26c>
 803597a:	68fb      	ldr	r3, [r7, #12]
 803597c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 803597e:	b29b      	uxth	r3, r3
 8035980:	2b00      	cmp	r3, #0
 8035982:	d017      	beq.n	80359b4 <HAL_SPI_TransmitReceive+0x26c>
 8035984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035986:	2b01      	cmp	r3, #1
 8035988:	d114      	bne.n	80359b4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 803598a:	68fb      	ldr	r3, [r7, #12]
 803598c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 803598e:	68fb      	ldr	r3, [r7, #12]
 8035990:	681b      	ldr	r3, [r3, #0]
 8035992:	330c      	adds	r3, #12
 8035994:	7812      	ldrb	r2, [r2, #0]
 8035996:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8035998:	68fb      	ldr	r3, [r7, #12]
 803599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803599c:	1c5a      	adds	r2, r3, #1
 803599e:	68fb      	ldr	r3, [r7, #12]
 80359a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80359a2:	68fb      	ldr	r3, [r7, #12]
 80359a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80359a6:	b29b      	uxth	r3, r3
 80359a8:	3b01      	subs	r3, #1
 80359aa:	b29a      	uxth	r2, r3
 80359ac:	68fb      	ldr	r3, [r7, #12]
 80359ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80359b0:	2300      	movs	r3, #0
 80359b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80359b4:	68fb      	ldr	r3, [r7, #12]
 80359b6:	681b      	ldr	r3, [r3, #0]
 80359b8:	689b      	ldr	r3, [r3, #8]
 80359ba:	f003 0301 	and.w	r3, r3, #1
 80359be:	2b01      	cmp	r3, #1
 80359c0:	d119      	bne.n	80359f6 <HAL_SPI_TransmitReceive+0x2ae>
 80359c2:	68fb      	ldr	r3, [r7, #12]
 80359c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80359c6:	b29b      	uxth	r3, r3
 80359c8:	2b00      	cmp	r3, #0
 80359ca:	d014      	beq.n	80359f6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80359cc:	68fb      	ldr	r3, [r7, #12]
 80359ce:	681b      	ldr	r3, [r3, #0]
 80359d0:	68da      	ldr	r2, [r3, #12]
 80359d2:	68fb      	ldr	r3, [r7, #12]
 80359d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80359d6:	b2d2      	uxtb	r2, r2
 80359d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80359da:	68fb      	ldr	r3, [r7, #12]
 80359dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80359de:	1c5a      	adds	r2, r3, #1
 80359e0:	68fb      	ldr	r3, [r7, #12]
 80359e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80359e4:	68fb      	ldr	r3, [r7, #12]
 80359e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80359e8:	b29b      	uxth	r3, r3
 80359ea:	3b01      	subs	r3, #1
 80359ec:	b29a      	uxth	r2, r3
 80359ee:	68fb      	ldr	r3, [r7, #12]
 80359f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80359f2:	2301      	movs	r3, #1
 80359f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80359f6:	f7fd f977 	bl	8032ce8 <HAL_GetTick>
 80359fa:	4602      	mov	r2, r0
 80359fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80359fe:	1ad3      	subs	r3, r2, r3
 8035a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8035a02:	429a      	cmp	r2, r3
 8035a04:	d803      	bhi.n	8035a0e <HAL_SPI_TransmitReceive+0x2c6>
 8035a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8035a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8035a0c:	d102      	bne.n	8035a14 <HAL_SPI_TransmitReceive+0x2cc>
 8035a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8035a10:	2b00      	cmp	r3, #0
 8035a12:	d103      	bne.n	8035a1c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8035a14:	2303      	movs	r3, #3
 8035a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8035a1a:	e029      	b.n	8035a70 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8035a1c:	68fb      	ldr	r3, [r7, #12]
 8035a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8035a20:	b29b      	uxth	r3, r3
 8035a22:	2b00      	cmp	r3, #0
 8035a24:	d1a2      	bne.n	803596c <HAL_SPI_TransmitReceive+0x224>
 8035a26:	68fb      	ldr	r3, [r7, #12]
 8035a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8035a2a:	b29b      	uxth	r3, r3
 8035a2c:	2b00      	cmp	r3, #0
 8035a2e:	d19d      	bne.n	803596c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8035a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8035a32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8035a34:	68f8      	ldr	r0, [r7, #12]
 8035a36:	f000 f917 	bl	8035c68 <SPI_EndRxTxTransaction>
 8035a3a:	4603      	mov	r3, r0
 8035a3c:	2b00      	cmp	r3, #0
 8035a3e:	d006      	beq.n	8035a4e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8035a40:	2301      	movs	r3, #1
 8035a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8035a46:	68fb      	ldr	r3, [r7, #12]
 8035a48:	2220      	movs	r2, #32
 8035a4a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8035a4c:	e010      	b.n	8035a70 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8035a4e:	68fb      	ldr	r3, [r7, #12]
 8035a50:	689b      	ldr	r3, [r3, #8]
 8035a52:	2b00      	cmp	r3, #0
 8035a54:	d10b      	bne.n	8035a6e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8035a56:	2300      	movs	r3, #0
 8035a58:	617b      	str	r3, [r7, #20]
 8035a5a:	68fb      	ldr	r3, [r7, #12]
 8035a5c:	681b      	ldr	r3, [r3, #0]
 8035a5e:	68db      	ldr	r3, [r3, #12]
 8035a60:	617b      	str	r3, [r7, #20]
 8035a62:	68fb      	ldr	r3, [r7, #12]
 8035a64:	681b      	ldr	r3, [r3, #0]
 8035a66:	689b      	ldr	r3, [r3, #8]
 8035a68:	617b      	str	r3, [r7, #20]
 8035a6a:	697b      	ldr	r3, [r7, #20]
 8035a6c:	e000      	b.n	8035a70 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8035a6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8035a70:	68fb      	ldr	r3, [r7, #12]
 8035a72:	2201      	movs	r2, #1
 8035a74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8035a78:	68fb      	ldr	r3, [r7, #12]
 8035a7a:	2200      	movs	r2, #0
 8035a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8035a80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8035a84:	4618      	mov	r0, r3
 8035a86:	3730      	adds	r7, #48	; 0x30
 8035a88:	46bd      	mov	sp, r7
 8035a8a:	bd80      	pop	{r7, pc}

08035a8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8035a8c:	b580      	push	{r7, lr}
 8035a8e:	b088      	sub	sp, #32
 8035a90:	af00      	add	r7, sp, #0
 8035a92:	60f8      	str	r0, [r7, #12]
 8035a94:	60b9      	str	r1, [r7, #8]
 8035a96:	603b      	str	r3, [r7, #0]
 8035a98:	4613      	mov	r3, r2
 8035a9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8035a9c:	f7fd f924 	bl	8032ce8 <HAL_GetTick>
 8035aa0:	4602      	mov	r2, r0
 8035aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8035aa4:	1a9b      	subs	r3, r3, r2
 8035aa6:	683a      	ldr	r2, [r7, #0]
 8035aa8:	4413      	add	r3, r2
 8035aaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8035aac:	f7fd f91c 	bl	8032ce8 <HAL_GetTick>
 8035ab0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8035ab2:	4b39      	ldr	r3, [pc, #228]	; (8035b98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8035ab4:	681b      	ldr	r3, [r3, #0]
 8035ab6:	015b      	lsls	r3, r3, #5
 8035ab8:	0d1b      	lsrs	r3, r3, #20
 8035aba:	69fa      	ldr	r2, [r7, #28]
 8035abc:	fb02 f303 	mul.w	r3, r2, r3
 8035ac0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8035ac2:	e054      	b.n	8035b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8035ac4:	683b      	ldr	r3, [r7, #0]
 8035ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8035aca:	d050      	beq.n	8035b6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8035acc:	f7fd f90c 	bl	8032ce8 <HAL_GetTick>
 8035ad0:	4602      	mov	r2, r0
 8035ad2:	69bb      	ldr	r3, [r7, #24]
 8035ad4:	1ad3      	subs	r3, r2, r3
 8035ad6:	69fa      	ldr	r2, [r7, #28]
 8035ad8:	429a      	cmp	r2, r3
 8035ada:	d902      	bls.n	8035ae2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8035adc:	69fb      	ldr	r3, [r7, #28]
 8035ade:	2b00      	cmp	r3, #0
 8035ae0:	d13d      	bne.n	8035b5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8035ae2:	68fb      	ldr	r3, [r7, #12]
 8035ae4:	681b      	ldr	r3, [r3, #0]
 8035ae6:	685a      	ldr	r2, [r3, #4]
 8035ae8:	68fb      	ldr	r3, [r7, #12]
 8035aea:	681b      	ldr	r3, [r3, #0]
 8035aec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8035af0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8035af2:	68fb      	ldr	r3, [r7, #12]
 8035af4:	685b      	ldr	r3, [r3, #4]
 8035af6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8035afa:	d111      	bne.n	8035b20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8035afc:	68fb      	ldr	r3, [r7, #12]
 8035afe:	689b      	ldr	r3, [r3, #8]
 8035b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8035b04:	d004      	beq.n	8035b10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8035b06:	68fb      	ldr	r3, [r7, #12]
 8035b08:	689b      	ldr	r3, [r3, #8]
 8035b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8035b0e:	d107      	bne.n	8035b20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8035b10:	68fb      	ldr	r3, [r7, #12]
 8035b12:	681b      	ldr	r3, [r3, #0]
 8035b14:	681a      	ldr	r2, [r3, #0]
 8035b16:	68fb      	ldr	r3, [r7, #12]
 8035b18:	681b      	ldr	r3, [r3, #0]
 8035b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8035b1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8035b20:	68fb      	ldr	r3, [r7, #12]
 8035b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8035b28:	d10f      	bne.n	8035b4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8035b2a:	68fb      	ldr	r3, [r7, #12]
 8035b2c:	681b      	ldr	r3, [r3, #0]
 8035b2e:	681a      	ldr	r2, [r3, #0]
 8035b30:	68fb      	ldr	r3, [r7, #12]
 8035b32:	681b      	ldr	r3, [r3, #0]
 8035b34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8035b38:	601a      	str	r2, [r3, #0]
 8035b3a:	68fb      	ldr	r3, [r7, #12]
 8035b3c:	681b      	ldr	r3, [r3, #0]
 8035b3e:	681a      	ldr	r2, [r3, #0]
 8035b40:	68fb      	ldr	r3, [r7, #12]
 8035b42:	681b      	ldr	r3, [r3, #0]
 8035b44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8035b48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8035b4a:	68fb      	ldr	r3, [r7, #12]
 8035b4c:	2201      	movs	r2, #1
 8035b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8035b52:	68fb      	ldr	r3, [r7, #12]
 8035b54:	2200      	movs	r2, #0
 8035b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8035b5a:	2303      	movs	r3, #3
 8035b5c:	e017      	b.n	8035b8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8035b5e:	697b      	ldr	r3, [r7, #20]
 8035b60:	2b00      	cmp	r3, #0
 8035b62:	d101      	bne.n	8035b68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8035b64:	2300      	movs	r3, #0
 8035b66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8035b68:	697b      	ldr	r3, [r7, #20]
 8035b6a:	3b01      	subs	r3, #1
 8035b6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8035b6e:	68fb      	ldr	r3, [r7, #12]
 8035b70:	681b      	ldr	r3, [r3, #0]
 8035b72:	689a      	ldr	r2, [r3, #8]
 8035b74:	68bb      	ldr	r3, [r7, #8]
 8035b76:	4013      	ands	r3, r2
 8035b78:	68ba      	ldr	r2, [r7, #8]
 8035b7a:	429a      	cmp	r2, r3
 8035b7c:	bf0c      	ite	eq
 8035b7e:	2301      	moveq	r3, #1
 8035b80:	2300      	movne	r3, #0
 8035b82:	b2db      	uxtb	r3, r3
 8035b84:	461a      	mov	r2, r3
 8035b86:	79fb      	ldrb	r3, [r7, #7]
 8035b88:	429a      	cmp	r2, r3
 8035b8a:	d19b      	bne.n	8035ac4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8035b8c:	2300      	movs	r3, #0
}
 8035b8e:	4618      	mov	r0, r3
 8035b90:	3720      	adds	r7, #32
 8035b92:	46bd      	mov	sp, r7
 8035b94:	bd80      	pop	{r7, pc}
 8035b96:	bf00      	nop
 8035b98:	20000020 	.word	0x20000020

08035b9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8035b9c:	b580      	push	{r7, lr}
 8035b9e:	b086      	sub	sp, #24
 8035ba0:	af02      	add	r7, sp, #8
 8035ba2:	60f8      	str	r0, [r7, #12]
 8035ba4:	60b9      	str	r1, [r7, #8]
 8035ba6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8035ba8:	68fb      	ldr	r3, [r7, #12]
 8035baa:	685b      	ldr	r3, [r3, #4]
 8035bac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8035bb0:	d111      	bne.n	8035bd6 <SPI_EndRxTransaction+0x3a>
 8035bb2:	68fb      	ldr	r3, [r7, #12]
 8035bb4:	689b      	ldr	r3, [r3, #8]
 8035bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8035bba:	d004      	beq.n	8035bc6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8035bbc:	68fb      	ldr	r3, [r7, #12]
 8035bbe:	689b      	ldr	r3, [r3, #8]
 8035bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8035bc4:	d107      	bne.n	8035bd6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8035bc6:	68fb      	ldr	r3, [r7, #12]
 8035bc8:	681b      	ldr	r3, [r3, #0]
 8035bca:	681a      	ldr	r2, [r3, #0]
 8035bcc:	68fb      	ldr	r3, [r7, #12]
 8035bce:	681b      	ldr	r3, [r3, #0]
 8035bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8035bd4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8035bd6:	68fb      	ldr	r3, [r7, #12]
 8035bd8:	685b      	ldr	r3, [r3, #4]
 8035bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8035bde:	d12a      	bne.n	8035c36 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8035be0:	68fb      	ldr	r3, [r7, #12]
 8035be2:	689b      	ldr	r3, [r3, #8]
 8035be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8035be8:	d012      	beq.n	8035c10 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8035bea:	687b      	ldr	r3, [r7, #4]
 8035bec:	9300      	str	r3, [sp, #0]
 8035bee:	68bb      	ldr	r3, [r7, #8]
 8035bf0:	2200      	movs	r2, #0
 8035bf2:	2180      	movs	r1, #128	; 0x80
 8035bf4:	68f8      	ldr	r0, [r7, #12]
 8035bf6:	f7ff ff49 	bl	8035a8c <SPI_WaitFlagStateUntilTimeout>
 8035bfa:	4603      	mov	r3, r0
 8035bfc:	2b00      	cmp	r3, #0
 8035bfe:	d02d      	beq.n	8035c5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8035c00:	68fb      	ldr	r3, [r7, #12]
 8035c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035c04:	f043 0220 	orr.w	r2, r3, #32
 8035c08:	68fb      	ldr	r3, [r7, #12]
 8035c0a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8035c0c:	2303      	movs	r3, #3
 8035c0e:	e026      	b.n	8035c5e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8035c10:	687b      	ldr	r3, [r7, #4]
 8035c12:	9300      	str	r3, [sp, #0]
 8035c14:	68bb      	ldr	r3, [r7, #8]
 8035c16:	2200      	movs	r2, #0
 8035c18:	2101      	movs	r1, #1
 8035c1a:	68f8      	ldr	r0, [r7, #12]
 8035c1c:	f7ff ff36 	bl	8035a8c <SPI_WaitFlagStateUntilTimeout>
 8035c20:	4603      	mov	r3, r0
 8035c22:	2b00      	cmp	r3, #0
 8035c24:	d01a      	beq.n	8035c5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8035c26:	68fb      	ldr	r3, [r7, #12]
 8035c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035c2a:	f043 0220 	orr.w	r2, r3, #32
 8035c2e:	68fb      	ldr	r3, [r7, #12]
 8035c30:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8035c32:	2303      	movs	r3, #3
 8035c34:	e013      	b.n	8035c5e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8035c36:	687b      	ldr	r3, [r7, #4]
 8035c38:	9300      	str	r3, [sp, #0]
 8035c3a:	68bb      	ldr	r3, [r7, #8]
 8035c3c:	2200      	movs	r2, #0
 8035c3e:	2101      	movs	r1, #1
 8035c40:	68f8      	ldr	r0, [r7, #12]
 8035c42:	f7ff ff23 	bl	8035a8c <SPI_WaitFlagStateUntilTimeout>
 8035c46:	4603      	mov	r3, r0
 8035c48:	2b00      	cmp	r3, #0
 8035c4a:	d007      	beq.n	8035c5c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8035c4c:	68fb      	ldr	r3, [r7, #12]
 8035c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035c50:	f043 0220 	orr.w	r2, r3, #32
 8035c54:	68fb      	ldr	r3, [r7, #12]
 8035c56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8035c58:	2303      	movs	r3, #3
 8035c5a:	e000      	b.n	8035c5e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8035c5c:	2300      	movs	r3, #0
}
 8035c5e:	4618      	mov	r0, r3
 8035c60:	3710      	adds	r7, #16
 8035c62:	46bd      	mov	sp, r7
 8035c64:	bd80      	pop	{r7, pc}
	...

08035c68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8035c68:	b580      	push	{r7, lr}
 8035c6a:	b088      	sub	sp, #32
 8035c6c:	af02      	add	r7, sp, #8
 8035c6e:	60f8      	str	r0, [r7, #12]
 8035c70:	60b9      	str	r1, [r7, #8]
 8035c72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8035c74:	4b1b      	ldr	r3, [pc, #108]	; (8035ce4 <SPI_EndRxTxTransaction+0x7c>)
 8035c76:	681b      	ldr	r3, [r3, #0]
 8035c78:	4a1b      	ldr	r2, [pc, #108]	; (8035ce8 <SPI_EndRxTxTransaction+0x80>)
 8035c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8035c7e:	0d5b      	lsrs	r3, r3, #21
 8035c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8035c84:	fb02 f303 	mul.w	r3, r2, r3
 8035c88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8035c8a:	68fb      	ldr	r3, [r7, #12]
 8035c8c:	685b      	ldr	r3, [r3, #4]
 8035c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8035c92:	d112      	bne.n	8035cba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8035c94:	687b      	ldr	r3, [r7, #4]
 8035c96:	9300      	str	r3, [sp, #0]
 8035c98:	68bb      	ldr	r3, [r7, #8]
 8035c9a:	2200      	movs	r2, #0
 8035c9c:	2180      	movs	r1, #128	; 0x80
 8035c9e:	68f8      	ldr	r0, [r7, #12]
 8035ca0:	f7ff fef4 	bl	8035a8c <SPI_WaitFlagStateUntilTimeout>
 8035ca4:	4603      	mov	r3, r0
 8035ca6:	2b00      	cmp	r3, #0
 8035ca8:	d016      	beq.n	8035cd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8035caa:	68fb      	ldr	r3, [r7, #12]
 8035cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8035cae:	f043 0220 	orr.w	r2, r3, #32
 8035cb2:	68fb      	ldr	r3, [r7, #12]
 8035cb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8035cb6:	2303      	movs	r3, #3
 8035cb8:	e00f      	b.n	8035cda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8035cba:	697b      	ldr	r3, [r7, #20]
 8035cbc:	2b00      	cmp	r3, #0
 8035cbe:	d00a      	beq.n	8035cd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8035cc0:	697b      	ldr	r3, [r7, #20]
 8035cc2:	3b01      	subs	r3, #1
 8035cc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8035cc6:	68fb      	ldr	r3, [r7, #12]
 8035cc8:	681b      	ldr	r3, [r3, #0]
 8035cca:	689b      	ldr	r3, [r3, #8]
 8035ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8035cd0:	2b80      	cmp	r3, #128	; 0x80
 8035cd2:	d0f2      	beq.n	8035cba <SPI_EndRxTxTransaction+0x52>
 8035cd4:	e000      	b.n	8035cd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8035cd6:	bf00      	nop
  }

  return HAL_OK;
 8035cd8:	2300      	movs	r3, #0
}
 8035cda:	4618      	mov	r0, r3
 8035cdc:	3718      	adds	r7, #24
 8035cde:	46bd      	mov	sp, r7
 8035ce0:	bd80      	pop	{r7, pc}
 8035ce2:	bf00      	nop
 8035ce4:	20000020 	.word	0x20000020
 8035ce8:	165e9f81 	.word	0x165e9f81

08035cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8035cec:	b580      	push	{r7, lr}
 8035cee:	b082      	sub	sp, #8
 8035cf0:	af00      	add	r7, sp, #0
 8035cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8035cf4:	687b      	ldr	r3, [r7, #4]
 8035cf6:	2b00      	cmp	r3, #0
 8035cf8:	d101      	bne.n	8035cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8035cfa:	2301      	movs	r3, #1
 8035cfc:	e041      	b.n	8035d82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8035cfe:	687b      	ldr	r3, [r7, #4]
 8035d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8035d04:	b2db      	uxtb	r3, r3
 8035d06:	2b00      	cmp	r3, #0
 8035d08:	d106      	bne.n	8035d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8035d0a:	687b      	ldr	r3, [r7, #4]
 8035d0c:	2200      	movs	r2, #0
 8035d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8035d12:	6878      	ldr	r0, [r7, #4]
 8035d14:	f7fc fbb4 	bl	8032480 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8035d18:	687b      	ldr	r3, [r7, #4]
 8035d1a:	2202      	movs	r2, #2
 8035d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8035d20:	687b      	ldr	r3, [r7, #4]
 8035d22:	681a      	ldr	r2, [r3, #0]
 8035d24:	687b      	ldr	r3, [r7, #4]
 8035d26:	3304      	adds	r3, #4
 8035d28:	4619      	mov	r1, r3
 8035d2a:	4610      	mov	r0, r2
 8035d2c:	f000 f95e 	bl	8035fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8035d30:	687b      	ldr	r3, [r7, #4]
 8035d32:	2201      	movs	r2, #1
 8035d34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8035d38:	687b      	ldr	r3, [r7, #4]
 8035d3a:	2201      	movs	r2, #1
 8035d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8035d40:	687b      	ldr	r3, [r7, #4]
 8035d42:	2201      	movs	r2, #1
 8035d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8035d48:	687b      	ldr	r3, [r7, #4]
 8035d4a:	2201      	movs	r2, #1
 8035d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8035d50:	687b      	ldr	r3, [r7, #4]
 8035d52:	2201      	movs	r2, #1
 8035d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8035d58:	687b      	ldr	r3, [r7, #4]
 8035d5a:	2201      	movs	r2, #1
 8035d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8035d60:	687b      	ldr	r3, [r7, #4]
 8035d62:	2201      	movs	r2, #1
 8035d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8035d68:	687b      	ldr	r3, [r7, #4]
 8035d6a:	2201      	movs	r2, #1
 8035d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8035d70:	687b      	ldr	r3, [r7, #4]
 8035d72:	2201      	movs	r2, #1
 8035d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8035d78:	687b      	ldr	r3, [r7, #4]
 8035d7a:	2201      	movs	r2, #1
 8035d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8035d80:	2300      	movs	r3, #0
}
 8035d82:	4618      	mov	r0, r3
 8035d84:	3708      	adds	r7, #8
 8035d86:	46bd      	mov	sp, r7
 8035d88:	bd80      	pop	{r7, pc}
	...

08035d8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8035d8c:	b480      	push	{r7}
 8035d8e:	b085      	sub	sp, #20
 8035d90:	af00      	add	r7, sp, #0
 8035d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8035d94:	687b      	ldr	r3, [r7, #4]
 8035d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8035d9a:	b2db      	uxtb	r3, r3
 8035d9c:	2b01      	cmp	r3, #1
 8035d9e:	d001      	beq.n	8035da4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8035da0:	2301      	movs	r3, #1
 8035da2:	e046      	b.n	8035e32 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8035da4:	687b      	ldr	r3, [r7, #4]
 8035da6:	2202      	movs	r2, #2
 8035da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8035dac:	687b      	ldr	r3, [r7, #4]
 8035dae:	681b      	ldr	r3, [r3, #0]
 8035db0:	4a23      	ldr	r2, [pc, #140]	; (8035e40 <HAL_TIM_Base_Start+0xb4>)
 8035db2:	4293      	cmp	r3, r2
 8035db4:	d022      	beq.n	8035dfc <HAL_TIM_Base_Start+0x70>
 8035db6:	687b      	ldr	r3, [r7, #4]
 8035db8:	681b      	ldr	r3, [r3, #0]
 8035dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8035dbe:	d01d      	beq.n	8035dfc <HAL_TIM_Base_Start+0x70>
 8035dc0:	687b      	ldr	r3, [r7, #4]
 8035dc2:	681b      	ldr	r3, [r3, #0]
 8035dc4:	4a1f      	ldr	r2, [pc, #124]	; (8035e44 <HAL_TIM_Base_Start+0xb8>)
 8035dc6:	4293      	cmp	r3, r2
 8035dc8:	d018      	beq.n	8035dfc <HAL_TIM_Base_Start+0x70>
 8035dca:	687b      	ldr	r3, [r7, #4]
 8035dcc:	681b      	ldr	r3, [r3, #0]
 8035dce:	4a1e      	ldr	r2, [pc, #120]	; (8035e48 <HAL_TIM_Base_Start+0xbc>)
 8035dd0:	4293      	cmp	r3, r2
 8035dd2:	d013      	beq.n	8035dfc <HAL_TIM_Base_Start+0x70>
 8035dd4:	687b      	ldr	r3, [r7, #4]
 8035dd6:	681b      	ldr	r3, [r3, #0]
 8035dd8:	4a1c      	ldr	r2, [pc, #112]	; (8035e4c <HAL_TIM_Base_Start+0xc0>)
 8035dda:	4293      	cmp	r3, r2
 8035ddc:	d00e      	beq.n	8035dfc <HAL_TIM_Base_Start+0x70>
 8035dde:	687b      	ldr	r3, [r7, #4]
 8035de0:	681b      	ldr	r3, [r3, #0]
 8035de2:	4a1b      	ldr	r2, [pc, #108]	; (8035e50 <HAL_TIM_Base_Start+0xc4>)
 8035de4:	4293      	cmp	r3, r2
 8035de6:	d009      	beq.n	8035dfc <HAL_TIM_Base_Start+0x70>
 8035de8:	687b      	ldr	r3, [r7, #4]
 8035dea:	681b      	ldr	r3, [r3, #0]
 8035dec:	4a19      	ldr	r2, [pc, #100]	; (8035e54 <HAL_TIM_Base_Start+0xc8>)
 8035dee:	4293      	cmp	r3, r2
 8035df0:	d004      	beq.n	8035dfc <HAL_TIM_Base_Start+0x70>
 8035df2:	687b      	ldr	r3, [r7, #4]
 8035df4:	681b      	ldr	r3, [r3, #0]
 8035df6:	4a18      	ldr	r2, [pc, #96]	; (8035e58 <HAL_TIM_Base_Start+0xcc>)
 8035df8:	4293      	cmp	r3, r2
 8035dfa:	d111      	bne.n	8035e20 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8035dfc:	687b      	ldr	r3, [r7, #4]
 8035dfe:	681b      	ldr	r3, [r3, #0]
 8035e00:	689b      	ldr	r3, [r3, #8]
 8035e02:	f003 0307 	and.w	r3, r3, #7
 8035e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8035e08:	68fb      	ldr	r3, [r7, #12]
 8035e0a:	2b06      	cmp	r3, #6
 8035e0c:	d010      	beq.n	8035e30 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8035e0e:	687b      	ldr	r3, [r7, #4]
 8035e10:	681b      	ldr	r3, [r3, #0]
 8035e12:	681a      	ldr	r2, [r3, #0]
 8035e14:	687b      	ldr	r3, [r7, #4]
 8035e16:	681b      	ldr	r3, [r3, #0]
 8035e18:	f042 0201 	orr.w	r2, r2, #1
 8035e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8035e1e:	e007      	b.n	8035e30 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8035e20:	687b      	ldr	r3, [r7, #4]
 8035e22:	681b      	ldr	r3, [r3, #0]
 8035e24:	681a      	ldr	r2, [r3, #0]
 8035e26:	687b      	ldr	r3, [r7, #4]
 8035e28:	681b      	ldr	r3, [r3, #0]
 8035e2a:	f042 0201 	orr.w	r2, r2, #1
 8035e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8035e30:	2300      	movs	r3, #0
}
 8035e32:	4618      	mov	r0, r3
 8035e34:	3714      	adds	r7, #20
 8035e36:	46bd      	mov	sp, r7
 8035e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035e3c:	4770      	bx	lr
 8035e3e:	bf00      	nop
 8035e40:	40010000 	.word	0x40010000
 8035e44:	40000400 	.word	0x40000400
 8035e48:	40000800 	.word	0x40000800
 8035e4c:	40000c00 	.word	0x40000c00
 8035e50:	40010400 	.word	0x40010400
 8035e54:	40014000 	.word	0x40014000
 8035e58:	40001800 	.word	0x40001800

08035e5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8035e5c:	b580      	push	{r7, lr}
 8035e5e:	b084      	sub	sp, #16
 8035e60:	af00      	add	r7, sp, #0
 8035e62:	6078      	str	r0, [r7, #4]
 8035e64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8035e66:	2300      	movs	r3, #0
 8035e68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8035e6a:	687b      	ldr	r3, [r7, #4]
 8035e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8035e70:	2b01      	cmp	r3, #1
 8035e72:	d101      	bne.n	8035e78 <HAL_TIM_ConfigClockSource+0x1c>
 8035e74:	2302      	movs	r3, #2
 8035e76:	e0b4      	b.n	8035fe2 <HAL_TIM_ConfigClockSource+0x186>
 8035e78:	687b      	ldr	r3, [r7, #4]
 8035e7a:	2201      	movs	r2, #1
 8035e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8035e80:	687b      	ldr	r3, [r7, #4]
 8035e82:	2202      	movs	r2, #2
 8035e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8035e88:	687b      	ldr	r3, [r7, #4]
 8035e8a:	681b      	ldr	r3, [r3, #0]
 8035e8c:	689b      	ldr	r3, [r3, #8]
 8035e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8035e90:	68bb      	ldr	r3, [r7, #8]
 8035e92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8035e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8035e98:	68bb      	ldr	r3, [r7, #8]
 8035e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8035e9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8035ea0:	687b      	ldr	r3, [r7, #4]
 8035ea2:	681b      	ldr	r3, [r3, #0]
 8035ea4:	68ba      	ldr	r2, [r7, #8]
 8035ea6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8035ea8:	683b      	ldr	r3, [r7, #0]
 8035eaa:	681b      	ldr	r3, [r3, #0]
 8035eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8035eb0:	d03e      	beq.n	8035f30 <HAL_TIM_ConfigClockSource+0xd4>
 8035eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8035eb6:	f200 8087 	bhi.w	8035fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8035eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035ebe:	f000 8086 	beq.w	8035fce <HAL_TIM_ConfigClockSource+0x172>
 8035ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035ec6:	d87f      	bhi.n	8035fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8035ec8:	2b70      	cmp	r3, #112	; 0x70
 8035eca:	d01a      	beq.n	8035f02 <HAL_TIM_ConfigClockSource+0xa6>
 8035ecc:	2b70      	cmp	r3, #112	; 0x70
 8035ece:	d87b      	bhi.n	8035fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8035ed0:	2b60      	cmp	r3, #96	; 0x60
 8035ed2:	d050      	beq.n	8035f76 <HAL_TIM_ConfigClockSource+0x11a>
 8035ed4:	2b60      	cmp	r3, #96	; 0x60
 8035ed6:	d877      	bhi.n	8035fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8035ed8:	2b50      	cmp	r3, #80	; 0x50
 8035eda:	d03c      	beq.n	8035f56 <HAL_TIM_ConfigClockSource+0xfa>
 8035edc:	2b50      	cmp	r3, #80	; 0x50
 8035ede:	d873      	bhi.n	8035fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8035ee0:	2b40      	cmp	r3, #64	; 0x40
 8035ee2:	d058      	beq.n	8035f96 <HAL_TIM_ConfigClockSource+0x13a>
 8035ee4:	2b40      	cmp	r3, #64	; 0x40
 8035ee6:	d86f      	bhi.n	8035fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8035ee8:	2b30      	cmp	r3, #48	; 0x30
 8035eea:	d064      	beq.n	8035fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8035eec:	2b30      	cmp	r3, #48	; 0x30
 8035eee:	d86b      	bhi.n	8035fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8035ef0:	2b20      	cmp	r3, #32
 8035ef2:	d060      	beq.n	8035fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8035ef4:	2b20      	cmp	r3, #32
 8035ef6:	d867      	bhi.n	8035fc8 <HAL_TIM_ConfigClockSource+0x16c>
 8035ef8:	2b00      	cmp	r3, #0
 8035efa:	d05c      	beq.n	8035fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8035efc:	2b10      	cmp	r3, #16
 8035efe:	d05a      	beq.n	8035fb6 <HAL_TIM_ConfigClockSource+0x15a>
 8035f00:	e062      	b.n	8035fc8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8035f02:	687b      	ldr	r3, [r7, #4]
 8035f04:	6818      	ldr	r0, [r3, #0]
 8035f06:	683b      	ldr	r3, [r7, #0]
 8035f08:	6899      	ldr	r1, [r3, #8]
 8035f0a:	683b      	ldr	r3, [r7, #0]
 8035f0c:	685a      	ldr	r2, [r3, #4]
 8035f0e:	683b      	ldr	r3, [r7, #0]
 8035f10:	68db      	ldr	r3, [r3, #12]
 8035f12:	f000 f985 	bl	8036220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8035f16:	687b      	ldr	r3, [r7, #4]
 8035f18:	681b      	ldr	r3, [r3, #0]
 8035f1a:	689b      	ldr	r3, [r3, #8]
 8035f1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8035f1e:	68bb      	ldr	r3, [r7, #8]
 8035f20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8035f24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8035f26:	687b      	ldr	r3, [r7, #4]
 8035f28:	681b      	ldr	r3, [r3, #0]
 8035f2a:	68ba      	ldr	r2, [r7, #8]
 8035f2c:	609a      	str	r2, [r3, #8]
      break;
 8035f2e:	e04f      	b.n	8035fd0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8035f30:	687b      	ldr	r3, [r7, #4]
 8035f32:	6818      	ldr	r0, [r3, #0]
 8035f34:	683b      	ldr	r3, [r7, #0]
 8035f36:	6899      	ldr	r1, [r3, #8]
 8035f38:	683b      	ldr	r3, [r7, #0]
 8035f3a:	685a      	ldr	r2, [r3, #4]
 8035f3c:	683b      	ldr	r3, [r7, #0]
 8035f3e:	68db      	ldr	r3, [r3, #12]
 8035f40:	f000 f96e 	bl	8036220 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8035f44:	687b      	ldr	r3, [r7, #4]
 8035f46:	681b      	ldr	r3, [r3, #0]
 8035f48:	689a      	ldr	r2, [r3, #8]
 8035f4a:	687b      	ldr	r3, [r7, #4]
 8035f4c:	681b      	ldr	r3, [r3, #0]
 8035f4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8035f52:	609a      	str	r2, [r3, #8]
      break;
 8035f54:	e03c      	b.n	8035fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8035f56:	687b      	ldr	r3, [r7, #4]
 8035f58:	6818      	ldr	r0, [r3, #0]
 8035f5a:	683b      	ldr	r3, [r7, #0]
 8035f5c:	6859      	ldr	r1, [r3, #4]
 8035f5e:	683b      	ldr	r3, [r7, #0]
 8035f60:	68db      	ldr	r3, [r3, #12]
 8035f62:	461a      	mov	r2, r3
 8035f64:	f000 f8e2 	bl	803612c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8035f68:	687b      	ldr	r3, [r7, #4]
 8035f6a:	681b      	ldr	r3, [r3, #0]
 8035f6c:	2150      	movs	r1, #80	; 0x50
 8035f6e:	4618      	mov	r0, r3
 8035f70:	f000 f93b 	bl	80361ea <TIM_ITRx_SetConfig>
      break;
 8035f74:	e02c      	b.n	8035fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8035f76:	687b      	ldr	r3, [r7, #4]
 8035f78:	6818      	ldr	r0, [r3, #0]
 8035f7a:	683b      	ldr	r3, [r7, #0]
 8035f7c:	6859      	ldr	r1, [r3, #4]
 8035f7e:	683b      	ldr	r3, [r7, #0]
 8035f80:	68db      	ldr	r3, [r3, #12]
 8035f82:	461a      	mov	r2, r3
 8035f84:	f000 f901 	bl	803618a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8035f88:	687b      	ldr	r3, [r7, #4]
 8035f8a:	681b      	ldr	r3, [r3, #0]
 8035f8c:	2160      	movs	r1, #96	; 0x60
 8035f8e:	4618      	mov	r0, r3
 8035f90:	f000 f92b 	bl	80361ea <TIM_ITRx_SetConfig>
      break;
 8035f94:	e01c      	b.n	8035fd0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8035f96:	687b      	ldr	r3, [r7, #4]
 8035f98:	6818      	ldr	r0, [r3, #0]
 8035f9a:	683b      	ldr	r3, [r7, #0]
 8035f9c:	6859      	ldr	r1, [r3, #4]
 8035f9e:	683b      	ldr	r3, [r7, #0]
 8035fa0:	68db      	ldr	r3, [r3, #12]
 8035fa2:	461a      	mov	r2, r3
 8035fa4:	f000 f8c2 	bl	803612c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8035fa8:	687b      	ldr	r3, [r7, #4]
 8035faa:	681b      	ldr	r3, [r3, #0]
 8035fac:	2140      	movs	r1, #64	; 0x40
 8035fae:	4618      	mov	r0, r3
 8035fb0:	f000 f91b 	bl	80361ea <TIM_ITRx_SetConfig>
      break;
 8035fb4:	e00c      	b.n	8035fd0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8035fb6:	687b      	ldr	r3, [r7, #4]
 8035fb8:	681a      	ldr	r2, [r3, #0]
 8035fba:	683b      	ldr	r3, [r7, #0]
 8035fbc:	681b      	ldr	r3, [r3, #0]
 8035fbe:	4619      	mov	r1, r3
 8035fc0:	4610      	mov	r0, r2
 8035fc2:	f000 f912 	bl	80361ea <TIM_ITRx_SetConfig>
      break;
 8035fc6:	e003      	b.n	8035fd0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8035fc8:	2301      	movs	r3, #1
 8035fca:	73fb      	strb	r3, [r7, #15]
      break;
 8035fcc:	e000      	b.n	8035fd0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8035fce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8035fd0:	687b      	ldr	r3, [r7, #4]
 8035fd2:	2201      	movs	r2, #1
 8035fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8035fd8:	687b      	ldr	r3, [r7, #4]
 8035fda:	2200      	movs	r2, #0
 8035fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8035fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8035fe2:	4618      	mov	r0, r3
 8035fe4:	3710      	adds	r7, #16
 8035fe6:	46bd      	mov	sp, r7
 8035fe8:	bd80      	pop	{r7, pc}
	...

08035fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8035fec:	b480      	push	{r7}
 8035fee:	b085      	sub	sp, #20
 8035ff0:	af00      	add	r7, sp, #0
 8035ff2:	6078      	str	r0, [r7, #4]
 8035ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8035ff6:	687b      	ldr	r3, [r7, #4]
 8035ff8:	681b      	ldr	r3, [r3, #0]
 8035ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8035ffc:	687b      	ldr	r3, [r7, #4]
 8035ffe:	4a40      	ldr	r2, [pc, #256]	; (8036100 <TIM_Base_SetConfig+0x114>)
 8036000:	4293      	cmp	r3, r2
 8036002:	d013      	beq.n	803602c <TIM_Base_SetConfig+0x40>
 8036004:	687b      	ldr	r3, [r7, #4]
 8036006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803600a:	d00f      	beq.n	803602c <TIM_Base_SetConfig+0x40>
 803600c:	687b      	ldr	r3, [r7, #4]
 803600e:	4a3d      	ldr	r2, [pc, #244]	; (8036104 <TIM_Base_SetConfig+0x118>)
 8036010:	4293      	cmp	r3, r2
 8036012:	d00b      	beq.n	803602c <TIM_Base_SetConfig+0x40>
 8036014:	687b      	ldr	r3, [r7, #4]
 8036016:	4a3c      	ldr	r2, [pc, #240]	; (8036108 <TIM_Base_SetConfig+0x11c>)
 8036018:	4293      	cmp	r3, r2
 803601a:	d007      	beq.n	803602c <TIM_Base_SetConfig+0x40>
 803601c:	687b      	ldr	r3, [r7, #4]
 803601e:	4a3b      	ldr	r2, [pc, #236]	; (803610c <TIM_Base_SetConfig+0x120>)
 8036020:	4293      	cmp	r3, r2
 8036022:	d003      	beq.n	803602c <TIM_Base_SetConfig+0x40>
 8036024:	687b      	ldr	r3, [r7, #4]
 8036026:	4a3a      	ldr	r2, [pc, #232]	; (8036110 <TIM_Base_SetConfig+0x124>)
 8036028:	4293      	cmp	r3, r2
 803602a:	d108      	bne.n	803603e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 803602c:	68fb      	ldr	r3, [r7, #12]
 803602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8036032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8036034:	683b      	ldr	r3, [r7, #0]
 8036036:	685b      	ldr	r3, [r3, #4]
 8036038:	68fa      	ldr	r2, [r7, #12]
 803603a:	4313      	orrs	r3, r2
 803603c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 803603e:	687b      	ldr	r3, [r7, #4]
 8036040:	4a2f      	ldr	r2, [pc, #188]	; (8036100 <TIM_Base_SetConfig+0x114>)
 8036042:	4293      	cmp	r3, r2
 8036044:	d02b      	beq.n	803609e <TIM_Base_SetConfig+0xb2>
 8036046:	687b      	ldr	r3, [r7, #4]
 8036048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803604c:	d027      	beq.n	803609e <TIM_Base_SetConfig+0xb2>
 803604e:	687b      	ldr	r3, [r7, #4]
 8036050:	4a2c      	ldr	r2, [pc, #176]	; (8036104 <TIM_Base_SetConfig+0x118>)
 8036052:	4293      	cmp	r3, r2
 8036054:	d023      	beq.n	803609e <TIM_Base_SetConfig+0xb2>
 8036056:	687b      	ldr	r3, [r7, #4]
 8036058:	4a2b      	ldr	r2, [pc, #172]	; (8036108 <TIM_Base_SetConfig+0x11c>)
 803605a:	4293      	cmp	r3, r2
 803605c:	d01f      	beq.n	803609e <TIM_Base_SetConfig+0xb2>
 803605e:	687b      	ldr	r3, [r7, #4]
 8036060:	4a2a      	ldr	r2, [pc, #168]	; (803610c <TIM_Base_SetConfig+0x120>)
 8036062:	4293      	cmp	r3, r2
 8036064:	d01b      	beq.n	803609e <TIM_Base_SetConfig+0xb2>
 8036066:	687b      	ldr	r3, [r7, #4]
 8036068:	4a29      	ldr	r2, [pc, #164]	; (8036110 <TIM_Base_SetConfig+0x124>)
 803606a:	4293      	cmp	r3, r2
 803606c:	d017      	beq.n	803609e <TIM_Base_SetConfig+0xb2>
 803606e:	687b      	ldr	r3, [r7, #4]
 8036070:	4a28      	ldr	r2, [pc, #160]	; (8036114 <TIM_Base_SetConfig+0x128>)
 8036072:	4293      	cmp	r3, r2
 8036074:	d013      	beq.n	803609e <TIM_Base_SetConfig+0xb2>
 8036076:	687b      	ldr	r3, [r7, #4]
 8036078:	4a27      	ldr	r2, [pc, #156]	; (8036118 <TIM_Base_SetConfig+0x12c>)
 803607a:	4293      	cmp	r3, r2
 803607c:	d00f      	beq.n	803609e <TIM_Base_SetConfig+0xb2>
 803607e:	687b      	ldr	r3, [r7, #4]
 8036080:	4a26      	ldr	r2, [pc, #152]	; (803611c <TIM_Base_SetConfig+0x130>)
 8036082:	4293      	cmp	r3, r2
 8036084:	d00b      	beq.n	803609e <TIM_Base_SetConfig+0xb2>
 8036086:	687b      	ldr	r3, [r7, #4]
 8036088:	4a25      	ldr	r2, [pc, #148]	; (8036120 <TIM_Base_SetConfig+0x134>)
 803608a:	4293      	cmp	r3, r2
 803608c:	d007      	beq.n	803609e <TIM_Base_SetConfig+0xb2>
 803608e:	687b      	ldr	r3, [r7, #4]
 8036090:	4a24      	ldr	r2, [pc, #144]	; (8036124 <TIM_Base_SetConfig+0x138>)
 8036092:	4293      	cmp	r3, r2
 8036094:	d003      	beq.n	803609e <TIM_Base_SetConfig+0xb2>
 8036096:	687b      	ldr	r3, [r7, #4]
 8036098:	4a23      	ldr	r2, [pc, #140]	; (8036128 <TIM_Base_SetConfig+0x13c>)
 803609a:	4293      	cmp	r3, r2
 803609c:	d108      	bne.n	80360b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 803609e:	68fb      	ldr	r3, [r7, #12]
 80360a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80360a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80360a6:	683b      	ldr	r3, [r7, #0]
 80360a8:	68db      	ldr	r3, [r3, #12]
 80360aa:	68fa      	ldr	r2, [r7, #12]
 80360ac:	4313      	orrs	r3, r2
 80360ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80360b0:	68fb      	ldr	r3, [r7, #12]
 80360b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80360b6:	683b      	ldr	r3, [r7, #0]
 80360b8:	695b      	ldr	r3, [r3, #20]
 80360ba:	4313      	orrs	r3, r2
 80360bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80360be:	687b      	ldr	r3, [r7, #4]
 80360c0:	68fa      	ldr	r2, [r7, #12]
 80360c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80360c4:	683b      	ldr	r3, [r7, #0]
 80360c6:	689a      	ldr	r2, [r3, #8]
 80360c8:	687b      	ldr	r3, [r7, #4]
 80360ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80360cc:	683b      	ldr	r3, [r7, #0]
 80360ce:	681a      	ldr	r2, [r3, #0]
 80360d0:	687b      	ldr	r3, [r7, #4]
 80360d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80360d4:	687b      	ldr	r3, [r7, #4]
 80360d6:	4a0a      	ldr	r2, [pc, #40]	; (8036100 <TIM_Base_SetConfig+0x114>)
 80360d8:	4293      	cmp	r3, r2
 80360da:	d003      	beq.n	80360e4 <TIM_Base_SetConfig+0xf8>
 80360dc:	687b      	ldr	r3, [r7, #4]
 80360de:	4a0c      	ldr	r2, [pc, #48]	; (8036110 <TIM_Base_SetConfig+0x124>)
 80360e0:	4293      	cmp	r3, r2
 80360e2:	d103      	bne.n	80360ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80360e4:	683b      	ldr	r3, [r7, #0]
 80360e6:	691a      	ldr	r2, [r3, #16]
 80360e8:	687b      	ldr	r3, [r7, #4]
 80360ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80360ec:	687b      	ldr	r3, [r7, #4]
 80360ee:	2201      	movs	r2, #1
 80360f0:	615a      	str	r2, [r3, #20]
}
 80360f2:	bf00      	nop
 80360f4:	3714      	adds	r7, #20
 80360f6:	46bd      	mov	sp, r7
 80360f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80360fc:	4770      	bx	lr
 80360fe:	bf00      	nop
 8036100:	40010000 	.word	0x40010000
 8036104:	40000400 	.word	0x40000400
 8036108:	40000800 	.word	0x40000800
 803610c:	40000c00 	.word	0x40000c00
 8036110:	40010400 	.word	0x40010400
 8036114:	40014000 	.word	0x40014000
 8036118:	40014400 	.word	0x40014400
 803611c:	40014800 	.word	0x40014800
 8036120:	40001800 	.word	0x40001800
 8036124:	40001c00 	.word	0x40001c00
 8036128:	40002000 	.word	0x40002000

0803612c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 803612c:	b480      	push	{r7}
 803612e:	b087      	sub	sp, #28
 8036130:	af00      	add	r7, sp, #0
 8036132:	60f8      	str	r0, [r7, #12]
 8036134:	60b9      	str	r1, [r7, #8]
 8036136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8036138:	68fb      	ldr	r3, [r7, #12]
 803613a:	6a1b      	ldr	r3, [r3, #32]
 803613c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 803613e:	68fb      	ldr	r3, [r7, #12]
 8036140:	6a1b      	ldr	r3, [r3, #32]
 8036142:	f023 0201 	bic.w	r2, r3, #1
 8036146:	68fb      	ldr	r3, [r7, #12]
 8036148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 803614a:	68fb      	ldr	r3, [r7, #12]
 803614c:	699b      	ldr	r3, [r3, #24]
 803614e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8036150:	693b      	ldr	r3, [r7, #16]
 8036152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8036156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8036158:	687b      	ldr	r3, [r7, #4]
 803615a:	011b      	lsls	r3, r3, #4
 803615c:	693a      	ldr	r2, [r7, #16]
 803615e:	4313      	orrs	r3, r2
 8036160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8036162:	697b      	ldr	r3, [r7, #20]
 8036164:	f023 030a 	bic.w	r3, r3, #10
 8036168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 803616a:	697a      	ldr	r2, [r7, #20]
 803616c:	68bb      	ldr	r3, [r7, #8]
 803616e:	4313      	orrs	r3, r2
 8036170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8036172:	68fb      	ldr	r3, [r7, #12]
 8036174:	693a      	ldr	r2, [r7, #16]
 8036176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8036178:	68fb      	ldr	r3, [r7, #12]
 803617a:	697a      	ldr	r2, [r7, #20]
 803617c:	621a      	str	r2, [r3, #32]
}
 803617e:	bf00      	nop
 8036180:	371c      	adds	r7, #28
 8036182:	46bd      	mov	sp, r7
 8036184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036188:	4770      	bx	lr

0803618a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 803618a:	b480      	push	{r7}
 803618c:	b087      	sub	sp, #28
 803618e:	af00      	add	r7, sp, #0
 8036190:	60f8      	str	r0, [r7, #12]
 8036192:	60b9      	str	r1, [r7, #8]
 8036194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8036196:	68fb      	ldr	r3, [r7, #12]
 8036198:	6a1b      	ldr	r3, [r3, #32]
 803619a:	f023 0210 	bic.w	r2, r3, #16
 803619e:	68fb      	ldr	r3, [r7, #12]
 80361a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80361a2:	68fb      	ldr	r3, [r7, #12]
 80361a4:	699b      	ldr	r3, [r3, #24]
 80361a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80361a8:	68fb      	ldr	r3, [r7, #12]
 80361aa:	6a1b      	ldr	r3, [r3, #32]
 80361ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80361ae:	697b      	ldr	r3, [r7, #20]
 80361b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80361b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80361b6:	687b      	ldr	r3, [r7, #4]
 80361b8:	031b      	lsls	r3, r3, #12
 80361ba:	697a      	ldr	r2, [r7, #20]
 80361bc:	4313      	orrs	r3, r2
 80361be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80361c0:	693b      	ldr	r3, [r7, #16]
 80361c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80361c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80361c8:	68bb      	ldr	r3, [r7, #8]
 80361ca:	011b      	lsls	r3, r3, #4
 80361cc:	693a      	ldr	r2, [r7, #16]
 80361ce:	4313      	orrs	r3, r2
 80361d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80361d2:	68fb      	ldr	r3, [r7, #12]
 80361d4:	697a      	ldr	r2, [r7, #20]
 80361d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80361d8:	68fb      	ldr	r3, [r7, #12]
 80361da:	693a      	ldr	r2, [r7, #16]
 80361dc:	621a      	str	r2, [r3, #32]
}
 80361de:	bf00      	nop
 80361e0:	371c      	adds	r7, #28
 80361e2:	46bd      	mov	sp, r7
 80361e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80361e8:	4770      	bx	lr

080361ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80361ea:	b480      	push	{r7}
 80361ec:	b085      	sub	sp, #20
 80361ee:	af00      	add	r7, sp, #0
 80361f0:	6078      	str	r0, [r7, #4]
 80361f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80361f4:	687b      	ldr	r3, [r7, #4]
 80361f6:	689b      	ldr	r3, [r3, #8]
 80361f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80361fa:	68fb      	ldr	r3, [r7, #12]
 80361fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8036200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8036202:	683a      	ldr	r2, [r7, #0]
 8036204:	68fb      	ldr	r3, [r7, #12]
 8036206:	4313      	orrs	r3, r2
 8036208:	f043 0307 	orr.w	r3, r3, #7
 803620c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 803620e:	687b      	ldr	r3, [r7, #4]
 8036210:	68fa      	ldr	r2, [r7, #12]
 8036212:	609a      	str	r2, [r3, #8]
}
 8036214:	bf00      	nop
 8036216:	3714      	adds	r7, #20
 8036218:	46bd      	mov	sp, r7
 803621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803621e:	4770      	bx	lr

08036220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8036220:	b480      	push	{r7}
 8036222:	b087      	sub	sp, #28
 8036224:	af00      	add	r7, sp, #0
 8036226:	60f8      	str	r0, [r7, #12]
 8036228:	60b9      	str	r1, [r7, #8]
 803622a:	607a      	str	r2, [r7, #4]
 803622c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 803622e:	68fb      	ldr	r3, [r7, #12]
 8036230:	689b      	ldr	r3, [r3, #8]
 8036232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8036234:	697b      	ldr	r3, [r7, #20]
 8036236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 803623a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 803623c:	683b      	ldr	r3, [r7, #0]
 803623e:	021a      	lsls	r2, r3, #8
 8036240:	687b      	ldr	r3, [r7, #4]
 8036242:	431a      	orrs	r2, r3
 8036244:	68bb      	ldr	r3, [r7, #8]
 8036246:	4313      	orrs	r3, r2
 8036248:	697a      	ldr	r2, [r7, #20]
 803624a:	4313      	orrs	r3, r2
 803624c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 803624e:	68fb      	ldr	r3, [r7, #12]
 8036250:	697a      	ldr	r2, [r7, #20]
 8036252:	609a      	str	r2, [r3, #8]
}
 8036254:	bf00      	nop
 8036256:	371c      	adds	r7, #28
 8036258:	46bd      	mov	sp, r7
 803625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803625e:	4770      	bx	lr

08036260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8036260:	b480      	push	{r7}
 8036262:	b085      	sub	sp, #20
 8036264:	af00      	add	r7, sp, #0
 8036266:	6078      	str	r0, [r7, #4]
 8036268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 803626a:	687b      	ldr	r3, [r7, #4]
 803626c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8036270:	2b01      	cmp	r3, #1
 8036272:	d101      	bne.n	8036278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8036274:	2302      	movs	r3, #2
 8036276:	e05a      	b.n	803632e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8036278:	687b      	ldr	r3, [r7, #4]
 803627a:	2201      	movs	r2, #1
 803627c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8036280:	687b      	ldr	r3, [r7, #4]
 8036282:	2202      	movs	r2, #2
 8036284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8036288:	687b      	ldr	r3, [r7, #4]
 803628a:	681b      	ldr	r3, [r3, #0]
 803628c:	685b      	ldr	r3, [r3, #4]
 803628e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8036290:	687b      	ldr	r3, [r7, #4]
 8036292:	681b      	ldr	r3, [r3, #0]
 8036294:	689b      	ldr	r3, [r3, #8]
 8036296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8036298:	68fb      	ldr	r3, [r7, #12]
 803629a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 803629e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80362a0:	683b      	ldr	r3, [r7, #0]
 80362a2:	681b      	ldr	r3, [r3, #0]
 80362a4:	68fa      	ldr	r2, [r7, #12]
 80362a6:	4313      	orrs	r3, r2
 80362a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80362aa:	687b      	ldr	r3, [r7, #4]
 80362ac:	681b      	ldr	r3, [r3, #0]
 80362ae:	68fa      	ldr	r2, [r7, #12]
 80362b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80362b2:	687b      	ldr	r3, [r7, #4]
 80362b4:	681b      	ldr	r3, [r3, #0]
 80362b6:	4a21      	ldr	r2, [pc, #132]	; (803633c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80362b8:	4293      	cmp	r3, r2
 80362ba:	d022      	beq.n	8036302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80362bc:	687b      	ldr	r3, [r7, #4]
 80362be:	681b      	ldr	r3, [r3, #0]
 80362c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80362c4:	d01d      	beq.n	8036302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80362c6:	687b      	ldr	r3, [r7, #4]
 80362c8:	681b      	ldr	r3, [r3, #0]
 80362ca:	4a1d      	ldr	r2, [pc, #116]	; (8036340 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80362cc:	4293      	cmp	r3, r2
 80362ce:	d018      	beq.n	8036302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80362d0:	687b      	ldr	r3, [r7, #4]
 80362d2:	681b      	ldr	r3, [r3, #0]
 80362d4:	4a1b      	ldr	r2, [pc, #108]	; (8036344 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80362d6:	4293      	cmp	r3, r2
 80362d8:	d013      	beq.n	8036302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80362da:	687b      	ldr	r3, [r7, #4]
 80362dc:	681b      	ldr	r3, [r3, #0]
 80362de:	4a1a      	ldr	r2, [pc, #104]	; (8036348 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80362e0:	4293      	cmp	r3, r2
 80362e2:	d00e      	beq.n	8036302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80362e4:	687b      	ldr	r3, [r7, #4]
 80362e6:	681b      	ldr	r3, [r3, #0]
 80362e8:	4a18      	ldr	r2, [pc, #96]	; (803634c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80362ea:	4293      	cmp	r3, r2
 80362ec:	d009      	beq.n	8036302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80362ee:	687b      	ldr	r3, [r7, #4]
 80362f0:	681b      	ldr	r3, [r3, #0]
 80362f2:	4a17      	ldr	r2, [pc, #92]	; (8036350 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80362f4:	4293      	cmp	r3, r2
 80362f6:	d004      	beq.n	8036302 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80362f8:	687b      	ldr	r3, [r7, #4]
 80362fa:	681b      	ldr	r3, [r3, #0]
 80362fc:	4a15      	ldr	r2, [pc, #84]	; (8036354 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80362fe:	4293      	cmp	r3, r2
 8036300:	d10c      	bne.n	803631c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8036302:	68bb      	ldr	r3, [r7, #8]
 8036304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8036308:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 803630a:	683b      	ldr	r3, [r7, #0]
 803630c:	685b      	ldr	r3, [r3, #4]
 803630e:	68ba      	ldr	r2, [r7, #8]
 8036310:	4313      	orrs	r3, r2
 8036312:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8036314:	687b      	ldr	r3, [r7, #4]
 8036316:	681b      	ldr	r3, [r3, #0]
 8036318:	68ba      	ldr	r2, [r7, #8]
 803631a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 803631c:	687b      	ldr	r3, [r7, #4]
 803631e:	2201      	movs	r2, #1
 8036320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8036324:	687b      	ldr	r3, [r7, #4]
 8036326:	2200      	movs	r2, #0
 8036328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 803632c:	2300      	movs	r3, #0
}
 803632e:	4618      	mov	r0, r3
 8036330:	3714      	adds	r7, #20
 8036332:	46bd      	mov	sp, r7
 8036334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036338:	4770      	bx	lr
 803633a:	bf00      	nop
 803633c:	40010000 	.word	0x40010000
 8036340:	40000400 	.word	0x40000400
 8036344:	40000800 	.word	0x40000800
 8036348:	40000c00 	.word	0x40000c00
 803634c:	40010400 	.word	0x40010400
 8036350:	40014000 	.word	0x40014000
 8036354:	40001800 	.word	0x40001800

08036358 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8036358:	b580      	push	{r7, lr}
 803635a:	b082      	sub	sp, #8
 803635c:	af00      	add	r7, sp, #0
 803635e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8036360:	687b      	ldr	r3, [r7, #4]
 8036362:	2b00      	cmp	r3, #0
 8036364:	d101      	bne.n	803636a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8036366:	2301      	movs	r3, #1
 8036368:	e03f      	b.n	80363ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 803636a:	687b      	ldr	r3, [r7, #4]
 803636c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8036370:	b2db      	uxtb	r3, r3
 8036372:	2b00      	cmp	r3, #0
 8036374:	d106      	bne.n	8036384 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8036376:	687b      	ldr	r3, [r7, #4]
 8036378:	2200      	movs	r2, #0
 803637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 803637e:	6878      	ldr	r0, [r7, #4]
 8036380:	f7fc f8a0 	bl	80324c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8036384:	687b      	ldr	r3, [r7, #4]
 8036386:	2224      	movs	r2, #36	; 0x24
 8036388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 803638c:	687b      	ldr	r3, [r7, #4]
 803638e:	681b      	ldr	r3, [r3, #0]
 8036390:	68da      	ldr	r2, [r3, #12]
 8036392:	687b      	ldr	r3, [r7, #4]
 8036394:	681b      	ldr	r3, [r3, #0]
 8036396:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 803639a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 803639c:	6878      	ldr	r0, [r7, #4]
 803639e:	f000 fe7d 	bl	803709c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80363a2:	687b      	ldr	r3, [r7, #4]
 80363a4:	681b      	ldr	r3, [r3, #0]
 80363a6:	691a      	ldr	r2, [r3, #16]
 80363a8:	687b      	ldr	r3, [r7, #4]
 80363aa:	681b      	ldr	r3, [r3, #0]
 80363ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80363b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80363b2:	687b      	ldr	r3, [r7, #4]
 80363b4:	681b      	ldr	r3, [r3, #0]
 80363b6:	695a      	ldr	r2, [r3, #20]
 80363b8:	687b      	ldr	r3, [r7, #4]
 80363ba:	681b      	ldr	r3, [r3, #0]
 80363bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80363c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80363c2:	687b      	ldr	r3, [r7, #4]
 80363c4:	681b      	ldr	r3, [r3, #0]
 80363c6:	68da      	ldr	r2, [r3, #12]
 80363c8:	687b      	ldr	r3, [r7, #4]
 80363ca:	681b      	ldr	r3, [r3, #0]
 80363cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80363d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80363d2:	687b      	ldr	r3, [r7, #4]
 80363d4:	2200      	movs	r2, #0
 80363d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80363d8:	687b      	ldr	r3, [r7, #4]
 80363da:	2220      	movs	r2, #32
 80363dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80363e0:	687b      	ldr	r3, [r7, #4]
 80363e2:	2220      	movs	r2, #32
 80363e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80363e8:	2300      	movs	r3, #0
}
 80363ea:	4618      	mov	r0, r3
 80363ec:	3708      	adds	r7, #8
 80363ee:	46bd      	mov	sp, r7
 80363f0:	bd80      	pop	{r7, pc}

080363f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80363f2:	b580      	push	{r7, lr}
 80363f4:	b08a      	sub	sp, #40	; 0x28
 80363f6:	af02      	add	r7, sp, #8
 80363f8:	60f8      	str	r0, [r7, #12]
 80363fa:	60b9      	str	r1, [r7, #8]
 80363fc:	603b      	str	r3, [r7, #0]
 80363fe:	4613      	mov	r3, r2
 8036400:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8036402:	2300      	movs	r3, #0
 8036404:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8036406:	68fb      	ldr	r3, [r7, #12]
 8036408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803640c:	b2db      	uxtb	r3, r3
 803640e:	2b20      	cmp	r3, #32
 8036410:	d17c      	bne.n	803650c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8036412:	68bb      	ldr	r3, [r7, #8]
 8036414:	2b00      	cmp	r3, #0
 8036416:	d002      	beq.n	803641e <HAL_UART_Transmit+0x2c>
 8036418:	88fb      	ldrh	r3, [r7, #6]
 803641a:	2b00      	cmp	r3, #0
 803641c:	d101      	bne.n	8036422 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 803641e:	2301      	movs	r3, #1
 8036420:	e075      	b.n	803650e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8036422:	68fb      	ldr	r3, [r7, #12]
 8036424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8036428:	2b01      	cmp	r3, #1
 803642a:	d101      	bne.n	8036430 <HAL_UART_Transmit+0x3e>
 803642c:	2302      	movs	r3, #2
 803642e:	e06e      	b.n	803650e <HAL_UART_Transmit+0x11c>
 8036430:	68fb      	ldr	r3, [r7, #12]
 8036432:	2201      	movs	r2, #1
 8036434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8036438:	68fb      	ldr	r3, [r7, #12]
 803643a:	2200      	movs	r2, #0
 803643c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 803643e:	68fb      	ldr	r3, [r7, #12]
 8036440:	2221      	movs	r2, #33	; 0x21
 8036442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8036446:	f7fc fc4f 	bl	8032ce8 <HAL_GetTick>
 803644a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 803644c:	68fb      	ldr	r3, [r7, #12]
 803644e:	88fa      	ldrh	r2, [r7, #6]
 8036450:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8036452:	68fb      	ldr	r3, [r7, #12]
 8036454:	88fa      	ldrh	r2, [r7, #6]
 8036456:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8036458:	68fb      	ldr	r3, [r7, #12]
 803645a:	689b      	ldr	r3, [r3, #8]
 803645c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036460:	d108      	bne.n	8036474 <HAL_UART_Transmit+0x82>
 8036462:	68fb      	ldr	r3, [r7, #12]
 8036464:	691b      	ldr	r3, [r3, #16]
 8036466:	2b00      	cmp	r3, #0
 8036468:	d104      	bne.n	8036474 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 803646a:	2300      	movs	r3, #0
 803646c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 803646e:	68bb      	ldr	r3, [r7, #8]
 8036470:	61bb      	str	r3, [r7, #24]
 8036472:	e003      	b.n	803647c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8036474:	68bb      	ldr	r3, [r7, #8]
 8036476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8036478:	2300      	movs	r3, #0
 803647a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 803647c:	68fb      	ldr	r3, [r7, #12]
 803647e:	2200      	movs	r2, #0
 8036480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8036484:	e02a      	b.n	80364dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8036486:	683b      	ldr	r3, [r7, #0]
 8036488:	9300      	str	r3, [sp, #0]
 803648a:	697b      	ldr	r3, [r7, #20]
 803648c:	2200      	movs	r2, #0
 803648e:	2180      	movs	r1, #128	; 0x80
 8036490:	68f8      	ldr	r0, [r7, #12]
 8036492:	f000 fbc1 	bl	8036c18 <UART_WaitOnFlagUntilTimeout>
 8036496:	4603      	mov	r3, r0
 8036498:	2b00      	cmp	r3, #0
 803649a:	d001      	beq.n	80364a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 803649c:	2303      	movs	r3, #3
 803649e:	e036      	b.n	803650e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80364a0:	69fb      	ldr	r3, [r7, #28]
 80364a2:	2b00      	cmp	r3, #0
 80364a4:	d10b      	bne.n	80364be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80364a6:	69bb      	ldr	r3, [r7, #24]
 80364a8:	881b      	ldrh	r3, [r3, #0]
 80364aa:	461a      	mov	r2, r3
 80364ac:	68fb      	ldr	r3, [r7, #12]
 80364ae:	681b      	ldr	r3, [r3, #0]
 80364b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80364b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80364b6:	69bb      	ldr	r3, [r7, #24]
 80364b8:	3302      	adds	r3, #2
 80364ba:	61bb      	str	r3, [r7, #24]
 80364bc:	e007      	b.n	80364ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80364be:	69fb      	ldr	r3, [r7, #28]
 80364c0:	781a      	ldrb	r2, [r3, #0]
 80364c2:	68fb      	ldr	r3, [r7, #12]
 80364c4:	681b      	ldr	r3, [r3, #0]
 80364c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80364c8:	69fb      	ldr	r3, [r7, #28]
 80364ca:	3301      	adds	r3, #1
 80364cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80364ce:	68fb      	ldr	r3, [r7, #12]
 80364d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80364d2:	b29b      	uxth	r3, r3
 80364d4:	3b01      	subs	r3, #1
 80364d6:	b29a      	uxth	r2, r3
 80364d8:	68fb      	ldr	r3, [r7, #12]
 80364da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80364dc:	68fb      	ldr	r3, [r7, #12]
 80364de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80364e0:	b29b      	uxth	r3, r3
 80364e2:	2b00      	cmp	r3, #0
 80364e4:	d1cf      	bne.n	8036486 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80364e6:	683b      	ldr	r3, [r7, #0]
 80364e8:	9300      	str	r3, [sp, #0]
 80364ea:	697b      	ldr	r3, [r7, #20]
 80364ec:	2200      	movs	r2, #0
 80364ee:	2140      	movs	r1, #64	; 0x40
 80364f0:	68f8      	ldr	r0, [r7, #12]
 80364f2:	f000 fb91 	bl	8036c18 <UART_WaitOnFlagUntilTimeout>
 80364f6:	4603      	mov	r3, r0
 80364f8:	2b00      	cmp	r3, #0
 80364fa:	d001      	beq.n	8036500 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80364fc:	2303      	movs	r3, #3
 80364fe:	e006      	b.n	803650e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8036500:	68fb      	ldr	r3, [r7, #12]
 8036502:	2220      	movs	r2, #32
 8036504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8036508:	2300      	movs	r3, #0
 803650a:	e000      	b.n	803650e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 803650c:	2302      	movs	r3, #2
  }
}
 803650e:	4618      	mov	r0, r3
 8036510:	3720      	adds	r7, #32
 8036512:	46bd      	mov	sp, r7
 8036514:	bd80      	pop	{r7, pc}

08036516 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8036516:	b580      	push	{r7, lr}
 8036518:	b08a      	sub	sp, #40	; 0x28
 803651a:	af02      	add	r7, sp, #8
 803651c:	60f8      	str	r0, [r7, #12]
 803651e:	60b9      	str	r1, [r7, #8]
 8036520:	603b      	str	r3, [r7, #0]
 8036522:	4613      	mov	r3, r2
 8036524:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8036526:	2300      	movs	r3, #0
 8036528:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 803652a:	68fb      	ldr	r3, [r7, #12]
 803652c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8036530:	b2db      	uxtb	r3, r3
 8036532:	2b20      	cmp	r3, #32
 8036534:	f040 808c 	bne.w	8036650 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8036538:	68bb      	ldr	r3, [r7, #8]
 803653a:	2b00      	cmp	r3, #0
 803653c:	d002      	beq.n	8036544 <HAL_UART_Receive+0x2e>
 803653e:	88fb      	ldrh	r3, [r7, #6]
 8036540:	2b00      	cmp	r3, #0
 8036542:	d101      	bne.n	8036548 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8036544:	2301      	movs	r3, #1
 8036546:	e084      	b.n	8036652 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8036548:	68fb      	ldr	r3, [r7, #12]
 803654a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 803654e:	2b01      	cmp	r3, #1
 8036550:	d101      	bne.n	8036556 <HAL_UART_Receive+0x40>
 8036552:	2302      	movs	r3, #2
 8036554:	e07d      	b.n	8036652 <HAL_UART_Receive+0x13c>
 8036556:	68fb      	ldr	r3, [r7, #12]
 8036558:	2201      	movs	r2, #1
 803655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 803655e:	68fb      	ldr	r3, [r7, #12]
 8036560:	2200      	movs	r2, #0
 8036562:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8036564:	68fb      	ldr	r3, [r7, #12]
 8036566:	2222      	movs	r2, #34	; 0x22
 8036568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803656c:	68fb      	ldr	r3, [r7, #12]
 803656e:	2200      	movs	r2, #0
 8036570:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8036572:	f7fc fbb9 	bl	8032ce8 <HAL_GetTick>
 8036576:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8036578:	68fb      	ldr	r3, [r7, #12]
 803657a:	88fa      	ldrh	r2, [r7, #6]
 803657c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 803657e:	68fb      	ldr	r3, [r7, #12]
 8036580:	88fa      	ldrh	r2, [r7, #6]
 8036582:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8036584:	68fb      	ldr	r3, [r7, #12]
 8036586:	689b      	ldr	r3, [r3, #8]
 8036588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803658c:	d108      	bne.n	80365a0 <HAL_UART_Receive+0x8a>
 803658e:	68fb      	ldr	r3, [r7, #12]
 8036590:	691b      	ldr	r3, [r3, #16]
 8036592:	2b00      	cmp	r3, #0
 8036594:	d104      	bne.n	80365a0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8036596:	2300      	movs	r3, #0
 8036598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 803659a:	68bb      	ldr	r3, [r7, #8]
 803659c:	61bb      	str	r3, [r7, #24]
 803659e:	e003      	b.n	80365a8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80365a0:	68bb      	ldr	r3, [r7, #8]
 80365a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80365a4:	2300      	movs	r3, #0
 80365a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80365a8:	68fb      	ldr	r3, [r7, #12]
 80365aa:	2200      	movs	r2, #0
 80365ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80365b0:	e043      	b.n	803663a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80365b2:	683b      	ldr	r3, [r7, #0]
 80365b4:	9300      	str	r3, [sp, #0]
 80365b6:	697b      	ldr	r3, [r7, #20]
 80365b8:	2200      	movs	r2, #0
 80365ba:	2120      	movs	r1, #32
 80365bc:	68f8      	ldr	r0, [r7, #12]
 80365be:	f000 fb2b 	bl	8036c18 <UART_WaitOnFlagUntilTimeout>
 80365c2:	4603      	mov	r3, r0
 80365c4:	2b00      	cmp	r3, #0
 80365c6:	d001      	beq.n	80365cc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80365c8:	2303      	movs	r3, #3
 80365ca:	e042      	b.n	8036652 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80365cc:	69fb      	ldr	r3, [r7, #28]
 80365ce:	2b00      	cmp	r3, #0
 80365d0:	d10c      	bne.n	80365ec <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80365d2:	68fb      	ldr	r3, [r7, #12]
 80365d4:	681b      	ldr	r3, [r3, #0]
 80365d6:	685b      	ldr	r3, [r3, #4]
 80365d8:	b29b      	uxth	r3, r3
 80365da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80365de:	b29a      	uxth	r2, r3
 80365e0:	69bb      	ldr	r3, [r7, #24]
 80365e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80365e4:	69bb      	ldr	r3, [r7, #24]
 80365e6:	3302      	adds	r3, #2
 80365e8:	61bb      	str	r3, [r7, #24]
 80365ea:	e01f      	b.n	803662c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80365ec:	68fb      	ldr	r3, [r7, #12]
 80365ee:	689b      	ldr	r3, [r3, #8]
 80365f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80365f4:	d007      	beq.n	8036606 <HAL_UART_Receive+0xf0>
 80365f6:	68fb      	ldr	r3, [r7, #12]
 80365f8:	689b      	ldr	r3, [r3, #8]
 80365fa:	2b00      	cmp	r3, #0
 80365fc:	d10a      	bne.n	8036614 <HAL_UART_Receive+0xfe>
 80365fe:	68fb      	ldr	r3, [r7, #12]
 8036600:	691b      	ldr	r3, [r3, #16]
 8036602:	2b00      	cmp	r3, #0
 8036604:	d106      	bne.n	8036614 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8036606:	68fb      	ldr	r3, [r7, #12]
 8036608:	681b      	ldr	r3, [r3, #0]
 803660a:	685b      	ldr	r3, [r3, #4]
 803660c:	b2da      	uxtb	r2, r3
 803660e:	69fb      	ldr	r3, [r7, #28]
 8036610:	701a      	strb	r2, [r3, #0]
 8036612:	e008      	b.n	8036626 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8036614:	68fb      	ldr	r3, [r7, #12]
 8036616:	681b      	ldr	r3, [r3, #0]
 8036618:	685b      	ldr	r3, [r3, #4]
 803661a:	b2db      	uxtb	r3, r3
 803661c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8036620:	b2da      	uxtb	r2, r3
 8036622:	69fb      	ldr	r3, [r7, #28]
 8036624:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8036626:	69fb      	ldr	r3, [r7, #28]
 8036628:	3301      	adds	r3, #1
 803662a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 803662c:	68fb      	ldr	r3, [r7, #12]
 803662e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8036630:	b29b      	uxth	r3, r3
 8036632:	3b01      	subs	r3, #1
 8036634:	b29a      	uxth	r2, r3
 8036636:	68fb      	ldr	r3, [r7, #12]
 8036638:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 803663a:	68fb      	ldr	r3, [r7, #12]
 803663c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 803663e:	b29b      	uxth	r3, r3
 8036640:	2b00      	cmp	r3, #0
 8036642:	d1b6      	bne.n	80365b2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8036644:	68fb      	ldr	r3, [r7, #12]
 8036646:	2220      	movs	r2, #32
 8036648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 803664c:	2300      	movs	r3, #0
 803664e:	e000      	b.n	8036652 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8036650:	2302      	movs	r3, #2
  }
}
 8036652:	4618      	mov	r0, r3
 8036654:	3720      	adds	r7, #32
 8036656:	46bd      	mov	sp, r7
 8036658:	bd80      	pop	{r7, pc}

0803665a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 803665a:	b580      	push	{r7, lr}
 803665c:	b084      	sub	sp, #16
 803665e:	af00      	add	r7, sp, #0
 8036660:	60f8      	str	r0, [r7, #12]
 8036662:	60b9      	str	r1, [r7, #8]
 8036664:	4613      	mov	r3, r2
 8036666:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8036668:	68fb      	ldr	r3, [r7, #12]
 803666a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 803666e:	b2db      	uxtb	r3, r3
 8036670:	2b20      	cmp	r3, #32
 8036672:	d11d      	bne.n	80366b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8036674:	68bb      	ldr	r3, [r7, #8]
 8036676:	2b00      	cmp	r3, #0
 8036678:	d002      	beq.n	8036680 <HAL_UART_Receive_IT+0x26>
 803667a:	88fb      	ldrh	r3, [r7, #6]
 803667c:	2b00      	cmp	r3, #0
 803667e:	d101      	bne.n	8036684 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8036680:	2301      	movs	r3, #1
 8036682:	e016      	b.n	80366b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8036684:	68fb      	ldr	r3, [r7, #12]
 8036686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 803668a:	2b01      	cmp	r3, #1
 803668c:	d101      	bne.n	8036692 <HAL_UART_Receive_IT+0x38>
 803668e:	2302      	movs	r3, #2
 8036690:	e00f      	b.n	80366b2 <HAL_UART_Receive_IT+0x58>
 8036692:	68fb      	ldr	r3, [r7, #12]
 8036694:	2201      	movs	r2, #1
 8036696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 803669a:	68fb      	ldr	r3, [r7, #12]
 803669c:	2200      	movs	r2, #0
 803669e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80366a0:	88fb      	ldrh	r3, [r7, #6]
 80366a2:	461a      	mov	r2, r3
 80366a4:	68b9      	ldr	r1, [r7, #8]
 80366a6:	68f8      	ldr	r0, [r7, #12]
 80366a8:	f000 fb24 	bl	8036cf4 <UART_Start_Receive_IT>
 80366ac:	4603      	mov	r3, r0
 80366ae:	e000      	b.n	80366b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80366b0:	2302      	movs	r3, #2
  }
}
 80366b2:	4618      	mov	r0, r3
 80366b4:	3710      	adds	r7, #16
 80366b6:	46bd      	mov	sp, r7
 80366b8:	bd80      	pop	{r7, pc}
	...

080366bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80366bc:	b580      	push	{r7, lr}
 80366be:	b0ba      	sub	sp, #232	; 0xe8
 80366c0:	af00      	add	r7, sp, #0
 80366c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80366c4:	687b      	ldr	r3, [r7, #4]
 80366c6:	681b      	ldr	r3, [r3, #0]
 80366c8:	681b      	ldr	r3, [r3, #0]
 80366ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80366ce:	687b      	ldr	r3, [r7, #4]
 80366d0:	681b      	ldr	r3, [r3, #0]
 80366d2:	68db      	ldr	r3, [r3, #12]
 80366d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80366d8:	687b      	ldr	r3, [r7, #4]
 80366da:	681b      	ldr	r3, [r3, #0]
 80366dc:	695b      	ldr	r3, [r3, #20]
 80366de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80366e2:	2300      	movs	r3, #0
 80366e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80366e8:	2300      	movs	r3, #0
 80366ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80366ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80366f2:	f003 030f 	and.w	r3, r3, #15
 80366f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80366fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80366fe:	2b00      	cmp	r3, #0
 8036700:	d10f      	bne.n	8036722 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8036702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036706:	f003 0320 	and.w	r3, r3, #32
 803670a:	2b00      	cmp	r3, #0
 803670c:	d009      	beq.n	8036722 <HAL_UART_IRQHandler+0x66>
 803670e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036712:	f003 0320 	and.w	r3, r3, #32
 8036716:	2b00      	cmp	r3, #0
 8036718:	d003      	beq.n	8036722 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 803671a:	6878      	ldr	r0, [r7, #4]
 803671c:	f000 fc03 	bl	8036f26 <UART_Receive_IT>
      return;
 8036720:	e256      	b.n	8036bd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8036722:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8036726:	2b00      	cmp	r3, #0
 8036728:	f000 80de 	beq.w	80368e8 <HAL_UART_IRQHandler+0x22c>
 803672c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8036730:	f003 0301 	and.w	r3, r3, #1
 8036734:	2b00      	cmp	r3, #0
 8036736:	d106      	bne.n	8036746 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8036738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 803673c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8036740:	2b00      	cmp	r3, #0
 8036742:	f000 80d1 	beq.w	80368e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8036746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803674a:	f003 0301 	and.w	r3, r3, #1
 803674e:	2b00      	cmp	r3, #0
 8036750:	d00b      	beq.n	803676a <HAL_UART_IRQHandler+0xae>
 8036752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803675a:	2b00      	cmp	r3, #0
 803675c:	d005      	beq.n	803676a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 803675e:	687b      	ldr	r3, [r7, #4]
 8036760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036762:	f043 0201 	orr.w	r2, r3, #1
 8036766:	687b      	ldr	r3, [r7, #4]
 8036768:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 803676a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803676e:	f003 0304 	and.w	r3, r3, #4
 8036772:	2b00      	cmp	r3, #0
 8036774:	d00b      	beq.n	803678e <HAL_UART_IRQHandler+0xd2>
 8036776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 803677a:	f003 0301 	and.w	r3, r3, #1
 803677e:	2b00      	cmp	r3, #0
 8036780:	d005      	beq.n	803678e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8036782:	687b      	ldr	r3, [r7, #4]
 8036784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036786:	f043 0202 	orr.w	r2, r3, #2
 803678a:	687b      	ldr	r3, [r7, #4]
 803678c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 803678e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036792:	f003 0302 	and.w	r3, r3, #2
 8036796:	2b00      	cmp	r3, #0
 8036798:	d00b      	beq.n	80367b2 <HAL_UART_IRQHandler+0xf6>
 803679a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 803679e:	f003 0301 	and.w	r3, r3, #1
 80367a2:	2b00      	cmp	r3, #0
 80367a4:	d005      	beq.n	80367b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80367a6:	687b      	ldr	r3, [r7, #4]
 80367a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80367aa:	f043 0204 	orr.w	r2, r3, #4
 80367ae:	687b      	ldr	r3, [r7, #4]
 80367b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80367b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80367b6:	f003 0308 	and.w	r3, r3, #8
 80367ba:	2b00      	cmp	r3, #0
 80367bc:	d011      	beq.n	80367e2 <HAL_UART_IRQHandler+0x126>
 80367be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80367c2:	f003 0320 	and.w	r3, r3, #32
 80367c6:	2b00      	cmp	r3, #0
 80367c8:	d105      	bne.n	80367d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80367ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80367ce:	f003 0301 	and.w	r3, r3, #1
 80367d2:	2b00      	cmp	r3, #0
 80367d4:	d005      	beq.n	80367e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80367d6:	687b      	ldr	r3, [r7, #4]
 80367d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80367da:	f043 0208 	orr.w	r2, r3, #8
 80367de:	687b      	ldr	r3, [r7, #4]
 80367e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80367e2:	687b      	ldr	r3, [r7, #4]
 80367e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80367e6:	2b00      	cmp	r3, #0
 80367e8:	f000 81ed 	beq.w	8036bc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80367ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80367f0:	f003 0320 	and.w	r3, r3, #32
 80367f4:	2b00      	cmp	r3, #0
 80367f6:	d008      	beq.n	803680a <HAL_UART_IRQHandler+0x14e>
 80367f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80367fc:	f003 0320 	and.w	r3, r3, #32
 8036800:	2b00      	cmp	r3, #0
 8036802:	d002      	beq.n	803680a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8036804:	6878      	ldr	r0, [r7, #4]
 8036806:	f000 fb8e 	bl	8036f26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 803680a:	687b      	ldr	r3, [r7, #4]
 803680c:	681b      	ldr	r3, [r3, #0]
 803680e:	695b      	ldr	r3, [r3, #20]
 8036810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036814:	2b40      	cmp	r3, #64	; 0x40
 8036816:	bf0c      	ite	eq
 8036818:	2301      	moveq	r3, #1
 803681a:	2300      	movne	r3, #0
 803681c:	b2db      	uxtb	r3, r3
 803681e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8036822:	687b      	ldr	r3, [r7, #4]
 8036824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8036826:	f003 0308 	and.w	r3, r3, #8
 803682a:	2b00      	cmp	r3, #0
 803682c:	d103      	bne.n	8036836 <HAL_UART_IRQHandler+0x17a>
 803682e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8036832:	2b00      	cmp	r3, #0
 8036834:	d04f      	beq.n	80368d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8036836:	6878      	ldr	r0, [r7, #4]
 8036838:	f000 fa96 	bl	8036d68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 803683c:	687b      	ldr	r3, [r7, #4]
 803683e:	681b      	ldr	r3, [r3, #0]
 8036840:	695b      	ldr	r3, [r3, #20]
 8036842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036846:	2b40      	cmp	r3, #64	; 0x40
 8036848:	d141      	bne.n	80368ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 803684a:	687b      	ldr	r3, [r7, #4]
 803684c:	681b      	ldr	r3, [r3, #0]
 803684e:	3314      	adds	r3, #20
 8036850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8036858:	e853 3f00 	ldrex	r3, [r3]
 803685c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8036860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8036864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8036868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 803686c:	687b      	ldr	r3, [r7, #4]
 803686e:	681b      	ldr	r3, [r3, #0]
 8036870:	3314      	adds	r3, #20
 8036872:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8036876:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 803687a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803687e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8036882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8036886:	e841 2300 	strex	r3, r2, [r1]
 803688a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 803688e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8036892:	2b00      	cmp	r3, #0
 8036894:	d1d9      	bne.n	803684a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8036896:	687b      	ldr	r3, [r7, #4]
 8036898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803689a:	2b00      	cmp	r3, #0
 803689c:	d013      	beq.n	80368c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 803689e:	687b      	ldr	r3, [r7, #4]
 80368a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80368a2:	4a7d      	ldr	r2, [pc, #500]	; (8036a98 <HAL_UART_IRQHandler+0x3dc>)
 80368a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80368a6:	687b      	ldr	r3, [r7, #4]
 80368a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80368aa:	4618      	mov	r0, r3
 80368ac:	f7fc fbcd 	bl	803304a <HAL_DMA_Abort_IT>
 80368b0:	4603      	mov	r3, r0
 80368b2:	2b00      	cmp	r3, #0
 80368b4:	d016      	beq.n	80368e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80368b6:	687b      	ldr	r3, [r7, #4]
 80368b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80368ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80368bc:	687a      	ldr	r2, [r7, #4]
 80368be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80368c0:	4610      	mov	r0, r2
 80368c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80368c4:	e00e      	b.n	80368e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80368c6:	6878      	ldr	r0, [r7, #4]
 80368c8:	f000 f990 	bl	8036bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80368cc:	e00a      	b.n	80368e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80368ce:	6878      	ldr	r0, [r7, #4]
 80368d0:	f000 f98c 	bl	8036bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80368d4:	e006      	b.n	80368e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80368d6:	6878      	ldr	r0, [r7, #4]
 80368d8:	f000 f988 	bl	8036bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80368dc:	687b      	ldr	r3, [r7, #4]
 80368de:	2200      	movs	r2, #0
 80368e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80368e2:	e170      	b.n	8036bc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80368e4:	bf00      	nop
    return;
 80368e6:	e16e      	b.n	8036bc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80368e8:	687b      	ldr	r3, [r7, #4]
 80368ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80368ec:	2b01      	cmp	r3, #1
 80368ee:	f040 814a 	bne.w	8036b86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80368f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80368f6:	f003 0310 	and.w	r3, r3, #16
 80368fa:	2b00      	cmp	r3, #0
 80368fc:	f000 8143 	beq.w	8036b86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8036900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036904:	f003 0310 	and.w	r3, r3, #16
 8036908:	2b00      	cmp	r3, #0
 803690a:	f000 813c 	beq.w	8036b86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 803690e:	2300      	movs	r3, #0
 8036910:	60bb      	str	r3, [r7, #8]
 8036912:	687b      	ldr	r3, [r7, #4]
 8036914:	681b      	ldr	r3, [r3, #0]
 8036916:	681b      	ldr	r3, [r3, #0]
 8036918:	60bb      	str	r3, [r7, #8]
 803691a:	687b      	ldr	r3, [r7, #4]
 803691c:	681b      	ldr	r3, [r3, #0]
 803691e:	685b      	ldr	r3, [r3, #4]
 8036920:	60bb      	str	r3, [r7, #8]
 8036922:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8036924:	687b      	ldr	r3, [r7, #4]
 8036926:	681b      	ldr	r3, [r3, #0]
 8036928:	695b      	ldr	r3, [r3, #20]
 803692a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803692e:	2b40      	cmp	r3, #64	; 0x40
 8036930:	f040 80b4 	bne.w	8036a9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8036934:	687b      	ldr	r3, [r7, #4]
 8036936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036938:	681b      	ldr	r3, [r3, #0]
 803693a:	685b      	ldr	r3, [r3, #4]
 803693c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8036940:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8036944:	2b00      	cmp	r3, #0
 8036946:	f000 8140 	beq.w	8036bca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 803694a:	687b      	ldr	r3, [r7, #4]
 803694c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 803694e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8036952:	429a      	cmp	r2, r3
 8036954:	f080 8139 	bcs.w	8036bca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8036958:	687b      	ldr	r3, [r7, #4]
 803695a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 803695e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8036960:	687b      	ldr	r3, [r7, #4]
 8036962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036964:	69db      	ldr	r3, [r3, #28]
 8036966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803696a:	f000 8088 	beq.w	8036a7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 803696e:	687b      	ldr	r3, [r7, #4]
 8036970:	681b      	ldr	r3, [r3, #0]
 8036972:	330c      	adds	r3, #12
 8036974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036978:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 803697c:	e853 3f00 	ldrex	r3, [r3]
 8036980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8036984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8036988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803698c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8036990:	687b      	ldr	r3, [r7, #4]
 8036992:	681b      	ldr	r3, [r3, #0]
 8036994:	330c      	adds	r3, #12
 8036996:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 803699a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 803699e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80369a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80369a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80369aa:	e841 2300 	strex	r3, r2, [r1]
 80369ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80369b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80369b6:	2b00      	cmp	r3, #0
 80369b8:	d1d9      	bne.n	803696e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80369ba:	687b      	ldr	r3, [r7, #4]
 80369bc:	681b      	ldr	r3, [r3, #0]
 80369be:	3314      	adds	r3, #20
 80369c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80369c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80369c4:	e853 3f00 	ldrex	r3, [r3]
 80369c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80369ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80369cc:	f023 0301 	bic.w	r3, r3, #1
 80369d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80369d4:	687b      	ldr	r3, [r7, #4]
 80369d6:	681b      	ldr	r3, [r3, #0]
 80369d8:	3314      	adds	r3, #20
 80369da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80369de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80369e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80369e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80369e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80369ea:	e841 2300 	strex	r3, r2, [r1]
 80369ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80369f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80369f2:	2b00      	cmp	r3, #0
 80369f4:	d1e1      	bne.n	80369ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80369f6:	687b      	ldr	r3, [r7, #4]
 80369f8:	681b      	ldr	r3, [r3, #0]
 80369fa:	3314      	adds	r3, #20
 80369fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80369fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8036a00:	e853 3f00 	ldrex	r3, [r3]
 8036a04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8036a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8036a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8036a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8036a10:	687b      	ldr	r3, [r7, #4]
 8036a12:	681b      	ldr	r3, [r3, #0]
 8036a14:	3314      	adds	r3, #20
 8036a16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8036a1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8036a1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036a1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8036a20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8036a22:	e841 2300 	strex	r3, r2, [r1]
 8036a26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8036a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8036a2a:	2b00      	cmp	r3, #0
 8036a2c:	d1e3      	bne.n	80369f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8036a2e:	687b      	ldr	r3, [r7, #4]
 8036a30:	2220      	movs	r2, #32
 8036a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8036a36:	687b      	ldr	r3, [r7, #4]
 8036a38:	2200      	movs	r2, #0
 8036a3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8036a3c:	687b      	ldr	r3, [r7, #4]
 8036a3e:	681b      	ldr	r3, [r3, #0]
 8036a40:	330c      	adds	r3, #12
 8036a42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8036a46:	e853 3f00 	ldrex	r3, [r3]
 8036a4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8036a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8036a4e:	f023 0310 	bic.w	r3, r3, #16
 8036a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8036a56:	687b      	ldr	r3, [r7, #4]
 8036a58:	681b      	ldr	r3, [r3, #0]
 8036a5a:	330c      	adds	r3, #12
 8036a5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8036a60:	65ba      	str	r2, [r7, #88]	; 0x58
 8036a62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036a64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8036a66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8036a68:	e841 2300 	strex	r3, r2, [r1]
 8036a6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8036a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8036a70:	2b00      	cmp	r3, #0
 8036a72:	d1e3      	bne.n	8036a3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8036a74:	687b      	ldr	r3, [r7, #4]
 8036a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036a78:	4618      	mov	r0, r3
 8036a7a:	f7fc fa76 	bl	8032f6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8036a7e:	687b      	ldr	r3, [r7, #4]
 8036a80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8036a82:	687b      	ldr	r3, [r7, #4]
 8036a84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8036a86:	b29b      	uxth	r3, r3
 8036a88:	1ad3      	subs	r3, r2, r3
 8036a8a:	b29b      	uxth	r3, r3
 8036a8c:	4619      	mov	r1, r3
 8036a8e:	6878      	ldr	r0, [r7, #4]
 8036a90:	f000 f8b6 	bl	8036c00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8036a94:	e099      	b.n	8036bca <HAL_UART_IRQHandler+0x50e>
 8036a96:	bf00      	nop
 8036a98:	08036e2f 	.word	0x08036e2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8036a9c:	687b      	ldr	r3, [r7, #4]
 8036a9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8036aa0:	687b      	ldr	r3, [r7, #4]
 8036aa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8036aa4:	b29b      	uxth	r3, r3
 8036aa6:	1ad3      	subs	r3, r2, r3
 8036aa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8036aac:	687b      	ldr	r3, [r7, #4]
 8036aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8036ab0:	b29b      	uxth	r3, r3
 8036ab2:	2b00      	cmp	r3, #0
 8036ab4:	f000 808b 	beq.w	8036bce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8036ab8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8036abc:	2b00      	cmp	r3, #0
 8036abe:	f000 8086 	beq.w	8036bce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8036ac2:	687b      	ldr	r3, [r7, #4]
 8036ac4:	681b      	ldr	r3, [r3, #0]
 8036ac6:	330c      	adds	r3, #12
 8036ac8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036acc:	e853 3f00 	ldrex	r3, [r3]
 8036ad0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8036ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036ad4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8036ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8036adc:	687b      	ldr	r3, [r7, #4]
 8036ade:	681b      	ldr	r3, [r3, #0]
 8036ae0:	330c      	adds	r3, #12
 8036ae2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8036ae6:	647a      	str	r2, [r7, #68]	; 0x44
 8036ae8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036aea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8036aec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8036aee:	e841 2300 	strex	r3, r2, [r1]
 8036af2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8036af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8036af6:	2b00      	cmp	r3, #0
 8036af8:	d1e3      	bne.n	8036ac2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036afa:	687b      	ldr	r3, [r7, #4]
 8036afc:	681b      	ldr	r3, [r3, #0]
 8036afe:	3314      	adds	r3, #20
 8036b00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036b04:	e853 3f00 	ldrex	r3, [r3]
 8036b08:	623b      	str	r3, [r7, #32]
   return(result);
 8036b0a:	6a3b      	ldr	r3, [r7, #32]
 8036b0c:	f023 0301 	bic.w	r3, r3, #1
 8036b10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8036b14:	687b      	ldr	r3, [r7, #4]
 8036b16:	681b      	ldr	r3, [r3, #0]
 8036b18:	3314      	adds	r3, #20
 8036b1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8036b1e:	633a      	str	r2, [r7, #48]	; 0x30
 8036b20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8036b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8036b26:	e841 2300 	strex	r3, r2, [r1]
 8036b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8036b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036b2e:	2b00      	cmp	r3, #0
 8036b30:	d1e3      	bne.n	8036afa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8036b32:	687b      	ldr	r3, [r7, #4]
 8036b34:	2220      	movs	r2, #32
 8036b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8036b3a:	687b      	ldr	r3, [r7, #4]
 8036b3c:	2200      	movs	r2, #0
 8036b3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8036b40:	687b      	ldr	r3, [r7, #4]
 8036b42:	681b      	ldr	r3, [r3, #0]
 8036b44:	330c      	adds	r3, #12
 8036b46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036b48:	693b      	ldr	r3, [r7, #16]
 8036b4a:	e853 3f00 	ldrex	r3, [r3]
 8036b4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8036b50:	68fb      	ldr	r3, [r7, #12]
 8036b52:	f023 0310 	bic.w	r3, r3, #16
 8036b56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8036b5a:	687b      	ldr	r3, [r7, #4]
 8036b5c:	681b      	ldr	r3, [r3, #0]
 8036b5e:	330c      	adds	r3, #12
 8036b60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8036b64:	61fa      	str	r2, [r7, #28]
 8036b66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036b68:	69b9      	ldr	r1, [r7, #24]
 8036b6a:	69fa      	ldr	r2, [r7, #28]
 8036b6c:	e841 2300 	strex	r3, r2, [r1]
 8036b70:	617b      	str	r3, [r7, #20]
   return(result);
 8036b72:	697b      	ldr	r3, [r7, #20]
 8036b74:	2b00      	cmp	r3, #0
 8036b76:	d1e3      	bne.n	8036b40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8036b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8036b7c:	4619      	mov	r1, r3
 8036b7e:	6878      	ldr	r0, [r7, #4]
 8036b80:	f000 f83e 	bl	8036c00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8036b84:	e023      	b.n	8036bce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8036b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036b8e:	2b00      	cmp	r3, #0
 8036b90:	d009      	beq.n	8036ba6 <HAL_UART_IRQHandler+0x4ea>
 8036b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8036b9a:	2b00      	cmp	r3, #0
 8036b9c:	d003      	beq.n	8036ba6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8036b9e:	6878      	ldr	r0, [r7, #4]
 8036ba0:	f000 f959 	bl	8036e56 <UART_Transmit_IT>
    return;
 8036ba4:	e014      	b.n	8036bd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8036ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8036baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036bae:	2b00      	cmp	r3, #0
 8036bb0:	d00e      	beq.n	8036bd0 <HAL_UART_IRQHandler+0x514>
 8036bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8036bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036bba:	2b00      	cmp	r3, #0
 8036bbc:	d008      	beq.n	8036bd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8036bbe:	6878      	ldr	r0, [r7, #4]
 8036bc0:	f000 f999 	bl	8036ef6 <UART_EndTransmit_IT>
    return;
 8036bc4:	e004      	b.n	8036bd0 <HAL_UART_IRQHandler+0x514>
    return;
 8036bc6:	bf00      	nop
 8036bc8:	e002      	b.n	8036bd0 <HAL_UART_IRQHandler+0x514>
      return;
 8036bca:	bf00      	nop
 8036bcc:	e000      	b.n	8036bd0 <HAL_UART_IRQHandler+0x514>
      return;
 8036bce:	bf00      	nop
  }
}
 8036bd0:	37e8      	adds	r7, #232	; 0xe8
 8036bd2:	46bd      	mov	sp, r7
 8036bd4:	bd80      	pop	{r7, pc}
 8036bd6:	bf00      	nop

08036bd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8036bd8:	b480      	push	{r7}
 8036bda:	b083      	sub	sp, #12
 8036bdc:	af00      	add	r7, sp, #0
 8036bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8036be0:	bf00      	nop
 8036be2:	370c      	adds	r7, #12
 8036be4:	46bd      	mov	sp, r7
 8036be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036bea:	4770      	bx	lr

08036bec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8036bec:	b480      	push	{r7}
 8036bee:	b083      	sub	sp, #12
 8036bf0:	af00      	add	r7, sp, #0
 8036bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8036bf4:	bf00      	nop
 8036bf6:	370c      	adds	r7, #12
 8036bf8:	46bd      	mov	sp, r7
 8036bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036bfe:	4770      	bx	lr

08036c00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8036c00:	b480      	push	{r7}
 8036c02:	b083      	sub	sp, #12
 8036c04:	af00      	add	r7, sp, #0
 8036c06:	6078      	str	r0, [r7, #4]
 8036c08:	460b      	mov	r3, r1
 8036c0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8036c0c:	bf00      	nop
 8036c0e:	370c      	adds	r7, #12
 8036c10:	46bd      	mov	sp, r7
 8036c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036c16:	4770      	bx	lr

08036c18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8036c18:	b580      	push	{r7, lr}
 8036c1a:	b090      	sub	sp, #64	; 0x40
 8036c1c:	af00      	add	r7, sp, #0
 8036c1e:	60f8      	str	r0, [r7, #12]
 8036c20:	60b9      	str	r1, [r7, #8]
 8036c22:	603b      	str	r3, [r7, #0]
 8036c24:	4613      	mov	r3, r2
 8036c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8036c28:	e050      	b.n	8036ccc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8036c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8036c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8036c30:	d04c      	beq.n	8036ccc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8036c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8036c34:	2b00      	cmp	r3, #0
 8036c36:	d007      	beq.n	8036c48 <UART_WaitOnFlagUntilTimeout+0x30>
 8036c38:	f7fc f856 	bl	8032ce8 <HAL_GetTick>
 8036c3c:	4602      	mov	r2, r0
 8036c3e:	683b      	ldr	r3, [r7, #0]
 8036c40:	1ad3      	subs	r3, r2, r3
 8036c42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8036c44:	429a      	cmp	r2, r3
 8036c46:	d241      	bcs.n	8036ccc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8036c48:	68fb      	ldr	r3, [r7, #12]
 8036c4a:	681b      	ldr	r3, [r3, #0]
 8036c4c:	330c      	adds	r3, #12
 8036c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036c52:	e853 3f00 	ldrex	r3, [r3]
 8036c56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036c5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8036c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8036c60:	68fb      	ldr	r3, [r7, #12]
 8036c62:	681b      	ldr	r3, [r3, #0]
 8036c64:	330c      	adds	r3, #12
 8036c66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8036c68:	637a      	str	r2, [r7, #52]	; 0x34
 8036c6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036c6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8036c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8036c70:	e841 2300 	strex	r3, r2, [r1]
 8036c74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8036c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036c78:	2b00      	cmp	r3, #0
 8036c7a:	d1e5      	bne.n	8036c48 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036c7c:	68fb      	ldr	r3, [r7, #12]
 8036c7e:	681b      	ldr	r3, [r3, #0]
 8036c80:	3314      	adds	r3, #20
 8036c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036c84:	697b      	ldr	r3, [r7, #20]
 8036c86:	e853 3f00 	ldrex	r3, [r3]
 8036c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8036c8c:	693b      	ldr	r3, [r7, #16]
 8036c8e:	f023 0301 	bic.w	r3, r3, #1
 8036c92:	63bb      	str	r3, [r7, #56]	; 0x38
 8036c94:	68fb      	ldr	r3, [r7, #12]
 8036c96:	681b      	ldr	r3, [r3, #0]
 8036c98:	3314      	adds	r3, #20
 8036c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8036c9c:	623a      	str	r2, [r7, #32]
 8036c9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036ca0:	69f9      	ldr	r1, [r7, #28]
 8036ca2:	6a3a      	ldr	r2, [r7, #32]
 8036ca4:	e841 2300 	strex	r3, r2, [r1]
 8036ca8:	61bb      	str	r3, [r7, #24]
   return(result);
 8036caa:	69bb      	ldr	r3, [r7, #24]
 8036cac:	2b00      	cmp	r3, #0
 8036cae:	d1e5      	bne.n	8036c7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8036cb0:	68fb      	ldr	r3, [r7, #12]
 8036cb2:	2220      	movs	r2, #32
 8036cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8036cb8:	68fb      	ldr	r3, [r7, #12]
 8036cba:	2220      	movs	r2, #32
 8036cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8036cc0:	68fb      	ldr	r3, [r7, #12]
 8036cc2:	2200      	movs	r2, #0
 8036cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8036cc8:	2303      	movs	r3, #3
 8036cca:	e00f      	b.n	8036cec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8036ccc:	68fb      	ldr	r3, [r7, #12]
 8036cce:	681b      	ldr	r3, [r3, #0]
 8036cd0:	681a      	ldr	r2, [r3, #0]
 8036cd2:	68bb      	ldr	r3, [r7, #8]
 8036cd4:	4013      	ands	r3, r2
 8036cd6:	68ba      	ldr	r2, [r7, #8]
 8036cd8:	429a      	cmp	r2, r3
 8036cda:	bf0c      	ite	eq
 8036cdc:	2301      	moveq	r3, #1
 8036cde:	2300      	movne	r3, #0
 8036ce0:	b2db      	uxtb	r3, r3
 8036ce2:	461a      	mov	r2, r3
 8036ce4:	79fb      	ldrb	r3, [r7, #7]
 8036ce6:	429a      	cmp	r2, r3
 8036ce8:	d09f      	beq.n	8036c2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8036cea:	2300      	movs	r3, #0
}
 8036cec:	4618      	mov	r0, r3
 8036cee:	3740      	adds	r7, #64	; 0x40
 8036cf0:	46bd      	mov	sp, r7
 8036cf2:	bd80      	pop	{r7, pc}

08036cf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8036cf4:	b480      	push	{r7}
 8036cf6:	b085      	sub	sp, #20
 8036cf8:	af00      	add	r7, sp, #0
 8036cfa:	60f8      	str	r0, [r7, #12]
 8036cfc:	60b9      	str	r1, [r7, #8]
 8036cfe:	4613      	mov	r3, r2
 8036d00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8036d02:	68fb      	ldr	r3, [r7, #12]
 8036d04:	68ba      	ldr	r2, [r7, #8]
 8036d06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8036d08:	68fb      	ldr	r3, [r7, #12]
 8036d0a:	88fa      	ldrh	r2, [r7, #6]
 8036d0c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8036d0e:	68fb      	ldr	r3, [r7, #12]
 8036d10:	88fa      	ldrh	r2, [r7, #6]
 8036d12:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8036d14:	68fb      	ldr	r3, [r7, #12]
 8036d16:	2200      	movs	r2, #0
 8036d18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8036d1a:	68fb      	ldr	r3, [r7, #12]
 8036d1c:	2222      	movs	r2, #34	; 0x22
 8036d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8036d22:	68fb      	ldr	r3, [r7, #12]
 8036d24:	2200      	movs	r2, #0
 8036d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8036d2a:	68fb      	ldr	r3, [r7, #12]
 8036d2c:	681b      	ldr	r3, [r3, #0]
 8036d2e:	68da      	ldr	r2, [r3, #12]
 8036d30:	68fb      	ldr	r3, [r7, #12]
 8036d32:	681b      	ldr	r3, [r3, #0]
 8036d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8036d38:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8036d3a:	68fb      	ldr	r3, [r7, #12]
 8036d3c:	681b      	ldr	r3, [r3, #0]
 8036d3e:	695a      	ldr	r2, [r3, #20]
 8036d40:	68fb      	ldr	r3, [r7, #12]
 8036d42:	681b      	ldr	r3, [r3, #0]
 8036d44:	f042 0201 	orr.w	r2, r2, #1
 8036d48:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8036d4a:	68fb      	ldr	r3, [r7, #12]
 8036d4c:	681b      	ldr	r3, [r3, #0]
 8036d4e:	68da      	ldr	r2, [r3, #12]
 8036d50:	68fb      	ldr	r3, [r7, #12]
 8036d52:	681b      	ldr	r3, [r3, #0]
 8036d54:	f042 0220 	orr.w	r2, r2, #32
 8036d58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8036d5a:	2300      	movs	r3, #0
}
 8036d5c:	4618      	mov	r0, r3
 8036d5e:	3714      	adds	r7, #20
 8036d60:	46bd      	mov	sp, r7
 8036d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036d66:	4770      	bx	lr

08036d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8036d68:	b480      	push	{r7}
 8036d6a:	b095      	sub	sp, #84	; 0x54
 8036d6c:	af00      	add	r7, sp, #0
 8036d6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8036d70:	687b      	ldr	r3, [r7, #4]
 8036d72:	681b      	ldr	r3, [r3, #0]
 8036d74:	330c      	adds	r3, #12
 8036d76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8036d7a:	e853 3f00 	ldrex	r3, [r3]
 8036d7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8036d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8036d82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8036d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8036d88:	687b      	ldr	r3, [r7, #4]
 8036d8a:	681b      	ldr	r3, [r3, #0]
 8036d8c:	330c      	adds	r3, #12
 8036d8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8036d90:	643a      	str	r2, [r7, #64]	; 0x40
 8036d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036d94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8036d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8036d98:	e841 2300 	strex	r3, r2, [r1]
 8036d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8036d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8036da0:	2b00      	cmp	r3, #0
 8036da2:	d1e5      	bne.n	8036d70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8036da4:	687b      	ldr	r3, [r7, #4]
 8036da6:	681b      	ldr	r3, [r3, #0]
 8036da8:	3314      	adds	r3, #20
 8036daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036dac:	6a3b      	ldr	r3, [r7, #32]
 8036dae:	e853 3f00 	ldrex	r3, [r3]
 8036db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8036db4:	69fb      	ldr	r3, [r7, #28]
 8036db6:	f023 0301 	bic.w	r3, r3, #1
 8036dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8036dbc:	687b      	ldr	r3, [r7, #4]
 8036dbe:	681b      	ldr	r3, [r3, #0]
 8036dc0:	3314      	adds	r3, #20
 8036dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8036dc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8036dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8036dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8036dcc:	e841 2300 	strex	r3, r2, [r1]
 8036dd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8036dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8036dd4:	2b00      	cmp	r3, #0
 8036dd6:	d1e5      	bne.n	8036da4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8036dd8:	687b      	ldr	r3, [r7, #4]
 8036dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8036ddc:	2b01      	cmp	r3, #1
 8036dde:	d119      	bne.n	8036e14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8036de0:	687b      	ldr	r3, [r7, #4]
 8036de2:	681b      	ldr	r3, [r3, #0]
 8036de4:	330c      	adds	r3, #12
 8036de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8036de8:	68fb      	ldr	r3, [r7, #12]
 8036dea:	e853 3f00 	ldrex	r3, [r3]
 8036dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8036df0:	68bb      	ldr	r3, [r7, #8]
 8036df2:	f023 0310 	bic.w	r3, r3, #16
 8036df6:	647b      	str	r3, [r7, #68]	; 0x44
 8036df8:	687b      	ldr	r3, [r7, #4]
 8036dfa:	681b      	ldr	r3, [r3, #0]
 8036dfc:	330c      	adds	r3, #12
 8036dfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8036e00:	61ba      	str	r2, [r7, #24]
 8036e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8036e04:	6979      	ldr	r1, [r7, #20]
 8036e06:	69ba      	ldr	r2, [r7, #24]
 8036e08:	e841 2300 	strex	r3, r2, [r1]
 8036e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8036e0e:	693b      	ldr	r3, [r7, #16]
 8036e10:	2b00      	cmp	r3, #0
 8036e12:	d1e5      	bne.n	8036de0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8036e14:	687b      	ldr	r3, [r7, #4]
 8036e16:	2220      	movs	r2, #32
 8036e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8036e1c:	687b      	ldr	r3, [r7, #4]
 8036e1e:	2200      	movs	r2, #0
 8036e20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8036e22:	bf00      	nop
 8036e24:	3754      	adds	r7, #84	; 0x54
 8036e26:	46bd      	mov	sp, r7
 8036e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036e2c:	4770      	bx	lr

08036e2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8036e2e:	b580      	push	{r7, lr}
 8036e30:	b084      	sub	sp, #16
 8036e32:	af00      	add	r7, sp, #0
 8036e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8036e36:	687b      	ldr	r3, [r7, #4]
 8036e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8036e3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8036e3c:	68fb      	ldr	r3, [r7, #12]
 8036e3e:	2200      	movs	r2, #0
 8036e40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8036e42:	68fb      	ldr	r3, [r7, #12]
 8036e44:	2200      	movs	r2, #0
 8036e46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8036e48:	68f8      	ldr	r0, [r7, #12]
 8036e4a:	f7ff fecf 	bl	8036bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8036e4e:	bf00      	nop
 8036e50:	3710      	adds	r7, #16
 8036e52:	46bd      	mov	sp, r7
 8036e54:	bd80      	pop	{r7, pc}

08036e56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8036e56:	b480      	push	{r7}
 8036e58:	b085      	sub	sp, #20
 8036e5a:	af00      	add	r7, sp, #0
 8036e5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8036e5e:	687b      	ldr	r3, [r7, #4]
 8036e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8036e64:	b2db      	uxtb	r3, r3
 8036e66:	2b21      	cmp	r3, #33	; 0x21
 8036e68:	d13e      	bne.n	8036ee8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8036e6a:	687b      	ldr	r3, [r7, #4]
 8036e6c:	689b      	ldr	r3, [r3, #8]
 8036e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036e72:	d114      	bne.n	8036e9e <UART_Transmit_IT+0x48>
 8036e74:	687b      	ldr	r3, [r7, #4]
 8036e76:	691b      	ldr	r3, [r3, #16]
 8036e78:	2b00      	cmp	r3, #0
 8036e7a:	d110      	bne.n	8036e9e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8036e7c:	687b      	ldr	r3, [r7, #4]
 8036e7e:	6a1b      	ldr	r3, [r3, #32]
 8036e80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8036e82:	68fb      	ldr	r3, [r7, #12]
 8036e84:	881b      	ldrh	r3, [r3, #0]
 8036e86:	461a      	mov	r2, r3
 8036e88:	687b      	ldr	r3, [r7, #4]
 8036e8a:	681b      	ldr	r3, [r3, #0]
 8036e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8036e90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8036e92:	687b      	ldr	r3, [r7, #4]
 8036e94:	6a1b      	ldr	r3, [r3, #32]
 8036e96:	1c9a      	adds	r2, r3, #2
 8036e98:	687b      	ldr	r3, [r7, #4]
 8036e9a:	621a      	str	r2, [r3, #32]
 8036e9c:	e008      	b.n	8036eb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8036e9e:	687b      	ldr	r3, [r7, #4]
 8036ea0:	6a1b      	ldr	r3, [r3, #32]
 8036ea2:	1c59      	adds	r1, r3, #1
 8036ea4:	687a      	ldr	r2, [r7, #4]
 8036ea6:	6211      	str	r1, [r2, #32]
 8036ea8:	781a      	ldrb	r2, [r3, #0]
 8036eaa:	687b      	ldr	r3, [r7, #4]
 8036eac:	681b      	ldr	r3, [r3, #0]
 8036eae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8036eb0:	687b      	ldr	r3, [r7, #4]
 8036eb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8036eb4:	b29b      	uxth	r3, r3
 8036eb6:	3b01      	subs	r3, #1
 8036eb8:	b29b      	uxth	r3, r3
 8036eba:	687a      	ldr	r2, [r7, #4]
 8036ebc:	4619      	mov	r1, r3
 8036ebe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8036ec0:	2b00      	cmp	r3, #0
 8036ec2:	d10f      	bne.n	8036ee4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8036ec4:	687b      	ldr	r3, [r7, #4]
 8036ec6:	681b      	ldr	r3, [r3, #0]
 8036ec8:	68da      	ldr	r2, [r3, #12]
 8036eca:	687b      	ldr	r3, [r7, #4]
 8036ecc:	681b      	ldr	r3, [r3, #0]
 8036ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8036ed2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8036ed4:	687b      	ldr	r3, [r7, #4]
 8036ed6:	681b      	ldr	r3, [r3, #0]
 8036ed8:	68da      	ldr	r2, [r3, #12]
 8036eda:	687b      	ldr	r3, [r7, #4]
 8036edc:	681b      	ldr	r3, [r3, #0]
 8036ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8036ee2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8036ee4:	2300      	movs	r3, #0
 8036ee6:	e000      	b.n	8036eea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8036ee8:	2302      	movs	r3, #2
  }
}
 8036eea:	4618      	mov	r0, r3
 8036eec:	3714      	adds	r7, #20
 8036eee:	46bd      	mov	sp, r7
 8036ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036ef4:	4770      	bx	lr

08036ef6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8036ef6:	b580      	push	{r7, lr}
 8036ef8:	b082      	sub	sp, #8
 8036efa:	af00      	add	r7, sp, #0
 8036efc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8036efe:	687b      	ldr	r3, [r7, #4]
 8036f00:	681b      	ldr	r3, [r3, #0]
 8036f02:	68da      	ldr	r2, [r3, #12]
 8036f04:	687b      	ldr	r3, [r7, #4]
 8036f06:	681b      	ldr	r3, [r3, #0]
 8036f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8036f0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8036f0e:	687b      	ldr	r3, [r7, #4]
 8036f10:	2220      	movs	r2, #32
 8036f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8036f16:	6878      	ldr	r0, [r7, #4]
 8036f18:	f7ff fe5e 	bl	8036bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8036f1c:	2300      	movs	r3, #0
}
 8036f1e:	4618      	mov	r0, r3
 8036f20:	3708      	adds	r7, #8
 8036f22:	46bd      	mov	sp, r7
 8036f24:	bd80      	pop	{r7, pc}

08036f26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8036f26:	b580      	push	{r7, lr}
 8036f28:	b08c      	sub	sp, #48	; 0x30
 8036f2a:	af00      	add	r7, sp, #0
 8036f2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8036f2e:	687b      	ldr	r3, [r7, #4]
 8036f30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8036f34:	b2db      	uxtb	r3, r3
 8036f36:	2b22      	cmp	r3, #34	; 0x22
 8036f38:	f040 80ab 	bne.w	8037092 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8036f3c:	687b      	ldr	r3, [r7, #4]
 8036f3e:	689b      	ldr	r3, [r3, #8]
 8036f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036f44:	d117      	bne.n	8036f76 <UART_Receive_IT+0x50>
 8036f46:	687b      	ldr	r3, [r7, #4]
 8036f48:	691b      	ldr	r3, [r3, #16]
 8036f4a:	2b00      	cmp	r3, #0
 8036f4c:	d113      	bne.n	8036f76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8036f4e:	2300      	movs	r3, #0
 8036f50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8036f52:	687b      	ldr	r3, [r7, #4]
 8036f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036f56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8036f58:	687b      	ldr	r3, [r7, #4]
 8036f5a:	681b      	ldr	r3, [r3, #0]
 8036f5c:	685b      	ldr	r3, [r3, #4]
 8036f5e:	b29b      	uxth	r3, r3
 8036f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8036f64:	b29a      	uxth	r2, r3
 8036f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036f68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8036f6a:	687b      	ldr	r3, [r7, #4]
 8036f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036f6e:	1c9a      	adds	r2, r3, #2
 8036f70:	687b      	ldr	r3, [r7, #4]
 8036f72:	629a      	str	r2, [r3, #40]	; 0x28
 8036f74:	e026      	b.n	8036fc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8036f76:	687b      	ldr	r3, [r7, #4]
 8036f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8036f7c:	2300      	movs	r3, #0
 8036f7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8036f80:	687b      	ldr	r3, [r7, #4]
 8036f82:	689b      	ldr	r3, [r3, #8]
 8036f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8036f88:	d007      	beq.n	8036f9a <UART_Receive_IT+0x74>
 8036f8a:	687b      	ldr	r3, [r7, #4]
 8036f8c:	689b      	ldr	r3, [r3, #8]
 8036f8e:	2b00      	cmp	r3, #0
 8036f90:	d10a      	bne.n	8036fa8 <UART_Receive_IT+0x82>
 8036f92:	687b      	ldr	r3, [r7, #4]
 8036f94:	691b      	ldr	r3, [r3, #16]
 8036f96:	2b00      	cmp	r3, #0
 8036f98:	d106      	bne.n	8036fa8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8036f9a:	687b      	ldr	r3, [r7, #4]
 8036f9c:	681b      	ldr	r3, [r3, #0]
 8036f9e:	685b      	ldr	r3, [r3, #4]
 8036fa0:	b2da      	uxtb	r2, r3
 8036fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036fa4:	701a      	strb	r2, [r3, #0]
 8036fa6:	e008      	b.n	8036fba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8036fa8:	687b      	ldr	r3, [r7, #4]
 8036faa:	681b      	ldr	r3, [r3, #0]
 8036fac:	685b      	ldr	r3, [r3, #4]
 8036fae:	b2db      	uxtb	r3, r3
 8036fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8036fb4:	b2da      	uxtb	r2, r3
 8036fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8036fb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8036fba:	687b      	ldr	r3, [r7, #4]
 8036fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8036fbe:	1c5a      	adds	r2, r3, #1
 8036fc0:	687b      	ldr	r3, [r7, #4]
 8036fc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8036fc4:	687b      	ldr	r3, [r7, #4]
 8036fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8036fc8:	b29b      	uxth	r3, r3
 8036fca:	3b01      	subs	r3, #1
 8036fcc:	b29b      	uxth	r3, r3
 8036fce:	687a      	ldr	r2, [r7, #4]
 8036fd0:	4619      	mov	r1, r3
 8036fd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8036fd4:	2b00      	cmp	r3, #0
 8036fd6:	d15a      	bne.n	803708e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8036fd8:	687b      	ldr	r3, [r7, #4]
 8036fda:	681b      	ldr	r3, [r3, #0]
 8036fdc:	68da      	ldr	r2, [r3, #12]
 8036fde:	687b      	ldr	r3, [r7, #4]
 8036fe0:	681b      	ldr	r3, [r3, #0]
 8036fe2:	f022 0220 	bic.w	r2, r2, #32
 8036fe6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8036fe8:	687b      	ldr	r3, [r7, #4]
 8036fea:	681b      	ldr	r3, [r3, #0]
 8036fec:	68da      	ldr	r2, [r3, #12]
 8036fee:	687b      	ldr	r3, [r7, #4]
 8036ff0:	681b      	ldr	r3, [r3, #0]
 8036ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8036ff6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8036ff8:	687b      	ldr	r3, [r7, #4]
 8036ffa:	681b      	ldr	r3, [r3, #0]
 8036ffc:	695a      	ldr	r2, [r3, #20]
 8036ffe:	687b      	ldr	r3, [r7, #4]
 8037000:	681b      	ldr	r3, [r3, #0]
 8037002:	f022 0201 	bic.w	r2, r2, #1
 8037006:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8037008:	687b      	ldr	r3, [r7, #4]
 803700a:	2220      	movs	r2, #32
 803700c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8037010:	687b      	ldr	r3, [r7, #4]
 8037012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8037014:	2b01      	cmp	r3, #1
 8037016:	d135      	bne.n	8037084 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8037018:	687b      	ldr	r3, [r7, #4]
 803701a:	2200      	movs	r2, #0
 803701c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 803701e:	687b      	ldr	r3, [r7, #4]
 8037020:	681b      	ldr	r3, [r3, #0]
 8037022:	330c      	adds	r3, #12
 8037024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8037026:	697b      	ldr	r3, [r7, #20]
 8037028:	e853 3f00 	ldrex	r3, [r3]
 803702c:	613b      	str	r3, [r7, #16]
   return(result);
 803702e:	693b      	ldr	r3, [r7, #16]
 8037030:	f023 0310 	bic.w	r3, r3, #16
 8037034:	627b      	str	r3, [r7, #36]	; 0x24
 8037036:	687b      	ldr	r3, [r7, #4]
 8037038:	681b      	ldr	r3, [r3, #0]
 803703a:	330c      	adds	r3, #12
 803703c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803703e:	623a      	str	r2, [r7, #32]
 8037040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8037042:	69f9      	ldr	r1, [r7, #28]
 8037044:	6a3a      	ldr	r2, [r7, #32]
 8037046:	e841 2300 	strex	r3, r2, [r1]
 803704a:	61bb      	str	r3, [r7, #24]
   return(result);
 803704c:	69bb      	ldr	r3, [r7, #24]
 803704e:	2b00      	cmp	r3, #0
 8037050:	d1e5      	bne.n	803701e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8037052:	687b      	ldr	r3, [r7, #4]
 8037054:	681b      	ldr	r3, [r3, #0]
 8037056:	681b      	ldr	r3, [r3, #0]
 8037058:	f003 0310 	and.w	r3, r3, #16
 803705c:	2b10      	cmp	r3, #16
 803705e:	d10a      	bne.n	8037076 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8037060:	2300      	movs	r3, #0
 8037062:	60fb      	str	r3, [r7, #12]
 8037064:	687b      	ldr	r3, [r7, #4]
 8037066:	681b      	ldr	r3, [r3, #0]
 8037068:	681b      	ldr	r3, [r3, #0]
 803706a:	60fb      	str	r3, [r7, #12]
 803706c:	687b      	ldr	r3, [r7, #4]
 803706e:	681b      	ldr	r3, [r3, #0]
 8037070:	685b      	ldr	r3, [r3, #4]
 8037072:	60fb      	str	r3, [r7, #12]
 8037074:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8037076:	687b      	ldr	r3, [r7, #4]
 8037078:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 803707a:	4619      	mov	r1, r3
 803707c:	6878      	ldr	r0, [r7, #4]
 803707e:	f7ff fdbf 	bl	8036c00 <HAL_UARTEx_RxEventCallback>
 8037082:	e002      	b.n	803708a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8037084:	6878      	ldr	r0, [r7, #4]
 8037086:	f7f3 fe19 	bl	802acbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 803708a:	2300      	movs	r3, #0
 803708c:	e002      	b.n	8037094 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 803708e:	2300      	movs	r3, #0
 8037090:	e000      	b.n	8037094 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8037092:	2302      	movs	r3, #2
  }
}
 8037094:	4618      	mov	r0, r3
 8037096:	3730      	adds	r7, #48	; 0x30
 8037098:	46bd      	mov	sp, r7
 803709a:	bd80      	pop	{r7, pc}

0803709c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 803709c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80370a0:	b09f      	sub	sp, #124	; 0x7c
 80370a2:	af00      	add	r7, sp, #0
 80370a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80370a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80370a8:	681b      	ldr	r3, [r3, #0]
 80370aa:	691b      	ldr	r3, [r3, #16]
 80370ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80370b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80370b2:	68d9      	ldr	r1, [r3, #12]
 80370b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80370b6:	681a      	ldr	r2, [r3, #0]
 80370b8:	ea40 0301 	orr.w	r3, r0, r1
 80370bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80370be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80370c0:	689a      	ldr	r2, [r3, #8]
 80370c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80370c4:	691b      	ldr	r3, [r3, #16]
 80370c6:	431a      	orrs	r2, r3
 80370c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80370ca:	695b      	ldr	r3, [r3, #20]
 80370cc:	431a      	orrs	r2, r3
 80370ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80370d0:	69db      	ldr	r3, [r3, #28]
 80370d2:	4313      	orrs	r3, r2
 80370d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80370d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80370d8:	681b      	ldr	r3, [r3, #0]
 80370da:	68db      	ldr	r3, [r3, #12]
 80370dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80370e0:	f021 010c 	bic.w	r1, r1, #12
 80370e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80370e6:	681a      	ldr	r2, [r3, #0]
 80370e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80370ea:	430b      	orrs	r3, r1
 80370ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80370ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80370f0:	681b      	ldr	r3, [r3, #0]
 80370f2:	695b      	ldr	r3, [r3, #20]
 80370f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80370f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80370fa:	6999      	ldr	r1, [r3, #24]
 80370fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80370fe:	681a      	ldr	r2, [r3, #0]
 8037100:	ea40 0301 	orr.w	r3, r0, r1
 8037104:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8037106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8037108:	681a      	ldr	r2, [r3, #0]
 803710a:	4bc5      	ldr	r3, [pc, #788]	; (8037420 <UART_SetConfig+0x384>)
 803710c:	429a      	cmp	r2, r3
 803710e:	d004      	beq.n	803711a <UART_SetConfig+0x7e>
 8037110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8037112:	681a      	ldr	r2, [r3, #0]
 8037114:	4bc3      	ldr	r3, [pc, #780]	; (8037424 <UART_SetConfig+0x388>)
 8037116:	429a      	cmp	r2, r3
 8037118:	d103      	bne.n	8037122 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 803711a:	f7fd f8a7 	bl	803426c <HAL_RCC_GetPCLK2Freq>
 803711e:	6778      	str	r0, [r7, #116]	; 0x74
 8037120:	e002      	b.n	8037128 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8037122:	f7fd f88f 	bl	8034244 <HAL_RCC_GetPCLK1Freq>
 8037126:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8037128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803712a:	69db      	ldr	r3, [r3, #28]
 803712c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8037130:	f040 80b6 	bne.w	80372a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8037134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8037136:	461c      	mov	r4, r3
 8037138:	f04f 0500 	mov.w	r5, #0
 803713c:	4622      	mov	r2, r4
 803713e:	462b      	mov	r3, r5
 8037140:	1891      	adds	r1, r2, r2
 8037142:	6439      	str	r1, [r7, #64]	; 0x40
 8037144:	415b      	adcs	r3, r3
 8037146:	647b      	str	r3, [r7, #68]	; 0x44
 8037148:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 803714c:	1912      	adds	r2, r2, r4
 803714e:	eb45 0303 	adc.w	r3, r5, r3
 8037152:	f04f 0000 	mov.w	r0, #0
 8037156:	f04f 0100 	mov.w	r1, #0
 803715a:	00d9      	lsls	r1, r3, #3
 803715c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8037160:	00d0      	lsls	r0, r2, #3
 8037162:	4602      	mov	r2, r0
 8037164:	460b      	mov	r3, r1
 8037166:	1911      	adds	r1, r2, r4
 8037168:	6639      	str	r1, [r7, #96]	; 0x60
 803716a:	416b      	adcs	r3, r5
 803716c:	667b      	str	r3, [r7, #100]	; 0x64
 803716e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8037170:	685b      	ldr	r3, [r3, #4]
 8037172:	461a      	mov	r2, r3
 8037174:	f04f 0300 	mov.w	r3, #0
 8037178:	1891      	adds	r1, r2, r2
 803717a:	63b9      	str	r1, [r7, #56]	; 0x38
 803717c:	415b      	adcs	r3, r3
 803717e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8037180:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8037184:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8037188:	f7e9 fd7e 	bl	8020c88 <__aeabi_uldivmod>
 803718c:	4602      	mov	r2, r0
 803718e:	460b      	mov	r3, r1
 8037190:	4ba5      	ldr	r3, [pc, #660]	; (8037428 <UART_SetConfig+0x38c>)
 8037192:	fba3 2302 	umull	r2, r3, r3, r2
 8037196:	095b      	lsrs	r3, r3, #5
 8037198:	011e      	lsls	r6, r3, #4
 803719a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803719c:	461c      	mov	r4, r3
 803719e:	f04f 0500 	mov.w	r5, #0
 80371a2:	4622      	mov	r2, r4
 80371a4:	462b      	mov	r3, r5
 80371a6:	1891      	adds	r1, r2, r2
 80371a8:	6339      	str	r1, [r7, #48]	; 0x30
 80371aa:	415b      	adcs	r3, r3
 80371ac:	637b      	str	r3, [r7, #52]	; 0x34
 80371ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80371b2:	1912      	adds	r2, r2, r4
 80371b4:	eb45 0303 	adc.w	r3, r5, r3
 80371b8:	f04f 0000 	mov.w	r0, #0
 80371bc:	f04f 0100 	mov.w	r1, #0
 80371c0:	00d9      	lsls	r1, r3, #3
 80371c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80371c6:	00d0      	lsls	r0, r2, #3
 80371c8:	4602      	mov	r2, r0
 80371ca:	460b      	mov	r3, r1
 80371cc:	1911      	adds	r1, r2, r4
 80371ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80371d0:	416b      	adcs	r3, r5
 80371d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80371d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80371d6:	685b      	ldr	r3, [r3, #4]
 80371d8:	461a      	mov	r2, r3
 80371da:	f04f 0300 	mov.w	r3, #0
 80371de:	1891      	adds	r1, r2, r2
 80371e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80371e2:	415b      	adcs	r3, r3
 80371e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80371e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80371ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80371ee:	f7e9 fd4b 	bl	8020c88 <__aeabi_uldivmod>
 80371f2:	4602      	mov	r2, r0
 80371f4:	460b      	mov	r3, r1
 80371f6:	4b8c      	ldr	r3, [pc, #560]	; (8037428 <UART_SetConfig+0x38c>)
 80371f8:	fba3 1302 	umull	r1, r3, r3, r2
 80371fc:	095b      	lsrs	r3, r3, #5
 80371fe:	2164      	movs	r1, #100	; 0x64
 8037200:	fb01 f303 	mul.w	r3, r1, r3
 8037204:	1ad3      	subs	r3, r2, r3
 8037206:	00db      	lsls	r3, r3, #3
 8037208:	3332      	adds	r3, #50	; 0x32
 803720a:	4a87      	ldr	r2, [pc, #540]	; (8037428 <UART_SetConfig+0x38c>)
 803720c:	fba2 2303 	umull	r2, r3, r2, r3
 8037210:	095b      	lsrs	r3, r3, #5
 8037212:	005b      	lsls	r3, r3, #1
 8037214:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8037218:	441e      	add	r6, r3
 803721a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803721c:	4618      	mov	r0, r3
 803721e:	f04f 0100 	mov.w	r1, #0
 8037222:	4602      	mov	r2, r0
 8037224:	460b      	mov	r3, r1
 8037226:	1894      	adds	r4, r2, r2
 8037228:	623c      	str	r4, [r7, #32]
 803722a:	415b      	adcs	r3, r3
 803722c:	627b      	str	r3, [r7, #36]	; 0x24
 803722e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8037232:	1812      	adds	r2, r2, r0
 8037234:	eb41 0303 	adc.w	r3, r1, r3
 8037238:	f04f 0400 	mov.w	r4, #0
 803723c:	f04f 0500 	mov.w	r5, #0
 8037240:	00dd      	lsls	r5, r3, #3
 8037242:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8037246:	00d4      	lsls	r4, r2, #3
 8037248:	4622      	mov	r2, r4
 803724a:	462b      	mov	r3, r5
 803724c:	1814      	adds	r4, r2, r0
 803724e:	653c      	str	r4, [r7, #80]	; 0x50
 8037250:	414b      	adcs	r3, r1
 8037252:	657b      	str	r3, [r7, #84]	; 0x54
 8037254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8037256:	685b      	ldr	r3, [r3, #4]
 8037258:	461a      	mov	r2, r3
 803725a:	f04f 0300 	mov.w	r3, #0
 803725e:	1891      	adds	r1, r2, r2
 8037260:	61b9      	str	r1, [r7, #24]
 8037262:	415b      	adcs	r3, r3
 8037264:	61fb      	str	r3, [r7, #28]
 8037266:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 803726a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 803726e:	f7e9 fd0b 	bl	8020c88 <__aeabi_uldivmod>
 8037272:	4602      	mov	r2, r0
 8037274:	460b      	mov	r3, r1
 8037276:	4b6c      	ldr	r3, [pc, #432]	; (8037428 <UART_SetConfig+0x38c>)
 8037278:	fba3 1302 	umull	r1, r3, r3, r2
 803727c:	095b      	lsrs	r3, r3, #5
 803727e:	2164      	movs	r1, #100	; 0x64
 8037280:	fb01 f303 	mul.w	r3, r1, r3
 8037284:	1ad3      	subs	r3, r2, r3
 8037286:	00db      	lsls	r3, r3, #3
 8037288:	3332      	adds	r3, #50	; 0x32
 803728a:	4a67      	ldr	r2, [pc, #412]	; (8037428 <UART_SetConfig+0x38c>)
 803728c:	fba2 2303 	umull	r2, r3, r2, r3
 8037290:	095b      	lsrs	r3, r3, #5
 8037292:	f003 0207 	and.w	r2, r3, #7
 8037296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8037298:	681b      	ldr	r3, [r3, #0]
 803729a:	4432      	add	r2, r6
 803729c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 803729e:	e0b9      	b.n	8037414 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80372a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80372a2:	461c      	mov	r4, r3
 80372a4:	f04f 0500 	mov.w	r5, #0
 80372a8:	4622      	mov	r2, r4
 80372aa:	462b      	mov	r3, r5
 80372ac:	1891      	adds	r1, r2, r2
 80372ae:	6139      	str	r1, [r7, #16]
 80372b0:	415b      	adcs	r3, r3
 80372b2:	617b      	str	r3, [r7, #20]
 80372b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80372b8:	1912      	adds	r2, r2, r4
 80372ba:	eb45 0303 	adc.w	r3, r5, r3
 80372be:	f04f 0000 	mov.w	r0, #0
 80372c2:	f04f 0100 	mov.w	r1, #0
 80372c6:	00d9      	lsls	r1, r3, #3
 80372c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80372cc:	00d0      	lsls	r0, r2, #3
 80372ce:	4602      	mov	r2, r0
 80372d0:	460b      	mov	r3, r1
 80372d2:	eb12 0804 	adds.w	r8, r2, r4
 80372d6:	eb43 0905 	adc.w	r9, r3, r5
 80372da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80372dc:	685b      	ldr	r3, [r3, #4]
 80372de:	4618      	mov	r0, r3
 80372e0:	f04f 0100 	mov.w	r1, #0
 80372e4:	f04f 0200 	mov.w	r2, #0
 80372e8:	f04f 0300 	mov.w	r3, #0
 80372ec:	008b      	lsls	r3, r1, #2
 80372ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80372f2:	0082      	lsls	r2, r0, #2
 80372f4:	4640      	mov	r0, r8
 80372f6:	4649      	mov	r1, r9
 80372f8:	f7e9 fcc6 	bl	8020c88 <__aeabi_uldivmod>
 80372fc:	4602      	mov	r2, r0
 80372fe:	460b      	mov	r3, r1
 8037300:	4b49      	ldr	r3, [pc, #292]	; (8037428 <UART_SetConfig+0x38c>)
 8037302:	fba3 2302 	umull	r2, r3, r3, r2
 8037306:	095b      	lsrs	r3, r3, #5
 8037308:	011e      	lsls	r6, r3, #4
 803730a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803730c:	4618      	mov	r0, r3
 803730e:	f04f 0100 	mov.w	r1, #0
 8037312:	4602      	mov	r2, r0
 8037314:	460b      	mov	r3, r1
 8037316:	1894      	adds	r4, r2, r2
 8037318:	60bc      	str	r4, [r7, #8]
 803731a:	415b      	adcs	r3, r3
 803731c:	60fb      	str	r3, [r7, #12]
 803731e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8037322:	1812      	adds	r2, r2, r0
 8037324:	eb41 0303 	adc.w	r3, r1, r3
 8037328:	f04f 0400 	mov.w	r4, #0
 803732c:	f04f 0500 	mov.w	r5, #0
 8037330:	00dd      	lsls	r5, r3, #3
 8037332:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8037336:	00d4      	lsls	r4, r2, #3
 8037338:	4622      	mov	r2, r4
 803733a:	462b      	mov	r3, r5
 803733c:	1814      	adds	r4, r2, r0
 803733e:	64bc      	str	r4, [r7, #72]	; 0x48
 8037340:	414b      	adcs	r3, r1
 8037342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8037344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8037346:	685b      	ldr	r3, [r3, #4]
 8037348:	4618      	mov	r0, r3
 803734a:	f04f 0100 	mov.w	r1, #0
 803734e:	f04f 0200 	mov.w	r2, #0
 8037352:	f04f 0300 	mov.w	r3, #0
 8037356:	008b      	lsls	r3, r1, #2
 8037358:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 803735c:	0082      	lsls	r2, r0, #2
 803735e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8037362:	f7e9 fc91 	bl	8020c88 <__aeabi_uldivmod>
 8037366:	4602      	mov	r2, r0
 8037368:	460b      	mov	r3, r1
 803736a:	4b2f      	ldr	r3, [pc, #188]	; (8037428 <UART_SetConfig+0x38c>)
 803736c:	fba3 1302 	umull	r1, r3, r3, r2
 8037370:	095b      	lsrs	r3, r3, #5
 8037372:	2164      	movs	r1, #100	; 0x64
 8037374:	fb01 f303 	mul.w	r3, r1, r3
 8037378:	1ad3      	subs	r3, r2, r3
 803737a:	011b      	lsls	r3, r3, #4
 803737c:	3332      	adds	r3, #50	; 0x32
 803737e:	4a2a      	ldr	r2, [pc, #168]	; (8037428 <UART_SetConfig+0x38c>)
 8037380:	fba2 2303 	umull	r2, r3, r2, r3
 8037384:	095b      	lsrs	r3, r3, #5
 8037386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 803738a:	441e      	add	r6, r3
 803738c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 803738e:	4618      	mov	r0, r3
 8037390:	f04f 0100 	mov.w	r1, #0
 8037394:	4602      	mov	r2, r0
 8037396:	460b      	mov	r3, r1
 8037398:	1894      	adds	r4, r2, r2
 803739a:	603c      	str	r4, [r7, #0]
 803739c:	415b      	adcs	r3, r3
 803739e:	607b      	str	r3, [r7, #4]
 80373a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80373a4:	1812      	adds	r2, r2, r0
 80373a6:	eb41 0303 	adc.w	r3, r1, r3
 80373aa:	f04f 0400 	mov.w	r4, #0
 80373ae:	f04f 0500 	mov.w	r5, #0
 80373b2:	00dd      	lsls	r5, r3, #3
 80373b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80373b8:	00d4      	lsls	r4, r2, #3
 80373ba:	4622      	mov	r2, r4
 80373bc:	462b      	mov	r3, r5
 80373be:	eb12 0a00 	adds.w	sl, r2, r0
 80373c2:	eb43 0b01 	adc.w	fp, r3, r1
 80373c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80373c8:	685b      	ldr	r3, [r3, #4]
 80373ca:	4618      	mov	r0, r3
 80373cc:	f04f 0100 	mov.w	r1, #0
 80373d0:	f04f 0200 	mov.w	r2, #0
 80373d4:	f04f 0300 	mov.w	r3, #0
 80373d8:	008b      	lsls	r3, r1, #2
 80373da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80373de:	0082      	lsls	r2, r0, #2
 80373e0:	4650      	mov	r0, sl
 80373e2:	4659      	mov	r1, fp
 80373e4:	f7e9 fc50 	bl	8020c88 <__aeabi_uldivmod>
 80373e8:	4602      	mov	r2, r0
 80373ea:	460b      	mov	r3, r1
 80373ec:	4b0e      	ldr	r3, [pc, #56]	; (8037428 <UART_SetConfig+0x38c>)
 80373ee:	fba3 1302 	umull	r1, r3, r3, r2
 80373f2:	095b      	lsrs	r3, r3, #5
 80373f4:	2164      	movs	r1, #100	; 0x64
 80373f6:	fb01 f303 	mul.w	r3, r1, r3
 80373fa:	1ad3      	subs	r3, r2, r3
 80373fc:	011b      	lsls	r3, r3, #4
 80373fe:	3332      	adds	r3, #50	; 0x32
 8037400:	4a09      	ldr	r2, [pc, #36]	; (8037428 <UART_SetConfig+0x38c>)
 8037402:	fba2 2303 	umull	r2, r3, r2, r3
 8037406:	095b      	lsrs	r3, r3, #5
 8037408:	f003 020f 	and.w	r2, r3, #15
 803740c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803740e:	681b      	ldr	r3, [r3, #0]
 8037410:	4432      	add	r2, r6
 8037412:	609a      	str	r2, [r3, #8]
}
 8037414:	bf00      	nop
 8037416:	377c      	adds	r7, #124	; 0x7c
 8037418:	46bd      	mov	sp, r7
 803741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803741e:	bf00      	nop
 8037420:	40011000 	.word	0x40011000
 8037424:	40011400 	.word	0x40011400
 8037428:	51eb851f 	.word	0x51eb851f

0803742c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 803742c:	b084      	sub	sp, #16
 803742e:	b480      	push	{r7}
 8037430:	b085      	sub	sp, #20
 8037432:	af00      	add	r7, sp, #0
 8037434:	6078      	str	r0, [r7, #4]
 8037436:	f107 001c 	add.w	r0, r7, #28
 803743a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 803743e:	2300      	movs	r3, #0
 8037440:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8037442:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8037444:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8037446:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8037448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 803744a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 803744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 803744e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8037450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8037452:	431a      	orrs	r2, r3
             Init.ClockDiv
 8037454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8037456:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8037458:	68fa      	ldr	r2, [r7, #12]
 803745a:	4313      	orrs	r3, r2
 803745c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 803745e:	687b      	ldr	r3, [r7, #4]
 8037460:	685b      	ldr	r3, [r3, #4]
 8037462:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8037466:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 803746a:	68fa      	ldr	r2, [r7, #12]
 803746c:	431a      	orrs	r2, r3
 803746e:	687b      	ldr	r3, [r7, #4]
 8037470:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8037472:	2300      	movs	r3, #0
}
 8037474:	4618      	mov	r0, r3
 8037476:	3714      	adds	r7, #20
 8037478:	46bd      	mov	sp, r7
 803747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803747e:	b004      	add	sp, #16
 8037480:	4770      	bx	lr

08037482 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8037482:	b480      	push	{r7}
 8037484:	b083      	sub	sp, #12
 8037486:	af00      	add	r7, sp, #0
 8037488:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 803748a:	687b      	ldr	r3, [r7, #4]
 803748c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8037490:	4618      	mov	r0, r3
 8037492:	370c      	adds	r7, #12
 8037494:	46bd      	mov	sp, r7
 8037496:	f85d 7b04 	ldr.w	r7, [sp], #4
 803749a:	4770      	bx	lr

0803749c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 803749c:	b480      	push	{r7}
 803749e:	b083      	sub	sp, #12
 80374a0:	af00      	add	r7, sp, #0
 80374a2:	6078      	str	r0, [r7, #4]
 80374a4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80374a6:	683b      	ldr	r3, [r7, #0]
 80374a8:	681a      	ldr	r2, [r3, #0]
 80374aa:	687b      	ldr	r3, [r7, #4]
 80374ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80374b0:	2300      	movs	r3, #0
}
 80374b2:	4618      	mov	r0, r3
 80374b4:	370c      	adds	r7, #12
 80374b6:	46bd      	mov	sp, r7
 80374b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80374bc:	4770      	bx	lr

080374be <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80374be:	b580      	push	{r7, lr}
 80374c0:	b082      	sub	sp, #8
 80374c2:	af00      	add	r7, sp, #0
 80374c4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80374c6:	687b      	ldr	r3, [r7, #4]
 80374c8:	2203      	movs	r2, #3
 80374ca:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80374cc:	2002      	movs	r0, #2
 80374ce:	f7fb fc17 	bl	8032d00 <HAL_Delay>
  
  return HAL_OK;
 80374d2:	2300      	movs	r3, #0
}
 80374d4:	4618      	mov	r0, r3
 80374d6:	3708      	adds	r7, #8
 80374d8:	46bd      	mov	sp, r7
 80374da:	bd80      	pop	{r7, pc}

080374dc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80374dc:	b480      	push	{r7}
 80374de:	b083      	sub	sp, #12
 80374e0:	af00      	add	r7, sp, #0
 80374e2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80374e4:	687b      	ldr	r3, [r7, #4]
 80374e6:	681b      	ldr	r3, [r3, #0]
 80374e8:	f003 0303 	and.w	r3, r3, #3
}
 80374ec:	4618      	mov	r0, r3
 80374ee:	370c      	adds	r7, #12
 80374f0:	46bd      	mov	sp, r7
 80374f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80374f6:	4770      	bx	lr

080374f8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80374f8:	b480      	push	{r7}
 80374fa:	b085      	sub	sp, #20
 80374fc:	af00      	add	r7, sp, #0
 80374fe:	6078      	str	r0, [r7, #4]
 8037500:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8037502:	2300      	movs	r3, #0
 8037504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8037506:	683b      	ldr	r3, [r7, #0]
 8037508:	681a      	ldr	r2, [r3, #0]
 803750a:	687b      	ldr	r3, [r7, #4]
 803750c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 803750e:	683b      	ldr	r3, [r7, #0]
 8037510:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8037512:	683b      	ldr	r3, [r7, #0]
 8037514:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8037516:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8037518:	683b      	ldr	r3, [r7, #0]
 803751a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 803751c:	431a      	orrs	r2, r3
                       Command->CPSM);
 803751e:	683b      	ldr	r3, [r7, #0]
 8037520:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8037522:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8037524:	68fa      	ldr	r2, [r7, #12]
 8037526:	4313      	orrs	r3, r2
 8037528:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 803752a:	687b      	ldr	r3, [r7, #4]
 803752c:	68db      	ldr	r3, [r3, #12]
 803752e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8037532:	f023 030f 	bic.w	r3, r3, #15
 8037536:	68fa      	ldr	r2, [r7, #12]
 8037538:	431a      	orrs	r2, r3
 803753a:	687b      	ldr	r3, [r7, #4]
 803753c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 803753e:	2300      	movs	r3, #0
}
 8037540:	4618      	mov	r0, r3
 8037542:	3714      	adds	r7, #20
 8037544:	46bd      	mov	sp, r7
 8037546:	f85d 7b04 	ldr.w	r7, [sp], #4
 803754a:	4770      	bx	lr

0803754c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 803754c:	b480      	push	{r7}
 803754e:	b083      	sub	sp, #12
 8037550:	af00      	add	r7, sp, #0
 8037552:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8037554:	687b      	ldr	r3, [r7, #4]
 8037556:	691b      	ldr	r3, [r3, #16]
 8037558:	b2db      	uxtb	r3, r3
}
 803755a:	4618      	mov	r0, r3
 803755c:	370c      	adds	r7, #12
 803755e:	46bd      	mov	sp, r7
 8037560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037564:	4770      	bx	lr

08037566 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8037566:	b480      	push	{r7}
 8037568:	b085      	sub	sp, #20
 803756a:	af00      	add	r7, sp, #0
 803756c:	6078      	str	r0, [r7, #4]
 803756e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8037570:	687b      	ldr	r3, [r7, #4]
 8037572:	3314      	adds	r3, #20
 8037574:	461a      	mov	r2, r3
 8037576:	683b      	ldr	r3, [r7, #0]
 8037578:	4413      	add	r3, r2
 803757a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 803757c:	68fb      	ldr	r3, [r7, #12]
 803757e:	681b      	ldr	r3, [r3, #0]
}  
 8037580:	4618      	mov	r0, r3
 8037582:	3714      	adds	r7, #20
 8037584:	46bd      	mov	sp, r7
 8037586:	f85d 7b04 	ldr.w	r7, [sp], #4
 803758a:	4770      	bx	lr

0803758c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 803758c:	b480      	push	{r7}
 803758e:	b085      	sub	sp, #20
 8037590:	af00      	add	r7, sp, #0
 8037592:	6078      	str	r0, [r7, #4]
 8037594:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8037596:	2300      	movs	r3, #0
 8037598:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 803759a:	683b      	ldr	r3, [r7, #0]
 803759c:	681a      	ldr	r2, [r3, #0]
 803759e:	687b      	ldr	r3, [r7, #4]
 80375a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80375a2:	683b      	ldr	r3, [r7, #0]
 80375a4:	685a      	ldr	r2, [r3, #4]
 80375a6:	687b      	ldr	r3, [r7, #4]
 80375a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80375aa:	683b      	ldr	r3, [r7, #0]
 80375ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80375ae:	683b      	ldr	r3, [r7, #0]
 80375b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80375b2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80375b4:	683b      	ldr	r3, [r7, #0]
 80375b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80375b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80375ba:	683b      	ldr	r3, [r7, #0]
 80375bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80375be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80375c0:	68fa      	ldr	r2, [r7, #12]
 80375c2:	4313      	orrs	r3, r2
 80375c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80375c6:	687b      	ldr	r3, [r7, #4]
 80375c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80375ca:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80375ce:	68fb      	ldr	r3, [r7, #12]
 80375d0:	431a      	orrs	r2, r3
 80375d2:	687b      	ldr	r3, [r7, #4]
 80375d4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80375d6:	2300      	movs	r3, #0

}
 80375d8:	4618      	mov	r0, r3
 80375da:	3714      	adds	r7, #20
 80375dc:	46bd      	mov	sp, r7
 80375de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80375e2:	4770      	bx	lr

080375e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80375e4:	b580      	push	{r7, lr}
 80375e6:	b088      	sub	sp, #32
 80375e8:	af00      	add	r7, sp, #0
 80375ea:	6078      	str	r0, [r7, #4]
 80375ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80375ee:	683b      	ldr	r3, [r7, #0]
 80375f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80375f2:	2310      	movs	r3, #16
 80375f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80375f6:	2340      	movs	r3, #64	; 0x40
 80375f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80375fa:	2300      	movs	r3, #0
 80375fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80375fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8037602:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8037604:	f107 0308 	add.w	r3, r7, #8
 8037608:	4619      	mov	r1, r3
 803760a:	6878      	ldr	r0, [r7, #4]
 803760c:	f7ff ff74 	bl	80374f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8037610:	f241 3288 	movw	r2, #5000	; 0x1388
 8037614:	2110      	movs	r1, #16
 8037616:	6878      	ldr	r0, [r7, #4]
 8037618:	f000 fa02 	bl	8037a20 <SDMMC_GetCmdResp1>
 803761c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 803761e:	69fb      	ldr	r3, [r7, #28]
}
 8037620:	4618      	mov	r0, r3
 8037622:	3720      	adds	r7, #32
 8037624:	46bd      	mov	sp, r7
 8037626:	bd80      	pop	{r7, pc}

08037628 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8037628:	b580      	push	{r7, lr}
 803762a:	b088      	sub	sp, #32
 803762c:	af00      	add	r7, sp, #0
 803762e:	6078      	str	r0, [r7, #4]
 8037630:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8037632:	683b      	ldr	r3, [r7, #0]
 8037634:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8037636:	2311      	movs	r3, #17
 8037638:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 803763a:	2340      	movs	r3, #64	; 0x40
 803763c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 803763e:	2300      	movs	r3, #0
 8037640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8037642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8037646:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8037648:	f107 0308 	add.w	r3, r7, #8
 803764c:	4619      	mov	r1, r3
 803764e:	6878      	ldr	r0, [r7, #4]
 8037650:	f7ff ff52 	bl	80374f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8037654:	f241 3288 	movw	r2, #5000	; 0x1388
 8037658:	2111      	movs	r1, #17
 803765a:	6878      	ldr	r0, [r7, #4]
 803765c:	f000 f9e0 	bl	8037a20 <SDMMC_GetCmdResp1>
 8037660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8037662:	69fb      	ldr	r3, [r7, #28]
}
 8037664:	4618      	mov	r0, r3
 8037666:	3720      	adds	r7, #32
 8037668:	46bd      	mov	sp, r7
 803766a:	bd80      	pop	{r7, pc}

0803766c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 803766c:	b580      	push	{r7, lr}
 803766e:	b088      	sub	sp, #32
 8037670:	af00      	add	r7, sp, #0
 8037672:	6078      	str	r0, [r7, #4]
 8037674:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8037676:	683b      	ldr	r3, [r7, #0]
 8037678:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 803767a:	2312      	movs	r3, #18
 803767c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 803767e:	2340      	movs	r3, #64	; 0x40
 8037680:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8037682:	2300      	movs	r3, #0
 8037684:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8037686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803768a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 803768c:	f107 0308 	add.w	r3, r7, #8
 8037690:	4619      	mov	r1, r3
 8037692:	6878      	ldr	r0, [r7, #4]
 8037694:	f7ff ff30 	bl	80374f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8037698:	f241 3288 	movw	r2, #5000	; 0x1388
 803769c:	2112      	movs	r1, #18
 803769e:	6878      	ldr	r0, [r7, #4]
 80376a0:	f000 f9be 	bl	8037a20 <SDMMC_GetCmdResp1>
 80376a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80376a6:	69fb      	ldr	r3, [r7, #28]
}
 80376a8:	4618      	mov	r0, r3
 80376aa:	3720      	adds	r7, #32
 80376ac:	46bd      	mov	sp, r7
 80376ae:	bd80      	pop	{r7, pc}

080376b0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80376b0:	b580      	push	{r7, lr}
 80376b2:	b088      	sub	sp, #32
 80376b4:	af00      	add	r7, sp, #0
 80376b6:	6078      	str	r0, [r7, #4]
 80376b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80376ba:	683b      	ldr	r3, [r7, #0]
 80376bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80376be:	2318      	movs	r3, #24
 80376c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80376c2:	2340      	movs	r3, #64	; 0x40
 80376c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80376c6:	2300      	movs	r3, #0
 80376c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80376ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80376ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80376d0:	f107 0308 	add.w	r3, r7, #8
 80376d4:	4619      	mov	r1, r3
 80376d6:	6878      	ldr	r0, [r7, #4]
 80376d8:	f7ff ff0e 	bl	80374f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80376dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80376e0:	2118      	movs	r1, #24
 80376e2:	6878      	ldr	r0, [r7, #4]
 80376e4:	f000 f99c 	bl	8037a20 <SDMMC_GetCmdResp1>
 80376e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80376ea:	69fb      	ldr	r3, [r7, #28]
}
 80376ec:	4618      	mov	r0, r3
 80376ee:	3720      	adds	r7, #32
 80376f0:	46bd      	mov	sp, r7
 80376f2:	bd80      	pop	{r7, pc}

080376f4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80376f4:	b580      	push	{r7, lr}
 80376f6:	b088      	sub	sp, #32
 80376f8:	af00      	add	r7, sp, #0
 80376fa:	6078      	str	r0, [r7, #4]
 80376fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80376fe:	683b      	ldr	r3, [r7, #0]
 8037700:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8037702:	2319      	movs	r3, #25
 8037704:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8037706:	2340      	movs	r3, #64	; 0x40
 8037708:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 803770a:	2300      	movs	r3, #0
 803770c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 803770e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8037712:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8037714:	f107 0308 	add.w	r3, r7, #8
 8037718:	4619      	mov	r1, r3
 803771a:	6878      	ldr	r0, [r7, #4]
 803771c:	f7ff feec 	bl	80374f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8037720:	f241 3288 	movw	r2, #5000	; 0x1388
 8037724:	2119      	movs	r1, #25
 8037726:	6878      	ldr	r0, [r7, #4]
 8037728:	f000 f97a 	bl	8037a20 <SDMMC_GetCmdResp1>
 803772c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 803772e:	69fb      	ldr	r3, [r7, #28]
}
 8037730:	4618      	mov	r0, r3
 8037732:	3720      	adds	r7, #32
 8037734:	46bd      	mov	sp, r7
 8037736:	bd80      	pop	{r7, pc}

08037738 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8037738:	b580      	push	{r7, lr}
 803773a:	b088      	sub	sp, #32
 803773c:	af00      	add	r7, sp, #0
 803773e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8037740:	2300      	movs	r3, #0
 8037742:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8037744:	230c      	movs	r3, #12
 8037746:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8037748:	2340      	movs	r3, #64	; 0x40
 803774a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 803774c:	2300      	movs	r3, #0
 803774e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8037750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8037754:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8037756:	f107 0308 	add.w	r3, r7, #8
 803775a:	4619      	mov	r1, r3
 803775c:	6878      	ldr	r0, [r7, #4]
 803775e:	f7ff fecb 	bl	80374f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8037762:	4a05      	ldr	r2, [pc, #20]	; (8037778 <SDMMC_CmdStopTransfer+0x40>)
 8037764:	210c      	movs	r1, #12
 8037766:	6878      	ldr	r0, [r7, #4]
 8037768:	f000 f95a 	bl	8037a20 <SDMMC_GetCmdResp1>
 803776c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 803776e:	69fb      	ldr	r3, [r7, #28]
}
 8037770:	4618      	mov	r0, r3
 8037772:	3720      	adds	r7, #32
 8037774:	46bd      	mov	sp, r7
 8037776:	bd80      	pop	{r7, pc}
 8037778:	05f5e100 	.word	0x05f5e100

0803777c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 803777c:	b580      	push	{r7, lr}
 803777e:	b08a      	sub	sp, #40	; 0x28
 8037780:	af00      	add	r7, sp, #0
 8037782:	60f8      	str	r0, [r7, #12]
 8037784:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8037788:	683b      	ldr	r3, [r7, #0]
 803778a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 803778c:	2307      	movs	r3, #7
 803778e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8037790:	2340      	movs	r3, #64	; 0x40
 8037792:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8037794:	2300      	movs	r3, #0
 8037796:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8037798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803779c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 803779e:	f107 0310 	add.w	r3, r7, #16
 80377a2:	4619      	mov	r1, r3
 80377a4:	68f8      	ldr	r0, [r7, #12]
 80377a6:	f7ff fea7 	bl	80374f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80377aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80377ae:	2107      	movs	r1, #7
 80377b0:	68f8      	ldr	r0, [r7, #12]
 80377b2:	f000 f935 	bl	8037a20 <SDMMC_GetCmdResp1>
 80377b6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80377b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80377ba:	4618      	mov	r0, r3
 80377bc:	3728      	adds	r7, #40	; 0x28
 80377be:	46bd      	mov	sp, r7
 80377c0:	bd80      	pop	{r7, pc}

080377c2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80377c2:	b580      	push	{r7, lr}
 80377c4:	b088      	sub	sp, #32
 80377c6:	af00      	add	r7, sp, #0
 80377c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80377ca:	2300      	movs	r3, #0
 80377cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80377ce:	2300      	movs	r3, #0
 80377d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80377d2:	2300      	movs	r3, #0
 80377d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80377d6:	2300      	movs	r3, #0
 80377d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80377da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80377de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80377e0:	f107 0308 	add.w	r3, r7, #8
 80377e4:	4619      	mov	r1, r3
 80377e6:	6878      	ldr	r0, [r7, #4]
 80377e8:	f7ff fe86 	bl	80374f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80377ec:	6878      	ldr	r0, [r7, #4]
 80377ee:	f000 f8eb 	bl	80379c8 <SDMMC_GetCmdError>
 80377f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80377f4:	69fb      	ldr	r3, [r7, #28]
}
 80377f6:	4618      	mov	r0, r3
 80377f8:	3720      	adds	r7, #32
 80377fa:	46bd      	mov	sp, r7
 80377fc:	bd80      	pop	{r7, pc}

080377fe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80377fe:	b580      	push	{r7, lr}
 8037800:	b088      	sub	sp, #32
 8037802:	af00      	add	r7, sp, #0
 8037804:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8037806:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 803780a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 803780c:	2308      	movs	r3, #8
 803780e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8037810:	2340      	movs	r3, #64	; 0x40
 8037812:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8037814:	2300      	movs	r3, #0
 8037816:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8037818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803781c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 803781e:	f107 0308 	add.w	r3, r7, #8
 8037822:	4619      	mov	r1, r3
 8037824:	6878      	ldr	r0, [r7, #4]
 8037826:	f7ff fe67 	bl	80374f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 803782a:	6878      	ldr	r0, [r7, #4]
 803782c:	f000 fae2 	bl	8037df4 <SDMMC_GetCmdResp7>
 8037830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8037832:	69fb      	ldr	r3, [r7, #28]
}
 8037834:	4618      	mov	r0, r3
 8037836:	3720      	adds	r7, #32
 8037838:	46bd      	mov	sp, r7
 803783a:	bd80      	pop	{r7, pc}

0803783c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 803783c:	b580      	push	{r7, lr}
 803783e:	b088      	sub	sp, #32
 8037840:	af00      	add	r7, sp, #0
 8037842:	6078      	str	r0, [r7, #4]
 8037844:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8037846:	683b      	ldr	r3, [r7, #0]
 8037848:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 803784a:	2337      	movs	r3, #55	; 0x37
 803784c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 803784e:	2340      	movs	r3, #64	; 0x40
 8037850:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8037852:	2300      	movs	r3, #0
 8037854:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8037856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803785a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 803785c:	f107 0308 	add.w	r3, r7, #8
 8037860:	4619      	mov	r1, r3
 8037862:	6878      	ldr	r0, [r7, #4]
 8037864:	f7ff fe48 	bl	80374f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8037868:	f241 3288 	movw	r2, #5000	; 0x1388
 803786c:	2137      	movs	r1, #55	; 0x37
 803786e:	6878      	ldr	r0, [r7, #4]
 8037870:	f000 f8d6 	bl	8037a20 <SDMMC_GetCmdResp1>
 8037874:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8037876:	69fb      	ldr	r3, [r7, #28]
}
 8037878:	4618      	mov	r0, r3
 803787a:	3720      	adds	r7, #32
 803787c:	46bd      	mov	sp, r7
 803787e:	bd80      	pop	{r7, pc}

08037880 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8037880:	b580      	push	{r7, lr}
 8037882:	b088      	sub	sp, #32
 8037884:	af00      	add	r7, sp, #0
 8037886:	6078      	str	r0, [r7, #4]
 8037888:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 803788a:	683b      	ldr	r3, [r7, #0]
 803788c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8037890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8037894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8037896:	2329      	movs	r3, #41	; 0x29
 8037898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 803789a:	2340      	movs	r3, #64	; 0x40
 803789c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 803789e:	2300      	movs	r3, #0
 80378a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80378a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80378a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80378a8:	f107 0308 	add.w	r3, r7, #8
 80378ac:	4619      	mov	r1, r3
 80378ae:	6878      	ldr	r0, [r7, #4]
 80378b0:	f7ff fe22 	bl	80374f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80378b4:	6878      	ldr	r0, [r7, #4]
 80378b6:	f000 f9e9 	bl	8037c8c <SDMMC_GetCmdResp3>
 80378ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80378bc:	69fb      	ldr	r3, [r7, #28]
}
 80378be:	4618      	mov	r0, r3
 80378c0:	3720      	adds	r7, #32
 80378c2:	46bd      	mov	sp, r7
 80378c4:	bd80      	pop	{r7, pc}

080378c6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80378c6:	b580      	push	{r7, lr}
 80378c8:	b088      	sub	sp, #32
 80378ca:	af00      	add	r7, sp, #0
 80378cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80378ce:	2300      	movs	r3, #0
 80378d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80378d2:	2302      	movs	r3, #2
 80378d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80378d6:	23c0      	movs	r3, #192	; 0xc0
 80378d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80378da:	2300      	movs	r3, #0
 80378dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80378de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80378e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80378e4:	f107 0308 	add.w	r3, r7, #8
 80378e8:	4619      	mov	r1, r3
 80378ea:	6878      	ldr	r0, [r7, #4]
 80378ec:	f7ff fe04 	bl	80374f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80378f0:	6878      	ldr	r0, [r7, #4]
 80378f2:	f000 f983 	bl	8037bfc <SDMMC_GetCmdResp2>
 80378f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80378f8:	69fb      	ldr	r3, [r7, #28]
}
 80378fa:	4618      	mov	r0, r3
 80378fc:	3720      	adds	r7, #32
 80378fe:	46bd      	mov	sp, r7
 8037900:	bd80      	pop	{r7, pc}

08037902 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8037902:	b580      	push	{r7, lr}
 8037904:	b088      	sub	sp, #32
 8037906:	af00      	add	r7, sp, #0
 8037908:	6078      	str	r0, [r7, #4]
 803790a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 803790c:	683b      	ldr	r3, [r7, #0]
 803790e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8037910:	2309      	movs	r3, #9
 8037912:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8037914:	23c0      	movs	r3, #192	; 0xc0
 8037916:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8037918:	2300      	movs	r3, #0
 803791a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 803791c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8037920:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8037922:	f107 0308 	add.w	r3, r7, #8
 8037926:	4619      	mov	r1, r3
 8037928:	6878      	ldr	r0, [r7, #4]
 803792a:	f7ff fde5 	bl	80374f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 803792e:	6878      	ldr	r0, [r7, #4]
 8037930:	f000 f964 	bl	8037bfc <SDMMC_GetCmdResp2>
 8037934:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8037936:	69fb      	ldr	r3, [r7, #28]
}
 8037938:	4618      	mov	r0, r3
 803793a:	3720      	adds	r7, #32
 803793c:	46bd      	mov	sp, r7
 803793e:	bd80      	pop	{r7, pc}

08037940 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8037940:	b580      	push	{r7, lr}
 8037942:	b088      	sub	sp, #32
 8037944:	af00      	add	r7, sp, #0
 8037946:	6078      	str	r0, [r7, #4]
 8037948:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 803794a:	2300      	movs	r3, #0
 803794c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 803794e:	2303      	movs	r3, #3
 8037950:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8037952:	2340      	movs	r3, #64	; 0x40
 8037954:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8037956:	2300      	movs	r3, #0
 8037958:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 803795a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803795e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8037960:	f107 0308 	add.w	r3, r7, #8
 8037964:	4619      	mov	r1, r3
 8037966:	6878      	ldr	r0, [r7, #4]
 8037968:	f7ff fdc6 	bl	80374f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 803796c:	683a      	ldr	r2, [r7, #0]
 803796e:	2103      	movs	r1, #3
 8037970:	6878      	ldr	r0, [r7, #4]
 8037972:	f000 f9c9 	bl	8037d08 <SDMMC_GetCmdResp6>
 8037976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8037978:	69fb      	ldr	r3, [r7, #28]
}
 803797a:	4618      	mov	r0, r3
 803797c:	3720      	adds	r7, #32
 803797e:	46bd      	mov	sp, r7
 8037980:	bd80      	pop	{r7, pc}

08037982 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8037982:	b580      	push	{r7, lr}
 8037984:	b088      	sub	sp, #32
 8037986:	af00      	add	r7, sp, #0
 8037988:	6078      	str	r0, [r7, #4]
 803798a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 803798c:	683b      	ldr	r3, [r7, #0]
 803798e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8037990:	230d      	movs	r3, #13
 8037992:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8037994:	2340      	movs	r3, #64	; 0x40
 8037996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8037998:	2300      	movs	r3, #0
 803799a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 803799c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80379a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80379a2:	f107 0308 	add.w	r3, r7, #8
 80379a6:	4619      	mov	r1, r3
 80379a8:	6878      	ldr	r0, [r7, #4]
 80379aa:	f7ff fda5 	bl	80374f8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80379ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80379b2:	210d      	movs	r1, #13
 80379b4:	6878      	ldr	r0, [r7, #4]
 80379b6:	f000 f833 	bl	8037a20 <SDMMC_GetCmdResp1>
 80379ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80379bc:	69fb      	ldr	r3, [r7, #28]
}
 80379be:	4618      	mov	r0, r3
 80379c0:	3720      	adds	r7, #32
 80379c2:	46bd      	mov	sp, r7
 80379c4:	bd80      	pop	{r7, pc}
	...

080379c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80379c8:	b480      	push	{r7}
 80379ca:	b085      	sub	sp, #20
 80379cc:	af00      	add	r7, sp, #0
 80379ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80379d0:	4b11      	ldr	r3, [pc, #68]	; (8037a18 <SDMMC_GetCmdError+0x50>)
 80379d2:	681b      	ldr	r3, [r3, #0]
 80379d4:	4a11      	ldr	r2, [pc, #68]	; (8037a1c <SDMMC_GetCmdError+0x54>)
 80379d6:	fba2 2303 	umull	r2, r3, r2, r3
 80379da:	0a5b      	lsrs	r3, r3, #9
 80379dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80379e0:	fb02 f303 	mul.w	r3, r2, r3
 80379e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80379e6:	68fb      	ldr	r3, [r7, #12]
 80379e8:	1e5a      	subs	r2, r3, #1
 80379ea:	60fa      	str	r2, [r7, #12]
 80379ec:	2b00      	cmp	r3, #0
 80379ee:	d102      	bne.n	80379f6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80379f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80379f4:	e009      	b.n	8037a0a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80379f6:	687b      	ldr	r3, [r7, #4]
 80379f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80379fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80379fe:	2b00      	cmp	r3, #0
 8037a00:	d0f1      	beq.n	80379e6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8037a02:	687b      	ldr	r3, [r7, #4]
 8037a04:	22c5      	movs	r2, #197	; 0xc5
 8037a06:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8037a08:	2300      	movs	r3, #0
}
 8037a0a:	4618      	mov	r0, r3
 8037a0c:	3714      	adds	r7, #20
 8037a0e:	46bd      	mov	sp, r7
 8037a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037a14:	4770      	bx	lr
 8037a16:	bf00      	nop
 8037a18:	20000020 	.word	0x20000020
 8037a1c:	10624dd3 	.word	0x10624dd3

08037a20 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8037a20:	b580      	push	{r7, lr}
 8037a22:	b088      	sub	sp, #32
 8037a24:	af00      	add	r7, sp, #0
 8037a26:	60f8      	str	r0, [r7, #12]
 8037a28:	460b      	mov	r3, r1
 8037a2a:	607a      	str	r2, [r7, #4]
 8037a2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8037a2e:	4b70      	ldr	r3, [pc, #448]	; (8037bf0 <SDMMC_GetCmdResp1+0x1d0>)
 8037a30:	681b      	ldr	r3, [r3, #0]
 8037a32:	4a70      	ldr	r2, [pc, #448]	; (8037bf4 <SDMMC_GetCmdResp1+0x1d4>)
 8037a34:	fba2 2303 	umull	r2, r3, r2, r3
 8037a38:	0a5a      	lsrs	r2, r3, #9
 8037a3a:	687b      	ldr	r3, [r7, #4]
 8037a3c:	fb02 f303 	mul.w	r3, r2, r3
 8037a40:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8037a42:	69fb      	ldr	r3, [r7, #28]
 8037a44:	1e5a      	subs	r2, r3, #1
 8037a46:	61fa      	str	r2, [r7, #28]
 8037a48:	2b00      	cmp	r3, #0
 8037a4a:	d102      	bne.n	8037a52 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8037a4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8037a50:	e0c9      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8037a52:	68fb      	ldr	r3, [r7, #12]
 8037a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8037a56:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8037a58:	69bb      	ldr	r3, [r7, #24]
 8037a5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8037a5e:	2b00      	cmp	r3, #0
 8037a60:	d0ef      	beq.n	8037a42 <SDMMC_GetCmdResp1+0x22>
 8037a62:	69bb      	ldr	r3, [r7, #24]
 8037a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8037a68:	2b00      	cmp	r3, #0
 8037a6a:	d1ea      	bne.n	8037a42 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8037a6c:	68fb      	ldr	r3, [r7, #12]
 8037a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8037a70:	f003 0304 	and.w	r3, r3, #4
 8037a74:	2b00      	cmp	r3, #0
 8037a76:	d004      	beq.n	8037a82 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8037a78:	68fb      	ldr	r3, [r7, #12]
 8037a7a:	2204      	movs	r2, #4
 8037a7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8037a7e:	2304      	movs	r3, #4
 8037a80:	e0b1      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8037a82:	68fb      	ldr	r3, [r7, #12]
 8037a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8037a86:	f003 0301 	and.w	r3, r3, #1
 8037a8a:	2b00      	cmp	r3, #0
 8037a8c:	d004      	beq.n	8037a98 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8037a8e:	68fb      	ldr	r3, [r7, #12]
 8037a90:	2201      	movs	r2, #1
 8037a92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8037a94:	2301      	movs	r3, #1
 8037a96:	e0a6      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8037a98:	68fb      	ldr	r3, [r7, #12]
 8037a9a:	22c5      	movs	r2, #197	; 0xc5
 8037a9c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8037a9e:	68f8      	ldr	r0, [r7, #12]
 8037aa0:	f7ff fd54 	bl	803754c <SDIO_GetCommandResponse>
 8037aa4:	4603      	mov	r3, r0
 8037aa6:	461a      	mov	r2, r3
 8037aa8:	7afb      	ldrb	r3, [r7, #11]
 8037aaa:	4293      	cmp	r3, r2
 8037aac:	d001      	beq.n	8037ab2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8037aae:	2301      	movs	r3, #1
 8037ab0:	e099      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8037ab2:	2100      	movs	r1, #0
 8037ab4:	68f8      	ldr	r0, [r7, #12]
 8037ab6:	f7ff fd56 	bl	8037566 <SDIO_GetResponse>
 8037aba:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8037abc:	697a      	ldr	r2, [r7, #20]
 8037abe:	4b4e      	ldr	r3, [pc, #312]	; (8037bf8 <SDMMC_GetCmdResp1+0x1d8>)
 8037ac0:	4013      	ands	r3, r2
 8037ac2:	2b00      	cmp	r3, #0
 8037ac4:	d101      	bne.n	8037aca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8037ac6:	2300      	movs	r3, #0
 8037ac8:	e08d      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8037aca:	697b      	ldr	r3, [r7, #20]
 8037acc:	2b00      	cmp	r3, #0
 8037ace:	da02      	bge.n	8037ad6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8037ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8037ad4:	e087      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8037ad6:	697b      	ldr	r3, [r7, #20]
 8037ad8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8037adc:	2b00      	cmp	r3, #0
 8037ade:	d001      	beq.n	8037ae4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8037ae0:	2340      	movs	r3, #64	; 0x40
 8037ae2:	e080      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8037ae4:	697b      	ldr	r3, [r7, #20]
 8037ae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8037aea:	2b00      	cmp	r3, #0
 8037aec:	d001      	beq.n	8037af2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8037aee:	2380      	movs	r3, #128	; 0x80
 8037af0:	e079      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8037af2:	697b      	ldr	r3, [r7, #20]
 8037af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8037af8:	2b00      	cmp	r3, #0
 8037afa:	d002      	beq.n	8037b02 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8037afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8037b00:	e071      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8037b02:	697b      	ldr	r3, [r7, #20]
 8037b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8037b08:	2b00      	cmp	r3, #0
 8037b0a:	d002      	beq.n	8037b12 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8037b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8037b10:	e069      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8037b12:	697b      	ldr	r3, [r7, #20]
 8037b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8037b18:	2b00      	cmp	r3, #0
 8037b1a:	d002      	beq.n	8037b22 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8037b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8037b20:	e061      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8037b22:	697b      	ldr	r3, [r7, #20]
 8037b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8037b28:	2b00      	cmp	r3, #0
 8037b2a:	d002      	beq.n	8037b32 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8037b2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8037b30:	e059      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8037b32:	697b      	ldr	r3, [r7, #20]
 8037b34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8037b38:	2b00      	cmp	r3, #0
 8037b3a:	d002      	beq.n	8037b42 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8037b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8037b40:	e051      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8037b42:	697b      	ldr	r3, [r7, #20]
 8037b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8037b48:	2b00      	cmp	r3, #0
 8037b4a:	d002      	beq.n	8037b52 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8037b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8037b50:	e049      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8037b52:	697b      	ldr	r3, [r7, #20]
 8037b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8037b58:	2b00      	cmp	r3, #0
 8037b5a:	d002      	beq.n	8037b62 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8037b5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8037b60:	e041      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8037b62:	697b      	ldr	r3, [r7, #20]
 8037b64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8037b68:	2b00      	cmp	r3, #0
 8037b6a:	d002      	beq.n	8037b72 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8037b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8037b70:	e039      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8037b72:	697b      	ldr	r3, [r7, #20]
 8037b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8037b78:	2b00      	cmp	r3, #0
 8037b7a:	d002      	beq.n	8037b82 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8037b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8037b80:	e031      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8037b82:	697b      	ldr	r3, [r7, #20]
 8037b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8037b88:	2b00      	cmp	r3, #0
 8037b8a:	d002      	beq.n	8037b92 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8037b8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8037b90:	e029      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8037b92:	697b      	ldr	r3, [r7, #20]
 8037b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8037b98:	2b00      	cmp	r3, #0
 8037b9a:	d002      	beq.n	8037ba2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8037b9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8037ba0:	e021      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8037ba2:	697b      	ldr	r3, [r7, #20]
 8037ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8037ba8:	2b00      	cmp	r3, #0
 8037baa:	d002      	beq.n	8037bb2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8037bac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8037bb0:	e019      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8037bb2:	697b      	ldr	r3, [r7, #20]
 8037bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8037bb8:	2b00      	cmp	r3, #0
 8037bba:	d002      	beq.n	8037bc2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8037bbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8037bc0:	e011      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8037bc2:	697b      	ldr	r3, [r7, #20]
 8037bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8037bc8:	2b00      	cmp	r3, #0
 8037bca:	d002      	beq.n	8037bd2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8037bcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8037bd0:	e009      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8037bd2:	697b      	ldr	r3, [r7, #20]
 8037bd4:	f003 0308 	and.w	r3, r3, #8
 8037bd8:	2b00      	cmp	r3, #0
 8037bda:	d002      	beq.n	8037be2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8037bdc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8037be0:	e001      	b.n	8037be6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8037be2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8037be6:	4618      	mov	r0, r3
 8037be8:	3720      	adds	r7, #32
 8037bea:	46bd      	mov	sp, r7
 8037bec:	bd80      	pop	{r7, pc}
 8037bee:	bf00      	nop
 8037bf0:	20000020 	.word	0x20000020
 8037bf4:	10624dd3 	.word	0x10624dd3
 8037bf8:	fdffe008 	.word	0xfdffe008

08037bfc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8037bfc:	b480      	push	{r7}
 8037bfe:	b085      	sub	sp, #20
 8037c00:	af00      	add	r7, sp, #0
 8037c02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8037c04:	4b1f      	ldr	r3, [pc, #124]	; (8037c84 <SDMMC_GetCmdResp2+0x88>)
 8037c06:	681b      	ldr	r3, [r3, #0]
 8037c08:	4a1f      	ldr	r2, [pc, #124]	; (8037c88 <SDMMC_GetCmdResp2+0x8c>)
 8037c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8037c0e:	0a5b      	lsrs	r3, r3, #9
 8037c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8037c14:	fb02 f303 	mul.w	r3, r2, r3
 8037c18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8037c1a:	68fb      	ldr	r3, [r7, #12]
 8037c1c:	1e5a      	subs	r2, r3, #1
 8037c1e:	60fa      	str	r2, [r7, #12]
 8037c20:	2b00      	cmp	r3, #0
 8037c22:	d102      	bne.n	8037c2a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8037c24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8037c28:	e026      	b.n	8037c78 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8037c2a:	687b      	ldr	r3, [r7, #4]
 8037c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8037c2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8037c30:	68bb      	ldr	r3, [r7, #8]
 8037c32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8037c36:	2b00      	cmp	r3, #0
 8037c38:	d0ef      	beq.n	8037c1a <SDMMC_GetCmdResp2+0x1e>
 8037c3a:	68bb      	ldr	r3, [r7, #8]
 8037c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8037c40:	2b00      	cmp	r3, #0
 8037c42:	d1ea      	bne.n	8037c1a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8037c44:	687b      	ldr	r3, [r7, #4]
 8037c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8037c48:	f003 0304 	and.w	r3, r3, #4
 8037c4c:	2b00      	cmp	r3, #0
 8037c4e:	d004      	beq.n	8037c5a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8037c50:	687b      	ldr	r3, [r7, #4]
 8037c52:	2204      	movs	r2, #4
 8037c54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8037c56:	2304      	movs	r3, #4
 8037c58:	e00e      	b.n	8037c78 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8037c5a:	687b      	ldr	r3, [r7, #4]
 8037c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8037c5e:	f003 0301 	and.w	r3, r3, #1
 8037c62:	2b00      	cmp	r3, #0
 8037c64:	d004      	beq.n	8037c70 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8037c66:	687b      	ldr	r3, [r7, #4]
 8037c68:	2201      	movs	r2, #1
 8037c6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8037c6c:	2301      	movs	r3, #1
 8037c6e:	e003      	b.n	8037c78 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8037c70:	687b      	ldr	r3, [r7, #4]
 8037c72:	22c5      	movs	r2, #197	; 0xc5
 8037c74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8037c76:	2300      	movs	r3, #0
}
 8037c78:	4618      	mov	r0, r3
 8037c7a:	3714      	adds	r7, #20
 8037c7c:	46bd      	mov	sp, r7
 8037c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037c82:	4770      	bx	lr
 8037c84:	20000020 	.word	0x20000020
 8037c88:	10624dd3 	.word	0x10624dd3

08037c8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8037c8c:	b480      	push	{r7}
 8037c8e:	b085      	sub	sp, #20
 8037c90:	af00      	add	r7, sp, #0
 8037c92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8037c94:	4b1a      	ldr	r3, [pc, #104]	; (8037d00 <SDMMC_GetCmdResp3+0x74>)
 8037c96:	681b      	ldr	r3, [r3, #0]
 8037c98:	4a1a      	ldr	r2, [pc, #104]	; (8037d04 <SDMMC_GetCmdResp3+0x78>)
 8037c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8037c9e:	0a5b      	lsrs	r3, r3, #9
 8037ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8037ca4:	fb02 f303 	mul.w	r3, r2, r3
 8037ca8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8037caa:	68fb      	ldr	r3, [r7, #12]
 8037cac:	1e5a      	subs	r2, r3, #1
 8037cae:	60fa      	str	r2, [r7, #12]
 8037cb0:	2b00      	cmp	r3, #0
 8037cb2:	d102      	bne.n	8037cba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8037cb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8037cb8:	e01b      	b.n	8037cf2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8037cba:	687b      	ldr	r3, [r7, #4]
 8037cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8037cbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8037cc0:	68bb      	ldr	r3, [r7, #8]
 8037cc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8037cc6:	2b00      	cmp	r3, #0
 8037cc8:	d0ef      	beq.n	8037caa <SDMMC_GetCmdResp3+0x1e>
 8037cca:	68bb      	ldr	r3, [r7, #8]
 8037ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8037cd0:	2b00      	cmp	r3, #0
 8037cd2:	d1ea      	bne.n	8037caa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8037cd4:	687b      	ldr	r3, [r7, #4]
 8037cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8037cd8:	f003 0304 	and.w	r3, r3, #4
 8037cdc:	2b00      	cmp	r3, #0
 8037cde:	d004      	beq.n	8037cea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8037ce0:	687b      	ldr	r3, [r7, #4]
 8037ce2:	2204      	movs	r2, #4
 8037ce4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8037ce6:	2304      	movs	r3, #4
 8037ce8:	e003      	b.n	8037cf2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8037cea:	687b      	ldr	r3, [r7, #4]
 8037cec:	22c5      	movs	r2, #197	; 0xc5
 8037cee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8037cf0:	2300      	movs	r3, #0
}
 8037cf2:	4618      	mov	r0, r3
 8037cf4:	3714      	adds	r7, #20
 8037cf6:	46bd      	mov	sp, r7
 8037cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037cfc:	4770      	bx	lr
 8037cfe:	bf00      	nop
 8037d00:	20000020 	.word	0x20000020
 8037d04:	10624dd3 	.word	0x10624dd3

08037d08 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8037d08:	b580      	push	{r7, lr}
 8037d0a:	b088      	sub	sp, #32
 8037d0c:	af00      	add	r7, sp, #0
 8037d0e:	60f8      	str	r0, [r7, #12]
 8037d10:	460b      	mov	r3, r1
 8037d12:	607a      	str	r2, [r7, #4]
 8037d14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8037d16:	4b35      	ldr	r3, [pc, #212]	; (8037dec <SDMMC_GetCmdResp6+0xe4>)
 8037d18:	681b      	ldr	r3, [r3, #0]
 8037d1a:	4a35      	ldr	r2, [pc, #212]	; (8037df0 <SDMMC_GetCmdResp6+0xe8>)
 8037d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8037d20:	0a5b      	lsrs	r3, r3, #9
 8037d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8037d26:	fb02 f303 	mul.w	r3, r2, r3
 8037d2a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8037d2c:	69fb      	ldr	r3, [r7, #28]
 8037d2e:	1e5a      	subs	r2, r3, #1
 8037d30:	61fa      	str	r2, [r7, #28]
 8037d32:	2b00      	cmp	r3, #0
 8037d34:	d102      	bne.n	8037d3c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8037d36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8037d3a:	e052      	b.n	8037de2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8037d3c:	68fb      	ldr	r3, [r7, #12]
 8037d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8037d40:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8037d42:	69bb      	ldr	r3, [r7, #24]
 8037d44:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8037d48:	2b00      	cmp	r3, #0
 8037d4a:	d0ef      	beq.n	8037d2c <SDMMC_GetCmdResp6+0x24>
 8037d4c:	69bb      	ldr	r3, [r7, #24]
 8037d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8037d52:	2b00      	cmp	r3, #0
 8037d54:	d1ea      	bne.n	8037d2c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8037d56:	68fb      	ldr	r3, [r7, #12]
 8037d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8037d5a:	f003 0304 	and.w	r3, r3, #4
 8037d5e:	2b00      	cmp	r3, #0
 8037d60:	d004      	beq.n	8037d6c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8037d62:	68fb      	ldr	r3, [r7, #12]
 8037d64:	2204      	movs	r2, #4
 8037d66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8037d68:	2304      	movs	r3, #4
 8037d6a:	e03a      	b.n	8037de2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8037d6c:	68fb      	ldr	r3, [r7, #12]
 8037d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8037d70:	f003 0301 	and.w	r3, r3, #1
 8037d74:	2b00      	cmp	r3, #0
 8037d76:	d004      	beq.n	8037d82 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8037d78:	68fb      	ldr	r3, [r7, #12]
 8037d7a:	2201      	movs	r2, #1
 8037d7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8037d7e:	2301      	movs	r3, #1
 8037d80:	e02f      	b.n	8037de2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8037d82:	68f8      	ldr	r0, [r7, #12]
 8037d84:	f7ff fbe2 	bl	803754c <SDIO_GetCommandResponse>
 8037d88:	4603      	mov	r3, r0
 8037d8a:	461a      	mov	r2, r3
 8037d8c:	7afb      	ldrb	r3, [r7, #11]
 8037d8e:	4293      	cmp	r3, r2
 8037d90:	d001      	beq.n	8037d96 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8037d92:	2301      	movs	r3, #1
 8037d94:	e025      	b.n	8037de2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8037d96:	68fb      	ldr	r3, [r7, #12]
 8037d98:	22c5      	movs	r2, #197	; 0xc5
 8037d9a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8037d9c:	2100      	movs	r1, #0
 8037d9e:	68f8      	ldr	r0, [r7, #12]
 8037da0:	f7ff fbe1 	bl	8037566 <SDIO_GetResponse>
 8037da4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8037da6:	697b      	ldr	r3, [r7, #20]
 8037da8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8037dac:	2b00      	cmp	r3, #0
 8037dae:	d106      	bne.n	8037dbe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8037db0:	697b      	ldr	r3, [r7, #20]
 8037db2:	0c1b      	lsrs	r3, r3, #16
 8037db4:	b29a      	uxth	r2, r3
 8037db6:	687b      	ldr	r3, [r7, #4]
 8037db8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8037dba:	2300      	movs	r3, #0
 8037dbc:	e011      	b.n	8037de2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8037dbe:	697b      	ldr	r3, [r7, #20]
 8037dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8037dc4:	2b00      	cmp	r3, #0
 8037dc6:	d002      	beq.n	8037dce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8037dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8037dcc:	e009      	b.n	8037de2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8037dce:	697b      	ldr	r3, [r7, #20]
 8037dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8037dd4:	2b00      	cmp	r3, #0
 8037dd6:	d002      	beq.n	8037dde <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8037dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8037ddc:	e001      	b.n	8037de2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8037dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8037de2:	4618      	mov	r0, r3
 8037de4:	3720      	adds	r7, #32
 8037de6:	46bd      	mov	sp, r7
 8037de8:	bd80      	pop	{r7, pc}
 8037dea:	bf00      	nop
 8037dec:	20000020 	.word	0x20000020
 8037df0:	10624dd3 	.word	0x10624dd3

08037df4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8037df4:	b480      	push	{r7}
 8037df6:	b085      	sub	sp, #20
 8037df8:	af00      	add	r7, sp, #0
 8037dfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8037dfc:	4b22      	ldr	r3, [pc, #136]	; (8037e88 <SDMMC_GetCmdResp7+0x94>)
 8037dfe:	681b      	ldr	r3, [r3, #0]
 8037e00:	4a22      	ldr	r2, [pc, #136]	; (8037e8c <SDMMC_GetCmdResp7+0x98>)
 8037e02:	fba2 2303 	umull	r2, r3, r2, r3
 8037e06:	0a5b      	lsrs	r3, r3, #9
 8037e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8037e0c:	fb02 f303 	mul.w	r3, r2, r3
 8037e10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8037e12:	68fb      	ldr	r3, [r7, #12]
 8037e14:	1e5a      	subs	r2, r3, #1
 8037e16:	60fa      	str	r2, [r7, #12]
 8037e18:	2b00      	cmp	r3, #0
 8037e1a:	d102      	bne.n	8037e22 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8037e1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8037e20:	e02c      	b.n	8037e7c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8037e22:	687b      	ldr	r3, [r7, #4]
 8037e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8037e26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8037e28:	68bb      	ldr	r3, [r7, #8]
 8037e2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8037e2e:	2b00      	cmp	r3, #0
 8037e30:	d0ef      	beq.n	8037e12 <SDMMC_GetCmdResp7+0x1e>
 8037e32:	68bb      	ldr	r3, [r7, #8]
 8037e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8037e38:	2b00      	cmp	r3, #0
 8037e3a:	d1ea      	bne.n	8037e12 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8037e3c:	687b      	ldr	r3, [r7, #4]
 8037e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8037e40:	f003 0304 	and.w	r3, r3, #4
 8037e44:	2b00      	cmp	r3, #0
 8037e46:	d004      	beq.n	8037e52 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8037e48:	687b      	ldr	r3, [r7, #4]
 8037e4a:	2204      	movs	r2, #4
 8037e4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8037e4e:	2304      	movs	r3, #4
 8037e50:	e014      	b.n	8037e7c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8037e52:	687b      	ldr	r3, [r7, #4]
 8037e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8037e56:	f003 0301 	and.w	r3, r3, #1
 8037e5a:	2b00      	cmp	r3, #0
 8037e5c:	d004      	beq.n	8037e68 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8037e5e:	687b      	ldr	r3, [r7, #4]
 8037e60:	2201      	movs	r2, #1
 8037e62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8037e64:	2301      	movs	r3, #1
 8037e66:	e009      	b.n	8037e7c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8037e68:	687b      	ldr	r3, [r7, #4]
 8037e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8037e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8037e70:	2b00      	cmp	r3, #0
 8037e72:	d002      	beq.n	8037e7a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8037e74:	687b      	ldr	r3, [r7, #4]
 8037e76:	2240      	movs	r2, #64	; 0x40
 8037e78:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8037e7a:	2300      	movs	r3, #0
  
}
 8037e7c:	4618      	mov	r0, r3
 8037e7e:	3714      	adds	r7, #20
 8037e80:	46bd      	mov	sp, r7
 8037e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037e86:	4770      	bx	lr
 8037e88:	20000020 	.word	0x20000020
 8037e8c:	10624dd3 	.word	0x10624dd3

08037e90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8037e90:	b580      	push	{r7, lr}
 8037e92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8037e94:	4904      	ldr	r1, [pc, #16]	; (8037ea8 <MX_FATFS_Init+0x18>)
 8037e96:	4805      	ldr	r0, [pc, #20]	; (8037eac <MX_FATFS_Init+0x1c>)
 8037e98:	f002 fc62 	bl	803a760 <FATFS_LinkDriver>
 8037e9c:	4603      	mov	r3, r0
 8037e9e:	461a      	mov	r2, r3
 8037ea0:	4b03      	ldr	r3, [pc, #12]	; (8037eb0 <MX_FATFS_Init+0x20>)
 8037ea2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8037ea4:	bf00      	nop
 8037ea6:	bd80      	pop	{r7, pc}
 8037ea8:	20000710 	.word	0x20000710
 8037eac:	0803ff30 	.word	0x0803ff30
 8037eb0:	2000070c 	.word	0x2000070c

08037eb4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8037eb4:	b480      	push	{r7}
 8037eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8037eb8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8037eba:	4618      	mov	r0, r3
 8037ebc:	46bd      	mov	sp, r7
 8037ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037ec2:	4770      	bx	lr

08037ec4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8037ec4:	b580      	push	{r7, lr}
 8037ec6:	b082      	sub	sp, #8
 8037ec8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8037eca:	2300      	movs	r3, #0
 8037ecc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8037ece:	f000 f86b 	bl	8037fa8 <BSP_SD_IsDetected>
 8037ed2:	4603      	mov	r3, r0
 8037ed4:	2b01      	cmp	r3, #1
 8037ed6:	d001      	beq.n	8037edc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8037ed8:	2301      	movs	r3, #1
 8037eda:	e005      	b.n	8037ee8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8037edc:	4804      	ldr	r0, [pc, #16]	; (8037ef0 <BSP_SD_Init+0x2c>)
 8037ede:	f7fc f9d9 	bl	8034294 <HAL_SD_Init>
 8037ee2:	4603      	mov	r3, r0
 8037ee4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8037ee6:	79fb      	ldrb	r3, [r7, #7]
}
 8037ee8:	4618      	mov	r0, r3
 8037eea:	3708      	adds	r7, #8
 8037eec:	46bd      	mov	sp, r7
 8037eee:	bd80      	pop	{r7, pc}
 8037ef0:	2000059c 	.word	0x2000059c

08037ef4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8037ef4:	b580      	push	{r7, lr}
 8037ef6:	b088      	sub	sp, #32
 8037ef8:	af02      	add	r7, sp, #8
 8037efa:	60f8      	str	r0, [r7, #12]
 8037efc:	60b9      	str	r1, [r7, #8]
 8037efe:	607a      	str	r2, [r7, #4]
 8037f00:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8037f02:	2300      	movs	r3, #0
 8037f04:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8037f06:	683b      	ldr	r3, [r7, #0]
 8037f08:	9300      	str	r3, [sp, #0]
 8037f0a:	687b      	ldr	r3, [r7, #4]
 8037f0c:	68ba      	ldr	r2, [r7, #8]
 8037f0e:	68f9      	ldr	r1, [r7, #12]
 8037f10:	4806      	ldr	r0, [pc, #24]	; (8037f2c <BSP_SD_ReadBlocks+0x38>)
 8037f12:	f7fc fa6d 	bl	80343f0 <HAL_SD_ReadBlocks>
 8037f16:	4603      	mov	r3, r0
 8037f18:	2b00      	cmp	r3, #0
 8037f1a:	d001      	beq.n	8037f20 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8037f1c:	2301      	movs	r3, #1
 8037f1e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8037f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8037f22:	4618      	mov	r0, r3
 8037f24:	3718      	adds	r7, #24
 8037f26:	46bd      	mov	sp, r7
 8037f28:	bd80      	pop	{r7, pc}
 8037f2a:	bf00      	nop
 8037f2c:	2000059c 	.word	0x2000059c

08037f30 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8037f30:	b580      	push	{r7, lr}
 8037f32:	b088      	sub	sp, #32
 8037f34:	af02      	add	r7, sp, #8
 8037f36:	60f8      	str	r0, [r7, #12]
 8037f38:	60b9      	str	r1, [r7, #8]
 8037f3a:	607a      	str	r2, [r7, #4]
 8037f3c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8037f3e:	2300      	movs	r3, #0
 8037f40:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8037f42:	683b      	ldr	r3, [r7, #0]
 8037f44:	9300      	str	r3, [sp, #0]
 8037f46:	687b      	ldr	r3, [r7, #4]
 8037f48:	68ba      	ldr	r2, [r7, #8]
 8037f4a:	68f9      	ldr	r1, [r7, #12]
 8037f4c:	4806      	ldr	r0, [pc, #24]	; (8037f68 <BSP_SD_WriteBlocks+0x38>)
 8037f4e:	f7fc fc2d 	bl	80347ac <HAL_SD_WriteBlocks>
 8037f52:	4603      	mov	r3, r0
 8037f54:	2b00      	cmp	r3, #0
 8037f56:	d001      	beq.n	8037f5c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8037f58:	2301      	movs	r3, #1
 8037f5a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8037f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8037f5e:	4618      	mov	r0, r3
 8037f60:	3718      	adds	r7, #24
 8037f62:	46bd      	mov	sp, r7
 8037f64:	bd80      	pop	{r7, pc}
 8037f66:	bf00      	nop
 8037f68:	2000059c 	.word	0x2000059c

08037f6c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8037f6c:	b580      	push	{r7, lr}
 8037f6e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8037f70:	4805      	ldr	r0, [pc, #20]	; (8037f88 <BSP_SD_GetCardState+0x1c>)
 8037f72:	f7fc ff71 	bl	8034e58 <HAL_SD_GetCardState>
 8037f76:	4603      	mov	r3, r0
 8037f78:	2b04      	cmp	r3, #4
 8037f7a:	bf14      	ite	ne
 8037f7c:	2301      	movne	r3, #1
 8037f7e:	2300      	moveq	r3, #0
 8037f80:	b2db      	uxtb	r3, r3
}
 8037f82:	4618      	mov	r0, r3
 8037f84:	bd80      	pop	{r7, pc}
 8037f86:	bf00      	nop
 8037f88:	2000059c 	.word	0x2000059c

08037f8c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8037f8c:	b580      	push	{r7, lr}
 8037f8e:	b082      	sub	sp, #8
 8037f90:	af00      	add	r7, sp, #0
 8037f92:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8037f94:	6879      	ldr	r1, [r7, #4]
 8037f96:	4803      	ldr	r0, [pc, #12]	; (8037fa4 <BSP_SD_GetCardInfo+0x18>)
 8037f98:	f7fc ff32 	bl	8034e00 <HAL_SD_GetCardInfo>
}
 8037f9c:	bf00      	nop
 8037f9e:	3708      	adds	r7, #8
 8037fa0:	46bd      	mov	sp, r7
 8037fa2:	bd80      	pop	{r7, pc}
 8037fa4:	2000059c 	.word	0x2000059c

08037fa8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8037fa8:	b480      	push	{r7}
 8037faa:	b083      	sub	sp, #12
 8037fac:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8037fae:	2301      	movs	r3, #1
 8037fb0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8037fb2:	79fb      	ldrb	r3, [r7, #7]
 8037fb4:	b2db      	uxtb	r3, r3
}
 8037fb6:	4618      	mov	r0, r3
 8037fb8:	370c      	adds	r7, #12
 8037fba:	46bd      	mov	sp, r7
 8037fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037fc0:	4770      	bx	lr
	...

08037fc4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8037fc4:	b580      	push	{r7, lr}
 8037fc6:	b082      	sub	sp, #8
 8037fc8:	af00      	add	r7, sp, #0
 8037fca:	4603      	mov	r3, r0
 8037fcc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8037fce:	4b0b      	ldr	r3, [pc, #44]	; (8037ffc <SD_CheckStatus+0x38>)
 8037fd0:	2201      	movs	r2, #1
 8037fd2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8037fd4:	f7ff ffca 	bl	8037f6c <BSP_SD_GetCardState>
 8037fd8:	4603      	mov	r3, r0
 8037fda:	2b00      	cmp	r3, #0
 8037fdc:	d107      	bne.n	8037fee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8037fde:	4b07      	ldr	r3, [pc, #28]	; (8037ffc <SD_CheckStatus+0x38>)
 8037fe0:	781b      	ldrb	r3, [r3, #0]
 8037fe2:	b2db      	uxtb	r3, r3
 8037fe4:	f023 0301 	bic.w	r3, r3, #1
 8037fe8:	b2da      	uxtb	r2, r3
 8037fea:	4b04      	ldr	r3, [pc, #16]	; (8037ffc <SD_CheckStatus+0x38>)
 8037fec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8037fee:	4b03      	ldr	r3, [pc, #12]	; (8037ffc <SD_CheckStatus+0x38>)
 8037ff0:	781b      	ldrb	r3, [r3, #0]
 8037ff2:	b2db      	uxtb	r3, r3
}
 8037ff4:	4618      	mov	r0, r3
 8037ff6:	3708      	adds	r7, #8
 8037ff8:	46bd      	mov	sp, r7
 8037ffa:	bd80      	pop	{r7, pc}
 8037ffc:	20000029 	.word	0x20000029

08038000 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8038000:	b580      	push	{r7, lr}
 8038002:	b082      	sub	sp, #8
 8038004:	af00      	add	r7, sp, #0
 8038006:	4603      	mov	r3, r0
 8038008:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 803800a:	4b0b      	ldr	r3, [pc, #44]	; (8038038 <SD_initialize+0x38>)
 803800c:	2201      	movs	r2, #1
 803800e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8038010:	f7ff ff58 	bl	8037ec4 <BSP_SD_Init>
 8038014:	4603      	mov	r3, r0
 8038016:	2b00      	cmp	r3, #0
 8038018:	d107      	bne.n	803802a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 803801a:	79fb      	ldrb	r3, [r7, #7]
 803801c:	4618      	mov	r0, r3
 803801e:	f7ff ffd1 	bl	8037fc4 <SD_CheckStatus>
 8038022:	4603      	mov	r3, r0
 8038024:	461a      	mov	r2, r3
 8038026:	4b04      	ldr	r3, [pc, #16]	; (8038038 <SD_initialize+0x38>)
 8038028:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 803802a:	4b03      	ldr	r3, [pc, #12]	; (8038038 <SD_initialize+0x38>)
 803802c:	781b      	ldrb	r3, [r3, #0]
 803802e:	b2db      	uxtb	r3, r3
}
 8038030:	4618      	mov	r0, r3
 8038032:	3708      	adds	r7, #8
 8038034:	46bd      	mov	sp, r7
 8038036:	bd80      	pop	{r7, pc}
 8038038:	20000029 	.word	0x20000029

0803803c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 803803c:	b580      	push	{r7, lr}
 803803e:	b082      	sub	sp, #8
 8038040:	af00      	add	r7, sp, #0
 8038042:	4603      	mov	r3, r0
 8038044:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8038046:	79fb      	ldrb	r3, [r7, #7]
 8038048:	4618      	mov	r0, r3
 803804a:	f7ff ffbb 	bl	8037fc4 <SD_CheckStatus>
 803804e:	4603      	mov	r3, r0
}
 8038050:	4618      	mov	r0, r3
 8038052:	3708      	adds	r7, #8
 8038054:	46bd      	mov	sp, r7
 8038056:	bd80      	pop	{r7, pc}

08038058 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8038058:	b580      	push	{r7, lr}
 803805a:	b086      	sub	sp, #24
 803805c:	af00      	add	r7, sp, #0
 803805e:	60b9      	str	r1, [r7, #8]
 8038060:	607a      	str	r2, [r7, #4]
 8038062:	603b      	str	r3, [r7, #0]
 8038064:	4603      	mov	r3, r0
 8038066:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8038068:	2301      	movs	r3, #1
 803806a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 803806c:	f04f 33ff 	mov.w	r3, #4294967295
 8038070:	683a      	ldr	r2, [r7, #0]
 8038072:	6879      	ldr	r1, [r7, #4]
 8038074:	68b8      	ldr	r0, [r7, #8]
 8038076:	f7ff ff3d 	bl	8037ef4 <BSP_SD_ReadBlocks>
 803807a:	4603      	mov	r3, r0
 803807c:	2b00      	cmp	r3, #0
 803807e:	d107      	bne.n	8038090 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8038080:	bf00      	nop
 8038082:	f7ff ff73 	bl	8037f6c <BSP_SD_GetCardState>
 8038086:	4603      	mov	r3, r0
 8038088:	2b00      	cmp	r3, #0
 803808a:	d1fa      	bne.n	8038082 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 803808c:	2300      	movs	r3, #0
 803808e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8038090:	7dfb      	ldrb	r3, [r7, #23]
}
 8038092:	4618      	mov	r0, r3
 8038094:	3718      	adds	r7, #24
 8038096:	46bd      	mov	sp, r7
 8038098:	bd80      	pop	{r7, pc}

0803809a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 803809a:	b580      	push	{r7, lr}
 803809c:	b086      	sub	sp, #24
 803809e:	af00      	add	r7, sp, #0
 80380a0:	60b9      	str	r1, [r7, #8]
 80380a2:	607a      	str	r2, [r7, #4]
 80380a4:	603b      	str	r3, [r7, #0]
 80380a6:	4603      	mov	r3, r0
 80380a8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80380aa:	2301      	movs	r3, #1
 80380ac:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80380ae:	f04f 33ff 	mov.w	r3, #4294967295
 80380b2:	683a      	ldr	r2, [r7, #0]
 80380b4:	6879      	ldr	r1, [r7, #4]
 80380b6:	68b8      	ldr	r0, [r7, #8]
 80380b8:	f7ff ff3a 	bl	8037f30 <BSP_SD_WriteBlocks>
 80380bc:	4603      	mov	r3, r0
 80380be:	2b00      	cmp	r3, #0
 80380c0:	d107      	bne.n	80380d2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80380c2:	bf00      	nop
 80380c4:	f7ff ff52 	bl	8037f6c <BSP_SD_GetCardState>
 80380c8:	4603      	mov	r3, r0
 80380ca:	2b00      	cmp	r3, #0
 80380cc:	d1fa      	bne.n	80380c4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80380ce:	2300      	movs	r3, #0
 80380d0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80380d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80380d4:	4618      	mov	r0, r3
 80380d6:	3718      	adds	r7, #24
 80380d8:	46bd      	mov	sp, r7
 80380da:	bd80      	pop	{r7, pc}

080380dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80380dc:	b580      	push	{r7, lr}
 80380de:	b08c      	sub	sp, #48	; 0x30
 80380e0:	af00      	add	r7, sp, #0
 80380e2:	4603      	mov	r3, r0
 80380e4:	603a      	str	r2, [r7, #0]
 80380e6:	71fb      	strb	r3, [r7, #7]
 80380e8:	460b      	mov	r3, r1
 80380ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80380ec:	2301      	movs	r3, #1
 80380ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80380f2:	4b25      	ldr	r3, [pc, #148]	; (8038188 <SD_ioctl+0xac>)
 80380f4:	781b      	ldrb	r3, [r3, #0]
 80380f6:	b2db      	uxtb	r3, r3
 80380f8:	f003 0301 	and.w	r3, r3, #1
 80380fc:	2b00      	cmp	r3, #0
 80380fe:	d001      	beq.n	8038104 <SD_ioctl+0x28>
 8038100:	2303      	movs	r3, #3
 8038102:	e03c      	b.n	803817e <SD_ioctl+0xa2>

  switch (cmd)
 8038104:	79bb      	ldrb	r3, [r7, #6]
 8038106:	2b03      	cmp	r3, #3
 8038108:	d834      	bhi.n	8038174 <SD_ioctl+0x98>
 803810a:	a201      	add	r2, pc, #4	; (adr r2, 8038110 <SD_ioctl+0x34>)
 803810c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8038110:	08038121 	.word	0x08038121
 8038114:	08038129 	.word	0x08038129
 8038118:	08038141 	.word	0x08038141
 803811c:	0803815b 	.word	0x0803815b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8038120:	2300      	movs	r3, #0
 8038122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8038126:	e028      	b.n	803817a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8038128:	f107 030c 	add.w	r3, r7, #12
 803812c:	4618      	mov	r0, r3
 803812e:	f7ff ff2d 	bl	8037f8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8038132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8038134:	683b      	ldr	r3, [r7, #0]
 8038136:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8038138:	2300      	movs	r3, #0
 803813a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 803813e:	e01c      	b.n	803817a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8038140:	f107 030c 	add.w	r3, r7, #12
 8038144:	4618      	mov	r0, r3
 8038146:	f7ff ff21 	bl	8037f8c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 803814a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803814c:	b29a      	uxth	r2, r3
 803814e:	683b      	ldr	r3, [r7, #0]
 8038150:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8038152:	2300      	movs	r3, #0
 8038154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8038158:	e00f      	b.n	803817a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 803815a:	f107 030c 	add.w	r3, r7, #12
 803815e:	4618      	mov	r0, r3
 8038160:	f7ff ff14 	bl	8037f8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8038164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038166:	0a5a      	lsrs	r2, r3, #9
 8038168:	683b      	ldr	r3, [r7, #0]
 803816a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 803816c:	2300      	movs	r3, #0
 803816e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8038172:	e002      	b.n	803817a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8038174:	2304      	movs	r3, #4
 8038176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 803817a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 803817e:	4618      	mov	r0, r3
 8038180:	3730      	adds	r7, #48	; 0x30
 8038182:	46bd      	mov	sp, r7
 8038184:	bd80      	pop	{r7, pc}
 8038186:	bf00      	nop
 8038188:	20000029 	.word	0x20000029

0803818c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 803818c:	b580      	push	{r7, lr}
 803818e:	b084      	sub	sp, #16
 8038190:	af00      	add	r7, sp, #0
 8038192:	4603      	mov	r3, r0
 8038194:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8038196:	79fb      	ldrb	r3, [r7, #7]
 8038198:	4a08      	ldr	r2, [pc, #32]	; (80381bc <disk_status+0x30>)
 803819a:	009b      	lsls	r3, r3, #2
 803819c:	4413      	add	r3, r2
 803819e:	685b      	ldr	r3, [r3, #4]
 80381a0:	685b      	ldr	r3, [r3, #4]
 80381a2:	79fa      	ldrb	r2, [r7, #7]
 80381a4:	4905      	ldr	r1, [pc, #20]	; (80381bc <disk_status+0x30>)
 80381a6:	440a      	add	r2, r1
 80381a8:	7a12      	ldrb	r2, [r2, #8]
 80381aa:	4610      	mov	r0, r2
 80381ac:	4798      	blx	r3
 80381ae:	4603      	mov	r3, r0
 80381b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80381b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80381b4:	4618      	mov	r0, r3
 80381b6:	3710      	adds	r7, #16
 80381b8:	46bd      	mov	sp, r7
 80381ba:	bd80      	pop	{r7, pc}
 80381bc:	20000460 	.word	0x20000460

080381c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80381c0:	b580      	push	{r7, lr}
 80381c2:	b084      	sub	sp, #16
 80381c4:	af00      	add	r7, sp, #0
 80381c6:	4603      	mov	r3, r0
 80381c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80381ca:	2300      	movs	r3, #0
 80381cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80381ce:	79fb      	ldrb	r3, [r7, #7]
 80381d0:	4a0d      	ldr	r2, [pc, #52]	; (8038208 <disk_initialize+0x48>)
 80381d2:	5cd3      	ldrb	r3, [r2, r3]
 80381d4:	2b00      	cmp	r3, #0
 80381d6:	d111      	bne.n	80381fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80381d8:	79fb      	ldrb	r3, [r7, #7]
 80381da:	4a0b      	ldr	r2, [pc, #44]	; (8038208 <disk_initialize+0x48>)
 80381dc:	2101      	movs	r1, #1
 80381de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80381e0:	79fb      	ldrb	r3, [r7, #7]
 80381e2:	4a09      	ldr	r2, [pc, #36]	; (8038208 <disk_initialize+0x48>)
 80381e4:	009b      	lsls	r3, r3, #2
 80381e6:	4413      	add	r3, r2
 80381e8:	685b      	ldr	r3, [r3, #4]
 80381ea:	681b      	ldr	r3, [r3, #0]
 80381ec:	79fa      	ldrb	r2, [r7, #7]
 80381ee:	4906      	ldr	r1, [pc, #24]	; (8038208 <disk_initialize+0x48>)
 80381f0:	440a      	add	r2, r1
 80381f2:	7a12      	ldrb	r2, [r2, #8]
 80381f4:	4610      	mov	r0, r2
 80381f6:	4798      	blx	r3
 80381f8:	4603      	mov	r3, r0
 80381fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80381fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80381fe:	4618      	mov	r0, r3
 8038200:	3710      	adds	r7, #16
 8038202:	46bd      	mov	sp, r7
 8038204:	bd80      	pop	{r7, pc}
 8038206:	bf00      	nop
 8038208:	20000460 	.word	0x20000460

0803820c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 803820c:	b590      	push	{r4, r7, lr}
 803820e:	b087      	sub	sp, #28
 8038210:	af00      	add	r7, sp, #0
 8038212:	60b9      	str	r1, [r7, #8]
 8038214:	607a      	str	r2, [r7, #4]
 8038216:	603b      	str	r3, [r7, #0]
 8038218:	4603      	mov	r3, r0
 803821a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 803821c:	7bfb      	ldrb	r3, [r7, #15]
 803821e:	4a0a      	ldr	r2, [pc, #40]	; (8038248 <disk_read+0x3c>)
 8038220:	009b      	lsls	r3, r3, #2
 8038222:	4413      	add	r3, r2
 8038224:	685b      	ldr	r3, [r3, #4]
 8038226:	689c      	ldr	r4, [r3, #8]
 8038228:	7bfb      	ldrb	r3, [r7, #15]
 803822a:	4a07      	ldr	r2, [pc, #28]	; (8038248 <disk_read+0x3c>)
 803822c:	4413      	add	r3, r2
 803822e:	7a18      	ldrb	r0, [r3, #8]
 8038230:	683b      	ldr	r3, [r7, #0]
 8038232:	687a      	ldr	r2, [r7, #4]
 8038234:	68b9      	ldr	r1, [r7, #8]
 8038236:	47a0      	blx	r4
 8038238:	4603      	mov	r3, r0
 803823a:	75fb      	strb	r3, [r7, #23]
  return res;
 803823c:	7dfb      	ldrb	r3, [r7, #23]
}
 803823e:	4618      	mov	r0, r3
 8038240:	371c      	adds	r7, #28
 8038242:	46bd      	mov	sp, r7
 8038244:	bd90      	pop	{r4, r7, pc}
 8038246:	bf00      	nop
 8038248:	20000460 	.word	0x20000460

0803824c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 803824c:	b590      	push	{r4, r7, lr}
 803824e:	b087      	sub	sp, #28
 8038250:	af00      	add	r7, sp, #0
 8038252:	60b9      	str	r1, [r7, #8]
 8038254:	607a      	str	r2, [r7, #4]
 8038256:	603b      	str	r3, [r7, #0]
 8038258:	4603      	mov	r3, r0
 803825a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 803825c:	7bfb      	ldrb	r3, [r7, #15]
 803825e:	4a0a      	ldr	r2, [pc, #40]	; (8038288 <disk_write+0x3c>)
 8038260:	009b      	lsls	r3, r3, #2
 8038262:	4413      	add	r3, r2
 8038264:	685b      	ldr	r3, [r3, #4]
 8038266:	68dc      	ldr	r4, [r3, #12]
 8038268:	7bfb      	ldrb	r3, [r7, #15]
 803826a:	4a07      	ldr	r2, [pc, #28]	; (8038288 <disk_write+0x3c>)
 803826c:	4413      	add	r3, r2
 803826e:	7a18      	ldrb	r0, [r3, #8]
 8038270:	683b      	ldr	r3, [r7, #0]
 8038272:	687a      	ldr	r2, [r7, #4]
 8038274:	68b9      	ldr	r1, [r7, #8]
 8038276:	47a0      	blx	r4
 8038278:	4603      	mov	r3, r0
 803827a:	75fb      	strb	r3, [r7, #23]
  return res;
 803827c:	7dfb      	ldrb	r3, [r7, #23]
}
 803827e:	4618      	mov	r0, r3
 8038280:	371c      	adds	r7, #28
 8038282:	46bd      	mov	sp, r7
 8038284:	bd90      	pop	{r4, r7, pc}
 8038286:	bf00      	nop
 8038288:	20000460 	.word	0x20000460

0803828c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 803828c:	b580      	push	{r7, lr}
 803828e:	b084      	sub	sp, #16
 8038290:	af00      	add	r7, sp, #0
 8038292:	4603      	mov	r3, r0
 8038294:	603a      	str	r2, [r7, #0]
 8038296:	71fb      	strb	r3, [r7, #7]
 8038298:	460b      	mov	r3, r1
 803829a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 803829c:	79fb      	ldrb	r3, [r7, #7]
 803829e:	4a09      	ldr	r2, [pc, #36]	; (80382c4 <disk_ioctl+0x38>)
 80382a0:	009b      	lsls	r3, r3, #2
 80382a2:	4413      	add	r3, r2
 80382a4:	685b      	ldr	r3, [r3, #4]
 80382a6:	691b      	ldr	r3, [r3, #16]
 80382a8:	79fa      	ldrb	r2, [r7, #7]
 80382aa:	4906      	ldr	r1, [pc, #24]	; (80382c4 <disk_ioctl+0x38>)
 80382ac:	440a      	add	r2, r1
 80382ae:	7a10      	ldrb	r0, [r2, #8]
 80382b0:	79b9      	ldrb	r1, [r7, #6]
 80382b2:	683a      	ldr	r2, [r7, #0]
 80382b4:	4798      	blx	r3
 80382b6:	4603      	mov	r3, r0
 80382b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80382ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80382bc:	4618      	mov	r0, r3
 80382be:	3710      	adds	r7, #16
 80382c0:	46bd      	mov	sp, r7
 80382c2:	bd80      	pop	{r7, pc}
 80382c4:	20000460 	.word	0x20000460

080382c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80382c8:	b480      	push	{r7}
 80382ca:	b085      	sub	sp, #20
 80382cc:	af00      	add	r7, sp, #0
 80382ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80382d0:	687b      	ldr	r3, [r7, #4]
 80382d2:	3301      	adds	r3, #1
 80382d4:	781b      	ldrb	r3, [r3, #0]
 80382d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80382d8:	89fb      	ldrh	r3, [r7, #14]
 80382da:	021b      	lsls	r3, r3, #8
 80382dc:	b21a      	sxth	r2, r3
 80382de:	687b      	ldr	r3, [r7, #4]
 80382e0:	781b      	ldrb	r3, [r3, #0]
 80382e2:	b21b      	sxth	r3, r3
 80382e4:	4313      	orrs	r3, r2
 80382e6:	b21b      	sxth	r3, r3
 80382e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80382ea:	89fb      	ldrh	r3, [r7, #14]
}
 80382ec:	4618      	mov	r0, r3
 80382ee:	3714      	adds	r7, #20
 80382f0:	46bd      	mov	sp, r7
 80382f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80382f6:	4770      	bx	lr

080382f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80382f8:	b480      	push	{r7}
 80382fa:	b085      	sub	sp, #20
 80382fc:	af00      	add	r7, sp, #0
 80382fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8038300:	687b      	ldr	r3, [r7, #4]
 8038302:	3303      	adds	r3, #3
 8038304:	781b      	ldrb	r3, [r3, #0]
 8038306:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8038308:	68fb      	ldr	r3, [r7, #12]
 803830a:	021b      	lsls	r3, r3, #8
 803830c:	687a      	ldr	r2, [r7, #4]
 803830e:	3202      	adds	r2, #2
 8038310:	7812      	ldrb	r2, [r2, #0]
 8038312:	4313      	orrs	r3, r2
 8038314:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8038316:	68fb      	ldr	r3, [r7, #12]
 8038318:	021b      	lsls	r3, r3, #8
 803831a:	687a      	ldr	r2, [r7, #4]
 803831c:	3201      	adds	r2, #1
 803831e:	7812      	ldrb	r2, [r2, #0]
 8038320:	4313      	orrs	r3, r2
 8038322:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8038324:	68fb      	ldr	r3, [r7, #12]
 8038326:	021b      	lsls	r3, r3, #8
 8038328:	687a      	ldr	r2, [r7, #4]
 803832a:	7812      	ldrb	r2, [r2, #0]
 803832c:	4313      	orrs	r3, r2
 803832e:	60fb      	str	r3, [r7, #12]
	return rv;
 8038330:	68fb      	ldr	r3, [r7, #12]
}
 8038332:	4618      	mov	r0, r3
 8038334:	3714      	adds	r7, #20
 8038336:	46bd      	mov	sp, r7
 8038338:	f85d 7b04 	ldr.w	r7, [sp], #4
 803833c:	4770      	bx	lr

0803833e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 803833e:	b480      	push	{r7}
 8038340:	b083      	sub	sp, #12
 8038342:	af00      	add	r7, sp, #0
 8038344:	6078      	str	r0, [r7, #4]
 8038346:	460b      	mov	r3, r1
 8038348:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 803834a:	687b      	ldr	r3, [r7, #4]
 803834c:	1c5a      	adds	r2, r3, #1
 803834e:	607a      	str	r2, [r7, #4]
 8038350:	887a      	ldrh	r2, [r7, #2]
 8038352:	b2d2      	uxtb	r2, r2
 8038354:	701a      	strb	r2, [r3, #0]
 8038356:	887b      	ldrh	r3, [r7, #2]
 8038358:	0a1b      	lsrs	r3, r3, #8
 803835a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 803835c:	687b      	ldr	r3, [r7, #4]
 803835e:	1c5a      	adds	r2, r3, #1
 8038360:	607a      	str	r2, [r7, #4]
 8038362:	887a      	ldrh	r2, [r7, #2]
 8038364:	b2d2      	uxtb	r2, r2
 8038366:	701a      	strb	r2, [r3, #0]
}
 8038368:	bf00      	nop
 803836a:	370c      	adds	r7, #12
 803836c:	46bd      	mov	sp, r7
 803836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038372:	4770      	bx	lr

08038374 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8038374:	b480      	push	{r7}
 8038376:	b083      	sub	sp, #12
 8038378:	af00      	add	r7, sp, #0
 803837a:	6078      	str	r0, [r7, #4]
 803837c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 803837e:	687b      	ldr	r3, [r7, #4]
 8038380:	1c5a      	adds	r2, r3, #1
 8038382:	607a      	str	r2, [r7, #4]
 8038384:	683a      	ldr	r2, [r7, #0]
 8038386:	b2d2      	uxtb	r2, r2
 8038388:	701a      	strb	r2, [r3, #0]
 803838a:	683b      	ldr	r3, [r7, #0]
 803838c:	0a1b      	lsrs	r3, r3, #8
 803838e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8038390:	687b      	ldr	r3, [r7, #4]
 8038392:	1c5a      	adds	r2, r3, #1
 8038394:	607a      	str	r2, [r7, #4]
 8038396:	683a      	ldr	r2, [r7, #0]
 8038398:	b2d2      	uxtb	r2, r2
 803839a:	701a      	strb	r2, [r3, #0]
 803839c:	683b      	ldr	r3, [r7, #0]
 803839e:	0a1b      	lsrs	r3, r3, #8
 80383a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80383a2:	687b      	ldr	r3, [r7, #4]
 80383a4:	1c5a      	adds	r2, r3, #1
 80383a6:	607a      	str	r2, [r7, #4]
 80383a8:	683a      	ldr	r2, [r7, #0]
 80383aa:	b2d2      	uxtb	r2, r2
 80383ac:	701a      	strb	r2, [r3, #0]
 80383ae:	683b      	ldr	r3, [r7, #0]
 80383b0:	0a1b      	lsrs	r3, r3, #8
 80383b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80383b4:	687b      	ldr	r3, [r7, #4]
 80383b6:	1c5a      	adds	r2, r3, #1
 80383b8:	607a      	str	r2, [r7, #4]
 80383ba:	683a      	ldr	r2, [r7, #0]
 80383bc:	b2d2      	uxtb	r2, r2
 80383be:	701a      	strb	r2, [r3, #0]
}
 80383c0:	bf00      	nop
 80383c2:	370c      	adds	r7, #12
 80383c4:	46bd      	mov	sp, r7
 80383c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80383ca:	4770      	bx	lr

080383cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80383cc:	b480      	push	{r7}
 80383ce:	b087      	sub	sp, #28
 80383d0:	af00      	add	r7, sp, #0
 80383d2:	60f8      	str	r0, [r7, #12]
 80383d4:	60b9      	str	r1, [r7, #8]
 80383d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80383d8:	68fb      	ldr	r3, [r7, #12]
 80383da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80383dc:	68bb      	ldr	r3, [r7, #8]
 80383de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80383e0:	687b      	ldr	r3, [r7, #4]
 80383e2:	2b00      	cmp	r3, #0
 80383e4:	d00d      	beq.n	8038402 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80383e6:	693a      	ldr	r2, [r7, #16]
 80383e8:	1c53      	adds	r3, r2, #1
 80383ea:	613b      	str	r3, [r7, #16]
 80383ec:	697b      	ldr	r3, [r7, #20]
 80383ee:	1c59      	adds	r1, r3, #1
 80383f0:	6179      	str	r1, [r7, #20]
 80383f2:	7812      	ldrb	r2, [r2, #0]
 80383f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80383f6:	687b      	ldr	r3, [r7, #4]
 80383f8:	3b01      	subs	r3, #1
 80383fa:	607b      	str	r3, [r7, #4]
 80383fc:	687b      	ldr	r3, [r7, #4]
 80383fe:	2b00      	cmp	r3, #0
 8038400:	d1f1      	bne.n	80383e6 <mem_cpy+0x1a>
	}
}
 8038402:	bf00      	nop
 8038404:	371c      	adds	r7, #28
 8038406:	46bd      	mov	sp, r7
 8038408:	f85d 7b04 	ldr.w	r7, [sp], #4
 803840c:	4770      	bx	lr

0803840e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 803840e:	b480      	push	{r7}
 8038410:	b087      	sub	sp, #28
 8038412:	af00      	add	r7, sp, #0
 8038414:	60f8      	str	r0, [r7, #12]
 8038416:	60b9      	str	r1, [r7, #8]
 8038418:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 803841a:	68fb      	ldr	r3, [r7, #12]
 803841c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 803841e:	697b      	ldr	r3, [r7, #20]
 8038420:	1c5a      	adds	r2, r3, #1
 8038422:	617a      	str	r2, [r7, #20]
 8038424:	68ba      	ldr	r2, [r7, #8]
 8038426:	b2d2      	uxtb	r2, r2
 8038428:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 803842a:	687b      	ldr	r3, [r7, #4]
 803842c:	3b01      	subs	r3, #1
 803842e:	607b      	str	r3, [r7, #4]
 8038430:	687b      	ldr	r3, [r7, #4]
 8038432:	2b00      	cmp	r3, #0
 8038434:	d1f3      	bne.n	803841e <mem_set+0x10>
}
 8038436:	bf00      	nop
 8038438:	bf00      	nop
 803843a:	371c      	adds	r7, #28
 803843c:	46bd      	mov	sp, r7
 803843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038442:	4770      	bx	lr

08038444 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8038444:	b480      	push	{r7}
 8038446:	b089      	sub	sp, #36	; 0x24
 8038448:	af00      	add	r7, sp, #0
 803844a:	60f8      	str	r0, [r7, #12]
 803844c:	60b9      	str	r1, [r7, #8]
 803844e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8038450:	68fb      	ldr	r3, [r7, #12]
 8038452:	61fb      	str	r3, [r7, #28]
 8038454:	68bb      	ldr	r3, [r7, #8]
 8038456:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8038458:	2300      	movs	r3, #0
 803845a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 803845c:	69fb      	ldr	r3, [r7, #28]
 803845e:	1c5a      	adds	r2, r3, #1
 8038460:	61fa      	str	r2, [r7, #28]
 8038462:	781b      	ldrb	r3, [r3, #0]
 8038464:	4619      	mov	r1, r3
 8038466:	69bb      	ldr	r3, [r7, #24]
 8038468:	1c5a      	adds	r2, r3, #1
 803846a:	61ba      	str	r2, [r7, #24]
 803846c:	781b      	ldrb	r3, [r3, #0]
 803846e:	1acb      	subs	r3, r1, r3
 8038470:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8038472:	687b      	ldr	r3, [r7, #4]
 8038474:	3b01      	subs	r3, #1
 8038476:	607b      	str	r3, [r7, #4]
 8038478:	687b      	ldr	r3, [r7, #4]
 803847a:	2b00      	cmp	r3, #0
 803847c:	d002      	beq.n	8038484 <mem_cmp+0x40>
 803847e:	697b      	ldr	r3, [r7, #20]
 8038480:	2b00      	cmp	r3, #0
 8038482:	d0eb      	beq.n	803845c <mem_cmp+0x18>

	return r;
 8038484:	697b      	ldr	r3, [r7, #20]
}
 8038486:	4618      	mov	r0, r3
 8038488:	3724      	adds	r7, #36	; 0x24
 803848a:	46bd      	mov	sp, r7
 803848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038490:	4770      	bx	lr

08038492 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8038492:	b480      	push	{r7}
 8038494:	b083      	sub	sp, #12
 8038496:	af00      	add	r7, sp, #0
 8038498:	6078      	str	r0, [r7, #4]
 803849a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 803849c:	e002      	b.n	80384a4 <chk_chr+0x12>
 803849e:	687b      	ldr	r3, [r7, #4]
 80384a0:	3301      	adds	r3, #1
 80384a2:	607b      	str	r3, [r7, #4]
 80384a4:	687b      	ldr	r3, [r7, #4]
 80384a6:	781b      	ldrb	r3, [r3, #0]
 80384a8:	2b00      	cmp	r3, #0
 80384aa:	d005      	beq.n	80384b8 <chk_chr+0x26>
 80384ac:	687b      	ldr	r3, [r7, #4]
 80384ae:	781b      	ldrb	r3, [r3, #0]
 80384b0:	461a      	mov	r2, r3
 80384b2:	683b      	ldr	r3, [r7, #0]
 80384b4:	4293      	cmp	r3, r2
 80384b6:	d1f2      	bne.n	803849e <chk_chr+0xc>
	return *str;
 80384b8:	687b      	ldr	r3, [r7, #4]
 80384ba:	781b      	ldrb	r3, [r3, #0]
}
 80384bc:	4618      	mov	r0, r3
 80384be:	370c      	adds	r7, #12
 80384c0:	46bd      	mov	sp, r7
 80384c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80384c6:	4770      	bx	lr

080384c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80384c8:	b480      	push	{r7}
 80384ca:	b085      	sub	sp, #20
 80384cc:	af00      	add	r7, sp, #0
 80384ce:	6078      	str	r0, [r7, #4]
 80384d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80384d2:	2300      	movs	r3, #0
 80384d4:	60bb      	str	r3, [r7, #8]
 80384d6:	68bb      	ldr	r3, [r7, #8]
 80384d8:	60fb      	str	r3, [r7, #12]
 80384da:	e029      	b.n	8038530 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80384dc:	4a27      	ldr	r2, [pc, #156]	; (803857c <chk_lock+0xb4>)
 80384de:	68fb      	ldr	r3, [r7, #12]
 80384e0:	011b      	lsls	r3, r3, #4
 80384e2:	4413      	add	r3, r2
 80384e4:	681b      	ldr	r3, [r3, #0]
 80384e6:	2b00      	cmp	r3, #0
 80384e8:	d01d      	beq.n	8038526 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80384ea:	4a24      	ldr	r2, [pc, #144]	; (803857c <chk_lock+0xb4>)
 80384ec:	68fb      	ldr	r3, [r7, #12]
 80384ee:	011b      	lsls	r3, r3, #4
 80384f0:	4413      	add	r3, r2
 80384f2:	681a      	ldr	r2, [r3, #0]
 80384f4:	687b      	ldr	r3, [r7, #4]
 80384f6:	681b      	ldr	r3, [r3, #0]
 80384f8:	429a      	cmp	r2, r3
 80384fa:	d116      	bne.n	803852a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80384fc:	4a1f      	ldr	r2, [pc, #124]	; (803857c <chk_lock+0xb4>)
 80384fe:	68fb      	ldr	r3, [r7, #12]
 8038500:	011b      	lsls	r3, r3, #4
 8038502:	4413      	add	r3, r2
 8038504:	3304      	adds	r3, #4
 8038506:	681a      	ldr	r2, [r3, #0]
 8038508:	687b      	ldr	r3, [r7, #4]
 803850a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 803850c:	429a      	cmp	r2, r3
 803850e:	d10c      	bne.n	803852a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8038510:	4a1a      	ldr	r2, [pc, #104]	; (803857c <chk_lock+0xb4>)
 8038512:	68fb      	ldr	r3, [r7, #12]
 8038514:	011b      	lsls	r3, r3, #4
 8038516:	4413      	add	r3, r2
 8038518:	3308      	adds	r3, #8
 803851a:	681a      	ldr	r2, [r3, #0]
 803851c:	687b      	ldr	r3, [r7, #4]
 803851e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8038520:	429a      	cmp	r2, r3
 8038522:	d102      	bne.n	803852a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8038524:	e007      	b.n	8038536 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8038526:	2301      	movs	r3, #1
 8038528:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 803852a:	68fb      	ldr	r3, [r7, #12]
 803852c:	3301      	adds	r3, #1
 803852e:	60fb      	str	r3, [r7, #12]
 8038530:	68fb      	ldr	r3, [r7, #12]
 8038532:	2b01      	cmp	r3, #1
 8038534:	d9d2      	bls.n	80384dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8038536:	68fb      	ldr	r3, [r7, #12]
 8038538:	2b02      	cmp	r3, #2
 803853a:	d109      	bne.n	8038550 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 803853c:	68bb      	ldr	r3, [r7, #8]
 803853e:	2b00      	cmp	r3, #0
 8038540:	d102      	bne.n	8038548 <chk_lock+0x80>
 8038542:	683b      	ldr	r3, [r7, #0]
 8038544:	2b02      	cmp	r3, #2
 8038546:	d101      	bne.n	803854c <chk_lock+0x84>
 8038548:	2300      	movs	r3, #0
 803854a:	e010      	b.n	803856e <chk_lock+0xa6>
 803854c:	2312      	movs	r3, #18
 803854e:	e00e      	b.n	803856e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8038550:	683b      	ldr	r3, [r7, #0]
 8038552:	2b00      	cmp	r3, #0
 8038554:	d108      	bne.n	8038568 <chk_lock+0xa0>
 8038556:	4a09      	ldr	r2, [pc, #36]	; (803857c <chk_lock+0xb4>)
 8038558:	68fb      	ldr	r3, [r7, #12]
 803855a:	011b      	lsls	r3, r3, #4
 803855c:	4413      	add	r3, r2
 803855e:	330c      	adds	r3, #12
 8038560:	881b      	ldrh	r3, [r3, #0]
 8038562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8038566:	d101      	bne.n	803856c <chk_lock+0xa4>
 8038568:	2310      	movs	r3, #16
 803856a:	e000      	b.n	803856e <chk_lock+0xa6>
 803856c:	2300      	movs	r3, #0
}
 803856e:	4618      	mov	r0, r3
 8038570:	3714      	adds	r7, #20
 8038572:	46bd      	mov	sp, r7
 8038574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038578:	4770      	bx	lr
 803857a:	bf00      	nop
 803857c:	20000440 	.word	0x20000440

08038580 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8038580:	b480      	push	{r7}
 8038582:	b083      	sub	sp, #12
 8038584:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8038586:	2300      	movs	r3, #0
 8038588:	607b      	str	r3, [r7, #4]
 803858a:	e002      	b.n	8038592 <enq_lock+0x12>
 803858c:	687b      	ldr	r3, [r7, #4]
 803858e:	3301      	adds	r3, #1
 8038590:	607b      	str	r3, [r7, #4]
 8038592:	687b      	ldr	r3, [r7, #4]
 8038594:	2b01      	cmp	r3, #1
 8038596:	d806      	bhi.n	80385a6 <enq_lock+0x26>
 8038598:	4a09      	ldr	r2, [pc, #36]	; (80385c0 <enq_lock+0x40>)
 803859a:	687b      	ldr	r3, [r7, #4]
 803859c:	011b      	lsls	r3, r3, #4
 803859e:	4413      	add	r3, r2
 80385a0:	681b      	ldr	r3, [r3, #0]
 80385a2:	2b00      	cmp	r3, #0
 80385a4:	d1f2      	bne.n	803858c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80385a6:	687b      	ldr	r3, [r7, #4]
 80385a8:	2b02      	cmp	r3, #2
 80385aa:	bf14      	ite	ne
 80385ac:	2301      	movne	r3, #1
 80385ae:	2300      	moveq	r3, #0
 80385b0:	b2db      	uxtb	r3, r3
}
 80385b2:	4618      	mov	r0, r3
 80385b4:	370c      	adds	r7, #12
 80385b6:	46bd      	mov	sp, r7
 80385b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80385bc:	4770      	bx	lr
 80385be:	bf00      	nop
 80385c0:	20000440 	.word	0x20000440

080385c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80385c4:	b480      	push	{r7}
 80385c6:	b085      	sub	sp, #20
 80385c8:	af00      	add	r7, sp, #0
 80385ca:	6078      	str	r0, [r7, #4]
 80385cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80385ce:	2300      	movs	r3, #0
 80385d0:	60fb      	str	r3, [r7, #12]
 80385d2:	e01f      	b.n	8038614 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80385d4:	4a41      	ldr	r2, [pc, #260]	; (80386dc <inc_lock+0x118>)
 80385d6:	68fb      	ldr	r3, [r7, #12]
 80385d8:	011b      	lsls	r3, r3, #4
 80385da:	4413      	add	r3, r2
 80385dc:	681a      	ldr	r2, [r3, #0]
 80385de:	687b      	ldr	r3, [r7, #4]
 80385e0:	681b      	ldr	r3, [r3, #0]
 80385e2:	429a      	cmp	r2, r3
 80385e4:	d113      	bne.n	803860e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80385e6:	4a3d      	ldr	r2, [pc, #244]	; (80386dc <inc_lock+0x118>)
 80385e8:	68fb      	ldr	r3, [r7, #12]
 80385ea:	011b      	lsls	r3, r3, #4
 80385ec:	4413      	add	r3, r2
 80385ee:	3304      	adds	r3, #4
 80385f0:	681a      	ldr	r2, [r3, #0]
 80385f2:	687b      	ldr	r3, [r7, #4]
 80385f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80385f6:	429a      	cmp	r2, r3
 80385f8:	d109      	bne.n	803860e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80385fa:	4a38      	ldr	r2, [pc, #224]	; (80386dc <inc_lock+0x118>)
 80385fc:	68fb      	ldr	r3, [r7, #12]
 80385fe:	011b      	lsls	r3, r3, #4
 8038600:	4413      	add	r3, r2
 8038602:	3308      	adds	r3, #8
 8038604:	681a      	ldr	r2, [r3, #0]
 8038606:	687b      	ldr	r3, [r7, #4]
 8038608:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 803860a:	429a      	cmp	r2, r3
 803860c:	d006      	beq.n	803861c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 803860e:	68fb      	ldr	r3, [r7, #12]
 8038610:	3301      	adds	r3, #1
 8038612:	60fb      	str	r3, [r7, #12]
 8038614:	68fb      	ldr	r3, [r7, #12]
 8038616:	2b01      	cmp	r3, #1
 8038618:	d9dc      	bls.n	80385d4 <inc_lock+0x10>
 803861a:	e000      	b.n	803861e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 803861c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 803861e:	68fb      	ldr	r3, [r7, #12]
 8038620:	2b02      	cmp	r3, #2
 8038622:	d132      	bne.n	803868a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8038624:	2300      	movs	r3, #0
 8038626:	60fb      	str	r3, [r7, #12]
 8038628:	e002      	b.n	8038630 <inc_lock+0x6c>
 803862a:	68fb      	ldr	r3, [r7, #12]
 803862c:	3301      	adds	r3, #1
 803862e:	60fb      	str	r3, [r7, #12]
 8038630:	68fb      	ldr	r3, [r7, #12]
 8038632:	2b01      	cmp	r3, #1
 8038634:	d806      	bhi.n	8038644 <inc_lock+0x80>
 8038636:	4a29      	ldr	r2, [pc, #164]	; (80386dc <inc_lock+0x118>)
 8038638:	68fb      	ldr	r3, [r7, #12]
 803863a:	011b      	lsls	r3, r3, #4
 803863c:	4413      	add	r3, r2
 803863e:	681b      	ldr	r3, [r3, #0]
 8038640:	2b00      	cmp	r3, #0
 8038642:	d1f2      	bne.n	803862a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8038644:	68fb      	ldr	r3, [r7, #12]
 8038646:	2b02      	cmp	r3, #2
 8038648:	d101      	bne.n	803864e <inc_lock+0x8a>
 803864a:	2300      	movs	r3, #0
 803864c:	e040      	b.n	80386d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 803864e:	687b      	ldr	r3, [r7, #4]
 8038650:	681a      	ldr	r2, [r3, #0]
 8038652:	4922      	ldr	r1, [pc, #136]	; (80386dc <inc_lock+0x118>)
 8038654:	68fb      	ldr	r3, [r7, #12]
 8038656:	011b      	lsls	r3, r3, #4
 8038658:	440b      	add	r3, r1
 803865a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 803865c:	687b      	ldr	r3, [r7, #4]
 803865e:	689a      	ldr	r2, [r3, #8]
 8038660:	491e      	ldr	r1, [pc, #120]	; (80386dc <inc_lock+0x118>)
 8038662:	68fb      	ldr	r3, [r7, #12]
 8038664:	011b      	lsls	r3, r3, #4
 8038666:	440b      	add	r3, r1
 8038668:	3304      	adds	r3, #4
 803866a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 803866c:	687b      	ldr	r3, [r7, #4]
 803866e:	695a      	ldr	r2, [r3, #20]
 8038670:	491a      	ldr	r1, [pc, #104]	; (80386dc <inc_lock+0x118>)
 8038672:	68fb      	ldr	r3, [r7, #12]
 8038674:	011b      	lsls	r3, r3, #4
 8038676:	440b      	add	r3, r1
 8038678:	3308      	adds	r3, #8
 803867a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 803867c:	4a17      	ldr	r2, [pc, #92]	; (80386dc <inc_lock+0x118>)
 803867e:	68fb      	ldr	r3, [r7, #12]
 8038680:	011b      	lsls	r3, r3, #4
 8038682:	4413      	add	r3, r2
 8038684:	330c      	adds	r3, #12
 8038686:	2200      	movs	r2, #0
 8038688:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 803868a:	683b      	ldr	r3, [r7, #0]
 803868c:	2b00      	cmp	r3, #0
 803868e:	d009      	beq.n	80386a4 <inc_lock+0xe0>
 8038690:	4a12      	ldr	r2, [pc, #72]	; (80386dc <inc_lock+0x118>)
 8038692:	68fb      	ldr	r3, [r7, #12]
 8038694:	011b      	lsls	r3, r3, #4
 8038696:	4413      	add	r3, r2
 8038698:	330c      	adds	r3, #12
 803869a:	881b      	ldrh	r3, [r3, #0]
 803869c:	2b00      	cmp	r3, #0
 803869e:	d001      	beq.n	80386a4 <inc_lock+0xe0>
 80386a0:	2300      	movs	r3, #0
 80386a2:	e015      	b.n	80386d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80386a4:	683b      	ldr	r3, [r7, #0]
 80386a6:	2b00      	cmp	r3, #0
 80386a8:	d108      	bne.n	80386bc <inc_lock+0xf8>
 80386aa:	4a0c      	ldr	r2, [pc, #48]	; (80386dc <inc_lock+0x118>)
 80386ac:	68fb      	ldr	r3, [r7, #12]
 80386ae:	011b      	lsls	r3, r3, #4
 80386b0:	4413      	add	r3, r2
 80386b2:	330c      	adds	r3, #12
 80386b4:	881b      	ldrh	r3, [r3, #0]
 80386b6:	3301      	adds	r3, #1
 80386b8:	b29a      	uxth	r2, r3
 80386ba:	e001      	b.n	80386c0 <inc_lock+0xfc>
 80386bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80386c0:	4906      	ldr	r1, [pc, #24]	; (80386dc <inc_lock+0x118>)
 80386c2:	68fb      	ldr	r3, [r7, #12]
 80386c4:	011b      	lsls	r3, r3, #4
 80386c6:	440b      	add	r3, r1
 80386c8:	330c      	adds	r3, #12
 80386ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80386cc:	68fb      	ldr	r3, [r7, #12]
 80386ce:	3301      	adds	r3, #1
}
 80386d0:	4618      	mov	r0, r3
 80386d2:	3714      	adds	r7, #20
 80386d4:	46bd      	mov	sp, r7
 80386d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80386da:	4770      	bx	lr
 80386dc:	20000440 	.word	0x20000440

080386e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80386e0:	b480      	push	{r7}
 80386e2:	b085      	sub	sp, #20
 80386e4:	af00      	add	r7, sp, #0
 80386e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80386e8:	687b      	ldr	r3, [r7, #4]
 80386ea:	3b01      	subs	r3, #1
 80386ec:	607b      	str	r3, [r7, #4]
 80386ee:	687b      	ldr	r3, [r7, #4]
 80386f0:	2b01      	cmp	r3, #1
 80386f2:	d825      	bhi.n	8038740 <dec_lock+0x60>
		n = Files[i].ctr;
 80386f4:	4a17      	ldr	r2, [pc, #92]	; (8038754 <dec_lock+0x74>)
 80386f6:	687b      	ldr	r3, [r7, #4]
 80386f8:	011b      	lsls	r3, r3, #4
 80386fa:	4413      	add	r3, r2
 80386fc:	330c      	adds	r3, #12
 80386fe:	881b      	ldrh	r3, [r3, #0]
 8038700:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8038702:	89fb      	ldrh	r3, [r7, #14]
 8038704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8038708:	d101      	bne.n	803870e <dec_lock+0x2e>
 803870a:	2300      	movs	r3, #0
 803870c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 803870e:	89fb      	ldrh	r3, [r7, #14]
 8038710:	2b00      	cmp	r3, #0
 8038712:	d002      	beq.n	803871a <dec_lock+0x3a>
 8038714:	89fb      	ldrh	r3, [r7, #14]
 8038716:	3b01      	subs	r3, #1
 8038718:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 803871a:	4a0e      	ldr	r2, [pc, #56]	; (8038754 <dec_lock+0x74>)
 803871c:	687b      	ldr	r3, [r7, #4]
 803871e:	011b      	lsls	r3, r3, #4
 8038720:	4413      	add	r3, r2
 8038722:	330c      	adds	r3, #12
 8038724:	89fa      	ldrh	r2, [r7, #14]
 8038726:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8038728:	89fb      	ldrh	r3, [r7, #14]
 803872a:	2b00      	cmp	r3, #0
 803872c:	d105      	bne.n	803873a <dec_lock+0x5a>
 803872e:	4a09      	ldr	r2, [pc, #36]	; (8038754 <dec_lock+0x74>)
 8038730:	687b      	ldr	r3, [r7, #4]
 8038732:	011b      	lsls	r3, r3, #4
 8038734:	4413      	add	r3, r2
 8038736:	2200      	movs	r2, #0
 8038738:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 803873a:	2300      	movs	r3, #0
 803873c:	737b      	strb	r3, [r7, #13]
 803873e:	e001      	b.n	8038744 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8038740:	2302      	movs	r3, #2
 8038742:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8038744:	7b7b      	ldrb	r3, [r7, #13]
}
 8038746:	4618      	mov	r0, r3
 8038748:	3714      	adds	r7, #20
 803874a:	46bd      	mov	sp, r7
 803874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038750:	4770      	bx	lr
 8038752:	bf00      	nop
 8038754:	20000440 	.word	0x20000440

08038758 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8038758:	b480      	push	{r7}
 803875a:	b085      	sub	sp, #20
 803875c:	af00      	add	r7, sp, #0
 803875e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8038760:	2300      	movs	r3, #0
 8038762:	60fb      	str	r3, [r7, #12]
 8038764:	e010      	b.n	8038788 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8038766:	4a0d      	ldr	r2, [pc, #52]	; (803879c <clear_lock+0x44>)
 8038768:	68fb      	ldr	r3, [r7, #12]
 803876a:	011b      	lsls	r3, r3, #4
 803876c:	4413      	add	r3, r2
 803876e:	681b      	ldr	r3, [r3, #0]
 8038770:	687a      	ldr	r2, [r7, #4]
 8038772:	429a      	cmp	r2, r3
 8038774:	d105      	bne.n	8038782 <clear_lock+0x2a>
 8038776:	4a09      	ldr	r2, [pc, #36]	; (803879c <clear_lock+0x44>)
 8038778:	68fb      	ldr	r3, [r7, #12]
 803877a:	011b      	lsls	r3, r3, #4
 803877c:	4413      	add	r3, r2
 803877e:	2200      	movs	r2, #0
 8038780:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8038782:	68fb      	ldr	r3, [r7, #12]
 8038784:	3301      	adds	r3, #1
 8038786:	60fb      	str	r3, [r7, #12]
 8038788:	68fb      	ldr	r3, [r7, #12]
 803878a:	2b01      	cmp	r3, #1
 803878c:	d9eb      	bls.n	8038766 <clear_lock+0xe>
	}
}
 803878e:	bf00      	nop
 8038790:	bf00      	nop
 8038792:	3714      	adds	r7, #20
 8038794:	46bd      	mov	sp, r7
 8038796:	f85d 7b04 	ldr.w	r7, [sp], #4
 803879a:	4770      	bx	lr
 803879c:	20000440 	.word	0x20000440

080387a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80387a0:	b580      	push	{r7, lr}
 80387a2:	b086      	sub	sp, #24
 80387a4:	af00      	add	r7, sp, #0
 80387a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80387a8:	2300      	movs	r3, #0
 80387aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80387ac:	687b      	ldr	r3, [r7, #4]
 80387ae:	78db      	ldrb	r3, [r3, #3]
 80387b0:	2b00      	cmp	r3, #0
 80387b2:	d034      	beq.n	803881e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80387b4:	687b      	ldr	r3, [r7, #4]
 80387b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80387b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80387ba:	687b      	ldr	r3, [r7, #4]
 80387bc:	7858      	ldrb	r0, [r3, #1]
 80387be:	687b      	ldr	r3, [r7, #4]
 80387c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80387c4:	2301      	movs	r3, #1
 80387c6:	697a      	ldr	r2, [r7, #20]
 80387c8:	f7ff fd40 	bl	803824c <disk_write>
 80387cc:	4603      	mov	r3, r0
 80387ce:	2b00      	cmp	r3, #0
 80387d0:	d002      	beq.n	80387d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80387d2:	2301      	movs	r3, #1
 80387d4:	73fb      	strb	r3, [r7, #15]
 80387d6:	e022      	b.n	803881e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80387d8:	687b      	ldr	r3, [r7, #4]
 80387da:	2200      	movs	r2, #0
 80387dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80387de:	687b      	ldr	r3, [r7, #4]
 80387e0:	6a1b      	ldr	r3, [r3, #32]
 80387e2:	697a      	ldr	r2, [r7, #20]
 80387e4:	1ad2      	subs	r2, r2, r3
 80387e6:	687b      	ldr	r3, [r7, #4]
 80387e8:	699b      	ldr	r3, [r3, #24]
 80387ea:	429a      	cmp	r2, r3
 80387ec:	d217      	bcs.n	803881e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80387ee:	687b      	ldr	r3, [r7, #4]
 80387f0:	789b      	ldrb	r3, [r3, #2]
 80387f2:	613b      	str	r3, [r7, #16]
 80387f4:	e010      	b.n	8038818 <sync_window+0x78>
					wsect += fs->fsize;
 80387f6:	687b      	ldr	r3, [r7, #4]
 80387f8:	699b      	ldr	r3, [r3, #24]
 80387fa:	697a      	ldr	r2, [r7, #20]
 80387fc:	4413      	add	r3, r2
 80387fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8038800:	687b      	ldr	r3, [r7, #4]
 8038802:	7858      	ldrb	r0, [r3, #1]
 8038804:	687b      	ldr	r3, [r7, #4]
 8038806:	f103 0130 	add.w	r1, r3, #48	; 0x30
 803880a:	2301      	movs	r3, #1
 803880c:	697a      	ldr	r2, [r7, #20]
 803880e:	f7ff fd1d 	bl	803824c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8038812:	693b      	ldr	r3, [r7, #16]
 8038814:	3b01      	subs	r3, #1
 8038816:	613b      	str	r3, [r7, #16]
 8038818:	693b      	ldr	r3, [r7, #16]
 803881a:	2b01      	cmp	r3, #1
 803881c:	d8eb      	bhi.n	80387f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 803881e:	7bfb      	ldrb	r3, [r7, #15]
}
 8038820:	4618      	mov	r0, r3
 8038822:	3718      	adds	r7, #24
 8038824:	46bd      	mov	sp, r7
 8038826:	bd80      	pop	{r7, pc}

08038828 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8038828:	b580      	push	{r7, lr}
 803882a:	b084      	sub	sp, #16
 803882c:	af00      	add	r7, sp, #0
 803882e:	6078      	str	r0, [r7, #4]
 8038830:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8038832:	2300      	movs	r3, #0
 8038834:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8038836:	687b      	ldr	r3, [r7, #4]
 8038838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803883a:	683a      	ldr	r2, [r7, #0]
 803883c:	429a      	cmp	r2, r3
 803883e:	d01b      	beq.n	8038878 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8038840:	6878      	ldr	r0, [r7, #4]
 8038842:	f7ff ffad 	bl	80387a0 <sync_window>
 8038846:	4603      	mov	r3, r0
 8038848:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 803884a:	7bfb      	ldrb	r3, [r7, #15]
 803884c:	2b00      	cmp	r3, #0
 803884e:	d113      	bne.n	8038878 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8038850:	687b      	ldr	r3, [r7, #4]
 8038852:	7858      	ldrb	r0, [r3, #1]
 8038854:	687b      	ldr	r3, [r7, #4]
 8038856:	f103 0130 	add.w	r1, r3, #48	; 0x30
 803885a:	2301      	movs	r3, #1
 803885c:	683a      	ldr	r2, [r7, #0]
 803885e:	f7ff fcd5 	bl	803820c <disk_read>
 8038862:	4603      	mov	r3, r0
 8038864:	2b00      	cmp	r3, #0
 8038866:	d004      	beq.n	8038872 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8038868:	f04f 33ff 	mov.w	r3, #4294967295
 803886c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 803886e:	2301      	movs	r3, #1
 8038870:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8038872:	687b      	ldr	r3, [r7, #4]
 8038874:	683a      	ldr	r2, [r7, #0]
 8038876:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8038878:	7bfb      	ldrb	r3, [r7, #15]
}
 803887a:	4618      	mov	r0, r3
 803887c:	3710      	adds	r7, #16
 803887e:	46bd      	mov	sp, r7
 8038880:	bd80      	pop	{r7, pc}
	...

08038884 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8038884:	b580      	push	{r7, lr}
 8038886:	b084      	sub	sp, #16
 8038888:	af00      	add	r7, sp, #0
 803888a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 803888c:	6878      	ldr	r0, [r7, #4]
 803888e:	f7ff ff87 	bl	80387a0 <sync_window>
 8038892:	4603      	mov	r3, r0
 8038894:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8038896:	7bfb      	ldrb	r3, [r7, #15]
 8038898:	2b00      	cmp	r3, #0
 803889a:	d158      	bne.n	803894e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 803889c:	687b      	ldr	r3, [r7, #4]
 803889e:	781b      	ldrb	r3, [r3, #0]
 80388a0:	2b03      	cmp	r3, #3
 80388a2:	d148      	bne.n	8038936 <sync_fs+0xb2>
 80388a4:	687b      	ldr	r3, [r7, #4]
 80388a6:	791b      	ldrb	r3, [r3, #4]
 80388a8:	2b01      	cmp	r3, #1
 80388aa:	d144      	bne.n	8038936 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80388ac:	687b      	ldr	r3, [r7, #4]
 80388ae:	3330      	adds	r3, #48	; 0x30
 80388b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80388b4:	2100      	movs	r1, #0
 80388b6:	4618      	mov	r0, r3
 80388b8:	f7ff fda9 	bl	803840e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80388bc:	687b      	ldr	r3, [r7, #4]
 80388be:	3330      	adds	r3, #48	; 0x30
 80388c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80388c4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80388c8:	4618      	mov	r0, r3
 80388ca:	f7ff fd38 	bl	803833e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80388ce:	687b      	ldr	r3, [r7, #4]
 80388d0:	3330      	adds	r3, #48	; 0x30
 80388d2:	4921      	ldr	r1, [pc, #132]	; (8038958 <sync_fs+0xd4>)
 80388d4:	4618      	mov	r0, r3
 80388d6:	f7ff fd4d 	bl	8038374 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80388da:	687b      	ldr	r3, [r7, #4]
 80388dc:	3330      	adds	r3, #48	; 0x30
 80388de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80388e2:	491e      	ldr	r1, [pc, #120]	; (803895c <sync_fs+0xd8>)
 80388e4:	4618      	mov	r0, r3
 80388e6:	f7ff fd45 	bl	8038374 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80388ea:	687b      	ldr	r3, [r7, #4]
 80388ec:	3330      	adds	r3, #48	; 0x30
 80388ee:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80388f2:	687b      	ldr	r3, [r7, #4]
 80388f4:	691b      	ldr	r3, [r3, #16]
 80388f6:	4619      	mov	r1, r3
 80388f8:	4610      	mov	r0, r2
 80388fa:	f7ff fd3b 	bl	8038374 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80388fe:	687b      	ldr	r3, [r7, #4]
 8038900:	3330      	adds	r3, #48	; 0x30
 8038902:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8038906:	687b      	ldr	r3, [r7, #4]
 8038908:	68db      	ldr	r3, [r3, #12]
 803890a:	4619      	mov	r1, r3
 803890c:	4610      	mov	r0, r2
 803890e:	f7ff fd31 	bl	8038374 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8038912:	687b      	ldr	r3, [r7, #4]
 8038914:	69db      	ldr	r3, [r3, #28]
 8038916:	1c5a      	adds	r2, r3, #1
 8038918:	687b      	ldr	r3, [r7, #4]
 803891a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 803891c:	687b      	ldr	r3, [r7, #4]
 803891e:	7858      	ldrb	r0, [r3, #1]
 8038920:	687b      	ldr	r3, [r7, #4]
 8038922:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8038926:	687b      	ldr	r3, [r7, #4]
 8038928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803892a:	2301      	movs	r3, #1
 803892c:	f7ff fc8e 	bl	803824c <disk_write>
			fs->fsi_flag = 0;
 8038930:	687b      	ldr	r3, [r7, #4]
 8038932:	2200      	movs	r2, #0
 8038934:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8038936:	687b      	ldr	r3, [r7, #4]
 8038938:	785b      	ldrb	r3, [r3, #1]
 803893a:	2200      	movs	r2, #0
 803893c:	2100      	movs	r1, #0
 803893e:	4618      	mov	r0, r3
 8038940:	f7ff fca4 	bl	803828c <disk_ioctl>
 8038944:	4603      	mov	r3, r0
 8038946:	2b00      	cmp	r3, #0
 8038948:	d001      	beq.n	803894e <sync_fs+0xca>
 803894a:	2301      	movs	r3, #1
 803894c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 803894e:	7bfb      	ldrb	r3, [r7, #15]
}
 8038950:	4618      	mov	r0, r3
 8038952:	3710      	adds	r7, #16
 8038954:	46bd      	mov	sp, r7
 8038956:	bd80      	pop	{r7, pc}
 8038958:	41615252 	.word	0x41615252
 803895c:	61417272 	.word	0x61417272

08038960 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8038960:	b480      	push	{r7}
 8038962:	b083      	sub	sp, #12
 8038964:	af00      	add	r7, sp, #0
 8038966:	6078      	str	r0, [r7, #4]
 8038968:	6039      	str	r1, [r7, #0]
	clst -= 2;
 803896a:	683b      	ldr	r3, [r7, #0]
 803896c:	3b02      	subs	r3, #2
 803896e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8038970:	687b      	ldr	r3, [r7, #4]
 8038972:	695b      	ldr	r3, [r3, #20]
 8038974:	3b02      	subs	r3, #2
 8038976:	683a      	ldr	r2, [r7, #0]
 8038978:	429a      	cmp	r2, r3
 803897a:	d301      	bcc.n	8038980 <clust2sect+0x20>
 803897c:	2300      	movs	r3, #0
 803897e:	e008      	b.n	8038992 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8038980:	687b      	ldr	r3, [r7, #4]
 8038982:	895b      	ldrh	r3, [r3, #10]
 8038984:	461a      	mov	r2, r3
 8038986:	683b      	ldr	r3, [r7, #0]
 8038988:	fb03 f202 	mul.w	r2, r3, r2
 803898c:	687b      	ldr	r3, [r7, #4]
 803898e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8038990:	4413      	add	r3, r2
}
 8038992:	4618      	mov	r0, r3
 8038994:	370c      	adds	r7, #12
 8038996:	46bd      	mov	sp, r7
 8038998:	f85d 7b04 	ldr.w	r7, [sp], #4
 803899c:	4770      	bx	lr

0803899e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 803899e:	b580      	push	{r7, lr}
 80389a0:	b086      	sub	sp, #24
 80389a2:	af00      	add	r7, sp, #0
 80389a4:	6078      	str	r0, [r7, #4]
 80389a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80389a8:	687b      	ldr	r3, [r7, #4]
 80389aa:	681b      	ldr	r3, [r3, #0]
 80389ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80389ae:	683b      	ldr	r3, [r7, #0]
 80389b0:	2b01      	cmp	r3, #1
 80389b2:	d904      	bls.n	80389be <get_fat+0x20>
 80389b4:	693b      	ldr	r3, [r7, #16]
 80389b6:	695b      	ldr	r3, [r3, #20]
 80389b8:	683a      	ldr	r2, [r7, #0]
 80389ba:	429a      	cmp	r2, r3
 80389bc:	d302      	bcc.n	80389c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80389be:	2301      	movs	r3, #1
 80389c0:	617b      	str	r3, [r7, #20]
 80389c2:	e08f      	b.n	8038ae4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80389c4:	f04f 33ff 	mov.w	r3, #4294967295
 80389c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80389ca:	693b      	ldr	r3, [r7, #16]
 80389cc:	781b      	ldrb	r3, [r3, #0]
 80389ce:	2b03      	cmp	r3, #3
 80389d0:	d062      	beq.n	8038a98 <get_fat+0xfa>
 80389d2:	2b03      	cmp	r3, #3
 80389d4:	dc7c      	bgt.n	8038ad0 <get_fat+0x132>
 80389d6:	2b01      	cmp	r3, #1
 80389d8:	d002      	beq.n	80389e0 <get_fat+0x42>
 80389da:	2b02      	cmp	r3, #2
 80389dc:	d042      	beq.n	8038a64 <get_fat+0xc6>
 80389de:	e077      	b.n	8038ad0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80389e0:	683b      	ldr	r3, [r7, #0]
 80389e2:	60fb      	str	r3, [r7, #12]
 80389e4:	68fb      	ldr	r3, [r7, #12]
 80389e6:	085b      	lsrs	r3, r3, #1
 80389e8:	68fa      	ldr	r2, [r7, #12]
 80389ea:	4413      	add	r3, r2
 80389ec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80389ee:	693b      	ldr	r3, [r7, #16]
 80389f0:	6a1a      	ldr	r2, [r3, #32]
 80389f2:	68fb      	ldr	r3, [r7, #12]
 80389f4:	0a5b      	lsrs	r3, r3, #9
 80389f6:	4413      	add	r3, r2
 80389f8:	4619      	mov	r1, r3
 80389fa:	6938      	ldr	r0, [r7, #16]
 80389fc:	f7ff ff14 	bl	8038828 <move_window>
 8038a00:	4603      	mov	r3, r0
 8038a02:	2b00      	cmp	r3, #0
 8038a04:	d167      	bne.n	8038ad6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8038a06:	68fb      	ldr	r3, [r7, #12]
 8038a08:	1c5a      	adds	r2, r3, #1
 8038a0a:	60fa      	str	r2, [r7, #12]
 8038a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8038a10:	693a      	ldr	r2, [r7, #16]
 8038a12:	4413      	add	r3, r2
 8038a14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8038a18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8038a1a:	693b      	ldr	r3, [r7, #16]
 8038a1c:	6a1a      	ldr	r2, [r3, #32]
 8038a1e:	68fb      	ldr	r3, [r7, #12]
 8038a20:	0a5b      	lsrs	r3, r3, #9
 8038a22:	4413      	add	r3, r2
 8038a24:	4619      	mov	r1, r3
 8038a26:	6938      	ldr	r0, [r7, #16]
 8038a28:	f7ff fefe 	bl	8038828 <move_window>
 8038a2c:	4603      	mov	r3, r0
 8038a2e:	2b00      	cmp	r3, #0
 8038a30:	d153      	bne.n	8038ada <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8038a32:	68fb      	ldr	r3, [r7, #12]
 8038a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8038a38:	693a      	ldr	r2, [r7, #16]
 8038a3a:	4413      	add	r3, r2
 8038a3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8038a40:	021b      	lsls	r3, r3, #8
 8038a42:	461a      	mov	r2, r3
 8038a44:	68bb      	ldr	r3, [r7, #8]
 8038a46:	4313      	orrs	r3, r2
 8038a48:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8038a4a:	683b      	ldr	r3, [r7, #0]
 8038a4c:	f003 0301 	and.w	r3, r3, #1
 8038a50:	2b00      	cmp	r3, #0
 8038a52:	d002      	beq.n	8038a5a <get_fat+0xbc>
 8038a54:	68bb      	ldr	r3, [r7, #8]
 8038a56:	091b      	lsrs	r3, r3, #4
 8038a58:	e002      	b.n	8038a60 <get_fat+0xc2>
 8038a5a:	68bb      	ldr	r3, [r7, #8]
 8038a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8038a60:	617b      	str	r3, [r7, #20]
			break;
 8038a62:	e03f      	b.n	8038ae4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8038a64:	693b      	ldr	r3, [r7, #16]
 8038a66:	6a1a      	ldr	r2, [r3, #32]
 8038a68:	683b      	ldr	r3, [r7, #0]
 8038a6a:	0a1b      	lsrs	r3, r3, #8
 8038a6c:	4413      	add	r3, r2
 8038a6e:	4619      	mov	r1, r3
 8038a70:	6938      	ldr	r0, [r7, #16]
 8038a72:	f7ff fed9 	bl	8038828 <move_window>
 8038a76:	4603      	mov	r3, r0
 8038a78:	2b00      	cmp	r3, #0
 8038a7a:	d130      	bne.n	8038ade <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8038a7c:	693b      	ldr	r3, [r7, #16]
 8038a7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8038a82:	683b      	ldr	r3, [r7, #0]
 8038a84:	005b      	lsls	r3, r3, #1
 8038a86:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8038a8a:	4413      	add	r3, r2
 8038a8c:	4618      	mov	r0, r3
 8038a8e:	f7ff fc1b 	bl	80382c8 <ld_word>
 8038a92:	4603      	mov	r3, r0
 8038a94:	617b      	str	r3, [r7, #20]
			break;
 8038a96:	e025      	b.n	8038ae4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8038a98:	693b      	ldr	r3, [r7, #16]
 8038a9a:	6a1a      	ldr	r2, [r3, #32]
 8038a9c:	683b      	ldr	r3, [r7, #0]
 8038a9e:	09db      	lsrs	r3, r3, #7
 8038aa0:	4413      	add	r3, r2
 8038aa2:	4619      	mov	r1, r3
 8038aa4:	6938      	ldr	r0, [r7, #16]
 8038aa6:	f7ff febf 	bl	8038828 <move_window>
 8038aaa:	4603      	mov	r3, r0
 8038aac:	2b00      	cmp	r3, #0
 8038aae:	d118      	bne.n	8038ae2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8038ab0:	693b      	ldr	r3, [r7, #16]
 8038ab2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8038ab6:	683b      	ldr	r3, [r7, #0]
 8038ab8:	009b      	lsls	r3, r3, #2
 8038aba:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8038abe:	4413      	add	r3, r2
 8038ac0:	4618      	mov	r0, r3
 8038ac2:	f7ff fc19 	bl	80382f8 <ld_dword>
 8038ac6:	4603      	mov	r3, r0
 8038ac8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8038acc:	617b      	str	r3, [r7, #20]
			break;
 8038ace:	e009      	b.n	8038ae4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8038ad0:	2301      	movs	r3, #1
 8038ad2:	617b      	str	r3, [r7, #20]
 8038ad4:	e006      	b.n	8038ae4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8038ad6:	bf00      	nop
 8038ad8:	e004      	b.n	8038ae4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8038ada:	bf00      	nop
 8038adc:	e002      	b.n	8038ae4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8038ade:	bf00      	nop
 8038ae0:	e000      	b.n	8038ae4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8038ae2:	bf00      	nop
		}
	}

	return val;
 8038ae4:	697b      	ldr	r3, [r7, #20]
}
 8038ae6:	4618      	mov	r0, r3
 8038ae8:	3718      	adds	r7, #24
 8038aea:	46bd      	mov	sp, r7
 8038aec:	bd80      	pop	{r7, pc}

08038aee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8038aee:	b590      	push	{r4, r7, lr}
 8038af0:	b089      	sub	sp, #36	; 0x24
 8038af2:	af00      	add	r7, sp, #0
 8038af4:	60f8      	str	r0, [r7, #12]
 8038af6:	60b9      	str	r1, [r7, #8]
 8038af8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8038afa:	2302      	movs	r3, #2
 8038afc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8038afe:	68bb      	ldr	r3, [r7, #8]
 8038b00:	2b01      	cmp	r3, #1
 8038b02:	f240 80d2 	bls.w	8038caa <put_fat+0x1bc>
 8038b06:	68fb      	ldr	r3, [r7, #12]
 8038b08:	695b      	ldr	r3, [r3, #20]
 8038b0a:	68ba      	ldr	r2, [r7, #8]
 8038b0c:	429a      	cmp	r2, r3
 8038b0e:	f080 80cc 	bcs.w	8038caa <put_fat+0x1bc>
		switch (fs->fs_type) {
 8038b12:	68fb      	ldr	r3, [r7, #12]
 8038b14:	781b      	ldrb	r3, [r3, #0]
 8038b16:	2b03      	cmp	r3, #3
 8038b18:	f000 8096 	beq.w	8038c48 <put_fat+0x15a>
 8038b1c:	2b03      	cmp	r3, #3
 8038b1e:	f300 80cd 	bgt.w	8038cbc <put_fat+0x1ce>
 8038b22:	2b01      	cmp	r3, #1
 8038b24:	d002      	beq.n	8038b2c <put_fat+0x3e>
 8038b26:	2b02      	cmp	r3, #2
 8038b28:	d06e      	beq.n	8038c08 <put_fat+0x11a>
 8038b2a:	e0c7      	b.n	8038cbc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8038b2c:	68bb      	ldr	r3, [r7, #8]
 8038b2e:	61bb      	str	r3, [r7, #24]
 8038b30:	69bb      	ldr	r3, [r7, #24]
 8038b32:	085b      	lsrs	r3, r3, #1
 8038b34:	69ba      	ldr	r2, [r7, #24]
 8038b36:	4413      	add	r3, r2
 8038b38:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8038b3a:	68fb      	ldr	r3, [r7, #12]
 8038b3c:	6a1a      	ldr	r2, [r3, #32]
 8038b3e:	69bb      	ldr	r3, [r7, #24]
 8038b40:	0a5b      	lsrs	r3, r3, #9
 8038b42:	4413      	add	r3, r2
 8038b44:	4619      	mov	r1, r3
 8038b46:	68f8      	ldr	r0, [r7, #12]
 8038b48:	f7ff fe6e 	bl	8038828 <move_window>
 8038b4c:	4603      	mov	r3, r0
 8038b4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8038b50:	7ffb      	ldrb	r3, [r7, #31]
 8038b52:	2b00      	cmp	r3, #0
 8038b54:	f040 80ab 	bne.w	8038cae <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8038b58:	68fb      	ldr	r3, [r7, #12]
 8038b5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8038b5e:	69bb      	ldr	r3, [r7, #24]
 8038b60:	1c59      	adds	r1, r3, #1
 8038b62:	61b9      	str	r1, [r7, #24]
 8038b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8038b68:	4413      	add	r3, r2
 8038b6a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8038b6c:	68bb      	ldr	r3, [r7, #8]
 8038b6e:	f003 0301 	and.w	r3, r3, #1
 8038b72:	2b00      	cmp	r3, #0
 8038b74:	d00d      	beq.n	8038b92 <put_fat+0xa4>
 8038b76:	697b      	ldr	r3, [r7, #20]
 8038b78:	781b      	ldrb	r3, [r3, #0]
 8038b7a:	b25b      	sxtb	r3, r3
 8038b7c:	f003 030f 	and.w	r3, r3, #15
 8038b80:	b25a      	sxtb	r2, r3
 8038b82:	687b      	ldr	r3, [r7, #4]
 8038b84:	b2db      	uxtb	r3, r3
 8038b86:	011b      	lsls	r3, r3, #4
 8038b88:	b25b      	sxtb	r3, r3
 8038b8a:	4313      	orrs	r3, r2
 8038b8c:	b25b      	sxtb	r3, r3
 8038b8e:	b2db      	uxtb	r3, r3
 8038b90:	e001      	b.n	8038b96 <put_fat+0xa8>
 8038b92:	687b      	ldr	r3, [r7, #4]
 8038b94:	b2db      	uxtb	r3, r3
 8038b96:	697a      	ldr	r2, [r7, #20]
 8038b98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8038b9a:	68fb      	ldr	r3, [r7, #12]
 8038b9c:	2201      	movs	r2, #1
 8038b9e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8038ba0:	68fb      	ldr	r3, [r7, #12]
 8038ba2:	6a1a      	ldr	r2, [r3, #32]
 8038ba4:	69bb      	ldr	r3, [r7, #24]
 8038ba6:	0a5b      	lsrs	r3, r3, #9
 8038ba8:	4413      	add	r3, r2
 8038baa:	4619      	mov	r1, r3
 8038bac:	68f8      	ldr	r0, [r7, #12]
 8038bae:	f7ff fe3b 	bl	8038828 <move_window>
 8038bb2:	4603      	mov	r3, r0
 8038bb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8038bb6:	7ffb      	ldrb	r3, [r7, #31]
 8038bb8:	2b00      	cmp	r3, #0
 8038bba:	d17a      	bne.n	8038cb2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8038bbc:	68fb      	ldr	r3, [r7, #12]
 8038bbe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8038bc2:	69bb      	ldr	r3, [r7, #24]
 8038bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8038bc8:	4413      	add	r3, r2
 8038bca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8038bcc:	68bb      	ldr	r3, [r7, #8]
 8038bce:	f003 0301 	and.w	r3, r3, #1
 8038bd2:	2b00      	cmp	r3, #0
 8038bd4:	d003      	beq.n	8038bde <put_fat+0xf0>
 8038bd6:	687b      	ldr	r3, [r7, #4]
 8038bd8:	091b      	lsrs	r3, r3, #4
 8038bda:	b2db      	uxtb	r3, r3
 8038bdc:	e00e      	b.n	8038bfc <put_fat+0x10e>
 8038bde:	697b      	ldr	r3, [r7, #20]
 8038be0:	781b      	ldrb	r3, [r3, #0]
 8038be2:	b25b      	sxtb	r3, r3
 8038be4:	f023 030f 	bic.w	r3, r3, #15
 8038be8:	b25a      	sxtb	r2, r3
 8038bea:	687b      	ldr	r3, [r7, #4]
 8038bec:	0a1b      	lsrs	r3, r3, #8
 8038bee:	b25b      	sxtb	r3, r3
 8038bf0:	f003 030f 	and.w	r3, r3, #15
 8038bf4:	b25b      	sxtb	r3, r3
 8038bf6:	4313      	orrs	r3, r2
 8038bf8:	b25b      	sxtb	r3, r3
 8038bfa:	b2db      	uxtb	r3, r3
 8038bfc:	697a      	ldr	r2, [r7, #20]
 8038bfe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8038c00:	68fb      	ldr	r3, [r7, #12]
 8038c02:	2201      	movs	r2, #1
 8038c04:	70da      	strb	r2, [r3, #3]
			break;
 8038c06:	e059      	b.n	8038cbc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8038c08:	68fb      	ldr	r3, [r7, #12]
 8038c0a:	6a1a      	ldr	r2, [r3, #32]
 8038c0c:	68bb      	ldr	r3, [r7, #8]
 8038c0e:	0a1b      	lsrs	r3, r3, #8
 8038c10:	4413      	add	r3, r2
 8038c12:	4619      	mov	r1, r3
 8038c14:	68f8      	ldr	r0, [r7, #12]
 8038c16:	f7ff fe07 	bl	8038828 <move_window>
 8038c1a:	4603      	mov	r3, r0
 8038c1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8038c1e:	7ffb      	ldrb	r3, [r7, #31]
 8038c20:	2b00      	cmp	r3, #0
 8038c22:	d148      	bne.n	8038cb6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8038c24:	68fb      	ldr	r3, [r7, #12]
 8038c26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8038c2a:	68bb      	ldr	r3, [r7, #8]
 8038c2c:	005b      	lsls	r3, r3, #1
 8038c2e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8038c32:	4413      	add	r3, r2
 8038c34:	687a      	ldr	r2, [r7, #4]
 8038c36:	b292      	uxth	r2, r2
 8038c38:	4611      	mov	r1, r2
 8038c3a:	4618      	mov	r0, r3
 8038c3c:	f7ff fb7f 	bl	803833e <st_word>
			fs->wflag = 1;
 8038c40:	68fb      	ldr	r3, [r7, #12]
 8038c42:	2201      	movs	r2, #1
 8038c44:	70da      	strb	r2, [r3, #3]
			break;
 8038c46:	e039      	b.n	8038cbc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8038c48:	68fb      	ldr	r3, [r7, #12]
 8038c4a:	6a1a      	ldr	r2, [r3, #32]
 8038c4c:	68bb      	ldr	r3, [r7, #8]
 8038c4e:	09db      	lsrs	r3, r3, #7
 8038c50:	4413      	add	r3, r2
 8038c52:	4619      	mov	r1, r3
 8038c54:	68f8      	ldr	r0, [r7, #12]
 8038c56:	f7ff fde7 	bl	8038828 <move_window>
 8038c5a:	4603      	mov	r3, r0
 8038c5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8038c5e:	7ffb      	ldrb	r3, [r7, #31]
 8038c60:	2b00      	cmp	r3, #0
 8038c62:	d12a      	bne.n	8038cba <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8038c64:	687b      	ldr	r3, [r7, #4]
 8038c66:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8038c6a:	68fb      	ldr	r3, [r7, #12]
 8038c6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8038c70:	68bb      	ldr	r3, [r7, #8]
 8038c72:	009b      	lsls	r3, r3, #2
 8038c74:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8038c78:	4413      	add	r3, r2
 8038c7a:	4618      	mov	r0, r3
 8038c7c:	f7ff fb3c 	bl	80382f8 <ld_dword>
 8038c80:	4603      	mov	r3, r0
 8038c82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8038c86:	4323      	orrs	r3, r4
 8038c88:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8038c8a:	68fb      	ldr	r3, [r7, #12]
 8038c8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8038c90:	68bb      	ldr	r3, [r7, #8]
 8038c92:	009b      	lsls	r3, r3, #2
 8038c94:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8038c98:	4413      	add	r3, r2
 8038c9a:	6879      	ldr	r1, [r7, #4]
 8038c9c:	4618      	mov	r0, r3
 8038c9e:	f7ff fb69 	bl	8038374 <st_dword>
			fs->wflag = 1;
 8038ca2:	68fb      	ldr	r3, [r7, #12]
 8038ca4:	2201      	movs	r2, #1
 8038ca6:	70da      	strb	r2, [r3, #3]
			break;
 8038ca8:	e008      	b.n	8038cbc <put_fat+0x1ce>
		}
	}
 8038caa:	bf00      	nop
 8038cac:	e006      	b.n	8038cbc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8038cae:	bf00      	nop
 8038cb0:	e004      	b.n	8038cbc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8038cb2:	bf00      	nop
 8038cb4:	e002      	b.n	8038cbc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8038cb6:	bf00      	nop
 8038cb8:	e000      	b.n	8038cbc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8038cba:	bf00      	nop
	return res;
 8038cbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8038cbe:	4618      	mov	r0, r3
 8038cc0:	3724      	adds	r7, #36	; 0x24
 8038cc2:	46bd      	mov	sp, r7
 8038cc4:	bd90      	pop	{r4, r7, pc}

08038cc6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8038cc6:	b580      	push	{r7, lr}
 8038cc8:	b088      	sub	sp, #32
 8038cca:	af00      	add	r7, sp, #0
 8038ccc:	60f8      	str	r0, [r7, #12]
 8038cce:	60b9      	str	r1, [r7, #8]
 8038cd0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8038cd2:	2300      	movs	r3, #0
 8038cd4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8038cd6:	68fb      	ldr	r3, [r7, #12]
 8038cd8:	681b      	ldr	r3, [r3, #0]
 8038cda:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8038cdc:	68bb      	ldr	r3, [r7, #8]
 8038cde:	2b01      	cmp	r3, #1
 8038ce0:	d904      	bls.n	8038cec <remove_chain+0x26>
 8038ce2:	69bb      	ldr	r3, [r7, #24]
 8038ce4:	695b      	ldr	r3, [r3, #20]
 8038ce6:	68ba      	ldr	r2, [r7, #8]
 8038ce8:	429a      	cmp	r2, r3
 8038cea:	d301      	bcc.n	8038cf0 <remove_chain+0x2a>
 8038cec:	2302      	movs	r3, #2
 8038cee:	e04b      	b.n	8038d88 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8038cf0:	687b      	ldr	r3, [r7, #4]
 8038cf2:	2b00      	cmp	r3, #0
 8038cf4:	d00c      	beq.n	8038d10 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8038cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8038cfa:	6879      	ldr	r1, [r7, #4]
 8038cfc:	69b8      	ldr	r0, [r7, #24]
 8038cfe:	f7ff fef6 	bl	8038aee <put_fat>
 8038d02:	4603      	mov	r3, r0
 8038d04:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8038d06:	7ffb      	ldrb	r3, [r7, #31]
 8038d08:	2b00      	cmp	r3, #0
 8038d0a:	d001      	beq.n	8038d10 <remove_chain+0x4a>
 8038d0c:	7ffb      	ldrb	r3, [r7, #31]
 8038d0e:	e03b      	b.n	8038d88 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8038d10:	68b9      	ldr	r1, [r7, #8]
 8038d12:	68f8      	ldr	r0, [r7, #12]
 8038d14:	f7ff fe43 	bl	803899e <get_fat>
 8038d18:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8038d1a:	697b      	ldr	r3, [r7, #20]
 8038d1c:	2b00      	cmp	r3, #0
 8038d1e:	d031      	beq.n	8038d84 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8038d20:	697b      	ldr	r3, [r7, #20]
 8038d22:	2b01      	cmp	r3, #1
 8038d24:	d101      	bne.n	8038d2a <remove_chain+0x64>
 8038d26:	2302      	movs	r3, #2
 8038d28:	e02e      	b.n	8038d88 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8038d2a:	697b      	ldr	r3, [r7, #20]
 8038d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8038d30:	d101      	bne.n	8038d36 <remove_chain+0x70>
 8038d32:	2301      	movs	r3, #1
 8038d34:	e028      	b.n	8038d88 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8038d36:	2200      	movs	r2, #0
 8038d38:	68b9      	ldr	r1, [r7, #8]
 8038d3a:	69b8      	ldr	r0, [r7, #24]
 8038d3c:	f7ff fed7 	bl	8038aee <put_fat>
 8038d40:	4603      	mov	r3, r0
 8038d42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8038d44:	7ffb      	ldrb	r3, [r7, #31]
 8038d46:	2b00      	cmp	r3, #0
 8038d48:	d001      	beq.n	8038d4e <remove_chain+0x88>
 8038d4a:	7ffb      	ldrb	r3, [r7, #31]
 8038d4c:	e01c      	b.n	8038d88 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8038d4e:	69bb      	ldr	r3, [r7, #24]
 8038d50:	691a      	ldr	r2, [r3, #16]
 8038d52:	69bb      	ldr	r3, [r7, #24]
 8038d54:	695b      	ldr	r3, [r3, #20]
 8038d56:	3b02      	subs	r3, #2
 8038d58:	429a      	cmp	r2, r3
 8038d5a:	d20b      	bcs.n	8038d74 <remove_chain+0xae>
			fs->free_clst++;
 8038d5c:	69bb      	ldr	r3, [r7, #24]
 8038d5e:	691b      	ldr	r3, [r3, #16]
 8038d60:	1c5a      	adds	r2, r3, #1
 8038d62:	69bb      	ldr	r3, [r7, #24]
 8038d64:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8038d66:	69bb      	ldr	r3, [r7, #24]
 8038d68:	791b      	ldrb	r3, [r3, #4]
 8038d6a:	f043 0301 	orr.w	r3, r3, #1
 8038d6e:	b2da      	uxtb	r2, r3
 8038d70:	69bb      	ldr	r3, [r7, #24]
 8038d72:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8038d74:	697b      	ldr	r3, [r7, #20]
 8038d76:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8038d78:	69bb      	ldr	r3, [r7, #24]
 8038d7a:	695b      	ldr	r3, [r3, #20]
 8038d7c:	68ba      	ldr	r2, [r7, #8]
 8038d7e:	429a      	cmp	r2, r3
 8038d80:	d3c6      	bcc.n	8038d10 <remove_chain+0x4a>
 8038d82:	e000      	b.n	8038d86 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8038d84:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8038d86:	2300      	movs	r3, #0
}
 8038d88:	4618      	mov	r0, r3
 8038d8a:	3720      	adds	r7, #32
 8038d8c:	46bd      	mov	sp, r7
 8038d8e:	bd80      	pop	{r7, pc}

08038d90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8038d90:	b580      	push	{r7, lr}
 8038d92:	b088      	sub	sp, #32
 8038d94:	af00      	add	r7, sp, #0
 8038d96:	6078      	str	r0, [r7, #4]
 8038d98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8038d9a:	687b      	ldr	r3, [r7, #4]
 8038d9c:	681b      	ldr	r3, [r3, #0]
 8038d9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8038da0:	683b      	ldr	r3, [r7, #0]
 8038da2:	2b00      	cmp	r3, #0
 8038da4:	d10d      	bne.n	8038dc2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8038da6:	693b      	ldr	r3, [r7, #16]
 8038da8:	68db      	ldr	r3, [r3, #12]
 8038daa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8038dac:	69bb      	ldr	r3, [r7, #24]
 8038dae:	2b00      	cmp	r3, #0
 8038db0:	d004      	beq.n	8038dbc <create_chain+0x2c>
 8038db2:	693b      	ldr	r3, [r7, #16]
 8038db4:	695b      	ldr	r3, [r3, #20]
 8038db6:	69ba      	ldr	r2, [r7, #24]
 8038db8:	429a      	cmp	r2, r3
 8038dba:	d31b      	bcc.n	8038df4 <create_chain+0x64>
 8038dbc:	2301      	movs	r3, #1
 8038dbe:	61bb      	str	r3, [r7, #24]
 8038dc0:	e018      	b.n	8038df4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8038dc2:	6839      	ldr	r1, [r7, #0]
 8038dc4:	6878      	ldr	r0, [r7, #4]
 8038dc6:	f7ff fdea 	bl	803899e <get_fat>
 8038dca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8038dcc:	68fb      	ldr	r3, [r7, #12]
 8038dce:	2b01      	cmp	r3, #1
 8038dd0:	d801      	bhi.n	8038dd6 <create_chain+0x46>
 8038dd2:	2301      	movs	r3, #1
 8038dd4:	e070      	b.n	8038eb8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8038dd6:	68fb      	ldr	r3, [r7, #12]
 8038dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8038ddc:	d101      	bne.n	8038de2 <create_chain+0x52>
 8038dde:	68fb      	ldr	r3, [r7, #12]
 8038de0:	e06a      	b.n	8038eb8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8038de2:	693b      	ldr	r3, [r7, #16]
 8038de4:	695b      	ldr	r3, [r3, #20]
 8038de6:	68fa      	ldr	r2, [r7, #12]
 8038de8:	429a      	cmp	r2, r3
 8038dea:	d201      	bcs.n	8038df0 <create_chain+0x60>
 8038dec:	68fb      	ldr	r3, [r7, #12]
 8038dee:	e063      	b.n	8038eb8 <create_chain+0x128>
		scl = clst;
 8038df0:	683b      	ldr	r3, [r7, #0]
 8038df2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8038df4:	69bb      	ldr	r3, [r7, #24]
 8038df6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8038df8:	69fb      	ldr	r3, [r7, #28]
 8038dfa:	3301      	adds	r3, #1
 8038dfc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8038dfe:	693b      	ldr	r3, [r7, #16]
 8038e00:	695b      	ldr	r3, [r3, #20]
 8038e02:	69fa      	ldr	r2, [r7, #28]
 8038e04:	429a      	cmp	r2, r3
 8038e06:	d307      	bcc.n	8038e18 <create_chain+0x88>
				ncl = 2;
 8038e08:	2302      	movs	r3, #2
 8038e0a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8038e0c:	69fa      	ldr	r2, [r7, #28]
 8038e0e:	69bb      	ldr	r3, [r7, #24]
 8038e10:	429a      	cmp	r2, r3
 8038e12:	d901      	bls.n	8038e18 <create_chain+0x88>
 8038e14:	2300      	movs	r3, #0
 8038e16:	e04f      	b.n	8038eb8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8038e18:	69f9      	ldr	r1, [r7, #28]
 8038e1a:	6878      	ldr	r0, [r7, #4]
 8038e1c:	f7ff fdbf 	bl	803899e <get_fat>
 8038e20:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8038e22:	68fb      	ldr	r3, [r7, #12]
 8038e24:	2b00      	cmp	r3, #0
 8038e26:	d00e      	beq.n	8038e46 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8038e28:	68fb      	ldr	r3, [r7, #12]
 8038e2a:	2b01      	cmp	r3, #1
 8038e2c:	d003      	beq.n	8038e36 <create_chain+0xa6>
 8038e2e:	68fb      	ldr	r3, [r7, #12]
 8038e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8038e34:	d101      	bne.n	8038e3a <create_chain+0xaa>
 8038e36:	68fb      	ldr	r3, [r7, #12]
 8038e38:	e03e      	b.n	8038eb8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8038e3a:	69fa      	ldr	r2, [r7, #28]
 8038e3c:	69bb      	ldr	r3, [r7, #24]
 8038e3e:	429a      	cmp	r2, r3
 8038e40:	d1da      	bne.n	8038df8 <create_chain+0x68>
 8038e42:	2300      	movs	r3, #0
 8038e44:	e038      	b.n	8038eb8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8038e46:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8038e48:	f04f 32ff 	mov.w	r2, #4294967295
 8038e4c:	69f9      	ldr	r1, [r7, #28]
 8038e4e:	6938      	ldr	r0, [r7, #16]
 8038e50:	f7ff fe4d 	bl	8038aee <put_fat>
 8038e54:	4603      	mov	r3, r0
 8038e56:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8038e58:	7dfb      	ldrb	r3, [r7, #23]
 8038e5a:	2b00      	cmp	r3, #0
 8038e5c:	d109      	bne.n	8038e72 <create_chain+0xe2>
 8038e5e:	683b      	ldr	r3, [r7, #0]
 8038e60:	2b00      	cmp	r3, #0
 8038e62:	d006      	beq.n	8038e72 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8038e64:	69fa      	ldr	r2, [r7, #28]
 8038e66:	6839      	ldr	r1, [r7, #0]
 8038e68:	6938      	ldr	r0, [r7, #16]
 8038e6a:	f7ff fe40 	bl	8038aee <put_fat>
 8038e6e:	4603      	mov	r3, r0
 8038e70:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8038e72:	7dfb      	ldrb	r3, [r7, #23]
 8038e74:	2b00      	cmp	r3, #0
 8038e76:	d116      	bne.n	8038ea6 <create_chain+0x116>
		fs->last_clst = ncl;
 8038e78:	693b      	ldr	r3, [r7, #16]
 8038e7a:	69fa      	ldr	r2, [r7, #28]
 8038e7c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8038e7e:	693b      	ldr	r3, [r7, #16]
 8038e80:	691a      	ldr	r2, [r3, #16]
 8038e82:	693b      	ldr	r3, [r7, #16]
 8038e84:	695b      	ldr	r3, [r3, #20]
 8038e86:	3b02      	subs	r3, #2
 8038e88:	429a      	cmp	r2, r3
 8038e8a:	d804      	bhi.n	8038e96 <create_chain+0x106>
 8038e8c:	693b      	ldr	r3, [r7, #16]
 8038e8e:	691b      	ldr	r3, [r3, #16]
 8038e90:	1e5a      	subs	r2, r3, #1
 8038e92:	693b      	ldr	r3, [r7, #16]
 8038e94:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8038e96:	693b      	ldr	r3, [r7, #16]
 8038e98:	791b      	ldrb	r3, [r3, #4]
 8038e9a:	f043 0301 	orr.w	r3, r3, #1
 8038e9e:	b2da      	uxtb	r2, r3
 8038ea0:	693b      	ldr	r3, [r7, #16]
 8038ea2:	711a      	strb	r2, [r3, #4]
 8038ea4:	e007      	b.n	8038eb6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8038ea6:	7dfb      	ldrb	r3, [r7, #23]
 8038ea8:	2b01      	cmp	r3, #1
 8038eaa:	d102      	bne.n	8038eb2 <create_chain+0x122>
 8038eac:	f04f 33ff 	mov.w	r3, #4294967295
 8038eb0:	e000      	b.n	8038eb4 <create_chain+0x124>
 8038eb2:	2301      	movs	r3, #1
 8038eb4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8038eb6:	69fb      	ldr	r3, [r7, #28]
}
 8038eb8:	4618      	mov	r0, r3
 8038eba:	3720      	adds	r7, #32
 8038ebc:	46bd      	mov	sp, r7
 8038ebe:	bd80      	pop	{r7, pc}

08038ec0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8038ec0:	b480      	push	{r7}
 8038ec2:	b087      	sub	sp, #28
 8038ec4:	af00      	add	r7, sp, #0
 8038ec6:	6078      	str	r0, [r7, #4]
 8038ec8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8038eca:	687b      	ldr	r3, [r7, #4]
 8038ecc:	681b      	ldr	r3, [r3, #0]
 8038ece:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8038ed0:	687b      	ldr	r3, [r7, #4]
 8038ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038ed4:	3304      	adds	r3, #4
 8038ed6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8038ed8:	683b      	ldr	r3, [r7, #0]
 8038eda:	0a5b      	lsrs	r3, r3, #9
 8038edc:	68fa      	ldr	r2, [r7, #12]
 8038ede:	8952      	ldrh	r2, [r2, #10]
 8038ee0:	fbb3 f3f2 	udiv	r3, r3, r2
 8038ee4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8038ee6:	693b      	ldr	r3, [r7, #16]
 8038ee8:	1d1a      	adds	r2, r3, #4
 8038eea:	613a      	str	r2, [r7, #16]
 8038eec:	681b      	ldr	r3, [r3, #0]
 8038eee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8038ef0:	68bb      	ldr	r3, [r7, #8]
 8038ef2:	2b00      	cmp	r3, #0
 8038ef4:	d101      	bne.n	8038efa <clmt_clust+0x3a>
 8038ef6:	2300      	movs	r3, #0
 8038ef8:	e010      	b.n	8038f1c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8038efa:	697a      	ldr	r2, [r7, #20]
 8038efc:	68bb      	ldr	r3, [r7, #8]
 8038efe:	429a      	cmp	r2, r3
 8038f00:	d307      	bcc.n	8038f12 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8038f02:	697a      	ldr	r2, [r7, #20]
 8038f04:	68bb      	ldr	r3, [r7, #8]
 8038f06:	1ad3      	subs	r3, r2, r3
 8038f08:	617b      	str	r3, [r7, #20]
 8038f0a:	693b      	ldr	r3, [r7, #16]
 8038f0c:	3304      	adds	r3, #4
 8038f0e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8038f10:	e7e9      	b.n	8038ee6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8038f12:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8038f14:	693b      	ldr	r3, [r7, #16]
 8038f16:	681a      	ldr	r2, [r3, #0]
 8038f18:	697b      	ldr	r3, [r7, #20]
 8038f1a:	4413      	add	r3, r2
}
 8038f1c:	4618      	mov	r0, r3
 8038f1e:	371c      	adds	r7, #28
 8038f20:	46bd      	mov	sp, r7
 8038f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8038f26:	4770      	bx	lr

08038f28 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8038f28:	b580      	push	{r7, lr}
 8038f2a:	b086      	sub	sp, #24
 8038f2c:	af00      	add	r7, sp, #0
 8038f2e:	6078      	str	r0, [r7, #4]
 8038f30:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8038f32:	687b      	ldr	r3, [r7, #4]
 8038f34:	681b      	ldr	r3, [r3, #0]
 8038f36:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8038f38:	683b      	ldr	r3, [r7, #0]
 8038f3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8038f3e:	d204      	bcs.n	8038f4a <dir_sdi+0x22>
 8038f40:	683b      	ldr	r3, [r7, #0]
 8038f42:	f003 031f 	and.w	r3, r3, #31
 8038f46:	2b00      	cmp	r3, #0
 8038f48:	d001      	beq.n	8038f4e <dir_sdi+0x26>
		return FR_INT_ERR;
 8038f4a:	2302      	movs	r3, #2
 8038f4c:	e063      	b.n	8039016 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8038f4e:	687b      	ldr	r3, [r7, #4]
 8038f50:	683a      	ldr	r2, [r7, #0]
 8038f52:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8038f54:	687b      	ldr	r3, [r7, #4]
 8038f56:	689b      	ldr	r3, [r3, #8]
 8038f58:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8038f5a:	697b      	ldr	r3, [r7, #20]
 8038f5c:	2b00      	cmp	r3, #0
 8038f5e:	d106      	bne.n	8038f6e <dir_sdi+0x46>
 8038f60:	693b      	ldr	r3, [r7, #16]
 8038f62:	781b      	ldrb	r3, [r3, #0]
 8038f64:	2b02      	cmp	r3, #2
 8038f66:	d902      	bls.n	8038f6e <dir_sdi+0x46>
		clst = fs->dirbase;
 8038f68:	693b      	ldr	r3, [r7, #16]
 8038f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8038f6c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8038f6e:	697b      	ldr	r3, [r7, #20]
 8038f70:	2b00      	cmp	r3, #0
 8038f72:	d10c      	bne.n	8038f8e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8038f74:	683b      	ldr	r3, [r7, #0]
 8038f76:	095b      	lsrs	r3, r3, #5
 8038f78:	693a      	ldr	r2, [r7, #16]
 8038f7a:	8912      	ldrh	r2, [r2, #8]
 8038f7c:	4293      	cmp	r3, r2
 8038f7e:	d301      	bcc.n	8038f84 <dir_sdi+0x5c>
 8038f80:	2302      	movs	r3, #2
 8038f82:	e048      	b.n	8039016 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8038f84:	693b      	ldr	r3, [r7, #16]
 8038f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8038f88:	687b      	ldr	r3, [r7, #4]
 8038f8a:	61da      	str	r2, [r3, #28]
 8038f8c:	e029      	b.n	8038fe2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8038f8e:	693b      	ldr	r3, [r7, #16]
 8038f90:	895b      	ldrh	r3, [r3, #10]
 8038f92:	025b      	lsls	r3, r3, #9
 8038f94:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8038f96:	e019      	b.n	8038fcc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8038f98:	687b      	ldr	r3, [r7, #4]
 8038f9a:	6979      	ldr	r1, [r7, #20]
 8038f9c:	4618      	mov	r0, r3
 8038f9e:	f7ff fcfe 	bl	803899e <get_fat>
 8038fa2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8038fa4:	697b      	ldr	r3, [r7, #20]
 8038fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8038faa:	d101      	bne.n	8038fb0 <dir_sdi+0x88>
 8038fac:	2301      	movs	r3, #1
 8038fae:	e032      	b.n	8039016 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8038fb0:	697b      	ldr	r3, [r7, #20]
 8038fb2:	2b01      	cmp	r3, #1
 8038fb4:	d904      	bls.n	8038fc0 <dir_sdi+0x98>
 8038fb6:	693b      	ldr	r3, [r7, #16]
 8038fb8:	695b      	ldr	r3, [r3, #20]
 8038fba:	697a      	ldr	r2, [r7, #20]
 8038fbc:	429a      	cmp	r2, r3
 8038fbe:	d301      	bcc.n	8038fc4 <dir_sdi+0x9c>
 8038fc0:	2302      	movs	r3, #2
 8038fc2:	e028      	b.n	8039016 <dir_sdi+0xee>
			ofs -= csz;
 8038fc4:	683a      	ldr	r2, [r7, #0]
 8038fc6:	68fb      	ldr	r3, [r7, #12]
 8038fc8:	1ad3      	subs	r3, r2, r3
 8038fca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8038fcc:	683a      	ldr	r2, [r7, #0]
 8038fce:	68fb      	ldr	r3, [r7, #12]
 8038fd0:	429a      	cmp	r2, r3
 8038fd2:	d2e1      	bcs.n	8038f98 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8038fd4:	6979      	ldr	r1, [r7, #20]
 8038fd6:	6938      	ldr	r0, [r7, #16]
 8038fd8:	f7ff fcc2 	bl	8038960 <clust2sect>
 8038fdc:	4602      	mov	r2, r0
 8038fde:	687b      	ldr	r3, [r7, #4]
 8038fe0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8038fe2:	687b      	ldr	r3, [r7, #4]
 8038fe4:	697a      	ldr	r2, [r7, #20]
 8038fe6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8038fe8:	687b      	ldr	r3, [r7, #4]
 8038fea:	69db      	ldr	r3, [r3, #28]
 8038fec:	2b00      	cmp	r3, #0
 8038fee:	d101      	bne.n	8038ff4 <dir_sdi+0xcc>
 8038ff0:	2302      	movs	r3, #2
 8038ff2:	e010      	b.n	8039016 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8038ff4:	687b      	ldr	r3, [r7, #4]
 8038ff6:	69da      	ldr	r2, [r3, #28]
 8038ff8:	683b      	ldr	r3, [r7, #0]
 8038ffa:	0a5b      	lsrs	r3, r3, #9
 8038ffc:	441a      	add	r2, r3
 8038ffe:	687b      	ldr	r3, [r7, #4]
 8039000:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8039002:	693b      	ldr	r3, [r7, #16]
 8039004:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8039008:	683b      	ldr	r3, [r7, #0]
 803900a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803900e:	441a      	add	r2, r3
 8039010:	687b      	ldr	r3, [r7, #4]
 8039012:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8039014:	2300      	movs	r3, #0
}
 8039016:	4618      	mov	r0, r3
 8039018:	3718      	adds	r7, #24
 803901a:	46bd      	mov	sp, r7
 803901c:	bd80      	pop	{r7, pc}

0803901e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 803901e:	b580      	push	{r7, lr}
 8039020:	b086      	sub	sp, #24
 8039022:	af00      	add	r7, sp, #0
 8039024:	6078      	str	r0, [r7, #4]
 8039026:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8039028:	687b      	ldr	r3, [r7, #4]
 803902a:	681b      	ldr	r3, [r3, #0]
 803902c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 803902e:	687b      	ldr	r3, [r7, #4]
 8039030:	695b      	ldr	r3, [r3, #20]
 8039032:	3320      	adds	r3, #32
 8039034:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8039036:	687b      	ldr	r3, [r7, #4]
 8039038:	69db      	ldr	r3, [r3, #28]
 803903a:	2b00      	cmp	r3, #0
 803903c:	d003      	beq.n	8039046 <dir_next+0x28>
 803903e:	68bb      	ldr	r3, [r7, #8]
 8039040:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8039044:	d301      	bcc.n	803904a <dir_next+0x2c>
 8039046:	2304      	movs	r3, #4
 8039048:	e0aa      	b.n	80391a0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 803904a:	68bb      	ldr	r3, [r7, #8]
 803904c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8039050:	2b00      	cmp	r3, #0
 8039052:	f040 8098 	bne.w	8039186 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8039056:	687b      	ldr	r3, [r7, #4]
 8039058:	69db      	ldr	r3, [r3, #28]
 803905a:	1c5a      	adds	r2, r3, #1
 803905c:	687b      	ldr	r3, [r7, #4]
 803905e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8039060:	687b      	ldr	r3, [r7, #4]
 8039062:	699b      	ldr	r3, [r3, #24]
 8039064:	2b00      	cmp	r3, #0
 8039066:	d10b      	bne.n	8039080 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8039068:	68bb      	ldr	r3, [r7, #8]
 803906a:	095b      	lsrs	r3, r3, #5
 803906c:	68fa      	ldr	r2, [r7, #12]
 803906e:	8912      	ldrh	r2, [r2, #8]
 8039070:	4293      	cmp	r3, r2
 8039072:	f0c0 8088 	bcc.w	8039186 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8039076:	687b      	ldr	r3, [r7, #4]
 8039078:	2200      	movs	r2, #0
 803907a:	61da      	str	r2, [r3, #28]
 803907c:	2304      	movs	r3, #4
 803907e:	e08f      	b.n	80391a0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8039080:	68bb      	ldr	r3, [r7, #8]
 8039082:	0a5b      	lsrs	r3, r3, #9
 8039084:	68fa      	ldr	r2, [r7, #12]
 8039086:	8952      	ldrh	r2, [r2, #10]
 8039088:	3a01      	subs	r2, #1
 803908a:	4013      	ands	r3, r2
 803908c:	2b00      	cmp	r3, #0
 803908e:	d17a      	bne.n	8039186 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8039090:	687a      	ldr	r2, [r7, #4]
 8039092:	687b      	ldr	r3, [r7, #4]
 8039094:	699b      	ldr	r3, [r3, #24]
 8039096:	4619      	mov	r1, r3
 8039098:	4610      	mov	r0, r2
 803909a:	f7ff fc80 	bl	803899e <get_fat>
 803909e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80390a0:	697b      	ldr	r3, [r7, #20]
 80390a2:	2b01      	cmp	r3, #1
 80390a4:	d801      	bhi.n	80390aa <dir_next+0x8c>
 80390a6:	2302      	movs	r3, #2
 80390a8:	e07a      	b.n	80391a0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80390aa:	697b      	ldr	r3, [r7, #20]
 80390ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80390b0:	d101      	bne.n	80390b6 <dir_next+0x98>
 80390b2:	2301      	movs	r3, #1
 80390b4:	e074      	b.n	80391a0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80390b6:	68fb      	ldr	r3, [r7, #12]
 80390b8:	695b      	ldr	r3, [r3, #20]
 80390ba:	697a      	ldr	r2, [r7, #20]
 80390bc:	429a      	cmp	r2, r3
 80390be:	d358      	bcc.n	8039172 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80390c0:	683b      	ldr	r3, [r7, #0]
 80390c2:	2b00      	cmp	r3, #0
 80390c4:	d104      	bne.n	80390d0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80390c6:	687b      	ldr	r3, [r7, #4]
 80390c8:	2200      	movs	r2, #0
 80390ca:	61da      	str	r2, [r3, #28]
 80390cc:	2304      	movs	r3, #4
 80390ce:	e067      	b.n	80391a0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80390d0:	687a      	ldr	r2, [r7, #4]
 80390d2:	687b      	ldr	r3, [r7, #4]
 80390d4:	699b      	ldr	r3, [r3, #24]
 80390d6:	4619      	mov	r1, r3
 80390d8:	4610      	mov	r0, r2
 80390da:	f7ff fe59 	bl	8038d90 <create_chain>
 80390de:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80390e0:	697b      	ldr	r3, [r7, #20]
 80390e2:	2b00      	cmp	r3, #0
 80390e4:	d101      	bne.n	80390ea <dir_next+0xcc>
 80390e6:	2307      	movs	r3, #7
 80390e8:	e05a      	b.n	80391a0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80390ea:	697b      	ldr	r3, [r7, #20]
 80390ec:	2b01      	cmp	r3, #1
 80390ee:	d101      	bne.n	80390f4 <dir_next+0xd6>
 80390f0:	2302      	movs	r3, #2
 80390f2:	e055      	b.n	80391a0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80390f4:	697b      	ldr	r3, [r7, #20]
 80390f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80390fa:	d101      	bne.n	8039100 <dir_next+0xe2>
 80390fc:	2301      	movs	r3, #1
 80390fe:	e04f      	b.n	80391a0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8039100:	68f8      	ldr	r0, [r7, #12]
 8039102:	f7ff fb4d 	bl	80387a0 <sync_window>
 8039106:	4603      	mov	r3, r0
 8039108:	2b00      	cmp	r3, #0
 803910a:	d001      	beq.n	8039110 <dir_next+0xf2>
 803910c:	2301      	movs	r3, #1
 803910e:	e047      	b.n	80391a0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8039110:	68fb      	ldr	r3, [r7, #12]
 8039112:	3330      	adds	r3, #48	; 0x30
 8039114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8039118:	2100      	movs	r1, #0
 803911a:	4618      	mov	r0, r3
 803911c:	f7ff f977 	bl	803840e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8039120:	2300      	movs	r3, #0
 8039122:	613b      	str	r3, [r7, #16]
 8039124:	6979      	ldr	r1, [r7, #20]
 8039126:	68f8      	ldr	r0, [r7, #12]
 8039128:	f7ff fc1a 	bl	8038960 <clust2sect>
 803912c:	4602      	mov	r2, r0
 803912e:	68fb      	ldr	r3, [r7, #12]
 8039130:	62da      	str	r2, [r3, #44]	; 0x2c
 8039132:	e012      	b.n	803915a <dir_next+0x13c>
						fs->wflag = 1;
 8039134:	68fb      	ldr	r3, [r7, #12]
 8039136:	2201      	movs	r2, #1
 8039138:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 803913a:	68f8      	ldr	r0, [r7, #12]
 803913c:	f7ff fb30 	bl	80387a0 <sync_window>
 8039140:	4603      	mov	r3, r0
 8039142:	2b00      	cmp	r3, #0
 8039144:	d001      	beq.n	803914a <dir_next+0x12c>
 8039146:	2301      	movs	r3, #1
 8039148:	e02a      	b.n	80391a0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 803914a:	693b      	ldr	r3, [r7, #16]
 803914c:	3301      	adds	r3, #1
 803914e:	613b      	str	r3, [r7, #16]
 8039150:	68fb      	ldr	r3, [r7, #12]
 8039152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039154:	1c5a      	adds	r2, r3, #1
 8039156:	68fb      	ldr	r3, [r7, #12]
 8039158:	62da      	str	r2, [r3, #44]	; 0x2c
 803915a:	68fb      	ldr	r3, [r7, #12]
 803915c:	895b      	ldrh	r3, [r3, #10]
 803915e:	461a      	mov	r2, r3
 8039160:	693b      	ldr	r3, [r7, #16]
 8039162:	4293      	cmp	r3, r2
 8039164:	d3e6      	bcc.n	8039134 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8039166:	68fb      	ldr	r3, [r7, #12]
 8039168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 803916a:	693b      	ldr	r3, [r7, #16]
 803916c:	1ad2      	subs	r2, r2, r3
 803916e:	68fb      	ldr	r3, [r7, #12]
 8039170:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8039172:	687b      	ldr	r3, [r7, #4]
 8039174:	697a      	ldr	r2, [r7, #20]
 8039176:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8039178:	6979      	ldr	r1, [r7, #20]
 803917a:	68f8      	ldr	r0, [r7, #12]
 803917c:	f7ff fbf0 	bl	8038960 <clust2sect>
 8039180:	4602      	mov	r2, r0
 8039182:	687b      	ldr	r3, [r7, #4]
 8039184:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8039186:	687b      	ldr	r3, [r7, #4]
 8039188:	68ba      	ldr	r2, [r7, #8]
 803918a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 803918c:	68fb      	ldr	r3, [r7, #12]
 803918e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8039192:	68bb      	ldr	r3, [r7, #8]
 8039194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8039198:	441a      	add	r2, r3
 803919a:	687b      	ldr	r3, [r7, #4]
 803919c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 803919e:	2300      	movs	r3, #0
}
 80391a0:	4618      	mov	r0, r3
 80391a2:	3718      	adds	r7, #24
 80391a4:	46bd      	mov	sp, r7
 80391a6:	bd80      	pop	{r7, pc}

080391a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80391a8:	b580      	push	{r7, lr}
 80391aa:	b086      	sub	sp, #24
 80391ac:	af00      	add	r7, sp, #0
 80391ae:	6078      	str	r0, [r7, #4]
 80391b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80391b2:	687b      	ldr	r3, [r7, #4]
 80391b4:	681b      	ldr	r3, [r3, #0]
 80391b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80391b8:	2100      	movs	r1, #0
 80391ba:	6878      	ldr	r0, [r7, #4]
 80391bc:	f7ff feb4 	bl	8038f28 <dir_sdi>
 80391c0:	4603      	mov	r3, r0
 80391c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80391c4:	7dfb      	ldrb	r3, [r7, #23]
 80391c6:	2b00      	cmp	r3, #0
 80391c8:	d12b      	bne.n	8039222 <dir_alloc+0x7a>
		n = 0;
 80391ca:	2300      	movs	r3, #0
 80391cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80391ce:	687b      	ldr	r3, [r7, #4]
 80391d0:	69db      	ldr	r3, [r3, #28]
 80391d2:	4619      	mov	r1, r3
 80391d4:	68f8      	ldr	r0, [r7, #12]
 80391d6:	f7ff fb27 	bl	8038828 <move_window>
 80391da:	4603      	mov	r3, r0
 80391dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80391de:	7dfb      	ldrb	r3, [r7, #23]
 80391e0:	2b00      	cmp	r3, #0
 80391e2:	d11d      	bne.n	8039220 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80391e4:	687b      	ldr	r3, [r7, #4]
 80391e6:	6a1b      	ldr	r3, [r3, #32]
 80391e8:	781b      	ldrb	r3, [r3, #0]
 80391ea:	2be5      	cmp	r3, #229	; 0xe5
 80391ec:	d004      	beq.n	80391f8 <dir_alloc+0x50>
 80391ee:	687b      	ldr	r3, [r7, #4]
 80391f0:	6a1b      	ldr	r3, [r3, #32]
 80391f2:	781b      	ldrb	r3, [r3, #0]
 80391f4:	2b00      	cmp	r3, #0
 80391f6:	d107      	bne.n	8039208 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80391f8:	693b      	ldr	r3, [r7, #16]
 80391fa:	3301      	adds	r3, #1
 80391fc:	613b      	str	r3, [r7, #16]
 80391fe:	693a      	ldr	r2, [r7, #16]
 8039200:	683b      	ldr	r3, [r7, #0]
 8039202:	429a      	cmp	r2, r3
 8039204:	d102      	bne.n	803920c <dir_alloc+0x64>
 8039206:	e00c      	b.n	8039222 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8039208:	2300      	movs	r3, #0
 803920a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 803920c:	2101      	movs	r1, #1
 803920e:	6878      	ldr	r0, [r7, #4]
 8039210:	f7ff ff05 	bl	803901e <dir_next>
 8039214:	4603      	mov	r3, r0
 8039216:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8039218:	7dfb      	ldrb	r3, [r7, #23]
 803921a:	2b00      	cmp	r3, #0
 803921c:	d0d7      	beq.n	80391ce <dir_alloc+0x26>
 803921e:	e000      	b.n	8039222 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8039220:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8039222:	7dfb      	ldrb	r3, [r7, #23]
 8039224:	2b04      	cmp	r3, #4
 8039226:	d101      	bne.n	803922c <dir_alloc+0x84>
 8039228:	2307      	movs	r3, #7
 803922a:	75fb      	strb	r3, [r7, #23]
	return res;
 803922c:	7dfb      	ldrb	r3, [r7, #23]
}
 803922e:	4618      	mov	r0, r3
 8039230:	3718      	adds	r7, #24
 8039232:	46bd      	mov	sp, r7
 8039234:	bd80      	pop	{r7, pc}

08039236 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8039236:	b580      	push	{r7, lr}
 8039238:	b084      	sub	sp, #16
 803923a:	af00      	add	r7, sp, #0
 803923c:	6078      	str	r0, [r7, #4]
 803923e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8039240:	683b      	ldr	r3, [r7, #0]
 8039242:	331a      	adds	r3, #26
 8039244:	4618      	mov	r0, r3
 8039246:	f7ff f83f 	bl	80382c8 <ld_word>
 803924a:	4603      	mov	r3, r0
 803924c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 803924e:	687b      	ldr	r3, [r7, #4]
 8039250:	781b      	ldrb	r3, [r3, #0]
 8039252:	2b03      	cmp	r3, #3
 8039254:	d109      	bne.n	803926a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8039256:	683b      	ldr	r3, [r7, #0]
 8039258:	3314      	adds	r3, #20
 803925a:	4618      	mov	r0, r3
 803925c:	f7ff f834 	bl	80382c8 <ld_word>
 8039260:	4603      	mov	r3, r0
 8039262:	041b      	lsls	r3, r3, #16
 8039264:	68fa      	ldr	r2, [r7, #12]
 8039266:	4313      	orrs	r3, r2
 8039268:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 803926a:	68fb      	ldr	r3, [r7, #12]
}
 803926c:	4618      	mov	r0, r3
 803926e:	3710      	adds	r7, #16
 8039270:	46bd      	mov	sp, r7
 8039272:	bd80      	pop	{r7, pc}

08039274 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8039274:	b580      	push	{r7, lr}
 8039276:	b084      	sub	sp, #16
 8039278:	af00      	add	r7, sp, #0
 803927a:	60f8      	str	r0, [r7, #12]
 803927c:	60b9      	str	r1, [r7, #8]
 803927e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8039280:	68bb      	ldr	r3, [r7, #8]
 8039282:	331a      	adds	r3, #26
 8039284:	687a      	ldr	r2, [r7, #4]
 8039286:	b292      	uxth	r2, r2
 8039288:	4611      	mov	r1, r2
 803928a:	4618      	mov	r0, r3
 803928c:	f7ff f857 	bl	803833e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8039290:	68fb      	ldr	r3, [r7, #12]
 8039292:	781b      	ldrb	r3, [r3, #0]
 8039294:	2b03      	cmp	r3, #3
 8039296:	d109      	bne.n	80392ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8039298:	68bb      	ldr	r3, [r7, #8]
 803929a:	f103 0214 	add.w	r2, r3, #20
 803929e:	687b      	ldr	r3, [r7, #4]
 80392a0:	0c1b      	lsrs	r3, r3, #16
 80392a2:	b29b      	uxth	r3, r3
 80392a4:	4619      	mov	r1, r3
 80392a6:	4610      	mov	r0, r2
 80392a8:	f7ff f849 	bl	803833e <st_word>
	}
}
 80392ac:	bf00      	nop
 80392ae:	3710      	adds	r7, #16
 80392b0:	46bd      	mov	sp, r7
 80392b2:	bd80      	pop	{r7, pc}

080392b4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80392b4:	b580      	push	{r7, lr}
 80392b6:	b086      	sub	sp, #24
 80392b8:	af00      	add	r7, sp, #0
 80392ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80392bc:	687b      	ldr	r3, [r7, #4]
 80392be:	681b      	ldr	r3, [r3, #0]
 80392c0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80392c2:	2100      	movs	r1, #0
 80392c4:	6878      	ldr	r0, [r7, #4]
 80392c6:	f7ff fe2f 	bl	8038f28 <dir_sdi>
 80392ca:	4603      	mov	r3, r0
 80392cc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80392ce:	7dfb      	ldrb	r3, [r7, #23]
 80392d0:	2b00      	cmp	r3, #0
 80392d2:	d001      	beq.n	80392d8 <dir_find+0x24>
 80392d4:	7dfb      	ldrb	r3, [r7, #23]
 80392d6:	e03e      	b.n	8039356 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80392d8:	687b      	ldr	r3, [r7, #4]
 80392da:	69db      	ldr	r3, [r3, #28]
 80392dc:	4619      	mov	r1, r3
 80392de:	6938      	ldr	r0, [r7, #16]
 80392e0:	f7ff faa2 	bl	8038828 <move_window>
 80392e4:	4603      	mov	r3, r0
 80392e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80392e8:	7dfb      	ldrb	r3, [r7, #23]
 80392ea:	2b00      	cmp	r3, #0
 80392ec:	d12f      	bne.n	803934e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80392ee:	687b      	ldr	r3, [r7, #4]
 80392f0:	6a1b      	ldr	r3, [r3, #32]
 80392f2:	781b      	ldrb	r3, [r3, #0]
 80392f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80392f6:	7bfb      	ldrb	r3, [r7, #15]
 80392f8:	2b00      	cmp	r3, #0
 80392fa:	d102      	bne.n	8039302 <dir_find+0x4e>
 80392fc:	2304      	movs	r3, #4
 80392fe:	75fb      	strb	r3, [r7, #23]
 8039300:	e028      	b.n	8039354 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8039302:	687b      	ldr	r3, [r7, #4]
 8039304:	6a1b      	ldr	r3, [r3, #32]
 8039306:	330b      	adds	r3, #11
 8039308:	781b      	ldrb	r3, [r3, #0]
 803930a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 803930e:	b2da      	uxtb	r2, r3
 8039310:	687b      	ldr	r3, [r7, #4]
 8039312:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8039314:	687b      	ldr	r3, [r7, #4]
 8039316:	6a1b      	ldr	r3, [r3, #32]
 8039318:	330b      	adds	r3, #11
 803931a:	781b      	ldrb	r3, [r3, #0]
 803931c:	f003 0308 	and.w	r3, r3, #8
 8039320:	2b00      	cmp	r3, #0
 8039322:	d10a      	bne.n	803933a <dir_find+0x86>
 8039324:	687b      	ldr	r3, [r7, #4]
 8039326:	6a18      	ldr	r0, [r3, #32]
 8039328:	687b      	ldr	r3, [r7, #4]
 803932a:	3324      	adds	r3, #36	; 0x24
 803932c:	220b      	movs	r2, #11
 803932e:	4619      	mov	r1, r3
 8039330:	f7ff f888 	bl	8038444 <mem_cmp>
 8039334:	4603      	mov	r3, r0
 8039336:	2b00      	cmp	r3, #0
 8039338:	d00b      	beq.n	8039352 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 803933a:	2100      	movs	r1, #0
 803933c:	6878      	ldr	r0, [r7, #4]
 803933e:	f7ff fe6e 	bl	803901e <dir_next>
 8039342:	4603      	mov	r3, r0
 8039344:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8039346:	7dfb      	ldrb	r3, [r7, #23]
 8039348:	2b00      	cmp	r3, #0
 803934a:	d0c5      	beq.n	80392d8 <dir_find+0x24>
 803934c:	e002      	b.n	8039354 <dir_find+0xa0>
		if (res != FR_OK) break;
 803934e:	bf00      	nop
 8039350:	e000      	b.n	8039354 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8039352:	bf00      	nop

	return res;
 8039354:	7dfb      	ldrb	r3, [r7, #23]
}
 8039356:	4618      	mov	r0, r3
 8039358:	3718      	adds	r7, #24
 803935a:	46bd      	mov	sp, r7
 803935c:	bd80      	pop	{r7, pc}

0803935e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 803935e:	b580      	push	{r7, lr}
 8039360:	b084      	sub	sp, #16
 8039362:	af00      	add	r7, sp, #0
 8039364:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8039366:	687b      	ldr	r3, [r7, #4]
 8039368:	681b      	ldr	r3, [r3, #0]
 803936a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 803936c:	2101      	movs	r1, #1
 803936e:	6878      	ldr	r0, [r7, #4]
 8039370:	f7ff ff1a 	bl	80391a8 <dir_alloc>
 8039374:	4603      	mov	r3, r0
 8039376:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8039378:	7bfb      	ldrb	r3, [r7, #15]
 803937a:	2b00      	cmp	r3, #0
 803937c:	d11c      	bne.n	80393b8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 803937e:	687b      	ldr	r3, [r7, #4]
 8039380:	69db      	ldr	r3, [r3, #28]
 8039382:	4619      	mov	r1, r3
 8039384:	68b8      	ldr	r0, [r7, #8]
 8039386:	f7ff fa4f 	bl	8038828 <move_window>
 803938a:	4603      	mov	r3, r0
 803938c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 803938e:	7bfb      	ldrb	r3, [r7, #15]
 8039390:	2b00      	cmp	r3, #0
 8039392:	d111      	bne.n	80393b8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8039394:	687b      	ldr	r3, [r7, #4]
 8039396:	6a1b      	ldr	r3, [r3, #32]
 8039398:	2220      	movs	r2, #32
 803939a:	2100      	movs	r1, #0
 803939c:	4618      	mov	r0, r3
 803939e:	f7ff f836 	bl	803840e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80393a2:	687b      	ldr	r3, [r7, #4]
 80393a4:	6a18      	ldr	r0, [r3, #32]
 80393a6:	687b      	ldr	r3, [r7, #4]
 80393a8:	3324      	adds	r3, #36	; 0x24
 80393aa:	220b      	movs	r2, #11
 80393ac:	4619      	mov	r1, r3
 80393ae:	f7ff f80d 	bl	80383cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80393b2:	68bb      	ldr	r3, [r7, #8]
 80393b4:	2201      	movs	r2, #1
 80393b6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80393b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80393ba:	4618      	mov	r0, r3
 80393bc:	3710      	adds	r7, #16
 80393be:	46bd      	mov	sp, r7
 80393c0:	bd80      	pop	{r7, pc}
	...

080393c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80393c4:	b580      	push	{r7, lr}
 80393c6:	b088      	sub	sp, #32
 80393c8:	af00      	add	r7, sp, #0
 80393ca:	6078      	str	r0, [r7, #4]
 80393cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80393ce:	683b      	ldr	r3, [r7, #0]
 80393d0:	681b      	ldr	r3, [r3, #0]
 80393d2:	60fb      	str	r3, [r7, #12]
 80393d4:	687b      	ldr	r3, [r7, #4]
 80393d6:	3324      	adds	r3, #36	; 0x24
 80393d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80393da:	220b      	movs	r2, #11
 80393dc:	2120      	movs	r1, #32
 80393de:	68b8      	ldr	r0, [r7, #8]
 80393e0:	f7ff f815 	bl	803840e <mem_set>
	si = i = 0; ni = 8;
 80393e4:	2300      	movs	r3, #0
 80393e6:	613b      	str	r3, [r7, #16]
 80393e8:	693b      	ldr	r3, [r7, #16]
 80393ea:	61fb      	str	r3, [r7, #28]
 80393ec:	2308      	movs	r3, #8
 80393ee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80393f0:	69fb      	ldr	r3, [r7, #28]
 80393f2:	1c5a      	adds	r2, r3, #1
 80393f4:	61fa      	str	r2, [r7, #28]
 80393f6:	68fa      	ldr	r2, [r7, #12]
 80393f8:	4413      	add	r3, r2
 80393fa:	781b      	ldrb	r3, [r3, #0]
 80393fc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80393fe:	7efb      	ldrb	r3, [r7, #27]
 8039400:	2b20      	cmp	r3, #32
 8039402:	d94e      	bls.n	80394a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8039404:	7efb      	ldrb	r3, [r7, #27]
 8039406:	2b2f      	cmp	r3, #47	; 0x2f
 8039408:	d006      	beq.n	8039418 <create_name+0x54>
 803940a:	7efb      	ldrb	r3, [r7, #27]
 803940c:	2b5c      	cmp	r3, #92	; 0x5c
 803940e:	d110      	bne.n	8039432 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8039410:	e002      	b.n	8039418 <create_name+0x54>
 8039412:	69fb      	ldr	r3, [r7, #28]
 8039414:	3301      	adds	r3, #1
 8039416:	61fb      	str	r3, [r7, #28]
 8039418:	68fa      	ldr	r2, [r7, #12]
 803941a:	69fb      	ldr	r3, [r7, #28]
 803941c:	4413      	add	r3, r2
 803941e:	781b      	ldrb	r3, [r3, #0]
 8039420:	2b2f      	cmp	r3, #47	; 0x2f
 8039422:	d0f6      	beq.n	8039412 <create_name+0x4e>
 8039424:	68fa      	ldr	r2, [r7, #12]
 8039426:	69fb      	ldr	r3, [r7, #28]
 8039428:	4413      	add	r3, r2
 803942a:	781b      	ldrb	r3, [r3, #0]
 803942c:	2b5c      	cmp	r3, #92	; 0x5c
 803942e:	d0f0      	beq.n	8039412 <create_name+0x4e>
			break;
 8039430:	e038      	b.n	80394a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8039432:	7efb      	ldrb	r3, [r7, #27]
 8039434:	2b2e      	cmp	r3, #46	; 0x2e
 8039436:	d003      	beq.n	8039440 <create_name+0x7c>
 8039438:	693a      	ldr	r2, [r7, #16]
 803943a:	697b      	ldr	r3, [r7, #20]
 803943c:	429a      	cmp	r2, r3
 803943e:	d30c      	bcc.n	803945a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8039440:	697b      	ldr	r3, [r7, #20]
 8039442:	2b0b      	cmp	r3, #11
 8039444:	d002      	beq.n	803944c <create_name+0x88>
 8039446:	7efb      	ldrb	r3, [r7, #27]
 8039448:	2b2e      	cmp	r3, #46	; 0x2e
 803944a:	d001      	beq.n	8039450 <create_name+0x8c>
 803944c:	2306      	movs	r3, #6
 803944e:	e044      	b.n	80394da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8039450:	2308      	movs	r3, #8
 8039452:	613b      	str	r3, [r7, #16]
 8039454:	230b      	movs	r3, #11
 8039456:	617b      	str	r3, [r7, #20]
			continue;
 8039458:	e022      	b.n	80394a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 803945a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 803945e:	2b00      	cmp	r3, #0
 8039460:	da04      	bge.n	803946c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8039462:	7efb      	ldrb	r3, [r7, #27]
 8039464:	3b80      	subs	r3, #128	; 0x80
 8039466:	4a1f      	ldr	r2, [pc, #124]	; (80394e4 <create_name+0x120>)
 8039468:	5cd3      	ldrb	r3, [r2, r3]
 803946a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 803946c:	7efb      	ldrb	r3, [r7, #27]
 803946e:	4619      	mov	r1, r3
 8039470:	481d      	ldr	r0, [pc, #116]	; (80394e8 <create_name+0x124>)
 8039472:	f7ff f80e 	bl	8038492 <chk_chr>
 8039476:	4603      	mov	r3, r0
 8039478:	2b00      	cmp	r3, #0
 803947a:	d001      	beq.n	8039480 <create_name+0xbc>
 803947c:	2306      	movs	r3, #6
 803947e:	e02c      	b.n	80394da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8039480:	7efb      	ldrb	r3, [r7, #27]
 8039482:	2b60      	cmp	r3, #96	; 0x60
 8039484:	d905      	bls.n	8039492 <create_name+0xce>
 8039486:	7efb      	ldrb	r3, [r7, #27]
 8039488:	2b7a      	cmp	r3, #122	; 0x7a
 803948a:	d802      	bhi.n	8039492 <create_name+0xce>
 803948c:	7efb      	ldrb	r3, [r7, #27]
 803948e:	3b20      	subs	r3, #32
 8039490:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8039492:	693b      	ldr	r3, [r7, #16]
 8039494:	1c5a      	adds	r2, r3, #1
 8039496:	613a      	str	r2, [r7, #16]
 8039498:	68ba      	ldr	r2, [r7, #8]
 803949a:	4413      	add	r3, r2
 803949c:	7efa      	ldrb	r2, [r7, #27]
 803949e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80394a0:	e7a6      	b.n	80393f0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80394a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80394a4:	68fa      	ldr	r2, [r7, #12]
 80394a6:	69fb      	ldr	r3, [r7, #28]
 80394a8:	441a      	add	r2, r3
 80394aa:	683b      	ldr	r3, [r7, #0]
 80394ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80394ae:	693b      	ldr	r3, [r7, #16]
 80394b0:	2b00      	cmp	r3, #0
 80394b2:	d101      	bne.n	80394b8 <create_name+0xf4>
 80394b4:	2306      	movs	r3, #6
 80394b6:	e010      	b.n	80394da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80394b8:	68bb      	ldr	r3, [r7, #8]
 80394ba:	781b      	ldrb	r3, [r3, #0]
 80394bc:	2be5      	cmp	r3, #229	; 0xe5
 80394be:	d102      	bne.n	80394c6 <create_name+0x102>
 80394c0:	68bb      	ldr	r3, [r7, #8]
 80394c2:	2205      	movs	r2, #5
 80394c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80394c6:	7efb      	ldrb	r3, [r7, #27]
 80394c8:	2b20      	cmp	r3, #32
 80394ca:	d801      	bhi.n	80394d0 <create_name+0x10c>
 80394cc:	2204      	movs	r2, #4
 80394ce:	e000      	b.n	80394d2 <create_name+0x10e>
 80394d0:	2200      	movs	r2, #0
 80394d2:	68bb      	ldr	r3, [r7, #8]
 80394d4:	330b      	adds	r3, #11
 80394d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80394d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80394da:	4618      	mov	r0, r3
 80394dc:	3720      	adds	r7, #32
 80394de:	46bd      	mov	sp, r7
 80394e0:	bd80      	pop	{r7, pc}
 80394e2:	bf00      	nop
 80394e4:	0803ff44 	.word	0x0803ff44
 80394e8:	0803f3f8 	.word	0x0803f3f8

080394ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80394ec:	b580      	push	{r7, lr}
 80394ee:	b086      	sub	sp, #24
 80394f0:	af00      	add	r7, sp, #0
 80394f2:	6078      	str	r0, [r7, #4]
 80394f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80394f6:	687b      	ldr	r3, [r7, #4]
 80394f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80394fa:	693b      	ldr	r3, [r7, #16]
 80394fc:	681b      	ldr	r3, [r3, #0]
 80394fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8039500:	e002      	b.n	8039508 <follow_path+0x1c>
 8039502:	683b      	ldr	r3, [r7, #0]
 8039504:	3301      	adds	r3, #1
 8039506:	603b      	str	r3, [r7, #0]
 8039508:	683b      	ldr	r3, [r7, #0]
 803950a:	781b      	ldrb	r3, [r3, #0]
 803950c:	2b2f      	cmp	r3, #47	; 0x2f
 803950e:	d0f8      	beq.n	8039502 <follow_path+0x16>
 8039510:	683b      	ldr	r3, [r7, #0]
 8039512:	781b      	ldrb	r3, [r3, #0]
 8039514:	2b5c      	cmp	r3, #92	; 0x5c
 8039516:	d0f4      	beq.n	8039502 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8039518:	693b      	ldr	r3, [r7, #16]
 803951a:	2200      	movs	r2, #0
 803951c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 803951e:	683b      	ldr	r3, [r7, #0]
 8039520:	781b      	ldrb	r3, [r3, #0]
 8039522:	2b1f      	cmp	r3, #31
 8039524:	d80a      	bhi.n	803953c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8039526:	687b      	ldr	r3, [r7, #4]
 8039528:	2280      	movs	r2, #128	; 0x80
 803952a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 803952e:	2100      	movs	r1, #0
 8039530:	6878      	ldr	r0, [r7, #4]
 8039532:	f7ff fcf9 	bl	8038f28 <dir_sdi>
 8039536:	4603      	mov	r3, r0
 8039538:	75fb      	strb	r3, [r7, #23]
 803953a:	e043      	b.n	80395c4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 803953c:	463b      	mov	r3, r7
 803953e:	4619      	mov	r1, r3
 8039540:	6878      	ldr	r0, [r7, #4]
 8039542:	f7ff ff3f 	bl	80393c4 <create_name>
 8039546:	4603      	mov	r3, r0
 8039548:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 803954a:	7dfb      	ldrb	r3, [r7, #23]
 803954c:	2b00      	cmp	r3, #0
 803954e:	d134      	bne.n	80395ba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8039550:	6878      	ldr	r0, [r7, #4]
 8039552:	f7ff feaf 	bl	80392b4 <dir_find>
 8039556:	4603      	mov	r3, r0
 8039558:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 803955a:	687b      	ldr	r3, [r7, #4]
 803955c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8039560:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8039562:	7dfb      	ldrb	r3, [r7, #23]
 8039564:	2b00      	cmp	r3, #0
 8039566:	d00a      	beq.n	803957e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8039568:	7dfb      	ldrb	r3, [r7, #23]
 803956a:	2b04      	cmp	r3, #4
 803956c:	d127      	bne.n	80395be <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 803956e:	7afb      	ldrb	r3, [r7, #11]
 8039570:	f003 0304 	and.w	r3, r3, #4
 8039574:	2b00      	cmp	r3, #0
 8039576:	d122      	bne.n	80395be <follow_path+0xd2>
 8039578:	2305      	movs	r3, #5
 803957a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 803957c:	e01f      	b.n	80395be <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 803957e:	7afb      	ldrb	r3, [r7, #11]
 8039580:	f003 0304 	and.w	r3, r3, #4
 8039584:	2b00      	cmp	r3, #0
 8039586:	d11c      	bne.n	80395c2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8039588:	693b      	ldr	r3, [r7, #16]
 803958a:	799b      	ldrb	r3, [r3, #6]
 803958c:	f003 0310 	and.w	r3, r3, #16
 8039590:	2b00      	cmp	r3, #0
 8039592:	d102      	bne.n	803959a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8039594:	2305      	movs	r3, #5
 8039596:	75fb      	strb	r3, [r7, #23]
 8039598:	e014      	b.n	80395c4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 803959a:	68fb      	ldr	r3, [r7, #12]
 803959c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80395a0:	687b      	ldr	r3, [r7, #4]
 80395a2:	695b      	ldr	r3, [r3, #20]
 80395a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80395a8:	4413      	add	r3, r2
 80395aa:	4619      	mov	r1, r3
 80395ac:	68f8      	ldr	r0, [r7, #12]
 80395ae:	f7ff fe42 	bl	8039236 <ld_clust>
 80395b2:	4602      	mov	r2, r0
 80395b4:	693b      	ldr	r3, [r7, #16]
 80395b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80395b8:	e7c0      	b.n	803953c <follow_path+0x50>
			if (res != FR_OK) break;
 80395ba:	bf00      	nop
 80395bc:	e002      	b.n	80395c4 <follow_path+0xd8>
				break;
 80395be:	bf00      	nop
 80395c0:	e000      	b.n	80395c4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80395c2:	bf00      	nop
			}
		}
	}

	return res;
 80395c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80395c6:	4618      	mov	r0, r3
 80395c8:	3718      	adds	r7, #24
 80395ca:	46bd      	mov	sp, r7
 80395cc:	bd80      	pop	{r7, pc}

080395ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80395ce:	b480      	push	{r7}
 80395d0:	b087      	sub	sp, #28
 80395d2:	af00      	add	r7, sp, #0
 80395d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80395d6:	f04f 33ff 	mov.w	r3, #4294967295
 80395da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80395dc:	687b      	ldr	r3, [r7, #4]
 80395de:	681b      	ldr	r3, [r3, #0]
 80395e0:	2b00      	cmp	r3, #0
 80395e2:	d031      	beq.n	8039648 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80395e4:	687b      	ldr	r3, [r7, #4]
 80395e6:	681b      	ldr	r3, [r3, #0]
 80395e8:	617b      	str	r3, [r7, #20]
 80395ea:	e002      	b.n	80395f2 <get_ldnumber+0x24>
 80395ec:	697b      	ldr	r3, [r7, #20]
 80395ee:	3301      	adds	r3, #1
 80395f0:	617b      	str	r3, [r7, #20]
 80395f2:	697b      	ldr	r3, [r7, #20]
 80395f4:	781b      	ldrb	r3, [r3, #0]
 80395f6:	2b20      	cmp	r3, #32
 80395f8:	d903      	bls.n	8039602 <get_ldnumber+0x34>
 80395fa:	697b      	ldr	r3, [r7, #20]
 80395fc:	781b      	ldrb	r3, [r3, #0]
 80395fe:	2b3a      	cmp	r3, #58	; 0x3a
 8039600:	d1f4      	bne.n	80395ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8039602:	697b      	ldr	r3, [r7, #20]
 8039604:	781b      	ldrb	r3, [r3, #0]
 8039606:	2b3a      	cmp	r3, #58	; 0x3a
 8039608:	d11c      	bne.n	8039644 <get_ldnumber+0x76>
			tp = *path;
 803960a:	687b      	ldr	r3, [r7, #4]
 803960c:	681b      	ldr	r3, [r3, #0]
 803960e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8039610:	68fb      	ldr	r3, [r7, #12]
 8039612:	1c5a      	adds	r2, r3, #1
 8039614:	60fa      	str	r2, [r7, #12]
 8039616:	781b      	ldrb	r3, [r3, #0]
 8039618:	3b30      	subs	r3, #48	; 0x30
 803961a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 803961c:	68bb      	ldr	r3, [r7, #8]
 803961e:	2b09      	cmp	r3, #9
 8039620:	d80e      	bhi.n	8039640 <get_ldnumber+0x72>
 8039622:	68fa      	ldr	r2, [r7, #12]
 8039624:	697b      	ldr	r3, [r7, #20]
 8039626:	429a      	cmp	r2, r3
 8039628:	d10a      	bne.n	8039640 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 803962a:	68bb      	ldr	r3, [r7, #8]
 803962c:	2b00      	cmp	r3, #0
 803962e:	d107      	bne.n	8039640 <get_ldnumber+0x72>
					vol = (int)i;
 8039630:	68bb      	ldr	r3, [r7, #8]
 8039632:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8039634:	697b      	ldr	r3, [r7, #20]
 8039636:	3301      	adds	r3, #1
 8039638:	617b      	str	r3, [r7, #20]
 803963a:	687b      	ldr	r3, [r7, #4]
 803963c:	697a      	ldr	r2, [r7, #20]
 803963e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8039640:	693b      	ldr	r3, [r7, #16]
 8039642:	e002      	b.n	803964a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8039644:	2300      	movs	r3, #0
 8039646:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8039648:	693b      	ldr	r3, [r7, #16]
}
 803964a:	4618      	mov	r0, r3
 803964c:	371c      	adds	r7, #28
 803964e:	46bd      	mov	sp, r7
 8039650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039654:	4770      	bx	lr
	...

08039658 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8039658:	b580      	push	{r7, lr}
 803965a:	b082      	sub	sp, #8
 803965c:	af00      	add	r7, sp, #0
 803965e:	6078      	str	r0, [r7, #4]
 8039660:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8039662:	687b      	ldr	r3, [r7, #4]
 8039664:	2200      	movs	r2, #0
 8039666:	70da      	strb	r2, [r3, #3]
 8039668:	687b      	ldr	r3, [r7, #4]
 803966a:	f04f 32ff 	mov.w	r2, #4294967295
 803966e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8039670:	6839      	ldr	r1, [r7, #0]
 8039672:	6878      	ldr	r0, [r7, #4]
 8039674:	f7ff f8d8 	bl	8038828 <move_window>
 8039678:	4603      	mov	r3, r0
 803967a:	2b00      	cmp	r3, #0
 803967c:	d001      	beq.n	8039682 <check_fs+0x2a>
 803967e:	2304      	movs	r3, #4
 8039680:	e038      	b.n	80396f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8039682:	687b      	ldr	r3, [r7, #4]
 8039684:	3330      	adds	r3, #48	; 0x30
 8039686:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 803968a:	4618      	mov	r0, r3
 803968c:	f7fe fe1c 	bl	80382c8 <ld_word>
 8039690:	4603      	mov	r3, r0
 8039692:	461a      	mov	r2, r3
 8039694:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8039698:	429a      	cmp	r2, r3
 803969a:	d001      	beq.n	80396a0 <check_fs+0x48>
 803969c:	2303      	movs	r3, #3
 803969e:	e029      	b.n	80396f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80396a0:	687b      	ldr	r3, [r7, #4]
 80396a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80396a6:	2be9      	cmp	r3, #233	; 0xe9
 80396a8:	d009      	beq.n	80396be <check_fs+0x66>
 80396aa:	687b      	ldr	r3, [r7, #4]
 80396ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80396b0:	2beb      	cmp	r3, #235	; 0xeb
 80396b2:	d11e      	bne.n	80396f2 <check_fs+0x9a>
 80396b4:	687b      	ldr	r3, [r7, #4]
 80396b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80396ba:	2b90      	cmp	r3, #144	; 0x90
 80396bc:	d119      	bne.n	80396f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80396be:	687b      	ldr	r3, [r7, #4]
 80396c0:	3330      	adds	r3, #48	; 0x30
 80396c2:	3336      	adds	r3, #54	; 0x36
 80396c4:	4618      	mov	r0, r3
 80396c6:	f7fe fe17 	bl	80382f8 <ld_dword>
 80396ca:	4603      	mov	r3, r0
 80396cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80396d0:	4a0a      	ldr	r2, [pc, #40]	; (80396fc <check_fs+0xa4>)
 80396d2:	4293      	cmp	r3, r2
 80396d4:	d101      	bne.n	80396da <check_fs+0x82>
 80396d6:	2300      	movs	r3, #0
 80396d8:	e00c      	b.n	80396f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80396da:	687b      	ldr	r3, [r7, #4]
 80396dc:	3330      	adds	r3, #48	; 0x30
 80396de:	3352      	adds	r3, #82	; 0x52
 80396e0:	4618      	mov	r0, r3
 80396e2:	f7fe fe09 	bl	80382f8 <ld_dword>
 80396e6:	4603      	mov	r3, r0
 80396e8:	4a05      	ldr	r2, [pc, #20]	; (8039700 <check_fs+0xa8>)
 80396ea:	4293      	cmp	r3, r2
 80396ec:	d101      	bne.n	80396f2 <check_fs+0x9a>
 80396ee:	2300      	movs	r3, #0
 80396f0:	e000      	b.n	80396f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80396f2:	2302      	movs	r3, #2
}
 80396f4:	4618      	mov	r0, r3
 80396f6:	3708      	adds	r7, #8
 80396f8:	46bd      	mov	sp, r7
 80396fa:	bd80      	pop	{r7, pc}
 80396fc:	00544146 	.word	0x00544146
 8039700:	33544146 	.word	0x33544146

08039704 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8039704:	b580      	push	{r7, lr}
 8039706:	b096      	sub	sp, #88	; 0x58
 8039708:	af00      	add	r7, sp, #0
 803970a:	60f8      	str	r0, [r7, #12]
 803970c:	60b9      	str	r1, [r7, #8]
 803970e:	4613      	mov	r3, r2
 8039710:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8039712:	68bb      	ldr	r3, [r7, #8]
 8039714:	2200      	movs	r2, #0
 8039716:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8039718:	68f8      	ldr	r0, [r7, #12]
 803971a:	f7ff ff58 	bl	80395ce <get_ldnumber>
 803971e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8039720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8039722:	2b00      	cmp	r3, #0
 8039724:	da01      	bge.n	803972a <find_volume+0x26>
 8039726:	230b      	movs	r3, #11
 8039728:	e22e      	b.n	8039b88 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 803972a:	4aa8      	ldr	r2, [pc, #672]	; (80399cc <find_volume+0x2c8>)
 803972c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803972e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8039732:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8039734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039736:	2b00      	cmp	r3, #0
 8039738:	d101      	bne.n	803973e <find_volume+0x3a>
 803973a:	230c      	movs	r3, #12
 803973c:	e224      	b.n	8039b88 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 803973e:	68bb      	ldr	r3, [r7, #8]
 8039740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8039742:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8039744:	79fb      	ldrb	r3, [r7, #7]
 8039746:	f023 0301 	bic.w	r3, r3, #1
 803974a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 803974c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803974e:	781b      	ldrb	r3, [r3, #0]
 8039750:	2b00      	cmp	r3, #0
 8039752:	d01a      	beq.n	803978a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8039754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039756:	785b      	ldrb	r3, [r3, #1]
 8039758:	4618      	mov	r0, r3
 803975a:	f7fe fd17 	bl	803818c <disk_status>
 803975e:	4603      	mov	r3, r0
 8039760:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8039764:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8039768:	f003 0301 	and.w	r3, r3, #1
 803976c:	2b00      	cmp	r3, #0
 803976e:	d10c      	bne.n	803978a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8039770:	79fb      	ldrb	r3, [r7, #7]
 8039772:	2b00      	cmp	r3, #0
 8039774:	d007      	beq.n	8039786 <find_volume+0x82>
 8039776:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 803977a:	f003 0304 	and.w	r3, r3, #4
 803977e:	2b00      	cmp	r3, #0
 8039780:	d001      	beq.n	8039786 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8039782:	230a      	movs	r3, #10
 8039784:	e200      	b.n	8039b88 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8039786:	2300      	movs	r3, #0
 8039788:	e1fe      	b.n	8039b88 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 803978a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803978c:	2200      	movs	r2, #0
 803978e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8039790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8039792:	b2da      	uxtb	r2, r3
 8039794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039796:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8039798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803979a:	785b      	ldrb	r3, [r3, #1]
 803979c:	4618      	mov	r0, r3
 803979e:	f7fe fd0f 	bl	80381c0 <disk_initialize>
 80397a2:	4603      	mov	r3, r0
 80397a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80397a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80397ac:	f003 0301 	and.w	r3, r3, #1
 80397b0:	2b00      	cmp	r3, #0
 80397b2:	d001      	beq.n	80397b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80397b4:	2303      	movs	r3, #3
 80397b6:	e1e7      	b.n	8039b88 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80397b8:	79fb      	ldrb	r3, [r7, #7]
 80397ba:	2b00      	cmp	r3, #0
 80397bc:	d007      	beq.n	80397ce <find_volume+0xca>
 80397be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80397c2:	f003 0304 	and.w	r3, r3, #4
 80397c6:	2b00      	cmp	r3, #0
 80397c8:	d001      	beq.n	80397ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80397ca:	230a      	movs	r3, #10
 80397cc:	e1dc      	b.n	8039b88 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80397ce:	2300      	movs	r3, #0
 80397d0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80397d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80397d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80397d6:	f7ff ff3f 	bl	8039658 <check_fs>
 80397da:	4603      	mov	r3, r0
 80397dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80397e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80397e4:	2b02      	cmp	r3, #2
 80397e6:	d14b      	bne.n	8039880 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80397e8:	2300      	movs	r3, #0
 80397ea:	643b      	str	r3, [r7, #64]	; 0x40
 80397ec:	e01f      	b.n	803982e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80397ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80397f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80397f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80397f6:	011b      	lsls	r3, r3, #4
 80397f8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80397fc:	4413      	add	r3, r2
 80397fe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8039800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8039802:	3304      	adds	r3, #4
 8039804:	781b      	ldrb	r3, [r3, #0]
 8039806:	2b00      	cmp	r3, #0
 8039808:	d006      	beq.n	8039818 <find_volume+0x114>
 803980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803980c:	3308      	adds	r3, #8
 803980e:	4618      	mov	r0, r3
 8039810:	f7fe fd72 	bl	80382f8 <ld_dword>
 8039814:	4602      	mov	r2, r0
 8039816:	e000      	b.n	803981a <find_volume+0x116>
 8039818:	2200      	movs	r2, #0
 803981a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803981c:	009b      	lsls	r3, r3, #2
 803981e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8039822:	440b      	add	r3, r1
 8039824:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8039828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803982a:	3301      	adds	r3, #1
 803982c:	643b      	str	r3, [r7, #64]	; 0x40
 803982e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8039830:	2b03      	cmp	r3, #3
 8039832:	d9dc      	bls.n	80397ee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8039834:	2300      	movs	r3, #0
 8039836:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8039838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803983a:	2b00      	cmp	r3, #0
 803983c:	d002      	beq.n	8039844 <find_volume+0x140>
 803983e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8039840:	3b01      	subs	r3, #1
 8039842:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8039844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8039846:	009b      	lsls	r3, r3, #2
 8039848:	f107 0258 	add.w	r2, r7, #88	; 0x58
 803984c:	4413      	add	r3, r2
 803984e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8039852:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8039854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8039856:	2b00      	cmp	r3, #0
 8039858:	d005      	beq.n	8039866 <find_volume+0x162>
 803985a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 803985c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 803985e:	f7ff fefb 	bl	8039658 <check_fs>
 8039862:	4603      	mov	r3, r0
 8039864:	e000      	b.n	8039868 <find_volume+0x164>
 8039866:	2303      	movs	r3, #3
 8039868:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 803986c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8039870:	2b01      	cmp	r3, #1
 8039872:	d905      	bls.n	8039880 <find_volume+0x17c>
 8039874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8039876:	3301      	adds	r3, #1
 8039878:	643b      	str	r3, [r7, #64]	; 0x40
 803987a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803987c:	2b03      	cmp	r3, #3
 803987e:	d9e1      	bls.n	8039844 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8039880:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8039884:	2b04      	cmp	r3, #4
 8039886:	d101      	bne.n	803988c <find_volume+0x188>
 8039888:	2301      	movs	r3, #1
 803988a:	e17d      	b.n	8039b88 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 803988c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8039890:	2b01      	cmp	r3, #1
 8039892:	d901      	bls.n	8039898 <find_volume+0x194>
 8039894:	230d      	movs	r3, #13
 8039896:	e177      	b.n	8039b88 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8039898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803989a:	3330      	adds	r3, #48	; 0x30
 803989c:	330b      	adds	r3, #11
 803989e:	4618      	mov	r0, r3
 80398a0:	f7fe fd12 	bl	80382c8 <ld_word>
 80398a4:	4603      	mov	r3, r0
 80398a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80398aa:	d001      	beq.n	80398b0 <find_volume+0x1ac>
 80398ac:	230d      	movs	r3, #13
 80398ae:	e16b      	b.n	8039b88 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80398b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80398b2:	3330      	adds	r3, #48	; 0x30
 80398b4:	3316      	adds	r3, #22
 80398b6:	4618      	mov	r0, r3
 80398b8:	f7fe fd06 	bl	80382c8 <ld_word>
 80398bc:	4603      	mov	r3, r0
 80398be:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80398c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80398c2:	2b00      	cmp	r3, #0
 80398c4:	d106      	bne.n	80398d4 <find_volume+0x1d0>
 80398c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80398c8:	3330      	adds	r3, #48	; 0x30
 80398ca:	3324      	adds	r3, #36	; 0x24
 80398cc:	4618      	mov	r0, r3
 80398ce:	f7fe fd13 	bl	80382f8 <ld_dword>
 80398d2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80398d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80398d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80398d8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80398da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80398dc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80398e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80398e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80398e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80398e6:	789b      	ldrb	r3, [r3, #2]
 80398e8:	2b01      	cmp	r3, #1
 80398ea:	d005      	beq.n	80398f8 <find_volume+0x1f4>
 80398ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80398ee:	789b      	ldrb	r3, [r3, #2]
 80398f0:	2b02      	cmp	r3, #2
 80398f2:	d001      	beq.n	80398f8 <find_volume+0x1f4>
 80398f4:	230d      	movs	r3, #13
 80398f6:	e147      	b.n	8039b88 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80398f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80398fa:	789b      	ldrb	r3, [r3, #2]
 80398fc:	461a      	mov	r2, r3
 80398fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8039900:	fb02 f303 	mul.w	r3, r2, r3
 8039904:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8039906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803990c:	b29a      	uxth	r2, r3
 803990e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039910:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8039912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039914:	895b      	ldrh	r3, [r3, #10]
 8039916:	2b00      	cmp	r3, #0
 8039918:	d008      	beq.n	803992c <find_volume+0x228>
 803991a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803991c:	895b      	ldrh	r3, [r3, #10]
 803991e:	461a      	mov	r2, r3
 8039920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039922:	895b      	ldrh	r3, [r3, #10]
 8039924:	3b01      	subs	r3, #1
 8039926:	4013      	ands	r3, r2
 8039928:	2b00      	cmp	r3, #0
 803992a:	d001      	beq.n	8039930 <find_volume+0x22c>
 803992c:	230d      	movs	r3, #13
 803992e:	e12b      	b.n	8039b88 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8039930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039932:	3330      	adds	r3, #48	; 0x30
 8039934:	3311      	adds	r3, #17
 8039936:	4618      	mov	r0, r3
 8039938:	f7fe fcc6 	bl	80382c8 <ld_word>
 803993c:	4603      	mov	r3, r0
 803993e:	461a      	mov	r2, r3
 8039940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039942:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8039944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039946:	891b      	ldrh	r3, [r3, #8]
 8039948:	f003 030f 	and.w	r3, r3, #15
 803994c:	b29b      	uxth	r3, r3
 803994e:	2b00      	cmp	r3, #0
 8039950:	d001      	beq.n	8039956 <find_volume+0x252>
 8039952:	230d      	movs	r3, #13
 8039954:	e118      	b.n	8039b88 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8039956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039958:	3330      	adds	r3, #48	; 0x30
 803995a:	3313      	adds	r3, #19
 803995c:	4618      	mov	r0, r3
 803995e:	f7fe fcb3 	bl	80382c8 <ld_word>
 8039962:	4603      	mov	r3, r0
 8039964:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8039966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8039968:	2b00      	cmp	r3, #0
 803996a:	d106      	bne.n	803997a <find_volume+0x276>
 803996c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803996e:	3330      	adds	r3, #48	; 0x30
 8039970:	3320      	adds	r3, #32
 8039972:	4618      	mov	r0, r3
 8039974:	f7fe fcc0 	bl	80382f8 <ld_dword>
 8039978:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 803997a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803997c:	3330      	adds	r3, #48	; 0x30
 803997e:	330e      	adds	r3, #14
 8039980:	4618      	mov	r0, r3
 8039982:	f7fe fca1 	bl	80382c8 <ld_word>
 8039986:	4603      	mov	r3, r0
 8039988:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 803998a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 803998c:	2b00      	cmp	r3, #0
 803998e:	d101      	bne.n	8039994 <find_volume+0x290>
 8039990:	230d      	movs	r3, #13
 8039992:	e0f9      	b.n	8039b88 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8039994:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8039996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8039998:	4413      	add	r3, r2
 803999a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803999c:	8912      	ldrh	r2, [r2, #8]
 803999e:	0912      	lsrs	r2, r2, #4
 80399a0:	b292      	uxth	r2, r2
 80399a2:	4413      	add	r3, r2
 80399a4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80399a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80399a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80399aa:	429a      	cmp	r2, r3
 80399ac:	d201      	bcs.n	80399b2 <find_volume+0x2ae>
 80399ae:	230d      	movs	r3, #13
 80399b0:	e0ea      	b.n	8039b88 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80399b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80399b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80399b6:	1ad3      	subs	r3, r2, r3
 80399b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80399ba:	8952      	ldrh	r2, [r2, #10]
 80399bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80399c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80399c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80399c4:	2b00      	cmp	r3, #0
 80399c6:	d103      	bne.n	80399d0 <find_volume+0x2cc>
 80399c8:	230d      	movs	r3, #13
 80399ca:	e0dd      	b.n	8039b88 <find_volume+0x484>
 80399cc:	20000438 	.word	0x20000438
		fmt = FS_FAT32;
 80399d0:	2303      	movs	r3, #3
 80399d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80399d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80399d8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80399dc:	4293      	cmp	r3, r2
 80399de:	d802      	bhi.n	80399e6 <find_volume+0x2e2>
 80399e0:	2302      	movs	r3, #2
 80399e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80399e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80399e8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80399ec:	4293      	cmp	r3, r2
 80399ee:	d802      	bhi.n	80399f6 <find_volume+0x2f2>
 80399f0:	2301      	movs	r3, #1
 80399f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80399f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80399f8:	1c9a      	adds	r2, r3, #2
 80399fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80399fc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80399fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039a00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8039a02:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8039a04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8039a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8039a08:	441a      	add	r2, r3
 8039a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039a0c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8039a0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8039a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8039a12:	441a      	add	r2, r3
 8039a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039a16:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8039a18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8039a1c:	2b03      	cmp	r3, #3
 8039a1e:	d11e      	bne.n	8039a5e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8039a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039a22:	3330      	adds	r3, #48	; 0x30
 8039a24:	332a      	adds	r3, #42	; 0x2a
 8039a26:	4618      	mov	r0, r3
 8039a28:	f7fe fc4e 	bl	80382c8 <ld_word>
 8039a2c:	4603      	mov	r3, r0
 8039a2e:	2b00      	cmp	r3, #0
 8039a30:	d001      	beq.n	8039a36 <find_volume+0x332>
 8039a32:	230d      	movs	r3, #13
 8039a34:	e0a8      	b.n	8039b88 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8039a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039a38:	891b      	ldrh	r3, [r3, #8]
 8039a3a:	2b00      	cmp	r3, #0
 8039a3c:	d001      	beq.n	8039a42 <find_volume+0x33e>
 8039a3e:	230d      	movs	r3, #13
 8039a40:	e0a2      	b.n	8039b88 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8039a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039a44:	3330      	adds	r3, #48	; 0x30
 8039a46:	332c      	adds	r3, #44	; 0x2c
 8039a48:	4618      	mov	r0, r3
 8039a4a:	f7fe fc55 	bl	80382f8 <ld_dword>
 8039a4e:	4602      	mov	r2, r0
 8039a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039a52:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8039a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039a56:	695b      	ldr	r3, [r3, #20]
 8039a58:	009b      	lsls	r3, r3, #2
 8039a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8039a5c:	e01f      	b.n	8039a9e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8039a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039a60:	891b      	ldrh	r3, [r3, #8]
 8039a62:	2b00      	cmp	r3, #0
 8039a64:	d101      	bne.n	8039a6a <find_volume+0x366>
 8039a66:	230d      	movs	r3, #13
 8039a68:	e08e      	b.n	8039b88 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8039a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039a6c:	6a1a      	ldr	r2, [r3, #32]
 8039a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8039a70:	441a      	add	r2, r3
 8039a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039a74:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8039a76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8039a7a:	2b02      	cmp	r3, #2
 8039a7c:	d103      	bne.n	8039a86 <find_volume+0x382>
 8039a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039a80:	695b      	ldr	r3, [r3, #20]
 8039a82:	005b      	lsls	r3, r3, #1
 8039a84:	e00a      	b.n	8039a9c <find_volume+0x398>
 8039a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039a88:	695a      	ldr	r2, [r3, #20]
 8039a8a:	4613      	mov	r3, r2
 8039a8c:	005b      	lsls	r3, r3, #1
 8039a8e:	4413      	add	r3, r2
 8039a90:	085a      	lsrs	r2, r3, #1
 8039a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039a94:	695b      	ldr	r3, [r3, #20]
 8039a96:	f003 0301 	and.w	r3, r3, #1
 8039a9a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8039a9c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8039a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039aa0:	699a      	ldr	r2, [r3, #24]
 8039aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8039aa4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8039aa8:	0a5b      	lsrs	r3, r3, #9
 8039aaa:	429a      	cmp	r2, r3
 8039aac:	d201      	bcs.n	8039ab2 <find_volume+0x3ae>
 8039aae:	230d      	movs	r3, #13
 8039ab0:	e06a      	b.n	8039b88 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8039ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8039ab8:	611a      	str	r2, [r3, #16]
 8039aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039abc:	691a      	ldr	r2, [r3, #16]
 8039abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039ac0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8039ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039ac4:	2280      	movs	r2, #128	; 0x80
 8039ac6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8039ac8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8039acc:	2b03      	cmp	r3, #3
 8039ace:	d149      	bne.n	8039b64 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8039ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039ad2:	3330      	adds	r3, #48	; 0x30
 8039ad4:	3330      	adds	r3, #48	; 0x30
 8039ad6:	4618      	mov	r0, r3
 8039ad8:	f7fe fbf6 	bl	80382c8 <ld_word>
 8039adc:	4603      	mov	r3, r0
 8039ade:	2b01      	cmp	r3, #1
 8039ae0:	d140      	bne.n	8039b64 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8039ae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8039ae4:	3301      	adds	r3, #1
 8039ae6:	4619      	mov	r1, r3
 8039ae8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8039aea:	f7fe fe9d 	bl	8038828 <move_window>
 8039aee:	4603      	mov	r3, r0
 8039af0:	2b00      	cmp	r3, #0
 8039af2:	d137      	bne.n	8039b64 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8039af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039af6:	2200      	movs	r2, #0
 8039af8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8039afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039afc:	3330      	adds	r3, #48	; 0x30
 8039afe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8039b02:	4618      	mov	r0, r3
 8039b04:	f7fe fbe0 	bl	80382c8 <ld_word>
 8039b08:	4603      	mov	r3, r0
 8039b0a:	461a      	mov	r2, r3
 8039b0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8039b10:	429a      	cmp	r2, r3
 8039b12:	d127      	bne.n	8039b64 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8039b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039b16:	3330      	adds	r3, #48	; 0x30
 8039b18:	4618      	mov	r0, r3
 8039b1a:	f7fe fbed 	bl	80382f8 <ld_dword>
 8039b1e:	4603      	mov	r3, r0
 8039b20:	4a1b      	ldr	r2, [pc, #108]	; (8039b90 <find_volume+0x48c>)
 8039b22:	4293      	cmp	r3, r2
 8039b24:	d11e      	bne.n	8039b64 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8039b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039b28:	3330      	adds	r3, #48	; 0x30
 8039b2a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8039b2e:	4618      	mov	r0, r3
 8039b30:	f7fe fbe2 	bl	80382f8 <ld_dword>
 8039b34:	4603      	mov	r3, r0
 8039b36:	4a17      	ldr	r2, [pc, #92]	; (8039b94 <find_volume+0x490>)
 8039b38:	4293      	cmp	r3, r2
 8039b3a:	d113      	bne.n	8039b64 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8039b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039b3e:	3330      	adds	r3, #48	; 0x30
 8039b40:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8039b44:	4618      	mov	r0, r3
 8039b46:	f7fe fbd7 	bl	80382f8 <ld_dword>
 8039b4a:	4602      	mov	r2, r0
 8039b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039b4e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8039b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039b52:	3330      	adds	r3, #48	; 0x30
 8039b54:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8039b58:	4618      	mov	r0, r3
 8039b5a:	f7fe fbcd 	bl	80382f8 <ld_dword>
 8039b5e:	4602      	mov	r2, r0
 8039b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039b62:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8039b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039b66:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8039b6a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8039b6c:	4b0a      	ldr	r3, [pc, #40]	; (8039b98 <find_volume+0x494>)
 8039b6e:	881b      	ldrh	r3, [r3, #0]
 8039b70:	3301      	adds	r3, #1
 8039b72:	b29a      	uxth	r2, r3
 8039b74:	4b08      	ldr	r3, [pc, #32]	; (8039b98 <find_volume+0x494>)
 8039b76:	801a      	strh	r2, [r3, #0]
 8039b78:	4b07      	ldr	r3, [pc, #28]	; (8039b98 <find_volume+0x494>)
 8039b7a:	881a      	ldrh	r2, [r3, #0]
 8039b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8039b7e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8039b80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8039b82:	f7fe fde9 	bl	8038758 <clear_lock>
#endif
	return FR_OK;
 8039b86:	2300      	movs	r3, #0
}
 8039b88:	4618      	mov	r0, r3
 8039b8a:	3758      	adds	r7, #88	; 0x58
 8039b8c:	46bd      	mov	sp, r7
 8039b8e:	bd80      	pop	{r7, pc}
 8039b90:	41615252 	.word	0x41615252
 8039b94:	61417272 	.word	0x61417272
 8039b98:	2000043c 	.word	0x2000043c

08039b9c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8039b9c:	b580      	push	{r7, lr}
 8039b9e:	b084      	sub	sp, #16
 8039ba0:	af00      	add	r7, sp, #0
 8039ba2:	6078      	str	r0, [r7, #4]
 8039ba4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8039ba6:	2309      	movs	r3, #9
 8039ba8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8039baa:	687b      	ldr	r3, [r7, #4]
 8039bac:	2b00      	cmp	r3, #0
 8039bae:	d01c      	beq.n	8039bea <validate+0x4e>
 8039bb0:	687b      	ldr	r3, [r7, #4]
 8039bb2:	681b      	ldr	r3, [r3, #0]
 8039bb4:	2b00      	cmp	r3, #0
 8039bb6:	d018      	beq.n	8039bea <validate+0x4e>
 8039bb8:	687b      	ldr	r3, [r7, #4]
 8039bba:	681b      	ldr	r3, [r3, #0]
 8039bbc:	781b      	ldrb	r3, [r3, #0]
 8039bbe:	2b00      	cmp	r3, #0
 8039bc0:	d013      	beq.n	8039bea <validate+0x4e>
 8039bc2:	687b      	ldr	r3, [r7, #4]
 8039bc4:	889a      	ldrh	r2, [r3, #4]
 8039bc6:	687b      	ldr	r3, [r7, #4]
 8039bc8:	681b      	ldr	r3, [r3, #0]
 8039bca:	88db      	ldrh	r3, [r3, #6]
 8039bcc:	429a      	cmp	r2, r3
 8039bce:	d10c      	bne.n	8039bea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8039bd0:	687b      	ldr	r3, [r7, #4]
 8039bd2:	681b      	ldr	r3, [r3, #0]
 8039bd4:	785b      	ldrb	r3, [r3, #1]
 8039bd6:	4618      	mov	r0, r3
 8039bd8:	f7fe fad8 	bl	803818c <disk_status>
 8039bdc:	4603      	mov	r3, r0
 8039bde:	f003 0301 	and.w	r3, r3, #1
 8039be2:	2b00      	cmp	r3, #0
 8039be4:	d101      	bne.n	8039bea <validate+0x4e>
			res = FR_OK;
 8039be6:	2300      	movs	r3, #0
 8039be8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8039bea:	7bfb      	ldrb	r3, [r7, #15]
 8039bec:	2b00      	cmp	r3, #0
 8039bee:	d102      	bne.n	8039bf6 <validate+0x5a>
 8039bf0:	687b      	ldr	r3, [r7, #4]
 8039bf2:	681b      	ldr	r3, [r3, #0]
 8039bf4:	e000      	b.n	8039bf8 <validate+0x5c>
 8039bf6:	2300      	movs	r3, #0
 8039bf8:	683a      	ldr	r2, [r7, #0]
 8039bfa:	6013      	str	r3, [r2, #0]
	return res;
 8039bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8039bfe:	4618      	mov	r0, r3
 8039c00:	3710      	adds	r7, #16
 8039c02:	46bd      	mov	sp, r7
 8039c04:	bd80      	pop	{r7, pc}
	...

08039c08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8039c08:	b580      	push	{r7, lr}
 8039c0a:	b088      	sub	sp, #32
 8039c0c:	af00      	add	r7, sp, #0
 8039c0e:	60f8      	str	r0, [r7, #12]
 8039c10:	60b9      	str	r1, [r7, #8]
 8039c12:	4613      	mov	r3, r2
 8039c14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8039c16:	68bb      	ldr	r3, [r7, #8]
 8039c18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8039c1a:	f107 0310 	add.w	r3, r7, #16
 8039c1e:	4618      	mov	r0, r3
 8039c20:	f7ff fcd5 	bl	80395ce <get_ldnumber>
 8039c24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8039c26:	69fb      	ldr	r3, [r7, #28]
 8039c28:	2b00      	cmp	r3, #0
 8039c2a:	da01      	bge.n	8039c30 <f_mount+0x28>
 8039c2c:	230b      	movs	r3, #11
 8039c2e:	e02b      	b.n	8039c88 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8039c30:	4a17      	ldr	r2, [pc, #92]	; (8039c90 <f_mount+0x88>)
 8039c32:	69fb      	ldr	r3, [r7, #28]
 8039c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8039c38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8039c3a:	69bb      	ldr	r3, [r7, #24]
 8039c3c:	2b00      	cmp	r3, #0
 8039c3e:	d005      	beq.n	8039c4c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8039c40:	69b8      	ldr	r0, [r7, #24]
 8039c42:	f7fe fd89 	bl	8038758 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8039c46:	69bb      	ldr	r3, [r7, #24]
 8039c48:	2200      	movs	r2, #0
 8039c4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8039c4c:	68fb      	ldr	r3, [r7, #12]
 8039c4e:	2b00      	cmp	r3, #0
 8039c50:	d002      	beq.n	8039c58 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8039c52:	68fb      	ldr	r3, [r7, #12]
 8039c54:	2200      	movs	r2, #0
 8039c56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8039c58:	68fa      	ldr	r2, [r7, #12]
 8039c5a:	490d      	ldr	r1, [pc, #52]	; (8039c90 <f_mount+0x88>)
 8039c5c:	69fb      	ldr	r3, [r7, #28]
 8039c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8039c62:	68fb      	ldr	r3, [r7, #12]
 8039c64:	2b00      	cmp	r3, #0
 8039c66:	d002      	beq.n	8039c6e <f_mount+0x66>
 8039c68:	79fb      	ldrb	r3, [r7, #7]
 8039c6a:	2b01      	cmp	r3, #1
 8039c6c:	d001      	beq.n	8039c72 <f_mount+0x6a>
 8039c6e:	2300      	movs	r3, #0
 8039c70:	e00a      	b.n	8039c88 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8039c72:	f107 010c 	add.w	r1, r7, #12
 8039c76:	f107 0308 	add.w	r3, r7, #8
 8039c7a:	2200      	movs	r2, #0
 8039c7c:	4618      	mov	r0, r3
 8039c7e:	f7ff fd41 	bl	8039704 <find_volume>
 8039c82:	4603      	mov	r3, r0
 8039c84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8039c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8039c88:	4618      	mov	r0, r3
 8039c8a:	3720      	adds	r7, #32
 8039c8c:	46bd      	mov	sp, r7
 8039c8e:	bd80      	pop	{r7, pc}
 8039c90:	20000438 	.word	0x20000438

08039c94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8039c94:	b580      	push	{r7, lr}
 8039c96:	b098      	sub	sp, #96	; 0x60
 8039c98:	af00      	add	r7, sp, #0
 8039c9a:	60f8      	str	r0, [r7, #12]
 8039c9c:	60b9      	str	r1, [r7, #8]
 8039c9e:	4613      	mov	r3, r2
 8039ca0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8039ca2:	68fb      	ldr	r3, [r7, #12]
 8039ca4:	2b00      	cmp	r3, #0
 8039ca6:	d101      	bne.n	8039cac <f_open+0x18>
 8039ca8:	2309      	movs	r3, #9
 8039caa:	e1ad      	b.n	803a008 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8039cac:	79fb      	ldrb	r3, [r7, #7]
 8039cae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8039cb2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8039cb4:	79fa      	ldrb	r2, [r7, #7]
 8039cb6:	f107 0110 	add.w	r1, r7, #16
 8039cba:	f107 0308 	add.w	r3, r7, #8
 8039cbe:	4618      	mov	r0, r3
 8039cc0:	f7ff fd20 	bl	8039704 <find_volume>
 8039cc4:	4603      	mov	r3, r0
 8039cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8039cca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8039cce:	2b00      	cmp	r3, #0
 8039cd0:	f040 8191 	bne.w	8039ff6 <f_open+0x362>
		dj.obj.fs = fs;
 8039cd4:	693b      	ldr	r3, [r7, #16]
 8039cd6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8039cd8:	68ba      	ldr	r2, [r7, #8]
 8039cda:	f107 0314 	add.w	r3, r7, #20
 8039cde:	4611      	mov	r1, r2
 8039ce0:	4618      	mov	r0, r3
 8039ce2:	f7ff fc03 	bl	80394ec <follow_path>
 8039ce6:	4603      	mov	r3, r0
 8039ce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8039cec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8039cf0:	2b00      	cmp	r3, #0
 8039cf2:	d11a      	bne.n	8039d2a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8039cf4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8039cf8:	b25b      	sxtb	r3, r3
 8039cfa:	2b00      	cmp	r3, #0
 8039cfc:	da03      	bge.n	8039d06 <f_open+0x72>
				res = FR_INVALID_NAME;
 8039cfe:	2306      	movs	r3, #6
 8039d00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8039d04:	e011      	b.n	8039d2a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8039d06:	79fb      	ldrb	r3, [r7, #7]
 8039d08:	f023 0301 	bic.w	r3, r3, #1
 8039d0c:	2b00      	cmp	r3, #0
 8039d0e:	bf14      	ite	ne
 8039d10:	2301      	movne	r3, #1
 8039d12:	2300      	moveq	r3, #0
 8039d14:	b2db      	uxtb	r3, r3
 8039d16:	461a      	mov	r2, r3
 8039d18:	f107 0314 	add.w	r3, r7, #20
 8039d1c:	4611      	mov	r1, r2
 8039d1e:	4618      	mov	r0, r3
 8039d20:	f7fe fbd2 	bl	80384c8 <chk_lock>
 8039d24:	4603      	mov	r3, r0
 8039d26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8039d2a:	79fb      	ldrb	r3, [r7, #7]
 8039d2c:	f003 031c 	and.w	r3, r3, #28
 8039d30:	2b00      	cmp	r3, #0
 8039d32:	d07f      	beq.n	8039e34 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8039d34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8039d38:	2b00      	cmp	r3, #0
 8039d3a:	d017      	beq.n	8039d6c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8039d3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8039d40:	2b04      	cmp	r3, #4
 8039d42:	d10e      	bne.n	8039d62 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8039d44:	f7fe fc1c 	bl	8038580 <enq_lock>
 8039d48:	4603      	mov	r3, r0
 8039d4a:	2b00      	cmp	r3, #0
 8039d4c:	d006      	beq.n	8039d5c <f_open+0xc8>
 8039d4e:	f107 0314 	add.w	r3, r7, #20
 8039d52:	4618      	mov	r0, r3
 8039d54:	f7ff fb03 	bl	803935e <dir_register>
 8039d58:	4603      	mov	r3, r0
 8039d5a:	e000      	b.n	8039d5e <f_open+0xca>
 8039d5c:	2312      	movs	r3, #18
 8039d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8039d62:	79fb      	ldrb	r3, [r7, #7]
 8039d64:	f043 0308 	orr.w	r3, r3, #8
 8039d68:	71fb      	strb	r3, [r7, #7]
 8039d6a:	e010      	b.n	8039d8e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8039d6c:	7ebb      	ldrb	r3, [r7, #26]
 8039d6e:	f003 0311 	and.w	r3, r3, #17
 8039d72:	2b00      	cmp	r3, #0
 8039d74:	d003      	beq.n	8039d7e <f_open+0xea>
					res = FR_DENIED;
 8039d76:	2307      	movs	r3, #7
 8039d78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8039d7c:	e007      	b.n	8039d8e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8039d7e:	79fb      	ldrb	r3, [r7, #7]
 8039d80:	f003 0304 	and.w	r3, r3, #4
 8039d84:	2b00      	cmp	r3, #0
 8039d86:	d002      	beq.n	8039d8e <f_open+0xfa>
 8039d88:	2308      	movs	r3, #8
 8039d8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8039d8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8039d92:	2b00      	cmp	r3, #0
 8039d94:	d168      	bne.n	8039e68 <f_open+0x1d4>
 8039d96:	79fb      	ldrb	r3, [r7, #7]
 8039d98:	f003 0308 	and.w	r3, r3, #8
 8039d9c:	2b00      	cmp	r3, #0
 8039d9e:	d063      	beq.n	8039e68 <f_open+0x1d4>
				dw = GET_FATTIME();
 8039da0:	f7fe f888 	bl	8037eb4 <get_fattime>
 8039da4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8039da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8039da8:	330e      	adds	r3, #14
 8039daa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8039dac:	4618      	mov	r0, r3
 8039dae:	f7fe fae1 	bl	8038374 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8039db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8039db4:	3316      	adds	r3, #22
 8039db6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8039db8:	4618      	mov	r0, r3
 8039dba:	f7fe fadb 	bl	8038374 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8039dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8039dc0:	330b      	adds	r3, #11
 8039dc2:	2220      	movs	r2, #32
 8039dc4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8039dc6:	693b      	ldr	r3, [r7, #16]
 8039dc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8039dca:	4611      	mov	r1, r2
 8039dcc:	4618      	mov	r0, r3
 8039dce:	f7ff fa32 	bl	8039236 <ld_clust>
 8039dd2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8039dd4:	693b      	ldr	r3, [r7, #16]
 8039dd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8039dd8:	2200      	movs	r2, #0
 8039dda:	4618      	mov	r0, r3
 8039ddc:	f7ff fa4a 	bl	8039274 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8039de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8039de2:	331c      	adds	r3, #28
 8039de4:	2100      	movs	r1, #0
 8039de6:	4618      	mov	r0, r3
 8039de8:	f7fe fac4 	bl	8038374 <st_dword>
					fs->wflag = 1;
 8039dec:	693b      	ldr	r3, [r7, #16]
 8039dee:	2201      	movs	r2, #1
 8039df0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8039df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8039df4:	2b00      	cmp	r3, #0
 8039df6:	d037      	beq.n	8039e68 <f_open+0x1d4>
						dw = fs->winsect;
 8039df8:	693b      	ldr	r3, [r7, #16]
 8039dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8039dfc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8039dfe:	f107 0314 	add.w	r3, r7, #20
 8039e02:	2200      	movs	r2, #0
 8039e04:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8039e06:	4618      	mov	r0, r3
 8039e08:	f7fe ff5d 	bl	8038cc6 <remove_chain>
 8039e0c:	4603      	mov	r3, r0
 8039e0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8039e12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8039e16:	2b00      	cmp	r3, #0
 8039e18:	d126      	bne.n	8039e68 <f_open+0x1d4>
							res = move_window(fs, dw);
 8039e1a:	693b      	ldr	r3, [r7, #16]
 8039e1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8039e1e:	4618      	mov	r0, r3
 8039e20:	f7fe fd02 	bl	8038828 <move_window>
 8039e24:	4603      	mov	r3, r0
 8039e26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8039e2a:	693b      	ldr	r3, [r7, #16]
 8039e2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8039e2e:	3a01      	subs	r2, #1
 8039e30:	60da      	str	r2, [r3, #12]
 8039e32:	e019      	b.n	8039e68 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8039e34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8039e38:	2b00      	cmp	r3, #0
 8039e3a:	d115      	bne.n	8039e68 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8039e3c:	7ebb      	ldrb	r3, [r7, #26]
 8039e3e:	f003 0310 	and.w	r3, r3, #16
 8039e42:	2b00      	cmp	r3, #0
 8039e44:	d003      	beq.n	8039e4e <f_open+0x1ba>
					res = FR_NO_FILE;
 8039e46:	2304      	movs	r3, #4
 8039e48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8039e4c:	e00c      	b.n	8039e68 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8039e4e:	79fb      	ldrb	r3, [r7, #7]
 8039e50:	f003 0302 	and.w	r3, r3, #2
 8039e54:	2b00      	cmp	r3, #0
 8039e56:	d007      	beq.n	8039e68 <f_open+0x1d4>
 8039e58:	7ebb      	ldrb	r3, [r7, #26]
 8039e5a:	f003 0301 	and.w	r3, r3, #1
 8039e5e:	2b00      	cmp	r3, #0
 8039e60:	d002      	beq.n	8039e68 <f_open+0x1d4>
						res = FR_DENIED;
 8039e62:	2307      	movs	r3, #7
 8039e64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8039e68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8039e6c:	2b00      	cmp	r3, #0
 8039e6e:	d128      	bne.n	8039ec2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8039e70:	79fb      	ldrb	r3, [r7, #7]
 8039e72:	f003 0308 	and.w	r3, r3, #8
 8039e76:	2b00      	cmp	r3, #0
 8039e78:	d003      	beq.n	8039e82 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8039e7a:	79fb      	ldrb	r3, [r7, #7]
 8039e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8039e80:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8039e82:	693b      	ldr	r3, [r7, #16]
 8039e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8039e86:	68fb      	ldr	r3, [r7, #12]
 8039e88:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8039e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8039e8c:	68fb      	ldr	r3, [r7, #12]
 8039e8e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8039e90:	79fb      	ldrb	r3, [r7, #7]
 8039e92:	f023 0301 	bic.w	r3, r3, #1
 8039e96:	2b00      	cmp	r3, #0
 8039e98:	bf14      	ite	ne
 8039e9a:	2301      	movne	r3, #1
 8039e9c:	2300      	moveq	r3, #0
 8039e9e:	b2db      	uxtb	r3, r3
 8039ea0:	461a      	mov	r2, r3
 8039ea2:	f107 0314 	add.w	r3, r7, #20
 8039ea6:	4611      	mov	r1, r2
 8039ea8:	4618      	mov	r0, r3
 8039eaa:	f7fe fb8b 	bl	80385c4 <inc_lock>
 8039eae:	4602      	mov	r2, r0
 8039eb0:	68fb      	ldr	r3, [r7, #12]
 8039eb2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8039eb4:	68fb      	ldr	r3, [r7, #12]
 8039eb6:	691b      	ldr	r3, [r3, #16]
 8039eb8:	2b00      	cmp	r3, #0
 8039eba:	d102      	bne.n	8039ec2 <f_open+0x22e>
 8039ebc:	2302      	movs	r3, #2
 8039ebe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8039ec2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8039ec6:	2b00      	cmp	r3, #0
 8039ec8:	f040 8095 	bne.w	8039ff6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8039ecc:	693b      	ldr	r3, [r7, #16]
 8039ece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8039ed0:	4611      	mov	r1, r2
 8039ed2:	4618      	mov	r0, r3
 8039ed4:	f7ff f9af 	bl	8039236 <ld_clust>
 8039ed8:	4602      	mov	r2, r0
 8039eda:	68fb      	ldr	r3, [r7, #12]
 8039edc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8039ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8039ee0:	331c      	adds	r3, #28
 8039ee2:	4618      	mov	r0, r3
 8039ee4:	f7fe fa08 	bl	80382f8 <ld_dword>
 8039ee8:	4602      	mov	r2, r0
 8039eea:	68fb      	ldr	r3, [r7, #12]
 8039eec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8039eee:	68fb      	ldr	r3, [r7, #12]
 8039ef0:	2200      	movs	r2, #0
 8039ef2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8039ef4:	693a      	ldr	r2, [r7, #16]
 8039ef6:	68fb      	ldr	r3, [r7, #12]
 8039ef8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8039efa:	693b      	ldr	r3, [r7, #16]
 8039efc:	88da      	ldrh	r2, [r3, #6]
 8039efe:	68fb      	ldr	r3, [r7, #12]
 8039f00:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8039f02:	68fb      	ldr	r3, [r7, #12]
 8039f04:	79fa      	ldrb	r2, [r7, #7]
 8039f06:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8039f08:	68fb      	ldr	r3, [r7, #12]
 8039f0a:	2200      	movs	r2, #0
 8039f0c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8039f0e:	68fb      	ldr	r3, [r7, #12]
 8039f10:	2200      	movs	r2, #0
 8039f12:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8039f14:	68fb      	ldr	r3, [r7, #12]
 8039f16:	2200      	movs	r2, #0
 8039f18:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8039f1a:	68fb      	ldr	r3, [r7, #12]
 8039f1c:	3330      	adds	r3, #48	; 0x30
 8039f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8039f22:	2100      	movs	r1, #0
 8039f24:	4618      	mov	r0, r3
 8039f26:	f7fe fa72 	bl	803840e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8039f2a:	79fb      	ldrb	r3, [r7, #7]
 8039f2c:	f003 0320 	and.w	r3, r3, #32
 8039f30:	2b00      	cmp	r3, #0
 8039f32:	d060      	beq.n	8039ff6 <f_open+0x362>
 8039f34:	68fb      	ldr	r3, [r7, #12]
 8039f36:	68db      	ldr	r3, [r3, #12]
 8039f38:	2b00      	cmp	r3, #0
 8039f3a:	d05c      	beq.n	8039ff6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8039f3c:	68fb      	ldr	r3, [r7, #12]
 8039f3e:	68da      	ldr	r2, [r3, #12]
 8039f40:	68fb      	ldr	r3, [r7, #12]
 8039f42:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8039f44:	693b      	ldr	r3, [r7, #16]
 8039f46:	895b      	ldrh	r3, [r3, #10]
 8039f48:	025b      	lsls	r3, r3, #9
 8039f4a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8039f4c:	68fb      	ldr	r3, [r7, #12]
 8039f4e:	689b      	ldr	r3, [r3, #8]
 8039f50:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8039f52:	68fb      	ldr	r3, [r7, #12]
 8039f54:	68db      	ldr	r3, [r3, #12]
 8039f56:	657b      	str	r3, [r7, #84]	; 0x54
 8039f58:	e016      	b.n	8039f88 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8039f5a:	68fb      	ldr	r3, [r7, #12]
 8039f5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8039f5e:	4618      	mov	r0, r3
 8039f60:	f7fe fd1d 	bl	803899e <get_fat>
 8039f64:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8039f66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8039f68:	2b01      	cmp	r3, #1
 8039f6a:	d802      	bhi.n	8039f72 <f_open+0x2de>
 8039f6c:	2302      	movs	r3, #2
 8039f6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8039f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8039f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8039f78:	d102      	bne.n	8039f80 <f_open+0x2ec>
 8039f7a:	2301      	movs	r3, #1
 8039f7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8039f80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8039f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8039f84:	1ad3      	subs	r3, r2, r3
 8039f86:	657b      	str	r3, [r7, #84]	; 0x54
 8039f88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8039f8c:	2b00      	cmp	r3, #0
 8039f8e:	d103      	bne.n	8039f98 <f_open+0x304>
 8039f90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8039f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8039f94:	429a      	cmp	r2, r3
 8039f96:	d8e0      	bhi.n	8039f5a <f_open+0x2c6>
				}
				fp->clust = clst;
 8039f98:	68fb      	ldr	r3, [r7, #12]
 8039f9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8039f9c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8039f9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8039fa2:	2b00      	cmp	r3, #0
 8039fa4:	d127      	bne.n	8039ff6 <f_open+0x362>
 8039fa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8039fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8039fac:	2b00      	cmp	r3, #0
 8039fae:	d022      	beq.n	8039ff6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8039fb0:	693b      	ldr	r3, [r7, #16]
 8039fb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8039fb4:	4618      	mov	r0, r3
 8039fb6:	f7fe fcd3 	bl	8038960 <clust2sect>
 8039fba:	6478      	str	r0, [r7, #68]	; 0x44
 8039fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8039fbe:	2b00      	cmp	r3, #0
 8039fc0:	d103      	bne.n	8039fca <f_open+0x336>
						res = FR_INT_ERR;
 8039fc2:	2302      	movs	r3, #2
 8039fc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8039fc8:	e015      	b.n	8039ff6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8039fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8039fcc:	0a5a      	lsrs	r2, r3, #9
 8039fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8039fd0:	441a      	add	r2, r3
 8039fd2:	68fb      	ldr	r3, [r7, #12]
 8039fd4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8039fd6:	693b      	ldr	r3, [r7, #16]
 8039fd8:	7858      	ldrb	r0, [r3, #1]
 8039fda:	68fb      	ldr	r3, [r7, #12]
 8039fdc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8039fe0:	68fb      	ldr	r3, [r7, #12]
 8039fe2:	6a1a      	ldr	r2, [r3, #32]
 8039fe4:	2301      	movs	r3, #1
 8039fe6:	f7fe f911 	bl	803820c <disk_read>
 8039fea:	4603      	mov	r3, r0
 8039fec:	2b00      	cmp	r3, #0
 8039fee:	d002      	beq.n	8039ff6 <f_open+0x362>
 8039ff0:	2301      	movs	r3, #1
 8039ff2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8039ff6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8039ffa:	2b00      	cmp	r3, #0
 8039ffc:	d002      	beq.n	803a004 <f_open+0x370>
 8039ffe:	68fb      	ldr	r3, [r7, #12]
 803a000:	2200      	movs	r2, #0
 803a002:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 803a004:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 803a008:	4618      	mov	r0, r3
 803a00a:	3760      	adds	r7, #96	; 0x60
 803a00c:	46bd      	mov	sp, r7
 803a00e:	bd80      	pop	{r7, pc}

0803a010 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 803a010:	b580      	push	{r7, lr}
 803a012:	b08e      	sub	sp, #56	; 0x38
 803a014:	af00      	add	r7, sp, #0
 803a016:	60f8      	str	r0, [r7, #12]
 803a018:	60b9      	str	r1, [r7, #8]
 803a01a:	607a      	str	r2, [r7, #4]
 803a01c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 803a01e:	68bb      	ldr	r3, [r7, #8]
 803a020:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 803a022:	683b      	ldr	r3, [r7, #0]
 803a024:	2200      	movs	r2, #0
 803a026:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 803a028:	68fb      	ldr	r3, [r7, #12]
 803a02a:	f107 0214 	add.w	r2, r7, #20
 803a02e:	4611      	mov	r1, r2
 803a030:	4618      	mov	r0, r3
 803a032:	f7ff fdb3 	bl	8039b9c <validate>
 803a036:	4603      	mov	r3, r0
 803a038:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 803a03c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 803a040:	2b00      	cmp	r3, #0
 803a042:	d107      	bne.n	803a054 <f_read+0x44>
 803a044:	68fb      	ldr	r3, [r7, #12]
 803a046:	7d5b      	ldrb	r3, [r3, #21]
 803a048:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 803a04c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 803a050:	2b00      	cmp	r3, #0
 803a052:	d002      	beq.n	803a05a <f_read+0x4a>
 803a054:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 803a058:	e115      	b.n	803a286 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 803a05a:	68fb      	ldr	r3, [r7, #12]
 803a05c:	7d1b      	ldrb	r3, [r3, #20]
 803a05e:	f003 0301 	and.w	r3, r3, #1
 803a062:	2b00      	cmp	r3, #0
 803a064:	d101      	bne.n	803a06a <f_read+0x5a>
 803a066:	2307      	movs	r3, #7
 803a068:	e10d      	b.n	803a286 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 803a06a:	68fb      	ldr	r3, [r7, #12]
 803a06c:	68da      	ldr	r2, [r3, #12]
 803a06e:	68fb      	ldr	r3, [r7, #12]
 803a070:	699b      	ldr	r3, [r3, #24]
 803a072:	1ad3      	subs	r3, r2, r3
 803a074:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 803a076:	687a      	ldr	r2, [r7, #4]
 803a078:	6a3b      	ldr	r3, [r7, #32]
 803a07a:	429a      	cmp	r2, r3
 803a07c:	f240 80fe 	bls.w	803a27c <f_read+0x26c>
 803a080:	6a3b      	ldr	r3, [r7, #32]
 803a082:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 803a084:	e0fa      	b.n	803a27c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 803a086:	68fb      	ldr	r3, [r7, #12]
 803a088:	699b      	ldr	r3, [r3, #24]
 803a08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803a08e:	2b00      	cmp	r3, #0
 803a090:	f040 80c6 	bne.w	803a220 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 803a094:	68fb      	ldr	r3, [r7, #12]
 803a096:	699b      	ldr	r3, [r3, #24]
 803a098:	0a5b      	lsrs	r3, r3, #9
 803a09a:	697a      	ldr	r2, [r7, #20]
 803a09c:	8952      	ldrh	r2, [r2, #10]
 803a09e:	3a01      	subs	r2, #1
 803a0a0:	4013      	ands	r3, r2
 803a0a2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 803a0a4:	69fb      	ldr	r3, [r7, #28]
 803a0a6:	2b00      	cmp	r3, #0
 803a0a8:	d12f      	bne.n	803a10a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 803a0aa:	68fb      	ldr	r3, [r7, #12]
 803a0ac:	699b      	ldr	r3, [r3, #24]
 803a0ae:	2b00      	cmp	r3, #0
 803a0b0:	d103      	bne.n	803a0ba <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 803a0b2:	68fb      	ldr	r3, [r7, #12]
 803a0b4:	689b      	ldr	r3, [r3, #8]
 803a0b6:	633b      	str	r3, [r7, #48]	; 0x30
 803a0b8:	e013      	b.n	803a0e2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 803a0ba:	68fb      	ldr	r3, [r7, #12]
 803a0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a0be:	2b00      	cmp	r3, #0
 803a0c0:	d007      	beq.n	803a0d2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 803a0c2:	68fb      	ldr	r3, [r7, #12]
 803a0c4:	699b      	ldr	r3, [r3, #24]
 803a0c6:	4619      	mov	r1, r3
 803a0c8:	68f8      	ldr	r0, [r7, #12]
 803a0ca:	f7fe fef9 	bl	8038ec0 <clmt_clust>
 803a0ce:	6338      	str	r0, [r7, #48]	; 0x30
 803a0d0:	e007      	b.n	803a0e2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 803a0d2:	68fa      	ldr	r2, [r7, #12]
 803a0d4:	68fb      	ldr	r3, [r7, #12]
 803a0d6:	69db      	ldr	r3, [r3, #28]
 803a0d8:	4619      	mov	r1, r3
 803a0da:	4610      	mov	r0, r2
 803a0dc:	f7fe fc5f 	bl	803899e <get_fat>
 803a0e0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 803a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803a0e4:	2b01      	cmp	r3, #1
 803a0e6:	d804      	bhi.n	803a0f2 <f_read+0xe2>
 803a0e8:	68fb      	ldr	r3, [r7, #12]
 803a0ea:	2202      	movs	r2, #2
 803a0ec:	755a      	strb	r2, [r3, #21]
 803a0ee:	2302      	movs	r3, #2
 803a0f0:	e0c9      	b.n	803a286 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 803a0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 803a0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 803a0f8:	d104      	bne.n	803a104 <f_read+0xf4>
 803a0fa:	68fb      	ldr	r3, [r7, #12]
 803a0fc:	2201      	movs	r2, #1
 803a0fe:	755a      	strb	r2, [r3, #21]
 803a100:	2301      	movs	r3, #1
 803a102:	e0c0      	b.n	803a286 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 803a104:	68fb      	ldr	r3, [r7, #12]
 803a106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 803a108:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 803a10a:	697a      	ldr	r2, [r7, #20]
 803a10c:	68fb      	ldr	r3, [r7, #12]
 803a10e:	69db      	ldr	r3, [r3, #28]
 803a110:	4619      	mov	r1, r3
 803a112:	4610      	mov	r0, r2
 803a114:	f7fe fc24 	bl	8038960 <clust2sect>
 803a118:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 803a11a:	69bb      	ldr	r3, [r7, #24]
 803a11c:	2b00      	cmp	r3, #0
 803a11e:	d104      	bne.n	803a12a <f_read+0x11a>
 803a120:	68fb      	ldr	r3, [r7, #12]
 803a122:	2202      	movs	r2, #2
 803a124:	755a      	strb	r2, [r3, #21]
 803a126:	2302      	movs	r3, #2
 803a128:	e0ad      	b.n	803a286 <f_read+0x276>
			sect += csect;
 803a12a:	69ba      	ldr	r2, [r7, #24]
 803a12c:	69fb      	ldr	r3, [r7, #28]
 803a12e:	4413      	add	r3, r2
 803a130:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 803a132:	687b      	ldr	r3, [r7, #4]
 803a134:	0a5b      	lsrs	r3, r3, #9
 803a136:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 803a138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a13a:	2b00      	cmp	r3, #0
 803a13c:	d039      	beq.n	803a1b2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 803a13e:	69fa      	ldr	r2, [r7, #28]
 803a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a142:	4413      	add	r3, r2
 803a144:	697a      	ldr	r2, [r7, #20]
 803a146:	8952      	ldrh	r2, [r2, #10]
 803a148:	4293      	cmp	r3, r2
 803a14a:	d905      	bls.n	803a158 <f_read+0x148>
					cc = fs->csize - csect;
 803a14c:	697b      	ldr	r3, [r7, #20]
 803a14e:	895b      	ldrh	r3, [r3, #10]
 803a150:	461a      	mov	r2, r3
 803a152:	69fb      	ldr	r3, [r7, #28]
 803a154:	1ad3      	subs	r3, r2, r3
 803a156:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 803a158:	697b      	ldr	r3, [r7, #20]
 803a15a:	7858      	ldrb	r0, [r3, #1]
 803a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a15e:	69ba      	ldr	r2, [r7, #24]
 803a160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 803a162:	f7fe f853 	bl	803820c <disk_read>
 803a166:	4603      	mov	r3, r0
 803a168:	2b00      	cmp	r3, #0
 803a16a:	d004      	beq.n	803a176 <f_read+0x166>
 803a16c:	68fb      	ldr	r3, [r7, #12]
 803a16e:	2201      	movs	r2, #1
 803a170:	755a      	strb	r2, [r3, #21]
 803a172:	2301      	movs	r3, #1
 803a174:	e087      	b.n	803a286 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 803a176:	68fb      	ldr	r3, [r7, #12]
 803a178:	7d1b      	ldrb	r3, [r3, #20]
 803a17a:	b25b      	sxtb	r3, r3
 803a17c:	2b00      	cmp	r3, #0
 803a17e:	da14      	bge.n	803a1aa <f_read+0x19a>
 803a180:	68fb      	ldr	r3, [r7, #12]
 803a182:	6a1a      	ldr	r2, [r3, #32]
 803a184:	69bb      	ldr	r3, [r7, #24]
 803a186:	1ad3      	subs	r3, r2, r3
 803a188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803a18a:	429a      	cmp	r2, r3
 803a18c:	d90d      	bls.n	803a1aa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 803a18e:	68fb      	ldr	r3, [r7, #12]
 803a190:	6a1a      	ldr	r2, [r3, #32]
 803a192:	69bb      	ldr	r3, [r7, #24]
 803a194:	1ad3      	subs	r3, r2, r3
 803a196:	025b      	lsls	r3, r3, #9
 803a198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803a19a:	18d0      	adds	r0, r2, r3
 803a19c:	68fb      	ldr	r3, [r7, #12]
 803a19e:	3330      	adds	r3, #48	; 0x30
 803a1a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 803a1a4:	4619      	mov	r1, r3
 803a1a6:	f7fe f911 	bl	80383cc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 803a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a1ac:	025b      	lsls	r3, r3, #9
 803a1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 803a1b0:	e050      	b.n	803a254 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 803a1b2:	68fb      	ldr	r3, [r7, #12]
 803a1b4:	6a1b      	ldr	r3, [r3, #32]
 803a1b6:	69ba      	ldr	r2, [r7, #24]
 803a1b8:	429a      	cmp	r2, r3
 803a1ba:	d02e      	beq.n	803a21a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 803a1bc:	68fb      	ldr	r3, [r7, #12]
 803a1be:	7d1b      	ldrb	r3, [r3, #20]
 803a1c0:	b25b      	sxtb	r3, r3
 803a1c2:	2b00      	cmp	r3, #0
 803a1c4:	da18      	bge.n	803a1f8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 803a1c6:	697b      	ldr	r3, [r7, #20]
 803a1c8:	7858      	ldrb	r0, [r3, #1]
 803a1ca:	68fb      	ldr	r3, [r7, #12]
 803a1cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 803a1d0:	68fb      	ldr	r3, [r7, #12]
 803a1d2:	6a1a      	ldr	r2, [r3, #32]
 803a1d4:	2301      	movs	r3, #1
 803a1d6:	f7fe f839 	bl	803824c <disk_write>
 803a1da:	4603      	mov	r3, r0
 803a1dc:	2b00      	cmp	r3, #0
 803a1de:	d004      	beq.n	803a1ea <f_read+0x1da>
 803a1e0:	68fb      	ldr	r3, [r7, #12]
 803a1e2:	2201      	movs	r2, #1
 803a1e4:	755a      	strb	r2, [r3, #21]
 803a1e6:	2301      	movs	r3, #1
 803a1e8:	e04d      	b.n	803a286 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 803a1ea:	68fb      	ldr	r3, [r7, #12]
 803a1ec:	7d1b      	ldrb	r3, [r3, #20]
 803a1ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803a1f2:	b2da      	uxtb	r2, r3
 803a1f4:	68fb      	ldr	r3, [r7, #12]
 803a1f6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 803a1f8:	697b      	ldr	r3, [r7, #20]
 803a1fa:	7858      	ldrb	r0, [r3, #1]
 803a1fc:	68fb      	ldr	r3, [r7, #12]
 803a1fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 803a202:	2301      	movs	r3, #1
 803a204:	69ba      	ldr	r2, [r7, #24]
 803a206:	f7fe f801 	bl	803820c <disk_read>
 803a20a:	4603      	mov	r3, r0
 803a20c:	2b00      	cmp	r3, #0
 803a20e:	d004      	beq.n	803a21a <f_read+0x20a>
 803a210:	68fb      	ldr	r3, [r7, #12]
 803a212:	2201      	movs	r2, #1
 803a214:	755a      	strb	r2, [r3, #21]
 803a216:	2301      	movs	r3, #1
 803a218:	e035      	b.n	803a286 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 803a21a:	68fb      	ldr	r3, [r7, #12]
 803a21c:	69ba      	ldr	r2, [r7, #24]
 803a21e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 803a220:	68fb      	ldr	r3, [r7, #12]
 803a222:	699b      	ldr	r3, [r3, #24]
 803a224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803a228:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 803a22c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 803a22e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803a230:	687b      	ldr	r3, [r7, #4]
 803a232:	429a      	cmp	r2, r3
 803a234:	d901      	bls.n	803a23a <f_read+0x22a>
 803a236:	687b      	ldr	r3, [r7, #4]
 803a238:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 803a23a:	68fb      	ldr	r3, [r7, #12]
 803a23c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 803a240:	68fb      	ldr	r3, [r7, #12]
 803a242:	699b      	ldr	r3, [r3, #24]
 803a244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803a248:	4413      	add	r3, r2
 803a24a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803a24c:	4619      	mov	r1, r3
 803a24e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 803a250:	f7fe f8bc 	bl	80383cc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 803a254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803a256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803a258:	4413      	add	r3, r2
 803a25a:	627b      	str	r3, [r7, #36]	; 0x24
 803a25c:	68fb      	ldr	r3, [r7, #12]
 803a25e:	699a      	ldr	r2, [r3, #24]
 803a260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803a262:	441a      	add	r2, r3
 803a264:	68fb      	ldr	r3, [r7, #12]
 803a266:	619a      	str	r2, [r3, #24]
 803a268:	683b      	ldr	r3, [r7, #0]
 803a26a:	681a      	ldr	r2, [r3, #0]
 803a26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803a26e:	441a      	add	r2, r3
 803a270:	683b      	ldr	r3, [r7, #0]
 803a272:	601a      	str	r2, [r3, #0]
 803a274:	687a      	ldr	r2, [r7, #4]
 803a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803a278:	1ad3      	subs	r3, r2, r3
 803a27a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 803a27c:	687b      	ldr	r3, [r7, #4]
 803a27e:	2b00      	cmp	r3, #0
 803a280:	f47f af01 	bne.w	803a086 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 803a284:	2300      	movs	r3, #0
}
 803a286:	4618      	mov	r0, r3
 803a288:	3738      	adds	r7, #56	; 0x38
 803a28a:	46bd      	mov	sp, r7
 803a28c:	bd80      	pop	{r7, pc}

0803a28e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 803a28e:	b580      	push	{r7, lr}
 803a290:	b08c      	sub	sp, #48	; 0x30
 803a292:	af00      	add	r7, sp, #0
 803a294:	60f8      	str	r0, [r7, #12]
 803a296:	60b9      	str	r1, [r7, #8]
 803a298:	607a      	str	r2, [r7, #4]
 803a29a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 803a29c:	68bb      	ldr	r3, [r7, #8]
 803a29e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 803a2a0:	683b      	ldr	r3, [r7, #0]
 803a2a2:	2200      	movs	r2, #0
 803a2a4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 803a2a6:	68fb      	ldr	r3, [r7, #12]
 803a2a8:	f107 0210 	add.w	r2, r7, #16
 803a2ac:	4611      	mov	r1, r2
 803a2ae:	4618      	mov	r0, r3
 803a2b0:	f7ff fc74 	bl	8039b9c <validate>
 803a2b4:	4603      	mov	r3, r0
 803a2b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 803a2ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 803a2be:	2b00      	cmp	r3, #0
 803a2c0:	d107      	bne.n	803a2d2 <f_write+0x44>
 803a2c2:	68fb      	ldr	r3, [r7, #12]
 803a2c4:	7d5b      	ldrb	r3, [r3, #21]
 803a2c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 803a2ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 803a2ce:	2b00      	cmp	r3, #0
 803a2d0:	d002      	beq.n	803a2d8 <f_write+0x4a>
 803a2d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 803a2d6:	e14b      	b.n	803a570 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 803a2d8:	68fb      	ldr	r3, [r7, #12]
 803a2da:	7d1b      	ldrb	r3, [r3, #20]
 803a2dc:	f003 0302 	and.w	r3, r3, #2
 803a2e0:	2b00      	cmp	r3, #0
 803a2e2:	d101      	bne.n	803a2e8 <f_write+0x5a>
 803a2e4:	2307      	movs	r3, #7
 803a2e6:	e143      	b.n	803a570 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 803a2e8:	68fb      	ldr	r3, [r7, #12]
 803a2ea:	699a      	ldr	r2, [r3, #24]
 803a2ec:	687b      	ldr	r3, [r7, #4]
 803a2ee:	441a      	add	r2, r3
 803a2f0:	68fb      	ldr	r3, [r7, #12]
 803a2f2:	699b      	ldr	r3, [r3, #24]
 803a2f4:	429a      	cmp	r2, r3
 803a2f6:	f080 812d 	bcs.w	803a554 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 803a2fa:	68fb      	ldr	r3, [r7, #12]
 803a2fc:	699b      	ldr	r3, [r3, #24]
 803a2fe:	43db      	mvns	r3, r3
 803a300:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 803a302:	e127      	b.n	803a554 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 803a304:	68fb      	ldr	r3, [r7, #12]
 803a306:	699b      	ldr	r3, [r3, #24]
 803a308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803a30c:	2b00      	cmp	r3, #0
 803a30e:	f040 80e3 	bne.w	803a4d8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 803a312:	68fb      	ldr	r3, [r7, #12]
 803a314:	699b      	ldr	r3, [r3, #24]
 803a316:	0a5b      	lsrs	r3, r3, #9
 803a318:	693a      	ldr	r2, [r7, #16]
 803a31a:	8952      	ldrh	r2, [r2, #10]
 803a31c:	3a01      	subs	r2, #1
 803a31e:	4013      	ands	r3, r2
 803a320:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 803a322:	69bb      	ldr	r3, [r7, #24]
 803a324:	2b00      	cmp	r3, #0
 803a326:	d143      	bne.n	803a3b0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 803a328:	68fb      	ldr	r3, [r7, #12]
 803a32a:	699b      	ldr	r3, [r3, #24]
 803a32c:	2b00      	cmp	r3, #0
 803a32e:	d10c      	bne.n	803a34a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 803a330:	68fb      	ldr	r3, [r7, #12]
 803a332:	689b      	ldr	r3, [r3, #8]
 803a334:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 803a336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a338:	2b00      	cmp	r3, #0
 803a33a:	d11a      	bne.n	803a372 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 803a33c:	68fb      	ldr	r3, [r7, #12]
 803a33e:	2100      	movs	r1, #0
 803a340:	4618      	mov	r0, r3
 803a342:	f7fe fd25 	bl	8038d90 <create_chain>
 803a346:	62b8      	str	r0, [r7, #40]	; 0x28
 803a348:	e013      	b.n	803a372 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 803a34a:	68fb      	ldr	r3, [r7, #12]
 803a34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803a34e:	2b00      	cmp	r3, #0
 803a350:	d007      	beq.n	803a362 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 803a352:	68fb      	ldr	r3, [r7, #12]
 803a354:	699b      	ldr	r3, [r3, #24]
 803a356:	4619      	mov	r1, r3
 803a358:	68f8      	ldr	r0, [r7, #12]
 803a35a:	f7fe fdb1 	bl	8038ec0 <clmt_clust>
 803a35e:	62b8      	str	r0, [r7, #40]	; 0x28
 803a360:	e007      	b.n	803a372 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 803a362:	68fa      	ldr	r2, [r7, #12]
 803a364:	68fb      	ldr	r3, [r7, #12]
 803a366:	69db      	ldr	r3, [r3, #28]
 803a368:	4619      	mov	r1, r3
 803a36a:	4610      	mov	r0, r2
 803a36c:	f7fe fd10 	bl	8038d90 <create_chain>
 803a370:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 803a372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a374:	2b00      	cmp	r3, #0
 803a376:	f000 80f2 	beq.w	803a55e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 803a37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a37c:	2b01      	cmp	r3, #1
 803a37e:	d104      	bne.n	803a38a <f_write+0xfc>
 803a380:	68fb      	ldr	r3, [r7, #12]
 803a382:	2202      	movs	r2, #2
 803a384:	755a      	strb	r2, [r3, #21]
 803a386:	2302      	movs	r3, #2
 803a388:	e0f2      	b.n	803a570 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 803a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803a38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 803a390:	d104      	bne.n	803a39c <f_write+0x10e>
 803a392:	68fb      	ldr	r3, [r7, #12]
 803a394:	2201      	movs	r2, #1
 803a396:	755a      	strb	r2, [r3, #21]
 803a398:	2301      	movs	r3, #1
 803a39a:	e0e9      	b.n	803a570 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 803a39c:	68fb      	ldr	r3, [r7, #12]
 803a39e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803a3a0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 803a3a2:	68fb      	ldr	r3, [r7, #12]
 803a3a4:	689b      	ldr	r3, [r3, #8]
 803a3a6:	2b00      	cmp	r3, #0
 803a3a8:	d102      	bne.n	803a3b0 <f_write+0x122>
 803a3aa:	68fb      	ldr	r3, [r7, #12]
 803a3ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 803a3ae:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 803a3b0:	68fb      	ldr	r3, [r7, #12]
 803a3b2:	7d1b      	ldrb	r3, [r3, #20]
 803a3b4:	b25b      	sxtb	r3, r3
 803a3b6:	2b00      	cmp	r3, #0
 803a3b8:	da18      	bge.n	803a3ec <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 803a3ba:	693b      	ldr	r3, [r7, #16]
 803a3bc:	7858      	ldrb	r0, [r3, #1]
 803a3be:	68fb      	ldr	r3, [r7, #12]
 803a3c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 803a3c4:	68fb      	ldr	r3, [r7, #12]
 803a3c6:	6a1a      	ldr	r2, [r3, #32]
 803a3c8:	2301      	movs	r3, #1
 803a3ca:	f7fd ff3f 	bl	803824c <disk_write>
 803a3ce:	4603      	mov	r3, r0
 803a3d0:	2b00      	cmp	r3, #0
 803a3d2:	d004      	beq.n	803a3de <f_write+0x150>
 803a3d4:	68fb      	ldr	r3, [r7, #12]
 803a3d6:	2201      	movs	r2, #1
 803a3d8:	755a      	strb	r2, [r3, #21]
 803a3da:	2301      	movs	r3, #1
 803a3dc:	e0c8      	b.n	803a570 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 803a3de:	68fb      	ldr	r3, [r7, #12]
 803a3e0:	7d1b      	ldrb	r3, [r3, #20]
 803a3e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803a3e6:	b2da      	uxtb	r2, r3
 803a3e8:	68fb      	ldr	r3, [r7, #12]
 803a3ea:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 803a3ec:	693a      	ldr	r2, [r7, #16]
 803a3ee:	68fb      	ldr	r3, [r7, #12]
 803a3f0:	69db      	ldr	r3, [r3, #28]
 803a3f2:	4619      	mov	r1, r3
 803a3f4:	4610      	mov	r0, r2
 803a3f6:	f7fe fab3 	bl	8038960 <clust2sect>
 803a3fa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 803a3fc:	697b      	ldr	r3, [r7, #20]
 803a3fe:	2b00      	cmp	r3, #0
 803a400:	d104      	bne.n	803a40c <f_write+0x17e>
 803a402:	68fb      	ldr	r3, [r7, #12]
 803a404:	2202      	movs	r2, #2
 803a406:	755a      	strb	r2, [r3, #21]
 803a408:	2302      	movs	r3, #2
 803a40a:	e0b1      	b.n	803a570 <f_write+0x2e2>
			sect += csect;
 803a40c:	697a      	ldr	r2, [r7, #20]
 803a40e:	69bb      	ldr	r3, [r7, #24]
 803a410:	4413      	add	r3, r2
 803a412:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 803a414:	687b      	ldr	r3, [r7, #4]
 803a416:	0a5b      	lsrs	r3, r3, #9
 803a418:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 803a41a:	6a3b      	ldr	r3, [r7, #32]
 803a41c:	2b00      	cmp	r3, #0
 803a41e:	d03c      	beq.n	803a49a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 803a420:	69ba      	ldr	r2, [r7, #24]
 803a422:	6a3b      	ldr	r3, [r7, #32]
 803a424:	4413      	add	r3, r2
 803a426:	693a      	ldr	r2, [r7, #16]
 803a428:	8952      	ldrh	r2, [r2, #10]
 803a42a:	4293      	cmp	r3, r2
 803a42c:	d905      	bls.n	803a43a <f_write+0x1ac>
					cc = fs->csize - csect;
 803a42e:	693b      	ldr	r3, [r7, #16]
 803a430:	895b      	ldrh	r3, [r3, #10]
 803a432:	461a      	mov	r2, r3
 803a434:	69bb      	ldr	r3, [r7, #24]
 803a436:	1ad3      	subs	r3, r2, r3
 803a438:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 803a43a:	693b      	ldr	r3, [r7, #16]
 803a43c:	7858      	ldrb	r0, [r3, #1]
 803a43e:	6a3b      	ldr	r3, [r7, #32]
 803a440:	697a      	ldr	r2, [r7, #20]
 803a442:	69f9      	ldr	r1, [r7, #28]
 803a444:	f7fd ff02 	bl	803824c <disk_write>
 803a448:	4603      	mov	r3, r0
 803a44a:	2b00      	cmp	r3, #0
 803a44c:	d004      	beq.n	803a458 <f_write+0x1ca>
 803a44e:	68fb      	ldr	r3, [r7, #12]
 803a450:	2201      	movs	r2, #1
 803a452:	755a      	strb	r2, [r3, #21]
 803a454:	2301      	movs	r3, #1
 803a456:	e08b      	b.n	803a570 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 803a458:	68fb      	ldr	r3, [r7, #12]
 803a45a:	6a1a      	ldr	r2, [r3, #32]
 803a45c:	697b      	ldr	r3, [r7, #20]
 803a45e:	1ad3      	subs	r3, r2, r3
 803a460:	6a3a      	ldr	r2, [r7, #32]
 803a462:	429a      	cmp	r2, r3
 803a464:	d915      	bls.n	803a492 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 803a466:	68fb      	ldr	r3, [r7, #12]
 803a468:	f103 0030 	add.w	r0, r3, #48	; 0x30
 803a46c:	68fb      	ldr	r3, [r7, #12]
 803a46e:	6a1a      	ldr	r2, [r3, #32]
 803a470:	697b      	ldr	r3, [r7, #20]
 803a472:	1ad3      	subs	r3, r2, r3
 803a474:	025b      	lsls	r3, r3, #9
 803a476:	69fa      	ldr	r2, [r7, #28]
 803a478:	4413      	add	r3, r2
 803a47a:	f44f 7200 	mov.w	r2, #512	; 0x200
 803a47e:	4619      	mov	r1, r3
 803a480:	f7fd ffa4 	bl	80383cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 803a484:	68fb      	ldr	r3, [r7, #12]
 803a486:	7d1b      	ldrb	r3, [r3, #20]
 803a488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803a48c:	b2da      	uxtb	r2, r3
 803a48e:	68fb      	ldr	r3, [r7, #12]
 803a490:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 803a492:	6a3b      	ldr	r3, [r7, #32]
 803a494:	025b      	lsls	r3, r3, #9
 803a496:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 803a498:	e03f      	b.n	803a51a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 803a49a:	68fb      	ldr	r3, [r7, #12]
 803a49c:	6a1b      	ldr	r3, [r3, #32]
 803a49e:	697a      	ldr	r2, [r7, #20]
 803a4a0:	429a      	cmp	r2, r3
 803a4a2:	d016      	beq.n	803a4d2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 803a4a4:	68fb      	ldr	r3, [r7, #12]
 803a4a6:	699a      	ldr	r2, [r3, #24]
 803a4a8:	68fb      	ldr	r3, [r7, #12]
 803a4aa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 803a4ac:	429a      	cmp	r2, r3
 803a4ae:	d210      	bcs.n	803a4d2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 803a4b0:	693b      	ldr	r3, [r7, #16]
 803a4b2:	7858      	ldrb	r0, [r3, #1]
 803a4b4:	68fb      	ldr	r3, [r7, #12]
 803a4b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 803a4ba:	2301      	movs	r3, #1
 803a4bc:	697a      	ldr	r2, [r7, #20]
 803a4be:	f7fd fea5 	bl	803820c <disk_read>
 803a4c2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 803a4c4:	2b00      	cmp	r3, #0
 803a4c6:	d004      	beq.n	803a4d2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 803a4c8:	68fb      	ldr	r3, [r7, #12]
 803a4ca:	2201      	movs	r2, #1
 803a4cc:	755a      	strb	r2, [r3, #21]
 803a4ce:	2301      	movs	r3, #1
 803a4d0:	e04e      	b.n	803a570 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 803a4d2:	68fb      	ldr	r3, [r7, #12]
 803a4d4:	697a      	ldr	r2, [r7, #20]
 803a4d6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 803a4d8:	68fb      	ldr	r3, [r7, #12]
 803a4da:	699b      	ldr	r3, [r3, #24]
 803a4dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803a4e0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 803a4e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 803a4e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803a4e8:	687b      	ldr	r3, [r7, #4]
 803a4ea:	429a      	cmp	r2, r3
 803a4ec:	d901      	bls.n	803a4f2 <f_write+0x264>
 803a4ee:	687b      	ldr	r3, [r7, #4]
 803a4f0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 803a4f2:	68fb      	ldr	r3, [r7, #12]
 803a4f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 803a4f8:	68fb      	ldr	r3, [r7, #12]
 803a4fa:	699b      	ldr	r3, [r3, #24]
 803a4fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803a500:	4413      	add	r3, r2
 803a502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 803a504:	69f9      	ldr	r1, [r7, #28]
 803a506:	4618      	mov	r0, r3
 803a508:	f7fd ff60 	bl	80383cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 803a50c:	68fb      	ldr	r3, [r7, #12]
 803a50e:	7d1b      	ldrb	r3, [r3, #20]
 803a510:	f063 037f 	orn	r3, r3, #127	; 0x7f
 803a514:	b2da      	uxtb	r2, r3
 803a516:	68fb      	ldr	r3, [r7, #12]
 803a518:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 803a51a:	69fa      	ldr	r2, [r7, #28]
 803a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a51e:	4413      	add	r3, r2
 803a520:	61fb      	str	r3, [r7, #28]
 803a522:	68fb      	ldr	r3, [r7, #12]
 803a524:	699a      	ldr	r2, [r3, #24]
 803a526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a528:	441a      	add	r2, r3
 803a52a:	68fb      	ldr	r3, [r7, #12]
 803a52c:	619a      	str	r2, [r3, #24]
 803a52e:	68fb      	ldr	r3, [r7, #12]
 803a530:	68da      	ldr	r2, [r3, #12]
 803a532:	68fb      	ldr	r3, [r7, #12]
 803a534:	699b      	ldr	r3, [r3, #24]
 803a536:	429a      	cmp	r2, r3
 803a538:	bf38      	it	cc
 803a53a:	461a      	movcc	r2, r3
 803a53c:	68fb      	ldr	r3, [r7, #12]
 803a53e:	60da      	str	r2, [r3, #12]
 803a540:	683b      	ldr	r3, [r7, #0]
 803a542:	681a      	ldr	r2, [r3, #0]
 803a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a546:	441a      	add	r2, r3
 803a548:	683b      	ldr	r3, [r7, #0]
 803a54a:	601a      	str	r2, [r3, #0]
 803a54c:	687a      	ldr	r2, [r7, #4]
 803a54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803a550:	1ad3      	subs	r3, r2, r3
 803a552:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 803a554:	687b      	ldr	r3, [r7, #4]
 803a556:	2b00      	cmp	r3, #0
 803a558:	f47f aed4 	bne.w	803a304 <f_write+0x76>
 803a55c:	e000      	b.n	803a560 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 803a55e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 803a560:	68fb      	ldr	r3, [r7, #12]
 803a562:	7d1b      	ldrb	r3, [r3, #20]
 803a564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803a568:	b2da      	uxtb	r2, r3
 803a56a:	68fb      	ldr	r3, [r7, #12]
 803a56c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 803a56e:	2300      	movs	r3, #0
}
 803a570:	4618      	mov	r0, r3
 803a572:	3730      	adds	r7, #48	; 0x30
 803a574:	46bd      	mov	sp, r7
 803a576:	bd80      	pop	{r7, pc}

0803a578 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 803a578:	b580      	push	{r7, lr}
 803a57a:	b086      	sub	sp, #24
 803a57c:	af00      	add	r7, sp, #0
 803a57e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 803a580:	687b      	ldr	r3, [r7, #4]
 803a582:	f107 0208 	add.w	r2, r7, #8
 803a586:	4611      	mov	r1, r2
 803a588:	4618      	mov	r0, r3
 803a58a:	f7ff fb07 	bl	8039b9c <validate>
 803a58e:	4603      	mov	r3, r0
 803a590:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 803a592:	7dfb      	ldrb	r3, [r7, #23]
 803a594:	2b00      	cmp	r3, #0
 803a596:	d168      	bne.n	803a66a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 803a598:	687b      	ldr	r3, [r7, #4]
 803a59a:	7d1b      	ldrb	r3, [r3, #20]
 803a59c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803a5a0:	2b00      	cmp	r3, #0
 803a5a2:	d062      	beq.n	803a66a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 803a5a4:	687b      	ldr	r3, [r7, #4]
 803a5a6:	7d1b      	ldrb	r3, [r3, #20]
 803a5a8:	b25b      	sxtb	r3, r3
 803a5aa:	2b00      	cmp	r3, #0
 803a5ac:	da15      	bge.n	803a5da <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 803a5ae:	68bb      	ldr	r3, [r7, #8]
 803a5b0:	7858      	ldrb	r0, [r3, #1]
 803a5b2:	687b      	ldr	r3, [r7, #4]
 803a5b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 803a5b8:	687b      	ldr	r3, [r7, #4]
 803a5ba:	6a1a      	ldr	r2, [r3, #32]
 803a5bc:	2301      	movs	r3, #1
 803a5be:	f7fd fe45 	bl	803824c <disk_write>
 803a5c2:	4603      	mov	r3, r0
 803a5c4:	2b00      	cmp	r3, #0
 803a5c6:	d001      	beq.n	803a5cc <f_sync+0x54>
 803a5c8:	2301      	movs	r3, #1
 803a5ca:	e04f      	b.n	803a66c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 803a5cc:	687b      	ldr	r3, [r7, #4]
 803a5ce:	7d1b      	ldrb	r3, [r3, #20]
 803a5d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 803a5d4:	b2da      	uxtb	r2, r3
 803a5d6:	687b      	ldr	r3, [r7, #4]
 803a5d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 803a5da:	f7fd fc6b 	bl	8037eb4 <get_fattime>
 803a5de:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 803a5e0:	68ba      	ldr	r2, [r7, #8]
 803a5e2:	687b      	ldr	r3, [r7, #4]
 803a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803a5e6:	4619      	mov	r1, r3
 803a5e8:	4610      	mov	r0, r2
 803a5ea:	f7fe f91d 	bl	8038828 <move_window>
 803a5ee:	4603      	mov	r3, r0
 803a5f0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 803a5f2:	7dfb      	ldrb	r3, [r7, #23]
 803a5f4:	2b00      	cmp	r3, #0
 803a5f6:	d138      	bne.n	803a66a <f_sync+0xf2>
					dir = fp->dir_ptr;
 803a5f8:	687b      	ldr	r3, [r7, #4]
 803a5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803a5fc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 803a5fe:	68fb      	ldr	r3, [r7, #12]
 803a600:	330b      	adds	r3, #11
 803a602:	781a      	ldrb	r2, [r3, #0]
 803a604:	68fb      	ldr	r3, [r7, #12]
 803a606:	330b      	adds	r3, #11
 803a608:	f042 0220 	orr.w	r2, r2, #32
 803a60c:	b2d2      	uxtb	r2, r2
 803a60e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 803a610:	687b      	ldr	r3, [r7, #4]
 803a612:	6818      	ldr	r0, [r3, #0]
 803a614:	687b      	ldr	r3, [r7, #4]
 803a616:	689b      	ldr	r3, [r3, #8]
 803a618:	461a      	mov	r2, r3
 803a61a:	68f9      	ldr	r1, [r7, #12]
 803a61c:	f7fe fe2a 	bl	8039274 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 803a620:	68fb      	ldr	r3, [r7, #12]
 803a622:	f103 021c 	add.w	r2, r3, #28
 803a626:	687b      	ldr	r3, [r7, #4]
 803a628:	68db      	ldr	r3, [r3, #12]
 803a62a:	4619      	mov	r1, r3
 803a62c:	4610      	mov	r0, r2
 803a62e:	f7fd fea1 	bl	8038374 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 803a632:	68fb      	ldr	r3, [r7, #12]
 803a634:	3316      	adds	r3, #22
 803a636:	6939      	ldr	r1, [r7, #16]
 803a638:	4618      	mov	r0, r3
 803a63a:	f7fd fe9b 	bl	8038374 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 803a63e:	68fb      	ldr	r3, [r7, #12]
 803a640:	3312      	adds	r3, #18
 803a642:	2100      	movs	r1, #0
 803a644:	4618      	mov	r0, r3
 803a646:	f7fd fe7a 	bl	803833e <st_word>
					fs->wflag = 1;
 803a64a:	68bb      	ldr	r3, [r7, #8]
 803a64c:	2201      	movs	r2, #1
 803a64e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 803a650:	68bb      	ldr	r3, [r7, #8]
 803a652:	4618      	mov	r0, r3
 803a654:	f7fe f916 	bl	8038884 <sync_fs>
 803a658:	4603      	mov	r3, r0
 803a65a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 803a65c:	687b      	ldr	r3, [r7, #4]
 803a65e:	7d1b      	ldrb	r3, [r3, #20]
 803a660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 803a664:	b2da      	uxtb	r2, r3
 803a666:	687b      	ldr	r3, [r7, #4]
 803a668:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 803a66a:	7dfb      	ldrb	r3, [r7, #23]
}
 803a66c:	4618      	mov	r0, r3
 803a66e:	3718      	adds	r7, #24
 803a670:	46bd      	mov	sp, r7
 803a672:	bd80      	pop	{r7, pc}

0803a674 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 803a674:	b580      	push	{r7, lr}
 803a676:	b084      	sub	sp, #16
 803a678:	af00      	add	r7, sp, #0
 803a67a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 803a67c:	6878      	ldr	r0, [r7, #4]
 803a67e:	f7ff ff7b 	bl	803a578 <f_sync>
 803a682:	4603      	mov	r3, r0
 803a684:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 803a686:	7bfb      	ldrb	r3, [r7, #15]
 803a688:	2b00      	cmp	r3, #0
 803a68a:	d118      	bne.n	803a6be <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 803a68c:	687b      	ldr	r3, [r7, #4]
 803a68e:	f107 0208 	add.w	r2, r7, #8
 803a692:	4611      	mov	r1, r2
 803a694:	4618      	mov	r0, r3
 803a696:	f7ff fa81 	bl	8039b9c <validate>
 803a69a:	4603      	mov	r3, r0
 803a69c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 803a69e:	7bfb      	ldrb	r3, [r7, #15]
 803a6a0:	2b00      	cmp	r3, #0
 803a6a2:	d10c      	bne.n	803a6be <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 803a6a4:	687b      	ldr	r3, [r7, #4]
 803a6a6:	691b      	ldr	r3, [r3, #16]
 803a6a8:	4618      	mov	r0, r3
 803a6aa:	f7fe f819 	bl	80386e0 <dec_lock>
 803a6ae:	4603      	mov	r3, r0
 803a6b0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 803a6b2:	7bfb      	ldrb	r3, [r7, #15]
 803a6b4:	2b00      	cmp	r3, #0
 803a6b6:	d102      	bne.n	803a6be <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 803a6b8:	687b      	ldr	r3, [r7, #4]
 803a6ba:	2200      	movs	r2, #0
 803a6bc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 803a6be:	7bfb      	ldrb	r3, [r7, #15]
}
 803a6c0:	4618      	mov	r0, r3
 803a6c2:	3710      	adds	r7, #16
 803a6c4:	46bd      	mov	sp, r7
 803a6c6:	bd80      	pop	{r7, pc}

0803a6c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 803a6c8:	b480      	push	{r7}
 803a6ca:	b087      	sub	sp, #28
 803a6cc:	af00      	add	r7, sp, #0
 803a6ce:	60f8      	str	r0, [r7, #12]
 803a6d0:	60b9      	str	r1, [r7, #8]
 803a6d2:	4613      	mov	r3, r2
 803a6d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 803a6d6:	2301      	movs	r3, #1
 803a6d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 803a6da:	2300      	movs	r3, #0
 803a6dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 803a6de:	4b1f      	ldr	r3, [pc, #124]	; (803a75c <FATFS_LinkDriverEx+0x94>)
 803a6e0:	7a5b      	ldrb	r3, [r3, #9]
 803a6e2:	b2db      	uxtb	r3, r3
 803a6e4:	2b00      	cmp	r3, #0
 803a6e6:	d131      	bne.n	803a74c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 803a6e8:	4b1c      	ldr	r3, [pc, #112]	; (803a75c <FATFS_LinkDriverEx+0x94>)
 803a6ea:	7a5b      	ldrb	r3, [r3, #9]
 803a6ec:	b2db      	uxtb	r3, r3
 803a6ee:	461a      	mov	r2, r3
 803a6f0:	4b1a      	ldr	r3, [pc, #104]	; (803a75c <FATFS_LinkDriverEx+0x94>)
 803a6f2:	2100      	movs	r1, #0
 803a6f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 803a6f6:	4b19      	ldr	r3, [pc, #100]	; (803a75c <FATFS_LinkDriverEx+0x94>)
 803a6f8:	7a5b      	ldrb	r3, [r3, #9]
 803a6fa:	b2db      	uxtb	r3, r3
 803a6fc:	4a17      	ldr	r2, [pc, #92]	; (803a75c <FATFS_LinkDriverEx+0x94>)
 803a6fe:	009b      	lsls	r3, r3, #2
 803a700:	4413      	add	r3, r2
 803a702:	68fa      	ldr	r2, [r7, #12]
 803a704:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 803a706:	4b15      	ldr	r3, [pc, #84]	; (803a75c <FATFS_LinkDriverEx+0x94>)
 803a708:	7a5b      	ldrb	r3, [r3, #9]
 803a70a:	b2db      	uxtb	r3, r3
 803a70c:	461a      	mov	r2, r3
 803a70e:	4b13      	ldr	r3, [pc, #76]	; (803a75c <FATFS_LinkDriverEx+0x94>)
 803a710:	4413      	add	r3, r2
 803a712:	79fa      	ldrb	r2, [r7, #7]
 803a714:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 803a716:	4b11      	ldr	r3, [pc, #68]	; (803a75c <FATFS_LinkDriverEx+0x94>)
 803a718:	7a5b      	ldrb	r3, [r3, #9]
 803a71a:	b2db      	uxtb	r3, r3
 803a71c:	1c5a      	adds	r2, r3, #1
 803a71e:	b2d1      	uxtb	r1, r2
 803a720:	4a0e      	ldr	r2, [pc, #56]	; (803a75c <FATFS_LinkDriverEx+0x94>)
 803a722:	7251      	strb	r1, [r2, #9]
 803a724:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 803a726:	7dbb      	ldrb	r3, [r7, #22]
 803a728:	3330      	adds	r3, #48	; 0x30
 803a72a:	b2da      	uxtb	r2, r3
 803a72c:	68bb      	ldr	r3, [r7, #8]
 803a72e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 803a730:	68bb      	ldr	r3, [r7, #8]
 803a732:	3301      	adds	r3, #1
 803a734:	223a      	movs	r2, #58	; 0x3a
 803a736:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 803a738:	68bb      	ldr	r3, [r7, #8]
 803a73a:	3302      	adds	r3, #2
 803a73c:	222f      	movs	r2, #47	; 0x2f
 803a73e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 803a740:	68bb      	ldr	r3, [r7, #8]
 803a742:	3303      	adds	r3, #3
 803a744:	2200      	movs	r2, #0
 803a746:	701a      	strb	r2, [r3, #0]
    ret = 0;
 803a748:	2300      	movs	r3, #0
 803a74a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 803a74c:	7dfb      	ldrb	r3, [r7, #23]
}
 803a74e:	4618      	mov	r0, r3
 803a750:	371c      	adds	r7, #28
 803a752:	46bd      	mov	sp, r7
 803a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 803a758:	4770      	bx	lr
 803a75a:	bf00      	nop
 803a75c:	20000460 	.word	0x20000460

0803a760 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 803a760:	b580      	push	{r7, lr}
 803a762:	b082      	sub	sp, #8
 803a764:	af00      	add	r7, sp, #0
 803a766:	6078      	str	r0, [r7, #4]
 803a768:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 803a76a:	2200      	movs	r2, #0
 803a76c:	6839      	ldr	r1, [r7, #0]
 803a76e:	6878      	ldr	r0, [r7, #4]
 803a770:	f7ff ffaa 	bl	803a6c8 <FATFS_LinkDriverEx>
 803a774:	4603      	mov	r3, r0
}
 803a776:	4618      	mov	r0, r3
 803a778:	3708      	adds	r7, #8
 803a77a:	46bd      	mov	sp, r7
 803a77c:	bd80      	pop	{r7, pc}
	...

0803a780 <__errno>:
 803a780:	4b01      	ldr	r3, [pc, #4]	; (803a788 <__errno+0x8>)
 803a782:	6818      	ldr	r0, [r3, #0]
 803a784:	4770      	bx	lr
 803a786:	bf00      	nop
 803a788:	2000002c 	.word	0x2000002c

0803a78c <__sflush_r>:
 803a78c:	898a      	ldrh	r2, [r1, #12]
 803a78e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803a792:	4605      	mov	r5, r0
 803a794:	0710      	lsls	r0, r2, #28
 803a796:	460c      	mov	r4, r1
 803a798:	d458      	bmi.n	803a84c <__sflush_r+0xc0>
 803a79a:	684b      	ldr	r3, [r1, #4]
 803a79c:	2b00      	cmp	r3, #0
 803a79e:	dc05      	bgt.n	803a7ac <__sflush_r+0x20>
 803a7a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 803a7a2:	2b00      	cmp	r3, #0
 803a7a4:	dc02      	bgt.n	803a7ac <__sflush_r+0x20>
 803a7a6:	2000      	movs	r0, #0
 803a7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803a7ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803a7ae:	2e00      	cmp	r6, #0
 803a7b0:	d0f9      	beq.n	803a7a6 <__sflush_r+0x1a>
 803a7b2:	2300      	movs	r3, #0
 803a7b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 803a7b8:	682f      	ldr	r7, [r5, #0]
 803a7ba:	602b      	str	r3, [r5, #0]
 803a7bc:	d032      	beq.n	803a824 <__sflush_r+0x98>
 803a7be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 803a7c0:	89a3      	ldrh	r3, [r4, #12]
 803a7c2:	075a      	lsls	r2, r3, #29
 803a7c4:	d505      	bpl.n	803a7d2 <__sflush_r+0x46>
 803a7c6:	6863      	ldr	r3, [r4, #4]
 803a7c8:	1ac0      	subs	r0, r0, r3
 803a7ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803a7cc:	b10b      	cbz	r3, 803a7d2 <__sflush_r+0x46>
 803a7ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 803a7d0:	1ac0      	subs	r0, r0, r3
 803a7d2:	2300      	movs	r3, #0
 803a7d4:	4602      	mov	r2, r0
 803a7d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803a7d8:	6a21      	ldr	r1, [r4, #32]
 803a7da:	4628      	mov	r0, r5
 803a7dc:	47b0      	blx	r6
 803a7de:	1c43      	adds	r3, r0, #1
 803a7e0:	89a3      	ldrh	r3, [r4, #12]
 803a7e2:	d106      	bne.n	803a7f2 <__sflush_r+0x66>
 803a7e4:	6829      	ldr	r1, [r5, #0]
 803a7e6:	291d      	cmp	r1, #29
 803a7e8:	d82c      	bhi.n	803a844 <__sflush_r+0xb8>
 803a7ea:	4a2a      	ldr	r2, [pc, #168]	; (803a894 <__sflush_r+0x108>)
 803a7ec:	40ca      	lsrs	r2, r1
 803a7ee:	07d6      	lsls	r6, r2, #31
 803a7f0:	d528      	bpl.n	803a844 <__sflush_r+0xb8>
 803a7f2:	2200      	movs	r2, #0
 803a7f4:	6062      	str	r2, [r4, #4]
 803a7f6:	04d9      	lsls	r1, r3, #19
 803a7f8:	6922      	ldr	r2, [r4, #16]
 803a7fa:	6022      	str	r2, [r4, #0]
 803a7fc:	d504      	bpl.n	803a808 <__sflush_r+0x7c>
 803a7fe:	1c42      	adds	r2, r0, #1
 803a800:	d101      	bne.n	803a806 <__sflush_r+0x7a>
 803a802:	682b      	ldr	r3, [r5, #0]
 803a804:	b903      	cbnz	r3, 803a808 <__sflush_r+0x7c>
 803a806:	6560      	str	r0, [r4, #84]	; 0x54
 803a808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803a80a:	602f      	str	r7, [r5, #0]
 803a80c:	2900      	cmp	r1, #0
 803a80e:	d0ca      	beq.n	803a7a6 <__sflush_r+0x1a>
 803a810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803a814:	4299      	cmp	r1, r3
 803a816:	d002      	beq.n	803a81e <__sflush_r+0x92>
 803a818:	4628      	mov	r0, r5
 803a81a:	f000 fa11 	bl	803ac40 <_free_r>
 803a81e:	2000      	movs	r0, #0
 803a820:	6360      	str	r0, [r4, #52]	; 0x34
 803a822:	e7c1      	b.n	803a7a8 <__sflush_r+0x1c>
 803a824:	6a21      	ldr	r1, [r4, #32]
 803a826:	2301      	movs	r3, #1
 803a828:	4628      	mov	r0, r5
 803a82a:	47b0      	blx	r6
 803a82c:	1c41      	adds	r1, r0, #1
 803a82e:	d1c7      	bne.n	803a7c0 <__sflush_r+0x34>
 803a830:	682b      	ldr	r3, [r5, #0]
 803a832:	2b00      	cmp	r3, #0
 803a834:	d0c4      	beq.n	803a7c0 <__sflush_r+0x34>
 803a836:	2b1d      	cmp	r3, #29
 803a838:	d001      	beq.n	803a83e <__sflush_r+0xb2>
 803a83a:	2b16      	cmp	r3, #22
 803a83c:	d101      	bne.n	803a842 <__sflush_r+0xb6>
 803a83e:	602f      	str	r7, [r5, #0]
 803a840:	e7b1      	b.n	803a7a6 <__sflush_r+0x1a>
 803a842:	89a3      	ldrh	r3, [r4, #12]
 803a844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803a848:	81a3      	strh	r3, [r4, #12]
 803a84a:	e7ad      	b.n	803a7a8 <__sflush_r+0x1c>
 803a84c:	690f      	ldr	r7, [r1, #16]
 803a84e:	2f00      	cmp	r7, #0
 803a850:	d0a9      	beq.n	803a7a6 <__sflush_r+0x1a>
 803a852:	0793      	lsls	r3, r2, #30
 803a854:	680e      	ldr	r6, [r1, #0]
 803a856:	bf08      	it	eq
 803a858:	694b      	ldreq	r3, [r1, #20]
 803a85a:	600f      	str	r7, [r1, #0]
 803a85c:	bf18      	it	ne
 803a85e:	2300      	movne	r3, #0
 803a860:	eba6 0807 	sub.w	r8, r6, r7
 803a864:	608b      	str	r3, [r1, #8]
 803a866:	f1b8 0f00 	cmp.w	r8, #0
 803a86a:	dd9c      	ble.n	803a7a6 <__sflush_r+0x1a>
 803a86c:	6a21      	ldr	r1, [r4, #32]
 803a86e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 803a870:	4643      	mov	r3, r8
 803a872:	463a      	mov	r2, r7
 803a874:	4628      	mov	r0, r5
 803a876:	47b0      	blx	r6
 803a878:	2800      	cmp	r0, #0
 803a87a:	dc06      	bgt.n	803a88a <__sflush_r+0xfe>
 803a87c:	89a3      	ldrh	r3, [r4, #12]
 803a87e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803a882:	81a3      	strh	r3, [r4, #12]
 803a884:	f04f 30ff 	mov.w	r0, #4294967295
 803a888:	e78e      	b.n	803a7a8 <__sflush_r+0x1c>
 803a88a:	4407      	add	r7, r0
 803a88c:	eba8 0800 	sub.w	r8, r8, r0
 803a890:	e7e9      	b.n	803a866 <__sflush_r+0xda>
 803a892:	bf00      	nop
 803a894:	20400001 	.word	0x20400001

0803a898 <_fflush_r>:
 803a898:	b538      	push	{r3, r4, r5, lr}
 803a89a:	690b      	ldr	r3, [r1, #16]
 803a89c:	4605      	mov	r5, r0
 803a89e:	460c      	mov	r4, r1
 803a8a0:	b913      	cbnz	r3, 803a8a8 <_fflush_r+0x10>
 803a8a2:	2500      	movs	r5, #0
 803a8a4:	4628      	mov	r0, r5
 803a8a6:	bd38      	pop	{r3, r4, r5, pc}
 803a8a8:	b118      	cbz	r0, 803a8b2 <_fflush_r+0x1a>
 803a8aa:	6983      	ldr	r3, [r0, #24]
 803a8ac:	b90b      	cbnz	r3, 803a8b2 <_fflush_r+0x1a>
 803a8ae:	f000 f887 	bl	803a9c0 <__sinit>
 803a8b2:	4b14      	ldr	r3, [pc, #80]	; (803a904 <_fflush_r+0x6c>)
 803a8b4:	429c      	cmp	r4, r3
 803a8b6:	d11b      	bne.n	803a8f0 <_fflush_r+0x58>
 803a8b8:	686c      	ldr	r4, [r5, #4]
 803a8ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803a8be:	2b00      	cmp	r3, #0
 803a8c0:	d0ef      	beq.n	803a8a2 <_fflush_r+0xa>
 803a8c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 803a8c4:	07d0      	lsls	r0, r2, #31
 803a8c6:	d404      	bmi.n	803a8d2 <_fflush_r+0x3a>
 803a8c8:	0599      	lsls	r1, r3, #22
 803a8ca:	d402      	bmi.n	803a8d2 <_fflush_r+0x3a>
 803a8cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803a8ce:	f000 f93a 	bl	803ab46 <__retarget_lock_acquire_recursive>
 803a8d2:	4628      	mov	r0, r5
 803a8d4:	4621      	mov	r1, r4
 803a8d6:	f7ff ff59 	bl	803a78c <__sflush_r>
 803a8da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803a8dc:	07da      	lsls	r2, r3, #31
 803a8de:	4605      	mov	r5, r0
 803a8e0:	d4e0      	bmi.n	803a8a4 <_fflush_r+0xc>
 803a8e2:	89a3      	ldrh	r3, [r4, #12]
 803a8e4:	059b      	lsls	r3, r3, #22
 803a8e6:	d4dd      	bmi.n	803a8a4 <_fflush_r+0xc>
 803a8e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803a8ea:	f000 f92d 	bl	803ab48 <__retarget_lock_release_recursive>
 803a8ee:	e7d9      	b.n	803a8a4 <_fflush_r+0xc>
 803a8f0:	4b05      	ldr	r3, [pc, #20]	; (803a908 <_fflush_r+0x70>)
 803a8f2:	429c      	cmp	r4, r3
 803a8f4:	d101      	bne.n	803a8fa <_fflush_r+0x62>
 803a8f6:	68ac      	ldr	r4, [r5, #8]
 803a8f8:	e7df      	b.n	803a8ba <_fflush_r+0x22>
 803a8fa:	4b04      	ldr	r3, [pc, #16]	; (803a90c <_fflush_r+0x74>)
 803a8fc:	429c      	cmp	r4, r3
 803a8fe:	bf08      	it	eq
 803a900:	68ec      	ldreq	r4, [r5, #12]
 803a902:	e7da      	b.n	803a8ba <_fflush_r+0x22>
 803a904:	0803ffe4 	.word	0x0803ffe4
 803a908:	08040004 	.word	0x08040004
 803a90c:	0803ffc4 	.word	0x0803ffc4

0803a910 <std>:
 803a910:	2300      	movs	r3, #0
 803a912:	b510      	push	{r4, lr}
 803a914:	4604      	mov	r4, r0
 803a916:	e9c0 3300 	strd	r3, r3, [r0]
 803a91a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 803a91e:	6083      	str	r3, [r0, #8]
 803a920:	8181      	strh	r1, [r0, #12]
 803a922:	6643      	str	r3, [r0, #100]	; 0x64
 803a924:	81c2      	strh	r2, [r0, #14]
 803a926:	6183      	str	r3, [r0, #24]
 803a928:	4619      	mov	r1, r3
 803a92a:	2208      	movs	r2, #8
 803a92c:	305c      	adds	r0, #92	; 0x5c
 803a92e:	f000 f97f 	bl	803ac30 <memset>
 803a932:	4b05      	ldr	r3, [pc, #20]	; (803a948 <std+0x38>)
 803a934:	6263      	str	r3, [r4, #36]	; 0x24
 803a936:	4b05      	ldr	r3, [pc, #20]	; (803a94c <std+0x3c>)
 803a938:	62a3      	str	r3, [r4, #40]	; 0x28
 803a93a:	4b05      	ldr	r3, [pc, #20]	; (803a950 <std+0x40>)
 803a93c:	62e3      	str	r3, [r4, #44]	; 0x2c
 803a93e:	4b05      	ldr	r3, [pc, #20]	; (803a954 <std+0x44>)
 803a940:	6224      	str	r4, [r4, #32]
 803a942:	6323      	str	r3, [r4, #48]	; 0x30
 803a944:	bd10      	pop	{r4, pc}
 803a946:	bf00      	nop
 803a948:	0803baf5 	.word	0x0803baf5
 803a94c:	0803bb17 	.word	0x0803bb17
 803a950:	0803bb4f 	.word	0x0803bb4f
 803a954:	0803bb73 	.word	0x0803bb73

0803a958 <_cleanup_r>:
 803a958:	4901      	ldr	r1, [pc, #4]	; (803a960 <_cleanup_r+0x8>)
 803a95a:	f000 b8af 	b.w	803aabc <_fwalk_reent>
 803a95e:	bf00      	nop
 803a960:	0803a899 	.word	0x0803a899

0803a964 <__sfmoreglue>:
 803a964:	b570      	push	{r4, r5, r6, lr}
 803a966:	1e4a      	subs	r2, r1, #1
 803a968:	2568      	movs	r5, #104	; 0x68
 803a96a:	4355      	muls	r5, r2
 803a96c:	460e      	mov	r6, r1
 803a96e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 803a972:	f000 f9b5 	bl	803ace0 <_malloc_r>
 803a976:	4604      	mov	r4, r0
 803a978:	b140      	cbz	r0, 803a98c <__sfmoreglue+0x28>
 803a97a:	2100      	movs	r1, #0
 803a97c:	e9c0 1600 	strd	r1, r6, [r0]
 803a980:	300c      	adds	r0, #12
 803a982:	60a0      	str	r0, [r4, #8]
 803a984:	f105 0268 	add.w	r2, r5, #104	; 0x68
 803a988:	f000 f952 	bl	803ac30 <memset>
 803a98c:	4620      	mov	r0, r4
 803a98e:	bd70      	pop	{r4, r5, r6, pc}

0803a990 <__sfp_lock_acquire>:
 803a990:	4801      	ldr	r0, [pc, #4]	; (803a998 <__sfp_lock_acquire+0x8>)
 803a992:	f000 b8d8 	b.w	803ab46 <__retarget_lock_acquire_recursive>
 803a996:	bf00      	nop
 803a998:	20000b7c 	.word	0x20000b7c

0803a99c <__sfp_lock_release>:
 803a99c:	4801      	ldr	r0, [pc, #4]	; (803a9a4 <__sfp_lock_release+0x8>)
 803a99e:	f000 b8d3 	b.w	803ab48 <__retarget_lock_release_recursive>
 803a9a2:	bf00      	nop
 803a9a4:	20000b7c 	.word	0x20000b7c

0803a9a8 <__sinit_lock_acquire>:
 803a9a8:	4801      	ldr	r0, [pc, #4]	; (803a9b0 <__sinit_lock_acquire+0x8>)
 803a9aa:	f000 b8cc 	b.w	803ab46 <__retarget_lock_acquire_recursive>
 803a9ae:	bf00      	nop
 803a9b0:	20000b77 	.word	0x20000b77

0803a9b4 <__sinit_lock_release>:
 803a9b4:	4801      	ldr	r0, [pc, #4]	; (803a9bc <__sinit_lock_release+0x8>)
 803a9b6:	f000 b8c7 	b.w	803ab48 <__retarget_lock_release_recursive>
 803a9ba:	bf00      	nop
 803a9bc:	20000b77 	.word	0x20000b77

0803a9c0 <__sinit>:
 803a9c0:	b510      	push	{r4, lr}
 803a9c2:	4604      	mov	r4, r0
 803a9c4:	f7ff fff0 	bl	803a9a8 <__sinit_lock_acquire>
 803a9c8:	69a3      	ldr	r3, [r4, #24]
 803a9ca:	b11b      	cbz	r3, 803a9d4 <__sinit+0x14>
 803a9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 803a9d0:	f7ff bff0 	b.w	803a9b4 <__sinit_lock_release>
 803a9d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 803a9d8:	6523      	str	r3, [r4, #80]	; 0x50
 803a9da:	4b13      	ldr	r3, [pc, #76]	; (803aa28 <__sinit+0x68>)
 803a9dc:	4a13      	ldr	r2, [pc, #76]	; (803aa2c <__sinit+0x6c>)
 803a9de:	681b      	ldr	r3, [r3, #0]
 803a9e0:	62a2      	str	r2, [r4, #40]	; 0x28
 803a9e2:	42a3      	cmp	r3, r4
 803a9e4:	bf04      	itt	eq
 803a9e6:	2301      	moveq	r3, #1
 803a9e8:	61a3      	streq	r3, [r4, #24]
 803a9ea:	4620      	mov	r0, r4
 803a9ec:	f000 f820 	bl	803aa30 <__sfp>
 803a9f0:	6060      	str	r0, [r4, #4]
 803a9f2:	4620      	mov	r0, r4
 803a9f4:	f000 f81c 	bl	803aa30 <__sfp>
 803a9f8:	60a0      	str	r0, [r4, #8]
 803a9fa:	4620      	mov	r0, r4
 803a9fc:	f000 f818 	bl	803aa30 <__sfp>
 803aa00:	2200      	movs	r2, #0
 803aa02:	60e0      	str	r0, [r4, #12]
 803aa04:	2104      	movs	r1, #4
 803aa06:	6860      	ldr	r0, [r4, #4]
 803aa08:	f7ff ff82 	bl	803a910 <std>
 803aa0c:	68a0      	ldr	r0, [r4, #8]
 803aa0e:	2201      	movs	r2, #1
 803aa10:	2109      	movs	r1, #9
 803aa12:	f7ff ff7d 	bl	803a910 <std>
 803aa16:	68e0      	ldr	r0, [r4, #12]
 803aa18:	2202      	movs	r2, #2
 803aa1a:	2112      	movs	r1, #18
 803aa1c:	f7ff ff78 	bl	803a910 <std>
 803aa20:	2301      	movs	r3, #1
 803aa22:	61a3      	str	r3, [r4, #24]
 803aa24:	e7d2      	b.n	803a9cc <__sinit+0xc>
 803aa26:	bf00      	nop
 803aa28:	08040024 	.word	0x08040024
 803aa2c:	0803a959 	.word	0x0803a959

0803aa30 <__sfp>:
 803aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803aa32:	4607      	mov	r7, r0
 803aa34:	f7ff ffac 	bl	803a990 <__sfp_lock_acquire>
 803aa38:	4b1e      	ldr	r3, [pc, #120]	; (803aab4 <__sfp+0x84>)
 803aa3a:	681e      	ldr	r6, [r3, #0]
 803aa3c:	69b3      	ldr	r3, [r6, #24]
 803aa3e:	b913      	cbnz	r3, 803aa46 <__sfp+0x16>
 803aa40:	4630      	mov	r0, r6
 803aa42:	f7ff ffbd 	bl	803a9c0 <__sinit>
 803aa46:	3648      	adds	r6, #72	; 0x48
 803aa48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 803aa4c:	3b01      	subs	r3, #1
 803aa4e:	d503      	bpl.n	803aa58 <__sfp+0x28>
 803aa50:	6833      	ldr	r3, [r6, #0]
 803aa52:	b30b      	cbz	r3, 803aa98 <__sfp+0x68>
 803aa54:	6836      	ldr	r6, [r6, #0]
 803aa56:	e7f7      	b.n	803aa48 <__sfp+0x18>
 803aa58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 803aa5c:	b9d5      	cbnz	r5, 803aa94 <__sfp+0x64>
 803aa5e:	4b16      	ldr	r3, [pc, #88]	; (803aab8 <__sfp+0x88>)
 803aa60:	60e3      	str	r3, [r4, #12]
 803aa62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 803aa66:	6665      	str	r5, [r4, #100]	; 0x64
 803aa68:	f000 f86c 	bl	803ab44 <__retarget_lock_init_recursive>
 803aa6c:	f7ff ff96 	bl	803a99c <__sfp_lock_release>
 803aa70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 803aa74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 803aa78:	6025      	str	r5, [r4, #0]
 803aa7a:	61a5      	str	r5, [r4, #24]
 803aa7c:	2208      	movs	r2, #8
 803aa7e:	4629      	mov	r1, r5
 803aa80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 803aa84:	f000 f8d4 	bl	803ac30 <memset>
 803aa88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 803aa8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 803aa90:	4620      	mov	r0, r4
 803aa92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803aa94:	3468      	adds	r4, #104	; 0x68
 803aa96:	e7d9      	b.n	803aa4c <__sfp+0x1c>
 803aa98:	2104      	movs	r1, #4
 803aa9a:	4638      	mov	r0, r7
 803aa9c:	f7ff ff62 	bl	803a964 <__sfmoreglue>
 803aaa0:	4604      	mov	r4, r0
 803aaa2:	6030      	str	r0, [r6, #0]
 803aaa4:	2800      	cmp	r0, #0
 803aaa6:	d1d5      	bne.n	803aa54 <__sfp+0x24>
 803aaa8:	f7ff ff78 	bl	803a99c <__sfp_lock_release>
 803aaac:	230c      	movs	r3, #12
 803aaae:	603b      	str	r3, [r7, #0]
 803aab0:	e7ee      	b.n	803aa90 <__sfp+0x60>
 803aab2:	bf00      	nop
 803aab4:	08040024 	.word	0x08040024
 803aab8:	ffff0001 	.word	0xffff0001

0803aabc <_fwalk_reent>:
 803aabc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803aac0:	4606      	mov	r6, r0
 803aac2:	4688      	mov	r8, r1
 803aac4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 803aac8:	2700      	movs	r7, #0
 803aaca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803aace:	f1b9 0901 	subs.w	r9, r9, #1
 803aad2:	d505      	bpl.n	803aae0 <_fwalk_reent+0x24>
 803aad4:	6824      	ldr	r4, [r4, #0]
 803aad6:	2c00      	cmp	r4, #0
 803aad8:	d1f7      	bne.n	803aaca <_fwalk_reent+0xe>
 803aada:	4638      	mov	r0, r7
 803aadc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803aae0:	89ab      	ldrh	r3, [r5, #12]
 803aae2:	2b01      	cmp	r3, #1
 803aae4:	d907      	bls.n	803aaf6 <_fwalk_reent+0x3a>
 803aae6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 803aaea:	3301      	adds	r3, #1
 803aaec:	d003      	beq.n	803aaf6 <_fwalk_reent+0x3a>
 803aaee:	4629      	mov	r1, r5
 803aaf0:	4630      	mov	r0, r6
 803aaf2:	47c0      	blx	r8
 803aaf4:	4307      	orrs	r7, r0
 803aaf6:	3568      	adds	r5, #104	; 0x68
 803aaf8:	e7e9      	b.n	803aace <_fwalk_reent+0x12>
	...

0803aafc <__libc_init_array>:
 803aafc:	b570      	push	{r4, r5, r6, lr}
 803aafe:	4d0d      	ldr	r5, [pc, #52]	; (803ab34 <__libc_init_array+0x38>)
 803ab00:	4c0d      	ldr	r4, [pc, #52]	; (803ab38 <__libc_init_array+0x3c>)
 803ab02:	1b64      	subs	r4, r4, r5
 803ab04:	10a4      	asrs	r4, r4, #2
 803ab06:	2600      	movs	r6, #0
 803ab08:	42a6      	cmp	r6, r4
 803ab0a:	d109      	bne.n	803ab20 <__libc_init_array+0x24>
 803ab0c:	4d0b      	ldr	r5, [pc, #44]	; (803ab3c <__libc_init_array+0x40>)
 803ab0e:	4c0c      	ldr	r4, [pc, #48]	; (803ab40 <__libc_init_array+0x44>)
 803ab10:	f004 fa8e 	bl	803f030 <_init>
 803ab14:	1b64      	subs	r4, r4, r5
 803ab16:	10a4      	asrs	r4, r4, #2
 803ab18:	2600      	movs	r6, #0
 803ab1a:	42a6      	cmp	r6, r4
 803ab1c:	d105      	bne.n	803ab2a <__libc_init_array+0x2e>
 803ab1e:	bd70      	pop	{r4, r5, r6, pc}
 803ab20:	f855 3b04 	ldr.w	r3, [r5], #4
 803ab24:	4798      	blx	r3
 803ab26:	3601      	adds	r6, #1
 803ab28:	e7ee      	b.n	803ab08 <__libc_init_array+0xc>
 803ab2a:	f855 3b04 	ldr.w	r3, [r5], #4
 803ab2e:	4798      	blx	r3
 803ab30:	3601      	adds	r6, #1
 803ab32:	e7f2      	b.n	803ab1a <__libc_init_array+0x1e>
 803ab34:	08040484 	.word	0x08040484
 803ab38:	08040484 	.word	0x08040484
 803ab3c:	08040484 	.word	0x08040484
 803ab40:	08040488 	.word	0x08040488

0803ab44 <__retarget_lock_init_recursive>:
 803ab44:	4770      	bx	lr

0803ab46 <__retarget_lock_acquire_recursive>:
 803ab46:	4770      	bx	lr

0803ab48 <__retarget_lock_release_recursive>:
 803ab48:	4770      	bx	lr

0803ab4a <__swhatbuf_r>:
 803ab4a:	b570      	push	{r4, r5, r6, lr}
 803ab4c:	460e      	mov	r6, r1
 803ab4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803ab52:	2900      	cmp	r1, #0
 803ab54:	b096      	sub	sp, #88	; 0x58
 803ab56:	4614      	mov	r4, r2
 803ab58:	461d      	mov	r5, r3
 803ab5a:	da07      	bge.n	803ab6c <__swhatbuf_r+0x22>
 803ab5c:	2300      	movs	r3, #0
 803ab5e:	602b      	str	r3, [r5, #0]
 803ab60:	89b3      	ldrh	r3, [r6, #12]
 803ab62:	061a      	lsls	r2, r3, #24
 803ab64:	d410      	bmi.n	803ab88 <__swhatbuf_r+0x3e>
 803ab66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803ab6a:	e00e      	b.n	803ab8a <__swhatbuf_r+0x40>
 803ab6c:	466a      	mov	r2, sp
 803ab6e:	f002 fd63 	bl	803d638 <_fstat_r>
 803ab72:	2800      	cmp	r0, #0
 803ab74:	dbf2      	blt.n	803ab5c <__swhatbuf_r+0x12>
 803ab76:	9a01      	ldr	r2, [sp, #4]
 803ab78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 803ab7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 803ab80:	425a      	negs	r2, r3
 803ab82:	415a      	adcs	r2, r3
 803ab84:	602a      	str	r2, [r5, #0]
 803ab86:	e7ee      	b.n	803ab66 <__swhatbuf_r+0x1c>
 803ab88:	2340      	movs	r3, #64	; 0x40
 803ab8a:	2000      	movs	r0, #0
 803ab8c:	6023      	str	r3, [r4, #0]
 803ab8e:	b016      	add	sp, #88	; 0x58
 803ab90:	bd70      	pop	{r4, r5, r6, pc}
	...

0803ab94 <__smakebuf_r>:
 803ab94:	898b      	ldrh	r3, [r1, #12]
 803ab96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 803ab98:	079d      	lsls	r5, r3, #30
 803ab9a:	4606      	mov	r6, r0
 803ab9c:	460c      	mov	r4, r1
 803ab9e:	d507      	bpl.n	803abb0 <__smakebuf_r+0x1c>
 803aba0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 803aba4:	6023      	str	r3, [r4, #0]
 803aba6:	6123      	str	r3, [r4, #16]
 803aba8:	2301      	movs	r3, #1
 803abaa:	6163      	str	r3, [r4, #20]
 803abac:	b002      	add	sp, #8
 803abae:	bd70      	pop	{r4, r5, r6, pc}
 803abb0:	ab01      	add	r3, sp, #4
 803abb2:	466a      	mov	r2, sp
 803abb4:	f7ff ffc9 	bl	803ab4a <__swhatbuf_r>
 803abb8:	9900      	ldr	r1, [sp, #0]
 803abba:	4605      	mov	r5, r0
 803abbc:	4630      	mov	r0, r6
 803abbe:	f000 f88f 	bl	803ace0 <_malloc_r>
 803abc2:	b948      	cbnz	r0, 803abd8 <__smakebuf_r+0x44>
 803abc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803abc8:	059a      	lsls	r2, r3, #22
 803abca:	d4ef      	bmi.n	803abac <__smakebuf_r+0x18>
 803abcc:	f023 0303 	bic.w	r3, r3, #3
 803abd0:	f043 0302 	orr.w	r3, r3, #2
 803abd4:	81a3      	strh	r3, [r4, #12]
 803abd6:	e7e3      	b.n	803aba0 <__smakebuf_r+0xc>
 803abd8:	4b0d      	ldr	r3, [pc, #52]	; (803ac10 <__smakebuf_r+0x7c>)
 803abda:	62b3      	str	r3, [r6, #40]	; 0x28
 803abdc:	89a3      	ldrh	r3, [r4, #12]
 803abde:	6020      	str	r0, [r4, #0]
 803abe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803abe4:	81a3      	strh	r3, [r4, #12]
 803abe6:	9b00      	ldr	r3, [sp, #0]
 803abe8:	6163      	str	r3, [r4, #20]
 803abea:	9b01      	ldr	r3, [sp, #4]
 803abec:	6120      	str	r0, [r4, #16]
 803abee:	b15b      	cbz	r3, 803ac08 <__smakebuf_r+0x74>
 803abf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803abf4:	4630      	mov	r0, r6
 803abf6:	f003 f8a1 	bl	803dd3c <_isatty_r>
 803abfa:	b128      	cbz	r0, 803ac08 <__smakebuf_r+0x74>
 803abfc:	89a3      	ldrh	r3, [r4, #12]
 803abfe:	f023 0303 	bic.w	r3, r3, #3
 803ac02:	f043 0301 	orr.w	r3, r3, #1
 803ac06:	81a3      	strh	r3, [r4, #12]
 803ac08:	89a0      	ldrh	r0, [r4, #12]
 803ac0a:	4305      	orrs	r5, r0
 803ac0c:	81a5      	strh	r5, [r4, #12]
 803ac0e:	e7cd      	b.n	803abac <__smakebuf_r+0x18>
 803ac10:	0803a959 	.word	0x0803a959

0803ac14 <memcpy>:
 803ac14:	440a      	add	r2, r1
 803ac16:	4291      	cmp	r1, r2
 803ac18:	f100 33ff 	add.w	r3, r0, #4294967295
 803ac1c:	d100      	bne.n	803ac20 <memcpy+0xc>
 803ac1e:	4770      	bx	lr
 803ac20:	b510      	push	{r4, lr}
 803ac22:	f811 4b01 	ldrb.w	r4, [r1], #1
 803ac26:	f803 4f01 	strb.w	r4, [r3, #1]!
 803ac2a:	4291      	cmp	r1, r2
 803ac2c:	d1f9      	bne.n	803ac22 <memcpy+0xe>
 803ac2e:	bd10      	pop	{r4, pc}

0803ac30 <memset>:
 803ac30:	4402      	add	r2, r0
 803ac32:	4603      	mov	r3, r0
 803ac34:	4293      	cmp	r3, r2
 803ac36:	d100      	bne.n	803ac3a <memset+0xa>
 803ac38:	4770      	bx	lr
 803ac3a:	f803 1b01 	strb.w	r1, [r3], #1
 803ac3e:	e7f9      	b.n	803ac34 <memset+0x4>

0803ac40 <_free_r>:
 803ac40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 803ac42:	2900      	cmp	r1, #0
 803ac44:	d048      	beq.n	803acd8 <_free_r+0x98>
 803ac46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803ac4a:	9001      	str	r0, [sp, #4]
 803ac4c:	2b00      	cmp	r3, #0
 803ac4e:	f1a1 0404 	sub.w	r4, r1, #4
 803ac52:	bfb8      	it	lt
 803ac54:	18e4      	addlt	r4, r4, r3
 803ac56:	f003 f8b1 	bl	803ddbc <__malloc_lock>
 803ac5a:	4a20      	ldr	r2, [pc, #128]	; (803acdc <_free_r+0x9c>)
 803ac5c:	9801      	ldr	r0, [sp, #4]
 803ac5e:	6813      	ldr	r3, [r2, #0]
 803ac60:	4615      	mov	r5, r2
 803ac62:	b933      	cbnz	r3, 803ac72 <_free_r+0x32>
 803ac64:	6063      	str	r3, [r4, #4]
 803ac66:	6014      	str	r4, [r2, #0]
 803ac68:	b003      	add	sp, #12
 803ac6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803ac6e:	f003 b8ab 	b.w	803ddc8 <__malloc_unlock>
 803ac72:	42a3      	cmp	r3, r4
 803ac74:	d90b      	bls.n	803ac8e <_free_r+0x4e>
 803ac76:	6821      	ldr	r1, [r4, #0]
 803ac78:	1862      	adds	r2, r4, r1
 803ac7a:	4293      	cmp	r3, r2
 803ac7c:	bf04      	itt	eq
 803ac7e:	681a      	ldreq	r2, [r3, #0]
 803ac80:	685b      	ldreq	r3, [r3, #4]
 803ac82:	6063      	str	r3, [r4, #4]
 803ac84:	bf04      	itt	eq
 803ac86:	1852      	addeq	r2, r2, r1
 803ac88:	6022      	streq	r2, [r4, #0]
 803ac8a:	602c      	str	r4, [r5, #0]
 803ac8c:	e7ec      	b.n	803ac68 <_free_r+0x28>
 803ac8e:	461a      	mov	r2, r3
 803ac90:	685b      	ldr	r3, [r3, #4]
 803ac92:	b10b      	cbz	r3, 803ac98 <_free_r+0x58>
 803ac94:	42a3      	cmp	r3, r4
 803ac96:	d9fa      	bls.n	803ac8e <_free_r+0x4e>
 803ac98:	6811      	ldr	r1, [r2, #0]
 803ac9a:	1855      	adds	r5, r2, r1
 803ac9c:	42a5      	cmp	r5, r4
 803ac9e:	d10b      	bne.n	803acb8 <_free_r+0x78>
 803aca0:	6824      	ldr	r4, [r4, #0]
 803aca2:	4421      	add	r1, r4
 803aca4:	1854      	adds	r4, r2, r1
 803aca6:	42a3      	cmp	r3, r4
 803aca8:	6011      	str	r1, [r2, #0]
 803acaa:	d1dd      	bne.n	803ac68 <_free_r+0x28>
 803acac:	681c      	ldr	r4, [r3, #0]
 803acae:	685b      	ldr	r3, [r3, #4]
 803acb0:	6053      	str	r3, [r2, #4]
 803acb2:	4421      	add	r1, r4
 803acb4:	6011      	str	r1, [r2, #0]
 803acb6:	e7d7      	b.n	803ac68 <_free_r+0x28>
 803acb8:	d902      	bls.n	803acc0 <_free_r+0x80>
 803acba:	230c      	movs	r3, #12
 803acbc:	6003      	str	r3, [r0, #0]
 803acbe:	e7d3      	b.n	803ac68 <_free_r+0x28>
 803acc0:	6825      	ldr	r5, [r4, #0]
 803acc2:	1961      	adds	r1, r4, r5
 803acc4:	428b      	cmp	r3, r1
 803acc6:	bf04      	itt	eq
 803acc8:	6819      	ldreq	r1, [r3, #0]
 803acca:	685b      	ldreq	r3, [r3, #4]
 803accc:	6063      	str	r3, [r4, #4]
 803acce:	bf04      	itt	eq
 803acd0:	1949      	addeq	r1, r1, r5
 803acd2:	6021      	streq	r1, [r4, #0]
 803acd4:	6054      	str	r4, [r2, #4]
 803acd6:	e7c7      	b.n	803ac68 <_free_r+0x28>
 803acd8:	b003      	add	sp, #12
 803acda:	bd30      	pop	{r4, r5, pc}
 803acdc:	2000046c 	.word	0x2000046c

0803ace0 <_malloc_r>:
 803ace0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803ace2:	1ccd      	adds	r5, r1, #3
 803ace4:	f025 0503 	bic.w	r5, r5, #3
 803ace8:	3508      	adds	r5, #8
 803acea:	2d0c      	cmp	r5, #12
 803acec:	bf38      	it	cc
 803acee:	250c      	movcc	r5, #12
 803acf0:	2d00      	cmp	r5, #0
 803acf2:	4606      	mov	r6, r0
 803acf4:	db01      	blt.n	803acfa <_malloc_r+0x1a>
 803acf6:	42a9      	cmp	r1, r5
 803acf8:	d903      	bls.n	803ad02 <_malloc_r+0x22>
 803acfa:	230c      	movs	r3, #12
 803acfc:	6033      	str	r3, [r6, #0]
 803acfe:	2000      	movs	r0, #0
 803ad00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803ad02:	f003 f85b 	bl	803ddbc <__malloc_lock>
 803ad06:	4921      	ldr	r1, [pc, #132]	; (803ad8c <_malloc_r+0xac>)
 803ad08:	680a      	ldr	r2, [r1, #0]
 803ad0a:	4614      	mov	r4, r2
 803ad0c:	b99c      	cbnz	r4, 803ad36 <_malloc_r+0x56>
 803ad0e:	4f20      	ldr	r7, [pc, #128]	; (803ad90 <_malloc_r+0xb0>)
 803ad10:	683b      	ldr	r3, [r7, #0]
 803ad12:	b923      	cbnz	r3, 803ad1e <_malloc_r+0x3e>
 803ad14:	4621      	mov	r1, r4
 803ad16:	4630      	mov	r0, r6
 803ad18:	f000 feb6 	bl	803ba88 <_sbrk_r>
 803ad1c:	6038      	str	r0, [r7, #0]
 803ad1e:	4629      	mov	r1, r5
 803ad20:	4630      	mov	r0, r6
 803ad22:	f000 feb1 	bl	803ba88 <_sbrk_r>
 803ad26:	1c43      	adds	r3, r0, #1
 803ad28:	d123      	bne.n	803ad72 <_malloc_r+0x92>
 803ad2a:	230c      	movs	r3, #12
 803ad2c:	6033      	str	r3, [r6, #0]
 803ad2e:	4630      	mov	r0, r6
 803ad30:	f003 f84a 	bl	803ddc8 <__malloc_unlock>
 803ad34:	e7e3      	b.n	803acfe <_malloc_r+0x1e>
 803ad36:	6823      	ldr	r3, [r4, #0]
 803ad38:	1b5b      	subs	r3, r3, r5
 803ad3a:	d417      	bmi.n	803ad6c <_malloc_r+0x8c>
 803ad3c:	2b0b      	cmp	r3, #11
 803ad3e:	d903      	bls.n	803ad48 <_malloc_r+0x68>
 803ad40:	6023      	str	r3, [r4, #0]
 803ad42:	441c      	add	r4, r3
 803ad44:	6025      	str	r5, [r4, #0]
 803ad46:	e004      	b.n	803ad52 <_malloc_r+0x72>
 803ad48:	6863      	ldr	r3, [r4, #4]
 803ad4a:	42a2      	cmp	r2, r4
 803ad4c:	bf0c      	ite	eq
 803ad4e:	600b      	streq	r3, [r1, #0]
 803ad50:	6053      	strne	r3, [r2, #4]
 803ad52:	4630      	mov	r0, r6
 803ad54:	f003 f838 	bl	803ddc8 <__malloc_unlock>
 803ad58:	f104 000b 	add.w	r0, r4, #11
 803ad5c:	1d23      	adds	r3, r4, #4
 803ad5e:	f020 0007 	bic.w	r0, r0, #7
 803ad62:	1ac2      	subs	r2, r0, r3
 803ad64:	d0cc      	beq.n	803ad00 <_malloc_r+0x20>
 803ad66:	1a1b      	subs	r3, r3, r0
 803ad68:	50a3      	str	r3, [r4, r2]
 803ad6a:	e7c9      	b.n	803ad00 <_malloc_r+0x20>
 803ad6c:	4622      	mov	r2, r4
 803ad6e:	6864      	ldr	r4, [r4, #4]
 803ad70:	e7cc      	b.n	803ad0c <_malloc_r+0x2c>
 803ad72:	1cc4      	adds	r4, r0, #3
 803ad74:	f024 0403 	bic.w	r4, r4, #3
 803ad78:	42a0      	cmp	r0, r4
 803ad7a:	d0e3      	beq.n	803ad44 <_malloc_r+0x64>
 803ad7c:	1a21      	subs	r1, r4, r0
 803ad7e:	4630      	mov	r0, r6
 803ad80:	f000 fe82 	bl	803ba88 <_sbrk_r>
 803ad84:	3001      	adds	r0, #1
 803ad86:	d1dd      	bne.n	803ad44 <_malloc_r+0x64>
 803ad88:	e7cf      	b.n	803ad2a <_malloc_r+0x4a>
 803ad8a:	bf00      	nop
 803ad8c:	2000046c 	.word	0x2000046c
 803ad90:	20000470 	.word	0x20000470

0803ad94 <__cvt>:
 803ad94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803ad98:	ec55 4b10 	vmov	r4, r5, d0
 803ad9c:	2d00      	cmp	r5, #0
 803ad9e:	460e      	mov	r6, r1
 803ada0:	4619      	mov	r1, r3
 803ada2:	462b      	mov	r3, r5
 803ada4:	bfbb      	ittet	lt
 803ada6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 803adaa:	461d      	movlt	r5, r3
 803adac:	2300      	movge	r3, #0
 803adae:	232d      	movlt	r3, #45	; 0x2d
 803adb0:	700b      	strb	r3, [r1, #0]
 803adb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 803adb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 803adb8:	4691      	mov	r9, r2
 803adba:	f023 0820 	bic.w	r8, r3, #32
 803adbe:	bfbc      	itt	lt
 803adc0:	4622      	movlt	r2, r4
 803adc2:	4614      	movlt	r4, r2
 803adc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 803adc8:	d005      	beq.n	803add6 <__cvt+0x42>
 803adca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 803adce:	d100      	bne.n	803add2 <__cvt+0x3e>
 803add0:	3601      	adds	r6, #1
 803add2:	2102      	movs	r1, #2
 803add4:	e000      	b.n	803add8 <__cvt+0x44>
 803add6:	2103      	movs	r1, #3
 803add8:	ab03      	add	r3, sp, #12
 803adda:	9301      	str	r3, [sp, #4]
 803addc:	ab02      	add	r3, sp, #8
 803adde:	9300      	str	r3, [sp, #0]
 803ade0:	ec45 4b10 	vmov	d0, r4, r5
 803ade4:	4653      	mov	r3, sl
 803ade6:	4632      	mov	r2, r6
 803ade8:	f001 fe3a 	bl	803ca60 <_dtoa_r>
 803adec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 803adf0:	4607      	mov	r7, r0
 803adf2:	d102      	bne.n	803adfa <__cvt+0x66>
 803adf4:	f019 0f01 	tst.w	r9, #1
 803adf8:	d022      	beq.n	803ae40 <__cvt+0xac>
 803adfa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 803adfe:	eb07 0906 	add.w	r9, r7, r6
 803ae02:	d110      	bne.n	803ae26 <__cvt+0x92>
 803ae04:	783b      	ldrb	r3, [r7, #0]
 803ae06:	2b30      	cmp	r3, #48	; 0x30
 803ae08:	d10a      	bne.n	803ae20 <__cvt+0x8c>
 803ae0a:	2200      	movs	r2, #0
 803ae0c:	2300      	movs	r3, #0
 803ae0e:	4620      	mov	r0, r4
 803ae10:	4629      	mov	r1, r5
 803ae12:	f7e5 fe59 	bl	8020ac8 <__aeabi_dcmpeq>
 803ae16:	b918      	cbnz	r0, 803ae20 <__cvt+0x8c>
 803ae18:	f1c6 0601 	rsb	r6, r6, #1
 803ae1c:	f8ca 6000 	str.w	r6, [sl]
 803ae20:	f8da 3000 	ldr.w	r3, [sl]
 803ae24:	4499      	add	r9, r3
 803ae26:	2200      	movs	r2, #0
 803ae28:	2300      	movs	r3, #0
 803ae2a:	4620      	mov	r0, r4
 803ae2c:	4629      	mov	r1, r5
 803ae2e:	f7e5 fe4b 	bl	8020ac8 <__aeabi_dcmpeq>
 803ae32:	b108      	cbz	r0, 803ae38 <__cvt+0xa4>
 803ae34:	f8cd 900c 	str.w	r9, [sp, #12]
 803ae38:	2230      	movs	r2, #48	; 0x30
 803ae3a:	9b03      	ldr	r3, [sp, #12]
 803ae3c:	454b      	cmp	r3, r9
 803ae3e:	d307      	bcc.n	803ae50 <__cvt+0xbc>
 803ae40:	9b03      	ldr	r3, [sp, #12]
 803ae42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 803ae44:	1bdb      	subs	r3, r3, r7
 803ae46:	4638      	mov	r0, r7
 803ae48:	6013      	str	r3, [r2, #0]
 803ae4a:	b004      	add	sp, #16
 803ae4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803ae50:	1c59      	adds	r1, r3, #1
 803ae52:	9103      	str	r1, [sp, #12]
 803ae54:	701a      	strb	r2, [r3, #0]
 803ae56:	e7f0      	b.n	803ae3a <__cvt+0xa6>

0803ae58 <__exponent>:
 803ae58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 803ae5a:	4603      	mov	r3, r0
 803ae5c:	2900      	cmp	r1, #0
 803ae5e:	bfb8      	it	lt
 803ae60:	4249      	neglt	r1, r1
 803ae62:	f803 2b02 	strb.w	r2, [r3], #2
 803ae66:	bfb4      	ite	lt
 803ae68:	222d      	movlt	r2, #45	; 0x2d
 803ae6a:	222b      	movge	r2, #43	; 0x2b
 803ae6c:	2909      	cmp	r1, #9
 803ae6e:	7042      	strb	r2, [r0, #1]
 803ae70:	dd2a      	ble.n	803aec8 <__exponent+0x70>
 803ae72:	f10d 0407 	add.w	r4, sp, #7
 803ae76:	46a4      	mov	ip, r4
 803ae78:	270a      	movs	r7, #10
 803ae7a:	46a6      	mov	lr, r4
 803ae7c:	460a      	mov	r2, r1
 803ae7e:	fb91 f6f7 	sdiv	r6, r1, r7
 803ae82:	fb07 1516 	mls	r5, r7, r6, r1
 803ae86:	3530      	adds	r5, #48	; 0x30
 803ae88:	2a63      	cmp	r2, #99	; 0x63
 803ae8a:	f104 34ff 	add.w	r4, r4, #4294967295
 803ae8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 803ae92:	4631      	mov	r1, r6
 803ae94:	dcf1      	bgt.n	803ae7a <__exponent+0x22>
 803ae96:	3130      	adds	r1, #48	; 0x30
 803ae98:	f1ae 0502 	sub.w	r5, lr, #2
 803ae9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 803aea0:	1c44      	adds	r4, r0, #1
 803aea2:	4629      	mov	r1, r5
 803aea4:	4561      	cmp	r1, ip
 803aea6:	d30a      	bcc.n	803aebe <__exponent+0x66>
 803aea8:	f10d 0209 	add.w	r2, sp, #9
 803aeac:	eba2 020e 	sub.w	r2, r2, lr
 803aeb0:	4565      	cmp	r5, ip
 803aeb2:	bf88      	it	hi
 803aeb4:	2200      	movhi	r2, #0
 803aeb6:	4413      	add	r3, r2
 803aeb8:	1a18      	subs	r0, r3, r0
 803aeba:	b003      	add	sp, #12
 803aebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803aebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 803aec2:	f804 2f01 	strb.w	r2, [r4, #1]!
 803aec6:	e7ed      	b.n	803aea4 <__exponent+0x4c>
 803aec8:	2330      	movs	r3, #48	; 0x30
 803aeca:	3130      	adds	r1, #48	; 0x30
 803aecc:	7083      	strb	r3, [r0, #2]
 803aece:	70c1      	strb	r1, [r0, #3]
 803aed0:	1d03      	adds	r3, r0, #4
 803aed2:	e7f1      	b.n	803aeb8 <__exponent+0x60>

0803aed4 <_printf_float>:
 803aed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803aed8:	ed2d 8b02 	vpush	{d8}
 803aedc:	b08d      	sub	sp, #52	; 0x34
 803aede:	460c      	mov	r4, r1
 803aee0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 803aee4:	4616      	mov	r6, r2
 803aee6:	461f      	mov	r7, r3
 803aee8:	4605      	mov	r5, r0
 803aeea:	f002 ff37 	bl	803dd5c <_localeconv_r>
 803aeee:	f8d0 a000 	ldr.w	sl, [r0]
 803aef2:	4650      	mov	r0, sl
 803aef4:	f7e5 f96c 	bl	80201d0 <strlen>
 803aef8:	2300      	movs	r3, #0
 803aefa:	930a      	str	r3, [sp, #40]	; 0x28
 803aefc:	6823      	ldr	r3, [r4, #0]
 803aefe:	9305      	str	r3, [sp, #20]
 803af00:	f8d8 3000 	ldr.w	r3, [r8]
 803af04:	f894 b018 	ldrb.w	fp, [r4, #24]
 803af08:	3307      	adds	r3, #7
 803af0a:	f023 0307 	bic.w	r3, r3, #7
 803af0e:	f103 0208 	add.w	r2, r3, #8
 803af12:	f8c8 2000 	str.w	r2, [r8]
 803af16:	e9d3 2300 	ldrd	r2, r3, [r3]
 803af1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 803af1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 803af22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 803af26:	9307      	str	r3, [sp, #28]
 803af28:	f8cd 8018 	str.w	r8, [sp, #24]
 803af2c:	ee08 0a10 	vmov	s16, r0
 803af30:	4b9f      	ldr	r3, [pc, #636]	; (803b1b0 <_printf_float+0x2dc>)
 803af32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 803af36:	f04f 32ff 	mov.w	r2, #4294967295
 803af3a:	f7e5 fdf7 	bl	8020b2c <__aeabi_dcmpun>
 803af3e:	bb88      	cbnz	r0, 803afa4 <_printf_float+0xd0>
 803af40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 803af44:	4b9a      	ldr	r3, [pc, #616]	; (803b1b0 <_printf_float+0x2dc>)
 803af46:	f04f 32ff 	mov.w	r2, #4294967295
 803af4a:	f7e5 fdd1 	bl	8020af0 <__aeabi_dcmple>
 803af4e:	bb48      	cbnz	r0, 803afa4 <_printf_float+0xd0>
 803af50:	2200      	movs	r2, #0
 803af52:	2300      	movs	r3, #0
 803af54:	4640      	mov	r0, r8
 803af56:	4649      	mov	r1, r9
 803af58:	f7e5 fdc0 	bl	8020adc <__aeabi_dcmplt>
 803af5c:	b110      	cbz	r0, 803af64 <_printf_float+0x90>
 803af5e:	232d      	movs	r3, #45	; 0x2d
 803af60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803af64:	4b93      	ldr	r3, [pc, #588]	; (803b1b4 <_printf_float+0x2e0>)
 803af66:	4894      	ldr	r0, [pc, #592]	; (803b1b8 <_printf_float+0x2e4>)
 803af68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 803af6c:	bf94      	ite	ls
 803af6e:	4698      	movls	r8, r3
 803af70:	4680      	movhi	r8, r0
 803af72:	2303      	movs	r3, #3
 803af74:	6123      	str	r3, [r4, #16]
 803af76:	9b05      	ldr	r3, [sp, #20]
 803af78:	f023 0204 	bic.w	r2, r3, #4
 803af7c:	6022      	str	r2, [r4, #0]
 803af7e:	f04f 0900 	mov.w	r9, #0
 803af82:	9700      	str	r7, [sp, #0]
 803af84:	4633      	mov	r3, r6
 803af86:	aa0b      	add	r2, sp, #44	; 0x2c
 803af88:	4621      	mov	r1, r4
 803af8a:	4628      	mov	r0, r5
 803af8c:	f000 f9d8 	bl	803b340 <_printf_common>
 803af90:	3001      	adds	r0, #1
 803af92:	f040 8090 	bne.w	803b0b6 <_printf_float+0x1e2>
 803af96:	f04f 30ff 	mov.w	r0, #4294967295
 803af9a:	b00d      	add	sp, #52	; 0x34
 803af9c:	ecbd 8b02 	vpop	{d8}
 803afa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803afa4:	4642      	mov	r2, r8
 803afa6:	464b      	mov	r3, r9
 803afa8:	4640      	mov	r0, r8
 803afaa:	4649      	mov	r1, r9
 803afac:	f7e5 fdbe 	bl	8020b2c <__aeabi_dcmpun>
 803afb0:	b140      	cbz	r0, 803afc4 <_printf_float+0xf0>
 803afb2:	464b      	mov	r3, r9
 803afb4:	2b00      	cmp	r3, #0
 803afb6:	bfbc      	itt	lt
 803afb8:	232d      	movlt	r3, #45	; 0x2d
 803afba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 803afbe:	487f      	ldr	r0, [pc, #508]	; (803b1bc <_printf_float+0x2e8>)
 803afc0:	4b7f      	ldr	r3, [pc, #508]	; (803b1c0 <_printf_float+0x2ec>)
 803afc2:	e7d1      	b.n	803af68 <_printf_float+0x94>
 803afc4:	6863      	ldr	r3, [r4, #4]
 803afc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 803afca:	9206      	str	r2, [sp, #24]
 803afcc:	1c5a      	adds	r2, r3, #1
 803afce:	d13f      	bne.n	803b050 <_printf_float+0x17c>
 803afd0:	2306      	movs	r3, #6
 803afd2:	6063      	str	r3, [r4, #4]
 803afd4:	9b05      	ldr	r3, [sp, #20]
 803afd6:	6861      	ldr	r1, [r4, #4]
 803afd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 803afdc:	2300      	movs	r3, #0
 803afde:	9303      	str	r3, [sp, #12]
 803afe0:	ab0a      	add	r3, sp, #40	; 0x28
 803afe2:	e9cd b301 	strd	fp, r3, [sp, #4]
 803afe6:	ab09      	add	r3, sp, #36	; 0x24
 803afe8:	ec49 8b10 	vmov	d0, r8, r9
 803afec:	9300      	str	r3, [sp, #0]
 803afee:	6022      	str	r2, [r4, #0]
 803aff0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 803aff4:	4628      	mov	r0, r5
 803aff6:	f7ff fecd 	bl	803ad94 <__cvt>
 803affa:	9b06      	ldr	r3, [sp, #24]
 803affc:	9909      	ldr	r1, [sp, #36]	; 0x24
 803affe:	2b47      	cmp	r3, #71	; 0x47
 803b000:	4680      	mov	r8, r0
 803b002:	d108      	bne.n	803b016 <_printf_float+0x142>
 803b004:	1cc8      	adds	r0, r1, #3
 803b006:	db02      	blt.n	803b00e <_printf_float+0x13a>
 803b008:	6863      	ldr	r3, [r4, #4]
 803b00a:	4299      	cmp	r1, r3
 803b00c:	dd41      	ble.n	803b092 <_printf_float+0x1be>
 803b00e:	f1ab 0b02 	sub.w	fp, fp, #2
 803b012:	fa5f fb8b 	uxtb.w	fp, fp
 803b016:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 803b01a:	d820      	bhi.n	803b05e <_printf_float+0x18a>
 803b01c:	3901      	subs	r1, #1
 803b01e:	465a      	mov	r2, fp
 803b020:	f104 0050 	add.w	r0, r4, #80	; 0x50
 803b024:	9109      	str	r1, [sp, #36]	; 0x24
 803b026:	f7ff ff17 	bl	803ae58 <__exponent>
 803b02a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 803b02c:	1813      	adds	r3, r2, r0
 803b02e:	2a01      	cmp	r2, #1
 803b030:	4681      	mov	r9, r0
 803b032:	6123      	str	r3, [r4, #16]
 803b034:	dc02      	bgt.n	803b03c <_printf_float+0x168>
 803b036:	6822      	ldr	r2, [r4, #0]
 803b038:	07d2      	lsls	r2, r2, #31
 803b03a:	d501      	bpl.n	803b040 <_printf_float+0x16c>
 803b03c:	3301      	adds	r3, #1
 803b03e:	6123      	str	r3, [r4, #16]
 803b040:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 803b044:	2b00      	cmp	r3, #0
 803b046:	d09c      	beq.n	803af82 <_printf_float+0xae>
 803b048:	232d      	movs	r3, #45	; 0x2d
 803b04a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803b04e:	e798      	b.n	803af82 <_printf_float+0xae>
 803b050:	9a06      	ldr	r2, [sp, #24]
 803b052:	2a47      	cmp	r2, #71	; 0x47
 803b054:	d1be      	bne.n	803afd4 <_printf_float+0x100>
 803b056:	2b00      	cmp	r3, #0
 803b058:	d1bc      	bne.n	803afd4 <_printf_float+0x100>
 803b05a:	2301      	movs	r3, #1
 803b05c:	e7b9      	b.n	803afd2 <_printf_float+0xfe>
 803b05e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 803b062:	d118      	bne.n	803b096 <_printf_float+0x1c2>
 803b064:	2900      	cmp	r1, #0
 803b066:	6863      	ldr	r3, [r4, #4]
 803b068:	dd0b      	ble.n	803b082 <_printf_float+0x1ae>
 803b06a:	6121      	str	r1, [r4, #16]
 803b06c:	b913      	cbnz	r3, 803b074 <_printf_float+0x1a0>
 803b06e:	6822      	ldr	r2, [r4, #0]
 803b070:	07d0      	lsls	r0, r2, #31
 803b072:	d502      	bpl.n	803b07a <_printf_float+0x1a6>
 803b074:	3301      	adds	r3, #1
 803b076:	440b      	add	r3, r1
 803b078:	6123      	str	r3, [r4, #16]
 803b07a:	65a1      	str	r1, [r4, #88]	; 0x58
 803b07c:	f04f 0900 	mov.w	r9, #0
 803b080:	e7de      	b.n	803b040 <_printf_float+0x16c>
 803b082:	b913      	cbnz	r3, 803b08a <_printf_float+0x1b6>
 803b084:	6822      	ldr	r2, [r4, #0]
 803b086:	07d2      	lsls	r2, r2, #31
 803b088:	d501      	bpl.n	803b08e <_printf_float+0x1ba>
 803b08a:	3302      	adds	r3, #2
 803b08c:	e7f4      	b.n	803b078 <_printf_float+0x1a4>
 803b08e:	2301      	movs	r3, #1
 803b090:	e7f2      	b.n	803b078 <_printf_float+0x1a4>
 803b092:	f04f 0b67 	mov.w	fp, #103	; 0x67
 803b096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803b098:	4299      	cmp	r1, r3
 803b09a:	db05      	blt.n	803b0a8 <_printf_float+0x1d4>
 803b09c:	6823      	ldr	r3, [r4, #0]
 803b09e:	6121      	str	r1, [r4, #16]
 803b0a0:	07d8      	lsls	r0, r3, #31
 803b0a2:	d5ea      	bpl.n	803b07a <_printf_float+0x1a6>
 803b0a4:	1c4b      	adds	r3, r1, #1
 803b0a6:	e7e7      	b.n	803b078 <_printf_float+0x1a4>
 803b0a8:	2900      	cmp	r1, #0
 803b0aa:	bfd4      	ite	le
 803b0ac:	f1c1 0202 	rsble	r2, r1, #2
 803b0b0:	2201      	movgt	r2, #1
 803b0b2:	4413      	add	r3, r2
 803b0b4:	e7e0      	b.n	803b078 <_printf_float+0x1a4>
 803b0b6:	6823      	ldr	r3, [r4, #0]
 803b0b8:	055a      	lsls	r2, r3, #21
 803b0ba:	d407      	bmi.n	803b0cc <_printf_float+0x1f8>
 803b0bc:	6923      	ldr	r3, [r4, #16]
 803b0be:	4642      	mov	r2, r8
 803b0c0:	4631      	mov	r1, r6
 803b0c2:	4628      	mov	r0, r5
 803b0c4:	47b8      	blx	r7
 803b0c6:	3001      	adds	r0, #1
 803b0c8:	d12c      	bne.n	803b124 <_printf_float+0x250>
 803b0ca:	e764      	b.n	803af96 <_printf_float+0xc2>
 803b0cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 803b0d0:	f240 80e0 	bls.w	803b294 <_printf_float+0x3c0>
 803b0d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 803b0d8:	2200      	movs	r2, #0
 803b0da:	2300      	movs	r3, #0
 803b0dc:	f7e5 fcf4 	bl	8020ac8 <__aeabi_dcmpeq>
 803b0e0:	2800      	cmp	r0, #0
 803b0e2:	d034      	beq.n	803b14e <_printf_float+0x27a>
 803b0e4:	4a37      	ldr	r2, [pc, #220]	; (803b1c4 <_printf_float+0x2f0>)
 803b0e6:	2301      	movs	r3, #1
 803b0e8:	4631      	mov	r1, r6
 803b0ea:	4628      	mov	r0, r5
 803b0ec:	47b8      	blx	r7
 803b0ee:	3001      	adds	r0, #1
 803b0f0:	f43f af51 	beq.w	803af96 <_printf_float+0xc2>
 803b0f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 803b0f8:	429a      	cmp	r2, r3
 803b0fa:	db02      	blt.n	803b102 <_printf_float+0x22e>
 803b0fc:	6823      	ldr	r3, [r4, #0]
 803b0fe:	07d8      	lsls	r0, r3, #31
 803b100:	d510      	bpl.n	803b124 <_printf_float+0x250>
 803b102:	ee18 3a10 	vmov	r3, s16
 803b106:	4652      	mov	r2, sl
 803b108:	4631      	mov	r1, r6
 803b10a:	4628      	mov	r0, r5
 803b10c:	47b8      	blx	r7
 803b10e:	3001      	adds	r0, #1
 803b110:	f43f af41 	beq.w	803af96 <_printf_float+0xc2>
 803b114:	f04f 0800 	mov.w	r8, #0
 803b118:	f104 091a 	add.w	r9, r4, #26
 803b11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803b11e:	3b01      	subs	r3, #1
 803b120:	4543      	cmp	r3, r8
 803b122:	dc09      	bgt.n	803b138 <_printf_float+0x264>
 803b124:	6823      	ldr	r3, [r4, #0]
 803b126:	079b      	lsls	r3, r3, #30
 803b128:	f100 8105 	bmi.w	803b336 <_printf_float+0x462>
 803b12c:	68e0      	ldr	r0, [r4, #12]
 803b12e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 803b130:	4298      	cmp	r0, r3
 803b132:	bfb8      	it	lt
 803b134:	4618      	movlt	r0, r3
 803b136:	e730      	b.n	803af9a <_printf_float+0xc6>
 803b138:	2301      	movs	r3, #1
 803b13a:	464a      	mov	r2, r9
 803b13c:	4631      	mov	r1, r6
 803b13e:	4628      	mov	r0, r5
 803b140:	47b8      	blx	r7
 803b142:	3001      	adds	r0, #1
 803b144:	f43f af27 	beq.w	803af96 <_printf_float+0xc2>
 803b148:	f108 0801 	add.w	r8, r8, #1
 803b14c:	e7e6      	b.n	803b11c <_printf_float+0x248>
 803b14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803b150:	2b00      	cmp	r3, #0
 803b152:	dc39      	bgt.n	803b1c8 <_printf_float+0x2f4>
 803b154:	4a1b      	ldr	r2, [pc, #108]	; (803b1c4 <_printf_float+0x2f0>)
 803b156:	2301      	movs	r3, #1
 803b158:	4631      	mov	r1, r6
 803b15a:	4628      	mov	r0, r5
 803b15c:	47b8      	blx	r7
 803b15e:	3001      	adds	r0, #1
 803b160:	f43f af19 	beq.w	803af96 <_printf_float+0xc2>
 803b164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 803b168:	4313      	orrs	r3, r2
 803b16a:	d102      	bne.n	803b172 <_printf_float+0x29e>
 803b16c:	6823      	ldr	r3, [r4, #0]
 803b16e:	07d9      	lsls	r1, r3, #31
 803b170:	d5d8      	bpl.n	803b124 <_printf_float+0x250>
 803b172:	ee18 3a10 	vmov	r3, s16
 803b176:	4652      	mov	r2, sl
 803b178:	4631      	mov	r1, r6
 803b17a:	4628      	mov	r0, r5
 803b17c:	47b8      	blx	r7
 803b17e:	3001      	adds	r0, #1
 803b180:	f43f af09 	beq.w	803af96 <_printf_float+0xc2>
 803b184:	f04f 0900 	mov.w	r9, #0
 803b188:	f104 0a1a 	add.w	sl, r4, #26
 803b18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803b18e:	425b      	negs	r3, r3
 803b190:	454b      	cmp	r3, r9
 803b192:	dc01      	bgt.n	803b198 <_printf_float+0x2c4>
 803b194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803b196:	e792      	b.n	803b0be <_printf_float+0x1ea>
 803b198:	2301      	movs	r3, #1
 803b19a:	4652      	mov	r2, sl
 803b19c:	4631      	mov	r1, r6
 803b19e:	4628      	mov	r0, r5
 803b1a0:	47b8      	blx	r7
 803b1a2:	3001      	adds	r0, #1
 803b1a4:	f43f aef7 	beq.w	803af96 <_printf_float+0xc2>
 803b1a8:	f109 0901 	add.w	r9, r9, #1
 803b1ac:	e7ee      	b.n	803b18c <_printf_float+0x2b8>
 803b1ae:	bf00      	nop
 803b1b0:	7fefffff 	.word	0x7fefffff
 803b1b4:	08040028 	.word	0x08040028
 803b1b8:	0804002c 	.word	0x0804002c
 803b1bc:	08040034 	.word	0x08040034
 803b1c0:	08040030 	.word	0x08040030
 803b1c4:	08040038 	.word	0x08040038
 803b1c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 803b1ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 803b1cc:	429a      	cmp	r2, r3
 803b1ce:	bfa8      	it	ge
 803b1d0:	461a      	movge	r2, r3
 803b1d2:	2a00      	cmp	r2, #0
 803b1d4:	4691      	mov	r9, r2
 803b1d6:	dc37      	bgt.n	803b248 <_printf_float+0x374>
 803b1d8:	f04f 0b00 	mov.w	fp, #0
 803b1dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 803b1e0:	f104 021a 	add.w	r2, r4, #26
 803b1e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 803b1e6:	9305      	str	r3, [sp, #20]
 803b1e8:	eba3 0309 	sub.w	r3, r3, r9
 803b1ec:	455b      	cmp	r3, fp
 803b1ee:	dc33      	bgt.n	803b258 <_printf_float+0x384>
 803b1f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 803b1f4:	429a      	cmp	r2, r3
 803b1f6:	db3b      	blt.n	803b270 <_printf_float+0x39c>
 803b1f8:	6823      	ldr	r3, [r4, #0]
 803b1fa:	07da      	lsls	r2, r3, #31
 803b1fc:	d438      	bmi.n	803b270 <_printf_float+0x39c>
 803b1fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 803b200:	9b05      	ldr	r3, [sp, #20]
 803b202:	9909      	ldr	r1, [sp, #36]	; 0x24
 803b204:	1ad3      	subs	r3, r2, r3
 803b206:	eba2 0901 	sub.w	r9, r2, r1
 803b20a:	4599      	cmp	r9, r3
 803b20c:	bfa8      	it	ge
 803b20e:	4699      	movge	r9, r3
 803b210:	f1b9 0f00 	cmp.w	r9, #0
 803b214:	dc35      	bgt.n	803b282 <_printf_float+0x3ae>
 803b216:	f04f 0800 	mov.w	r8, #0
 803b21a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 803b21e:	f104 0a1a 	add.w	sl, r4, #26
 803b222:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 803b226:	1a9b      	subs	r3, r3, r2
 803b228:	eba3 0309 	sub.w	r3, r3, r9
 803b22c:	4543      	cmp	r3, r8
 803b22e:	f77f af79 	ble.w	803b124 <_printf_float+0x250>
 803b232:	2301      	movs	r3, #1
 803b234:	4652      	mov	r2, sl
 803b236:	4631      	mov	r1, r6
 803b238:	4628      	mov	r0, r5
 803b23a:	47b8      	blx	r7
 803b23c:	3001      	adds	r0, #1
 803b23e:	f43f aeaa 	beq.w	803af96 <_printf_float+0xc2>
 803b242:	f108 0801 	add.w	r8, r8, #1
 803b246:	e7ec      	b.n	803b222 <_printf_float+0x34e>
 803b248:	4613      	mov	r3, r2
 803b24a:	4631      	mov	r1, r6
 803b24c:	4642      	mov	r2, r8
 803b24e:	4628      	mov	r0, r5
 803b250:	47b8      	blx	r7
 803b252:	3001      	adds	r0, #1
 803b254:	d1c0      	bne.n	803b1d8 <_printf_float+0x304>
 803b256:	e69e      	b.n	803af96 <_printf_float+0xc2>
 803b258:	2301      	movs	r3, #1
 803b25a:	4631      	mov	r1, r6
 803b25c:	4628      	mov	r0, r5
 803b25e:	9205      	str	r2, [sp, #20]
 803b260:	47b8      	blx	r7
 803b262:	3001      	adds	r0, #1
 803b264:	f43f ae97 	beq.w	803af96 <_printf_float+0xc2>
 803b268:	9a05      	ldr	r2, [sp, #20]
 803b26a:	f10b 0b01 	add.w	fp, fp, #1
 803b26e:	e7b9      	b.n	803b1e4 <_printf_float+0x310>
 803b270:	ee18 3a10 	vmov	r3, s16
 803b274:	4652      	mov	r2, sl
 803b276:	4631      	mov	r1, r6
 803b278:	4628      	mov	r0, r5
 803b27a:	47b8      	blx	r7
 803b27c:	3001      	adds	r0, #1
 803b27e:	d1be      	bne.n	803b1fe <_printf_float+0x32a>
 803b280:	e689      	b.n	803af96 <_printf_float+0xc2>
 803b282:	9a05      	ldr	r2, [sp, #20]
 803b284:	464b      	mov	r3, r9
 803b286:	4442      	add	r2, r8
 803b288:	4631      	mov	r1, r6
 803b28a:	4628      	mov	r0, r5
 803b28c:	47b8      	blx	r7
 803b28e:	3001      	adds	r0, #1
 803b290:	d1c1      	bne.n	803b216 <_printf_float+0x342>
 803b292:	e680      	b.n	803af96 <_printf_float+0xc2>
 803b294:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 803b296:	2a01      	cmp	r2, #1
 803b298:	dc01      	bgt.n	803b29e <_printf_float+0x3ca>
 803b29a:	07db      	lsls	r3, r3, #31
 803b29c:	d538      	bpl.n	803b310 <_printf_float+0x43c>
 803b29e:	2301      	movs	r3, #1
 803b2a0:	4642      	mov	r2, r8
 803b2a2:	4631      	mov	r1, r6
 803b2a4:	4628      	mov	r0, r5
 803b2a6:	47b8      	blx	r7
 803b2a8:	3001      	adds	r0, #1
 803b2aa:	f43f ae74 	beq.w	803af96 <_printf_float+0xc2>
 803b2ae:	ee18 3a10 	vmov	r3, s16
 803b2b2:	4652      	mov	r2, sl
 803b2b4:	4631      	mov	r1, r6
 803b2b6:	4628      	mov	r0, r5
 803b2b8:	47b8      	blx	r7
 803b2ba:	3001      	adds	r0, #1
 803b2bc:	f43f ae6b 	beq.w	803af96 <_printf_float+0xc2>
 803b2c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 803b2c4:	2200      	movs	r2, #0
 803b2c6:	2300      	movs	r3, #0
 803b2c8:	f7e5 fbfe 	bl	8020ac8 <__aeabi_dcmpeq>
 803b2cc:	b9d8      	cbnz	r0, 803b306 <_printf_float+0x432>
 803b2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803b2d0:	f108 0201 	add.w	r2, r8, #1
 803b2d4:	3b01      	subs	r3, #1
 803b2d6:	4631      	mov	r1, r6
 803b2d8:	4628      	mov	r0, r5
 803b2da:	47b8      	blx	r7
 803b2dc:	3001      	adds	r0, #1
 803b2de:	d10e      	bne.n	803b2fe <_printf_float+0x42a>
 803b2e0:	e659      	b.n	803af96 <_printf_float+0xc2>
 803b2e2:	2301      	movs	r3, #1
 803b2e4:	4652      	mov	r2, sl
 803b2e6:	4631      	mov	r1, r6
 803b2e8:	4628      	mov	r0, r5
 803b2ea:	47b8      	blx	r7
 803b2ec:	3001      	adds	r0, #1
 803b2ee:	f43f ae52 	beq.w	803af96 <_printf_float+0xc2>
 803b2f2:	f108 0801 	add.w	r8, r8, #1
 803b2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803b2f8:	3b01      	subs	r3, #1
 803b2fa:	4543      	cmp	r3, r8
 803b2fc:	dcf1      	bgt.n	803b2e2 <_printf_float+0x40e>
 803b2fe:	464b      	mov	r3, r9
 803b300:	f104 0250 	add.w	r2, r4, #80	; 0x50
 803b304:	e6dc      	b.n	803b0c0 <_printf_float+0x1ec>
 803b306:	f04f 0800 	mov.w	r8, #0
 803b30a:	f104 0a1a 	add.w	sl, r4, #26
 803b30e:	e7f2      	b.n	803b2f6 <_printf_float+0x422>
 803b310:	2301      	movs	r3, #1
 803b312:	4642      	mov	r2, r8
 803b314:	e7df      	b.n	803b2d6 <_printf_float+0x402>
 803b316:	2301      	movs	r3, #1
 803b318:	464a      	mov	r2, r9
 803b31a:	4631      	mov	r1, r6
 803b31c:	4628      	mov	r0, r5
 803b31e:	47b8      	blx	r7
 803b320:	3001      	adds	r0, #1
 803b322:	f43f ae38 	beq.w	803af96 <_printf_float+0xc2>
 803b326:	f108 0801 	add.w	r8, r8, #1
 803b32a:	68e3      	ldr	r3, [r4, #12]
 803b32c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 803b32e:	1a5b      	subs	r3, r3, r1
 803b330:	4543      	cmp	r3, r8
 803b332:	dcf0      	bgt.n	803b316 <_printf_float+0x442>
 803b334:	e6fa      	b.n	803b12c <_printf_float+0x258>
 803b336:	f04f 0800 	mov.w	r8, #0
 803b33a:	f104 0919 	add.w	r9, r4, #25
 803b33e:	e7f4      	b.n	803b32a <_printf_float+0x456>

0803b340 <_printf_common>:
 803b340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803b344:	4616      	mov	r6, r2
 803b346:	4699      	mov	r9, r3
 803b348:	688a      	ldr	r2, [r1, #8]
 803b34a:	690b      	ldr	r3, [r1, #16]
 803b34c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 803b350:	4293      	cmp	r3, r2
 803b352:	bfb8      	it	lt
 803b354:	4613      	movlt	r3, r2
 803b356:	6033      	str	r3, [r6, #0]
 803b358:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 803b35c:	4607      	mov	r7, r0
 803b35e:	460c      	mov	r4, r1
 803b360:	b10a      	cbz	r2, 803b366 <_printf_common+0x26>
 803b362:	3301      	adds	r3, #1
 803b364:	6033      	str	r3, [r6, #0]
 803b366:	6823      	ldr	r3, [r4, #0]
 803b368:	0699      	lsls	r1, r3, #26
 803b36a:	bf42      	ittt	mi
 803b36c:	6833      	ldrmi	r3, [r6, #0]
 803b36e:	3302      	addmi	r3, #2
 803b370:	6033      	strmi	r3, [r6, #0]
 803b372:	6825      	ldr	r5, [r4, #0]
 803b374:	f015 0506 	ands.w	r5, r5, #6
 803b378:	d106      	bne.n	803b388 <_printf_common+0x48>
 803b37a:	f104 0a19 	add.w	sl, r4, #25
 803b37e:	68e3      	ldr	r3, [r4, #12]
 803b380:	6832      	ldr	r2, [r6, #0]
 803b382:	1a9b      	subs	r3, r3, r2
 803b384:	42ab      	cmp	r3, r5
 803b386:	dc26      	bgt.n	803b3d6 <_printf_common+0x96>
 803b388:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 803b38c:	1e13      	subs	r3, r2, #0
 803b38e:	6822      	ldr	r2, [r4, #0]
 803b390:	bf18      	it	ne
 803b392:	2301      	movne	r3, #1
 803b394:	0692      	lsls	r2, r2, #26
 803b396:	d42b      	bmi.n	803b3f0 <_printf_common+0xb0>
 803b398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 803b39c:	4649      	mov	r1, r9
 803b39e:	4638      	mov	r0, r7
 803b3a0:	47c0      	blx	r8
 803b3a2:	3001      	adds	r0, #1
 803b3a4:	d01e      	beq.n	803b3e4 <_printf_common+0xa4>
 803b3a6:	6823      	ldr	r3, [r4, #0]
 803b3a8:	68e5      	ldr	r5, [r4, #12]
 803b3aa:	6832      	ldr	r2, [r6, #0]
 803b3ac:	f003 0306 	and.w	r3, r3, #6
 803b3b0:	2b04      	cmp	r3, #4
 803b3b2:	bf08      	it	eq
 803b3b4:	1aad      	subeq	r5, r5, r2
 803b3b6:	68a3      	ldr	r3, [r4, #8]
 803b3b8:	6922      	ldr	r2, [r4, #16]
 803b3ba:	bf0c      	ite	eq
 803b3bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 803b3c0:	2500      	movne	r5, #0
 803b3c2:	4293      	cmp	r3, r2
 803b3c4:	bfc4      	itt	gt
 803b3c6:	1a9b      	subgt	r3, r3, r2
 803b3c8:	18ed      	addgt	r5, r5, r3
 803b3ca:	2600      	movs	r6, #0
 803b3cc:	341a      	adds	r4, #26
 803b3ce:	42b5      	cmp	r5, r6
 803b3d0:	d11a      	bne.n	803b408 <_printf_common+0xc8>
 803b3d2:	2000      	movs	r0, #0
 803b3d4:	e008      	b.n	803b3e8 <_printf_common+0xa8>
 803b3d6:	2301      	movs	r3, #1
 803b3d8:	4652      	mov	r2, sl
 803b3da:	4649      	mov	r1, r9
 803b3dc:	4638      	mov	r0, r7
 803b3de:	47c0      	blx	r8
 803b3e0:	3001      	adds	r0, #1
 803b3e2:	d103      	bne.n	803b3ec <_printf_common+0xac>
 803b3e4:	f04f 30ff 	mov.w	r0, #4294967295
 803b3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803b3ec:	3501      	adds	r5, #1
 803b3ee:	e7c6      	b.n	803b37e <_printf_common+0x3e>
 803b3f0:	18e1      	adds	r1, r4, r3
 803b3f2:	1c5a      	adds	r2, r3, #1
 803b3f4:	2030      	movs	r0, #48	; 0x30
 803b3f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 803b3fa:	4422      	add	r2, r4
 803b3fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 803b400:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 803b404:	3302      	adds	r3, #2
 803b406:	e7c7      	b.n	803b398 <_printf_common+0x58>
 803b408:	2301      	movs	r3, #1
 803b40a:	4622      	mov	r2, r4
 803b40c:	4649      	mov	r1, r9
 803b40e:	4638      	mov	r0, r7
 803b410:	47c0      	blx	r8
 803b412:	3001      	adds	r0, #1
 803b414:	d0e6      	beq.n	803b3e4 <_printf_common+0xa4>
 803b416:	3601      	adds	r6, #1
 803b418:	e7d9      	b.n	803b3ce <_printf_common+0x8e>
	...

0803b41c <_printf_i>:
 803b41c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 803b420:	460c      	mov	r4, r1
 803b422:	4691      	mov	r9, r2
 803b424:	7e27      	ldrb	r7, [r4, #24]
 803b426:	990c      	ldr	r1, [sp, #48]	; 0x30
 803b428:	2f78      	cmp	r7, #120	; 0x78
 803b42a:	4680      	mov	r8, r0
 803b42c:	469a      	mov	sl, r3
 803b42e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 803b432:	d807      	bhi.n	803b444 <_printf_i+0x28>
 803b434:	2f62      	cmp	r7, #98	; 0x62
 803b436:	d80a      	bhi.n	803b44e <_printf_i+0x32>
 803b438:	2f00      	cmp	r7, #0
 803b43a:	f000 80d8 	beq.w	803b5ee <_printf_i+0x1d2>
 803b43e:	2f58      	cmp	r7, #88	; 0x58
 803b440:	f000 80a3 	beq.w	803b58a <_printf_i+0x16e>
 803b444:	f104 0642 	add.w	r6, r4, #66	; 0x42
 803b448:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 803b44c:	e03a      	b.n	803b4c4 <_printf_i+0xa8>
 803b44e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 803b452:	2b15      	cmp	r3, #21
 803b454:	d8f6      	bhi.n	803b444 <_printf_i+0x28>
 803b456:	a001      	add	r0, pc, #4	; (adr r0, 803b45c <_printf_i+0x40>)
 803b458:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 803b45c:	0803b4b5 	.word	0x0803b4b5
 803b460:	0803b4c9 	.word	0x0803b4c9
 803b464:	0803b445 	.word	0x0803b445
 803b468:	0803b445 	.word	0x0803b445
 803b46c:	0803b445 	.word	0x0803b445
 803b470:	0803b445 	.word	0x0803b445
 803b474:	0803b4c9 	.word	0x0803b4c9
 803b478:	0803b445 	.word	0x0803b445
 803b47c:	0803b445 	.word	0x0803b445
 803b480:	0803b445 	.word	0x0803b445
 803b484:	0803b445 	.word	0x0803b445
 803b488:	0803b5d5 	.word	0x0803b5d5
 803b48c:	0803b4f9 	.word	0x0803b4f9
 803b490:	0803b5b7 	.word	0x0803b5b7
 803b494:	0803b445 	.word	0x0803b445
 803b498:	0803b445 	.word	0x0803b445
 803b49c:	0803b5f7 	.word	0x0803b5f7
 803b4a0:	0803b445 	.word	0x0803b445
 803b4a4:	0803b4f9 	.word	0x0803b4f9
 803b4a8:	0803b445 	.word	0x0803b445
 803b4ac:	0803b445 	.word	0x0803b445
 803b4b0:	0803b5bf 	.word	0x0803b5bf
 803b4b4:	680b      	ldr	r3, [r1, #0]
 803b4b6:	1d1a      	adds	r2, r3, #4
 803b4b8:	681b      	ldr	r3, [r3, #0]
 803b4ba:	600a      	str	r2, [r1, #0]
 803b4bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 803b4c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 803b4c4:	2301      	movs	r3, #1
 803b4c6:	e0a3      	b.n	803b610 <_printf_i+0x1f4>
 803b4c8:	6825      	ldr	r5, [r4, #0]
 803b4ca:	6808      	ldr	r0, [r1, #0]
 803b4cc:	062e      	lsls	r6, r5, #24
 803b4ce:	f100 0304 	add.w	r3, r0, #4
 803b4d2:	d50a      	bpl.n	803b4ea <_printf_i+0xce>
 803b4d4:	6805      	ldr	r5, [r0, #0]
 803b4d6:	600b      	str	r3, [r1, #0]
 803b4d8:	2d00      	cmp	r5, #0
 803b4da:	da03      	bge.n	803b4e4 <_printf_i+0xc8>
 803b4dc:	232d      	movs	r3, #45	; 0x2d
 803b4de:	426d      	negs	r5, r5
 803b4e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803b4e4:	485e      	ldr	r0, [pc, #376]	; (803b660 <_printf_i+0x244>)
 803b4e6:	230a      	movs	r3, #10
 803b4e8:	e019      	b.n	803b51e <_printf_i+0x102>
 803b4ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 803b4ee:	6805      	ldr	r5, [r0, #0]
 803b4f0:	600b      	str	r3, [r1, #0]
 803b4f2:	bf18      	it	ne
 803b4f4:	b22d      	sxthne	r5, r5
 803b4f6:	e7ef      	b.n	803b4d8 <_printf_i+0xbc>
 803b4f8:	680b      	ldr	r3, [r1, #0]
 803b4fa:	6825      	ldr	r5, [r4, #0]
 803b4fc:	1d18      	adds	r0, r3, #4
 803b4fe:	6008      	str	r0, [r1, #0]
 803b500:	0628      	lsls	r0, r5, #24
 803b502:	d501      	bpl.n	803b508 <_printf_i+0xec>
 803b504:	681d      	ldr	r5, [r3, #0]
 803b506:	e002      	b.n	803b50e <_printf_i+0xf2>
 803b508:	0669      	lsls	r1, r5, #25
 803b50a:	d5fb      	bpl.n	803b504 <_printf_i+0xe8>
 803b50c:	881d      	ldrh	r5, [r3, #0]
 803b50e:	4854      	ldr	r0, [pc, #336]	; (803b660 <_printf_i+0x244>)
 803b510:	2f6f      	cmp	r7, #111	; 0x6f
 803b512:	bf0c      	ite	eq
 803b514:	2308      	moveq	r3, #8
 803b516:	230a      	movne	r3, #10
 803b518:	2100      	movs	r1, #0
 803b51a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 803b51e:	6866      	ldr	r6, [r4, #4]
 803b520:	60a6      	str	r6, [r4, #8]
 803b522:	2e00      	cmp	r6, #0
 803b524:	bfa2      	ittt	ge
 803b526:	6821      	ldrge	r1, [r4, #0]
 803b528:	f021 0104 	bicge.w	r1, r1, #4
 803b52c:	6021      	strge	r1, [r4, #0]
 803b52e:	b90d      	cbnz	r5, 803b534 <_printf_i+0x118>
 803b530:	2e00      	cmp	r6, #0
 803b532:	d04d      	beq.n	803b5d0 <_printf_i+0x1b4>
 803b534:	4616      	mov	r6, r2
 803b536:	fbb5 f1f3 	udiv	r1, r5, r3
 803b53a:	fb03 5711 	mls	r7, r3, r1, r5
 803b53e:	5dc7      	ldrb	r7, [r0, r7]
 803b540:	f806 7d01 	strb.w	r7, [r6, #-1]!
 803b544:	462f      	mov	r7, r5
 803b546:	42bb      	cmp	r3, r7
 803b548:	460d      	mov	r5, r1
 803b54a:	d9f4      	bls.n	803b536 <_printf_i+0x11a>
 803b54c:	2b08      	cmp	r3, #8
 803b54e:	d10b      	bne.n	803b568 <_printf_i+0x14c>
 803b550:	6823      	ldr	r3, [r4, #0]
 803b552:	07df      	lsls	r7, r3, #31
 803b554:	d508      	bpl.n	803b568 <_printf_i+0x14c>
 803b556:	6923      	ldr	r3, [r4, #16]
 803b558:	6861      	ldr	r1, [r4, #4]
 803b55a:	4299      	cmp	r1, r3
 803b55c:	bfde      	ittt	le
 803b55e:	2330      	movle	r3, #48	; 0x30
 803b560:	f806 3c01 	strble.w	r3, [r6, #-1]
 803b564:	f106 36ff 	addle.w	r6, r6, #4294967295
 803b568:	1b92      	subs	r2, r2, r6
 803b56a:	6122      	str	r2, [r4, #16]
 803b56c:	f8cd a000 	str.w	sl, [sp]
 803b570:	464b      	mov	r3, r9
 803b572:	aa03      	add	r2, sp, #12
 803b574:	4621      	mov	r1, r4
 803b576:	4640      	mov	r0, r8
 803b578:	f7ff fee2 	bl	803b340 <_printf_common>
 803b57c:	3001      	adds	r0, #1
 803b57e:	d14c      	bne.n	803b61a <_printf_i+0x1fe>
 803b580:	f04f 30ff 	mov.w	r0, #4294967295
 803b584:	b004      	add	sp, #16
 803b586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803b58a:	4835      	ldr	r0, [pc, #212]	; (803b660 <_printf_i+0x244>)
 803b58c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 803b590:	6823      	ldr	r3, [r4, #0]
 803b592:	680e      	ldr	r6, [r1, #0]
 803b594:	061f      	lsls	r7, r3, #24
 803b596:	f856 5b04 	ldr.w	r5, [r6], #4
 803b59a:	600e      	str	r6, [r1, #0]
 803b59c:	d514      	bpl.n	803b5c8 <_printf_i+0x1ac>
 803b59e:	07d9      	lsls	r1, r3, #31
 803b5a0:	bf44      	itt	mi
 803b5a2:	f043 0320 	orrmi.w	r3, r3, #32
 803b5a6:	6023      	strmi	r3, [r4, #0]
 803b5a8:	b91d      	cbnz	r5, 803b5b2 <_printf_i+0x196>
 803b5aa:	6823      	ldr	r3, [r4, #0]
 803b5ac:	f023 0320 	bic.w	r3, r3, #32
 803b5b0:	6023      	str	r3, [r4, #0]
 803b5b2:	2310      	movs	r3, #16
 803b5b4:	e7b0      	b.n	803b518 <_printf_i+0xfc>
 803b5b6:	6823      	ldr	r3, [r4, #0]
 803b5b8:	f043 0320 	orr.w	r3, r3, #32
 803b5bc:	6023      	str	r3, [r4, #0]
 803b5be:	2378      	movs	r3, #120	; 0x78
 803b5c0:	4828      	ldr	r0, [pc, #160]	; (803b664 <_printf_i+0x248>)
 803b5c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 803b5c6:	e7e3      	b.n	803b590 <_printf_i+0x174>
 803b5c8:	065e      	lsls	r6, r3, #25
 803b5ca:	bf48      	it	mi
 803b5cc:	b2ad      	uxthmi	r5, r5
 803b5ce:	e7e6      	b.n	803b59e <_printf_i+0x182>
 803b5d0:	4616      	mov	r6, r2
 803b5d2:	e7bb      	b.n	803b54c <_printf_i+0x130>
 803b5d4:	680b      	ldr	r3, [r1, #0]
 803b5d6:	6826      	ldr	r6, [r4, #0]
 803b5d8:	6960      	ldr	r0, [r4, #20]
 803b5da:	1d1d      	adds	r5, r3, #4
 803b5dc:	600d      	str	r5, [r1, #0]
 803b5de:	0635      	lsls	r5, r6, #24
 803b5e0:	681b      	ldr	r3, [r3, #0]
 803b5e2:	d501      	bpl.n	803b5e8 <_printf_i+0x1cc>
 803b5e4:	6018      	str	r0, [r3, #0]
 803b5e6:	e002      	b.n	803b5ee <_printf_i+0x1d2>
 803b5e8:	0671      	lsls	r1, r6, #25
 803b5ea:	d5fb      	bpl.n	803b5e4 <_printf_i+0x1c8>
 803b5ec:	8018      	strh	r0, [r3, #0]
 803b5ee:	2300      	movs	r3, #0
 803b5f0:	6123      	str	r3, [r4, #16]
 803b5f2:	4616      	mov	r6, r2
 803b5f4:	e7ba      	b.n	803b56c <_printf_i+0x150>
 803b5f6:	680b      	ldr	r3, [r1, #0]
 803b5f8:	1d1a      	adds	r2, r3, #4
 803b5fa:	600a      	str	r2, [r1, #0]
 803b5fc:	681e      	ldr	r6, [r3, #0]
 803b5fe:	6862      	ldr	r2, [r4, #4]
 803b600:	2100      	movs	r1, #0
 803b602:	4630      	mov	r0, r6
 803b604:	f7e4 fdec 	bl	80201e0 <memchr>
 803b608:	b108      	cbz	r0, 803b60e <_printf_i+0x1f2>
 803b60a:	1b80      	subs	r0, r0, r6
 803b60c:	6060      	str	r0, [r4, #4]
 803b60e:	6863      	ldr	r3, [r4, #4]
 803b610:	6123      	str	r3, [r4, #16]
 803b612:	2300      	movs	r3, #0
 803b614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803b618:	e7a8      	b.n	803b56c <_printf_i+0x150>
 803b61a:	6923      	ldr	r3, [r4, #16]
 803b61c:	4632      	mov	r2, r6
 803b61e:	4649      	mov	r1, r9
 803b620:	4640      	mov	r0, r8
 803b622:	47d0      	blx	sl
 803b624:	3001      	adds	r0, #1
 803b626:	d0ab      	beq.n	803b580 <_printf_i+0x164>
 803b628:	6823      	ldr	r3, [r4, #0]
 803b62a:	079b      	lsls	r3, r3, #30
 803b62c:	d413      	bmi.n	803b656 <_printf_i+0x23a>
 803b62e:	68e0      	ldr	r0, [r4, #12]
 803b630:	9b03      	ldr	r3, [sp, #12]
 803b632:	4298      	cmp	r0, r3
 803b634:	bfb8      	it	lt
 803b636:	4618      	movlt	r0, r3
 803b638:	e7a4      	b.n	803b584 <_printf_i+0x168>
 803b63a:	2301      	movs	r3, #1
 803b63c:	4632      	mov	r2, r6
 803b63e:	4649      	mov	r1, r9
 803b640:	4640      	mov	r0, r8
 803b642:	47d0      	blx	sl
 803b644:	3001      	adds	r0, #1
 803b646:	d09b      	beq.n	803b580 <_printf_i+0x164>
 803b648:	3501      	adds	r5, #1
 803b64a:	68e3      	ldr	r3, [r4, #12]
 803b64c:	9903      	ldr	r1, [sp, #12]
 803b64e:	1a5b      	subs	r3, r3, r1
 803b650:	42ab      	cmp	r3, r5
 803b652:	dcf2      	bgt.n	803b63a <_printf_i+0x21e>
 803b654:	e7eb      	b.n	803b62e <_printf_i+0x212>
 803b656:	2500      	movs	r5, #0
 803b658:	f104 0619 	add.w	r6, r4, #25
 803b65c:	e7f5      	b.n	803b64a <_printf_i+0x22e>
 803b65e:	bf00      	nop
 803b660:	0804003a 	.word	0x0804003a
 803b664:	0804004b 	.word	0x0804004b

0803b668 <_scanf_float>:
 803b668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803b66c:	b087      	sub	sp, #28
 803b66e:	4617      	mov	r7, r2
 803b670:	9303      	str	r3, [sp, #12]
 803b672:	688b      	ldr	r3, [r1, #8]
 803b674:	1e5a      	subs	r2, r3, #1
 803b676:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 803b67a:	bf83      	ittte	hi
 803b67c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 803b680:	195b      	addhi	r3, r3, r5
 803b682:	9302      	strhi	r3, [sp, #8]
 803b684:	2300      	movls	r3, #0
 803b686:	bf86      	itte	hi
 803b688:	f240 135d 	movwhi	r3, #349	; 0x15d
 803b68c:	608b      	strhi	r3, [r1, #8]
 803b68e:	9302      	strls	r3, [sp, #8]
 803b690:	680b      	ldr	r3, [r1, #0]
 803b692:	468b      	mov	fp, r1
 803b694:	2500      	movs	r5, #0
 803b696:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 803b69a:	f84b 3b1c 	str.w	r3, [fp], #28
 803b69e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 803b6a2:	4680      	mov	r8, r0
 803b6a4:	460c      	mov	r4, r1
 803b6a6:	465e      	mov	r6, fp
 803b6a8:	46aa      	mov	sl, r5
 803b6aa:	46a9      	mov	r9, r5
 803b6ac:	9501      	str	r5, [sp, #4]
 803b6ae:	68a2      	ldr	r2, [r4, #8]
 803b6b0:	b152      	cbz	r2, 803b6c8 <_scanf_float+0x60>
 803b6b2:	683b      	ldr	r3, [r7, #0]
 803b6b4:	781b      	ldrb	r3, [r3, #0]
 803b6b6:	2b4e      	cmp	r3, #78	; 0x4e
 803b6b8:	d864      	bhi.n	803b784 <_scanf_float+0x11c>
 803b6ba:	2b40      	cmp	r3, #64	; 0x40
 803b6bc:	d83c      	bhi.n	803b738 <_scanf_float+0xd0>
 803b6be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 803b6c2:	b2c8      	uxtb	r0, r1
 803b6c4:	280e      	cmp	r0, #14
 803b6c6:	d93a      	bls.n	803b73e <_scanf_float+0xd6>
 803b6c8:	f1b9 0f00 	cmp.w	r9, #0
 803b6cc:	d003      	beq.n	803b6d6 <_scanf_float+0x6e>
 803b6ce:	6823      	ldr	r3, [r4, #0]
 803b6d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803b6d4:	6023      	str	r3, [r4, #0]
 803b6d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 803b6da:	f1ba 0f01 	cmp.w	sl, #1
 803b6de:	f200 8113 	bhi.w	803b908 <_scanf_float+0x2a0>
 803b6e2:	455e      	cmp	r6, fp
 803b6e4:	f200 8105 	bhi.w	803b8f2 <_scanf_float+0x28a>
 803b6e8:	2501      	movs	r5, #1
 803b6ea:	4628      	mov	r0, r5
 803b6ec:	b007      	add	sp, #28
 803b6ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803b6f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 803b6f6:	2a0d      	cmp	r2, #13
 803b6f8:	d8e6      	bhi.n	803b6c8 <_scanf_float+0x60>
 803b6fa:	a101      	add	r1, pc, #4	; (adr r1, 803b700 <_scanf_float+0x98>)
 803b6fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 803b700:	0803b83f 	.word	0x0803b83f
 803b704:	0803b6c9 	.word	0x0803b6c9
 803b708:	0803b6c9 	.word	0x0803b6c9
 803b70c:	0803b6c9 	.word	0x0803b6c9
 803b710:	0803b89f 	.word	0x0803b89f
 803b714:	0803b877 	.word	0x0803b877
 803b718:	0803b6c9 	.word	0x0803b6c9
 803b71c:	0803b6c9 	.word	0x0803b6c9
 803b720:	0803b84d 	.word	0x0803b84d
 803b724:	0803b6c9 	.word	0x0803b6c9
 803b728:	0803b6c9 	.word	0x0803b6c9
 803b72c:	0803b6c9 	.word	0x0803b6c9
 803b730:	0803b6c9 	.word	0x0803b6c9
 803b734:	0803b805 	.word	0x0803b805
 803b738:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 803b73c:	e7db      	b.n	803b6f6 <_scanf_float+0x8e>
 803b73e:	290e      	cmp	r1, #14
 803b740:	d8c2      	bhi.n	803b6c8 <_scanf_float+0x60>
 803b742:	a001      	add	r0, pc, #4	; (adr r0, 803b748 <_scanf_float+0xe0>)
 803b744:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 803b748:	0803b7f7 	.word	0x0803b7f7
 803b74c:	0803b6c9 	.word	0x0803b6c9
 803b750:	0803b7f7 	.word	0x0803b7f7
 803b754:	0803b88b 	.word	0x0803b88b
 803b758:	0803b6c9 	.word	0x0803b6c9
 803b75c:	0803b7a5 	.word	0x0803b7a5
 803b760:	0803b7e1 	.word	0x0803b7e1
 803b764:	0803b7e1 	.word	0x0803b7e1
 803b768:	0803b7e1 	.word	0x0803b7e1
 803b76c:	0803b7e1 	.word	0x0803b7e1
 803b770:	0803b7e1 	.word	0x0803b7e1
 803b774:	0803b7e1 	.word	0x0803b7e1
 803b778:	0803b7e1 	.word	0x0803b7e1
 803b77c:	0803b7e1 	.word	0x0803b7e1
 803b780:	0803b7e1 	.word	0x0803b7e1
 803b784:	2b6e      	cmp	r3, #110	; 0x6e
 803b786:	d809      	bhi.n	803b79c <_scanf_float+0x134>
 803b788:	2b60      	cmp	r3, #96	; 0x60
 803b78a:	d8b2      	bhi.n	803b6f2 <_scanf_float+0x8a>
 803b78c:	2b54      	cmp	r3, #84	; 0x54
 803b78e:	d077      	beq.n	803b880 <_scanf_float+0x218>
 803b790:	2b59      	cmp	r3, #89	; 0x59
 803b792:	d199      	bne.n	803b6c8 <_scanf_float+0x60>
 803b794:	2d07      	cmp	r5, #7
 803b796:	d197      	bne.n	803b6c8 <_scanf_float+0x60>
 803b798:	2508      	movs	r5, #8
 803b79a:	e029      	b.n	803b7f0 <_scanf_float+0x188>
 803b79c:	2b74      	cmp	r3, #116	; 0x74
 803b79e:	d06f      	beq.n	803b880 <_scanf_float+0x218>
 803b7a0:	2b79      	cmp	r3, #121	; 0x79
 803b7a2:	e7f6      	b.n	803b792 <_scanf_float+0x12a>
 803b7a4:	6821      	ldr	r1, [r4, #0]
 803b7a6:	05c8      	lsls	r0, r1, #23
 803b7a8:	d51a      	bpl.n	803b7e0 <_scanf_float+0x178>
 803b7aa:	9b02      	ldr	r3, [sp, #8]
 803b7ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 803b7b0:	6021      	str	r1, [r4, #0]
 803b7b2:	f109 0901 	add.w	r9, r9, #1
 803b7b6:	b11b      	cbz	r3, 803b7c0 <_scanf_float+0x158>
 803b7b8:	3b01      	subs	r3, #1
 803b7ba:	3201      	adds	r2, #1
 803b7bc:	9302      	str	r3, [sp, #8]
 803b7be:	60a2      	str	r2, [r4, #8]
 803b7c0:	68a3      	ldr	r3, [r4, #8]
 803b7c2:	3b01      	subs	r3, #1
 803b7c4:	60a3      	str	r3, [r4, #8]
 803b7c6:	6923      	ldr	r3, [r4, #16]
 803b7c8:	3301      	adds	r3, #1
 803b7ca:	6123      	str	r3, [r4, #16]
 803b7cc:	687b      	ldr	r3, [r7, #4]
 803b7ce:	3b01      	subs	r3, #1
 803b7d0:	2b00      	cmp	r3, #0
 803b7d2:	607b      	str	r3, [r7, #4]
 803b7d4:	f340 8084 	ble.w	803b8e0 <_scanf_float+0x278>
 803b7d8:	683b      	ldr	r3, [r7, #0]
 803b7da:	3301      	adds	r3, #1
 803b7dc:	603b      	str	r3, [r7, #0]
 803b7de:	e766      	b.n	803b6ae <_scanf_float+0x46>
 803b7e0:	eb1a 0f05 	cmn.w	sl, r5
 803b7e4:	f47f af70 	bne.w	803b6c8 <_scanf_float+0x60>
 803b7e8:	6822      	ldr	r2, [r4, #0]
 803b7ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 803b7ee:	6022      	str	r2, [r4, #0]
 803b7f0:	f806 3b01 	strb.w	r3, [r6], #1
 803b7f4:	e7e4      	b.n	803b7c0 <_scanf_float+0x158>
 803b7f6:	6822      	ldr	r2, [r4, #0]
 803b7f8:	0610      	lsls	r0, r2, #24
 803b7fa:	f57f af65 	bpl.w	803b6c8 <_scanf_float+0x60>
 803b7fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 803b802:	e7f4      	b.n	803b7ee <_scanf_float+0x186>
 803b804:	f1ba 0f00 	cmp.w	sl, #0
 803b808:	d10e      	bne.n	803b828 <_scanf_float+0x1c0>
 803b80a:	f1b9 0f00 	cmp.w	r9, #0
 803b80e:	d10e      	bne.n	803b82e <_scanf_float+0x1c6>
 803b810:	6822      	ldr	r2, [r4, #0]
 803b812:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 803b816:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 803b81a:	d108      	bne.n	803b82e <_scanf_float+0x1c6>
 803b81c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 803b820:	6022      	str	r2, [r4, #0]
 803b822:	f04f 0a01 	mov.w	sl, #1
 803b826:	e7e3      	b.n	803b7f0 <_scanf_float+0x188>
 803b828:	f1ba 0f02 	cmp.w	sl, #2
 803b82c:	d055      	beq.n	803b8da <_scanf_float+0x272>
 803b82e:	2d01      	cmp	r5, #1
 803b830:	d002      	beq.n	803b838 <_scanf_float+0x1d0>
 803b832:	2d04      	cmp	r5, #4
 803b834:	f47f af48 	bne.w	803b6c8 <_scanf_float+0x60>
 803b838:	3501      	adds	r5, #1
 803b83a:	b2ed      	uxtb	r5, r5
 803b83c:	e7d8      	b.n	803b7f0 <_scanf_float+0x188>
 803b83e:	f1ba 0f01 	cmp.w	sl, #1
 803b842:	f47f af41 	bne.w	803b6c8 <_scanf_float+0x60>
 803b846:	f04f 0a02 	mov.w	sl, #2
 803b84a:	e7d1      	b.n	803b7f0 <_scanf_float+0x188>
 803b84c:	b97d      	cbnz	r5, 803b86e <_scanf_float+0x206>
 803b84e:	f1b9 0f00 	cmp.w	r9, #0
 803b852:	f47f af3c 	bne.w	803b6ce <_scanf_float+0x66>
 803b856:	6822      	ldr	r2, [r4, #0]
 803b858:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 803b85c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 803b860:	f47f af39 	bne.w	803b6d6 <_scanf_float+0x6e>
 803b864:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 803b868:	6022      	str	r2, [r4, #0]
 803b86a:	2501      	movs	r5, #1
 803b86c:	e7c0      	b.n	803b7f0 <_scanf_float+0x188>
 803b86e:	2d03      	cmp	r5, #3
 803b870:	d0e2      	beq.n	803b838 <_scanf_float+0x1d0>
 803b872:	2d05      	cmp	r5, #5
 803b874:	e7de      	b.n	803b834 <_scanf_float+0x1cc>
 803b876:	2d02      	cmp	r5, #2
 803b878:	f47f af26 	bne.w	803b6c8 <_scanf_float+0x60>
 803b87c:	2503      	movs	r5, #3
 803b87e:	e7b7      	b.n	803b7f0 <_scanf_float+0x188>
 803b880:	2d06      	cmp	r5, #6
 803b882:	f47f af21 	bne.w	803b6c8 <_scanf_float+0x60>
 803b886:	2507      	movs	r5, #7
 803b888:	e7b2      	b.n	803b7f0 <_scanf_float+0x188>
 803b88a:	6822      	ldr	r2, [r4, #0]
 803b88c:	0591      	lsls	r1, r2, #22
 803b88e:	f57f af1b 	bpl.w	803b6c8 <_scanf_float+0x60>
 803b892:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 803b896:	6022      	str	r2, [r4, #0]
 803b898:	f8cd 9004 	str.w	r9, [sp, #4]
 803b89c:	e7a8      	b.n	803b7f0 <_scanf_float+0x188>
 803b89e:	6822      	ldr	r2, [r4, #0]
 803b8a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 803b8a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 803b8a8:	d006      	beq.n	803b8b8 <_scanf_float+0x250>
 803b8aa:	0550      	lsls	r0, r2, #21
 803b8ac:	f57f af0c 	bpl.w	803b6c8 <_scanf_float+0x60>
 803b8b0:	f1b9 0f00 	cmp.w	r9, #0
 803b8b4:	f43f af0f 	beq.w	803b6d6 <_scanf_float+0x6e>
 803b8b8:	0591      	lsls	r1, r2, #22
 803b8ba:	bf58      	it	pl
 803b8bc:	9901      	ldrpl	r1, [sp, #4]
 803b8be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 803b8c2:	bf58      	it	pl
 803b8c4:	eba9 0101 	subpl.w	r1, r9, r1
 803b8c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 803b8cc:	bf58      	it	pl
 803b8ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 803b8d2:	6022      	str	r2, [r4, #0]
 803b8d4:	f04f 0900 	mov.w	r9, #0
 803b8d8:	e78a      	b.n	803b7f0 <_scanf_float+0x188>
 803b8da:	f04f 0a03 	mov.w	sl, #3
 803b8de:	e787      	b.n	803b7f0 <_scanf_float+0x188>
 803b8e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 803b8e4:	4639      	mov	r1, r7
 803b8e6:	4640      	mov	r0, r8
 803b8e8:	4798      	blx	r3
 803b8ea:	2800      	cmp	r0, #0
 803b8ec:	f43f aedf 	beq.w	803b6ae <_scanf_float+0x46>
 803b8f0:	e6ea      	b.n	803b6c8 <_scanf_float+0x60>
 803b8f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 803b8f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 803b8fa:	463a      	mov	r2, r7
 803b8fc:	4640      	mov	r0, r8
 803b8fe:	4798      	blx	r3
 803b900:	6923      	ldr	r3, [r4, #16]
 803b902:	3b01      	subs	r3, #1
 803b904:	6123      	str	r3, [r4, #16]
 803b906:	e6ec      	b.n	803b6e2 <_scanf_float+0x7a>
 803b908:	1e6b      	subs	r3, r5, #1
 803b90a:	2b06      	cmp	r3, #6
 803b90c:	d825      	bhi.n	803b95a <_scanf_float+0x2f2>
 803b90e:	2d02      	cmp	r5, #2
 803b910:	d836      	bhi.n	803b980 <_scanf_float+0x318>
 803b912:	455e      	cmp	r6, fp
 803b914:	f67f aee8 	bls.w	803b6e8 <_scanf_float+0x80>
 803b918:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 803b91c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 803b920:	463a      	mov	r2, r7
 803b922:	4640      	mov	r0, r8
 803b924:	4798      	blx	r3
 803b926:	6923      	ldr	r3, [r4, #16]
 803b928:	3b01      	subs	r3, #1
 803b92a:	6123      	str	r3, [r4, #16]
 803b92c:	e7f1      	b.n	803b912 <_scanf_float+0x2aa>
 803b92e:	9802      	ldr	r0, [sp, #8]
 803b930:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 803b934:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 803b938:	9002      	str	r0, [sp, #8]
 803b93a:	463a      	mov	r2, r7
 803b93c:	4640      	mov	r0, r8
 803b93e:	4798      	blx	r3
 803b940:	6923      	ldr	r3, [r4, #16]
 803b942:	3b01      	subs	r3, #1
 803b944:	6123      	str	r3, [r4, #16]
 803b946:	f10a 3aff 	add.w	sl, sl, #4294967295
 803b94a:	fa5f fa8a 	uxtb.w	sl, sl
 803b94e:	f1ba 0f02 	cmp.w	sl, #2
 803b952:	d1ec      	bne.n	803b92e <_scanf_float+0x2c6>
 803b954:	3d03      	subs	r5, #3
 803b956:	b2ed      	uxtb	r5, r5
 803b958:	1b76      	subs	r6, r6, r5
 803b95a:	6823      	ldr	r3, [r4, #0]
 803b95c:	05da      	lsls	r2, r3, #23
 803b95e:	d52f      	bpl.n	803b9c0 <_scanf_float+0x358>
 803b960:	055b      	lsls	r3, r3, #21
 803b962:	d510      	bpl.n	803b986 <_scanf_float+0x31e>
 803b964:	455e      	cmp	r6, fp
 803b966:	f67f aebf 	bls.w	803b6e8 <_scanf_float+0x80>
 803b96a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 803b96e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 803b972:	463a      	mov	r2, r7
 803b974:	4640      	mov	r0, r8
 803b976:	4798      	blx	r3
 803b978:	6923      	ldr	r3, [r4, #16]
 803b97a:	3b01      	subs	r3, #1
 803b97c:	6123      	str	r3, [r4, #16]
 803b97e:	e7f1      	b.n	803b964 <_scanf_float+0x2fc>
 803b980:	46aa      	mov	sl, r5
 803b982:	9602      	str	r6, [sp, #8]
 803b984:	e7df      	b.n	803b946 <_scanf_float+0x2de>
 803b986:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 803b98a:	6923      	ldr	r3, [r4, #16]
 803b98c:	2965      	cmp	r1, #101	; 0x65
 803b98e:	f103 33ff 	add.w	r3, r3, #4294967295
 803b992:	f106 35ff 	add.w	r5, r6, #4294967295
 803b996:	6123      	str	r3, [r4, #16]
 803b998:	d00c      	beq.n	803b9b4 <_scanf_float+0x34c>
 803b99a:	2945      	cmp	r1, #69	; 0x45
 803b99c:	d00a      	beq.n	803b9b4 <_scanf_float+0x34c>
 803b99e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 803b9a2:	463a      	mov	r2, r7
 803b9a4:	4640      	mov	r0, r8
 803b9a6:	4798      	blx	r3
 803b9a8:	6923      	ldr	r3, [r4, #16]
 803b9aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 803b9ae:	3b01      	subs	r3, #1
 803b9b0:	1eb5      	subs	r5, r6, #2
 803b9b2:	6123      	str	r3, [r4, #16]
 803b9b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 803b9b8:	463a      	mov	r2, r7
 803b9ba:	4640      	mov	r0, r8
 803b9bc:	4798      	blx	r3
 803b9be:	462e      	mov	r6, r5
 803b9c0:	6825      	ldr	r5, [r4, #0]
 803b9c2:	f015 0510 	ands.w	r5, r5, #16
 803b9c6:	d158      	bne.n	803ba7a <_scanf_float+0x412>
 803b9c8:	7035      	strb	r5, [r6, #0]
 803b9ca:	6823      	ldr	r3, [r4, #0]
 803b9cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 803b9d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 803b9d4:	d11c      	bne.n	803ba10 <_scanf_float+0x3a8>
 803b9d6:	9b01      	ldr	r3, [sp, #4]
 803b9d8:	454b      	cmp	r3, r9
 803b9da:	eba3 0209 	sub.w	r2, r3, r9
 803b9de:	d124      	bne.n	803ba2a <_scanf_float+0x3c2>
 803b9e0:	2200      	movs	r2, #0
 803b9e2:	4659      	mov	r1, fp
 803b9e4:	4640      	mov	r0, r8
 803b9e6:	f000 ff01 	bl	803c7ec <_strtod_r>
 803b9ea:	9b03      	ldr	r3, [sp, #12]
 803b9ec:	6821      	ldr	r1, [r4, #0]
 803b9ee:	681b      	ldr	r3, [r3, #0]
 803b9f0:	f011 0f02 	tst.w	r1, #2
 803b9f4:	ec57 6b10 	vmov	r6, r7, d0
 803b9f8:	f103 0204 	add.w	r2, r3, #4
 803b9fc:	d020      	beq.n	803ba40 <_scanf_float+0x3d8>
 803b9fe:	9903      	ldr	r1, [sp, #12]
 803ba00:	600a      	str	r2, [r1, #0]
 803ba02:	681b      	ldr	r3, [r3, #0]
 803ba04:	e9c3 6700 	strd	r6, r7, [r3]
 803ba08:	68e3      	ldr	r3, [r4, #12]
 803ba0a:	3301      	adds	r3, #1
 803ba0c:	60e3      	str	r3, [r4, #12]
 803ba0e:	e66c      	b.n	803b6ea <_scanf_float+0x82>
 803ba10:	9b04      	ldr	r3, [sp, #16]
 803ba12:	2b00      	cmp	r3, #0
 803ba14:	d0e4      	beq.n	803b9e0 <_scanf_float+0x378>
 803ba16:	9905      	ldr	r1, [sp, #20]
 803ba18:	230a      	movs	r3, #10
 803ba1a:	462a      	mov	r2, r5
 803ba1c:	3101      	adds	r1, #1
 803ba1e:	4640      	mov	r0, r8
 803ba20:	f000 ff6e 	bl	803c900 <_strtol_r>
 803ba24:	9b04      	ldr	r3, [sp, #16]
 803ba26:	9e05      	ldr	r6, [sp, #20]
 803ba28:	1ac2      	subs	r2, r0, r3
 803ba2a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 803ba2e:	429e      	cmp	r6, r3
 803ba30:	bf28      	it	cs
 803ba32:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 803ba36:	4912      	ldr	r1, [pc, #72]	; (803ba80 <_scanf_float+0x418>)
 803ba38:	4630      	mov	r0, r6
 803ba3a:	f000 f83b 	bl	803bab4 <siprintf>
 803ba3e:	e7cf      	b.n	803b9e0 <_scanf_float+0x378>
 803ba40:	f011 0f04 	tst.w	r1, #4
 803ba44:	9903      	ldr	r1, [sp, #12]
 803ba46:	600a      	str	r2, [r1, #0]
 803ba48:	d1db      	bne.n	803ba02 <_scanf_float+0x39a>
 803ba4a:	f8d3 8000 	ldr.w	r8, [r3]
 803ba4e:	ee10 2a10 	vmov	r2, s0
 803ba52:	ee10 0a10 	vmov	r0, s0
 803ba56:	463b      	mov	r3, r7
 803ba58:	4639      	mov	r1, r7
 803ba5a:	f7e5 f867 	bl	8020b2c <__aeabi_dcmpun>
 803ba5e:	b128      	cbz	r0, 803ba6c <_scanf_float+0x404>
 803ba60:	4808      	ldr	r0, [pc, #32]	; (803ba84 <_scanf_float+0x41c>)
 803ba62:	f000 f821 	bl	803baa8 <nanf>
 803ba66:	ed88 0a00 	vstr	s0, [r8]
 803ba6a:	e7cd      	b.n	803ba08 <_scanf_float+0x3a0>
 803ba6c:	4630      	mov	r0, r6
 803ba6e:	4639      	mov	r1, r7
 803ba70:	f7e5 f8ba 	bl	8020be8 <__aeabi_d2f>
 803ba74:	f8c8 0000 	str.w	r0, [r8]
 803ba78:	e7c6      	b.n	803ba08 <_scanf_float+0x3a0>
 803ba7a:	2500      	movs	r5, #0
 803ba7c:	e635      	b.n	803b6ea <_scanf_float+0x82>
 803ba7e:	bf00      	nop
 803ba80:	0804005c 	.word	0x0804005c
 803ba84:	08040478 	.word	0x08040478

0803ba88 <_sbrk_r>:
 803ba88:	b538      	push	{r3, r4, r5, lr}
 803ba8a:	4d06      	ldr	r5, [pc, #24]	; (803baa4 <_sbrk_r+0x1c>)
 803ba8c:	2300      	movs	r3, #0
 803ba8e:	4604      	mov	r4, r0
 803ba90:	4608      	mov	r0, r1
 803ba92:	602b      	str	r3, [r5, #0]
 803ba94:	f7f6 fe60 	bl	8032758 <_sbrk>
 803ba98:	1c43      	adds	r3, r0, #1
 803ba9a:	d102      	bne.n	803baa2 <_sbrk_r+0x1a>
 803ba9c:	682b      	ldr	r3, [r5, #0]
 803ba9e:	b103      	cbz	r3, 803baa2 <_sbrk_r+0x1a>
 803baa0:	6023      	str	r3, [r4, #0]
 803baa2:	bd38      	pop	{r3, r4, r5, pc}
 803baa4:	20000b80 	.word	0x20000b80

0803baa8 <nanf>:
 803baa8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 803bab0 <nanf+0x8>
 803baac:	4770      	bx	lr
 803baae:	bf00      	nop
 803bab0:	7fc00000 	.word	0x7fc00000

0803bab4 <siprintf>:
 803bab4:	b40e      	push	{r1, r2, r3}
 803bab6:	b500      	push	{lr}
 803bab8:	b09c      	sub	sp, #112	; 0x70
 803baba:	ab1d      	add	r3, sp, #116	; 0x74
 803babc:	9002      	str	r0, [sp, #8]
 803babe:	9006      	str	r0, [sp, #24]
 803bac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 803bac4:	4809      	ldr	r0, [pc, #36]	; (803baec <siprintf+0x38>)
 803bac6:	9107      	str	r1, [sp, #28]
 803bac8:	9104      	str	r1, [sp, #16]
 803baca:	4909      	ldr	r1, [pc, #36]	; (803baf0 <siprintf+0x3c>)
 803bacc:	f853 2b04 	ldr.w	r2, [r3], #4
 803bad0:	9105      	str	r1, [sp, #20]
 803bad2:	6800      	ldr	r0, [r0, #0]
 803bad4:	9301      	str	r3, [sp, #4]
 803bad6:	a902      	add	r1, sp, #8
 803bad8:	f002 fea2 	bl	803e820 <_svfiprintf_r>
 803badc:	9b02      	ldr	r3, [sp, #8]
 803bade:	2200      	movs	r2, #0
 803bae0:	701a      	strb	r2, [r3, #0]
 803bae2:	b01c      	add	sp, #112	; 0x70
 803bae4:	f85d eb04 	ldr.w	lr, [sp], #4
 803bae8:	b003      	add	sp, #12
 803baea:	4770      	bx	lr
 803baec:	2000002c 	.word	0x2000002c
 803baf0:	ffff0208 	.word	0xffff0208

0803baf4 <__sread>:
 803baf4:	b510      	push	{r4, lr}
 803baf6:	460c      	mov	r4, r1
 803baf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803bafc:	f002 ff90 	bl	803ea20 <_read_r>
 803bb00:	2800      	cmp	r0, #0
 803bb02:	bfab      	itete	ge
 803bb04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803bb06:	89a3      	ldrhlt	r3, [r4, #12]
 803bb08:	181b      	addge	r3, r3, r0
 803bb0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803bb0e:	bfac      	ite	ge
 803bb10:	6563      	strge	r3, [r4, #84]	; 0x54
 803bb12:	81a3      	strhlt	r3, [r4, #12]
 803bb14:	bd10      	pop	{r4, pc}

0803bb16 <__swrite>:
 803bb16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803bb1a:	461f      	mov	r7, r3
 803bb1c:	898b      	ldrh	r3, [r1, #12]
 803bb1e:	05db      	lsls	r3, r3, #23
 803bb20:	4605      	mov	r5, r0
 803bb22:	460c      	mov	r4, r1
 803bb24:	4616      	mov	r6, r2
 803bb26:	d505      	bpl.n	803bb34 <__swrite+0x1e>
 803bb28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803bb2c:	2302      	movs	r3, #2
 803bb2e:	2200      	movs	r2, #0
 803bb30:	f002 f918 	bl	803dd64 <_lseek_r>
 803bb34:	89a3      	ldrh	r3, [r4, #12]
 803bb36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803bb3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803bb3e:	81a3      	strh	r3, [r4, #12]
 803bb40:	4632      	mov	r2, r6
 803bb42:	463b      	mov	r3, r7
 803bb44:	4628      	mov	r0, r5
 803bb46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803bb4a:	f000 bedb 	b.w	803c904 <_write_r>

0803bb4e <__sseek>:
 803bb4e:	b510      	push	{r4, lr}
 803bb50:	460c      	mov	r4, r1
 803bb52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803bb56:	f002 f905 	bl	803dd64 <_lseek_r>
 803bb5a:	1c43      	adds	r3, r0, #1
 803bb5c:	89a3      	ldrh	r3, [r4, #12]
 803bb5e:	bf15      	itete	ne
 803bb60:	6560      	strne	r0, [r4, #84]	; 0x54
 803bb62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803bb66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803bb6a:	81a3      	strheq	r3, [r4, #12]
 803bb6c:	bf18      	it	ne
 803bb6e:	81a3      	strhne	r3, [r4, #12]
 803bb70:	bd10      	pop	{r4, pc}

0803bb72 <__sclose>:
 803bb72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803bb76:	f000 bed7 	b.w	803c928 <_close_r>

0803bb7a <strncmp>:
 803bb7a:	b510      	push	{r4, lr}
 803bb7c:	b16a      	cbz	r2, 803bb9a <strncmp+0x20>
 803bb7e:	3901      	subs	r1, #1
 803bb80:	1884      	adds	r4, r0, r2
 803bb82:	f810 3b01 	ldrb.w	r3, [r0], #1
 803bb86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 803bb8a:	4293      	cmp	r3, r2
 803bb8c:	d103      	bne.n	803bb96 <strncmp+0x1c>
 803bb8e:	42a0      	cmp	r0, r4
 803bb90:	d001      	beq.n	803bb96 <strncmp+0x1c>
 803bb92:	2b00      	cmp	r3, #0
 803bb94:	d1f5      	bne.n	803bb82 <strncmp+0x8>
 803bb96:	1a98      	subs	r0, r3, r2
 803bb98:	bd10      	pop	{r4, pc}
 803bb9a:	4610      	mov	r0, r2
 803bb9c:	e7fc      	b.n	803bb98 <strncmp+0x1e>

0803bb9e <sulp>:
 803bb9e:	b570      	push	{r4, r5, r6, lr}
 803bba0:	4604      	mov	r4, r0
 803bba2:	460d      	mov	r5, r1
 803bba4:	ec45 4b10 	vmov	d0, r4, r5
 803bba8:	4616      	mov	r6, r2
 803bbaa:	f002 fc7f 	bl	803e4ac <__ulp>
 803bbae:	ec51 0b10 	vmov	r0, r1, d0
 803bbb2:	b17e      	cbz	r6, 803bbd4 <sulp+0x36>
 803bbb4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 803bbb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 803bbbc:	2b00      	cmp	r3, #0
 803bbbe:	dd09      	ble.n	803bbd4 <sulp+0x36>
 803bbc0:	051b      	lsls	r3, r3, #20
 803bbc2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 803bbc6:	2400      	movs	r4, #0
 803bbc8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 803bbcc:	4622      	mov	r2, r4
 803bbce:	462b      	mov	r3, r5
 803bbd0:	f7e4 fd12 	bl	80205f8 <__aeabi_dmul>
 803bbd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0803bbd8 <_strtod_l>:
 803bbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803bbdc:	b0a3      	sub	sp, #140	; 0x8c
 803bbde:	461f      	mov	r7, r3
 803bbe0:	2300      	movs	r3, #0
 803bbe2:	931e      	str	r3, [sp, #120]	; 0x78
 803bbe4:	4ba4      	ldr	r3, [pc, #656]	; (803be78 <_strtod_l+0x2a0>)
 803bbe6:	9219      	str	r2, [sp, #100]	; 0x64
 803bbe8:	681b      	ldr	r3, [r3, #0]
 803bbea:	9307      	str	r3, [sp, #28]
 803bbec:	4604      	mov	r4, r0
 803bbee:	4618      	mov	r0, r3
 803bbf0:	4688      	mov	r8, r1
 803bbf2:	f7e4 faed 	bl	80201d0 <strlen>
 803bbf6:	f04f 0a00 	mov.w	sl, #0
 803bbfa:	4605      	mov	r5, r0
 803bbfc:	f04f 0b00 	mov.w	fp, #0
 803bc00:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 803bc04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803bc06:	781a      	ldrb	r2, [r3, #0]
 803bc08:	2a2b      	cmp	r2, #43	; 0x2b
 803bc0a:	d04c      	beq.n	803bca6 <_strtod_l+0xce>
 803bc0c:	d839      	bhi.n	803bc82 <_strtod_l+0xaa>
 803bc0e:	2a0d      	cmp	r2, #13
 803bc10:	d832      	bhi.n	803bc78 <_strtod_l+0xa0>
 803bc12:	2a08      	cmp	r2, #8
 803bc14:	d832      	bhi.n	803bc7c <_strtod_l+0xa4>
 803bc16:	2a00      	cmp	r2, #0
 803bc18:	d03c      	beq.n	803bc94 <_strtod_l+0xbc>
 803bc1a:	2300      	movs	r3, #0
 803bc1c:	930e      	str	r3, [sp, #56]	; 0x38
 803bc1e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 803bc20:	7833      	ldrb	r3, [r6, #0]
 803bc22:	2b30      	cmp	r3, #48	; 0x30
 803bc24:	f040 80b4 	bne.w	803bd90 <_strtod_l+0x1b8>
 803bc28:	7873      	ldrb	r3, [r6, #1]
 803bc2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 803bc2e:	2b58      	cmp	r3, #88	; 0x58
 803bc30:	d16c      	bne.n	803bd0c <_strtod_l+0x134>
 803bc32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 803bc34:	9301      	str	r3, [sp, #4]
 803bc36:	ab1e      	add	r3, sp, #120	; 0x78
 803bc38:	9702      	str	r7, [sp, #8]
 803bc3a:	9300      	str	r3, [sp, #0]
 803bc3c:	4a8f      	ldr	r2, [pc, #572]	; (803be7c <_strtod_l+0x2a4>)
 803bc3e:	ab1f      	add	r3, sp, #124	; 0x7c
 803bc40:	a91d      	add	r1, sp, #116	; 0x74
 803bc42:	4620      	mov	r0, r4
 803bc44:	f001 fd72 	bl	803d72c <__gethex>
 803bc48:	f010 0707 	ands.w	r7, r0, #7
 803bc4c:	4605      	mov	r5, r0
 803bc4e:	d005      	beq.n	803bc5c <_strtod_l+0x84>
 803bc50:	2f06      	cmp	r7, #6
 803bc52:	d12a      	bne.n	803bcaa <_strtod_l+0xd2>
 803bc54:	3601      	adds	r6, #1
 803bc56:	2300      	movs	r3, #0
 803bc58:	961d      	str	r6, [sp, #116]	; 0x74
 803bc5a:	930e      	str	r3, [sp, #56]	; 0x38
 803bc5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 803bc5e:	2b00      	cmp	r3, #0
 803bc60:	f040 8596 	bne.w	803c790 <_strtod_l+0xbb8>
 803bc64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 803bc66:	b1db      	cbz	r3, 803bca0 <_strtod_l+0xc8>
 803bc68:	4652      	mov	r2, sl
 803bc6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 803bc6e:	ec43 2b10 	vmov	d0, r2, r3
 803bc72:	b023      	add	sp, #140	; 0x8c
 803bc74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803bc78:	2a20      	cmp	r2, #32
 803bc7a:	d1ce      	bne.n	803bc1a <_strtod_l+0x42>
 803bc7c:	3301      	adds	r3, #1
 803bc7e:	931d      	str	r3, [sp, #116]	; 0x74
 803bc80:	e7c0      	b.n	803bc04 <_strtod_l+0x2c>
 803bc82:	2a2d      	cmp	r2, #45	; 0x2d
 803bc84:	d1c9      	bne.n	803bc1a <_strtod_l+0x42>
 803bc86:	2201      	movs	r2, #1
 803bc88:	920e      	str	r2, [sp, #56]	; 0x38
 803bc8a:	1c5a      	adds	r2, r3, #1
 803bc8c:	921d      	str	r2, [sp, #116]	; 0x74
 803bc8e:	785b      	ldrb	r3, [r3, #1]
 803bc90:	2b00      	cmp	r3, #0
 803bc92:	d1c4      	bne.n	803bc1e <_strtod_l+0x46>
 803bc94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 803bc96:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 803bc9a:	2b00      	cmp	r3, #0
 803bc9c:	f040 8576 	bne.w	803c78c <_strtod_l+0xbb4>
 803bca0:	4652      	mov	r2, sl
 803bca2:	465b      	mov	r3, fp
 803bca4:	e7e3      	b.n	803bc6e <_strtod_l+0x96>
 803bca6:	2200      	movs	r2, #0
 803bca8:	e7ee      	b.n	803bc88 <_strtod_l+0xb0>
 803bcaa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 803bcac:	b13a      	cbz	r2, 803bcbe <_strtod_l+0xe6>
 803bcae:	2135      	movs	r1, #53	; 0x35
 803bcb0:	a820      	add	r0, sp, #128	; 0x80
 803bcb2:	f002 fd06 	bl	803e6c2 <__copybits>
 803bcb6:	991e      	ldr	r1, [sp, #120]	; 0x78
 803bcb8:	4620      	mov	r0, r4
 803bcba:	f002 f8cb 	bl	803de54 <_Bfree>
 803bcbe:	3f01      	subs	r7, #1
 803bcc0:	2f05      	cmp	r7, #5
 803bcc2:	d807      	bhi.n	803bcd4 <_strtod_l+0xfc>
 803bcc4:	e8df f007 	tbb	[pc, r7]
 803bcc8:	1d180b0e 	.word	0x1d180b0e
 803bccc:	030e      	.short	0x030e
 803bcce:	f04f 0b00 	mov.w	fp, #0
 803bcd2:	46da      	mov	sl, fp
 803bcd4:	0728      	lsls	r0, r5, #28
 803bcd6:	d5c1      	bpl.n	803bc5c <_strtod_l+0x84>
 803bcd8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 803bcdc:	e7be      	b.n	803bc5c <_strtod_l+0x84>
 803bcde:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 803bce2:	e7f7      	b.n	803bcd4 <_strtod_l+0xfc>
 803bce4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 803bce8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 803bcea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 803bcee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 803bcf2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 803bcf6:	e7ed      	b.n	803bcd4 <_strtod_l+0xfc>
 803bcf8:	f8df b184 	ldr.w	fp, [pc, #388]	; 803be80 <_strtod_l+0x2a8>
 803bcfc:	f04f 0a00 	mov.w	sl, #0
 803bd00:	e7e8      	b.n	803bcd4 <_strtod_l+0xfc>
 803bd02:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 803bd06:	f04f 3aff 	mov.w	sl, #4294967295
 803bd0a:	e7e3      	b.n	803bcd4 <_strtod_l+0xfc>
 803bd0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803bd0e:	1c5a      	adds	r2, r3, #1
 803bd10:	921d      	str	r2, [sp, #116]	; 0x74
 803bd12:	785b      	ldrb	r3, [r3, #1]
 803bd14:	2b30      	cmp	r3, #48	; 0x30
 803bd16:	d0f9      	beq.n	803bd0c <_strtod_l+0x134>
 803bd18:	2b00      	cmp	r3, #0
 803bd1a:	d09f      	beq.n	803bc5c <_strtod_l+0x84>
 803bd1c:	2301      	movs	r3, #1
 803bd1e:	f04f 0900 	mov.w	r9, #0
 803bd22:	9304      	str	r3, [sp, #16]
 803bd24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803bd26:	930a      	str	r3, [sp, #40]	; 0x28
 803bd28:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 803bd2c:	464f      	mov	r7, r9
 803bd2e:	220a      	movs	r2, #10
 803bd30:	981d      	ldr	r0, [sp, #116]	; 0x74
 803bd32:	7806      	ldrb	r6, [r0, #0]
 803bd34:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 803bd38:	b2d9      	uxtb	r1, r3
 803bd3a:	2909      	cmp	r1, #9
 803bd3c:	d92a      	bls.n	803bd94 <_strtod_l+0x1bc>
 803bd3e:	9907      	ldr	r1, [sp, #28]
 803bd40:	462a      	mov	r2, r5
 803bd42:	f7ff ff1a 	bl	803bb7a <strncmp>
 803bd46:	b398      	cbz	r0, 803bdb0 <_strtod_l+0x1d8>
 803bd48:	2000      	movs	r0, #0
 803bd4a:	4633      	mov	r3, r6
 803bd4c:	463d      	mov	r5, r7
 803bd4e:	9007      	str	r0, [sp, #28]
 803bd50:	4602      	mov	r2, r0
 803bd52:	2b65      	cmp	r3, #101	; 0x65
 803bd54:	d001      	beq.n	803bd5a <_strtod_l+0x182>
 803bd56:	2b45      	cmp	r3, #69	; 0x45
 803bd58:	d118      	bne.n	803bd8c <_strtod_l+0x1b4>
 803bd5a:	b91d      	cbnz	r5, 803bd64 <_strtod_l+0x18c>
 803bd5c:	9b04      	ldr	r3, [sp, #16]
 803bd5e:	4303      	orrs	r3, r0
 803bd60:	d098      	beq.n	803bc94 <_strtod_l+0xbc>
 803bd62:	2500      	movs	r5, #0
 803bd64:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 803bd68:	f108 0301 	add.w	r3, r8, #1
 803bd6c:	931d      	str	r3, [sp, #116]	; 0x74
 803bd6e:	f898 3001 	ldrb.w	r3, [r8, #1]
 803bd72:	2b2b      	cmp	r3, #43	; 0x2b
 803bd74:	d075      	beq.n	803be62 <_strtod_l+0x28a>
 803bd76:	2b2d      	cmp	r3, #45	; 0x2d
 803bd78:	d07b      	beq.n	803be72 <_strtod_l+0x29a>
 803bd7a:	f04f 0c00 	mov.w	ip, #0
 803bd7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 803bd82:	2909      	cmp	r1, #9
 803bd84:	f240 8082 	bls.w	803be8c <_strtod_l+0x2b4>
 803bd88:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 803bd8c:	2600      	movs	r6, #0
 803bd8e:	e09d      	b.n	803becc <_strtod_l+0x2f4>
 803bd90:	2300      	movs	r3, #0
 803bd92:	e7c4      	b.n	803bd1e <_strtod_l+0x146>
 803bd94:	2f08      	cmp	r7, #8
 803bd96:	bfd8      	it	le
 803bd98:	9909      	ldrle	r1, [sp, #36]	; 0x24
 803bd9a:	f100 0001 	add.w	r0, r0, #1
 803bd9e:	bfda      	itte	le
 803bda0:	fb02 3301 	mlale	r3, r2, r1, r3
 803bda4:	9309      	strle	r3, [sp, #36]	; 0x24
 803bda6:	fb02 3909 	mlagt	r9, r2, r9, r3
 803bdaa:	3701      	adds	r7, #1
 803bdac:	901d      	str	r0, [sp, #116]	; 0x74
 803bdae:	e7bf      	b.n	803bd30 <_strtod_l+0x158>
 803bdb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803bdb2:	195a      	adds	r2, r3, r5
 803bdb4:	921d      	str	r2, [sp, #116]	; 0x74
 803bdb6:	5d5b      	ldrb	r3, [r3, r5]
 803bdb8:	2f00      	cmp	r7, #0
 803bdba:	d037      	beq.n	803be2c <_strtod_l+0x254>
 803bdbc:	9007      	str	r0, [sp, #28]
 803bdbe:	463d      	mov	r5, r7
 803bdc0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 803bdc4:	2a09      	cmp	r2, #9
 803bdc6:	d912      	bls.n	803bdee <_strtod_l+0x216>
 803bdc8:	2201      	movs	r2, #1
 803bdca:	e7c2      	b.n	803bd52 <_strtod_l+0x17a>
 803bdcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803bdce:	1c5a      	adds	r2, r3, #1
 803bdd0:	921d      	str	r2, [sp, #116]	; 0x74
 803bdd2:	785b      	ldrb	r3, [r3, #1]
 803bdd4:	3001      	adds	r0, #1
 803bdd6:	2b30      	cmp	r3, #48	; 0x30
 803bdd8:	d0f8      	beq.n	803bdcc <_strtod_l+0x1f4>
 803bdda:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 803bdde:	2a08      	cmp	r2, #8
 803bde0:	f200 84db 	bhi.w	803c79a <_strtod_l+0xbc2>
 803bde4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 803bde6:	9007      	str	r0, [sp, #28]
 803bde8:	2000      	movs	r0, #0
 803bdea:	920a      	str	r2, [sp, #40]	; 0x28
 803bdec:	4605      	mov	r5, r0
 803bdee:	3b30      	subs	r3, #48	; 0x30
 803bdf0:	f100 0201 	add.w	r2, r0, #1
 803bdf4:	d014      	beq.n	803be20 <_strtod_l+0x248>
 803bdf6:	9907      	ldr	r1, [sp, #28]
 803bdf8:	4411      	add	r1, r2
 803bdfa:	9107      	str	r1, [sp, #28]
 803bdfc:	462a      	mov	r2, r5
 803bdfe:	eb00 0e05 	add.w	lr, r0, r5
 803be02:	210a      	movs	r1, #10
 803be04:	4572      	cmp	r2, lr
 803be06:	d113      	bne.n	803be30 <_strtod_l+0x258>
 803be08:	182a      	adds	r2, r5, r0
 803be0a:	2a08      	cmp	r2, #8
 803be0c:	f105 0501 	add.w	r5, r5, #1
 803be10:	4405      	add	r5, r0
 803be12:	dc1c      	bgt.n	803be4e <_strtod_l+0x276>
 803be14:	9909      	ldr	r1, [sp, #36]	; 0x24
 803be16:	220a      	movs	r2, #10
 803be18:	fb02 3301 	mla	r3, r2, r1, r3
 803be1c:	9309      	str	r3, [sp, #36]	; 0x24
 803be1e:	2200      	movs	r2, #0
 803be20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803be22:	1c59      	adds	r1, r3, #1
 803be24:	911d      	str	r1, [sp, #116]	; 0x74
 803be26:	785b      	ldrb	r3, [r3, #1]
 803be28:	4610      	mov	r0, r2
 803be2a:	e7c9      	b.n	803bdc0 <_strtod_l+0x1e8>
 803be2c:	4638      	mov	r0, r7
 803be2e:	e7d2      	b.n	803bdd6 <_strtod_l+0x1fe>
 803be30:	2a08      	cmp	r2, #8
 803be32:	dc04      	bgt.n	803be3e <_strtod_l+0x266>
 803be34:	9e09      	ldr	r6, [sp, #36]	; 0x24
 803be36:	434e      	muls	r6, r1
 803be38:	9609      	str	r6, [sp, #36]	; 0x24
 803be3a:	3201      	adds	r2, #1
 803be3c:	e7e2      	b.n	803be04 <_strtod_l+0x22c>
 803be3e:	f102 0c01 	add.w	ip, r2, #1
 803be42:	f1bc 0f10 	cmp.w	ip, #16
 803be46:	bfd8      	it	le
 803be48:	fb01 f909 	mulle.w	r9, r1, r9
 803be4c:	e7f5      	b.n	803be3a <_strtod_l+0x262>
 803be4e:	2d10      	cmp	r5, #16
 803be50:	bfdc      	itt	le
 803be52:	220a      	movle	r2, #10
 803be54:	fb02 3909 	mlale	r9, r2, r9, r3
 803be58:	e7e1      	b.n	803be1e <_strtod_l+0x246>
 803be5a:	2300      	movs	r3, #0
 803be5c:	9307      	str	r3, [sp, #28]
 803be5e:	2201      	movs	r2, #1
 803be60:	e77c      	b.n	803bd5c <_strtod_l+0x184>
 803be62:	f04f 0c00 	mov.w	ip, #0
 803be66:	f108 0302 	add.w	r3, r8, #2
 803be6a:	931d      	str	r3, [sp, #116]	; 0x74
 803be6c:	f898 3002 	ldrb.w	r3, [r8, #2]
 803be70:	e785      	b.n	803bd7e <_strtod_l+0x1a6>
 803be72:	f04f 0c01 	mov.w	ip, #1
 803be76:	e7f6      	b.n	803be66 <_strtod_l+0x28e>
 803be78:	080402b8 	.word	0x080402b8
 803be7c:	08040064 	.word	0x08040064
 803be80:	7ff00000 	.word	0x7ff00000
 803be84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803be86:	1c59      	adds	r1, r3, #1
 803be88:	911d      	str	r1, [sp, #116]	; 0x74
 803be8a:	785b      	ldrb	r3, [r3, #1]
 803be8c:	2b30      	cmp	r3, #48	; 0x30
 803be8e:	d0f9      	beq.n	803be84 <_strtod_l+0x2ac>
 803be90:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 803be94:	2908      	cmp	r1, #8
 803be96:	f63f af79 	bhi.w	803bd8c <_strtod_l+0x1b4>
 803be9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 803be9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803bea0:	9308      	str	r3, [sp, #32]
 803bea2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803bea4:	1c59      	adds	r1, r3, #1
 803bea6:	911d      	str	r1, [sp, #116]	; 0x74
 803bea8:	785b      	ldrb	r3, [r3, #1]
 803beaa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 803beae:	2e09      	cmp	r6, #9
 803beb0:	d937      	bls.n	803bf22 <_strtod_l+0x34a>
 803beb2:	9e08      	ldr	r6, [sp, #32]
 803beb4:	1b89      	subs	r1, r1, r6
 803beb6:	2908      	cmp	r1, #8
 803beb8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 803bebc:	dc02      	bgt.n	803bec4 <_strtod_l+0x2ec>
 803bebe:	4576      	cmp	r6, lr
 803bec0:	bfa8      	it	ge
 803bec2:	4676      	movge	r6, lr
 803bec4:	f1bc 0f00 	cmp.w	ip, #0
 803bec8:	d000      	beq.n	803becc <_strtod_l+0x2f4>
 803beca:	4276      	negs	r6, r6
 803becc:	2d00      	cmp	r5, #0
 803bece:	d14f      	bne.n	803bf70 <_strtod_l+0x398>
 803bed0:	9904      	ldr	r1, [sp, #16]
 803bed2:	4301      	orrs	r1, r0
 803bed4:	f47f aec2 	bne.w	803bc5c <_strtod_l+0x84>
 803bed8:	2a00      	cmp	r2, #0
 803beda:	f47f aedb 	bne.w	803bc94 <_strtod_l+0xbc>
 803bede:	2b69      	cmp	r3, #105	; 0x69
 803bee0:	d027      	beq.n	803bf32 <_strtod_l+0x35a>
 803bee2:	dc24      	bgt.n	803bf2e <_strtod_l+0x356>
 803bee4:	2b49      	cmp	r3, #73	; 0x49
 803bee6:	d024      	beq.n	803bf32 <_strtod_l+0x35a>
 803bee8:	2b4e      	cmp	r3, #78	; 0x4e
 803beea:	f47f aed3 	bne.w	803bc94 <_strtod_l+0xbc>
 803beee:	499e      	ldr	r1, [pc, #632]	; (803c168 <_strtod_l+0x590>)
 803bef0:	a81d      	add	r0, sp, #116	; 0x74
 803bef2:	f001 fe73 	bl	803dbdc <__match>
 803bef6:	2800      	cmp	r0, #0
 803bef8:	f43f aecc 	beq.w	803bc94 <_strtod_l+0xbc>
 803befc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803befe:	781b      	ldrb	r3, [r3, #0]
 803bf00:	2b28      	cmp	r3, #40	; 0x28
 803bf02:	d12d      	bne.n	803bf60 <_strtod_l+0x388>
 803bf04:	4999      	ldr	r1, [pc, #612]	; (803c16c <_strtod_l+0x594>)
 803bf06:	aa20      	add	r2, sp, #128	; 0x80
 803bf08:	a81d      	add	r0, sp, #116	; 0x74
 803bf0a:	f001 fe7b 	bl	803dc04 <__hexnan>
 803bf0e:	2805      	cmp	r0, #5
 803bf10:	d126      	bne.n	803bf60 <_strtod_l+0x388>
 803bf12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 803bf14:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 803bf18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 803bf1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 803bf20:	e69c      	b.n	803bc5c <_strtod_l+0x84>
 803bf22:	210a      	movs	r1, #10
 803bf24:	fb01 3e0e 	mla	lr, r1, lr, r3
 803bf28:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 803bf2c:	e7b9      	b.n	803bea2 <_strtod_l+0x2ca>
 803bf2e:	2b6e      	cmp	r3, #110	; 0x6e
 803bf30:	e7db      	b.n	803beea <_strtod_l+0x312>
 803bf32:	498f      	ldr	r1, [pc, #572]	; (803c170 <_strtod_l+0x598>)
 803bf34:	a81d      	add	r0, sp, #116	; 0x74
 803bf36:	f001 fe51 	bl	803dbdc <__match>
 803bf3a:	2800      	cmp	r0, #0
 803bf3c:	f43f aeaa 	beq.w	803bc94 <_strtod_l+0xbc>
 803bf40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803bf42:	498c      	ldr	r1, [pc, #560]	; (803c174 <_strtod_l+0x59c>)
 803bf44:	3b01      	subs	r3, #1
 803bf46:	a81d      	add	r0, sp, #116	; 0x74
 803bf48:	931d      	str	r3, [sp, #116]	; 0x74
 803bf4a:	f001 fe47 	bl	803dbdc <__match>
 803bf4e:	b910      	cbnz	r0, 803bf56 <_strtod_l+0x37e>
 803bf50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803bf52:	3301      	adds	r3, #1
 803bf54:	931d      	str	r3, [sp, #116]	; 0x74
 803bf56:	f8df b22c 	ldr.w	fp, [pc, #556]	; 803c184 <_strtod_l+0x5ac>
 803bf5a:	f04f 0a00 	mov.w	sl, #0
 803bf5e:	e67d      	b.n	803bc5c <_strtod_l+0x84>
 803bf60:	4885      	ldr	r0, [pc, #532]	; (803c178 <_strtod_l+0x5a0>)
 803bf62:	f002 fd71 	bl	803ea48 <nan>
 803bf66:	ed8d 0b04 	vstr	d0, [sp, #16]
 803bf6a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 803bf6e:	e675      	b.n	803bc5c <_strtod_l+0x84>
 803bf70:	9b07      	ldr	r3, [sp, #28]
 803bf72:	9809      	ldr	r0, [sp, #36]	; 0x24
 803bf74:	1af3      	subs	r3, r6, r3
 803bf76:	2f00      	cmp	r7, #0
 803bf78:	bf08      	it	eq
 803bf7a:	462f      	moveq	r7, r5
 803bf7c:	2d10      	cmp	r5, #16
 803bf7e:	9308      	str	r3, [sp, #32]
 803bf80:	46a8      	mov	r8, r5
 803bf82:	bfa8      	it	ge
 803bf84:	f04f 0810 	movge.w	r8, #16
 803bf88:	f7e4 fabc 	bl	8020504 <__aeabi_ui2d>
 803bf8c:	2d09      	cmp	r5, #9
 803bf8e:	4682      	mov	sl, r0
 803bf90:	468b      	mov	fp, r1
 803bf92:	dd13      	ble.n	803bfbc <_strtod_l+0x3e4>
 803bf94:	4b79      	ldr	r3, [pc, #484]	; (803c17c <_strtod_l+0x5a4>)
 803bf96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 803bf9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 803bf9e:	f7e4 fb2b 	bl	80205f8 <__aeabi_dmul>
 803bfa2:	4682      	mov	sl, r0
 803bfa4:	4648      	mov	r0, r9
 803bfa6:	468b      	mov	fp, r1
 803bfa8:	f7e4 faac 	bl	8020504 <__aeabi_ui2d>
 803bfac:	4602      	mov	r2, r0
 803bfae:	460b      	mov	r3, r1
 803bfb0:	4650      	mov	r0, sl
 803bfb2:	4659      	mov	r1, fp
 803bfb4:	f7e4 f96a 	bl	802028c <__adddf3>
 803bfb8:	4682      	mov	sl, r0
 803bfba:	468b      	mov	fp, r1
 803bfbc:	2d0f      	cmp	r5, #15
 803bfbe:	dc38      	bgt.n	803c032 <_strtod_l+0x45a>
 803bfc0:	9b08      	ldr	r3, [sp, #32]
 803bfc2:	2b00      	cmp	r3, #0
 803bfc4:	f43f ae4a 	beq.w	803bc5c <_strtod_l+0x84>
 803bfc8:	dd24      	ble.n	803c014 <_strtod_l+0x43c>
 803bfca:	2b16      	cmp	r3, #22
 803bfcc:	dc0b      	bgt.n	803bfe6 <_strtod_l+0x40e>
 803bfce:	4d6b      	ldr	r5, [pc, #428]	; (803c17c <_strtod_l+0x5a4>)
 803bfd0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 803bfd4:	e9d5 0100 	ldrd	r0, r1, [r5]
 803bfd8:	4652      	mov	r2, sl
 803bfda:	465b      	mov	r3, fp
 803bfdc:	f7e4 fb0c 	bl	80205f8 <__aeabi_dmul>
 803bfe0:	4682      	mov	sl, r0
 803bfe2:	468b      	mov	fp, r1
 803bfe4:	e63a      	b.n	803bc5c <_strtod_l+0x84>
 803bfe6:	9a08      	ldr	r2, [sp, #32]
 803bfe8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 803bfec:	4293      	cmp	r3, r2
 803bfee:	db20      	blt.n	803c032 <_strtod_l+0x45a>
 803bff0:	4c62      	ldr	r4, [pc, #392]	; (803c17c <_strtod_l+0x5a4>)
 803bff2:	f1c5 050f 	rsb	r5, r5, #15
 803bff6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 803bffa:	4652      	mov	r2, sl
 803bffc:	465b      	mov	r3, fp
 803bffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 803c002:	f7e4 faf9 	bl	80205f8 <__aeabi_dmul>
 803c006:	9b08      	ldr	r3, [sp, #32]
 803c008:	1b5d      	subs	r5, r3, r5
 803c00a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 803c00e:	e9d4 2300 	ldrd	r2, r3, [r4]
 803c012:	e7e3      	b.n	803bfdc <_strtod_l+0x404>
 803c014:	9b08      	ldr	r3, [sp, #32]
 803c016:	3316      	adds	r3, #22
 803c018:	db0b      	blt.n	803c032 <_strtod_l+0x45a>
 803c01a:	9b07      	ldr	r3, [sp, #28]
 803c01c:	4a57      	ldr	r2, [pc, #348]	; (803c17c <_strtod_l+0x5a4>)
 803c01e:	1b9e      	subs	r6, r3, r6
 803c020:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 803c024:	e9d6 2300 	ldrd	r2, r3, [r6]
 803c028:	4650      	mov	r0, sl
 803c02a:	4659      	mov	r1, fp
 803c02c:	f7e4 fc0e 	bl	802084c <__aeabi_ddiv>
 803c030:	e7d6      	b.n	803bfe0 <_strtod_l+0x408>
 803c032:	9b08      	ldr	r3, [sp, #32]
 803c034:	eba5 0808 	sub.w	r8, r5, r8
 803c038:	4498      	add	r8, r3
 803c03a:	f1b8 0f00 	cmp.w	r8, #0
 803c03e:	dd71      	ble.n	803c124 <_strtod_l+0x54c>
 803c040:	f018 030f 	ands.w	r3, r8, #15
 803c044:	d00a      	beq.n	803c05c <_strtod_l+0x484>
 803c046:	494d      	ldr	r1, [pc, #308]	; (803c17c <_strtod_l+0x5a4>)
 803c048:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 803c04c:	4652      	mov	r2, sl
 803c04e:	465b      	mov	r3, fp
 803c050:	e9d1 0100 	ldrd	r0, r1, [r1]
 803c054:	f7e4 fad0 	bl	80205f8 <__aeabi_dmul>
 803c058:	4682      	mov	sl, r0
 803c05a:	468b      	mov	fp, r1
 803c05c:	f038 080f 	bics.w	r8, r8, #15
 803c060:	d04d      	beq.n	803c0fe <_strtod_l+0x526>
 803c062:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 803c066:	dd22      	ble.n	803c0ae <_strtod_l+0x4d6>
 803c068:	2500      	movs	r5, #0
 803c06a:	462e      	mov	r6, r5
 803c06c:	9509      	str	r5, [sp, #36]	; 0x24
 803c06e:	9507      	str	r5, [sp, #28]
 803c070:	2322      	movs	r3, #34	; 0x22
 803c072:	f8df b110 	ldr.w	fp, [pc, #272]	; 803c184 <_strtod_l+0x5ac>
 803c076:	6023      	str	r3, [r4, #0]
 803c078:	f04f 0a00 	mov.w	sl, #0
 803c07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803c07e:	2b00      	cmp	r3, #0
 803c080:	f43f adec 	beq.w	803bc5c <_strtod_l+0x84>
 803c084:	991e      	ldr	r1, [sp, #120]	; 0x78
 803c086:	4620      	mov	r0, r4
 803c088:	f001 fee4 	bl	803de54 <_Bfree>
 803c08c:	9907      	ldr	r1, [sp, #28]
 803c08e:	4620      	mov	r0, r4
 803c090:	f001 fee0 	bl	803de54 <_Bfree>
 803c094:	4631      	mov	r1, r6
 803c096:	4620      	mov	r0, r4
 803c098:	f001 fedc 	bl	803de54 <_Bfree>
 803c09c:	9909      	ldr	r1, [sp, #36]	; 0x24
 803c09e:	4620      	mov	r0, r4
 803c0a0:	f001 fed8 	bl	803de54 <_Bfree>
 803c0a4:	4629      	mov	r1, r5
 803c0a6:	4620      	mov	r0, r4
 803c0a8:	f001 fed4 	bl	803de54 <_Bfree>
 803c0ac:	e5d6      	b.n	803bc5c <_strtod_l+0x84>
 803c0ae:	2300      	movs	r3, #0
 803c0b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 803c0b4:	4650      	mov	r0, sl
 803c0b6:	4659      	mov	r1, fp
 803c0b8:	4699      	mov	r9, r3
 803c0ba:	f1b8 0f01 	cmp.w	r8, #1
 803c0be:	dc21      	bgt.n	803c104 <_strtod_l+0x52c>
 803c0c0:	b10b      	cbz	r3, 803c0c6 <_strtod_l+0x4ee>
 803c0c2:	4682      	mov	sl, r0
 803c0c4:	468b      	mov	fp, r1
 803c0c6:	4b2e      	ldr	r3, [pc, #184]	; (803c180 <_strtod_l+0x5a8>)
 803c0c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 803c0cc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 803c0d0:	4652      	mov	r2, sl
 803c0d2:	465b      	mov	r3, fp
 803c0d4:	e9d9 0100 	ldrd	r0, r1, [r9]
 803c0d8:	f7e4 fa8e 	bl	80205f8 <__aeabi_dmul>
 803c0dc:	4b29      	ldr	r3, [pc, #164]	; (803c184 <_strtod_l+0x5ac>)
 803c0de:	460a      	mov	r2, r1
 803c0e0:	400b      	ands	r3, r1
 803c0e2:	4929      	ldr	r1, [pc, #164]	; (803c188 <_strtod_l+0x5b0>)
 803c0e4:	428b      	cmp	r3, r1
 803c0e6:	4682      	mov	sl, r0
 803c0e8:	d8be      	bhi.n	803c068 <_strtod_l+0x490>
 803c0ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 803c0ee:	428b      	cmp	r3, r1
 803c0f0:	bf86      	itte	hi
 803c0f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 803c18c <_strtod_l+0x5b4>
 803c0f6:	f04f 3aff 	movhi.w	sl, #4294967295
 803c0fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 803c0fe:	2300      	movs	r3, #0
 803c100:	9304      	str	r3, [sp, #16]
 803c102:	e081      	b.n	803c208 <_strtod_l+0x630>
 803c104:	f018 0f01 	tst.w	r8, #1
 803c108:	d007      	beq.n	803c11a <_strtod_l+0x542>
 803c10a:	4b1d      	ldr	r3, [pc, #116]	; (803c180 <_strtod_l+0x5a8>)
 803c10c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 803c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 803c114:	f7e4 fa70 	bl	80205f8 <__aeabi_dmul>
 803c118:	2301      	movs	r3, #1
 803c11a:	f109 0901 	add.w	r9, r9, #1
 803c11e:	ea4f 0868 	mov.w	r8, r8, asr #1
 803c122:	e7ca      	b.n	803c0ba <_strtod_l+0x4e2>
 803c124:	d0eb      	beq.n	803c0fe <_strtod_l+0x526>
 803c126:	f1c8 0800 	rsb	r8, r8, #0
 803c12a:	f018 020f 	ands.w	r2, r8, #15
 803c12e:	d00a      	beq.n	803c146 <_strtod_l+0x56e>
 803c130:	4b12      	ldr	r3, [pc, #72]	; (803c17c <_strtod_l+0x5a4>)
 803c132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 803c136:	4650      	mov	r0, sl
 803c138:	4659      	mov	r1, fp
 803c13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803c13e:	f7e4 fb85 	bl	802084c <__aeabi_ddiv>
 803c142:	4682      	mov	sl, r0
 803c144:	468b      	mov	fp, r1
 803c146:	ea5f 1828 	movs.w	r8, r8, asr #4
 803c14a:	d0d8      	beq.n	803c0fe <_strtod_l+0x526>
 803c14c:	f1b8 0f1f 	cmp.w	r8, #31
 803c150:	dd1e      	ble.n	803c190 <_strtod_l+0x5b8>
 803c152:	2500      	movs	r5, #0
 803c154:	462e      	mov	r6, r5
 803c156:	9509      	str	r5, [sp, #36]	; 0x24
 803c158:	9507      	str	r5, [sp, #28]
 803c15a:	2322      	movs	r3, #34	; 0x22
 803c15c:	f04f 0a00 	mov.w	sl, #0
 803c160:	f04f 0b00 	mov.w	fp, #0
 803c164:	6023      	str	r3, [r4, #0]
 803c166:	e789      	b.n	803c07c <_strtod_l+0x4a4>
 803c168:	08040035 	.word	0x08040035
 803c16c:	08040078 	.word	0x08040078
 803c170:	0804002d 	.word	0x0804002d
 803c174:	080401bc 	.word	0x080401bc
 803c178:	08040478 	.word	0x08040478
 803c17c:	08040358 	.word	0x08040358
 803c180:	08040330 	.word	0x08040330
 803c184:	7ff00000 	.word	0x7ff00000
 803c188:	7ca00000 	.word	0x7ca00000
 803c18c:	7fefffff 	.word	0x7fefffff
 803c190:	f018 0310 	ands.w	r3, r8, #16
 803c194:	bf18      	it	ne
 803c196:	236a      	movne	r3, #106	; 0x6a
 803c198:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 803c550 <_strtod_l+0x978>
 803c19c:	9304      	str	r3, [sp, #16]
 803c19e:	4650      	mov	r0, sl
 803c1a0:	4659      	mov	r1, fp
 803c1a2:	2300      	movs	r3, #0
 803c1a4:	f018 0f01 	tst.w	r8, #1
 803c1a8:	d004      	beq.n	803c1b4 <_strtod_l+0x5dc>
 803c1aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 803c1ae:	f7e4 fa23 	bl	80205f8 <__aeabi_dmul>
 803c1b2:	2301      	movs	r3, #1
 803c1b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 803c1b8:	f109 0908 	add.w	r9, r9, #8
 803c1bc:	d1f2      	bne.n	803c1a4 <_strtod_l+0x5cc>
 803c1be:	b10b      	cbz	r3, 803c1c4 <_strtod_l+0x5ec>
 803c1c0:	4682      	mov	sl, r0
 803c1c2:	468b      	mov	fp, r1
 803c1c4:	9b04      	ldr	r3, [sp, #16]
 803c1c6:	b1bb      	cbz	r3, 803c1f8 <_strtod_l+0x620>
 803c1c8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 803c1cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 803c1d0:	2b00      	cmp	r3, #0
 803c1d2:	4659      	mov	r1, fp
 803c1d4:	dd10      	ble.n	803c1f8 <_strtod_l+0x620>
 803c1d6:	2b1f      	cmp	r3, #31
 803c1d8:	f340 8128 	ble.w	803c42c <_strtod_l+0x854>
 803c1dc:	2b34      	cmp	r3, #52	; 0x34
 803c1de:	bfde      	ittt	le
 803c1e0:	3b20      	suble	r3, #32
 803c1e2:	f04f 32ff 	movle.w	r2, #4294967295
 803c1e6:	fa02 f303 	lslle.w	r3, r2, r3
 803c1ea:	f04f 0a00 	mov.w	sl, #0
 803c1ee:	bfcc      	ite	gt
 803c1f0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 803c1f4:	ea03 0b01 	andle.w	fp, r3, r1
 803c1f8:	2200      	movs	r2, #0
 803c1fa:	2300      	movs	r3, #0
 803c1fc:	4650      	mov	r0, sl
 803c1fe:	4659      	mov	r1, fp
 803c200:	f7e4 fc62 	bl	8020ac8 <__aeabi_dcmpeq>
 803c204:	2800      	cmp	r0, #0
 803c206:	d1a4      	bne.n	803c152 <_strtod_l+0x57a>
 803c208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803c20a:	9300      	str	r3, [sp, #0]
 803c20c:	990a      	ldr	r1, [sp, #40]	; 0x28
 803c20e:	462b      	mov	r3, r5
 803c210:	463a      	mov	r2, r7
 803c212:	4620      	mov	r0, r4
 803c214:	f001 fe8a 	bl	803df2c <__s2b>
 803c218:	9009      	str	r0, [sp, #36]	; 0x24
 803c21a:	2800      	cmp	r0, #0
 803c21c:	f43f af24 	beq.w	803c068 <_strtod_l+0x490>
 803c220:	9b07      	ldr	r3, [sp, #28]
 803c222:	1b9e      	subs	r6, r3, r6
 803c224:	9b08      	ldr	r3, [sp, #32]
 803c226:	2b00      	cmp	r3, #0
 803c228:	bfb4      	ite	lt
 803c22a:	4633      	movlt	r3, r6
 803c22c:	2300      	movge	r3, #0
 803c22e:	9310      	str	r3, [sp, #64]	; 0x40
 803c230:	9b08      	ldr	r3, [sp, #32]
 803c232:	2500      	movs	r5, #0
 803c234:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 803c238:	9318      	str	r3, [sp, #96]	; 0x60
 803c23a:	462e      	mov	r6, r5
 803c23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803c23e:	4620      	mov	r0, r4
 803c240:	6859      	ldr	r1, [r3, #4]
 803c242:	f001 fdc7 	bl	803ddd4 <_Balloc>
 803c246:	9007      	str	r0, [sp, #28]
 803c248:	2800      	cmp	r0, #0
 803c24a:	f43f af11 	beq.w	803c070 <_strtod_l+0x498>
 803c24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803c250:	691a      	ldr	r2, [r3, #16]
 803c252:	3202      	adds	r2, #2
 803c254:	f103 010c 	add.w	r1, r3, #12
 803c258:	0092      	lsls	r2, r2, #2
 803c25a:	300c      	adds	r0, #12
 803c25c:	f7fe fcda 	bl	803ac14 <memcpy>
 803c260:	ec4b ab10 	vmov	d0, sl, fp
 803c264:	aa20      	add	r2, sp, #128	; 0x80
 803c266:	a91f      	add	r1, sp, #124	; 0x7c
 803c268:	4620      	mov	r0, r4
 803c26a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 803c26e:	f002 f999 	bl	803e5a4 <__d2b>
 803c272:	901e      	str	r0, [sp, #120]	; 0x78
 803c274:	2800      	cmp	r0, #0
 803c276:	f43f aefb 	beq.w	803c070 <_strtod_l+0x498>
 803c27a:	2101      	movs	r1, #1
 803c27c:	4620      	mov	r0, r4
 803c27e:	f001 feef 	bl	803e060 <__i2b>
 803c282:	4606      	mov	r6, r0
 803c284:	2800      	cmp	r0, #0
 803c286:	f43f aef3 	beq.w	803c070 <_strtod_l+0x498>
 803c28a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 803c28c:	9904      	ldr	r1, [sp, #16]
 803c28e:	2b00      	cmp	r3, #0
 803c290:	bfab      	itete	ge
 803c292:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 803c294:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 803c296:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 803c298:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 803c29c:	bfac      	ite	ge
 803c29e:	eb03 0902 	addge.w	r9, r3, r2
 803c2a2:	1ad7      	sublt	r7, r2, r3
 803c2a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 803c2a6:	eba3 0801 	sub.w	r8, r3, r1
 803c2aa:	4490      	add	r8, r2
 803c2ac:	4ba3      	ldr	r3, [pc, #652]	; (803c53c <_strtod_l+0x964>)
 803c2ae:	f108 38ff 	add.w	r8, r8, #4294967295
 803c2b2:	4598      	cmp	r8, r3
 803c2b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 803c2b8:	f280 80cc 	bge.w	803c454 <_strtod_l+0x87c>
 803c2bc:	eba3 0308 	sub.w	r3, r3, r8
 803c2c0:	2b1f      	cmp	r3, #31
 803c2c2:	eba2 0203 	sub.w	r2, r2, r3
 803c2c6:	f04f 0101 	mov.w	r1, #1
 803c2ca:	f300 80b6 	bgt.w	803c43a <_strtod_l+0x862>
 803c2ce:	fa01 f303 	lsl.w	r3, r1, r3
 803c2d2:	9311      	str	r3, [sp, #68]	; 0x44
 803c2d4:	2300      	movs	r3, #0
 803c2d6:	930c      	str	r3, [sp, #48]	; 0x30
 803c2d8:	eb09 0802 	add.w	r8, r9, r2
 803c2dc:	9b04      	ldr	r3, [sp, #16]
 803c2de:	45c1      	cmp	r9, r8
 803c2e0:	4417      	add	r7, r2
 803c2e2:	441f      	add	r7, r3
 803c2e4:	464b      	mov	r3, r9
 803c2e6:	bfa8      	it	ge
 803c2e8:	4643      	movge	r3, r8
 803c2ea:	42bb      	cmp	r3, r7
 803c2ec:	bfa8      	it	ge
 803c2ee:	463b      	movge	r3, r7
 803c2f0:	2b00      	cmp	r3, #0
 803c2f2:	bfc2      	ittt	gt
 803c2f4:	eba8 0803 	subgt.w	r8, r8, r3
 803c2f8:	1aff      	subgt	r7, r7, r3
 803c2fa:	eba9 0903 	subgt.w	r9, r9, r3
 803c2fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 803c300:	2b00      	cmp	r3, #0
 803c302:	dd17      	ble.n	803c334 <_strtod_l+0x75c>
 803c304:	4631      	mov	r1, r6
 803c306:	461a      	mov	r2, r3
 803c308:	4620      	mov	r0, r4
 803c30a:	f001 ff65 	bl	803e1d8 <__pow5mult>
 803c30e:	4606      	mov	r6, r0
 803c310:	2800      	cmp	r0, #0
 803c312:	f43f aead 	beq.w	803c070 <_strtod_l+0x498>
 803c316:	4601      	mov	r1, r0
 803c318:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 803c31a:	4620      	mov	r0, r4
 803c31c:	f001 feb6 	bl	803e08c <__multiply>
 803c320:	900f      	str	r0, [sp, #60]	; 0x3c
 803c322:	2800      	cmp	r0, #0
 803c324:	f43f aea4 	beq.w	803c070 <_strtod_l+0x498>
 803c328:	991e      	ldr	r1, [sp, #120]	; 0x78
 803c32a:	4620      	mov	r0, r4
 803c32c:	f001 fd92 	bl	803de54 <_Bfree>
 803c330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803c332:	931e      	str	r3, [sp, #120]	; 0x78
 803c334:	f1b8 0f00 	cmp.w	r8, #0
 803c338:	f300 8091 	bgt.w	803c45e <_strtod_l+0x886>
 803c33c:	9b08      	ldr	r3, [sp, #32]
 803c33e:	2b00      	cmp	r3, #0
 803c340:	dd08      	ble.n	803c354 <_strtod_l+0x77c>
 803c342:	9a18      	ldr	r2, [sp, #96]	; 0x60
 803c344:	9907      	ldr	r1, [sp, #28]
 803c346:	4620      	mov	r0, r4
 803c348:	f001 ff46 	bl	803e1d8 <__pow5mult>
 803c34c:	9007      	str	r0, [sp, #28]
 803c34e:	2800      	cmp	r0, #0
 803c350:	f43f ae8e 	beq.w	803c070 <_strtod_l+0x498>
 803c354:	2f00      	cmp	r7, #0
 803c356:	dd08      	ble.n	803c36a <_strtod_l+0x792>
 803c358:	9907      	ldr	r1, [sp, #28]
 803c35a:	463a      	mov	r2, r7
 803c35c:	4620      	mov	r0, r4
 803c35e:	f001 ff95 	bl	803e28c <__lshift>
 803c362:	9007      	str	r0, [sp, #28]
 803c364:	2800      	cmp	r0, #0
 803c366:	f43f ae83 	beq.w	803c070 <_strtod_l+0x498>
 803c36a:	f1b9 0f00 	cmp.w	r9, #0
 803c36e:	dd08      	ble.n	803c382 <_strtod_l+0x7aa>
 803c370:	4631      	mov	r1, r6
 803c372:	464a      	mov	r2, r9
 803c374:	4620      	mov	r0, r4
 803c376:	f001 ff89 	bl	803e28c <__lshift>
 803c37a:	4606      	mov	r6, r0
 803c37c:	2800      	cmp	r0, #0
 803c37e:	f43f ae77 	beq.w	803c070 <_strtod_l+0x498>
 803c382:	9a07      	ldr	r2, [sp, #28]
 803c384:	991e      	ldr	r1, [sp, #120]	; 0x78
 803c386:	4620      	mov	r0, r4
 803c388:	f002 f808 	bl	803e39c <__mdiff>
 803c38c:	4605      	mov	r5, r0
 803c38e:	2800      	cmp	r0, #0
 803c390:	f43f ae6e 	beq.w	803c070 <_strtod_l+0x498>
 803c394:	68c3      	ldr	r3, [r0, #12]
 803c396:	930f      	str	r3, [sp, #60]	; 0x3c
 803c398:	2300      	movs	r3, #0
 803c39a:	60c3      	str	r3, [r0, #12]
 803c39c:	4631      	mov	r1, r6
 803c39e:	f001 ffe1 	bl	803e364 <__mcmp>
 803c3a2:	2800      	cmp	r0, #0
 803c3a4:	da65      	bge.n	803c472 <_strtod_l+0x89a>
 803c3a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803c3a8:	ea53 030a 	orrs.w	r3, r3, sl
 803c3ac:	f040 8087 	bne.w	803c4be <_strtod_l+0x8e6>
 803c3b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 803c3b4:	2b00      	cmp	r3, #0
 803c3b6:	f040 8082 	bne.w	803c4be <_strtod_l+0x8e6>
 803c3ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 803c3be:	0d1b      	lsrs	r3, r3, #20
 803c3c0:	051b      	lsls	r3, r3, #20
 803c3c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 803c3c6:	d97a      	bls.n	803c4be <_strtod_l+0x8e6>
 803c3c8:	696b      	ldr	r3, [r5, #20]
 803c3ca:	b913      	cbnz	r3, 803c3d2 <_strtod_l+0x7fa>
 803c3cc:	692b      	ldr	r3, [r5, #16]
 803c3ce:	2b01      	cmp	r3, #1
 803c3d0:	dd75      	ble.n	803c4be <_strtod_l+0x8e6>
 803c3d2:	4629      	mov	r1, r5
 803c3d4:	2201      	movs	r2, #1
 803c3d6:	4620      	mov	r0, r4
 803c3d8:	f001 ff58 	bl	803e28c <__lshift>
 803c3dc:	4631      	mov	r1, r6
 803c3de:	4605      	mov	r5, r0
 803c3e0:	f001 ffc0 	bl	803e364 <__mcmp>
 803c3e4:	2800      	cmp	r0, #0
 803c3e6:	dd6a      	ble.n	803c4be <_strtod_l+0x8e6>
 803c3e8:	9904      	ldr	r1, [sp, #16]
 803c3ea:	4a55      	ldr	r2, [pc, #340]	; (803c540 <_strtod_l+0x968>)
 803c3ec:	465b      	mov	r3, fp
 803c3ee:	2900      	cmp	r1, #0
 803c3f0:	f000 8085 	beq.w	803c4fe <_strtod_l+0x926>
 803c3f4:	ea02 010b 	and.w	r1, r2, fp
 803c3f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 803c3fc:	dc7f      	bgt.n	803c4fe <_strtod_l+0x926>
 803c3fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 803c402:	f77f aeaa 	ble.w	803c15a <_strtod_l+0x582>
 803c406:	4a4f      	ldr	r2, [pc, #316]	; (803c544 <_strtod_l+0x96c>)
 803c408:	2300      	movs	r3, #0
 803c40a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 803c40e:	4650      	mov	r0, sl
 803c410:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 803c414:	4659      	mov	r1, fp
 803c416:	f7e4 f8ef 	bl	80205f8 <__aeabi_dmul>
 803c41a:	460b      	mov	r3, r1
 803c41c:	4303      	orrs	r3, r0
 803c41e:	bf08      	it	eq
 803c420:	2322      	moveq	r3, #34	; 0x22
 803c422:	4682      	mov	sl, r0
 803c424:	468b      	mov	fp, r1
 803c426:	bf08      	it	eq
 803c428:	6023      	streq	r3, [r4, #0]
 803c42a:	e62b      	b.n	803c084 <_strtod_l+0x4ac>
 803c42c:	f04f 32ff 	mov.w	r2, #4294967295
 803c430:	fa02 f303 	lsl.w	r3, r2, r3
 803c434:	ea03 0a0a 	and.w	sl, r3, sl
 803c438:	e6de      	b.n	803c1f8 <_strtod_l+0x620>
 803c43a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 803c43e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 803c442:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 803c446:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 803c44a:	fa01 f308 	lsl.w	r3, r1, r8
 803c44e:	930c      	str	r3, [sp, #48]	; 0x30
 803c450:	9111      	str	r1, [sp, #68]	; 0x44
 803c452:	e741      	b.n	803c2d8 <_strtod_l+0x700>
 803c454:	2300      	movs	r3, #0
 803c456:	930c      	str	r3, [sp, #48]	; 0x30
 803c458:	2301      	movs	r3, #1
 803c45a:	9311      	str	r3, [sp, #68]	; 0x44
 803c45c:	e73c      	b.n	803c2d8 <_strtod_l+0x700>
 803c45e:	991e      	ldr	r1, [sp, #120]	; 0x78
 803c460:	4642      	mov	r2, r8
 803c462:	4620      	mov	r0, r4
 803c464:	f001 ff12 	bl	803e28c <__lshift>
 803c468:	901e      	str	r0, [sp, #120]	; 0x78
 803c46a:	2800      	cmp	r0, #0
 803c46c:	f47f af66 	bne.w	803c33c <_strtod_l+0x764>
 803c470:	e5fe      	b.n	803c070 <_strtod_l+0x498>
 803c472:	465f      	mov	r7, fp
 803c474:	d16e      	bne.n	803c554 <_strtod_l+0x97c>
 803c476:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 803c478:	f3cb 0313 	ubfx	r3, fp, #0, #20
 803c47c:	b342      	cbz	r2, 803c4d0 <_strtod_l+0x8f8>
 803c47e:	4a32      	ldr	r2, [pc, #200]	; (803c548 <_strtod_l+0x970>)
 803c480:	4293      	cmp	r3, r2
 803c482:	d128      	bne.n	803c4d6 <_strtod_l+0x8fe>
 803c484:	9b04      	ldr	r3, [sp, #16]
 803c486:	4650      	mov	r0, sl
 803c488:	b1eb      	cbz	r3, 803c4c6 <_strtod_l+0x8ee>
 803c48a:	4a2d      	ldr	r2, [pc, #180]	; (803c540 <_strtod_l+0x968>)
 803c48c:	403a      	ands	r2, r7
 803c48e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 803c492:	f04f 31ff 	mov.w	r1, #4294967295
 803c496:	d819      	bhi.n	803c4cc <_strtod_l+0x8f4>
 803c498:	0d12      	lsrs	r2, r2, #20
 803c49a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 803c49e:	fa01 f303 	lsl.w	r3, r1, r3
 803c4a2:	4298      	cmp	r0, r3
 803c4a4:	d117      	bne.n	803c4d6 <_strtod_l+0x8fe>
 803c4a6:	4b29      	ldr	r3, [pc, #164]	; (803c54c <_strtod_l+0x974>)
 803c4a8:	429f      	cmp	r7, r3
 803c4aa:	d102      	bne.n	803c4b2 <_strtod_l+0x8da>
 803c4ac:	3001      	adds	r0, #1
 803c4ae:	f43f addf 	beq.w	803c070 <_strtod_l+0x498>
 803c4b2:	4b23      	ldr	r3, [pc, #140]	; (803c540 <_strtod_l+0x968>)
 803c4b4:	403b      	ands	r3, r7
 803c4b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 803c4ba:	f04f 0a00 	mov.w	sl, #0
 803c4be:	9b04      	ldr	r3, [sp, #16]
 803c4c0:	2b00      	cmp	r3, #0
 803c4c2:	d1a0      	bne.n	803c406 <_strtod_l+0x82e>
 803c4c4:	e5de      	b.n	803c084 <_strtod_l+0x4ac>
 803c4c6:	f04f 33ff 	mov.w	r3, #4294967295
 803c4ca:	e7ea      	b.n	803c4a2 <_strtod_l+0x8ca>
 803c4cc:	460b      	mov	r3, r1
 803c4ce:	e7e8      	b.n	803c4a2 <_strtod_l+0x8ca>
 803c4d0:	ea53 030a 	orrs.w	r3, r3, sl
 803c4d4:	d088      	beq.n	803c3e8 <_strtod_l+0x810>
 803c4d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 803c4d8:	b1db      	cbz	r3, 803c512 <_strtod_l+0x93a>
 803c4da:	423b      	tst	r3, r7
 803c4dc:	d0ef      	beq.n	803c4be <_strtod_l+0x8e6>
 803c4de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803c4e0:	9a04      	ldr	r2, [sp, #16]
 803c4e2:	4650      	mov	r0, sl
 803c4e4:	4659      	mov	r1, fp
 803c4e6:	b1c3      	cbz	r3, 803c51a <_strtod_l+0x942>
 803c4e8:	f7ff fb59 	bl	803bb9e <sulp>
 803c4ec:	4602      	mov	r2, r0
 803c4ee:	460b      	mov	r3, r1
 803c4f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 803c4f4:	f7e3 feca 	bl	802028c <__adddf3>
 803c4f8:	4682      	mov	sl, r0
 803c4fa:	468b      	mov	fp, r1
 803c4fc:	e7df      	b.n	803c4be <_strtod_l+0x8e6>
 803c4fe:	4013      	ands	r3, r2
 803c500:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 803c504:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 803c508:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 803c50c:	f04f 3aff 	mov.w	sl, #4294967295
 803c510:	e7d5      	b.n	803c4be <_strtod_l+0x8e6>
 803c512:	9b11      	ldr	r3, [sp, #68]	; 0x44
 803c514:	ea13 0f0a 	tst.w	r3, sl
 803c518:	e7e0      	b.n	803c4dc <_strtod_l+0x904>
 803c51a:	f7ff fb40 	bl	803bb9e <sulp>
 803c51e:	4602      	mov	r2, r0
 803c520:	460b      	mov	r3, r1
 803c522:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 803c526:	f7e3 feaf 	bl	8020288 <__aeabi_dsub>
 803c52a:	2200      	movs	r2, #0
 803c52c:	2300      	movs	r3, #0
 803c52e:	4682      	mov	sl, r0
 803c530:	468b      	mov	fp, r1
 803c532:	f7e4 fac9 	bl	8020ac8 <__aeabi_dcmpeq>
 803c536:	2800      	cmp	r0, #0
 803c538:	d0c1      	beq.n	803c4be <_strtod_l+0x8e6>
 803c53a:	e60e      	b.n	803c15a <_strtod_l+0x582>
 803c53c:	fffffc02 	.word	0xfffffc02
 803c540:	7ff00000 	.word	0x7ff00000
 803c544:	39500000 	.word	0x39500000
 803c548:	000fffff 	.word	0x000fffff
 803c54c:	7fefffff 	.word	0x7fefffff
 803c550:	08040090 	.word	0x08040090
 803c554:	4631      	mov	r1, r6
 803c556:	4628      	mov	r0, r5
 803c558:	f002 f880 	bl	803e65c <__ratio>
 803c55c:	ec59 8b10 	vmov	r8, r9, d0
 803c560:	ee10 0a10 	vmov	r0, s0
 803c564:	2200      	movs	r2, #0
 803c566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 803c56a:	4649      	mov	r1, r9
 803c56c:	f7e4 fac0 	bl	8020af0 <__aeabi_dcmple>
 803c570:	2800      	cmp	r0, #0
 803c572:	d07c      	beq.n	803c66e <_strtod_l+0xa96>
 803c574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803c576:	2b00      	cmp	r3, #0
 803c578:	d04c      	beq.n	803c614 <_strtod_l+0xa3c>
 803c57a:	4b95      	ldr	r3, [pc, #596]	; (803c7d0 <_strtod_l+0xbf8>)
 803c57c:	2200      	movs	r2, #0
 803c57e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 803c582:	f8df 924c 	ldr.w	r9, [pc, #588]	; 803c7d0 <_strtod_l+0xbf8>
 803c586:	f04f 0800 	mov.w	r8, #0
 803c58a:	4b92      	ldr	r3, [pc, #584]	; (803c7d4 <_strtod_l+0xbfc>)
 803c58c:	403b      	ands	r3, r7
 803c58e:	9311      	str	r3, [sp, #68]	; 0x44
 803c590:	9a11      	ldr	r2, [sp, #68]	; 0x44
 803c592:	4b91      	ldr	r3, [pc, #580]	; (803c7d8 <_strtod_l+0xc00>)
 803c594:	429a      	cmp	r2, r3
 803c596:	f040 80b2 	bne.w	803c6fe <_strtod_l+0xb26>
 803c59a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 803c59e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 803c5a2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 803c5a6:	ec4b ab10 	vmov	d0, sl, fp
 803c5aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 803c5ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 803c5b2:	f001 ff7b 	bl	803e4ac <__ulp>
 803c5b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 803c5ba:	ec53 2b10 	vmov	r2, r3, d0
 803c5be:	f7e4 f81b 	bl	80205f8 <__aeabi_dmul>
 803c5c2:	4652      	mov	r2, sl
 803c5c4:	465b      	mov	r3, fp
 803c5c6:	f7e3 fe61 	bl	802028c <__adddf3>
 803c5ca:	460b      	mov	r3, r1
 803c5cc:	4981      	ldr	r1, [pc, #516]	; (803c7d4 <_strtod_l+0xbfc>)
 803c5ce:	4a83      	ldr	r2, [pc, #524]	; (803c7dc <_strtod_l+0xc04>)
 803c5d0:	4019      	ands	r1, r3
 803c5d2:	4291      	cmp	r1, r2
 803c5d4:	4682      	mov	sl, r0
 803c5d6:	d95e      	bls.n	803c696 <_strtod_l+0xabe>
 803c5d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 803c5da:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 803c5de:	4293      	cmp	r3, r2
 803c5e0:	d103      	bne.n	803c5ea <_strtod_l+0xa12>
 803c5e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803c5e4:	3301      	adds	r3, #1
 803c5e6:	f43f ad43 	beq.w	803c070 <_strtod_l+0x498>
 803c5ea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 803c7e8 <_strtod_l+0xc10>
 803c5ee:	f04f 3aff 	mov.w	sl, #4294967295
 803c5f2:	991e      	ldr	r1, [sp, #120]	; 0x78
 803c5f4:	4620      	mov	r0, r4
 803c5f6:	f001 fc2d 	bl	803de54 <_Bfree>
 803c5fa:	9907      	ldr	r1, [sp, #28]
 803c5fc:	4620      	mov	r0, r4
 803c5fe:	f001 fc29 	bl	803de54 <_Bfree>
 803c602:	4631      	mov	r1, r6
 803c604:	4620      	mov	r0, r4
 803c606:	f001 fc25 	bl	803de54 <_Bfree>
 803c60a:	4629      	mov	r1, r5
 803c60c:	4620      	mov	r0, r4
 803c60e:	f001 fc21 	bl	803de54 <_Bfree>
 803c612:	e613      	b.n	803c23c <_strtod_l+0x664>
 803c614:	f1ba 0f00 	cmp.w	sl, #0
 803c618:	d11b      	bne.n	803c652 <_strtod_l+0xa7a>
 803c61a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 803c61e:	b9f3      	cbnz	r3, 803c65e <_strtod_l+0xa86>
 803c620:	4b6b      	ldr	r3, [pc, #428]	; (803c7d0 <_strtod_l+0xbf8>)
 803c622:	2200      	movs	r2, #0
 803c624:	4640      	mov	r0, r8
 803c626:	4649      	mov	r1, r9
 803c628:	f7e4 fa58 	bl	8020adc <__aeabi_dcmplt>
 803c62c:	b9d0      	cbnz	r0, 803c664 <_strtod_l+0xa8c>
 803c62e:	4640      	mov	r0, r8
 803c630:	4649      	mov	r1, r9
 803c632:	4b6b      	ldr	r3, [pc, #428]	; (803c7e0 <_strtod_l+0xc08>)
 803c634:	2200      	movs	r2, #0
 803c636:	f7e3 ffdf 	bl	80205f8 <__aeabi_dmul>
 803c63a:	4680      	mov	r8, r0
 803c63c:	4689      	mov	r9, r1
 803c63e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 803c642:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 803c646:	931b      	str	r3, [sp, #108]	; 0x6c
 803c648:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 803c64c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 803c650:	e79b      	b.n	803c58a <_strtod_l+0x9b2>
 803c652:	f1ba 0f01 	cmp.w	sl, #1
 803c656:	d102      	bne.n	803c65e <_strtod_l+0xa86>
 803c658:	2f00      	cmp	r7, #0
 803c65a:	f43f ad7e 	beq.w	803c15a <_strtod_l+0x582>
 803c65e:	4b61      	ldr	r3, [pc, #388]	; (803c7e4 <_strtod_l+0xc0c>)
 803c660:	2200      	movs	r2, #0
 803c662:	e78c      	b.n	803c57e <_strtod_l+0x9a6>
 803c664:	f8df 9178 	ldr.w	r9, [pc, #376]	; 803c7e0 <_strtod_l+0xc08>
 803c668:	f04f 0800 	mov.w	r8, #0
 803c66c:	e7e7      	b.n	803c63e <_strtod_l+0xa66>
 803c66e:	4b5c      	ldr	r3, [pc, #368]	; (803c7e0 <_strtod_l+0xc08>)
 803c670:	4640      	mov	r0, r8
 803c672:	4649      	mov	r1, r9
 803c674:	2200      	movs	r2, #0
 803c676:	f7e3 ffbf 	bl	80205f8 <__aeabi_dmul>
 803c67a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803c67c:	4680      	mov	r8, r0
 803c67e:	4689      	mov	r9, r1
 803c680:	b933      	cbnz	r3, 803c690 <_strtod_l+0xab8>
 803c682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 803c686:	9012      	str	r0, [sp, #72]	; 0x48
 803c688:	9313      	str	r3, [sp, #76]	; 0x4c
 803c68a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 803c68e:	e7dd      	b.n	803c64c <_strtod_l+0xa74>
 803c690:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 803c694:	e7f9      	b.n	803c68a <_strtod_l+0xab2>
 803c696:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 803c69a:	9b04      	ldr	r3, [sp, #16]
 803c69c:	2b00      	cmp	r3, #0
 803c69e:	d1a8      	bne.n	803c5f2 <_strtod_l+0xa1a>
 803c6a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 803c6a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 803c6a6:	0d1b      	lsrs	r3, r3, #20
 803c6a8:	051b      	lsls	r3, r3, #20
 803c6aa:	429a      	cmp	r2, r3
 803c6ac:	d1a1      	bne.n	803c5f2 <_strtod_l+0xa1a>
 803c6ae:	4640      	mov	r0, r8
 803c6b0:	4649      	mov	r1, r9
 803c6b2:	f7e4 fb01 	bl	8020cb8 <__aeabi_d2lz>
 803c6b6:	f7e3 ff71 	bl	802059c <__aeabi_l2d>
 803c6ba:	4602      	mov	r2, r0
 803c6bc:	460b      	mov	r3, r1
 803c6be:	4640      	mov	r0, r8
 803c6c0:	4649      	mov	r1, r9
 803c6c2:	f7e3 fde1 	bl	8020288 <__aeabi_dsub>
 803c6c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 803c6c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 803c6cc:	ea43 030a 	orr.w	r3, r3, sl
 803c6d0:	4313      	orrs	r3, r2
 803c6d2:	4680      	mov	r8, r0
 803c6d4:	4689      	mov	r9, r1
 803c6d6:	d053      	beq.n	803c780 <_strtod_l+0xba8>
 803c6d8:	a335      	add	r3, pc, #212	; (adr r3, 803c7b0 <_strtod_l+0xbd8>)
 803c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 803c6de:	f7e4 f9fd 	bl	8020adc <__aeabi_dcmplt>
 803c6e2:	2800      	cmp	r0, #0
 803c6e4:	f47f acce 	bne.w	803c084 <_strtod_l+0x4ac>
 803c6e8:	a333      	add	r3, pc, #204	; (adr r3, 803c7b8 <_strtod_l+0xbe0>)
 803c6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 803c6ee:	4640      	mov	r0, r8
 803c6f0:	4649      	mov	r1, r9
 803c6f2:	f7e4 fa11 	bl	8020b18 <__aeabi_dcmpgt>
 803c6f6:	2800      	cmp	r0, #0
 803c6f8:	f43f af7b 	beq.w	803c5f2 <_strtod_l+0xa1a>
 803c6fc:	e4c2      	b.n	803c084 <_strtod_l+0x4ac>
 803c6fe:	9b04      	ldr	r3, [sp, #16]
 803c700:	b333      	cbz	r3, 803c750 <_strtod_l+0xb78>
 803c702:	9b11      	ldr	r3, [sp, #68]	; 0x44
 803c704:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 803c708:	d822      	bhi.n	803c750 <_strtod_l+0xb78>
 803c70a:	a32d      	add	r3, pc, #180	; (adr r3, 803c7c0 <_strtod_l+0xbe8>)
 803c70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 803c710:	4640      	mov	r0, r8
 803c712:	4649      	mov	r1, r9
 803c714:	f7e4 f9ec 	bl	8020af0 <__aeabi_dcmple>
 803c718:	b1a0      	cbz	r0, 803c744 <_strtod_l+0xb6c>
 803c71a:	4649      	mov	r1, r9
 803c71c:	4640      	mov	r0, r8
 803c71e:	f7e4 fa43 	bl	8020ba8 <__aeabi_d2uiz>
 803c722:	2801      	cmp	r0, #1
 803c724:	bf38      	it	cc
 803c726:	2001      	movcc	r0, #1
 803c728:	f7e3 feec 	bl	8020504 <__aeabi_ui2d>
 803c72c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803c72e:	4680      	mov	r8, r0
 803c730:	4689      	mov	r9, r1
 803c732:	bb13      	cbnz	r3, 803c77a <_strtod_l+0xba2>
 803c734:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 803c738:	9014      	str	r0, [sp, #80]	; 0x50
 803c73a:	9315      	str	r3, [sp, #84]	; 0x54
 803c73c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 803c740:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 803c744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 803c746:	9a11      	ldr	r2, [sp, #68]	; 0x44
 803c748:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 803c74c:	1a9b      	subs	r3, r3, r2
 803c74e:	930d      	str	r3, [sp, #52]	; 0x34
 803c750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 803c754:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 803c758:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 803c75c:	f001 fea6 	bl	803e4ac <__ulp>
 803c760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 803c764:	ec53 2b10 	vmov	r2, r3, d0
 803c768:	f7e3 ff46 	bl	80205f8 <__aeabi_dmul>
 803c76c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 803c770:	f7e3 fd8c 	bl	802028c <__adddf3>
 803c774:	4682      	mov	sl, r0
 803c776:	468b      	mov	fp, r1
 803c778:	e78f      	b.n	803c69a <_strtod_l+0xac2>
 803c77a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 803c77e:	e7dd      	b.n	803c73c <_strtod_l+0xb64>
 803c780:	a311      	add	r3, pc, #68	; (adr r3, 803c7c8 <_strtod_l+0xbf0>)
 803c782:	e9d3 2300 	ldrd	r2, r3, [r3]
 803c786:	f7e4 f9a9 	bl	8020adc <__aeabi_dcmplt>
 803c78a:	e7b4      	b.n	803c6f6 <_strtod_l+0xb1e>
 803c78c:	2300      	movs	r3, #0
 803c78e:	930e      	str	r3, [sp, #56]	; 0x38
 803c790:	9a19      	ldr	r2, [sp, #100]	; 0x64
 803c792:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803c794:	6013      	str	r3, [r2, #0]
 803c796:	f7ff ba65 	b.w	803bc64 <_strtod_l+0x8c>
 803c79a:	2b65      	cmp	r3, #101	; 0x65
 803c79c:	f43f ab5d 	beq.w	803be5a <_strtod_l+0x282>
 803c7a0:	2b45      	cmp	r3, #69	; 0x45
 803c7a2:	f43f ab5a 	beq.w	803be5a <_strtod_l+0x282>
 803c7a6:	2201      	movs	r2, #1
 803c7a8:	f7ff bb92 	b.w	803bed0 <_strtod_l+0x2f8>
 803c7ac:	f3af 8000 	nop.w
 803c7b0:	94a03595 	.word	0x94a03595
 803c7b4:	3fdfffff 	.word	0x3fdfffff
 803c7b8:	35afe535 	.word	0x35afe535
 803c7bc:	3fe00000 	.word	0x3fe00000
 803c7c0:	ffc00000 	.word	0xffc00000
 803c7c4:	41dfffff 	.word	0x41dfffff
 803c7c8:	94a03595 	.word	0x94a03595
 803c7cc:	3fcfffff 	.word	0x3fcfffff
 803c7d0:	3ff00000 	.word	0x3ff00000
 803c7d4:	7ff00000 	.word	0x7ff00000
 803c7d8:	7fe00000 	.word	0x7fe00000
 803c7dc:	7c9fffff 	.word	0x7c9fffff
 803c7e0:	3fe00000 	.word	0x3fe00000
 803c7e4:	bff00000 	.word	0xbff00000
 803c7e8:	7fefffff 	.word	0x7fefffff

0803c7ec <_strtod_r>:
 803c7ec:	4b01      	ldr	r3, [pc, #4]	; (803c7f4 <_strtod_r+0x8>)
 803c7ee:	f7ff b9f3 	b.w	803bbd8 <_strtod_l>
 803c7f2:	bf00      	nop
 803c7f4:	20000094 	.word	0x20000094

0803c7f8 <_strtol_l.isra.0>:
 803c7f8:	2b01      	cmp	r3, #1
 803c7fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803c7fe:	d001      	beq.n	803c804 <_strtol_l.isra.0+0xc>
 803c800:	2b24      	cmp	r3, #36	; 0x24
 803c802:	d906      	bls.n	803c812 <_strtol_l.isra.0+0x1a>
 803c804:	f7fd ffbc 	bl	803a780 <__errno>
 803c808:	2316      	movs	r3, #22
 803c80a:	6003      	str	r3, [r0, #0]
 803c80c:	2000      	movs	r0, #0
 803c80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c812:	4f3a      	ldr	r7, [pc, #232]	; (803c8fc <_strtol_l.isra.0+0x104>)
 803c814:	468e      	mov	lr, r1
 803c816:	4676      	mov	r6, lr
 803c818:	f81e 4b01 	ldrb.w	r4, [lr], #1
 803c81c:	5de5      	ldrb	r5, [r4, r7]
 803c81e:	f015 0508 	ands.w	r5, r5, #8
 803c822:	d1f8      	bne.n	803c816 <_strtol_l.isra.0+0x1e>
 803c824:	2c2d      	cmp	r4, #45	; 0x2d
 803c826:	d134      	bne.n	803c892 <_strtol_l.isra.0+0x9a>
 803c828:	f89e 4000 	ldrb.w	r4, [lr]
 803c82c:	f04f 0801 	mov.w	r8, #1
 803c830:	f106 0e02 	add.w	lr, r6, #2
 803c834:	2b00      	cmp	r3, #0
 803c836:	d05c      	beq.n	803c8f2 <_strtol_l.isra.0+0xfa>
 803c838:	2b10      	cmp	r3, #16
 803c83a:	d10c      	bne.n	803c856 <_strtol_l.isra.0+0x5e>
 803c83c:	2c30      	cmp	r4, #48	; 0x30
 803c83e:	d10a      	bne.n	803c856 <_strtol_l.isra.0+0x5e>
 803c840:	f89e 4000 	ldrb.w	r4, [lr]
 803c844:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 803c848:	2c58      	cmp	r4, #88	; 0x58
 803c84a:	d14d      	bne.n	803c8e8 <_strtol_l.isra.0+0xf0>
 803c84c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 803c850:	2310      	movs	r3, #16
 803c852:	f10e 0e02 	add.w	lr, lr, #2
 803c856:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 803c85a:	f10c 3cff 	add.w	ip, ip, #4294967295
 803c85e:	2600      	movs	r6, #0
 803c860:	fbbc f9f3 	udiv	r9, ip, r3
 803c864:	4635      	mov	r5, r6
 803c866:	fb03 ca19 	mls	sl, r3, r9, ip
 803c86a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 803c86e:	2f09      	cmp	r7, #9
 803c870:	d818      	bhi.n	803c8a4 <_strtol_l.isra.0+0xac>
 803c872:	463c      	mov	r4, r7
 803c874:	42a3      	cmp	r3, r4
 803c876:	dd24      	ble.n	803c8c2 <_strtol_l.isra.0+0xca>
 803c878:	2e00      	cmp	r6, #0
 803c87a:	db1f      	blt.n	803c8bc <_strtol_l.isra.0+0xc4>
 803c87c:	45a9      	cmp	r9, r5
 803c87e:	d31d      	bcc.n	803c8bc <_strtol_l.isra.0+0xc4>
 803c880:	d101      	bne.n	803c886 <_strtol_l.isra.0+0x8e>
 803c882:	45a2      	cmp	sl, r4
 803c884:	db1a      	blt.n	803c8bc <_strtol_l.isra.0+0xc4>
 803c886:	fb05 4503 	mla	r5, r5, r3, r4
 803c88a:	2601      	movs	r6, #1
 803c88c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 803c890:	e7eb      	b.n	803c86a <_strtol_l.isra.0+0x72>
 803c892:	2c2b      	cmp	r4, #43	; 0x2b
 803c894:	bf08      	it	eq
 803c896:	f89e 4000 	ldrbeq.w	r4, [lr]
 803c89a:	46a8      	mov	r8, r5
 803c89c:	bf08      	it	eq
 803c89e:	f106 0e02 	addeq.w	lr, r6, #2
 803c8a2:	e7c7      	b.n	803c834 <_strtol_l.isra.0+0x3c>
 803c8a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 803c8a8:	2f19      	cmp	r7, #25
 803c8aa:	d801      	bhi.n	803c8b0 <_strtol_l.isra.0+0xb8>
 803c8ac:	3c37      	subs	r4, #55	; 0x37
 803c8ae:	e7e1      	b.n	803c874 <_strtol_l.isra.0+0x7c>
 803c8b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 803c8b4:	2f19      	cmp	r7, #25
 803c8b6:	d804      	bhi.n	803c8c2 <_strtol_l.isra.0+0xca>
 803c8b8:	3c57      	subs	r4, #87	; 0x57
 803c8ba:	e7db      	b.n	803c874 <_strtol_l.isra.0+0x7c>
 803c8bc:	f04f 36ff 	mov.w	r6, #4294967295
 803c8c0:	e7e4      	b.n	803c88c <_strtol_l.isra.0+0x94>
 803c8c2:	2e00      	cmp	r6, #0
 803c8c4:	da05      	bge.n	803c8d2 <_strtol_l.isra.0+0xda>
 803c8c6:	2322      	movs	r3, #34	; 0x22
 803c8c8:	6003      	str	r3, [r0, #0]
 803c8ca:	4665      	mov	r5, ip
 803c8cc:	b942      	cbnz	r2, 803c8e0 <_strtol_l.isra.0+0xe8>
 803c8ce:	4628      	mov	r0, r5
 803c8d0:	e79d      	b.n	803c80e <_strtol_l.isra.0+0x16>
 803c8d2:	f1b8 0f00 	cmp.w	r8, #0
 803c8d6:	d000      	beq.n	803c8da <_strtol_l.isra.0+0xe2>
 803c8d8:	426d      	negs	r5, r5
 803c8da:	2a00      	cmp	r2, #0
 803c8dc:	d0f7      	beq.n	803c8ce <_strtol_l.isra.0+0xd6>
 803c8de:	b10e      	cbz	r6, 803c8e4 <_strtol_l.isra.0+0xec>
 803c8e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 803c8e4:	6011      	str	r1, [r2, #0]
 803c8e6:	e7f2      	b.n	803c8ce <_strtol_l.isra.0+0xd6>
 803c8e8:	2430      	movs	r4, #48	; 0x30
 803c8ea:	2b00      	cmp	r3, #0
 803c8ec:	d1b3      	bne.n	803c856 <_strtol_l.isra.0+0x5e>
 803c8ee:	2308      	movs	r3, #8
 803c8f0:	e7b1      	b.n	803c856 <_strtol_l.isra.0+0x5e>
 803c8f2:	2c30      	cmp	r4, #48	; 0x30
 803c8f4:	d0a4      	beq.n	803c840 <_strtol_l.isra.0+0x48>
 803c8f6:	230a      	movs	r3, #10
 803c8f8:	e7ad      	b.n	803c856 <_strtol_l.isra.0+0x5e>
 803c8fa:	bf00      	nop
 803c8fc:	080400b9 	.word	0x080400b9

0803c900 <_strtol_r>:
 803c900:	f7ff bf7a 	b.w	803c7f8 <_strtol_l.isra.0>

0803c904 <_write_r>:
 803c904:	b538      	push	{r3, r4, r5, lr}
 803c906:	4d07      	ldr	r5, [pc, #28]	; (803c924 <_write_r+0x20>)
 803c908:	4604      	mov	r4, r0
 803c90a:	4608      	mov	r0, r1
 803c90c:	4611      	mov	r1, r2
 803c90e:	2200      	movs	r2, #0
 803c910:	602a      	str	r2, [r5, #0]
 803c912:	461a      	mov	r2, r3
 803c914:	f7f5 fecf 	bl	80326b6 <_write>
 803c918:	1c43      	adds	r3, r0, #1
 803c91a:	d102      	bne.n	803c922 <_write_r+0x1e>
 803c91c:	682b      	ldr	r3, [r5, #0]
 803c91e:	b103      	cbz	r3, 803c922 <_write_r+0x1e>
 803c920:	6023      	str	r3, [r4, #0]
 803c922:	bd38      	pop	{r3, r4, r5, pc}
 803c924:	20000b80 	.word	0x20000b80

0803c928 <_close_r>:
 803c928:	b538      	push	{r3, r4, r5, lr}
 803c92a:	4d06      	ldr	r5, [pc, #24]	; (803c944 <_close_r+0x1c>)
 803c92c:	2300      	movs	r3, #0
 803c92e:	4604      	mov	r4, r0
 803c930:	4608      	mov	r0, r1
 803c932:	602b      	str	r3, [r5, #0]
 803c934:	f7f5 fedb 	bl	80326ee <_close>
 803c938:	1c43      	adds	r3, r0, #1
 803c93a:	d102      	bne.n	803c942 <_close_r+0x1a>
 803c93c:	682b      	ldr	r3, [r5, #0]
 803c93e:	b103      	cbz	r3, 803c942 <_close_r+0x1a>
 803c940:	6023      	str	r3, [r4, #0]
 803c942:	bd38      	pop	{r3, r4, r5, pc}
 803c944:	20000b80 	.word	0x20000b80

0803c948 <quorem>:
 803c948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803c94c:	6903      	ldr	r3, [r0, #16]
 803c94e:	690c      	ldr	r4, [r1, #16]
 803c950:	42a3      	cmp	r3, r4
 803c952:	4607      	mov	r7, r0
 803c954:	f2c0 8081 	blt.w	803ca5a <quorem+0x112>
 803c958:	3c01      	subs	r4, #1
 803c95a:	f101 0814 	add.w	r8, r1, #20
 803c95e:	f100 0514 	add.w	r5, r0, #20
 803c962:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 803c966:	9301      	str	r3, [sp, #4]
 803c968:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 803c96c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 803c970:	3301      	adds	r3, #1
 803c972:	429a      	cmp	r2, r3
 803c974:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 803c978:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 803c97c:	fbb2 f6f3 	udiv	r6, r2, r3
 803c980:	d331      	bcc.n	803c9e6 <quorem+0x9e>
 803c982:	f04f 0e00 	mov.w	lr, #0
 803c986:	4640      	mov	r0, r8
 803c988:	46ac      	mov	ip, r5
 803c98a:	46f2      	mov	sl, lr
 803c98c:	f850 2b04 	ldr.w	r2, [r0], #4
 803c990:	b293      	uxth	r3, r2
 803c992:	fb06 e303 	mla	r3, r6, r3, lr
 803c996:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 803c99a:	b29b      	uxth	r3, r3
 803c99c:	ebaa 0303 	sub.w	r3, sl, r3
 803c9a0:	0c12      	lsrs	r2, r2, #16
 803c9a2:	f8dc a000 	ldr.w	sl, [ip]
 803c9a6:	fb06 e202 	mla	r2, r6, r2, lr
 803c9aa:	fa13 f38a 	uxtah	r3, r3, sl
 803c9ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 803c9b2:	fa1f fa82 	uxth.w	sl, r2
 803c9b6:	f8dc 2000 	ldr.w	r2, [ip]
 803c9ba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 803c9be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 803c9c2:	b29b      	uxth	r3, r3
 803c9c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 803c9c8:	4581      	cmp	r9, r0
 803c9ca:	f84c 3b04 	str.w	r3, [ip], #4
 803c9ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 803c9d2:	d2db      	bcs.n	803c98c <quorem+0x44>
 803c9d4:	f855 300b 	ldr.w	r3, [r5, fp]
 803c9d8:	b92b      	cbnz	r3, 803c9e6 <quorem+0x9e>
 803c9da:	9b01      	ldr	r3, [sp, #4]
 803c9dc:	3b04      	subs	r3, #4
 803c9de:	429d      	cmp	r5, r3
 803c9e0:	461a      	mov	r2, r3
 803c9e2:	d32e      	bcc.n	803ca42 <quorem+0xfa>
 803c9e4:	613c      	str	r4, [r7, #16]
 803c9e6:	4638      	mov	r0, r7
 803c9e8:	f001 fcbc 	bl	803e364 <__mcmp>
 803c9ec:	2800      	cmp	r0, #0
 803c9ee:	db24      	blt.n	803ca3a <quorem+0xf2>
 803c9f0:	3601      	adds	r6, #1
 803c9f2:	4628      	mov	r0, r5
 803c9f4:	f04f 0c00 	mov.w	ip, #0
 803c9f8:	f858 2b04 	ldr.w	r2, [r8], #4
 803c9fc:	f8d0 e000 	ldr.w	lr, [r0]
 803ca00:	b293      	uxth	r3, r2
 803ca02:	ebac 0303 	sub.w	r3, ip, r3
 803ca06:	0c12      	lsrs	r2, r2, #16
 803ca08:	fa13 f38e 	uxtah	r3, r3, lr
 803ca0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 803ca10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 803ca14:	b29b      	uxth	r3, r3
 803ca16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 803ca1a:	45c1      	cmp	r9, r8
 803ca1c:	f840 3b04 	str.w	r3, [r0], #4
 803ca20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 803ca24:	d2e8      	bcs.n	803c9f8 <quorem+0xb0>
 803ca26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 803ca2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 803ca2e:	b922      	cbnz	r2, 803ca3a <quorem+0xf2>
 803ca30:	3b04      	subs	r3, #4
 803ca32:	429d      	cmp	r5, r3
 803ca34:	461a      	mov	r2, r3
 803ca36:	d30a      	bcc.n	803ca4e <quorem+0x106>
 803ca38:	613c      	str	r4, [r7, #16]
 803ca3a:	4630      	mov	r0, r6
 803ca3c:	b003      	add	sp, #12
 803ca3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ca42:	6812      	ldr	r2, [r2, #0]
 803ca44:	3b04      	subs	r3, #4
 803ca46:	2a00      	cmp	r2, #0
 803ca48:	d1cc      	bne.n	803c9e4 <quorem+0x9c>
 803ca4a:	3c01      	subs	r4, #1
 803ca4c:	e7c7      	b.n	803c9de <quorem+0x96>
 803ca4e:	6812      	ldr	r2, [r2, #0]
 803ca50:	3b04      	subs	r3, #4
 803ca52:	2a00      	cmp	r2, #0
 803ca54:	d1f0      	bne.n	803ca38 <quorem+0xf0>
 803ca56:	3c01      	subs	r4, #1
 803ca58:	e7eb      	b.n	803ca32 <quorem+0xea>
 803ca5a:	2000      	movs	r0, #0
 803ca5c:	e7ee      	b.n	803ca3c <quorem+0xf4>
	...

0803ca60 <_dtoa_r>:
 803ca60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803ca64:	ed2d 8b02 	vpush	{d8}
 803ca68:	ec57 6b10 	vmov	r6, r7, d0
 803ca6c:	b095      	sub	sp, #84	; 0x54
 803ca6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 803ca70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 803ca74:	9105      	str	r1, [sp, #20]
 803ca76:	e9cd 6702 	strd	r6, r7, [sp, #8]
 803ca7a:	4604      	mov	r4, r0
 803ca7c:	9209      	str	r2, [sp, #36]	; 0x24
 803ca7e:	930f      	str	r3, [sp, #60]	; 0x3c
 803ca80:	b975      	cbnz	r5, 803caa0 <_dtoa_r+0x40>
 803ca82:	2010      	movs	r0, #16
 803ca84:	f001 f980 	bl	803dd88 <malloc>
 803ca88:	4602      	mov	r2, r0
 803ca8a:	6260      	str	r0, [r4, #36]	; 0x24
 803ca8c:	b920      	cbnz	r0, 803ca98 <_dtoa_r+0x38>
 803ca8e:	4bb2      	ldr	r3, [pc, #712]	; (803cd58 <_dtoa_r+0x2f8>)
 803ca90:	21ea      	movs	r1, #234	; 0xea
 803ca92:	48b2      	ldr	r0, [pc, #712]	; (803cd5c <_dtoa_r+0x2fc>)
 803ca94:	f001 ffee 	bl	803ea74 <__assert_func>
 803ca98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 803ca9c:	6005      	str	r5, [r0, #0]
 803ca9e:	60c5      	str	r5, [r0, #12]
 803caa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 803caa2:	6819      	ldr	r1, [r3, #0]
 803caa4:	b151      	cbz	r1, 803cabc <_dtoa_r+0x5c>
 803caa6:	685a      	ldr	r2, [r3, #4]
 803caa8:	604a      	str	r2, [r1, #4]
 803caaa:	2301      	movs	r3, #1
 803caac:	4093      	lsls	r3, r2
 803caae:	608b      	str	r3, [r1, #8]
 803cab0:	4620      	mov	r0, r4
 803cab2:	f001 f9cf 	bl	803de54 <_Bfree>
 803cab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 803cab8:	2200      	movs	r2, #0
 803caba:	601a      	str	r2, [r3, #0]
 803cabc:	1e3b      	subs	r3, r7, #0
 803cabe:	bfb9      	ittee	lt
 803cac0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 803cac4:	9303      	strlt	r3, [sp, #12]
 803cac6:	2300      	movge	r3, #0
 803cac8:	f8c8 3000 	strge.w	r3, [r8]
 803cacc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 803cad0:	4ba3      	ldr	r3, [pc, #652]	; (803cd60 <_dtoa_r+0x300>)
 803cad2:	bfbc      	itt	lt
 803cad4:	2201      	movlt	r2, #1
 803cad6:	f8c8 2000 	strlt.w	r2, [r8]
 803cada:	ea33 0309 	bics.w	r3, r3, r9
 803cade:	d11b      	bne.n	803cb18 <_dtoa_r+0xb8>
 803cae0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 803cae2:	f242 730f 	movw	r3, #9999	; 0x270f
 803cae6:	6013      	str	r3, [r2, #0]
 803cae8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 803caec:	4333      	orrs	r3, r6
 803caee:	f000 857a 	beq.w	803d5e6 <_dtoa_r+0xb86>
 803caf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 803caf4:	b963      	cbnz	r3, 803cb10 <_dtoa_r+0xb0>
 803caf6:	4b9b      	ldr	r3, [pc, #620]	; (803cd64 <_dtoa_r+0x304>)
 803caf8:	e024      	b.n	803cb44 <_dtoa_r+0xe4>
 803cafa:	4b9b      	ldr	r3, [pc, #620]	; (803cd68 <_dtoa_r+0x308>)
 803cafc:	9300      	str	r3, [sp, #0]
 803cafe:	3308      	adds	r3, #8
 803cb00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 803cb02:	6013      	str	r3, [r2, #0]
 803cb04:	9800      	ldr	r0, [sp, #0]
 803cb06:	b015      	add	sp, #84	; 0x54
 803cb08:	ecbd 8b02 	vpop	{d8}
 803cb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803cb10:	4b94      	ldr	r3, [pc, #592]	; (803cd64 <_dtoa_r+0x304>)
 803cb12:	9300      	str	r3, [sp, #0]
 803cb14:	3303      	adds	r3, #3
 803cb16:	e7f3      	b.n	803cb00 <_dtoa_r+0xa0>
 803cb18:	ed9d 7b02 	vldr	d7, [sp, #8]
 803cb1c:	2200      	movs	r2, #0
 803cb1e:	ec51 0b17 	vmov	r0, r1, d7
 803cb22:	2300      	movs	r3, #0
 803cb24:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 803cb28:	f7e3 ffce 	bl	8020ac8 <__aeabi_dcmpeq>
 803cb2c:	4680      	mov	r8, r0
 803cb2e:	b158      	cbz	r0, 803cb48 <_dtoa_r+0xe8>
 803cb30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 803cb32:	2301      	movs	r3, #1
 803cb34:	6013      	str	r3, [r2, #0]
 803cb36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 803cb38:	2b00      	cmp	r3, #0
 803cb3a:	f000 8551 	beq.w	803d5e0 <_dtoa_r+0xb80>
 803cb3e:	488b      	ldr	r0, [pc, #556]	; (803cd6c <_dtoa_r+0x30c>)
 803cb40:	6018      	str	r0, [r3, #0]
 803cb42:	1e43      	subs	r3, r0, #1
 803cb44:	9300      	str	r3, [sp, #0]
 803cb46:	e7dd      	b.n	803cb04 <_dtoa_r+0xa4>
 803cb48:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 803cb4c:	aa12      	add	r2, sp, #72	; 0x48
 803cb4e:	a913      	add	r1, sp, #76	; 0x4c
 803cb50:	4620      	mov	r0, r4
 803cb52:	f001 fd27 	bl	803e5a4 <__d2b>
 803cb56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 803cb5a:	4683      	mov	fp, r0
 803cb5c:	2d00      	cmp	r5, #0
 803cb5e:	d07c      	beq.n	803cc5a <_dtoa_r+0x1fa>
 803cb60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 803cb62:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 803cb66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803cb6a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 803cb6e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 803cb72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 803cb76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 803cb7a:	4b7d      	ldr	r3, [pc, #500]	; (803cd70 <_dtoa_r+0x310>)
 803cb7c:	2200      	movs	r2, #0
 803cb7e:	4630      	mov	r0, r6
 803cb80:	4639      	mov	r1, r7
 803cb82:	f7e3 fb81 	bl	8020288 <__aeabi_dsub>
 803cb86:	a36e      	add	r3, pc, #440	; (adr r3, 803cd40 <_dtoa_r+0x2e0>)
 803cb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 803cb8c:	f7e3 fd34 	bl	80205f8 <__aeabi_dmul>
 803cb90:	a36d      	add	r3, pc, #436	; (adr r3, 803cd48 <_dtoa_r+0x2e8>)
 803cb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 803cb96:	f7e3 fb79 	bl	802028c <__adddf3>
 803cb9a:	4606      	mov	r6, r0
 803cb9c:	4628      	mov	r0, r5
 803cb9e:	460f      	mov	r7, r1
 803cba0:	f7e3 fcc0 	bl	8020524 <__aeabi_i2d>
 803cba4:	a36a      	add	r3, pc, #424	; (adr r3, 803cd50 <_dtoa_r+0x2f0>)
 803cba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 803cbaa:	f7e3 fd25 	bl	80205f8 <__aeabi_dmul>
 803cbae:	4602      	mov	r2, r0
 803cbb0:	460b      	mov	r3, r1
 803cbb2:	4630      	mov	r0, r6
 803cbb4:	4639      	mov	r1, r7
 803cbb6:	f7e3 fb69 	bl	802028c <__adddf3>
 803cbba:	4606      	mov	r6, r0
 803cbbc:	460f      	mov	r7, r1
 803cbbe:	f7e3 ffcb 	bl	8020b58 <__aeabi_d2iz>
 803cbc2:	2200      	movs	r2, #0
 803cbc4:	4682      	mov	sl, r0
 803cbc6:	2300      	movs	r3, #0
 803cbc8:	4630      	mov	r0, r6
 803cbca:	4639      	mov	r1, r7
 803cbcc:	f7e3 ff86 	bl	8020adc <__aeabi_dcmplt>
 803cbd0:	b148      	cbz	r0, 803cbe6 <_dtoa_r+0x186>
 803cbd2:	4650      	mov	r0, sl
 803cbd4:	f7e3 fca6 	bl	8020524 <__aeabi_i2d>
 803cbd8:	4632      	mov	r2, r6
 803cbda:	463b      	mov	r3, r7
 803cbdc:	f7e3 ff74 	bl	8020ac8 <__aeabi_dcmpeq>
 803cbe0:	b908      	cbnz	r0, 803cbe6 <_dtoa_r+0x186>
 803cbe2:	f10a 3aff 	add.w	sl, sl, #4294967295
 803cbe6:	f1ba 0f16 	cmp.w	sl, #22
 803cbea:	d854      	bhi.n	803cc96 <_dtoa_r+0x236>
 803cbec:	4b61      	ldr	r3, [pc, #388]	; (803cd74 <_dtoa_r+0x314>)
 803cbee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 803cbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 803cbf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 803cbfa:	f7e3 ff6f 	bl	8020adc <__aeabi_dcmplt>
 803cbfe:	2800      	cmp	r0, #0
 803cc00:	d04b      	beq.n	803cc9a <_dtoa_r+0x23a>
 803cc02:	f10a 3aff 	add.w	sl, sl, #4294967295
 803cc06:	2300      	movs	r3, #0
 803cc08:	930e      	str	r3, [sp, #56]	; 0x38
 803cc0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 803cc0c:	1b5d      	subs	r5, r3, r5
 803cc0e:	1e6b      	subs	r3, r5, #1
 803cc10:	9304      	str	r3, [sp, #16]
 803cc12:	bf43      	ittte	mi
 803cc14:	2300      	movmi	r3, #0
 803cc16:	f1c5 0801 	rsbmi	r8, r5, #1
 803cc1a:	9304      	strmi	r3, [sp, #16]
 803cc1c:	f04f 0800 	movpl.w	r8, #0
 803cc20:	f1ba 0f00 	cmp.w	sl, #0
 803cc24:	db3b      	blt.n	803cc9e <_dtoa_r+0x23e>
 803cc26:	9b04      	ldr	r3, [sp, #16]
 803cc28:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 803cc2c:	4453      	add	r3, sl
 803cc2e:	9304      	str	r3, [sp, #16]
 803cc30:	2300      	movs	r3, #0
 803cc32:	9306      	str	r3, [sp, #24]
 803cc34:	9b05      	ldr	r3, [sp, #20]
 803cc36:	2b09      	cmp	r3, #9
 803cc38:	d869      	bhi.n	803cd0e <_dtoa_r+0x2ae>
 803cc3a:	2b05      	cmp	r3, #5
 803cc3c:	bfc4      	itt	gt
 803cc3e:	3b04      	subgt	r3, #4
 803cc40:	9305      	strgt	r3, [sp, #20]
 803cc42:	9b05      	ldr	r3, [sp, #20]
 803cc44:	f1a3 0302 	sub.w	r3, r3, #2
 803cc48:	bfcc      	ite	gt
 803cc4a:	2500      	movgt	r5, #0
 803cc4c:	2501      	movle	r5, #1
 803cc4e:	2b03      	cmp	r3, #3
 803cc50:	d869      	bhi.n	803cd26 <_dtoa_r+0x2c6>
 803cc52:	e8df f003 	tbb	[pc, r3]
 803cc56:	4e2c      	.short	0x4e2c
 803cc58:	5a4c      	.short	0x5a4c
 803cc5a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 803cc5e:	441d      	add	r5, r3
 803cc60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 803cc64:	2b20      	cmp	r3, #32
 803cc66:	bfc1      	itttt	gt
 803cc68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 803cc6c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 803cc70:	fa09 f303 	lslgt.w	r3, r9, r3
 803cc74:	fa26 f000 	lsrgt.w	r0, r6, r0
 803cc78:	bfda      	itte	le
 803cc7a:	f1c3 0320 	rsble	r3, r3, #32
 803cc7e:	fa06 f003 	lslle.w	r0, r6, r3
 803cc82:	4318      	orrgt	r0, r3
 803cc84:	f7e3 fc3e 	bl	8020504 <__aeabi_ui2d>
 803cc88:	2301      	movs	r3, #1
 803cc8a:	4606      	mov	r6, r0
 803cc8c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 803cc90:	3d01      	subs	r5, #1
 803cc92:	9310      	str	r3, [sp, #64]	; 0x40
 803cc94:	e771      	b.n	803cb7a <_dtoa_r+0x11a>
 803cc96:	2301      	movs	r3, #1
 803cc98:	e7b6      	b.n	803cc08 <_dtoa_r+0x1a8>
 803cc9a:	900e      	str	r0, [sp, #56]	; 0x38
 803cc9c:	e7b5      	b.n	803cc0a <_dtoa_r+0x1aa>
 803cc9e:	f1ca 0300 	rsb	r3, sl, #0
 803cca2:	9306      	str	r3, [sp, #24]
 803cca4:	2300      	movs	r3, #0
 803cca6:	eba8 080a 	sub.w	r8, r8, sl
 803ccaa:	930d      	str	r3, [sp, #52]	; 0x34
 803ccac:	e7c2      	b.n	803cc34 <_dtoa_r+0x1d4>
 803ccae:	2300      	movs	r3, #0
 803ccb0:	9308      	str	r3, [sp, #32]
 803ccb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803ccb4:	2b00      	cmp	r3, #0
 803ccb6:	dc39      	bgt.n	803cd2c <_dtoa_r+0x2cc>
 803ccb8:	f04f 0901 	mov.w	r9, #1
 803ccbc:	f8cd 9004 	str.w	r9, [sp, #4]
 803ccc0:	464b      	mov	r3, r9
 803ccc2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 803ccc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 803ccc8:	2200      	movs	r2, #0
 803ccca:	6042      	str	r2, [r0, #4]
 803cccc:	2204      	movs	r2, #4
 803ccce:	f102 0614 	add.w	r6, r2, #20
 803ccd2:	429e      	cmp	r6, r3
 803ccd4:	6841      	ldr	r1, [r0, #4]
 803ccd6:	d92f      	bls.n	803cd38 <_dtoa_r+0x2d8>
 803ccd8:	4620      	mov	r0, r4
 803ccda:	f001 f87b 	bl	803ddd4 <_Balloc>
 803ccde:	9000      	str	r0, [sp, #0]
 803cce0:	2800      	cmp	r0, #0
 803cce2:	d14b      	bne.n	803cd7c <_dtoa_r+0x31c>
 803cce4:	4b24      	ldr	r3, [pc, #144]	; (803cd78 <_dtoa_r+0x318>)
 803cce6:	4602      	mov	r2, r0
 803cce8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 803ccec:	e6d1      	b.n	803ca92 <_dtoa_r+0x32>
 803ccee:	2301      	movs	r3, #1
 803ccf0:	e7de      	b.n	803ccb0 <_dtoa_r+0x250>
 803ccf2:	2300      	movs	r3, #0
 803ccf4:	9308      	str	r3, [sp, #32]
 803ccf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803ccf8:	eb0a 0903 	add.w	r9, sl, r3
 803ccfc:	f109 0301 	add.w	r3, r9, #1
 803cd00:	2b01      	cmp	r3, #1
 803cd02:	9301      	str	r3, [sp, #4]
 803cd04:	bfb8      	it	lt
 803cd06:	2301      	movlt	r3, #1
 803cd08:	e7dd      	b.n	803ccc6 <_dtoa_r+0x266>
 803cd0a:	2301      	movs	r3, #1
 803cd0c:	e7f2      	b.n	803ccf4 <_dtoa_r+0x294>
 803cd0e:	2501      	movs	r5, #1
 803cd10:	2300      	movs	r3, #0
 803cd12:	9305      	str	r3, [sp, #20]
 803cd14:	9508      	str	r5, [sp, #32]
 803cd16:	f04f 39ff 	mov.w	r9, #4294967295
 803cd1a:	2200      	movs	r2, #0
 803cd1c:	f8cd 9004 	str.w	r9, [sp, #4]
 803cd20:	2312      	movs	r3, #18
 803cd22:	9209      	str	r2, [sp, #36]	; 0x24
 803cd24:	e7cf      	b.n	803ccc6 <_dtoa_r+0x266>
 803cd26:	2301      	movs	r3, #1
 803cd28:	9308      	str	r3, [sp, #32]
 803cd2a:	e7f4      	b.n	803cd16 <_dtoa_r+0x2b6>
 803cd2c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 803cd30:	f8cd 9004 	str.w	r9, [sp, #4]
 803cd34:	464b      	mov	r3, r9
 803cd36:	e7c6      	b.n	803ccc6 <_dtoa_r+0x266>
 803cd38:	3101      	adds	r1, #1
 803cd3a:	6041      	str	r1, [r0, #4]
 803cd3c:	0052      	lsls	r2, r2, #1
 803cd3e:	e7c6      	b.n	803ccce <_dtoa_r+0x26e>
 803cd40:	636f4361 	.word	0x636f4361
 803cd44:	3fd287a7 	.word	0x3fd287a7
 803cd48:	8b60c8b3 	.word	0x8b60c8b3
 803cd4c:	3fc68a28 	.word	0x3fc68a28
 803cd50:	509f79fb 	.word	0x509f79fb
 803cd54:	3fd34413 	.word	0x3fd34413
 803cd58:	080401c6 	.word	0x080401c6
 803cd5c:	080401dd 	.word	0x080401dd
 803cd60:	7ff00000 	.word	0x7ff00000
 803cd64:	080401c2 	.word	0x080401c2
 803cd68:	080401b9 	.word	0x080401b9
 803cd6c:	08040039 	.word	0x08040039
 803cd70:	3ff80000 	.word	0x3ff80000
 803cd74:	08040358 	.word	0x08040358
 803cd78:	0804023c 	.word	0x0804023c
 803cd7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 803cd7e:	9a00      	ldr	r2, [sp, #0]
 803cd80:	601a      	str	r2, [r3, #0]
 803cd82:	9b01      	ldr	r3, [sp, #4]
 803cd84:	2b0e      	cmp	r3, #14
 803cd86:	f200 80ad 	bhi.w	803cee4 <_dtoa_r+0x484>
 803cd8a:	2d00      	cmp	r5, #0
 803cd8c:	f000 80aa 	beq.w	803cee4 <_dtoa_r+0x484>
 803cd90:	f1ba 0f00 	cmp.w	sl, #0
 803cd94:	dd36      	ble.n	803ce04 <_dtoa_r+0x3a4>
 803cd96:	4ac3      	ldr	r2, [pc, #780]	; (803d0a4 <_dtoa_r+0x644>)
 803cd98:	f00a 030f 	and.w	r3, sl, #15
 803cd9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 803cda0:	ed93 7b00 	vldr	d7, [r3]
 803cda4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 803cda8:	ea4f 172a 	mov.w	r7, sl, asr #4
 803cdac:	eeb0 8a47 	vmov.f32	s16, s14
 803cdb0:	eef0 8a67 	vmov.f32	s17, s15
 803cdb4:	d016      	beq.n	803cde4 <_dtoa_r+0x384>
 803cdb6:	4bbc      	ldr	r3, [pc, #752]	; (803d0a8 <_dtoa_r+0x648>)
 803cdb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 803cdbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 803cdc0:	f7e3 fd44 	bl	802084c <__aeabi_ddiv>
 803cdc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803cdc8:	f007 070f 	and.w	r7, r7, #15
 803cdcc:	2503      	movs	r5, #3
 803cdce:	4eb6      	ldr	r6, [pc, #728]	; (803d0a8 <_dtoa_r+0x648>)
 803cdd0:	b957      	cbnz	r7, 803cde8 <_dtoa_r+0x388>
 803cdd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 803cdd6:	ec53 2b18 	vmov	r2, r3, d8
 803cdda:	f7e3 fd37 	bl	802084c <__aeabi_ddiv>
 803cdde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803cde2:	e029      	b.n	803ce38 <_dtoa_r+0x3d8>
 803cde4:	2502      	movs	r5, #2
 803cde6:	e7f2      	b.n	803cdce <_dtoa_r+0x36e>
 803cde8:	07f9      	lsls	r1, r7, #31
 803cdea:	d508      	bpl.n	803cdfe <_dtoa_r+0x39e>
 803cdec:	ec51 0b18 	vmov	r0, r1, d8
 803cdf0:	e9d6 2300 	ldrd	r2, r3, [r6]
 803cdf4:	f7e3 fc00 	bl	80205f8 <__aeabi_dmul>
 803cdf8:	ec41 0b18 	vmov	d8, r0, r1
 803cdfc:	3501      	adds	r5, #1
 803cdfe:	107f      	asrs	r7, r7, #1
 803ce00:	3608      	adds	r6, #8
 803ce02:	e7e5      	b.n	803cdd0 <_dtoa_r+0x370>
 803ce04:	f000 80a6 	beq.w	803cf54 <_dtoa_r+0x4f4>
 803ce08:	f1ca 0600 	rsb	r6, sl, #0
 803ce0c:	4ba5      	ldr	r3, [pc, #660]	; (803d0a4 <_dtoa_r+0x644>)
 803ce0e:	4fa6      	ldr	r7, [pc, #664]	; (803d0a8 <_dtoa_r+0x648>)
 803ce10:	f006 020f 	and.w	r2, r6, #15
 803ce14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 803ce18:	e9d3 2300 	ldrd	r2, r3, [r3]
 803ce1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 803ce20:	f7e3 fbea 	bl	80205f8 <__aeabi_dmul>
 803ce24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803ce28:	1136      	asrs	r6, r6, #4
 803ce2a:	2300      	movs	r3, #0
 803ce2c:	2502      	movs	r5, #2
 803ce2e:	2e00      	cmp	r6, #0
 803ce30:	f040 8085 	bne.w	803cf3e <_dtoa_r+0x4de>
 803ce34:	2b00      	cmp	r3, #0
 803ce36:	d1d2      	bne.n	803cdde <_dtoa_r+0x37e>
 803ce38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 803ce3a:	2b00      	cmp	r3, #0
 803ce3c:	f000 808c 	beq.w	803cf58 <_dtoa_r+0x4f8>
 803ce40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 803ce44:	4b99      	ldr	r3, [pc, #612]	; (803d0ac <_dtoa_r+0x64c>)
 803ce46:	2200      	movs	r2, #0
 803ce48:	4630      	mov	r0, r6
 803ce4a:	4639      	mov	r1, r7
 803ce4c:	f7e3 fe46 	bl	8020adc <__aeabi_dcmplt>
 803ce50:	2800      	cmp	r0, #0
 803ce52:	f000 8081 	beq.w	803cf58 <_dtoa_r+0x4f8>
 803ce56:	9b01      	ldr	r3, [sp, #4]
 803ce58:	2b00      	cmp	r3, #0
 803ce5a:	d07d      	beq.n	803cf58 <_dtoa_r+0x4f8>
 803ce5c:	f1b9 0f00 	cmp.w	r9, #0
 803ce60:	dd3c      	ble.n	803cedc <_dtoa_r+0x47c>
 803ce62:	f10a 33ff 	add.w	r3, sl, #4294967295
 803ce66:	9307      	str	r3, [sp, #28]
 803ce68:	2200      	movs	r2, #0
 803ce6a:	4b91      	ldr	r3, [pc, #580]	; (803d0b0 <_dtoa_r+0x650>)
 803ce6c:	4630      	mov	r0, r6
 803ce6e:	4639      	mov	r1, r7
 803ce70:	f7e3 fbc2 	bl	80205f8 <__aeabi_dmul>
 803ce74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803ce78:	3501      	adds	r5, #1
 803ce7a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 803ce7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 803ce82:	4628      	mov	r0, r5
 803ce84:	f7e3 fb4e 	bl	8020524 <__aeabi_i2d>
 803ce88:	4632      	mov	r2, r6
 803ce8a:	463b      	mov	r3, r7
 803ce8c:	f7e3 fbb4 	bl	80205f8 <__aeabi_dmul>
 803ce90:	4b88      	ldr	r3, [pc, #544]	; (803d0b4 <_dtoa_r+0x654>)
 803ce92:	2200      	movs	r2, #0
 803ce94:	f7e3 f9fa 	bl	802028c <__adddf3>
 803ce98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 803ce9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803cea0:	9303      	str	r3, [sp, #12]
 803cea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 803cea4:	2b00      	cmp	r3, #0
 803cea6:	d15c      	bne.n	803cf62 <_dtoa_r+0x502>
 803cea8:	4b83      	ldr	r3, [pc, #524]	; (803d0b8 <_dtoa_r+0x658>)
 803ceaa:	2200      	movs	r2, #0
 803ceac:	4630      	mov	r0, r6
 803ceae:	4639      	mov	r1, r7
 803ceb0:	f7e3 f9ea 	bl	8020288 <__aeabi_dsub>
 803ceb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 803ceb8:	4606      	mov	r6, r0
 803ceba:	460f      	mov	r7, r1
 803cebc:	f7e3 fe2c 	bl	8020b18 <__aeabi_dcmpgt>
 803cec0:	2800      	cmp	r0, #0
 803cec2:	f040 8296 	bne.w	803d3f2 <_dtoa_r+0x992>
 803cec6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 803ceca:	4630      	mov	r0, r6
 803cecc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 803ced0:	4639      	mov	r1, r7
 803ced2:	f7e3 fe03 	bl	8020adc <__aeabi_dcmplt>
 803ced6:	2800      	cmp	r0, #0
 803ced8:	f040 8288 	bne.w	803d3ec <_dtoa_r+0x98c>
 803cedc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 803cee0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 803cee4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 803cee6:	2b00      	cmp	r3, #0
 803cee8:	f2c0 8158 	blt.w	803d19c <_dtoa_r+0x73c>
 803ceec:	f1ba 0f0e 	cmp.w	sl, #14
 803cef0:	f300 8154 	bgt.w	803d19c <_dtoa_r+0x73c>
 803cef4:	4b6b      	ldr	r3, [pc, #428]	; (803d0a4 <_dtoa_r+0x644>)
 803cef6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 803cefa:	e9d3 8900 	ldrd	r8, r9, [r3]
 803cefe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803cf00:	2b00      	cmp	r3, #0
 803cf02:	f280 80e3 	bge.w	803d0cc <_dtoa_r+0x66c>
 803cf06:	9b01      	ldr	r3, [sp, #4]
 803cf08:	2b00      	cmp	r3, #0
 803cf0a:	f300 80df 	bgt.w	803d0cc <_dtoa_r+0x66c>
 803cf0e:	f040 826d 	bne.w	803d3ec <_dtoa_r+0x98c>
 803cf12:	4b69      	ldr	r3, [pc, #420]	; (803d0b8 <_dtoa_r+0x658>)
 803cf14:	2200      	movs	r2, #0
 803cf16:	4640      	mov	r0, r8
 803cf18:	4649      	mov	r1, r9
 803cf1a:	f7e3 fb6d 	bl	80205f8 <__aeabi_dmul>
 803cf1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 803cf22:	f7e3 fdef 	bl	8020b04 <__aeabi_dcmpge>
 803cf26:	9e01      	ldr	r6, [sp, #4]
 803cf28:	4637      	mov	r7, r6
 803cf2a:	2800      	cmp	r0, #0
 803cf2c:	f040 8243 	bne.w	803d3b6 <_dtoa_r+0x956>
 803cf30:	9d00      	ldr	r5, [sp, #0]
 803cf32:	2331      	movs	r3, #49	; 0x31
 803cf34:	f805 3b01 	strb.w	r3, [r5], #1
 803cf38:	f10a 0a01 	add.w	sl, sl, #1
 803cf3c:	e23f      	b.n	803d3be <_dtoa_r+0x95e>
 803cf3e:	07f2      	lsls	r2, r6, #31
 803cf40:	d505      	bpl.n	803cf4e <_dtoa_r+0x4ee>
 803cf42:	e9d7 2300 	ldrd	r2, r3, [r7]
 803cf46:	f7e3 fb57 	bl	80205f8 <__aeabi_dmul>
 803cf4a:	3501      	adds	r5, #1
 803cf4c:	2301      	movs	r3, #1
 803cf4e:	1076      	asrs	r6, r6, #1
 803cf50:	3708      	adds	r7, #8
 803cf52:	e76c      	b.n	803ce2e <_dtoa_r+0x3ce>
 803cf54:	2502      	movs	r5, #2
 803cf56:	e76f      	b.n	803ce38 <_dtoa_r+0x3d8>
 803cf58:	9b01      	ldr	r3, [sp, #4]
 803cf5a:	f8cd a01c 	str.w	sl, [sp, #28]
 803cf5e:	930c      	str	r3, [sp, #48]	; 0x30
 803cf60:	e78d      	b.n	803ce7e <_dtoa_r+0x41e>
 803cf62:	9900      	ldr	r1, [sp, #0]
 803cf64:	980c      	ldr	r0, [sp, #48]	; 0x30
 803cf66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 803cf68:	4b4e      	ldr	r3, [pc, #312]	; (803d0a4 <_dtoa_r+0x644>)
 803cf6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 803cf6e:	4401      	add	r1, r0
 803cf70:	9102      	str	r1, [sp, #8]
 803cf72:	9908      	ldr	r1, [sp, #32]
 803cf74:	eeb0 8a47 	vmov.f32	s16, s14
 803cf78:	eef0 8a67 	vmov.f32	s17, s15
 803cf7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 803cf80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 803cf84:	2900      	cmp	r1, #0
 803cf86:	d045      	beq.n	803d014 <_dtoa_r+0x5b4>
 803cf88:	494c      	ldr	r1, [pc, #304]	; (803d0bc <_dtoa_r+0x65c>)
 803cf8a:	2000      	movs	r0, #0
 803cf8c:	f7e3 fc5e 	bl	802084c <__aeabi_ddiv>
 803cf90:	ec53 2b18 	vmov	r2, r3, d8
 803cf94:	f7e3 f978 	bl	8020288 <__aeabi_dsub>
 803cf98:	9d00      	ldr	r5, [sp, #0]
 803cf9a:	ec41 0b18 	vmov	d8, r0, r1
 803cf9e:	4639      	mov	r1, r7
 803cfa0:	4630      	mov	r0, r6
 803cfa2:	f7e3 fdd9 	bl	8020b58 <__aeabi_d2iz>
 803cfa6:	900c      	str	r0, [sp, #48]	; 0x30
 803cfa8:	f7e3 fabc 	bl	8020524 <__aeabi_i2d>
 803cfac:	4602      	mov	r2, r0
 803cfae:	460b      	mov	r3, r1
 803cfb0:	4630      	mov	r0, r6
 803cfb2:	4639      	mov	r1, r7
 803cfb4:	f7e3 f968 	bl	8020288 <__aeabi_dsub>
 803cfb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 803cfba:	3330      	adds	r3, #48	; 0x30
 803cfbc:	f805 3b01 	strb.w	r3, [r5], #1
 803cfc0:	ec53 2b18 	vmov	r2, r3, d8
 803cfc4:	4606      	mov	r6, r0
 803cfc6:	460f      	mov	r7, r1
 803cfc8:	f7e3 fd88 	bl	8020adc <__aeabi_dcmplt>
 803cfcc:	2800      	cmp	r0, #0
 803cfce:	d165      	bne.n	803d09c <_dtoa_r+0x63c>
 803cfd0:	4632      	mov	r2, r6
 803cfd2:	463b      	mov	r3, r7
 803cfd4:	4935      	ldr	r1, [pc, #212]	; (803d0ac <_dtoa_r+0x64c>)
 803cfd6:	2000      	movs	r0, #0
 803cfd8:	f7e3 f956 	bl	8020288 <__aeabi_dsub>
 803cfdc:	ec53 2b18 	vmov	r2, r3, d8
 803cfe0:	f7e3 fd7c 	bl	8020adc <__aeabi_dcmplt>
 803cfe4:	2800      	cmp	r0, #0
 803cfe6:	f040 80b9 	bne.w	803d15c <_dtoa_r+0x6fc>
 803cfea:	9b02      	ldr	r3, [sp, #8]
 803cfec:	429d      	cmp	r5, r3
 803cfee:	f43f af75 	beq.w	803cedc <_dtoa_r+0x47c>
 803cff2:	4b2f      	ldr	r3, [pc, #188]	; (803d0b0 <_dtoa_r+0x650>)
 803cff4:	ec51 0b18 	vmov	r0, r1, d8
 803cff8:	2200      	movs	r2, #0
 803cffa:	f7e3 fafd 	bl	80205f8 <__aeabi_dmul>
 803cffe:	4b2c      	ldr	r3, [pc, #176]	; (803d0b0 <_dtoa_r+0x650>)
 803d000:	ec41 0b18 	vmov	d8, r0, r1
 803d004:	2200      	movs	r2, #0
 803d006:	4630      	mov	r0, r6
 803d008:	4639      	mov	r1, r7
 803d00a:	f7e3 faf5 	bl	80205f8 <__aeabi_dmul>
 803d00e:	4606      	mov	r6, r0
 803d010:	460f      	mov	r7, r1
 803d012:	e7c4      	b.n	803cf9e <_dtoa_r+0x53e>
 803d014:	ec51 0b17 	vmov	r0, r1, d7
 803d018:	f7e3 faee 	bl	80205f8 <__aeabi_dmul>
 803d01c:	9b02      	ldr	r3, [sp, #8]
 803d01e:	9d00      	ldr	r5, [sp, #0]
 803d020:	930c      	str	r3, [sp, #48]	; 0x30
 803d022:	ec41 0b18 	vmov	d8, r0, r1
 803d026:	4639      	mov	r1, r7
 803d028:	4630      	mov	r0, r6
 803d02a:	f7e3 fd95 	bl	8020b58 <__aeabi_d2iz>
 803d02e:	9011      	str	r0, [sp, #68]	; 0x44
 803d030:	f7e3 fa78 	bl	8020524 <__aeabi_i2d>
 803d034:	4602      	mov	r2, r0
 803d036:	460b      	mov	r3, r1
 803d038:	4630      	mov	r0, r6
 803d03a:	4639      	mov	r1, r7
 803d03c:	f7e3 f924 	bl	8020288 <__aeabi_dsub>
 803d040:	9b11      	ldr	r3, [sp, #68]	; 0x44
 803d042:	3330      	adds	r3, #48	; 0x30
 803d044:	f805 3b01 	strb.w	r3, [r5], #1
 803d048:	9b02      	ldr	r3, [sp, #8]
 803d04a:	429d      	cmp	r5, r3
 803d04c:	4606      	mov	r6, r0
 803d04e:	460f      	mov	r7, r1
 803d050:	f04f 0200 	mov.w	r2, #0
 803d054:	d134      	bne.n	803d0c0 <_dtoa_r+0x660>
 803d056:	4b19      	ldr	r3, [pc, #100]	; (803d0bc <_dtoa_r+0x65c>)
 803d058:	ec51 0b18 	vmov	r0, r1, d8
 803d05c:	f7e3 f916 	bl	802028c <__adddf3>
 803d060:	4602      	mov	r2, r0
 803d062:	460b      	mov	r3, r1
 803d064:	4630      	mov	r0, r6
 803d066:	4639      	mov	r1, r7
 803d068:	f7e3 fd56 	bl	8020b18 <__aeabi_dcmpgt>
 803d06c:	2800      	cmp	r0, #0
 803d06e:	d175      	bne.n	803d15c <_dtoa_r+0x6fc>
 803d070:	ec53 2b18 	vmov	r2, r3, d8
 803d074:	4911      	ldr	r1, [pc, #68]	; (803d0bc <_dtoa_r+0x65c>)
 803d076:	2000      	movs	r0, #0
 803d078:	f7e3 f906 	bl	8020288 <__aeabi_dsub>
 803d07c:	4602      	mov	r2, r0
 803d07e:	460b      	mov	r3, r1
 803d080:	4630      	mov	r0, r6
 803d082:	4639      	mov	r1, r7
 803d084:	f7e3 fd2a 	bl	8020adc <__aeabi_dcmplt>
 803d088:	2800      	cmp	r0, #0
 803d08a:	f43f af27 	beq.w	803cedc <_dtoa_r+0x47c>
 803d08e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803d090:	1e6b      	subs	r3, r5, #1
 803d092:	930c      	str	r3, [sp, #48]	; 0x30
 803d094:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 803d098:	2b30      	cmp	r3, #48	; 0x30
 803d09a:	d0f8      	beq.n	803d08e <_dtoa_r+0x62e>
 803d09c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 803d0a0:	e04a      	b.n	803d138 <_dtoa_r+0x6d8>
 803d0a2:	bf00      	nop
 803d0a4:	08040358 	.word	0x08040358
 803d0a8:	08040330 	.word	0x08040330
 803d0ac:	3ff00000 	.word	0x3ff00000
 803d0b0:	40240000 	.word	0x40240000
 803d0b4:	401c0000 	.word	0x401c0000
 803d0b8:	40140000 	.word	0x40140000
 803d0bc:	3fe00000 	.word	0x3fe00000
 803d0c0:	4baf      	ldr	r3, [pc, #700]	; (803d380 <_dtoa_r+0x920>)
 803d0c2:	f7e3 fa99 	bl	80205f8 <__aeabi_dmul>
 803d0c6:	4606      	mov	r6, r0
 803d0c8:	460f      	mov	r7, r1
 803d0ca:	e7ac      	b.n	803d026 <_dtoa_r+0x5c6>
 803d0cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 803d0d0:	9d00      	ldr	r5, [sp, #0]
 803d0d2:	4642      	mov	r2, r8
 803d0d4:	464b      	mov	r3, r9
 803d0d6:	4630      	mov	r0, r6
 803d0d8:	4639      	mov	r1, r7
 803d0da:	f7e3 fbb7 	bl	802084c <__aeabi_ddiv>
 803d0de:	f7e3 fd3b 	bl	8020b58 <__aeabi_d2iz>
 803d0e2:	9002      	str	r0, [sp, #8]
 803d0e4:	f7e3 fa1e 	bl	8020524 <__aeabi_i2d>
 803d0e8:	4642      	mov	r2, r8
 803d0ea:	464b      	mov	r3, r9
 803d0ec:	f7e3 fa84 	bl	80205f8 <__aeabi_dmul>
 803d0f0:	4602      	mov	r2, r0
 803d0f2:	460b      	mov	r3, r1
 803d0f4:	4630      	mov	r0, r6
 803d0f6:	4639      	mov	r1, r7
 803d0f8:	f7e3 f8c6 	bl	8020288 <__aeabi_dsub>
 803d0fc:	9e02      	ldr	r6, [sp, #8]
 803d0fe:	9f01      	ldr	r7, [sp, #4]
 803d100:	3630      	adds	r6, #48	; 0x30
 803d102:	f805 6b01 	strb.w	r6, [r5], #1
 803d106:	9e00      	ldr	r6, [sp, #0]
 803d108:	1bae      	subs	r6, r5, r6
 803d10a:	42b7      	cmp	r7, r6
 803d10c:	4602      	mov	r2, r0
 803d10e:	460b      	mov	r3, r1
 803d110:	d137      	bne.n	803d182 <_dtoa_r+0x722>
 803d112:	f7e3 f8bb 	bl	802028c <__adddf3>
 803d116:	4642      	mov	r2, r8
 803d118:	464b      	mov	r3, r9
 803d11a:	4606      	mov	r6, r0
 803d11c:	460f      	mov	r7, r1
 803d11e:	f7e3 fcfb 	bl	8020b18 <__aeabi_dcmpgt>
 803d122:	b9c8      	cbnz	r0, 803d158 <_dtoa_r+0x6f8>
 803d124:	4642      	mov	r2, r8
 803d126:	464b      	mov	r3, r9
 803d128:	4630      	mov	r0, r6
 803d12a:	4639      	mov	r1, r7
 803d12c:	f7e3 fccc 	bl	8020ac8 <__aeabi_dcmpeq>
 803d130:	b110      	cbz	r0, 803d138 <_dtoa_r+0x6d8>
 803d132:	9b02      	ldr	r3, [sp, #8]
 803d134:	07d9      	lsls	r1, r3, #31
 803d136:	d40f      	bmi.n	803d158 <_dtoa_r+0x6f8>
 803d138:	4620      	mov	r0, r4
 803d13a:	4659      	mov	r1, fp
 803d13c:	f000 fe8a 	bl	803de54 <_Bfree>
 803d140:	2300      	movs	r3, #0
 803d142:	702b      	strb	r3, [r5, #0]
 803d144:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803d146:	f10a 0001 	add.w	r0, sl, #1
 803d14a:	6018      	str	r0, [r3, #0]
 803d14c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 803d14e:	2b00      	cmp	r3, #0
 803d150:	f43f acd8 	beq.w	803cb04 <_dtoa_r+0xa4>
 803d154:	601d      	str	r5, [r3, #0]
 803d156:	e4d5      	b.n	803cb04 <_dtoa_r+0xa4>
 803d158:	f8cd a01c 	str.w	sl, [sp, #28]
 803d15c:	462b      	mov	r3, r5
 803d15e:	461d      	mov	r5, r3
 803d160:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 803d164:	2a39      	cmp	r2, #57	; 0x39
 803d166:	d108      	bne.n	803d17a <_dtoa_r+0x71a>
 803d168:	9a00      	ldr	r2, [sp, #0]
 803d16a:	429a      	cmp	r2, r3
 803d16c:	d1f7      	bne.n	803d15e <_dtoa_r+0x6fe>
 803d16e:	9a07      	ldr	r2, [sp, #28]
 803d170:	9900      	ldr	r1, [sp, #0]
 803d172:	3201      	adds	r2, #1
 803d174:	9207      	str	r2, [sp, #28]
 803d176:	2230      	movs	r2, #48	; 0x30
 803d178:	700a      	strb	r2, [r1, #0]
 803d17a:	781a      	ldrb	r2, [r3, #0]
 803d17c:	3201      	adds	r2, #1
 803d17e:	701a      	strb	r2, [r3, #0]
 803d180:	e78c      	b.n	803d09c <_dtoa_r+0x63c>
 803d182:	4b7f      	ldr	r3, [pc, #508]	; (803d380 <_dtoa_r+0x920>)
 803d184:	2200      	movs	r2, #0
 803d186:	f7e3 fa37 	bl	80205f8 <__aeabi_dmul>
 803d18a:	2200      	movs	r2, #0
 803d18c:	2300      	movs	r3, #0
 803d18e:	4606      	mov	r6, r0
 803d190:	460f      	mov	r7, r1
 803d192:	f7e3 fc99 	bl	8020ac8 <__aeabi_dcmpeq>
 803d196:	2800      	cmp	r0, #0
 803d198:	d09b      	beq.n	803d0d2 <_dtoa_r+0x672>
 803d19a:	e7cd      	b.n	803d138 <_dtoa_r+0x6d8>
 803d19c:	9a08      	ldr	r2, [sp, #32]
 803d19e:	2a00      	cmp	r2, #0
 803d1a0:	f000 80c4 	beq.w	803d32c <_dtoa_r+0x8cc>
 803d1a4:	9a05      	ldr	r2, [sp, #20]
 803d1a6:	2a01      	cmp	r2, #1
 803d1a8:	f300 80a8 	bgt.w	803d2fc <_dtoa_r+0x89c>
 803d1ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 803d1ae:	2a00      	cmp	r2, #0
 803d1b0:	f000 80a0 	beq.w	803d2f4 <_dtoa_r+0x894>
 803d1b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 803d1b8:	9e06      	ldr	r6, [sp, #24]
 803d1ba:	4645      	mov	r5, r8
 803d1bc:	9a04      	ldr	r2, [sp, #16]
 803d1be:	2101      	movs	r1, #1
 803d1c0:	441a      	add	r2, r3
 803d1c2:	4620      	mov	r0, r4
 803d1c4:	4498      	add	r8, r3
 803d1c6:	9204      	str	r2, [sp, #16]
 803d1c8:	f000 ff4a 	bl	803e060 <__i2b>
 803d1cc:	4607      	mov	r7, r0
 803d1ce:	2d00      	cmp	r5, #0
 803d1d0:	dd0b      	ble.n	803d1ea <_dtoa_r+0x78a>
 803d1d2:	9b04      	ldr	r3, [sp, #16]
 803d1d4:	2b00      	cmp	r3, #0
 803d1d6:	dd08      	ble.n	803d1ea <_dtoa_r+0x78a>
 803d1d8:	42ab      	cmp	r3, r5
 803d1da:	9a04      	ldr	r2, [sp, #16]
 803d1dc:	bfa8      	it	ge
 803d1de:	462b      	movge	r3, r5
 803d1e0:	eba8 0803 	sub.w	r8, r8, r3
 803d1e4:	1aed      	subs	r5, r5, r3
 803d1e6:	1ad3      	subs	r3, r2, r3
 803d1e8:	9304      	str	r3, [sp, #16]
 803d1ea:	9b06      	ldr	r3, [sp, #24]
 803d1ec:	b1fb      	cbz	r3, 803d22e <_dtoa_r+0x7ce>
 803d1ee:	9b08      	ldr	r3, [sp, #32]
 803d1f0:	2b00      	cmp	r3, #0
 803d1f2:	f000 809f 	beq.w	803d334 <_dtoa_r+0x8d4>
 803d1f6:	2e00      	cmp	r6, #0
 803d1f8:	dd11      	ble.n	803d21e <_dtoa_r+0x7be>
 803d1fa:	4639      	mov	r1, r7
 803d1fc:	4632      	mov	r2, r6
 803d1fe:	4620      	mov	r0, r4
 803d200:	f000 ffea 	bl	803e1d8 <__pow5mult>
 803d204:	465a      	mov	r2, fp
 803d206:	4601      	mov	r1, r0
 803d208:	4607      	mov	r7, r0
 803d20a:	4620      	mov	r0, r4
 803d20c:	f000 ff3e 	bl	803e08c <__multiply>
 803d210:	4659      	mov	r1, fp
 803d212:	9007      	str	r0, [sp, #28]
 803d214:	4620      	mov	r0, r4
 803d216:	f000 fe1d 	bl	803de54 <_Bfree>
 803d21a:	9b07      	ldr	r3, [sp, #28]
 803d21c:	469b      	mov	fp, r3
 803d21e:	9b06      	ldr	r3, [sp, #24]
 803d220:	1b9a      	subs	r2, r3, r6
 803d222:	d004      	beq.n	803d22e <_dtoa_r+0x7ce>
 803d224:	4659      	mov	r1, fp
 803d226:	4620      	mov	r0, r4
 803d228:	f000 ffd6 	bl	803e1d8 <__pow5mult>
 803d22c:	4683      	mov	fp, r0
 803d22e:	2101      	movs	r1, #1
 803d230:	4620      	mov	r0, r4
 803d232:	f000 ff15 	bl	803e060 <__i2b>
 803d236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 803d238:	2b00      	cmp	r3, #0
 803d23a:	4606      	mov	r6, r0
 803d23c:	dd7c      	ble.n	803d338 <_dtoa_r+0x8d8>
 803d23e:	461a      	mov	r2, r3
 803d240:	4601      	mov	r1, r0
 803d242:	4620      	mov	r0, r4
 803d244:	f000 ffc8 	bl	803e1d8 <__pow5mult>
 803d248:	9b05      	ldr	r3, [sp, #20]
 803d24a:	2b01      	cmp	r3, #1
 803d24c:	4606      	mov	r6, r0
 803d24e:	dd76      	ble.n	803d33e <_dtoa_r+0x8de>
 803d250:	2300      	movs	r3, #0
 803d252:	9306      	str	r3, [sp, #24]
 803d254:	6933      	ldr	r3, [r6, #16]
 803d256:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 803d25a:	6918      	ldr	r0, [r3, #16]
 803d25c:	f000 feb0 	bl	803dfc0 <__hi0bits>
 803d260:	f1c0 0020 	rsb	r0, r0, #32
 803d264:	9b04      	ldr	r3, [sp, #16]
 803d266:	4418      	add	r0, r3
 803d268:	f010 001f 	ands.w	r0, r0, #31
 803d26c:	f000 8086 	beq.w	803d37c <_dtoa_r+0x91c>
 803d270:	f1c0 0320 	rsb	r3, r0, #32
 803d274:	2b04      	cmp	r3, #4
 803d276:	dd7f      	ble.n	803d378 <_dtoa_r+0x918>
 803d278:	f1c0 001c 	rsb	r0, r0, #28
 803d27c:	9b04      	ldr	r3, [sp, #16]
 803d27e:	4403      	add	r3, r0
 803d280:	4480      	add	r8, r0
 803d282:	4405      	add	r5, r0
 803d284:	9304      	str	r3, [sp, #16]
 803d286:	f1b8 0f00 	cmp.w	r8, #0
 803d28a:	dd05      	ble.n	803d298 <_dtoa_r+0x838>
 803d28c:	4659      	mov	r1, fp
 803d28e:	4642      	mov	r2, r8
 803d290:	4620      	mov	r0, r4
 803d292:	f000 fffb 	bl	803e28c <__lshift>
 803d296:	4683      	mov	fp, r0
 803d298:	9b04      	ldr	r3, [sp, #16]
 803d29a:	2b00      	cmp	r3, #0
 803d29c:	dd05      	ble.n	803d2aa <_dtoa_r+0x84a>
 803d29e:	4631      	mov	r1, r6
 803d2a0:	461a      	mov	r2, r3
 803d2a2:	4620      	mov	r0, r4
 803d2a4:	f000 fff2 	bl	803e28c <__lshift>
 803d2a8:	4606      	mov	r6, r0
 803d2aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 803d2ac:	2b00      	cmp	r3, #0
 803d2ae:	d069      	beq.n	803d384 <_dtoa_r+0x924>
 803d2b0:	4631      	mov	r1, r6
 803d2b2:	4658      	mov	r0, fp
 803d2b4:	f001 f856 	bl	803e364 <__mcmp>
 803d2b8:	2800      	cmp	r0, #0
 803d2ba:	da63      	bge.n	803d384 <_dtoa_r+0x924>
 803d2bc:	2300      	movs	r3, #0
 803d2be:	4659      	mov	r1, fp
 803d2c0:	220a      	movs	r2, #10
 803d2c2:	4620      	mov	r0, r4
 803d2c4:	f000 fde8 	bl	803de98 <__multadd>
 803d2c8:	9b08      	ldr	r3, [sp, #32]
 803d2ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 803d2ce:	4683      	mov	fp, r0
 803d2d0:	2b00      	cmp	r3, #0
 803d2d2:	f000 818f 	beq.w	803d5f4 <_dtoa_r+0xb94>
 803d2d6:	4639      	mov	r1, r7
 803d2d8:	2300      	movs	r3, #0
 803d2da:	220a      	movs	r2, #10
 803d2dc:	4620      	mov	r0, r4
 803d2de:	f000 fddb 	bl	803de98 <__multadd>
 803d2e2:	f1b9 0f00 	cmp.w	r9, #0
 803d2e6:	4607      	mov	r7, r0
 803d2e8:	f300 808e 	bgt.w	803d408 <_dtoa_r+0x9a8>
 803d2ec:	9b05      	ldr	r3, [sp, #20]
 803d2ee:	2b02      	cmp	r3, #2
 803d2f0:	dc50      	bgt.n	803d394 <_dtoa_r+0x934>
 803d2f2:	e089      	b.n	803d408 <_dtoa_r+0x9a8>
 803d2f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 803d2f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 803d2fa:	e75d      	b.n	803d1b8 <_dtoa_r+0x758>
 803d2fc:	9b01      	ldr	r3, [sp, #4]
 803d2fe:	1e5e      	subs	r6, r3, #1
 803d300:	9b06      	ldr	r3, [sp, #24]
 803d302:	42b3      	cmp	r3, r6
 803d304:	bfbf      	itttt	lt
 803d306:	9b06      	ldrlt	r3, [sp, #24]
 803d308:	9606      	strlt	r6, [sp, #24]
 803d30a:	1af2      	sublt	r2, r6, r3
 803d30c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 803d30e:	bfb6      	itet	lt
 803d310:	189b      	addlt	r3, r3, r2
 803d312:	1b9e      	subge	r6, r3, r6
 803d314:	930d      	strlt	r3, [sp, #52]	; 0x34
 803d316:	9b01      	ldr	r3, [sp, #4]
 803d318:	bfb8      	it	lt
 803d31a:	2600      	movlt	r6, #0
 803d31c:	2b00      	cmp	r3, #0
 803d31e:	bfb5      	itete	lt
 803d320:	eba8 0503 	sublt.w	r5, r8, r3
 803d324:	9b01      	ldrge	r3, [sp, #4]
 803d326:	2300      	movlt	r3, #0
 803d328:	4645      	movge	r5, r8
 803d32a:	e747      	b.n	803d1bc <_dtoa_r+0x75c>
 803d32c:	9e06      	ldr	r6, [sp, #24]
 803d32e:	9f08      	ldr	r7, [sp, #32]
 803d330:	4645      	mov	r5, r8
 803d332:	e74c      	b.n	803d1ce <_dtoa_r+0x76e>
 803d334:	9a06      	ldr	r2, [sp, #24]
 803d336:	e775      	b.n	803d224 <_dtoa_r+0x7c4>
 803d338:	9b05      	ldr	r3, [sp, #20]
 803d33a:	2b01      	cmp	r3, #1
 803d33c:	dc18      	bgt.n	803d370 <_dtoa_r+0x910>
 803d33e:	9b02      	ldr	r3, [sp, #8]
 803d340:	b9b3      	cbnz	r3, 803d370 <_dtoa_r+0x910>
 803d342:	9b03      	ldr	r3, [sp, #12]
 803d344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803d348:	b9a3      	cbnz	r3, 803d374 <_dtoa_r+0x914>
 803d34a:	9b03      	ldr	r3, [sp, #12]
 803d34c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 803d350:	0d1b      	lsrs	r3, r3, #20
 803d352:	051b      	lsls	r3, r3, #20
 803d354:	b12b      	cbz	r3, 803d362 <_dtoa_r+0x902>
 803d356:	9b04      	ldr	r3, [sp, #16]
 803d358:	3301      	adds	r3, #1
 803d35a:	9304      	str	r3, [sp, #16]
 803d35c:	f108 0801 	add.w	r8, r8, #1
 803d360:	2301      	movs	r3, #1
 803d362:	9306      	str	r3, [sp, #24]
 803d364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 803d366:	2b00      	cmp	r3, #0
 803d368:	f47f af74 	bne.w	803d254 <_dtoa_r+0x7f4>
 803d36c:	2001      	movs	r0, #1
 803d36e:	e779      	b.n	803d264 <_dtoa_r+0x804>
 803d370:	2300      	movs	r3, #0
 803d372:	e7f6      	b.n	803d362 <_dtoa_r+0x902>
 803d374:	9b02      	ldr	r3, [sp, #8]
 803d376:	e7f4      	b.n	803d362 <_dtoa_r+0x902>
 803d378:	d085      	beq.n	803d286 <_dtoa_r+0x826>
 803d37a:	4618      	mov	r0, r3
 803d37c:	301c      	adds	r0, #28
 803d37e:	e77d      	b.n	803d27c <_dtoa_r+0x81c>
 803d380:	40240000 	.word	0x40240000
 803d384:	9b01      	ldr	r3, [sp, #4]
 803d386:	2b00      	cmp	r3, #0
 803d388:	dc38      	bgt.n	803d3fc <_dtoa_r+0x99c>
 803d38a:	9b05      	ldr	r3, [sp, #20]
 803d38c:	2b02      	cmp	r3, #2
 803d38e:	dd35      	ble.n	803d3fc <_dtoa_r+0x99c>
 803d390:	f8dd 9004 	ldr.w	r9, [sp, #4]
 803d394:	f1b9 0f00 	cmp.w	r9, #0
 803d398:	d10d      	bne.n	803d3b6 <_dtoa_r+0x956>
 803d39a:	4631      	mov	r1, r6
 803d39c:	464b      	mov	r3, r9
 803d39e:	2205      	movs	r2, #5
 803d3a0:	4620      	mov	r0, r4
 803d3a2:	f000 fd79 	bl	803de98 <__multadd>
 803d3a6:	4601      	mov	r1, r0
 803d3a8:	4606      	mov	r6, r0
 803d3aa:	4658      	mov	r0, fp
 803d3ac:	f000 ffda 	bl	803e364 <__mcmp>
 803d3b0:	2800      	cmp	r0, #0
 803d3b2:	f73f adbd 	bgt.w	803cf30 <_dtoa_r+0x4d0>
 803d3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803d3b8:	9d00      	ldr	r5, [sp, #0]
 803d3ba:	ea6f 0a03 	mvn.w	sl, r3
 803d3be:	f04f 0800 	mov.w	r8, #0
 803d3c2:	4631      	mov	r1, r6
 803d3c4:	4620      	mov	r0, r4
 803d3c6:	f000 fd45 	bl	803de54 <_Bfree>
 803d3ca:	2f00      	cmp	r7, #0
 803d3cc:	f43f aeb4 	beq.w	803d138 <_dtoa_r+0x6d8>
 803d3d0:	f1b8 0f00 	cmp.w	r8, #0
 803d3d4:	d005      	beq.n	803d3e2 <_dtoa_r+0x982>
 803d3d6:	45b8      	cmp	r8, r7
 803d3d8:	d003      	beq.n	803d3e2 <_dtoa_r+0x982>
 803d3da:	4641      	mov	r1, r8
 803d3dc:	4620      	mov	r0, r4
 803d3de:	f000 fd39 	bl	803de54 <_Bfree>
 803d3e2:	4639      	mov	r1, r7
 803d3e4:	4620      	mov	r0, r4
 803d3e6:	f000 fd35 	bl	803de54 <_Bfree>
 803d3ea:	e6a5      	b.n	803d138 <_dtoa_r+0x6d8>
 803d3ec:	2600      	movs	r6, #0
 803d3ee:	4637      	mov	r7, r6
 803d3f0:	e7e1      	b.n	803d3b6 <_dtoa_r+0x956>
 803d3f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 803d3f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 803d3f8:	4637      	mov	r7, r6
 803d3fa:	e599      	b.n	803cf30 <_dtoa_r+0x4d0>
 803d3fc:	9b08      	ldr	r3, [sp, #32]
 803d3fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 803d402:	2b00      	cmp	r3, #0
 803d404:	f000 80fd 	beq.w	803d602 <_dtoa_r+0xba2>
 803d408:	2d00      	cmp	r5, #0
 803d40a:	dd05      	ble.n	803d418 <_dtoa_r+0x9b8>
 803d40c:	4639      	mov	r1, r7
 803d40e:	462a      	mov	r2, r5
 803d410:	4620      	mov	r0, r4
 803d412:	f000 ff3b 	bl	803e28c <__lshift>
 803d416:	4607      	mov	r7, r0
 803d418:	9b06      	ldr	r3, [sp, #24]
 803d41a:	2b00      	cmp	r3, #0
 803d41c:	d05c      	beq.n	803d4d8 <_dtoa_r+0xa78>
 803d41e:	6879      	ldr	r1, [r7, #4]
 803d420:	4620      	mov	r0, r4
 803d422:	f000 fcd7 	bl	803ddd4 <_Balloc>
 803d426:	4605      	mov	r5, r0
 803d428:	b928      	cbnz	r0, 803d436 <_dtoa_r+0x9d6>
 803d42a:	4b80      	ldr	r3, [pc, #512]	; (803d62c <_dtoa_r+0xbcc>)
 803d42c:	4602      	mov	r2, r0
 803d42e:	f240 21ea 	movw	r1, #746	; 0x2ea
 803d432:	f7ff bb2e 	b.w	803ca92 <_dtoa_r+0x32>
 803d436:	693a      	ldr	r2, [r7, #16]
 803d438:	3202      	adds	r2, #2
 803d43a:	0092      	lsls	r2, r2, #2
 803d43c:	f107 010c 	add.w	r1, r7, #12
 803d440:	300c      	adds	r0, #12
 803d442:	f7fd fbe7 	bl	803ac14 <memcpy>
 803d446:	2201      	movs	r2, #1
 803d448:	4629      	mov	r1, r5
 803d44a:	4620      	mov	r0, r4
 803d44c:	f000 ff1e 	bl	803e28c <__lshift>
 803d450:	9b00      	ldr	r3, [sp, #0]
 803d452:	3301      	adds	r3, #1
 803d454:	9301      	str	r3, [sp, #4]
 803d456:	9b00      	ldr	r3, [sp, #0]
 803d458:	444b      	add	r3, r9
 803d45a:	9307      	str	r3, [sp, #28]
 803d45c:	9b02      	ldr	r3, [sp, #8]
 803d45e:	f003 0301 	and.w	r3, r3, #1
 803d462:	46b8      	mov	r8, r7
 803d464:	9306      	str	r3, [sp, #24]
 803d466:	4607      	mov	r7, r0
 803d468:	9b01      	ldr	r3, [sp, #4]
 803d46a:	4631      	mov	r1, r6
 803d46c:	3b01      	subs	r3, #1
 803d46e:	4658      	mov	r0, fp
 803d470:	9302      	str	r3, [sp, #8]
 803d472:	f7ff fa69 	bl	803c948 <quorem>
 803d476:	4603      	mov	r3, r0
 803d478:	3330      	adds	r3, #48	; 0x30
 803d47a:	9004      	str	r0, [sp, #16]
 803d47c:	4641      	mov	r1, r8
 803d47e:	4658      	mov	r0, fp
 803d480:	9308      	str	r3, [sp, #32]
 803d482:	f000 ff6f 	bl	803e364 <__mcmp>
 803d486:	463a      	mov	r2, r7
 803d488:	4681      	mov	r9, r0
 803d48a:	4631      	mov	r1, r6
 803d48c:	4620      	mov	r0, r4
 803d48e:	f000 ff85 	bl	803e39c <__mdiff>
 803d492:	68c2      	ldr	r2, [r0, #12]
 803d494:	9b08      	ldr	r3, [sp, #32]
 803d496:	4605      	mov	r5, r0
 803d498:	bb02      	cbnz	r2, 803d4dc <_dtoa_r+0xa7c>
 803d49a:	4601      	mov	r1, r0
 803d49c:	4658      	mov	r0, fp
 803d49e:	f000 ff61 	bl	803e364 <__mcmp>
 803d4a2:	9b08      	ldr	r3, [sp, #32]
 803d4a4:	4602      	mov	r2, r0
 803d4a6:	4629      	mov	r1, r5
 803d4a8:	4620      	mov	r0, r4
 803d4aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 803d4ae:	f000 fcd1 	bl	803de54 <_Bfree>
 803d4b2:	9b05      	ldr	r3, [sp, #20]
 803d4b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803d4b6:	9d01      	ldr	r5, [sp, #4]
 803d4b8:	ea43 0102 	orr.w	r1, r3, r2
 803d4bc:	9b06      	ldr	r3, [sp, #24]
 803d4be:	430b      	orrs	r3, r1
 803d4c0:	9b08      	ldr	r3, [sp, #32]
 803d4c2:	d10d      	bne.n	803d4e0 <_dtoa_r+0xa80>
 803d4c4:	2b39      	cmp	r3, #57	; 0x39
 803d4c6:	d029      	beq.n	803d51c <_dtoa_r+0xabc>
 803d4c8:	f1b9 0f00 	cmp.w	r9, #0
 803d4cc:	dd01      	ble.n	803d4d2 <_dtoa_r+0xa72>
 803d4ce:	9b04      	ldr	r3, [sp, #16]
 803d4d0:	3331      	adds	r3, #49	; 0x31
 803d4d2:	9a02      	ldr	r2, [sp, #8]
 803d4d4:	7013      	strb	r3, [r2, #0]
 803d4d6:	e774      	b.n	803d3c2 <_dtoa_r+0x962>
 803d4d8:	4638      	mov	r0, r7
 803d4da:	e7b9      	b.n	803d450 <_dtoa_r+0x9f0>
 803d4dc:	2201      	movs	r2, #1
 803d4de:	e7e2      	b.n	803d4a6 <_dtoa_r+0xa46>
 803d4e0:	f1b9 0f00 	cmp.w	r9, #0
 803d4e4:	db06      	blt.n	803d4f4 <_dtoa_r+0xa94>
 803d4e6:	9905      	ldr	r1, [sp, #20]
 803d4e8:	ea41 0909 	orr.w	r9, r1, r9
 803d4ec:	9906      	ldr	r1, [sp, #24]
 803d4ee:	ea59 0101 	orrs.w	r1, r9, r1
 803d4f2:	d120      	bne.n	803d536 <_dtoa_r+0xad6>
 803d4f4:	2a00      	cmp	r2, #0
 803d4f6:	ddec      	ble.n	803d4d2 <_dtoa_r+0xa72>
 803d4f8:	4659      	mov	r1, fp
 803d4fa:	2201      	movs	r2, #1
 803d4fc:	4620      	mov	r0, r4
 803d4fe:	9301      	str	r3, [sp, #4]
 803d500:	f000 fec4 	bl	803e28c <__lshift>
 803d504:	4631      	mov	r1, r6
 803d506:	4683      	mov	fp, r0
 803d508:	f000 ff2c 	bl	803e364 <__mcmp>
 803d50c:	2800      	cmp	r0, #0
 803d50e:	9b01      	ldr	r3, [sp, #4]
 803d510:	dc02      	bgt.n	803d518 <_dtoa_r+0xab8>
 803d512:	d1de      	bne.n	803d4d2 <_dtoa_r+0xa72>
 803d514:	07da      	lsls	r2, r3, #31
 803d516:	d5dc      	bpl.n	803d4d2 <_dtoa_r+0xa72>
 803d518:	2b39      	cmp	r3, #57	; 0x39
 803d51a:	d1d8      	bne.n	803d4ce <_dtoa_r+0xa6e>
 803d51c:	9a02      	ldr	r2, [sp, #8]
 803d51e:	2339      	movs	r3, #57	; 0x39
 803d520:	7013      	strb	r3, [r2, #0]
 803d522:	462b      	mov	r3, r5
 803d524:	461d      	mov	r5, r3
 803d526:	3b01      	subs	r3, #1
 803d528:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 803d52c:	2a39      	cmp	r2, #57	; 0x39
 803d52e:	d050      	beq.n	803d5d2 <_dtoa_r+0xb72>
 803d530:	3201      	adds	r2, #1
 803d532:	701a      	strb	r2, [r3, #0]
 803d534:	e745      	b.n	803d3c2 <_dtoa_r+0x962>
 803d536:	2a00      	cmp	r2, #0
 803d538:	dd03      	ble.n	803d542 <_dtoa_r+0xae2>
 803d53a:	2b39      	cmp	r3, #57	; 0x39
 803d53c:	d0ee      	beq.n	803d51c <_dtoa_r+0xabc>
 803d53e:	3301      	adds	r3, #1
 803d540:	e7c7      	b.n	803d4d2 <_dtoa_r+0xa72>
 803d542:	9a01      	ldr	r2, [sp, #4]
 803d544:	9907      	ldr	r1, [sp, #28]
 803d546:	f802 3c01 	strb.w	r3, [r2, #-1]
 803d54a:	428a      	cmp	r2, r1
 803d54c:	d02a      	beq.n	803d5a4 <_dtoa_r+0xb44>
 803d54e:	4659      	mov	r1, fp
 803d550:	2300      	movs	r3, #0
 803d552:	220a      	movs	r2, #10
 803d554:	4620      	mov	r0, r4
 803d556:	f000 fc9f 	bl	803de98 <__multadd>
 803d55a:	45b8      	cmp	r8, r7
 803d55c:	4683      	mov	fp, r0
 803d55e:	f04f 0300 	mov.w	r3, #0
 803d562:	f04f 020a 	mov.w	r2, #10
 803d566:	4641      	mov	r1, r8
 803d568:	4620      	mov	r0, r4
 803d56a:	d107      	bne.n	803d57c <_dtoa_r+0xb1c>
 803d56c:	f000 fc94 	bl	803de98 <__multadd>
 803d570:	4680      	mov	r8, r0
 803d572:	4607      	mov	r7, r0
 803d574:	9b01      	ldr	r3, [sp, #4]
 803d576:	3301      	adds	r3, #1
 803d578:	9301      	str	r3, [sp, #4]
 803d57a:	e775      	b.n	803d468 <_dtoa_r+0xa08>
 803d57c:	f000 fc8c 	bl	803de98 <__multadd>
 803d580:	4639      	mov	r1, r7
 803d582:	4680      	mov	r8, r0
 803d584:	2300      	movs	r3, #0
 803d586:	220a      	movs	r2, #10
 803d588:	4620      	mov	r0, r4
 803d58a:	f000 fc85 	bl	803de98 <__multadd>
 803d58e:	4607      	mov	r7, r0
 803d590:	e7f0      	b.n	803d574 <_dtoa_r+0xb14>
 803d592:	f1b9 0f00 	cmp.w	r9, #0
 803d596:	9a00      	ldr	r2, [sp, #0]
 803d598:	bfcc      	ite	gt
 803d59a:	464d      	movgt	r5, r9
 803d59c:	2501      	movle	r5, #1
 803d59e:	4415      	add	r5, r2
 803d5a0:	f04f 0800 	mov.w	r8, #0
 803d5a4:	4659      	mov	r1, fp
 803d5a6:	2201      	movs	r2, #1
 803d5a8:	4620      	mov	r0, r4
 803d5aa:	9301      	str	r3, [sp, #4]
 803d5ac:	f000 fe6e 	bl	803e28c <__lshift>
 803d5b0:	4631      	mov	r1, r6
 803d5b2:	4683      	mov	fp, r0
 803d5b4:	f000 fed6 	bl	803e364 <__mcmp>
 803d5b8:	2800      	cmp	r0, #0
 803d5ba:	dcb2      	bgt.n	803d522 <_dtoa_r+0xac2>
 803d5bc:	d102      	bne.n	803d5c4 <_dtoa_r+0xb64>
 803d5be:	9b01      	ldr	r3, [sp, #4]
 803d5c0:	07db      	lsls	r3, r3, #31
 803d5c2:	d4ae      	bmi.n	803d522 <_dtoa_r+0xac2>
 803d5c4:	462b      	mov	r3, r5
 803d5c6:	461d      	mov	r5, r3
 803d5c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 803d5cc:	2a30      	cmp	r2, #48	; 0x30
 803d5ce:	d0fa      	beq.n	803d5c6 <_dtoa_r+0xb66>
 803d5d0:	e6f7      	b.n	803d3c2 <_dtoa_r+0x962>
 803d5d2:	9a00      	ldr	r2, [sp, #0]
 803d5d4:	429a      	cmp	r2, r3
 803d5d6:	d1a5      	bne.n	803d524 <_dtoa_r+0xac4>
 803d5d8:	f10a 0a01 	add.w	sl, sl, #1
 803d5dc:	2331      	movs	r3, #49	; 0x31
 803d5de:	e779      	b.n	803d4d4 <_dtoa_r+0xa74>
 803d5e0:	4b13      	ldr	r3, [pc, #76]	; (803d630 <_dtoa_r+0xbd0>)
 803d5e2:	f7ff baaf 	b.w	803cb44 <_dtoa_r+0xe4>
 803d5e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 803d5e8:	2b00      	cmp	r3, #0
 803d5ea:	f47f aa86 	bne.w	803cafa <_dtoa_r+0x9a>
 803d5ee:	4b11      	ldr	r3, [pc, #68]	; (803d634 <_dtoa_r+0xbd4>)
 803d5f0:	f7ff baa8 	b.w	803cb44 <_dtoa_r+0xe4>
 803d5f4:	f1b9 0f00 	cmp.w	r9, #0
 803d5f8:	dc03      	bgt.n	803d602 <_dtoa_r+0xba2>
 803d5fa:	9b05      	ldr	r3, [sp, #20]
 803d5fc:	2b02      	cmp	r3, #2
 803d5fe:	f73f aec9 	bgt.w	803d394 <_dtoa_r+0x934>
 803d602:	9d00      	ldr	r5, [sp, #0]
 803d604:	4631      	mov	r1, r6
 803d606:	4658      	mov	r0, fp
 803d608:	f7ff f99e 	bl	803c948 <quorem>
 803d60c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 803d610:	f805 3b01 	strb.w	r3, [r5], #1
 803d614:	9a00      	ldr	r2, [sp, #0]
 803d616:	1aaa      	subs	r2, r5, r2
 803d618:	4591      	cmp	r9, r2
 803d61a:	ddba      	ble.n	803d592 <_dtoa_r+0xb32>
 803d61c:	4659      	mov	r1, fp
 803d61e:	2300      	movs	r3, #0
 803d620:	220a      	movs	r2, #10
 803d622:	4620      	mov	r0, r4
 803d624:	f000 fc38 	bl	803de98 <__multadd>
 803d628:	4683      	mov	fp, r0
 803d62a:	e7eb      	b.n	803d604 <_dtoa_r+0xba4>
 803d62c:	0804023c 	.word	0x0804023c
 803d630:	08040038 	.word	0x08040038
 803d634:	080401b9 	.word	0x080401b9

0803d638 <_fstat_r>:
 803d638:	b538      	push	{r3, r4, r5, lr}
 803d63a:	4d07      	ldr	r5, [pc, #28]	; (803d658 <_fstat_r+0x20>)
 803d63c:	2300      	movs	r3, #0
 803d63e:	4604      	mov	r4, r0
 803d640:	4608      	mov	r0, r1
 803d642:	4611      	mov	r1, r2
 803d644:	602b      	str	r3, [r5, #0]
 803d646:	f7f5 f85e 	bl	8032706 <_fstat>
 803d64a:	1c43      	adds	r3, r0, #1
 803d64c:	d102      	bne.n	803d654 <_fstat_r+0x1c>
 803d64e:	682b      	ldr	r3, [r5, #0]
 803d650:	b103      	cbz	r3, 803d654 <_fstat_r+0x1c>
 803d652:	6023      	str	r3, [r4, #0]
 803d654:	bd38      	pop	{r3, r4, r5, pc}
 803d656:	bf00      	nop
 803d658:	20000b80 	.word	0x20000b80

0803d65c <rshift>:
 803d65c:	6903      	ldr	r3, [r0, #16]
 803d65e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 803d662:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 803d666:	ea4f 1261 	mov.w	r2, r1, asr #5
 803d66a:	f100 0414 	add.w	r4, r0, #20
 803d66e:	dd45      	ble.n	803d6fc <rshift+0xa0>
 803d670:	f011 011f 	ands.w	r1, r1, #31
 803d674:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 803d678:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 803d67c:	d10c      	bne.n	803d698 <rshift+0x3c>
 803d67e:	f100 0710 	add.w	r7, r0, #16
 803d682:	4629      	mov	r1, r5
 803d684:	42b1      	cmp	r1, r6
 803d686:	d334      	bcc.n	803d6f2 <rshift+0x96>
 803d688:	1a9b      	subs	r3, r3, r2
 803d68a:	009b      	lsls	r3, r3, #2
 803d68c:	1eea      	subs	r2, r5, #3
 803d68e:	4296      	cmp	r6, r2
 803d690:	bf38      	it	cc
 803d692:	2300      	movcc	r3, #0
 803d694:	4423      	add	r3, r4
 803d696:	e015      	b.n	803d6c4 <rshift+0x68>
 803d698:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 803d69c:	f1c1 0820 	rsb	r8, r1, #32
 803d6a0:	40cf      	lsrs	r7, r1
 803d6a2:	f105 0e04 	add.w	lr, r5, #4
 803d6a6:	46a1      	mov	r9, r4
 803d6a8:	4576      	cmp	r6, lr
 803d6aa:	46f4      	mov	ip, lr
 803d6ac:	d815      	bhi.n	803d6da <rshift+0x7e>
 803d6ae:	1a9b      	subs	r3, r3, r2
 803d6b0:	009a      	lsls	r2, r3, #2
 803d6b2:	3a04      	subs	r2, #4
 803d6b4:	3501      	adds	r5, #1
 803d6b6:	42ae      	cmp	r6, r5
 803d6b8:	bf38      	it	cc
 803d6ba:	2200      	movcc	r2, #0
 803d6bc:	18a3      	adds	r3, r4, r2
 803d6be:	50a7      	str	r7, [r4, r2]
 803d6c0:	b107      	cbz	r7, 803d6c4 <rshift+0x68>
 803d6c2:	3304      	adds	r3, #4
 803d6c4:	1b1a      	subs	r2, r3, r4
 803d6c6:	42a3      	cmp	r3, r4
 803d6c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 803d6cc:	bf08      	it	eq
 803d6ce:	2300      	moveq	r3, #0
 803d6d0:	6102      	str	r2, [r0, #16]
 803d6d2:	bf08      	it	eq
 803d6d4:	6143      	streq	r3, [r0, #20]
 803d6d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803d6da:	f8dc c000 	ldr.w	ip, [ip]
 803d6de:	fa0c fc08 	lsl.w	ip, ip, r8
 803d6e2:	ea4c 0707 	orr.w	r7, ip, r7
 803d6e6:	f849 7b04 	str.w	r7, [r9], #4
 803d6ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 803d6ee:	40cf      	lsrs	r7, r1
 803d6f0:	e7da      	b.n	803d6a8 <rshift+0x4c>
 803d6f2:	f851 cb04 	ldr.w	ip, [r1], #4
 803d6f6:	f847 cf04 	str.w	ip, [r7, #4]!
 803d6fa:	e7c3      	b.n	803d684 <rshift+0x28>
 803d6fc:	4623      	mov	r3, r4
 803d6fe:	e7e1      	b.n	803d6c4 <rshift+0x68>

0803d700 <__hexdig_fun>:
 803d700:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 803d704:	2b09      	cmp	r3, #9
 803d706:	d802      	bhi.n	803d70e <__hexdig_fun+0xe>
 803d708:	3820      	subs	r0, #32
 803d70a:	b2c0      	uxtb	r0, r0
 803d70c:	4770      	bx	lr
 803d70e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 803d712:	2b05      	cmp	r3, #5
 803d714:	d801      	bhi.n	803d71a <__hexdig_fun+0x1a>
 803d716:	3847      	subs	r0, #71	; 0x47
 803d718:	e7f7      	b.n	803d70a <__hexdig_fun+0xa>
 803d71a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 803d71e:	2b05      	cmp	r3, #5
 803d720:	d801      	bhi.n	803d726 <__hexdig_fun+0x26>
 803d722:	3827      	subs	r0, #39	; 0x27
 803d724:	e7f1      	b.n	803d70a <__hexdig_fun+0xa>
 803d726:	2000      	movs	r0, #0
 803d728:	4770      	bx	lr
	...

0803d72c <__gethex>:
 803d72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d730:	ed2d 8b02 	vpush	{d8}
 803d734:	b089      	sub	sp, #36	; 0x24
 803d736:	ee08 0a10 	vmov	s16, r0
 803d73a:	9304      	str	r3, [sp, #16]
 803d73c:	4bbc      	ldr	r3, [pc, #752]	; (803da30 <__gethex+0x304>)
 803d73e:	681b      	ldr	r3, [r3, #0]
 803d740:	9301      	str	r3, [sp, #4]
 803d742:	4618      	mov	r0, r3
 803d744:	468b      	mov	fp, r1
 803d746:	4690      	mov	r8, r2
 803d748:	f7e2 fd42 	bl	80201d0 <strlen>
 803d74c:	9b01      	ldr	r3, [sp, #4]
 803d74e:	f8db 2000 	ldr.w	r2, [fp]
 803d752:	4403      	add	r3, r0
 803d754:	4682      	mov	sl, r0
 803d756:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 803d75a:	9305      	str	r3, [sp, #20]
 803d75c:	1c93      	adds	r3, r2, #2
 803d75e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 803d762:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 803d766:	32fe      	adds	r2, #254	; 0xfe
 803d768:	18d1      	adds	r1, r2, r3
 803d76a:	461f      	mov	r7, r3
 803d76c:	f813 0b01 	ldrb.w	r0, [r3], #1
 803d770:	9100      	str	r1, [sp, #0]
 803d772:	2830      	cmp	r0, #48	; 0x30
 803d774:	d0f8      	beq.n	803d768 <__gethex+0x3c>
 803d776:	f7ff ffc3 	bl	803d700 <__hexdig_fun>
 803d77a:	4604      	mov	r4, r0
 803d77c:	2800      	cmp	r0, #0
 803d77e:	d13a      	bne.n	803d7f6 <__gethex+0xca>
 803d780:	9901      	ldr	r1, [sp, #4]
 803d782:	4652      	mov	r2, sl
 803d784:	4638      	mov	r0, r7
 803d786:	f7fe f9f8 	bl	803bb7a <strncmp>
 803d78a:	4605      	mov	r5, r0
 803d78c:	2800      	cmp	r0, #0
 803d78e:	d168      	bne.n	803d862 <__gethex+0x136>
 803d790:	f817 000a 	ldrb.w	r0, [r7, sl]
 803d794:	eb07 060a 	add.w	r6, r7, sl
 803d798:	f7ff ffb2 	bl	803d700 <__hexdig_fun>
 803d79c:	2800      	cmp	r0, #0
 803d79e:	d062      	beq.n	803d866 <__gethex+0x13a>
 803d7a0:	4633      	mov	r3, r6
 803d7a2:	7818      	ldrb	r0, [r3, #0]
 803d7a4:	2830      	cmp	r0, #48	; 0x30
 803d7a6:	461f      	mov	r7, r3
 803d7a8:	f103 0301 	add.w	r3, r3, #1
 803d7ac:	d0f9      	beq.n	803d7a2 <__gethex+0x76>
 803d7ae:	f7ff ffa7 	bl	803d700 <__hexdig_fun>
 803d7b2:	2301      	movs	r3, #1
 803d7b4:	fab0 f480 	clz	r4, r0
 803d7b8:	0964      	lsrs	r4, r4, #5
 803d7ba:	4635      	mov	r5, r6
 803d7bc:	9300      	str	r3, [sp, #0]
 803d7be:	463a      	mov	r2, r7
 803d7c0:	4616      	mov	r6, r2
 803d7c2:	3201      	adds	r2, #1
 803d7c4:	7830      	ldrb	r0, [r6, #0]
 803d7c6:	f7ff ff9b 	bl	803d700 <__hexdig_fun>
 803d7ca:	2800      	cmp	r0, #0
 803d7cc:	d1f8      	bne.n	803d7c0 <__gethex+0x94>
 803d7ce:	9901      	ldr	r1, [sp, #4]
 803d7d0:	4652      	mov	r2, sl
 803d7d2:	4630      	mov	r0, r6
 803d7d4:	f7fe f9d1 	bl	803bb7a <strncmp>
 803d7d8:	b980      	cbnz	r0, 803d7fc <__gethex+0xd0>
 803d7da:	b94d      	cbnz	r5, 803d7f0 <__gethex+0xc4>
 803d7dc:	eb06 050a 	add.w	r5, r6, sl
 803d7e0:	462a      	mov	r2, r5
 803d7e2:	4616      	mov	r6, r2
 803d7e4:	3201      	adds	r2, #1
 803d7e6:	7830      	ldrb	r0, [r6, #0]
 803d7e8:	f7ff ff8a 	bl	803d700 <__hexdig_fun>
 803d7ec:	2800      	cmp	r0, #0
 803d7ee:	d1f8      	bne.n	803d7e2 <__gethex+0xb6>
 803d7f0:	1bad      	subs	r5, r5, r6
 803d7f2:	00ad      	lsls	r5, r5, #2
 803d7f4:	e004      	b.n	803d800 <__gethex+0xd4>
 803d7f6:	2400      	movs	r4, #0
 803d7f8:	4625      	mov	r5, r4
 803d7fa:	e7e0      	b.n	803d7be <__gethex+0x92>
 803d7fc:	2d00      	cmp	r5, #0
 803d7fe:	d1f7      	bne.n	803d7f0 <__gethex+0xc4>
 803d800:	7833      	ldrb	r3, [r6, #0]
 803d802:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 803d806:	2b50      	cmp	r3, #80	; 0x50
 803d808:	d13b      	bne.n	803d882 <__gethex+0x156>
 803d80a:	7873      	ldrb	r3, [r6, #1]
 803d80c:	2b2b      	cmp	r3, #43	; 0x2b
 803d80e:	d02c      	beq.n	803d86a <__gethex+0x13e>
 803d810:	2b2d      	cmp	r3, #45	; 0x2d
 803d812:	d02e      	beq.n	803d872 <__gethex+0x146>
 803d814:	1c71      	adds	r1, r6, #1
 803d816:	f04f 0900 	mov.w	r9, #0
 803d81a:	7808      	ldrb	r0, [r1, #0]
 803d81c:	f7ff ff70 	bl	803d700 <__hexdig_fun>
 803d820:	1e43      	subs	r3, r0, #1
 803d822:	b2db      	uxtb	r3, r3
 803d824:	2b18      	cmp	r3, #24
 803d826:	d82c      	bhi.n	803d882 <__gethex+0x156>
 803d828:	f1a0 0210 	sub.w	r2, r0, #16
 803d82c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 803d830:	f7ff ff66 	bl	803d700 <__hexdig_fun>
 803d834:	1e43      	subs	r3, r0, #1
 803d836:	b2db      	uxtb	r3, r3
 803d838:	2b18      	cmp	r3, #24
 803d83a:	d91d      	bls.n	803d878 <__gethex+0x14c>
 803d83c:	f1b9 0f00 	cmp.w	r9, #0
 803d840:	d000      	beq.n	803d844 <__gethex+0x118>
 803d842:	4252      	negs	r2, r2
 803d844:	4415      	add	r5, r2
 803d846:	f8cb 1000 	str.w	r1, [fp]
 803d84a:	b1e4      	cbz	r4, 803d886 <__gethex+0x15a>
 803d84c:	9b00      	ldr	r3, [sp, #0]
 803d84e:	2b00      	cmp	r3, #0
 803d850:	bf14      	ite	ne
 803d852:	2700      	movne	r7, #0
 803d854:	2706      	moveq	r7, #6
 803d856:	4638      	mov	r0, r7
 803d858:	b009      	add	sp, #36	; 0x24
 803d85a:	ecbd 8b02 	vpop	{d8}
 803d85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803d862:	463e      	mov	r6, r7
 803d864:	4625      	mov	r5, r4
 803d866:	2401      	movs	r4, #1
 803d868:	e7ca      	b.n	803d800 <__gethex+0xd4>
 803d86a:	f04f 0900 	mov.w	r9, #0
 803d86e:	1cb1      	adds	r1, r6, #2
 803d870:	e7d3      	b.n	803d81a <__gethex+0xee>
 803d872:	f04f 0901 	mov.w	r9, #1
 803d876:	e7fa      	b.n	803d86e <__gethex+0x142>
 803d878:	230a      	movs	r3, #10
 803d87a:	fb03 0202 	mla	r2, r3, r2, r0
 803d87e:	3a10      	subs	r2, #16
 803d880:	e7d4      	b.n	803d82c <__gethex+0x100>
 803d882:	4631      	mov	r1, r6
 803d884:	e7df      	b.n	803d846 <__gethex+0x11a>
 803d886:	1bf3      	subs	r3, r6, r7
 803d888:	3b01      	subs	r3, #1
 803d88a:	4621      	mov	r1, r4
 803d88c:	2b07      	cmp	r3, #7
 803d88e:	dc0b      	bgt.n	803d8a8 <__gethex+0x17c>
 803d890:	ee18 0a10 	vmov	r0, s16
 803d894:	f000 fa9e 	bl	803ddd4 <_Balloc>
 803d898:	4604      	mov	r4, r0
 803d89a:	b940      	cbnz	r0, 803d8ae <__gethex+0x182>
 803d89c:	4b65      	ldr	r3, [pc, #404]	; (803da34 <__gethex+0x308>)
 803d89e:	4602      	mov	r2, r0
 803d8a0:	21de      	movs	r1, #222	; 0xde
 803d8a2:	4865      	ldr	r0, [pc, #404]	; (803da38 <__gethex+0x30c>)
 803d8a4:	f001 f8e6 	bl	803ea74 <__assert_func>
 803d8a8:	3101      	adds	r1, #1
 803d8aa:	105b      	asrs	r3, r3, #1
 803d8ac:	e7ee      	b.n	803d88c <__gethex+0x160>
 803d8ae:	f100 0914 	add.w	r9, r0, #20
 803d8b2:	f04f 0b00 	mov.w	fp, #0
 803d8b6:	f1ca 0301 	rsb	r3, sl, #1
 803d8ba:	f8cd 9008 	str.w	r9, [sp, #8]
 803d8be:	f8cd b000 	str.w	fp, [sp]
 803d8c2:	9306      	str	r3, [sp, #24]
 803d8c4:	42b7      	cmp	r7, r6
 803d8c6:	d340      	bcc.n	803d94a <__gethex+0x21e>
 803d8c8:	9802      	ldr	r0, [sp, #8]
 803d8ca:	9b00      	ldr	r3, [sp, #0]
 803d8cc:	f840 3b04 	str.w	r3, [r0], #4
 803d8d0:	eba0 0009 	sub.w	r0, r0, r9
 803d8d4:	1080      	asrs	r0, r0, #2
 803d8d6:	0146      	lsls	r6, r0, #5
 803d8d8:	6120      	str	r0, [r4, #16]
 803d8da:	4618      	mov	r0, r3
 803d8dc:	f000 fb70 	bl	803dfc0 <__hi0bits>
 803d8e0:	1a30      	subs	r0, r6, r0
 803d8e2:	f8d8 6000 	ldr.w	r6, [r8]
 803d8e6:	42b0      	cmp	r0, r6
 803d8e8:	dd63      	ble.n	803d9b2 <__gethex+0x286>
 803d8ea:	1b87      	subs	r7, r0, r6
 803d8ec:	4639      	mov	r1, r7
 803d8ee:	4620      	mov	r0, r4
 803d8f0:	f000 ff0a 	bl	803e708 <__any_on>
 803d8f4:	4682      	mov	sl, r0
 803d8f6:	b1a8      	cbz	r0, 803d924 <__gethex+0x1f8>
 803d8f8:	1e7b      	subs	r3, r7, #1
 803d8fa:	1159      	asrs	r1, r3, #5
 803d8fc:	f003 021f 	and.w	r2, r3, #31
 803d900:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 803d904:	f04f 0a01 	mov.w	sl, #1
 803d908:	fa0a f202 	lsl.w	r2, sl, r2
 803d90c:	420a      	tst	r2, r1
 803d90e:	d009      	beq.n	803d924 <__gethex+0x1f8>
 803d910:	4553      	cmp	r3, sl
 803d912:	dd05      	ble.n	803d920 <__gethex+0x1f4>
 803d914:	1eb9      	subs	r1, r7, #2
 803d916:	4620      	mov	r0, r4
 803d918:	f000 fef6 	bl	803e708 <__any_on>
 803d91c:	2800      	cmp	r0, #0
 803d91e:	d145      	bne.n	803d9ac <__gethex+0x280>
 803d920:	f04f 0a02 	mov.w	sl, #2
 803d924:	4639      	mov	r1, r7
 803d926:	4620      	mov	r0, r4
 803d928:	f7ff fe98 	bl	803d65c <rshift>
 803d92c:	443d      	add	r5, r7
 803d92e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 803d932:	42ab      	cmp	r3, r5
 803d934:	da4c      	bge.n	803d9d0 <__gethex+0x2a4>
 803d936:	ee18 0a10 	vmov	r0, s16
 803d93a:	4621      	mov	r1, r4
 803d93c:	f000 fa8a 	bl	803de54 <_Bfree>
 803d940:	9a14      	ldr	r2, [sp, #80]	; 0x50
 803d942:	2300      	movs	r3, #0
 803d944:	6013      	str	r3, [r2, #0]
 803d946:	27a3      	movs	r7, #163	; 0xa3
 803d948:	e785      	b.n	803d856 <__gethex+0x12a>
 803d94a:	1e73      	subs	r3, r6, #1
 803d94c:	9a05      	ldr	r2, [sp, #20]
 803d94e:	9303      	str	r3, [sp, #12]
 803d950:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 803d954:	4293      	cmp	r3, r2
 803d956:	d019      	beq.n	803d98c <__gethex+0x260>
 803d958:	f1bb 0f20 	cmp.w	fp, #32
 803d95c:	d107      	bne.n	803d96e <__gethex+0x242>
 803d95e:	9b02      	ldr	r3, [sp, #8]
 803d960:	9a00      	ldr	r2, [sp, #0]
 803d962:	f843 2b04 	str.w	r2, [r3], #4
 803d966:	9302      	str	r3, [sp, #8]
 803d968:	2300      	movs	r3, #0
 803d96a:	9300      	str	r3, [sp, #0]
 803d96c:	469b      	mov	fp, r3
 803d96e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 803d972:	f7ff fec5 	bl	803d700 <__hexdig_fun>
 803d976:	9b00      	ldr	r3, [sp, #0]
 803d978:	f000 000f 	and.w	r0, r0, #15
 803d97c:	fa00 f00b 	lsl.w	r0, r0, fp
 803d980:	4303      	orrs	r3, r0
 803d982:	9300      	str	r3, [sp, #0]
 803d984:	f10b 0b04 	add.w	fp, fp, #4
 803d988:	9b03      	ldr	r3, [sp, #12]
 803d98a:	e00d      	b.n	803d9a8 <__gethex+0x27c>
 803d98c:	9b03      	ldr	r3, [sp, #12]
 803d98e:	9a06      	ldr	r2, [sp, #24]
 803d990:	4413      	add	r3, r2
 803d992:	42bb      	cmp	r3, r7
 803d994:	d3e0      	bcc.n	803d958 <__gethex+0x22c>
 803d996:	4618      	mov	r0, r3
 803d998:	9901      	ldr	r1, [sp, #4]
 803d99a:	9307      	str	r3, [sp, #28]
 803d99c:	4652      	mov	r2, sl
 803d99e:	f7fe f8ec 	bl	803bb7a <strncmp>
 803d9a2:	9b07      	ldr	r3, [sp, #28]
 803d9a4:	2800      	cmp	r0, #0
 803d9a6:	d1d7      	bne.n	803d958 <__gethex+0x22c>
 803d9a8:	461e      	mov	r6, r3
 803d9aa:	e78b      	b.n	803d8c4 <__gethex+0x198>
 803d9ac:	f04f 0a03 	mov.w	sl, #3
 803d9b0:	e7b8      	b.n	803d924 <__gethex+0x1f8>
 803d9b2:	da0a      	bge.n	803d9ca <__gethex+0x29e>
 803d9b4:	1a37      	subs	r7, r6, r0
 803d9b6:	4621      	mov	r1, r4
 803d9b8:	ee18 0a10 	vmov	r0, s16
 803d9bc:	463a      	mov	r2, r7
 803d9be:	f000 fc65 	bl	803e28c <__lshift>
 803d9c2:	1bed      	subs	r5, r5, r7
 803d9c4:	4604      	mov	r4, r0
 803d9c6:	f100 0914 	add.w	r9, r0, #20
 803d9ca:	f04f 0a00 	mov.w	sl, #0
 803d9ce:	e7ae      	b.n	803d92e <__gethex+0x202>
 803d9d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 803d9d4:	42a8      	cmp	r0, r5
 803d9d6:	dd72      	ble.n	803dabe <__gethex+0x392>
 803d9d8:	1b45      	subs	r5, r0, r5
 803d9da:	42ae      	cmp	r6, r5
 803d9dc:	dc36      	bgt.n	803da4c <__gethex+0x320>
 803d9de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 803d9e2:	2b02      	cmp	r3, #2
 803d9e4:	d02a      	beq.n	803da3c <__gethex+0x310>
 803d9e6:	2b03      	cmp	r3, #3
 803d9e8:	d02c      	beq.n	803da44 <__gethex+0x318>
 803d9ea:	2b01      	cmp	r3, #1
 803d9ec:	d115      	bne.n	803da1a <__gethex+0x2ee>
 803d9ee:	42ae      	cmp	r6, r5
 803d9f0:	d113      	bne.n	803da1a <__gethex+0x2ee>
 803d9f2:	2e01      	cmp	r6, #1
 803d9f4:	d10b      	bne.n	803da0e <__gethex+0x2e2>
 803d9f6:	9a04      	ldr	r2, [sp, #16]
 803d9f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 803d9fc:	6013      	str	r3, [r2, #0]
 803d9fe:	2301      	movs	r3, #1
 803da00:	6123      	str	r3, [r4, #16]
 803da02:	f8c9 3000 	str.w	r3, [r9]
 803da06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 803da08:	2762      	movs	r7, #98	; 0x62
 803da0a:	601c      	str	r4, [r3, #0]
 803da0c:	e723      	b.n	803d856 <__gethex+0x12a>
 803da0e:	1e71      	subs	r1, r6, #1
 803da10:	4620      	mov	r0, r4
 803da12:	f000 fe79 	bl	803e708 <__any_on>
 803da16:	2800      	cmp	r0, #0
 803da18:	d1ed      	bne.n	803d9f6 <__gethex+0x2ca>
 803da1a:	ee18 0a10 	vmov	r0, s16
 803da1e:	4621      	mov	r1, r4
 803da20:	f000 fa18 	bl	803de54 <_Bfree>
 803da24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 803da26:	2300      	movs	r3, #0
 803da28:	6013      	str	r3, [r2, #0]
 803da2a:	2750      	movs	r7, #80	; 0x50
 803da2c:	e713      	b.n	803d856 <__gethex+0x12a>
 803da2e:	bf00      	nop
 803da30:	080402b8 	.word	0x080402b8
 803da34:	0804023c 	.word	0x0804023c
 803da38:	0804024d 	.word	0x0804024d
 803da3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 803da3e:	2b00      	cmp	r3, #0
 803da40:	d1eb      	bne.n	803da1a <__gethex+0x2ee>
 803da42:	e7d8      	b.n	803d9f6 <__gethex+0x2ca>
 803da44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 803da46:	2b00      	cmp	r3, #0
 803da48:	d1d5      	bne.n	803d9f6 <__gethex+0x2ca>
 803da4a:	e7e6      	b.n	803da1a <__gethex+0x2ee>
 803da4c:	1e6f      	subs	r7, r5, #1
 803da4e:	f1ba 0f00 	cmp.w	sl, #0
 803da52:	d131      	bne.n	803dab8 <__gethex+0x38c>
 803da54:	b127      	cbz	r7, 803da60 <__gethex+0x334>
 803da56:	4639      	mov	r1, r7
 803da58:	4620      	mov	r0, r4
 803da5a:	f000 fe55 	bl	803e708 <__any_on>
 803da5e:	4682      	mov	sl, r0
 803da60:	117b      	asrs	r3, r7, #5
 803da62:	2101      	movs	r1, #1
 803da64:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 803da68:	f007 071f 	and.w	r7, r7, #31
 803da6c:	fa01 f707 	lsl.w	r7, r1, r7
 803da70:	421f      	tst	r7, r3
 803da72:	4629      	mov	r1, r5
 803da74:	4620      	mov	r0, r4
 803da76:	bf18      	it	ne
 803da78:	f04a 0a02 	orrne.w	sl, sl, #2
 803da7c:	1b76      	subs	r6, r6, r5
 803da7e:	f7ff fded 	bl	803d65c <rshift>
 803da82:	f8d8 5004 	ldr.w	r5, [r8, #4]
 803da86:	2702      	movs	r7, #2
 803da88:	f1ba 0f00 	cmp.w	sl, #0
 803da8c:	d048      	beq.n	803db20 <__gethex+0x3f4>
 803da8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 803da92:	2b02      	cmp	r3, #2
 803da94:	d015      	beq.n	803dac2 <__gethex+0x396>
 803da96:	2b03      	cmp	r3, #3
 803da98:	d017      	beq.n	803daca <__gethex+0x39e>
 803da9a:	2b01      	cmp	r3, #1
 803da9c:	d109      	bne.n	803dab2 <__gethex+0x386>
 803da9e:	f01a 0f02 	tst.w	sl, #2
 803daa2:	d006      	beq.n	803dab2 <__gethex+0x386>
 803daa4:	f8d9 0000 	ldr.w	r0, [r9]
 803daa8:	ea4a 0a00 	orr.w	sl, sl, r0
 803daac:	f01a 0f01 	tst.w	sl, #1
 803dab0:	d10e      	bne.n	803dad0 <__gethex+0x3a4>
 803dab2:	f047 0710 	orr.w	r7, r7, #16
 803dab6:	e033      	b.n	803db20 <__gethex+0x3f4>
 803dab8:	f04f 0a01 	mov.w	sl, #1
 803dabc:	e7d0      	b.n	803da60 <__gethex+0x334>
 803dabe:	2701      	movs	r7, #1
 803dac0:	e7e2      	b.n	803da88 <__gethex+0x35c>
 803dac2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 803dac4:	f1c3 0301 	rsb	r3, r3, #1
 803dac8:	9315      	str	r3, [sp, #84]	; 0x54
 803daca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 803dacc:	2b00      	cmp	r3, #0
 803dace:	d0f0      	beq.n	803dab2 <__gethex+0x386>
 803dad0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 803dad4:	f104 0314 	add.w	r3, r4, #20
 803dad8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 803dadc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 803dae0:	f04f 0c00 	mov.w	ip, #0
 803dae4:	4618      	mov	r0, r3
 803dae6:	f853 2b04 	ldr.w	r2, [r3], #4
 803daea:	f1b2 3fff 	cmp.w	r2, #4294967295
 803daee:	d01c      	beq.n	803db2a <__gethex+0x3fe>
 803daf0:	3201      	adds	r2, #1
 803daf2:	6002      	str	r2, [r0, #0]
 803daf4:	2f02      	cmp	r7, #2
 803daf6:	f104 0314 	add.w	r3, r4, #20
 803dafa:	d13f      	bne.n	803db7c <__gethex+0x450>
 803dafc:	f8d8 2000 	ldr.w	r2, [r8]
 803db00:	3a01      	subs	r2, #1
 803db02:	42b2      	cmp	r2, r6
 803db04:	d10a      	bne.n	803db1c <__gethex+0x3f0>
 803db06:	1171      	asrs	r1, r6, #5
 803db08:	2201      	movs	r2, #1
 803db0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 803db0e:	f006 061f 	and.w	r6, r6, #31
 803db12:	fa02 f606 	lsl.w	r6, r2, r6
 803db16:	421e      	tst	r6, r3
 803db18:	bf18      	it	ne
 803db1a:	4617      	movne	r7, r2
 803db1c:	f047 0720 	orr.w	r7, r7, #32
 803db20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 803db22:	601c      	str	r4, [r3, #0]
 803db24:	9b04      	ldr	r3, [sp, #16]
 803db26:	601d      	str	r5, [r3, #0]
 803db28:	e695      	b.n	803d856 <__gethex+0x12a>
 803db2a:	4299      	cmp	r1, r3
 803db2c:	f843 cc04 	str.w	ip, [r3, #-4]
 803db30:	d8d8      	bhi.n	803dae4 <__gethex+0x3b8>
 803db32:	68a3      	ldr	r3, [r4, #8]
 803db34:	459b      	cmp	fp, r3
 803db36:	db19      	blt.n	803db6c <__gethex+0x440>
 803db38:	6861      	ldr	r1, [r4, #4]
 803db3a:	ee18 0a10 	vmov	r0, s16
 803db3e:	3101      	adds	r1, #1
 803db40:	f000 f948 	bl	803ddd4 <_Balloc>
 803db44:	4681      	mov	r9, r0
 803db46:	b918      	cbnz	r0, 803db50 <__gethex+0x424>
 803db48:	4b1a      	ldr	r3, [pc, #104]	; (803dbb4 <__gethex+0x488>)
 803db4a:	4602      	mov	r2, r0
 803db4c:	2184      	movs	r1, #132	; 0x84
 803db4e:	e6a8      	b.n	803d8a2 <__gethex+0x176>
 803db50:	6922      	ldr	r2, [r4, #16]
 803db52:	3202      	adds	r2, #2
 803db54:	f104 010c 	add.w	r1, r4, #12
 803db58:	0092      	lsls	r2, r2, #2
 803db5a:	300c      	adds	r0, #12
 803db5c:	f7fd f85a 	bl	803ac14 <memcpy>
 803db60:	4621      	mov	r1, r4
 803db62:	ee18 0a10 	vmov	r0, s16
 803db66:	f000 f975 	bl	803de54 <_Bfree>
 803db6a:	464c      	mov	r4, r9
 803db6c:	6923      	ldr	r3, [r4, #16]
 803db6e:	1c5a      	adds	r2, r3, #1
 803db70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 803db74:	6122      	str	r2, [r4, #16]
 803db76:	2201      	movs	r2, #1
 803db78:	615a      	str	r2, [r3, #20]
 803db7a:	e7bb      	b.n	803daf4 <__gethex+0x3c8>
 803db7c:	6922      	ldr	r2, [r4, #16]
 803db7e:	455a      	cmp	r2, fp
 803db80:	dd0b      	ble.n	803db9a <__gethex+0x46e>
 803db82:	2101      	movs	r1, #1
 803db84:	4620      	mov	r0, r4
 803db86:	f7ff fd69 	bl	803d65c <rshift>
 803db8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 803db8e:	3501      	adds	r5, #1
 803db90:	42ab      	cmp	r3, r5
 803db92:	f6ff aed0 	blt.w	803d936 <__gethex+0x20a>
 803db96:	2701      	movs	r7, #1
 803db98:	e7c0      	b.n	803db1c <__gethex+0x3f0>
 803db9a:	f016 061f 	ands.w	r6, r6, #31
 803db9e:	d0fa      	beq.n	803db96 <__gethex+0x46a>
 803dba0:	449a      	add	sl, r3
 803dba2:	f1c6 0620 	rsb	r6, r6, #32
 803dba6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 803dbaa:	f000 fa09 	bl	803dfc0 <__hi0bits>
 803dbae:	42b0      	cmp	r0, r6
 803dbb0:	dbe7      	blt.n	803db82 <__gethex+0x456>
 803dbb2:	e7f0      	b.n	803db96 <__gethex+0x46a>
 803dbb4:	0804023c 	.word	0x0804023c

0803dbb8 <L_shift>:
 803dbb8:	f1c2 0208 	rsb	r2, r2, #8
 803dbbc:	0092      	lsls	r2, r2, #2
 803dbbe:	b570      	push	{r4, r5, r6, lr}
 803dbc0:	f1c2 0620 	rsb	r6, r2, #32
 803dbc4:	6843      	ldr	r3, [r0, #4]
 803dbc6:	6804      	ldr	r4, [r0, #0]
 803dbc8:	fa03 f506 	lsl.w	r5, r3, r6
 803dbcc:	432c      	orrs	r4, r5
 803dbce:	40d3      	lsrs	r3, r2
 803dbd0:	6004      	str	r4, [r0, #0]
 803dbd2:	f840 3f04 	str.w	r3, [r0, #4]!
 803dbd6:	4288      	cmp	r0, r1
 803dbd8:	d3f4      	bcc.n	803dbc4 <L_shift+0xc>
 803dbda:	bd70      	pop	{r4, r5, r6, pc}

0803dbdc <__match>:
 803dbdc:	b530      	push	{r4, r5, lr}
 803dbde:	6803      	ldr	r3, [r0, #0]
 803dbe0:	3301      	adds	r3, #1
 803dbe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 803dbe6:	b914      	cbnz	r4, 803dbee <__match+0x12>
 803dbe8:	6003      	str	r3, [r0, #0]
 803dbea:	2001      	movs	r0, #1
 803dbec:	bd30      	pop	{r4, r5, pc}
 803dbee:	f813 2b01 	ldrb.w	r2, [r3], #1
 803dbf2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 803dbf6:	2d19      	cmp	r5, #25
 803dbf8:	bf98      	it	ls
 803dbfa:	3220      	addls	r2, #32
 803dbfc:	42a2      	cmp	r2, r4
 803dbfe:	d0f0      	beq.n	803dbe2 <__match+0x6>
 803dc00:	2000      	movs	r0, #0
 803dc02:	e7f3      	b.n	803dbec <__match+0x10>

0803dc04 <__hexnan>:
 803dc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803dc08:	680b      	ldr	r3, [r1, #0]
 803dc0a:	6801      	ldr	r1, [r0, #0]
 803dc0c:	115e      	asrs	r6, r3, #5
 803dc0e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 803dc12:	f013 031f 	ands.w	r3, r3, #31
 803dc16:	b087      	sub	sp, #28
 803dc18:	bf18      	it	ne
 803dc1a:	3604      	addne	r6, #4
 803dc1c:	2500      	movs	r5, #0
 803dc1e:	1f37      	subs	r7, r6, #4
 803dc20:	4682      	mov	sl, r0
 803dc22:	4690      	mov	r8, r2
 803dc24:	9301      	str	r3, [sp, #4]
 803dc26:	f846 5c04 	str.w	r5, [r6, #-4]
 803dc2a:	46b9      	mov	r9, r7
 803dc2c:	463c      	mov	r4, r7
 803dc2e:	9502      	str	r5, [sp, #8]
 803dc30:	46ab      	mov	fp, r5
 803dc32:	784a      	ldrb	r2, [r1, #1]
 803dc34:	1c4b      	adds	r3, r1, #1
 803dc36:	9303      	str	r3, [sp, #12]
 803dc38:	b342      	cbz	r2, 803dc8c <__hexnan+0x88>
 803dc3a:	4610      	mov	r0, r2
 803dc3c:	9105      	str	r1, [sp, #20]
 803dc3e:	9204      	str	r2, [sp, #16]
 803dc40:	f7ff fd5e 	bl	803d700 <__hexdig_fun>
 803dc44:	2800      	cmp	r0, #0
 803dc46:	d14f      	bne.n	803dce8 <__hexnan+0xe4>
 803dc48:	9a04      	ldr	r2, [sp, #16]
 803dc4a:	9905      	ldr	r1, [sp, #20]
 803dc4c:	2a20      	cmp	r2, #32
 803dc4e:	d818      	bhi.n	803dc82 <__hexnan+0x7e>
 803dc50:	9b02      	ldr	r3, [sp, #8]
 803dc52:	459b      	cmp	fp, r3
 803dc54:	dd13      	ble.n	803dc7e <__hexnan+0x7a>
 803dc56:	454c      	cmp	r4, r9
 803dc58:	d206      	bcs.n	803dc68 <__hexnan+0x64>
 803dc5a:	2d07      	cmp	r5, #7
 803dc5c:	dc04      	bgt.n	803dc68 <__hexnan+0x64>
 803dc5e:	462a      	mov	r2, r5
 803dc60:	4649      	mov	r1, r9
 803dc62:	4620      	mov	r0, r4
 803dc64:	f7ff ffa8 	bl	803dbb8 <L_shift>
 803dc68:	4544      	cmp	r4, r8
 803dc6a:	d950      	bls.n	803dd0e <__hexnan+0x10a>
 803dc6c:	2300      	movs	r3, #0
 803dc6e:	f1a4 0904 	sub.w	r9, r4, #4
 803dc72:	f844 3c04 	str.w	r3, [r4, #-4]
 803dc76:	f8cd b008 	str.w	fp, [sp, #8]
 803dc7a:	464c      	mov	r4, r9
 803dc7c:	461d      	mov	r5, r3
 803dc7e:	9903      	ldr	r1, [sp, #12]
 803dc80:	e7d7      	b.n	803dc32 <__hexnan+0x2e>
 803dc82:	2a29      	cmp	r2, #41	; 0x29
 803dc84:	d156      	bne.n	803dd34 <__hexnan+0x130>
 803dc86:	3102      	adds	r1, #2
 803dc88:	f8ca 1000 	str.w	r1, [sl]
 803dc8c:	f1bb 0f00 	cmp.w	fp, #0
 803dc90:	d050      	beq.n	803dd34 <__hexnan+0x130>
 803dc92:	454c      	cmp	r4, r9
 803dc94:	d206      	bcs.n	803dca4 <__hexnan+0xa0>
 803dc96:	2d07      	cmp	r5, #7
 803dc98:	dc04      	bgt.n	803dca4 <__hexnan+0xa0>
 803dc9a:	462a      	mov	r2, r5
 803dc9c:	4649      	mov	r1, r9
 803dc9e:	4620      	mov	r0, r4
 803dca0:	f7ff ff8a 	bl	803dbb8 <L_shift>
 803dca4:	4544      	cmp	r4, r8
 803dca6:	d934      	bls.n	803dd12 <__hexnan+0x10e>
 803dca8:	f1a8 0204 	sub.w	r2, r8, #4
 803dcac:	4623      	mov	r3, r4
 803dcae:	f853 1b04 	ldr.w	r1, [r3], #4
 803dcb2:	f842 1f04 	str.w	r1, [r2, #4]!
 803dcb6:	429f      	cmp	r7, r3
 803dcb8:	d2f9      	bcs.n	803dcae <__hexnan+0xaa>
 803dcba:	1b3b      	subs	r3, r7, r4
 803dcbc:	f023 0303 	bic.w	r3, r3, #3
 803dcc0:	3304      	adds	r3, #4
 803dcc2:	3401      	adds	r4, #1
 803dcc4:	3e03      	subs	r6, #3
 803dcc6:	42b4      	cmp	r4, r6
 803dcc8:	bf88      	it	hi
 803dcca:	2304      	movhi	r3, #4
 803dccc:	4443      	add	r3, r8
 803dcce:	2200      	movs	r2, #0
 803dcd0:	f843 2b04 	str.w	r2, [r3], #4
 803dcd4:	429f      	cmp	r7, r3
 803dcd6:	d2fb      	bcs.n	803dcd0 <__hexnan+0xcc>
 803dcd8:	683b      	ldr	r3, [r7, #0]
 803dcda:	b91b      	cbnz	r3, 803dce4 <__hexnan+0xe0>
 803dcdc:	4547      	cmp	r7, r8
 803dcde:	d127      	bne.n	803dd30 <__hexnan+0x12c>
 803dce0:	2301      	movs	r3, #1
 803dce2:	603b      	str	r3, [r7, #0]
 803dce4:	2005      	movs	r0, #5
 803dce6:	e026      	b.n	803dd36 <__hexnan+0x132>
 803dce8:	3501      	adds	r5, #1
 803dcea:	2d08      	cmp	r5, #8
 803dcec:	f10b 0b01 	add.w	fp, fp, #1
 803dcf0:	dd06      	ble.n	803dd00 <__hexnan+0xfc>
 803dcf2:	4544      	cmp	r4, r8
 803dcf4:	d9c3      	bls.n	803dc7e <__hexnan+0x7a>
 803dcf6:	2300      	movs	r3, #0
 803dcf8:	f844 3c04 	str.w	r3, [r4, #-4]
 803dcfc:	2501      	movs	r5, #1
 803dcfe:	3c04      	subs	r4, #4
 803dd00:	6822      	ldr	r2, [r4, #0]
 803dd02:	f000 000f 	and.w	r0, r0, #15
 803dd06:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 803dd0a:	6022      	str	r2, [r4, #0]
 803dd0c:	e7b7      	b.n	803dc7e <__hexnan+0x7a>
 803dd0e:	2508      	movs	r5, #8
 803dd10:	e7b5      	b.n	803dc7e <__hexnan+0x7a>
 803dd12:	9b01      	ldr	r3, [sp, #4]
 803dd14:	2b00      	cmp	r3, #0
 803dd16:	d0df      	beq.n	803dcd8 <__hexnan+0xd4>
 803dd18:	f04f 32ff 	mov.w	r2, #4294967295
 803dd1c:	f1c3 0320 	rsb	r3, r3, #32
 803dd20:	fa22 f303 	lsr.w	r3, r2, r3
 803dd24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 803dd28:	401a      	ands	r2, r3
 803dd2a:	f846 2c04 	str.w	r2, [r6, #-4]
 803dd2e:	e7d3      	b.n	803dcd8 <__hexnan+0xd4>
 803dd30:	3f04      	subs	r7, #4
 803dd32:	e7d1      	b.n	803dcd8 <__hexnan+0xd4>
 803dd34:	2004      	movs	r0, #4
 803dd36:	b007      	add	sp, #28
 803dd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0803dd3c <_isatty_r>:
 803dd3c:	b538      	push	{r3, r4, r5, lr}
 803dd3e:	4d06      	ldr	r5, [pc, #24]	; (803dd58 <_isatty_r+0x1c>)
 803dd40:	2300      	movs	r3, #0
 803dd42:	4604      	mov	r4, r0
 803dd44:	4608      	mov	r0, r1
 803dd46:	602b      	str	r3, [r5, #0]
 803dd48:	f7f4 fced 	bl	8032726 <_isatty>
 803dd4c:	1c43      	adds	r3, r0, #1
 803dd4e:	d102      	bne.n	803dd56 <_isatty_r+0x1a>
 803dd50:	682b      	ldr	r3, [r5, #0]
 803dd52:	b103      	cbz	r3, 803dd56 <_isatty_r+0x1a>
 803dd54:	6023      	str	r3, [r4, #0]
 803dd56:	bd38      	pop	{r3, r4, r5, pc}
 803dd58:	20000b80 	.word	0x20000b80

0803dd5c <_localeconv_r>:
 803dd5c:	4800      	ldr	r0, [pc, #0]	; (803dd60 <_localeconv_r+0x4>)
 803dd5e:	4770      	bx	lr
 803dd60:	20000184 	.word	0x20000184

0803dd64 <_lseek_r>:
 803dd64:	b538      	push	{r3, r4, r5, lr}
 803dd66:	4d07      	ldr	r5, [pc, #28]	; (803dd84 <_lseek_r+0x20>)
 803dd68:	4604      	mov	r4, r0
 803dd6a:	4608      	mov	r0, r1
 803dd6c:	4611      	mov	r1, r2
 803dd6e:	2200      	movs	r2, #0
 803dd70:	602a      	str	r2, [r5, #0]
 803dd72:	461a      	mov	r2, r3
 803dd74:	f7f4 fce2 	bl	803273c <_lseek>
 803dd78:	1c43      	adds	r3, r0, #1
 803dd7a:	d102      	bne.n	803dd82 <_lseek_r+0x1e>
 803dd7c:	682b      	ldr	r3, [r5, #0]
 803dd7e:	b103      	cbz	r3, 803dd82 <_lseek_r+0x1e>
 803dd80:	6023      	str	r3, [r4, #0]
 803dd82:	bd38      	pop	{r3, r4, r5, pc}
 803dd84:	20000b80 	.word	0x20000b80

0803dd88 <malloc>:
 803dd88:	4b02      	ldr	r3, [pc, #8]	; (803dd94 <malloc+0xc>)
 803dd8a:	4601      	mov	r1, r0
 803dd8c:	6818      	ldr	r0, [r3, #0]
 803dd8e:	f7fc bfa7 	b.w	803ace0 <_malloc_r>
 803dd92:	bf00      	nop
 803dd94:	2000002c 	.word	0x2000002c

0803dd98 <__ascii_mbtowc>:
 803dd98:	b082      	sub	sp, #8
 803dd9a:	b901      	cbnz	r1, 803dd9e <__ascii_mbtowc+0x6>
 803dd9c:	a901      	add	r1, sp, #4
 803dd9e:	b142      	cbz	r2, 803ddb2 <__ascii_mbtowc+0x1a>
 803dda0:	b14b      	cbz	r3, 803ddb6 <__ascii_mbtowc+0x1e>
 803dda2:	7813      	ldrb	r3, [r2, #0]
 803dda4:	600b      	str	r3, [r1, #0]
 803dda6:	7812      	ldrb	r2, [r2, #0]
 803dda8:	1e10      	subs	r0, r2, #0
 803ddaa:	bf18      	it	ne
 803ddac:	2001      	movne	r0, #1
 803ddae:	b002      	add	sp, #8
 803ddb0:	4770      	bx	lr
 803ddb2:	4610      	mov	r0, r2
 803ddb4:	e7fb      	b.n	803ddae <__ascii_mbtowc+0x16>
 803ddb6:	f06f 0001 	mvn.w	r0, #1
 803ddba:	e7f8      	b.n	803ddae <__ascii_mbtowc+0x16>

0803ddbc <__malloc_lock>:
 803ddbc:	4801      	ldr	r0, [pc, #4]	; (803ddc4 <__malloc_lock+0x8>)
 803ddbe:	f7fc bec2 	b.w	803ab46 <__retarget_lock_acquire_recursive>
 803ddc2:	bf00      	nop
 803ddc4:	20000b78 	.word	0x20000b78

0803ddc8 <__malloc_unlock>:
 803ddc8:	4801      	ldr	r0, [pc, #4]	; (803ddd0 <__malloc_unlock+0x8>)
 803ddca:	f7fc bebd 	b.w	803ab48 <__retarget_lock_release_recursive>
 803ddce:	bf00      	nop
 803ddd0:	20000b78 	.word	0x20000b78

0803ddd4 <_Balloc>:
 803ddd4:	b570      	push	{r4, r5, r6, lr}
 803ddd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 803ddd8:	4604      	mov	r4, r0
 803ddda:	460d      	mov	r5, r1
 803dddc:	b976      	cbnz	r6, 803ddfc <_Balloc+0x28>
 803ddde:	2010      	movs	r0, #16
 803dde0:	f7ff ffd2 	bl	803dd88 <malloc>
 803dde4:	4602      	mov	r2, r0
 803dde6:	6260      	str	r0, [r4, #36]	; 0x24
 803dde8:	b920      	cbnz	r0, 803ddf4 <_Balloc+0x20>
 803ddea:	4b18      	ldr	r3, [pc, #96]	; (803de4c <_Balloc+0x78>)
 803ddec:	4818      	ldr	r0, [pc, #96]	; (803de50 <_Balloc+0x7c>)
 803ddee:	2166      	movs	r1, #102	; 0x66
 803ddf0:	f000 fe40 	bl	803ea74 <__assert_func>
 803ddf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 803ddf8:	6006      	str	r6, [r0, #0]
 803ddfa:	60c6      	str	r6, [r0, #12]
 803ddfc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 803ddfe:	68f3      	ldr	r3, [r6, #12]
 803de00:	b183      	cbz	r3, 803de24 <_Balloc+0x50>
 803de02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 803de04:	68db      	ldr	r3, [r3, #12]
 803de06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 803de0a:	b9b8      	cbnz	r0, 803de3c <_Balloc+0x68>
 803de0c:	2101      	movs	r1, #1
 803de0e:	fa01 f605 	lsl.w	r6, r1, r5
 803de12:	1d72      	adds	r2, r6, #5
 803de14:	0092      	lsls	r2, r2, #2
 803de16:	4620      	mov	r0, r4
 803de18:	f000 fc97 	bl	803e74a <_calloc_r>
 803de1c:	b160      	cbz	r0, 803de38 <_Balloc+0x64>
 803de1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 803de22:	e00e      	b.n	803de42 <_Balloc+0x6e>
 803de24:	2221      	movs	r2, #33	; 0x21
 803de26:	2104      	movs	r1, #4
 803de28:	4620      	mov	r0, r4
 803de2a:	f000 fc8e 	bl	803e74a <_calloc_r>
 803de2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 803de30:	60f0      	str	r0, [r6, #12]
 803de32:	68db      	ldr	r3, [r3, #12]
 803de34:	2b00      	cmp	r3, #0
 803de36:	d1e4      	bne.n	803de02 <_Balloc+0x2e>
 803de38:	2000      	movs	r0, #0
 803de3a:	bd70      	pop	{r4, r5, r6, pc}
 803de3c:	6802      	ldr	r2, [r0, #0]
 803de3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 803de42:	2300      	movs	r3, #0
 803de44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 803de48:	e7f7      	b.n	803de3a <_Balloc+0x66>
 803de4a:	bf00      	nop
 803de4c:	080401c6 	.word	0x080401c6
 803de50:	080402cc 	.word	0x080402cc

0803de54 <_Bfree>:
 803de54:	b570      	push	{r4, r5, r6, lr}
 803de56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 803de58:	4605      	mov	r5, r0
 803de5a:	460c      	mov	r4, r1
 803de5c:	b976      	cbnz	r6, 803de7c <_Bfree+0x28>
 803de5e:	2010      	movs	r0, #16
 803de60:	f7ff ff92 	bl	803dd88 <malloc>
 803de64:	4602      	mov	r2, r0
 803de66:	6268      	str	r0, [r5, #36]	; 0x24
 803de68:	b920      	cbnz	r0, 803de74 <_Bfree+0x20>
 803de6a:	4b09      	ldr	r3, [pc, #36]	; (803de90 <_Bfree+0x3c>)
 803de6c:	4809      	ldr	r0, [pc, #36]	; (803de94 <_Bfree+0x40>)
 803de6e:	218a      	movs	r1, #138	; 0x8a
 803de70:	f000 fe00 	bl	803ea74 <__assert_func>
 803de74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 803de78:	6006      	str	r6, [r0, #0]
 803de7a:	60c6      	str	r6, [r0, #12]
 803de7c:	b13c      	cbz	r4, 803de8e <_Bfree+0x3a>
 803de7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 803de80:	6862      	ldr	r2, [r4, #4]
 803de82:	68db      	ldr	r3, [r3, #12]
 803de84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 803de88:	6021      	str	r1, [r4, #0]
 803de8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 803de8e:	bd70      	pop	{r4, r5, r6, pc}
 803de90:	080401c6 	.word	0x080401c6
 803de94:	080402cc 	.word	0x080402cc

0803de98 <__multadd>:
 803de98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803de9c:	690e      	ldr	r6, [r1, #16]
 803de9e:	4607      	mov	r7, r0
 803dea0:	4698      	mov	r8, r3
 803dea2:	460c      	mov	r4, r1
 803dea4:	f101 0014 	add.w	r0, r1, #20
 803dea8:	2300      	movs	r3, #0
 803deaa:	6805      	ldr	r5, [r0, #0]
 803deac:	b2a9      	uxth	r1, r5
 803deae:	fb02 8101 	mla	r1, r2, r1, r8
 803deb2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 803deb6:	0c2d      	lsrs	r5, r5, #16
 803deb8:	fb02 c505 	mla	r5, r2, r5, ip
 803debc:	b289      	uxth	r1, r1
 803debe:	3301      	adds	r3, #1
 803dec0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 803dec4:	429e      	cmp	r6, r3
 803dec6:	f840 1b04 	str.w	r1, [r0], #4
 803deca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 803dece:	dcec      	bgt.n	803deaa <__multadd+0x12>
 803ded0:	f1b8 0f00 	cmp.w	r8, #0
 803ded4:	d022      	beq.n	803df1c <__multadd+0x84>
 803ded6:	68a3      	ldr	r3, [r4, #8]
 803ded8:	42b3      	cmp	r3, r6
 803deda:	dc19      	bgt.n	803df10 <__multadd+0x78>
 803dedc:	6861      	ldr	r1, [r4, #4]
 803dede:	4638      	mov	r0, r7
 803dee0:	3101      	adds	r1, #1
 803dee2:	f7ff ff77 	bl	803ddd4 <_Balloc>
 803dee6:	4605      	mov	r5, r0
 803dee8:	b928      	cbnz	r0, 803def6 <__multadd+0x5e>
 803deea:	4602      	mov	r2, r0
 803deec:	4b0d      	ldr	r3, [pc, #52]	; (803df24 <__multadd+0x8c>)
 803deee:	480e      	ldr	r0, [pc, #56]	; (803df28 <__multadd+0x90>)
 803def0:	21b5      	movs	r1, #181	; 0xb5
 803def2:	f000 fdbf 	bl	803ea74 <__assert_func>
 803def6:	6922      	ldr	r2, [r4, #16]
 803def8:	3202      	adds	r2, #2
 803defa:	f104 010c 	add.w	r1, r4, #12
 803defe:	0092      	lsls	r2, r2, #2
 803df00:	300c      	adds	r0, #12
 803df02:	f7fc fe87 	bl	803ac14 <memcpy>
 803df06:	4621      	mov	r1, r4
 803df08:	4638      	mov	r0, r7
 803df0a:	f7ff ffa3 	bl	803de54 <_Bfree>
 803df0e:	462c      	mov	r4, r5
 803df10:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 803df14:	3601      	adds	r6, #1
 803df16:	f8c3 8014 	str.w	r8, [r3, #20]
 803df1a:	6126      	str	r6, [r4, #16]
 803df1c:	4620      	mov	r0, r4
 803df1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803df22:	bf00      	nop
 803df24:	0804023c 	.word	0x0804023c
 803df28:	080402cc 	.word	0x080402cc

0803df2c <__s2b>:
 803df2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803df30:	460c      	mov	r4, r1
 803df32:	4615      	mov	r5, r2
 803df34:	461f      	mov	r7, r3
 803df36:	2209      	movs	r2, #9
 803df38:	3308      	adds	r3, #8
 803df3a:	4606      	mov	r6, r0
 803df3c:	fb93 f3f2 	sdiv	r3, r3, r2
 803df40:	2100      	movs	r1, #0
 803df42:	2201      	movs	r2, #1
 803df44:	429a      	cmp	r2, r3
 803df46:	db09      	blt.n	803df5c <__s2b+0x30>
 803df48:	4630      	mov	r0, r6
 803df4a:	f7ff ff43 	bl	803ddd4 <_Balloc>
 803df4e:	b940      	cbnz	r0, 803df62 <__s2b+0x36>
 803df50:	4602      	mov	r2, r0
 803df52:	4b19      	ldr	r3, [pc, #100]	; (803dfb8 <__s2b+0x8c>)
 803df54:	4819      	ldr	r0, [pc, #100]	; (803dfbc <__s2b+0x90>)
 803df56:	21ce      	movs	r1, #206	; 0xce
 803df58:	f000 fd8c 	bl	803ea74 <__assert_func>
 803df5c:	0052      	lsls	r2, r2, #1
 803df5e:	3101      	adds	r1, #1
 803df60:	e7f0      	b.n	803df44 <__s2b+0x18>
 803df62:	9b08      	ldr	r3, [sp, #32]
 803df64:	6143      	str	r3, [r0, #20]
 803df66:	2d09      	cmp	r5, #9
 803df68:	f04f 0301 	mov.w	r3, #1
 803df6c:	6103      	str	r3, [r0, #16]
 803df6e:	dd16      	ble.n	803df9e <__s2b+0x72>
 803df70:	f104 0909 	add.w	r9, r4, #9
 803df74:	46c8      	mov	r8, r9
 803df76:	442c      	add	r4, r5
 803df78:	f818 3b01 	ldrb.w	r3, [r8], #1
 803df7c:	4601      	mov	r1, r0
 803df7e:	3b30      	subs	r3, #48	; 0x30
 803df80:	220a      	movs	r2, #10
 803df82:	4630      	mov	r0, r6
 803df84:	f7ff ff88 	bl	803de98 <__multadd>
 803df88:	45a0      	cmp	r8, r4
 803df8a:	d1f5      	bne.n	803df78 <__s2b+0x4c>
 803df8c:	f1a5 0408 	sub.w	r4, r5, #8
 803df90:	444c      	add	r4, r9
 803df92:	1b2d      	subs	r5, r5, r4
 803df94:	1963      	adds	r3, r4, r5
 803df96:	42bb      	cmp	r3, r7
 803df98:	db04      	blt.n	803dfa4 <__s2b+0x78>
 803df9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803df9e:	340a      	adds	r4, #10
 803dfa0:	2509      	movs	r5, #9
 803dfa2:	e7f6      	b.n	803df92 <__s2b+0x66>
 803dfa4:	f814 3b01 	ldrb.w	r3, [r4], #1
 803dfa8:	4601      	mov	r1, r0
 803dfaa:	3b30      	subs	r3, #48	; 0x30
 803dfac:	220a      	movs	r2, #10
 803dfae:	4630      	mov	r0, r6
 803dfb0:	f7ff ff72 	bl	803de98 <__multadd>
 803dfb4:	e7ee      	b.n	803df94 <__s2b+0x68>
 803dfb6:	bf00      	nop
 803dfb8:	0804023c 	.word	0x0804023c
 803dfbc:	080402cc 	.word	0x080402cc

0803dfc0 <__hi0bits>:
 803dfc0:	0c03      	lsrs	r3, r0, #16
 803dfc2:	041b      	lsls	r3, r3, #16
 803dfc4:	b9d3      	cbnz	r3, 803dffc <__hi0bits+0x3c>
 803dfc6:	0400      	lsls	r0, r0, #16
 803dfc8:	2310      	movs	r3, #16
 803dfca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 803dfce:	bf04      	itt	eq
 803dfd0:	0200      	lsleq	r0, r0, #8
 803dfd2:	3308      	addeq	r3, #8
 803dfd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 803dfd8:	bf04      	itt	eq
 803dfda:	0100      	lsleq	r0, r0, #4
 803dfdc:	3304      	addeq	r3, #4
 803dfde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 803dfe2:	bf04      	itt	eq
 803dfe4:	0080      	lsleq	r0, r0, #2
 803dfe6:	3302      	addeq	r3, #2
 803dfe8:	2800      	cmp	r0, #0
 803dfea:	db05      	blt.n	803dff8 <__hi0bits+0x38>
 803dfec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 803dff0:	f103 0301 	add.w	r3, r3, #1
 803dff4:	bf08      	it	eq
 803dff6:	2320      	moveq	r3, #32
 803dff8:	4618      	mov	r0, r3
 803dffa:	4770      	bx	lr
 803dffc:	2300      	movs	r3, #0
 803dffe:	e7e4      	b.n	803dfca <__hi0bits+0xa>

0803e000 <__lo0bits>:
 803e000:	6803      	ldr	r3, [r0, #0]
 803e002:	f013 0207 	ands.w	r2, r3, #7
 803e006:	4601      	mov	r1, r0
 803e008:	d00b      	beq.n	803e022 <__lo0bits+0x22>
 803e00a:	07da      	lsls	r2, r3, #31
 803e00c:	d424      	bmi.n	803e058 <__lo0bits+0x58>
 803e00e:	0798      	lsls	r0, r3, #30
 803e010:	bf49      	itett	mi
 803e012:	085b      	lsrmi	r3, r3, #1
 803e014:	089b      	lsrpl	r3, r3, #2
 803e016:	2001      	movmi	r0, #1
 803e018:	600b      	strmi	r3, [r1, #0]
 803e01a:	bf5c      	itt	pl
 803e01c:	600b      	strpl	r3, [r1, #0]
 803e01e:	2002      	movpl	r0, #2
 803e020:	4770      	bx	lr
 803e022:	b298      	uxth	r0, r3
 803e024:	b9b0      	cbnz	r0, 803e054 <__lo0bits+0x54>
 803e026:	0c1b      	lsrs	r3, r3, #16
 803e028:	2010      	movs	r0, #16
 803e02a:	f013 0fff 	tst.w	r3, #255	; 0xff
 803e02e:	bf04      	itt	eq
 803e030:	0a1b      	lsreq	r3, r3, #8
 803e032:	3008      	addeq	r0, #8
 803e034:	071a      	lsls	r2, r3, #28
 803e036:	bf04      	itt	eq
 803e038:	091b      	lsreq	r3, r3, #4
 803e03a:	3004      	addeq	r0, #4
 803e03c:	079a      	lsls	r2, r3, #30
 803e03e:	bf04      	itt	eq
 803e040:	089b      	lsreq	r3, r3, #2
 803e042:	3002      	addeq	r0, #2
 803e044:	07da      	lsls	r2, r3, #31
 803e046:	d403      	bmi.n	803e050 <__lo0bits+0x50>
 803e048:	085b      	lsrs	r3, r3, #1
 803e04a:	f100 0001 	add.w	r0, r0, #1
 803e04e:	d005      	beq.n	803e05c <__lo0bits+0x5c>
 803e050:	600b      	str	r3, [r1, #0]
 803e052:	4770      	bx	lr
 803e054:	4610      	mov	r0, r2
 803e056:	e7e8      	b.n	803e02a <__lo0bits+0x2a>
 803e058:	2000      	movs	r0, #0
 803e05a:	4770      	bx	lr
 803e05c:	2020      	movs	r0, #32
 803e05e:	4770      	bx	lr

0803e060 <__i2b>:
 803e060:	b510      	push	{r4, lr}
 803e062:	460c      	mov	r4, r1
 803e064:	2101      	movs	r1, #1
 803e066:	f7ff feb5 	bl	803ddd4 <_Balloc>
 803e06a:	4602      	mov	r2, r0
 803e06c:	b928      	cbnz	r0, 803e07a <__i2b+0x1a>
 803e06e:	4b05      	ldr	r3, [pc, #20]	; (803e084 <__i2b+0x24>)
 803e070:	4805      	ldr	r0, [pc, #20]	; (803e088 <__i2b+0x28>)
 803e072:	f44f 71a0 	mov.w	r1, #320	; 0x140
 803e076:	f000 fcfd 	bl	803ea74 <__assert_func>
 803e07a:	2301      	movs	r3, #1
 803e07c:	6144      	str	r4, [r0, #20]
 803e07e:	6103      	str	r3, [r0, #16]
 803e080:	bd10      	pop	{r4, pc}
 803e082:	bf00      	nop
 803e084:	0804023c 	.word	0x0804023c
 803e088:	080402cc 	.word	0x080402cc

0803e08c <__multiply>:
 803e08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803e090:	4614      	mov	r4, r2
 803e092:	690a      	ldr	r2, [r1, #16]
 803e094:	6923      	ldr	r3, [r4, #16]
 803e096:	429a      	cmp	r2, r3
 803e098:	bfb8      	it	lt
 803e09a:	460b      	movlt	r3, r1
 803e09c:	460d      	mov	r5, r1
 803e09e:	bfbc      	itt	lt
 803e0a0:	4625      	movlt	r5, r4
 803e0a2:	461c      	movlt	r4, r3
 803e0a4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 803e0a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 803e0ac:	68ab      	ldr	r3, [r5, #8]
 803e0ae:	6869      	ldr	r1, [r5, #4]
 803e0b0:	eb0a 0709 	add.w	r7, sl, r9
 803e0b4:	42bb      	cmp	r3, r7
 803e0b6:	b085      	sub	sp, #20
 803e0b8:	bfb8      	it	lt
 803e0ba:	3101      	addlt	r1, #1
 803e0bc:	f7ff fe8a 	bl	803ddd4 <_Balloc>
 803e0c0:	b930      	cbnz	r0, 803e0d0 <__multiply+0x44>
 803e0c2:	4602      	mov	r2, r0
 803e0c4:	4b42      	ldr	r3, [pc, #264]	; (803e1d0 <__multiply+0x144>)
 803e0c6:	4843      	ldr	r0, [pc, #268]	; (803e1d4 <__multiply+0x148>)
 803e0c8:	f240 115d 	movw	r1, #349	; 0x15d
 803e0cc:	f000 fcd2 	bl	803ea74 <__assert_func>
 803e0d0:	f100 0614 	add.w	r6, r0, #20
 803e0d4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 803e0d8:	4633      	mov	r3, r6
 803e0da:	2200      	movs	r2, #0
 803e0dc:	4543      	cmp	r3, r8
 803e0de:	d31e      	bcc.n	803e11e <__multiply+0x92>
 803e0e0:	f105 0c14 	add.w	ip, r5, #20
 803e0e4:	f104 0314 	add.w	r3, r4, #20
 803e0e8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 803e0ec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 803e0f0:	9202      	str	r2, [sp, #8]
 803e0f2:	ebac 0205 	sub.w	r2, ip, r5
 803e0f6:	3a15      	subs	r2, #21
 803e0f8:	f022 0203 	bic.w	r2, r2, #3
 803e0fc:	3204      	adds	r2, #4
 803e0fe:	f105 0115 	add.w	r1, r5, #21
 803e102:	458c      	cmp	ip, r1
 803e104:	bf38      	it	cc
 803e106:	2204      	movcc	r2, #4
 803e108:	9201      	str	r2, [sp, #4]
 803e10a:	9a02      	ldr	r2, [sp, #8]
 803e10c:	9303      	str	r3, [sp, #12]
 803e10e:	429a      	cmp	r2, r3
 803e110:	d808      	bhi.n	803e124 <__multiply+0x98>
 803e112:	2f00      	cmp	r7, #0
 803e114:	dc55      	bgt.n	803e1c2 <__multiply+0x136>
 803e116:	6107      	str	r7, [r0, #16]
 803e118:	b005      	add	sp, #20
 803e11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803e11e:	f843 2b04 	str.w	r2, [r3], #4
 803e122:	e7db      	b.n	803e0dc <__multiply+0x50>
 803e124:	f8b3 a000 	ldrh.w	sl, [r3]
 803e128:	f1ba 0f00 	cmp.w	sl, #0
 803e12c:	d020      	beq.n	803e170 <__multiply+0xe4>
 803e12e:	f105 0e14 	add.w	lr, r5, #20
 803e132:	46b1      	mov	r9, r6
 803e134:	2200      	movs	r2, #0
 803e136:	f85e 4b04 	ldr.w	r4, [lr], #4
 803e13a:	f8d9 b000 	ldr.w	fp, [r9]
 803e13e:	b2a1      	uxth	r1, r4
 803e140:	fa1f fb8b 	uxth.w	fp, fp
 803e144:	fb0a b101 	mla	r1, sl, r1, fp
 803e148:	4411      	add	r1, r2
 803e14a:	f8d9 2000 	ldr.w	r2, [r9]
 803e14e:	0c24      	lsrs	r4, r4, #16
 803e150:	0c12      	lsrs	r2, r2, #16
 803e152:	fb0a 2404 	mla	r4, sl, r4, r2
 803e156:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 803e15a:	b289      	uxth	r1, r1
 803e15c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 803e160:	45f4      	cmp	ip, lr
 803e162:	f849 1b04 	str.w	r1, [r9], #4
 803e166:	ea4f 4214 	mov.w	r2, r4, lsr #16
 803e16a:	d8e4      	bhi.n	803e136 <__multiply+0xaa>
 803e16c:	9901      	ldr	r1, [sp, #4]
 803e16e:	5072      	str	r2, [r6, r1]
 803e170:	9a03      	ldr	r2, [sp, #12]
 803e172:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 803e176:	3304      	adds	r3, #4
 803e178:	f1b9 0f00 	cmp.w	r9, #0
 803e17c:	d01f      	beq.n	803e1be <__multiply+0x132>
 803e17e:	6834      	ldr	r4, [r6, #0]
 803e180:	f105 0114 	add.w	r1, r5, #20
 803e184:	46b6      	mov	lr, r6
 803e186:	f04f 0a00 	mov.w	sl, #0
 803e18a:	880a      	ldrh	r2, [r1, #0]
 803e18c:	f8be b002 	ldrh.w	fp, [lr, #2]
 803e190:	fb09 b202 	mla	r2, r9, r2, fp
 803e194:	4492      	add	sl, r2
 803e196:	b2a4      	uxth	r4, r4
 803e198:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 803e19c:	f84e 4b04 	str.w	r4, [lr], #4
 803e1a0:	f851 4b04 	ldr.w	r4, [r1], #4
 803e1a4:	f8be 2000 	ldrh.w	r2, [lr]
 803e1a8:	0c24      	lsrs	r4, r4, #16
 803e1aa:	fb09 2404 	mla	r4, r9, r4, r2
 803e1ae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 803e1b2:	458c      	cmp	ip, r1
 803e1b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 803e1b8:	d8e7      	bhi.n	803e18a <__multiply+0xfe>
 803e1ba:	9a01      	ldr	r2, [sp, #4]
 803e1bc:	50b4      	str	r4, [r6, r2]
 803e1be:	3604      	adds	r6, #4
 803e1c0:	e7a3      	b.n	803e10a <__multiply+0x7e>
 803e1c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 803e1c6:	2b00      	cmp	r3, #0
 803e1c8:	d1a5      	bne.n	803e116 <__multiply+0x8a>
 803e1ca:	3f01      	subs	r7, #1
 803e1cc:	e7a1      	b.n	803e112 <__multiply+0x86>
 803e1ce:	bf00      	nop
 803e1d0:	0804023c 	.word	0x0804023c
 803e1d4:	080402cc 	.word	0x080402cc

0803e1d8 <__pow5mult>:
 803e1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803e1dc:	4615      	mov	r5, r2
 803e1de:	f012 0203 	ands.w	r2, r2, #3
 803e1e2:	4606      	mov	r6, r0
 803e1e4:	460f      	mov	r7, r1
 803e1e6:	d007      	beq.n	803e1f8 <__pow5mult+0x20>
 803e1e8:	4c25      	ldr	r4, [pc, #148]	; (803e280 <__pow5mult+0xa8>)
 803e1ea:	3a01      	subs	r2, #1
 803e1ec:	2300      	movs	r3, #0
 803e1ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 803e1f2:	f7ff fe51 	bl	803de98 <__multadd>
 803e1f6:	4607      	mov	r7, r0
 803e1f8:	10ad      	asrs	r5, r5, #2
 803e1fa:	d03d      	beq.n	803e278 <__pow5mult+0xa0>
 803e1fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 803e1fe:	b97c      	cbnz	r4, 803e220 <__pow5mult+0x48>
 803e200:	2010      	movs	r0, #16
 803e202:	f7ff fdc1 	bl	803dd88 <malloc>
 803e206:	4602      	mov	r2, r0
 803e208:	6270      	str	r0, [r6, #36]	; 0x24
 803e20a:	b928      	cbnz	r0, 803e218 <__pow5mult+0x40>
 803e20c:	4b1d      	ldr	r3, [pc, #116]	; (803e284 <__pow5mult+0xac>)
 803e20e:	481e      	ldr	r0, [pc, #120]	; (803e288 <__pow5mult+0xb0>)
 803e210:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 803e214:	f000 fc2e 	bl	803ea74 <__assert_func>
 803e218:	e9c0 4401 	strd	r4, r4, [r0, #4]
 803e21c:	6004      	str	r4, [r0, #0]
 803e21e:	60c4      	str	r4, [r0, #12]
 803e220:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 803e224:	f8d8 4008 	ldr.w	r4, [r8, #8]
 803e228:	b94c      	cbnz	r4, 803e23e <__pow5mult+0x66>
 803e22a:	f240 2171 	movw	r1, #625	; 0x271
 803e22e:	4630      	mov	r0, r6
 803e230:	f7ff ff16 	bl	803e060 <__i2b>
 803e234:	2300      	movs	r3, #0
 803e236:	f8c8 0008 	str.w	r0, [r8, #8]
 803e23a:	4604      	mov	r4, r0
 803e23c:	6003      	str	r3, [r0, #0]
 803e23e:	f04f 0900 	mov.w	r9, #0
 803e242:	07eb      	lsls	r3, r5, #31
 803e244:	d50a      	bpl.n	803e25c <__pow5mult+0x84>
 803e246:	4639      	mov	r1, r7
 803e248:	4622      	mov	r2, r4
 803e24a:	4630      	mov	r0, r6
 803e24c:	f7ff ff1e 	bl	803e08c <__multiply>
 803e250:	4639      	mov	r1, r7
 803e252:	4680      	mov	r8, r0
 803e254:	4630      	mov	r0, r6
 803e256:	f7ff fdfd 	bl	803de54 <_Bfree>
 803e25a:	4647      	mov	r7, r8
 803e25c:	106d      	asrs	r5, r5, #1
 803e25e:	d00b      	beq.n	803e278 <__pow5mult+0xa0>
 803e260:	6820      	ldr	r0, [r4, #0]
 803e262:	b938      	cbnz	r0, 803e274 <__pow5mult+0x9c>
 803e264:	4622      	mov	r2, r4
 803e266:	4621      	mov	r1, r4
 803e268:	4630      	mov	r0, r6
 803e26a:	f7ff ff0f 	bl	803e08c <__multiply>
 803e26e:	6020      	str	r0, [r4, #0]
 803e270:	f8c0 9000 	str.w	r9, [r0]
 803e274:	4604      	mov	r4, r0
 803e276:	e7e4      	b.n	803e242 <__pow5mult+0x6a>
 803e278:	4638      	mov	r0, r7
 803e27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803e27e:	bf00      	nop
 803e280:	08040420 	.word	0x08040420
 803e284:	080401c6 	.word	0x080401c6
 803e288:	080402cc 	.word	0x080402cc

0803e28c <__lshift>:
 803e28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803e290:	460c      	mov	r4, r1
 803e292:	6849      	ldr	r1, [r1, #4]
 803e294:	6923      	ldr	r3, [r4, #16]
 803e296:	eb03 1862 	add.w	r8, r3, r2, asr #5
 803e29a:	68a3      	ldr	r3, [r4, #8]
 803e29c:	4607      	mov	r7, r0
 803e29e:	4691      	mov	r9, r2
 803e2a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 803e2a4:	f108 0601 	add.w	r6, r8, #1
 803e2a8:	42b3      	cmp	r3, r6
 803e2aa:	db0b      	blt.n	803e2c4 <__lshift+0x38>
 803e2ac:	4638      	mov	r0, r7
 803e2ae:	f7ff fd91 	bl	803ddd4 <_Balloc>
 803e2b2:	4605      	mov	r5, r0
 803e2b4:	b948      	cbnz	r0, 803e2ca <__lshift+0x3e>
 803e2b6:	4602      	mov	r2, r0
 803e2b8:	4b28      	ldr	r3, [pc, #160]	; (803e35c <__lshift+0xd0>)
 803e2ba:	4829      	ldr	r0, [pc, #164]	; (803e360 <__lshift+0xd4>)
 803e2bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 803e2c0:	f000 fbd8 	bl	803ea74 <__assert_func>
 803e2c4:	3101      	adds	r1, #1
 803e2c6:	005b      	lsls	r3, r3, #1
 803e2c8:	e7ee      	b.n	803e2a8 <__lshift+0x1c>
 803e2ca:	2300      	movs	r3, #0
 803e2cc:	f100 0114 	add.w	r1, r0, #20
 803e2d0:	f100 0210 	add.w	r2, r0, #16
 803e2d4:	4618      	mov	r0, r3
 803e2d6:	4553      	cmp	r3, sl
 803e2d8:	db33      	blt.n	803e342 <__lshift+0xb6>
 803e2da:	6920      	ldr	r0, [r4, #16]
 803e2dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 803e2e0:	f104 0314 	add.w	r3, r4, #20
 803e2e4:	f019 091f 	ands.w	r9, r9, #31
 803e2e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 803e2ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 803e2f0:	d02b      	beq.n	803e34a <__lshift+0xbe>
 803e2f2:	f1c9 0e20 	rsb	lr, r9, #32
 803e2f6:	468a      	mov	sl, r1
 803e2f8:	2200      	movs	r2, #0
 803e2fa:	6818      	ldr	r0, [r3, #0]
 803e2fc:	fa00 f009 	lsl.w	r0, r0, r9
 803e300:	4302      	orrs	r2, r0
 803e302:	f84a 2b04 	str.w	r2, [sl], #4
 803e306:	f853 2b04 	ldr.w	r2, [r3], #4
 803e30a:	459c      	cmp	ip, r3
 803e30c:	fa22 f20e 	lsr.w	r2, r2, lr
 803e310:	d8f3      	bhi.n	803e2fa <__lshift+0x6e>
 803e312:	ebac 0304 	sub.w	r3, ip, r4
 803e316:	3b15      	subs	r3, #21
 803e318:	f023 0303 	bic.w	r3, r3, #3
 803e31c:	3304      	adds	r3, #4
 803e31e:	f104 0015 	add.w	r0, r4, #21
 803e322:	4584      	cmp	ip, r0
 803e324:	bf38      	it	cc
 803e326:	2304      	movcc	r3, #4
 803e328:	50ca      	str	r2, [r1, r3]
 803e32a:	b10a      	cbz	r2, 803e330 <__lshift+0xa4>
 803e32c:	f108 0602 	add.w	r6, r8, #2
 803e330:	3e01      	subs	r6, #1
 803e332:	4638      	mov	r0, r7
 803e334:	612e      	str	r6, [r5, #16]
 803e336:	4621      	mov	r1, r4
 803e338:	f7ff fd8c 	bl	803de54 <_Bfree>
 803e33c:	4628      	mov	r0, r5
 803e33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803e342:	f842 0f04 	str.w	r0, [r2, #4]!
 803e346:	3301      	adds	r3, #1
 803e348:	e7c5      	b.n	803e2d6 <__lshift+0x4a>
 803e34a:	3904      	subs	r1, #4
 803e34c:	f853 2b04 	ldr.w	r2, [r3], #4
 803e350:	f841 2f04 	str.w	r2, [r1, #4]!
 803e354:	459c      	cmp	ip, r3
 803e356:	d8f9      	bhi.n	803e34c <__lshift+0xc0>
 803e358:	e7ea      	b.n	803e330 <__lshift+0xa4>
 803e35a:	bf00      	nop
 803e35c:	0804023c 	.word	0x0804023c
 803e360:	080402cc 	.word	0x080402cc

0803e364 <__mcmp>:
 803e364:	b530      	push	{r4, r5, lr}
 803e366:	6902      	ldr	r2, [r0, #16]
 803e368:	690c      	ldr	r4, [r1, #16]
 803e36a:	1b12      	subs	r2, r2, r4
 803e36c:	d10e      	bne.n	803e38c <__mcmp+0x28>
 803e36e:	f100 0314 	add.w	r3, r0, #20
 803e372:	3114      	adds	r1, #20
 803e374:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 803e378:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 803e37c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 803e380:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 803e384:	42a5      	cmp	r5, r4
 803e386:	d003      	beq.n	803e390 <__mcmp+0x2c>
 803e388:	d305      	bcc.n	803e396 <__mcmp+0x32>
 803e38a:	2201      	movs	r2, #1
 803e38c:	4610      	mov	r0, r2
 803e38e:	bd30      	pop	{r4, r5, pc}
 803e390:	4283      	cmp	r3, r0
 803e392:	d3f3      	bcc.n	803e37c <__mcmp+0x18>
 803e394:	e7fa      	b.n	803e38c <__mcmp+0x28>
 803e396:	f04f 32ff 	mov.w	r2, #4294967295
 803e39a:	e7f7      	b.n	803e38c <__mcmp+0x28>

0803e39c <__mdiff>:
 803e39c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803e3a0:	460c      	mov	r4, r1
 803e3a2:	4606      	mov	r6, r0
 803e3a4:	4611      	mov	r1, r2
 803e3a6:	4620      	mov	r0, r4
 803e3a8:	4617      	mov	r7, r2
 803e3aa:	f7ff ffdb 	bl	803e364 <__mcmp>
 803e3ae:	1e05      	subs	r5, r0, #0
 803e3b0:	d110      	bne.n	803e3d4 <__mdiff+0x38>
 803e3b2:	4629      	mov	r1, r5
 803e3b4:	4630      	mov	r0, r6
 803e3b6:	f7ff fd0d 	bl	803ddd4 <_Balloc>
 803e3ba:	b930      	cbnz	r0, 803e3ca <__mdiff+0x2e>
 803e3bc:	4b39      	ldr	r3, [pc, #228]	; (803e4a4 <__mdiff+0x108>)
 803e3be:	4602      	mov	r2, r0
 803e3c0:	f240 2132 	movw	r1, #562	; 0x232
 803e3c4:	4838      	ldr	r0, [pc, #224]	; (803e4a8 <__mdiff+0x10c>)
 803e3c6:	f000 fb55 	bl	803ea74 <__assert_func>
 803e3ca:	2301      	movs	r3, #1
 803e3cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 803e3d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803e3d4:	bfa4      	itt	ge
 803e3d6:	463b      	movge	r3, r7
 803e3d8:	4627      	movge	r7, r4
 803e3da:	4630      	mov	r0, r6
 803e3dc:	6879      	ldr	r1, [r7, #4]
 803e3de:	bfa6      	itte	ge
 803e3e0:	461c      	movge	r4, r3
 803e3e2:	2500      	movge	r5, #0
 803e3e4:	2501      	movlt	r5, #1
 803e3e6:	f7ff fcf5 	bl	803ddd4 <_Balloc>
 803e3ea:	b920      	cbnz	r0, 803e3f6 <__mdiff+0x5a>
 803e3ec:	4b2d      	ldr	r3, [pc, #180]	; (803e4a4 <__mdiff+0x108>)
 803e3ee:	4602      	mov	r2, r0
 803e3f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 803e3f4:	e7e6      	b.n	803e3c4 <__mdiff+0x28>
 803e3f6:	693e      	ldr	r6, [r7, #16]
 803e3f8:	60c5      	str	r5, [r0, #12]
 803e3fa:	6925      	ldr	r5, [r4, #16]
 803e3fc:	f107 0114 	add.w	r1, r7, #20
 803e400:	f104 0914 	add.w	r9, r4, #20
 803e404:	f100 0e14 	add.w	lr, r0, #20
 803e408:	f107 0210 	add.w	r2, r7, #16
 803e40c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 803e410:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 803e414:	46f2      	mov	sl, lr
 803e416:	2700      	movs	r7, #0
 803e418:	f859 3b04 	ldr.w	r3, [r9], #4
 803e41c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 803e420:	fa1f f883 	uxth.w	r8, r3
 803e424:	fa17 f78b 	uxtah	r7, r7, fp
 803e428:	0c1b      	lsrs	r3, r3, #16
 803e42a:	eba7 0808 	sub.w	r8, r7, r8
 803e42e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 803e432:	eb03 4328 	add.w	r3, r3, r8, asr #16
 803e436:	fa1f f888 	uxth.w	r8, r8
 803e43a:	141f      	asrs	r7, r3, #16
 803e43c:	454d      	cmp	r5, r9
 803e43e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 803e442:	f84a 3b04 	str.w	r3, [sl], #4
 803e446:	d8e7      	bhi.n	803e418 <__mdiff+0x7c>
 803e448:	1b2b      	subs	r3, r5, r4
 803e44a:	3b15      	subs	r3, #21
 803e44c:	f023 0303 	bic.w	r3, r3, #3
 803e450:	3304      	adds	r3, #4
 803e452:	3415      	adds	r4, #21
 803e454:	42a5      	cmp	r5, r4
 803e456:	bf38      	it	cc
 803e458:	2304      	movcc	r3, #4
 803e45a:	4419      	add	r1, r3
 803e45c:	4473      	add	r3, lr
 803e45e:	469e      	mov	lr, r3
 803e460:	460d      	mov	r5, r1
 803e462:	4565      	cmp	r5, ip
 803e464:	d30e      	bcc.n	803e484 <__mdiff+0xe8>
 803e466:	f10c 0203 	add.w	r2, ip, #3
 803e46a:	1a52      	subs	r2, r2, r1
 803e46c:	f022 0203 	bic.w	r2, r2, #3
 803e470:	3903      	subs	r1, #3
 803e472:	458c      	cmp	ip, r1
 803e474:	bf38      	it	cc
 803e476:	2200      	movcc	r2, #0
 803e478:	441a      	add	r2, r3
 803e47a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 803e47e:	b17b      	cbz	r3, 803e4a0 <__mdiff+0x104>
 803e480:	6106      	str	r6, [r0, #16]
 803e482:	e7a5      	b.n	803e3d0 <__mdiff+0x34>
 803e484:	f855 8b04 	ldr.w	r8, [r5], #4
 803e488:	fa17 f488 	uxtah	r4, r7, r8
 803e48c:	1422      	asrs	r2, r4, #16
 803e48e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 803e492:	b2a4      	uxth	r4, r4
 803e494:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 803e498:	f84e 4b04 	str.w	r4, [lr], #4
 803e49c:	1417      	asrs	r7, r2, #16
 803e49e:	e7e0      	b.n	803e462 <__mdiff+0xc6>
 803e4a0:	3e01      	subs	r6, #1
 803e4a2:	e7ea      	b.n	803e47a <__mdiff+0xde>
 803e4a4:	0804023c 	.word	0x0804023c
 803e4a8:	080402cc 	.word	0x080402cc

0803e4ac <__ulp>:
 803e4ac:	b082      	sub	sp, #8
 803e4ae:	ed8d 0b00 	vstr	d0, [sp]
 803e4b2:	9b01      	ldr	r3, [sp, #4]
 803e4b4:	4912      	ldr	r1, [pc, #72]	; (803e500 <__ulp+0x54>)
 803e4b6:	4019      	ands	r1, r3
 803e4b8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 803e4bc:	2900      	cmp	r1, #0
 803e4be:	dd05      	ble.n	803e4cc <__ulp+0x20>
 803e4c0:	2200      	movs	r2, #0
 803e4c2:	460b      	mov	r3, r1
 803e4c4:	ec43 2b10 	vmov	d0, r2, r3
 803e4c8:	b002      	add	sp, #8
 803e4ca:	4770      	bx	lr
 803e4cc:	4249      	negs	r1, r1
 803e4ce:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 803e4d2:	ea4f 5021 	mov.w	r0, r1, asr #20
 803e4d6:	f04f 0200 	mov.w	r2, #0
 803e4da:	f04f 0300 	mov.w	r3, #0
 803e4de:	da04      	bge.n	803e4ea <__ulp+0x3e>
 803e4e0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 803e4e4:	fa41 f300 	asr.w	r3, r1, r0
 803e4e8:	e7ec      	b.n	803e4c4 <__ulp+0x18>
 803e4ea:	f1a0 0114 	sub.w	r1, r0, #20
 803e4ee:	291e      	cmp	r1, #30
 803e4f0:	bfda      	itte	le
 803e4f2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 803e4f6:	fa20 f101 	lsrle.w	r1, r0, r1
 803e4fa:	2101      	movgt	r1, #1
 803e4fc:	460a      	mov	r2, r1
 803e4fe:	e7e1      	b.n	803e4c4 <__ulp+0x18>
 803e500:	7ff00000 	.word	0x7ff00000

0803e504 <__b2d>:
 803e504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803e506:	6905      	ldr	r5, [r0, #16]
 803e508:	f100 0714 	add.w	r7, r0, #20
 803e50c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 803e510:	1f2e      	subs	r6, r5, #4
 803e512:	f855 4c04 	ldr.w	r4, [r5, #-4]
 803e516:	4620      	mov	r0, r4
 803e518:	f7ff fd52 	bl	803dfc0 <__hi0bits>
 803e51c:	f1c0 0320 	rsb	r3, r0, #32
 803e520:	280a      	cmp	r0, #10
 803e522:	f8df c07c 	ldr.w	ip, [pc, #124]	; 803e5a0 <__b2d+0x9c>
 803e526:	600b      	str	r3, [r1, #0]
 803e528:	dc14      	bgt.n	803e554 <__b2d+0x50>
 803e52a:	f1c0 0e0b 	rsb	lr, r0, #11
 803e52e:	fa24 f10e 	lsr.w	r1, r4, lr
 803e532:	42b7      	cmp	r7, r6
 803e534:	ea41 030c 	orr.w	r3, r1, ip
 803e538:	bf34      	ite	cc
 803e53a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 803e53e:	2100      	movcs	r1, #0
 803e540:	3015      	adds	r0, #21
 803e542:	fa04 f000 	lsl.w	r0, r4, r0
 803e546:	fa21 f10e 	lsr.w	r1, r1, lr
 803e54a:	ea40 0201 	orr.w	r2, r0, r1
 803e54e:	ec43 2b10 	vmov	d0, r2, r3
 803e552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803e554:	42b7      	cmp	r7, r6
 803e556:	bf3a      	itte	cc
 803e558:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 803e55c:	f1a5 0608 	subcc.w	r6, r5, #8
 803e560:	2100      	movcs	r1, #0
 803e562:	380b      	subs	r0, #11
 803e564:	d017      	beq.n	803e596 <__b2d+0x92>
 803e566:	f1c0 0c20 	rsb	ip, r0, #32
 803e56a:	fa04 f500 	lsl.w	r5, r4, r0
 803e56e:	42be      	cmp	r6, r7
 803e570:	fa21 f40c 	lsr.w	r4, r1, ip
 803e574:	ea45 0504 	orr.w	r5, r5, r4
 803e578:	bf8c      	ite	hi
 803e57a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 803e57e:	2400      	movls	r4, #0
 803e580:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 803e584:	fa01 f000 	lsl.w	r0, r1, r0
 803e588:	fa24 f40c 	lsr.w	r4, r4, ip
 803e58c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 803e590:	ea40 0204 	orr.w	r2, r0, r4
 803e594:	e7db      	b.n	803e54e <__b2d+0x4a>
 803e596:	ea44 030c 	orr.w	r3, r4, ip
 803e59a:	460a      	mov	r2, r1
 803e59c:	e7d7      	b.n	803e54e <__b2d+0x4a>
 803e59e:	bf00      	nop
 803e5a0:	3ff00000 	.word	0x3ff00000

0803e5a4 <__d2b>:
 803e5a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 803e5a8:	4689      	mov	r9, r1
 803e5aa:	2101      	movs	r1, #1
 803e5ac:	ec57 6b10 	vmov	r6, r7, d0
 803e5b0:	4690      	mov	r8, r2
 803e5b2:	f7ff fc0f 	bl	803ddd4 <_Balloc>
 803e5b6:	4604      	mov	r4, r0
 803e5b8:	b930      	cbnz	r0, 803e5c8 <__d2b+0x24>
 803e5ba:	4602      	mov	r2, r0
 803e5bc:	4b25      	ldr	r3, [pc, #148]	; (803e654 <__d2b+0xb0>)
 803e5be:	4826      	ldr	r0, [pc, #152]	; (803e658 <__d2b+0xb4>)
 803e5c0:	f240 310a 	movw	r1, #778	; 0x30a
 803e5c4:	f000 fa56 	bl	803ea74 <__assert_func>
 803e5c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 803e5cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 803e5d0:	bb35      	cbnz	r5, 803e620 <__d2b+0x7c>
 803e5d2:	2e00      	cmp	r6, #0
 803e5d4:	9301      	str	r3, [sp, #4]
 803e5d6:	d028      	beq.n	803e62a <__d2b+0x86>
 803e5d8:	4668      	mov	r0, sp
 803e5da:	9600      	str	r6, [sp, #0]
 803e5dc:	f7ff fd10 	bl	803e000 <__lo0bits>
 803e5e0:	9900      	ldr	r1, [sp, #0]
 803e5e2:	b300      	cbz	r0, 803e626 <__d2b+0x82>
 803e5e4:	9a01      	ldr	r2, [sp, #4]
 803e5e6:	f1c0 0320 	rsb	r3, r0, #32
 803e5ea:	fa02 f303 	lsl.w	r3, r2, r3
 803e5ee:	430b      	orrs	r3, r1
 803e5f0:	40c2      	lsrs	r2, r0
 803e5f2:	6163      	str	r3, [r4, #20]
 803e5f4:	9201      	str	r2, [sp, #4]
 803e5f6:	9b01      	ldr	r3, [sp, #4]
 803e5f8:	61a3      	str	r3, [r4, #24]
 803e5fa:	2b00      	cmp	r3, #0
 803e5fc:	bf14      	ite	ne
 803e5fe:	2202      	movne	r2, #2
 803e600:	2201      	moveq	r2, #1
 803e602:	6122      	str	r2, [r4, #16]
 803e604:	b1d5      	cbz	r5, 803e63c <__d2b+0x98>
 803e606:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 803e60a:	4405      	add	r5, r0
 803e60c:	f8c9 5000 	str.w	r5, [r9]
 803e610:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 803e614:	f8c8 0000 	str.w	r0, [r8]
 803e618:	4620      	mov	r0, r4
 803e61a:	b003      	add	sp, #12
 803e61c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803e620:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 803e624:	e7d5      	b.n	803e5d2 <__d2b+0x2e>
 803e626:	6161      	str	r1, [r4, #20]
 803e628:	e7e5      	b.n	803e5f6 <__d2b+0x52>
 803e62a:	a801      	add	r0, sp, #4
 803e62c:	f7ff fce8 	bl	803e000 <__lo0bits>
 803e630:	9b01      	ldr	r3, [sp, #4]
 803e632:	6163      	str	r3, [r4, #20]
 803e634:	2201      	movs	r2, #1
 803e636:	6122      	str	r2, [r4, #16]
 803e638:	3020      	adds	r0, #32
 803e63a:	e7e3      	b.n	803e604 <__d2b+0x60>
 803e63c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 803e640:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 803e644:	f8c9 0000 	str.w	r0, [r9]
 803e648:	6918      	ldr	r0, [r3, #16]
 803e64a:	f7ff fcb9 	bl	803dfc0 <__hi0bits>
 803e64e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 803e652:	e7df      	b.n	803e614 <__d2b+0x70>
 803e654:	0804023c 	.word	0x0804023c
 803e658:	080402cc 	.word	0x080402cc

0803e65c <__ratio>:
 803e65c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803e660:	4688      	mov	r8, r1
 803e662:	4669      	mov	r1, sp
 803e664:	4681      	mov	r9, r0
 803e666:	f7ff ff4d 	bl	803e504 <__b2d>
 803e66a:	a901      	add	r1, sp, #4
 803e66c:	4640      	mov	r0, r8
 803e66e:	ec55 4b10 	vmov	r4, r5, d0
 803e672:	f7ff ff47 	bl	803e504 <__b2d>
 803e676:	f8d9 3010 	ldr.w	r3, [r9, #16]
 803e67a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 803e67e:	eba3 0c02 	sub.w	ip, r3, r2
 803e682:	e9dd 3200 	ldrd	r3, r2, [sp]
 803e686:	1a9b      	subs	r3, r3, r2
 803e688:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 803e68c:	ec51 0b10 	vmov	r0, r1, d0
 803e690:	2b00      	cmp	r3, #0
 803e692:	bfd6      	itet	le
 803e694:	460a      	movle	r2, r1
 803e696:	462a      	movgt	r2, r5
 803e698:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 803e69c:	468b      	mov	fp, r1
 803e69e:	462f      	mov	r7, r5
 803e6a0:	bfd4      	ite	le
 803e6a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 803e6a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 803e6aa:	4620      	mov	r0, r4
 803e6ac:	ee10 2a10 	vmov	r2, s0
 803e6b0:	465b      	mov	r3, fp
 803e6b2:	4639      	mov	r1, r7
 803e6b4:	f7e2 f8ca 	bl	802084c <__aeabi_ddiv>
 803e6b8:	ec41 0b10 	vmov	d0, r0, r1
 803e6bc:	b003      	add	sp, #12
 803e6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0803e6c2 <__copybits>:
 803e6c2:	3901      	subs	r1, #1
 803e6c4:	b570      	push	{r4, r5, r6, lr}
 803e6c6:	1149      	asrs	r1, r1, #5
 803e6c8:	6914      	ldr	r4, [r2, #16]
 803e6ca:	3101      	adds	r1, #1
 803e6cc:	f102 0314 	add.w	r3, r2, #20
 803e6d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 803e6d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 803e6d8:	1f05      	subs	r5, r0, #4
 803e6da:	42a3      	cmp	r3, r4
 803e6dc:	d30c      	bcc.n	803e6f8 <__copybits+0x36>
 803e6de:	1aa3      	subs	r3, r4, r2
 803e6e0:	3b11      	subs	r3, #17
 803e6e2:	f023 0303 	bic.w	r3, r3, #3
 803e6e6:	3211      	adds	r2, #17
 803e6e8:	42a2      	cmp	r2, r4
 803e6ea:	bf88      	it	hi
 803e6ec:	2300      	movhi	r3, #0
 803e6ee:	4418      	add	r0, r3
 803e6f0:	2300      	movs	r3, #0
 803e6f2:	4288      	cmp	r0, r1
 803e6f4:	d305      	bcc.n	803e702 <__copybits+0x40>
 803e6f6:	bd70      	pop	{r4, r5, r6, pc}
 803e6f8:	f853 6b04 	ldr.w	r6, [r3], #4
 803e6fc:	f845 6f04 	str.w	r6, [r5, #4]!
 803e700:	e7eb      	b.n	803e6da <__copybits+0x18>
 803e702:	f840 3b04 	str.w	r3, [r0], #4
 803e706:	e7f4      	b.n	803e6f2 <__copybits+0x30>

0803e708 <__any_on>:
 803e708:	f100 0214 	add.w	r2, r0, #20
 803e70c:	6900      	ldr	r0, [r0, #16]
 803e70e:	114b      	asrs	r3, r1, #5
 803e710:	4298      	cmp	r0, r3
 803e712:	b510      	push	{r4, lr}
 803e714:	db11      	blt.n	803e73a <__any_on+0x32>
 803e716:	dd0a      	ble.n	803e72e <__any_on+0x26>
 803e718:	f011 011f 	ands.w	r1, r1, #31
 803e71c:	d007      	beq.n	803e72e <__any_on+0x26>
 803e71e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 803e722:	fa24 f001 	lsr.w	r0, r4, r1
 803e726:	fa00 f101 	lsl.w	r1, r0, r1
 803e72a:	428c      	cmp	r4, r1
 803e72c:	d10b      	bne.n	803e746 <__any_on+0x3e>
 803e72e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 803e732:	4293      	cmp	r3, r2
 803e734:	d803      	bhi.n	803e73e <__any_on+0x36>
 803e736:	2000      	movs	r0, #0
 803e738:	bd10      	pop	{r4, pc}
 803e73a:	4603      	mov	r3, r0
 803e73c:	e7f7      	b.n	803e72e <__any_on+0x26>
 803e73e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 803e742:	2900      	cmp	r1, #0
 803e744:	d0f5      	beq.n	803e732 <__any_on+0x2a>
 803e746:	2001      	movs	r0, #1
 803e748:	e7f6      	b.n	803e738 <__any_on+0x30>

0803e74a <_calloc_r>:
 803e74a:	b513      	push	{r0, r1, r4, lr}
 803e74c:	434a      	muls	r2, r1
 803e74e:	4611      	mov	r1, r2
 803e750:	9201      	str	r2, [sp, #4]
 803e752:	f7fc fac5 	bl	803ace0 <_malloc_r>
 803e756:	4604      	mov	r4, r0
 803e758:	b118      	cbz	r0, 803e762 <_calloc_r+0x18>
 803e75a:	9a01      	ldr	r2, [sp, #4]
 803e75c:	2100      	movs	r1, #0
 803e75e:	f7fc fa67 	bl	803ac30 <memset>
 803e762:	4620      	mov	r0, r4
 803e764:	b002      	add	sp, #8
 803e766:	bd10      	pop	{r4, pc}

0803e768 <__ssputs_r>:
 803e768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803e76c:	688e      	ldr	r6, [r1, #8]
 803e76e:	429e      	cmp	r6, r3
 803e770:	4682      	mov	sl, r0
 803e772:	460c      	mov	r4, r1
 803e774:	4690      	mov	r8, r2
 803e776:	461f      	mov	r7, r3
 803e778:	d838      	bhi.n	803e7ec <__ssputs_r+0x84>
 803e77a:	898a      	ldrh	r2, [r1, #12]
 803e77c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 803e780:	d032      	beq.n	803e7e8 <__ssputs_r+0x80>
 803e782:	6825      	ldr	r5, [r4, #0]
 803e784:	6909      	ldr	r1, [r1, #16]
 803e786:	eba5 0901 	sub.w	r9, r5, r1
 803e78a:	6965      	ldr	r5, [r4, #20]
 803e78c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 803e790:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 803e794:	3301      	adds	r3, #1
 803e796:	444b      	add	r3, r9
 803e798:	106d      	asrs	r5, r5, #1
 803e79a:	429d      	cmp	r5, r3
 803e79c:	bf38      	it	cc
 803e79e:	461d      	movcc	r5, r3
 803e7a0:	0553      	lsls	r3, r2, #21
 803e7a2:	d531      	bpl.n	803e808 <__ssputs_r+0xa0>
 803e7a4:	4629      	mov	r1, r5
 803e7a6:	f7fc fa9b 	bl	803ace0 <_malloc_r>
 803e7aa:	4606      	mov	r6, r0
 803e7ac:	b950      	cbnz	r0, 803e7c4 <__ssputs_r+0x5c>
 803e7ae:	230c      	movs	r3, #12
 803e7b0:	f8ca 3000 	str.w	r3, [sl]
 803e7b4:	89a3      	ldrh	r3, [r4, #12]
 803e7b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803e7ba:	81a3      	strh	r3, [r4, #12]
 803e7bc:	f04f 30ff 	mov.w	r0, #4294967295
 803e7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803e7c4:	6921      	ldr	r1, [r4, #16]
 803e7c6:	464a      	mov	r2, r9
 803e7c8:	f7fc fa24 	bl	803ac14 <memcpy>
 803e7cc:	89a3      	ldrh	r3, [r4, #12]
 803e7ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 803e7d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803e7d6:	81a3      	strh	r3, [r4, #12]
 803e7d8:	6126      	str	r6, [r4, #16]
 803e7da:	6165      	str	r5, [r4, #20]
 803e7dc:	444e      	add	r6, r9
 803e7de:	eba5 0509 	sub.w	r5, r5, r9
 803e7e2:	6026      	str	r6, [r4, #0]
 803e7e4:	60a5      	str	r5, [r4, #8]
 803e7e6:	463e      	mov	r6, r7
 803e7e8:	42be      	cmp	r6, r7
 803e7ea:	d900      	bls.n	803e7ee <__ssputs_r+0x86>
 803e7ec:	463e      	mov	r6, r7
 803e7ee:	4632      	mov	r2, r6
 803e7f0:	6820      	ldr	r0, [r4, #0]
 803e7f2:	4641      	mov	r1, r8
 803e7f4:	f000 f96e 	bl	803ead4 <memmove>
 803e7f8:	68a3      	ldr	r3, [r4, #8]
 803e7fa:	6822      	ldr	r2, [r4, #0]
 803e7fc:	1b9b      	subs	r3, r3, r6
 803e7fe:	4432      	add	r2, r6
 803e800:	60a3      	str	r3, [r4, #8]
 803e802:	6022      	str	r2, [r4, #0]
 803e804:	2000      	movs	r0, #0
 803e806:	e7db      	b.n	803e7c0 <__ssputs_r+0x58>
 803e808:	462a      	mov	r2, r5
 803e80a:	f000 f97d 	bl	803eb08 <_realloc_r>
 803e80e:	4606      	mov	r6, r0
 803e810:	2800      	cmp	r0, #0
 803e812:	d1e1      	bne.n	803e7d8 <__ssputs_r+0x70>
 803e814:	6921      	ldr	r1, [r4, #16]
 803e816:	4650      	mov	r0, sl
 803e818:	f7fc fa12 	bl	803ac40 <_free_r>
 803e81c:	e7c7      	b.n	803e7ae <__ssputs_r+0x46>
	...

0803e820 <_svfiprintf_r>:
 803e820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803e824:	4698      	mov	r8, r3
 803e826:	898b      	ldrh	r3, [r1, #12]
 803e828:	061b      	lsls	r3, r3, #24
 803e82a:	b09d      	sub	sp, #116	; 0x74
 803e82c:	4607      	mov	r7, r0
 803e82e:	460d      	mov	r5, r1
 803e830:	4614      	mov	r4, r2
 803e832:	d50e      	bpl.n	803e852 <_svfiprintf_r+0x32>
 803e834:	690b      	ldr	r3, [r1, #16]
 803e836:	b963      	cbnz	r3, 803e852 <_svfiprintf_r+0x32>
 803e838:	2140      	movs	r1, #64	; 0x40
 803e83a:	f7fc fa51 	bl	803ace0 <_malloc_r>
 803e83e:	6028      	str	r0, [r5, #0]
 803e840:	6128      	str	r0, [r5, #16]
 803e842:	b920      	cbnz	r0, 803e84e <_svfiprintf_r+0x2e>
 803e844:	230c      	movs	r3, #12
 803e846:	603b      	str	r3, [r7, #0]
 803e848:	f04f 30ff 	mov.w	r0, #4294967295
 803e84c:	e0d1      	b.n	803e9f2 <_svfiprintf_r+0x1d2>
 803e84e:	2340      	movs	r3, #64	; 0x40
 803e850:	616b      	str	r3, [r5, #20]
 803e852:	2300      	movs	r3, #0
 803e854:	9309      	str	r3, [sp, #36]	; 0x24
 803e856:	2320      	movs	r3, #32
 803e858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803e85c:	f8cd 800c 	str.w	r8, [sp, #12]
 803e860:	2330      	movs	r3, #48	; 0x30
 803e862:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 803ea0c <_svfiprintf_r+0x1ec>
 803e866:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803e86a:	f04f 0901 	mov.w	r9, #1
 803e86e:	4623      	mov	r3, r4
 803e870:	469a      	mov	sl, r3
 803e872:	f813 2b01 	ldrb.w	r2, [r3], #1
 803e876:	b10a      	cbz	r2, 803e87c <_svfiprintf_r+0x5c>
 803e878:	2a25      	cmp	r2, #37	; 0x25
 803e87a:	d1f9      	bne.n	803e870 <_svfiprintf_r+0x50>
 803e87c:	ebba 0b04 	subs.w	fp, sl, r4
 803e880:	d00b      	beq.n	803e89a <_svfiprintf_r+0x7a>
 803e882:	465b      	mov	r3, fp
 803e884:	4622      	mov	r2, r4
 803e886:	4629      	mov	r1, r5
 803e888:	4638      	mov	r0, r7
 803e88a:	f7ff ff6d 	bl	803e768 <__ssputs_r>
 803e88e:	3001      	adds	r0, #1
 803e890:	f000 80aa 	beq.w	803e9e8 <_svfiprintf_r+0x1c8>
 803e894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803e896:	445a      	add	r2, fp
 803e898:	9209      	str	r2, [sp, #36]	; 0x24
 803e89a:	f89a 3000 	ldrb.w	r3, [sl]
 803e89e:	2b00      	cmp	r3, #0
 803e8a0:	f000 80a2 	beq.w	803e9e8 <_svfiprintf_r+0x1c8>
 803e8a4:	2300      	movs	r3, #0
 803e8a6:	f04f 32ff 	mov.w	r2, #4294967295
 803e8aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803e8ae:	f10a 0a01 	add.w	sl, sl, #1
 803e8b2:	9304      	str	r3, [sp, #16]
 803e8b4:	9307      	str	r3, [sp, #28]
 803e8b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803e8ba:	931a      	str	r3, [sp, #104]	; 0x68
 803e8bc:	4654      	mov	r4, sl
 803e8be:	2205      	movs	r2, #5
 803e8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 803e8c4:	4851      	ldr	r0, [pc, #324]	; (803ea0c <_svfiprintf_r+0x1ec>)
 803e8c6:	f7e1 fc8b 	bl	80201e0 <memchr>
 803e8ca:	9a04      	ldr	r2, [sp, #16]
 803e8cc:	b9d8      	cbnz	r0, 803e906 <_svfiprintf_r+0xe6>
 803e8ce:	06d0      	lsls	r0, r2, #27
 803e8d0:	bf44      	itt	mi
 803e8d2:	2320      	movmi	r3, #32
 803e8d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803e8d8:	0711      	lsls	r1, r2, #28
 803e8da:	bf44      	itt	mi
 803e8dc:	232b      	movmi	r3, #43	; 0x2b
 803e8de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803e8e2:	f89a 3000 	ldrb.w	r3, [sl]
 803e8e6:	2b2a      	cmp	r3, #42	; 0x2a
 803e8e8:	d015      	beq.n	803e916 <_svfiprintf_r+0xf6>
 803e8ea:	9a07      	ldr	r2, [sp, #28]
 803e8ec:	4654      	mov	r4, sl
 803e8ee:	2000      	movs	r0, #0
 803e8f0:	f04f 0c0a 	mov.w	ip, #10
 803e8f4:	4621      	mov	r1, r4
 803e8f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 803e8fa:	3b30      	subs	r3, #48	; 0x30
 803e8fc:	2b09      	cmp	r3, #9
 803e8fe:	d94e      	bls.n	803e99e <_svfiprintf_r+0x17e>
 803e900:	b1b0      	cbz	r0, 803e930 <_svfiprintf_r+0x110>
 803e902:	9207      	str	r2, [sp, #28]
 803e904:	e014      	b.n	803e930 <_svfiprintf_r+0x110>
 803e906:	eba0 0308 	sub.w	r3, r0, r8
 803e90a:	fa09 f303 	lsl.w	r3, r9, r3
 803e90e:	4313      	orrs	r3, r2
 803e910:	9304      	str	r3, [sp, #16]
 803e912:	46a2      	mov	sl, r4
 803e914:	e7d2      	b.n	803e8bc <_svfiprintf_r+0x9c>
 803e916:	9b03      	ldr	r3, [sp, #12]
 803e918:	1d19      	adds	r1, r3, #4
 803e91a:	681b      	ldr	r3, [r3, #0]
 803e91c:	9103      	str	r1, [sp, #12]
 803e91e:	2b00      	cmp	r3, #0
 803e920:	bfbb      	ittet	lt
 803e922:	425b      	neglt	r3, r3
 803e924:	f042 0202 	orrlt.w	r2, r2, #2
 803e928:	9307      	strge	r3, [sp, #28]
 803e92a:	9307      	strlt	r3, [sp, #28]
 803e92c:	bfb8      	it	lt
 803e92e:	9204      	strlt	r2, [sp, #16]
 803e930:	7823      	ldrb	r3, [r4, #0]
 803e932:	2b2e      	cmp	r3, #46	; 0x2e
 803e934:	d10c      	bne.n	803e950 <_svfiprintf_r+0x130>
 803e936:	7863      	ldrb	r3, [r4, #1]
 803e938:	2b2a      	cmp	r3, #42	; 0x2a
 803e93a:	d135      	bne.n	803e9a8 <_svfiprintf_r+0x188>
 803e93c:	9b03      	ldr	r3, [sp, #12]
 803e93e:	1d1a      	adds	r2, r3, #4
 803e940:	681b      	ldr	r3, [r3, #0]
 803e942:	9203      	str	r2, [sp, #12]
 803e944:	2b00      	cmp	r3, #0
 803e946:	bfb8      	it	lt
 803e948:	f04f 33ff 	movlt.w	r3, #4294967295
 803e94c:	3402      	adds	r4, #2
 803e94e:	9305      	str	r3, [sp, #20]
 803e950:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 803ea1c <_svfiprintf_r+0x1fc>
 803e954:	7821      	ldrb	r1, [r4, #0]
 803e956:	2203      	movs	r2, #3
 803e958:	4650      	mov	r0, sl
 803e95a:	f7e1 fc41 	bl	80201e0 <memchr>
 803e95e:	b140      	cbz	r0, 803e972 <_svfiprintf_r+0x152>
 803e960:	2340      	movs	r3, #64	; 0x40
 803e962:	eba0 000a 	sub.w	r0, r0, sl
 803e966:	fa03 f000 	lsl.w	r0, r3, r0
 803e96a:	9b04      	ldr	r3, [sp, #16]
 803e96c:	4303      	orrs	r3, r0
 803e96e:	3401      	adds	r4, #1
 803e970:	9304      	str	r3, [sp, #16]
 803e972:	f814 1b01 	ldrb.w	r1, [r4], #1
 803e976:	4826      	ldr	r0, [pc, #152]	; (803ea10 <_svfiprintf_r+0x1f0>)
 803e978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803e97c:	2206      	movs	r2, #6
 803e97e:	f7e1 fc2f 	bl	80201e0 <memchr>
 803e982:	2800      	cmp	r0, #0
 803e984:	d038      	beq.n	803e9f8 <_svfiprintf_r+0x1d8>
 803e986:	4b23      	ldr	r3, [pc, #140]	; (803ea14 <_svfiprintf_r+0x1f4>)
 803e988:	bb1b      	cbnz	r3, 803e9d2 <_svfiprintf_r+0x1b2>
 803e98a:	9b03      	ldr	r3, [sp, #12]
 803e98c:	3307      	adds	r3, #7
 803e98e:	f023 0307 	bic.w	r3, r3, #7
 803e992:	3308      	adds	r3, #8
 803e994:	9303      	str	r3, [sp, #12]
 803e996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803e998:	4433      	add	r3, r6
 803e99a:	9309      	str	r3, [sp, #36]	; 0x24
 803e99c:	e767      	b.n	803e86e <_svfiprintf_r+0x4e>
 803e99e:	fb0c 3202 	mla	r2, ip, r2, r3
 803e9a2:	460c      	mov	r4, r1
 803e9a4:	2001      	movs	r0, #1
 803e9a6:	e7a5      	b.n	803e8f4 <_svfiprintf_r+0xd4>
 803e9a8:	2300      	movs	r3, #0
 803e9aa:	3401      	adds	r4, #1
 803e9ac:	9305      	str	r3, [sp, #20]
 803e9ae:	4619      	mov	r1, r3
 803e9b0:	f04f 0c0a 	mov.w	ip, #10
 803e9b4:	4620      	mov	r0, r4
 803e9b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 803e9ba:	3a30      	subs	r2, #48	; 0x30
 803e9bc:	2a09      	cmp	r2, #9
 803e9be:	d903      	bls.n	803e9c8 <_svfiprintf_r+0x1a8>
 803e9c0:	2b00      	cmp	r3, #0
 803e9c2:	d0c5      	beq.n	803e950 <_svfiprintf_r+0x130>
 803e9c4:	9105      	str	r1, [sp, #20]
 803e9c6:	e7c3      	b.n	803e950 <_svfiprintf_r+0x130>
 803e9c8:	fb0c 2101 	mla	r1, ip, r1, r2
 803e9cc:	4604      	mov	r4, r0
 803e9ce:	2301      	movs	r3, #1
 803e9d0:	e7f0      	b.n	803e9b4 <_svfiprintf_r+0x194>
 803e9d2:	ab03      	add	r3, sp, #12
 803e9d4:	9300      	str	r3, [sp, #0]
 803e9d6:	462a      	mov	r2, r5
 803e9d8:	4b0f      	ldr	r3, [pc, #60]	; (803ea18 <_svfiprintf_r+0x1f8>)
 803e9da:	a904      	add	r1, sp, #16
 803e9dc:	4638      	mov	r0, r7
 803e9de:	f7fc fa79 	bl	803aed4 <_printf_float>
 803e9e2:	1c42      	adds	r2, r0, #1
 803e9e4:	4606      	mov	r6, r0
 803e9e6:	d1d6      	bne.n	803e996 <_svfiprintf_r+0x176>
 803e9e8:	89ab      	ldrh	r3, [r5, #12]
 803e9ea:	065b      	lsls	r3, r3, #25
 803e9ec:	f53f af2c 	bmi.w	803e848 <_svfiprintf_r+0x28>
 803e9f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 803e9f2:	b01d      	add	sp, #116	; 0x74
 803e9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803e9f8:	ab03      	add	r3, sp, #12
 803e9fa:	9300      	str	r3, [sp, #0]
 803e9fc:	462a      	mov	r2, r5
 803e9fe:	4b06      	ldr	r3, [pc, #24]	; (803ea18 <_svfiprintf_r+0x1f8>)
 803ea00:	a904      	add	r1, sp, #16
 803ea02:	4638      	mov	r0, r7
 803ea04:	f7fc fd0a 	bl	803b41c <_printf_i>
 803ea08:	e7eb      	b.n	803e9e2 <_svfiprintf_r+0x1c2>
 803ea0a:	bf00      	nop
 803ea0c:	0804042c 	.word	0x0804042c
 803ea10:	08040436 	.word	0x08040436
 803ea14:	0803aed5 	.word	0x0803aed5
 803ea18:	0803e769 	.word	0x0803e769
 803ea1c:	08040432 	.word	0x08040432

0803ea20 <_read_r>:
 803ea20:	b538      	push	{r3, r4, r5, lr}
 803ea22:	4d07      	ldr	r5, [pc, #28]	; (803ea40 <_read_r+0x20>)
 803ea24:	4604      	mov	r4, r0
 803ea26:	4608      	mov	r0, r1
 803ea28:	4611      	mov	r1, r2
 803ea2a:	2200      	movs	r2, #0
 803ea2c:	602a      	str	r2, [r5, #0]
 803ea2e:	461a      	mov	r2, r3
 803ea30:	f7f3 fe24 	bl	803267c <_read>
 803ea34:	1c43      	adds	r3, r0, #1
 803ea36:	d102      	bne.n	803ea3e <_read_r+0x1e>
 803ea38:	682b      	ldr	r3, [r5, #0]
 803ea3a:	b103      	cbz	r3, 803ea3e <_read_r+0x1e>
 803ea3c:	6023      	str	r3, [r4, #0]
 803ea3e:	bd38      	pop	{r3, r4, r5, pc}
 803ea40:	20000b80 	.word	0x20000b80
 803ea44:	00000000 	.word	0x00000000

0803ea48 <nan>:
 803ea48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 803ea50 <nan+0x8>
 803ea4c:	4770      	bx	lr
 803ea4e:	bf00      	nop
 803ea50:	00000000 	.word	0x00000000
 803ea54:	7ff80000 	.word	0x7ff80000

0803ea58 <__ascii_wctomb>:
 803ea58:	b149      	cbz	r1, 803ea6e <__ascii_wctomb+0x16>
 803ea5a:	2aff      	cmp	r2, #255	; 0xff
 803ea5c:	bf85      	ittet	hi
 803ea5e:	238a      	movhi	r3, #138	; 0x8a
 803ea60:	6003      	strhi	r3, [r0, #0]
 803ea62:	700a      	strbls	r2, [r1, #0]
 803ea64:	f04f 30ff 	movhi.w	r0, #4294967295
 803ea68:	bf98      	it	ls
 803ea6a:	2001      	movls	r0, #1
 803ea6c:	4770      	bx	lr
 803ea6e:	4608      	mov	r0, r1
 803ea70:	4770      	bx	lr
	...

0803ea74 <__assert_func>:
 803ea74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803ea76:	4614      	mov	r4, r2
 803ea78:	461a      	mov	r2, r3
 803ea7a:	4b09      	ldr	r3, [pc, #36]	; (803eaa0 <__assert_func+0x2c>)
 803ea7c:	681b      	ldr	r3, [r3, #0]
 803ea7e:	4605      	mov	r5, r0
 803ea80:	68d8      	ldr	r0, [r3, #12]
 803ea82:	b14c      	cbz	r4, 803ea98 <__assert_func+0x24>
 803ea84:	4b07      	ldr	r3, [pc, #28]	; (803eaa4 <__assert_func+0x30>)
 803ea86:	9100      	str	r1, [sp, #0]
 803ea88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803ea8c:	4906      	ldr	r1, [pc, #24]	; (803eaa8 <__assert_func+0x34>)
 803ea8e:	462b      	mov	r3, r5
 803ea90:	f000 f80e 	bl	803eab0 <fiprintf>
 803ea94:	f000 fa78 	bl	803ef88 <abort>
 803ea98:	4b04      	ldr	r3, [pc, #16]	; (803eaac <__assert_func+0x38>)
 803ea9a:	461c      	mov	r4, r3
 803ea9c:	e7f3      	b.n	803ea86 <__assert_func+0x12>
 803ea9e:	bf00      	nop
 803eaa0:	2000002c 	.word	0x2000002c
 803eaa4:	0804043d 	.word	0x0804043d
 803eaa8:	0804044a 	.word	0x0804044a
 803eaac:	08040478 	.word	0x08040478

0803eab0 <fiprintf>:
 803eab0:	b40e      	push	{r1, r2, r3}
 803eab2:	b503      	push	{r0, r1, lr}
 803eab4:	4601      	mov	r1, r0
 803eab6:	ab03      	add	r3, sp, #12
 803eab8:	4805      	ldr	r0, [pc, #20]	; (803ead0 <fiprintf+0x20>)
 803eaba:	f853 2b04 	ldr.w	r2, [r3], #4
 803eabe:	6800      	ldr	r0, [r0, #0]
 803eac0:	9301      	str	r3, [sp, #4]
 803eac2:	f000 f871 	bl	803eba8 <_vfiprintf_r>
 803eac6:	b002      	add	sp, #8
 803eac8:	f85d eb04 	ldr.w	lr, [sp], #4
 803eacc:	b003      	add	sp, #12
 803eace:	4770      	bx	lr
 803ead0:	2000002c 	.word	0x2000002c

0803ead4 <memmove>:
 803ead4:	4288      	cmp	r0, r1
 803ead6:	b510      	push	{r4, lr}
 803ead8:	eb01 0402 	add.w	r4, r1, r2
 803eadc:	d902      	bls.n	803eae4 <memmove+0x10>
 803eade:	4284      	cmp	r4, r0
 803eae0:	4623      	mov	r3, r4
 803eae2:	d807      	bhi.n	803eaf4 <memmove+0x20>
 803eae4:	1e43      	subs	r3, r0, #1
 803eae6:	42a1      	cmp	r1, r4
 803eae8:	d008      	beq.n	803eafc <memmove+0x28>
 803eaea:	f811 2b01 	ldrb.w	r2, [r1], #1
 803eaee:	f803 2f01 	strb.w	r2, [r3, #1]!
 803eaf2:	e7f8      	b.n	803eae6 <memmove+0x12>
 803eaf4:	4402      	add	r2, r0
 803eaf6:	4601      	mov	r1, r0
 803eaf8:	428a      	cmp	r2, r1
 803eafa:	d100      	bne.n	803eafe <memmove+0x2a>
 803eafc:	bd10      	pop	{r4, pc}
 803eafe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803eb02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803eb06:	e7f7      	b.n	803eaf8 <memmove+0x24>

0803eb08 <_realloc_r>:
 803eb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803eb0a:	4607      	mov	r7, r0
 803eb0c:	4614      	mov	r4, r2
 803eb0e:	460e      	mov	r6, r1
 803eb10:	b921      	cbnz	r1, 803eb1c <_realloc_r+0x14>
 803eb12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 803eb16:	4611      	mov	r1, r2
 803eb18:	f7fc b8e2 	b.w	803ace0 <_malloc_r>
 803eb1c:	b922      	cbnz	r2, 803eb28 <_realloc_r+0x20>
 803eb1e:	f7fc f88f 	bl	803ac40 <_free_r>
 803eb22:	4625      	mov	r5, r4
 803eb24:	4628      	mov	r0, r5
 803eb26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803eb28:	f000 fa35 	bl	803ef96 <_malloc_usable_size_r>
 803eb2c:	42a0      	cmp	r0, r4
 803eb2e:	d20f      	bcs.n	803eb50 <_realloc_r+0x48>
 803eb30:	4621      	mov	r1, r4
 803eb32:	4638      	mov	r0, r7
 803eb34:	f7fc f8d4 	bl	803ace0 <_malloc_r>
 803eb38:	4605      	mov	r5, r0
 803eb3a:	2800      	cmp	r0, #0
 803eb3c:	d0f2      	beq.n	803eb24 <_realloc_r+0x1c>
 803eb3e:	4631      	mov	r1, r6
 803eb40:	4622      	mov	r2, r4
 803eb42:	f7fc f867 	bl	803ac14 <memcpy>
 803eb46:	4631      	mov	r1, r6
 803eb48:	4638      	mov	r0, r7
 803eb4a:	f7fc f879 	bl	803ac40 <_free_r>
 803eb4e:	e7e9      	b.n	803eb24 <_realloc_r+0x1c>
 803eb50:	4635      	mov	r5, r6
 803eb52:	e7e7      	b.n	803eb24 <_realloc_r+0x1c>

0803eb54 <__sfputc_r>:
 803eb54:	6893      	ldr	r3, [r2, #8]
 803eb56:	3b01      	subs	r3, #1
 803eb58:	2b00      	cmp	r3, #0
 803eb5a:	b410      	push	{r4}
 803eb5c:	6093      	str	r3, [r2, #8]
 803eb5e:	da08      	bge.n	803eb72 <__sfputc_r+0x1e>
 803eb60:	6994      	ldr	r4, [r2, #24]
 803eb62:	42a3      	cmp	r3, r4
 803eb64:	db01      	blt.n	803eb6a <__sfputc_r+0x16>
 803eb66:	290a      	cmp	r1, #10
 803eb68:	d103      	bne.n	803eb72 <__sfputc_r+0x1e>
 803eb6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 803eb6e:	f000 b94b 	b.w	803ee08 <__swbuf_r>
 803eb72:	6813      	ldr	r3, [r2, #0]
 803eb74:	1c58      	adds	r0, r3, #1
 803eb76:	6010      	str	r0, [r2, #0]
 803eb78:	7019      	strb	r1, [r3, #0]
 803eb7a:	4608      	mov	r0, r1
 803eb7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 803eb80:	4770      	bx	lr

0803eb82 <__sfputs_r>:
 803eb82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803eb84:	4606      	mov	r6, r0
 803eb86:	460f      	mov	r7, r1
 803eb88:	4614      	mov	r4, r2
 803eb8a:	18d5      	adds	r5, r2, r3
 803eb8c:	42ac      	cmp	r4, r5
 803eb8e:	d101      	bne.n	803eb94 <__sfputs_r+0x12>
 803eb90:	2000      	movs	r0, #0
 803eb92:	e007      	b.n	803eba4 <__sfputs_r+0x22>
 803eb94:	f814 1b01 	ldrb.w	r1, [r4], #1
 803eb98:	463a      	mov	r2, r7
 803eb9a:	4630      	mov	r0, r6
 803eb9c:	f7ff ffda 	bl	803eb54 <__sfputc_r>
 803eba0:	1c43      	adds	r3, r0, #1
 803eba2:	d1f3      	bne.n	803eb8c <__sfputs_r+0xa>
 803eba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803eba8 <_vfiprintf_r>:
 803eba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803ebac:	460d      	mov	r5, r1
 803ebae:	b09d      	sub	sp, #116	; 0x74
 803ebb0:	4614      	mov	r4, r2
 803ebb2:	4698      	mov	r8, r3
 803ebb4:	4606      	mov	r6, r0
 803ebb6:	b118      	cbz	r0, 803ebc0 <_vfiprintf_r+0x18>
 803ebb8:	6983      	ldr	r3, [r0, #24]
 803ebba:	b90b      	cbnz	r3, 803ebc0 <_vfiprintf_r+0x18>
 803ebbc:	f7fb ff00 	bl	803a9c0 <__sinit>
 803ebc0:	4b89      	ldr	r3, [pc, #548]	; (803ede8 <_vfiprintf_r+0x240>)
 803ebc2:	429d      	cmp	r5, r3
 803ebc4:	d11b      	bne.n	803ebfe <_vfiprintf_r+0x56>
 803ebc6:	6875      	ldr	r5, [r6, #4]
 803ebc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803ebca:	07d9      	lsls	r1, r3, #31
 803ebcc:	d405      	bmi.n	803ebda <_vfiprintf_r+0x32>
 803ebce:	89ab      	ldrh	r3, [r5, #12]
 803ebd0:	059a      	lsls	r2, r3, #22
 803ebd2:	d402      	bmi.n	803ebda <_vfiprintf_r+0x32>
 803ebd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803ebd6:	f7fb ffb6 	bl	803ab46 <__retarget_lock_acquire_recursive>
 803ebda:	89ab      	ldrh	r3, [r5, #12]
 803ebdc:	071b      	lsls	r3, r3, #28
 803ebde:	d501      	bpl.n	803ebe4 <_vfiprintf_r+0x3c>
 803ebe0:	692b      	ldr	r3, [r5, #16]
 803ebe2:	b9eb      	cbnz	r3, 803ec20 <_vfiprintf_r+0x78>
 803ebe4:	4629      	mov	r1, r5
 803ebe6:	4630      	mov	r0, r6
 803ebe8:	f000 f960 	bl	803eeac <__swsetup_r>
 803ebec:	b1c0      	cbz	r0, 803ec20 <_vfiprintf_r+0x78>
 803ebee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803ebf0:	07dc      	lsls	r4, r3, #31
 803ebf2:	d50e      	bpl.n	803ec12 <_vfiprintf_r+0x6a>
 803ebf4:	f04f 30ff 	mov.w	r0, #4294967295
 803ebf8:	b01d      	add	sp, #116	; 0x74
 803ebfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803ebfe:	4b7b      	ldr	r3, [pc, #492]	; (803edec <_vfiprintf_r+0x244>)
 803ec00:	429d      	cmp	r5, r3
 803ec02:	d101      	bne.n	803ec08 <_vfiprintf_r+0x60>
 803ec04:	68b5      	ldr	r5, [r6, #8]
 803ec06:	e7df      	b.n	803ebc8 <_vfiprintf_r+0x20>
 803ec08:	4b79      	ldr	r3, [pc, #484]	; (803edf0 <_vfiprintf_r+0x248>)
 803ec0a:	429d      	cmp	r5, r3
 803ec0c:	bf08      	it	eq
 803ec0e:	68f5      	ldreq	r5, [r6, #12]
 803ec10:	e7da      	b.n	803ebc8 <_vfiprintf_r+0x20>
 803ec12:	89ab      	ldrh	r3, [r5, #12]
 803ec14:	0598      	lsls	r0, r3, #22
 803ec16:	d4ed      	bmi.n	803ebf4 <_vfiprintf_r+0x4c>
 803ec18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803ec1a:	f7fb ff95 	bl	803ab48 <__retarget_lock_release_recursive>
 803ec1e:	e7e9      	b.n	803ebf4 <_vfiprintf_r+0x4c>
 803ec20:	2300      	movs	r3, #0
 803ec22:	9309      	str	r3, [sp, #36]	; 0x24
 803ec24:	2320      	movs	r3, #32
 803ec26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803ec2a:	f8cd 800c 	str.w	r8, [sp, #12]
 803ec2e:	2330      	movs	r3, #48	; 0x30
 803ec30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803edf4 <_vfiprintf_r+0x24c>
 803ec34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803ec38:	f04f 0901 	mov.w	r9, #1
 803ec3c:	4623      	mov	r3, r4
 803ec3e:	469a      	mov	sl, r3
 803ec40:	f813 2b01 	ldrb.w	r2, [r3], #1
 803ec44:	b10a      	cbz	r2, 803ec4a <_vfiprintf_r+0xa2>
 803ec46:	2a25      	cmp	r2, #37	; 0x25
 803ec48:	d1f9      	bne.n	803ec3e <_vfiprintf_r+0x96>
 803ec4a:	ebba 0b04 	subs.w	fp, sl, r4
 803ec4e:	d00b      	beq.n	803ec68 <_vfiprintf_r+0xc0>
 803ec50:	465b      	mov	r3, fp
 803ec52:	4622      	mov	r2, r4
 803ec54:	4629      	mov	r1, r5
 803ec56:	4630      	mov	r0, r6
 803ec58:	f7ff ff93 	bl	803eb82 <__sfputs_r>
 803ec5c:	3001      	adds	r0, #1
 803ec5e:	f000 80aa 	beq.w	803edb6 <_vfiprintf_r+0x20e>
 803ec62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803ec64:	445a      	add	r2, fp
 803ec66:	9209      	str	r2, [sp, #36]	; 0x24
 803ec68:	f89a 3000 	ldrb.w	r3, [sl]
 803ec6c:	2b00      	cmp	r3, #0
 803ec6e:	f000 80a2 	beq.w	803edb6 <_vfiprintf_r+0x20e>
 803ec72:	2300      	movs	r3, #0
 803ec74:	f04f 32ff 	mov.w	r2, #4294967295
 803ec78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803ec7c:	f10a 0a01 	add.w	sl, sl, #1
 803ec80:	9304      	str	r3, [sp, #16]
 803ec82:	9307      	str	r3, [sp, #28]
 803ec84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803ec88:	931a      	str	r3, [sp, #104]	; 0x68
 803ec8a:	4654      	mov	r4, sl
 803ec8c:	2205      	movs	r2, #5
 803ec8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 803ec92:	4858      	ldr	r0, [pc, #352]	; (803edf4 <_vfiprintf_r+0x24c>)
 803ec94:	f7e1 faa4 	bl	80201e0 <memchr>
 803ec98:	9a04      	ldr	r2, [sp, #16]
 803ec9a:	b9d8      	cbnz	r0, 803ecd4 <_vfiprintf_r+0x12c>
 803ec9c:	06d1      	lsls	r1, r2, #27
 803ec9e:	bf44      	itt	mi
 803eca0:	2320      	movmi	r3, #32
 803eca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803eca6:	0713      	lsls	r3, r2, #28
 803eca8:	bf44      	itt	mi
 803ecaa:	232b      	movmi	r3, #43	; 0x2b
 803ecac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803ecb0:	f89a 3000 	ldrb.w	r3, [sl]
 803ecb4:	2b2a      	cmp	r3, #42	; 0x2a
 803ecb6:	d015      	beq.n	803ece4 <_vfiprintf_r+0x13c>
 803ecb8:	9a07      	ldr	r2, [sp, #28]
 803ecba:	4654      	mov	r4, sl
 803ecbc:	2000      	movs	r0, #0
 803ecbe:	f04f 0c0a 	mov.w	ip, #10
 803ecc2:	4621      	mov	r1, r4
 803ecc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 803ecc8:	3b30      	subs	r3, #48	; 0x30
 803ecca:	2b09      	cmp	r3, #9
 803eccc:	d94e      	bls.n	803ed6c <_vfiprintf_r+0x1c4>
 803ecce:	b1b0      	cbz	r0, 803ecfe <_vfiprintf_r+0x156>
 803ecd0:	9207      	str	r2, [sp, #28]
 803ecd2:	e014      	b.n	803ecfe <_vfiprintf_r+0x156>
 803ecd4:	eba0 0308 	sub.w	r3, r0, r8
 803ecd8:	fa09 f303 	lsl.w	r3, r9, r3
 803ecdc:	4313      	orrs	r3, r2
 803ecde:	9304      	str	r3, [sp, #16]
 803ece0:	46a2      	mov	sl, r4
 803ece2:	e7d2      	b.n	803ec8a <_vfiprintf_r+0xe2>
 803ece4:	9b03      	ldr	r3, [sp, #12]
 803ece6:	1d19      	adds	r1, r3, #4
 803ece8:	681b      	ldr	r3, [r3, #0]
 803ecea:	9103      	str	r1, [sp, #12]
 803ecec:	2b00      	cmp	r3, #0
 803ecee:	bfbb      	ittet	lt
 803ecf0:	425b      	neglt	r3, r3
 803ecf2:	f042 0202 	orrlt.w	r2, r2, #2
 803ecf6:	9307      	strge	r3, [sp, #28]
 803ecf8:	9307      	strlt	r3, [sp, #28]
 803ecfa:	bfb8      	it	lt
 803ecfc:	9204      	strlt	r2, [sp, #16]
 803ecfe:	7823      	ldrb	r3, [r4, #0]
 803ed00:	2b2e      	cmp	r3, #46	; 0x2e
 803ed02:	d10c      	bne.n	803ed1e <_vfiprintf_r+0x176>
 803ed04:	7863      	ldrb	r3, [r4, #1]
 803ed06:	2b2a      	cmp	r3, #42	; 0x2a
 803ed08:	d135      	bne.n	803ed76 <_vfiprintf_r+0x1ce>
 803ed0a:	9b03      	ldr	r3, [sp, #12]
 803ed0c:	1d1a      	adds	r2, r3, #4
 803ed0e:	681b      	ldr	r3, [r3, #0]
 803ed10:	9203      	str	r2, [sp, #12]
 803ed12:	2b00      	cmp	r3, #0
 803ed14:	bfb8      	it	lt
 803ed16:	f04f 33ff 	movlt.w	r3, #4294967295
 803ed1a:	3402      	adds	r4, #2
 803ed1c:	9305      	str	r3, [sp, #20]
 803ed1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803ee04 <_vfiprintf_r+0x25c>
 803ed22:	7821      	ldrb	r1, [r4, #0]
 803ed24:	2203      	movs	r2, #3
 803ed26:	4650      	mov	r0, sl
 803ed28:	f7e1 fa5a 	bl	80201e0 <memchr>
 803ed2c:	b140      	cbz	r0, 803ed40 <_vfiprintf_r+0x198>
 803ed2e:	2340      	movs	r3, #64	; 0x40
 803ed30:	eba0 000a 	sub.w	r0, r0, sl
 803ed34:	fa03 f000 	lsl.w	r0, r3, r0
 803ed38:	9b04      	ldr	r3, [sp, #16]
 803ed3a:	4303      	orrs	r3, r0
 803ed3c:	3401      	adds	r4, #1
 803ed3e:	9304      	str	r3, [sp, #16]
 803ed40:	f814 1b01 	ldrb.w	r1, [r4], #1
 803ed44:	482c      	ldr	r0, [pc, #176]	; (803edf8 <_vfiprintf_r+0x250>)
 803ed46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803ed4a:	2206      	movs	r2, #6
 803ed4c:	f7e1 fa48 	bl	80201e0 <memchr>
 803ed50:	2800      	cmp	r0, #0
 803ed52:	d03f      	beq.n	803edd4 <_vfiprintf_r+0x22c>
 803ed54:	4b29      	ldr	r3, [pc, #164]	; (803edfc <_vfiprintf_r+0x254>)
 803ed56:	bb1b      	cbnz	r3, 803eda0 <_vfiprintf_r+0x1f8>
 803ed58:	9b03      	ldr	r3, [sp, #12]
 803ed5a:	3307      	adds	r3, #7
 803ed5c:	f023 0307 	bic.w	r3, r3, #7
 803ed60:	3308      	adds	r3, #8
 803ed62:	9303      	str	r3, [sp, #12]
 803ed64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803ed66:	443b      	add	r3, r7
 803ed68:	9309      	str	r3, [sp, #36]	; 0x24
 803ed6a:	e767      	b.n	803ec3c <_vfiprintf_r+0x94>
 803ed6c:	fb0c 3202 	mla	r2, ip, r2, r3
 803ed70:	460c      	mov	r4, r1
 803ed72:	2001      	movs	r0, #1
 803ed74:	e7a5      	b.n	803ecc2 <_vfiprintf_r+0x11a>
 803ed76:	2300      	movs	r3, #0
 803ed78:	3401      	adds	r4, #1
 803ed7a:	9305      	str	r3, [sp, #20]
 803ed7c:	4619      	mov	r1, r3
 803ed7e:	f04f 0c0a 	mov.w	ip, #10
 803ed82:	4620      	mov	r0, r4
 803ed84:	f810 2b01 	ldrb.w	r2, [r0], #1
 803ed88:	3a30      	subs	r2, #48	; 0x30
 803ed8a:	2a09      	cmp	r2, #9
 803ed8c:	d903      	bls.n	803ed96 <_vfiprintf_r+0x1ee>
 803ed8e:	2b00      	cmp	r3, #0
 803ed90:	d0c5      	beq.n	803ed1e <_vfiprintf_r+0x176>
 803ed92:	9105      	str	r1, [sp, #20]
 803ed94:	e7c3      	b.n	803ed1e <_vfiprintf_r+0x176>
 803ed96:	fb0c 2101 	mla	r1, ip, r1, r2
 803ed9a:	4604      	mov	r4, r0
 803ed9c:	2301      	movs	r3, #1
 803ed9e:	e7f0      	b.n	803ed82 <_vfiprintf_r+0x1da>
 803eda0:	ab03      	add	r3, sp, #12
 803eda2:	9300      	str	r3, [sp, #0]
 803eda4:	462a      	mov	r2, r5
 803eda6:	4b16      	ldr	r3, [pc, #88]	; (803ee00 <_vfiprintf_r+0x258>)
 803eda8:	a904      	add	r1, sp, #16
 803edaa:	4630      	mov	r0, r6
 803edac:	f7fc f892 	bl	803aed4 <_printf_float>
 803edb0:	4607      	mov	r7, r0
 803edb2:	1c78      	adds	r0, r7, #1
 803edb4:	d1d6      	bne.n	803ed64 <_vfiprintf_r+0x1bc>
 803edb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803edb8:	07d9      	lsls	r1, r3, #31
 803edba:	d405      	bmi.n	803edc8 <_vfiprintf_r+0x220>
 803edbc:	89ab      	ldrh	r3, [r5, #12]
 803edbe:	059a      	lsls	r2, r3, #22
 803edc0:	d402      	bmi.n	803edc8 <_vfiprintf_r+0x220>
 803edc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803edc4:	f7fb fec0 	bl	803ab48 <__retarget_lock_release_recursive>
 803edc8:	89ab      	ldrh	r3, [r5, #12]
 803edca:	065b      	lsls	r3, r3, #25
 803edcc:	f53f af12 	bmi.w	803ebf4 <_vfiprintf_r+0x4c>
 803edd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 803edd2:	e711      	b.n	803ebf8 <_vfiprintf_r+0x50>
 803edd4:	ab03      	add	r3, sp, #12
 803edd6:	9300      	str	r3, [sp, #0]
 803edd8:	462a      	mov	r2, r5
 803edda:	4b09      	ldr	r3, [pc, #36]	; (803ee00 <_vfiprintf_r+0x258>)
 803eddc:	a904      	add	r1, sp, #16
 803edde:	4630      	mov	r0, r6
 803ede0:	f7fc fb1c 	bl	803b41c <_printf_i>
 803ede4:	e7e4      	b.n	803edb0 <_vfiprintf_r+0x208>
 803ede6:	bf00      	nop
 803ede8:	0803ffe4 	.word	0x0803ffe4
 803edec:	08040004 	.word	0x08040004
 803edf0:	0803ffc4 	.word	0x0803ffc4
 803edf4:	0804042c 	.word	0x0804042c
 803edf8:	08040436 	.word	0x08040436
 803edfc:	0803aed5 	.word	0x0803aed5
 803ee00:	0803eb83 	.word	0x0803eb83
 803ee04:	08040432 	.word	0x08040432

0803ee08 <__swbuf_r>:
 803ee08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803ee0a:	460e      	mov	r6, r1
 803ee0c:	4614      	mov	r4, r2
 803ee0e:	4605      	mov	r5, r0
 803ee10:	b118      	cbz	r0, 803ee1a <__swbuf_r+0x12>
 803ee12:	6983      	ldr	r3, [r0, #24]
 803ee14:	b90b      	cbnz	r3, 803ee1a <__swbuf_r+0x12>
 803ee16:	f7fb fdd3 	bl	803a9c0 <__sinit>
 803ee1a:	4b21      	ldr	r3, [pc, #132]	; (803eea0 <__swbuf_r+0x98>)
 803ee1c:	429c      	cmp	r4, r3
 803ee1e:	d12b      	bne.n	803ee78 <__swbuf_r+0x70>
 803ee20:	686c      	ldr	r4, [r5, #4]
 803ee22:	69a3      	ldr	r3, [r4, #24]
 803ee24:	60a3      	str	r3, [r4, #8]
 803ee26:	89a3      	ldrh	r3, [r4, #12]
 803ee28:	071a      	lsls	r2, r3, #28
 803ee2a:	d52f      	bpl.n	803ee8c <__swbuf_r+0x84>
 803ee2c:	6923      	ldr	r3, [r4, #16]
 803ee2e:	b36b      	cbz	r3, 803ee8c <__swbuf_r+0x84>
 803ee30:	6923      	ldr	r3, [r4, #16]
 803ee32:	6820      	ldr	r0, [r4, #0]
 803ee34:	1ac0      	subs	r0, r0, r3
 803ee36:	6963      	ldr	r3, [r4, #20]
 803ee38:	b2f6      	uxtb	r6, r6
 803ee3a:	4283      	cmp	r3, r0
 803ee3c:	4637      	mov	r7, r6
 803ee3e:	dc04      	bgt.n	803ee4a <__swbuf_r+0x42>
 803ee40:	4621      	mov	r1, r4
 803ee42:	4628      	mov	r0, r5
 803ee44:	f7fb fd28 	bl	803a898 <_fflush_r>
 803ee48:	bb30      	cbnz	r0, 803ee98 <__swbuf_r+0x90>
 803ee4a:	68a3      	ldr	r3, [r4, #8]
 803ee4c:	3b01      	subs	r3, #1
 803ee4e:	60a3      	str	r3, [r4, #8]
 803ee50:	6823      	ldr	r3, [r4, #0]
 803ee52:	1c5a      	adds	r2, r3, #1
 803ee54:	6022      	str	r2, [r4, #0]
 803ee56:	701e      	strb	r6, [r3, #0]
 803ee58:	6963      	ldr	r3, [r4, #20]
 803ee5a:	3001      	adds	r0, #1
 803ee5c:	4283      	cmp	r3, r0
 803ee5e:	d004      	beq.n	803ee6a <__swbuf_r+0x62>
 803ee60:	89a3      	ldrh	r3, [r4, #12]
 803ee62:	07db      	lsls	r3, r3, #31
 803ee64:	d506      	bpl.n	803ee74 <__swbuf_r+0x6c>
 803ee66:	2e0a      	cmp	r6, #10
 803ee68:	d104      	bne.n	803ee74 <__swbuf_r+0x6c>
 803ee6a:	4621      	mov	r1, r4
 803ee6c:	4628      	mov	r0, r5
 803ee6e:	f7fb fd13 	bl	803a898 <_fflush_r>
 803ee72:	b988      	cbnz	r0, 803ee98 <__swbuf_r+0x90>
 803ee74:	4638      	mov	r0, r7
 803ee76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803ee78:	4b0a      	ldr	r3, [pc, #40]	; (803eea4 <__swbuf_r+0x9c>)
 803ee7a:	429c      	cmp	r4, r3
 803ee7c:	d101      	bne.n	803ee82 <__swbuf_r+0x7a>
 803ee7e:	68ac      	ldr	r4, [r5, #8]
 803ee80:	e7cf      	b.n	803ee22 <__swbuf_r+0x1a>
 803ee82:	4b09      	ldr	r3, [pc, #36]	; (803eea8 <__swbuf_r+0xa0>)
 803ee84:	429c      	cmp	r4, r3
 803ee86:	bf08      	it	eq
 803ee88:	68ec      	ldreq	r4, [r5, #12]
 803ee8a:	e7ca      	b.n	803ee22 <__swbuf_r+0x1a>
 803ee8c:	4621      	mov	r1, r4
 803ee8e:	4628      	mov	r0, r5
 803ee90:	f000 f80c 	bl	803eeac <__swsetup_r>
 803ee94:	2800      	cmp	r0, #0
 803ee96:	d0cb      	beq.n	803ee30 <__swbuf_r+0x28>
 803ee98:	f04f 37ff 	mov.w	r7, #4294967295
 803ee9c:	e7ea      	b.n	803ee74 <__swbuf_r+0x6c>
 803ee9e:	bf00      	nop
 803eea0:	0803ffe4 	.word	0x0803ffe4
 803eea4:	08040004 	.word	0x08040004
 803eea8:	0803ffc4 	.word	0x0803ffc4

0803eeac <__swsetup_r>:
 803eeac:	4b32      	ldr	r3, [pc, #200]	; (803ef78 <__swsetup_r+0xcc>)
 803eeae:	b570      	push	{r4, r5, r6, lr}
 803eeb0:	681d      	ldr	r5, [r3, #0]
 803eeb2:	4606      	mov	r6, r0
 803eeb4:	460c      	mov	r4, r1
 803eeb6:	b125      	cbz	r5, 803eec2 <__swsetup_r+0x16>
 803eeb8:	69ab      	ldr	r3, [r5, #24]
 803eeba:	b913      	cbnz	r3, 803eec2 <__swsetup_r+0x16>
 803eebc:	4628      	mov	r0, r5
 803eebe:	f7fb fd7f 	bl	803a9c0 <__sinit>
 803eec2:	4b2e      	ldr	r3, [pc, #184]	; (803ef7c <__swsetup_r+0xd0>)
 803eec4:	429c      	cmp	r4, r3
 803eec6:	d10f      	bne.n	803eee8 <__swsetup_r+0x3c>
 803eec8:	686c      	ldr	r4, [r5, #4]
 803eeca:	89a3      	ldrh	r3, [r4, #12]
 803eecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803eed0:	0719      	lsls	r1, r3, #28
 803eed2:	d42c      	bmi.n	803ef2e <__swsetup_r+0x82>
 803eed4:	06dd      	lsls	r5, r3, #27
 803eed6:	d411      	bmi.n	803eefc <__swsetup_r+0x50>
 803eed8:	2309      	movs	r3, #9
 803eeda:	6033      	str	r3, [r6, #0]
 803eedc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 803eee0:	81a3      	strh	r3, [r4, #12]
 803eee2:	f04f 30ff 	mov.w	r0, #4294967295
 803eee6:	e03e      	b.n	803ef66 <__swsetup_r+0xba>
 803eee8:	4b25      	ldr	r3, [pc, #148]	; (803ef80 <__swsetup_r+0xd4>)
 803eeea:	429c      	cmp	r4, r3
 803eeec:	d101      	bne.n	803eef2 <__swsetup_r+0x46>
 803eeee:	68ac      	ldr	r4, [r5, #8]
 803eef0:	e7eb      	b.n	803eeca <__swsetup_r+0x1e>
 803eef2:	4b24      	ldr	r3, [pc, #144]	; (803ef84 <__swsetup_r+0xd8>)
 803eef4:	429c      	cmp	r4, r3
 803eef6:	bf08      	it	eq
 803eef8:	68ec      	ldreq	r4, [r5, #12]
 803eefa:	e7e6      	b.n	803eeca <__swsetup_r+0x1e>
 803eefc:	0758      	lsls	r0, r3, #29
 803eefe:	d512      	bpl.n	803ef26 <__swsetup_r+0x7a>
 803ef00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803ef02:	b141      	cbz	r1, 803ef16 <__swsetup_r+0x6a>
 803ef04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803ef08:	4299      	cmp	r1, r3
 803ef0a:	d002      	beq.n	803ef12 <__swsetup_r+0x66>
 803ef0c:	4630      	mov	r0, r6
 803ef0e:	f7fb fe97 	bl	803ac40 <_free_r>
 803ef12:	2300      	movs	r3, #0
 803ef14:	6363      	str	r3, [r4, #52]	; 0x34
 803ef16:	89a3      	ldrh	r3, [r4, #12]
 803ef18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803ef1c:	81a3      	strh	r3, [r4, #12]
 803ef1e:	2300      	movs	r3, #0
 803ef20:	6063      	str	r3, [r4, #4]
 803ef22:	6923      	ldr	r3, [r4, #16]
 803ef24:	6023      	str	r3, [r4, #0]
 803ef26:	89a3      	ldrh	r3, [r4, #12]
 803ef28:	f043 0308 	orr.w	r3, r3, #8
 803ef2c:	81a3      	strh	r3, [r4, #12]
 803ef2e:	6923      	ldr	r3, [r4, #16]
 803ef30:	b94b      	cbnz	r3, 803ef46 <__swsetup_r+0x9a>
 803ef32:	89a3      	ldrh	r3, [r4, #12]
 803ef34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803ef38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803ef3c:	d003      	beq.n	803ef46 <__swsetup_r+0x9a>
 803ef3e:	4621      	mov	r1, r4
 803ef40:	4630      	mov	r0, r6
 803ef42:	f7fb fe27 	bl	803ab94 <__smakebuf_r>
 803ef46:	89a0      	ldrh	r0, [r4, #12]
 803ef48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803ef4c:	f010 0301 	ands.w	r3, r0, #1
 803ef50:	d00a      	beq.n	803ef68 <__swsetup_r+0xbc>
 803ef52:	2300      	movs	r3, #0
 803ef54:	60a3      	str	r3, [r4, #8]
 803ef56:	6963      	ldr	r3, [r4, #20]
 803ef58:	425b      	negs	r3, r3
 803ef5a:	61a3      	str	r3, [r4, #24]
 803ef5c:	6923      	ldr	r3, [r4, #16]
 803ef5e:	b943      	cbnz	r3, 803ef72 <__swsetup_r+0xc6>
 803ef60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803ef64:	d1ba      	bne.n	803eedc <__swsetup_r+0x30>
 803ef66:	bd70      	pop	{r4, r5, r6, pc}
 803ef68:	0781      	lsls	r1, r0, #30
 803ef6a:	bf58      	it	pl
 803ef6c:	6963      	ldrpl	r3, [r4, #20]
 803ef6e:	60a3      	str	r3, [r4, #8]
 803ef70:	e7f4      	b.n	803ef5c <__swsetup_r+0xb0>
 803ef72:	2000      	movs	r0, #0
 803ef74:	e7f7      	b.n	803ef66 <__swsetup_r+0xba>
 803ef76:	bf00      	nop
 803ef78:	2000002c 	.word	0x2000002c
 803ef7c:	0803ffe4 	.word	0x0803ffe4
 803ef80:	08040004 	.word	0x08040004
 803ef84:	0803ffc4 	.word	0x0803ffc4

0803ef88 <abort>:
 803ef88:	b508      	push	{r3, lr}
 803ef8a:	2006      	movs	r0, #6
 803ef8c:	f000 f834 	bl	803eff8 <raise>
 803ef90:	2001      	movs	r0, #1
 803ef92:	f7f3 fb69 	bl	8032668 <_exit>

0803ef96 <_malloc_usable_size_r>:
 803ef96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803ef9a:	1f18      	subs	r0, r3, #4
 803ef9c:	2b00      	cmp	r3, #0
 803ef9e:	bfbc      	itt	lt
 803efa0:	580b      	ldrlt	r3, [r1, r0]
 803efa2:	18c0      	addlt	r0, r0, r3
 803efa4:	4770      	bx	lr

0803efa6 <_raise_r>:
 803efa6:	291f      	cmp	r1, #31
 803efa8:	b538      	push	{r3, r4, r5, lr}
 803efaa:	4604      	mov	r4, r0
 803efac:	460d      	mov	r5, r1
 803efae:	d904      	bls.n	803efba <_raise_r+0x14>
 803efb0:	2316      	movs	r3, #22
 803efb2:	6003      	str	r3, [r0, #0]
 803efb4:	f04f 30ff 	mov.w	r0, #4294967295
 803efb8:	bd38      	pop	{r3, r4, r5, pc}
 803efba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 803efbc:	b112      	cbz	r2, 803efc4 <_raise_r+0x1e>
 803efbe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803efc2:	b94b      	cbnz	r3, 803efd8 <_raise_r+0x32>
 803efc4:	4620      	mov	r0, r4
 803efc6:	f000 f831 	bl	803f02c <_getpid_r>
 803efca:	462a      	mov	r2, r5
 803efcc:	4601      	mov	r1, r0
 803efce:	4620      	mov	r0, r4
 803efd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803efd4:	f000 b818 	b.w	803f008 <_kill_r>
 803efd8:	2b01      	cmp	r3, #1
 803efda:	d00a      	beq.n	803eff2 <_raise_r+0x4c>
 803efdc:	1c59      	adds	r1, r3, #1
 803efde:	d103      	bne.n	803efe8 <_raise_r+0x42>
 803efe0:	2316      	movs	r3, #22
 803efe2:	6003      	str	r3, [r0, #0]
 803efe4:	2001      	movs	r0, #1
 803efe6:	e7e7      	b.n	803efb8 <_raise_r+0x12>
 803efe8:	2400      	movs	r4, #0
 803efea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 803efee:	4628      	mov	r0, r5
 803eff0:	4798      	blx	r3
 803eff2:	2000      	movs	r0, #0
 803eff4:	e7e0      	b.n	803efb8 <_raise_r+0x12>
	...

0803eff8 <raise>:
 803eff8:	4b02      	ldr	r3, [pc, #8]	; (803f004 <raise+0xc>)
 803effa:	4601      	mov	r1, r0
 803effc:	6818      	ldr	r0, [r3, #0]
 803effe:	f7ff bfd2 	b.w	803efa6 <_raise_r>
 803f002:	bf00      	nop
 803f004:	2000002c 	.word	0x2000002c

0803f008 <_kill_r>:
 803f008:	b538      	push	{r3, r4, r5, lr}
 803f00a:	4d07      	ldr	r5, [pc, #28]	; (803f028 <_kill_r+0x20>)
 803f00c:	2300      	movs	r3, #0
 803f00e:	4604      	mov	r4, r0
 803f010:	4608      	mov	r0, r1
 803f012:	4611      	mov	r1, r2
 803f014:	602b      	str	r3, [r5, #0]
 803f016:	f7f3 fb17 	bl	8032648 <_kill>
 803f01a:	1c43      	adds	r3, r0, #1
 803f01c:	d102      	bne.n	803f024 <_kill_r+0x1c>
 803f01e:	682b      	ldr	r3, [r5, #0]
 803f020:	b103      	cbz	r3, 803f024 <_kill_r+0x1c>
 803f022:	6023      	str	r3, [r4, #0]
 803f024:	bd38      	pop	{r3, r4, r5, pc}
 803f026:	bf00      	nop
 803f028:	20000b80 	.word	0x20000b80

0803f02c <_getpid_r>:
 803f02c:	f7f3 bb04 	b.w	8032638 <_getpid>

0803f030 <_init>:
 803f030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803f032:	bf00      	nop
 803f034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803f036:	bc08      	pop	{r3}
 803f038:	469e      	mov	lr, r3
 803f03a:	4770      	bx	lr

0803f03c <_fini>:
 803f03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803f03e:	bf00      	nop
 803f040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803f042:	bc08      	pop	{r3}
 803f044:	469e      	mov	lr, r3
 803f046:	4770      	bx	lr
