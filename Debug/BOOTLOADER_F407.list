
BOOTLOADER_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d778  08020190  08020190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000144c  0803d908  0803d908  0002d908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803ed54  0803ed54  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  0803ed54  0803ed54  0002ed54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803ed5c  0803ed5c  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803ed5c  0803ed5c  0002ed5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803ed60  0803ed60  0002ed60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0803ed64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          000007c8  20000200  20000200  00030200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009c8  200009c8  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .debug_info   000231d8  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000471d  00000000  00000000  00053408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  00057b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016a8  00000000  00000000  00059388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025cfa  00000000  00000000  0005aa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020fba  00000000  00000000  0008072a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5bd0  00000000  00000000  000a16e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001772b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b40  00000000  00000000  00177308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020190 <__do_global_dtors_aux>:
 8020190:	b510      	push	{r4, lr}
 8020192:	4c05      	ldr	r4, [pc, #20]	; (80201a8 <__do_global_dtors_aux+0x18>)
 8020194:	7823      	ldrb	r3, [r4, #0]
 8020196:	b933      	cbnz	r3, 80201a6 <__do_global_dtors_aux+0x16>
 8020198:	4b04      	ldr	r3, [pc, #16]	; (80201ac <__do_global_dtors_aux+0x1c>)
 802019a:	b113      	cbz	r3, 80201a2 <__do_global_dtors_aux+0x12>
 802019c:	4804      	ldr	r0, [pc, #16]	; (80201b0 <__do_global_dtors_aux+0x20>)
 802019e:	f3af 8000 	nop.w
 80201a2:	2301      	movs	r3, #1
 80201a4:	7023      	strb	r3, [r4, #0]
 80201a6:	bd10      	pop	{r4, pc}
 80201a8:	20000200 	.word	0x20000200
 80201ac:	00000000 	.word	0x00000000
 80201b0:	0803d8f0 	.word	0x0803d8f0

080201b4 <frame_dummy>:
 80201b4:	b508      	push	{r3, lr}
 80201b6:	4b03      	ldr	r3, [pc, #12]	; (80201c4 <frame_dummy+0x10>)
 80201b8:	b11b      	cbz	r3, 80201c2 <frame_dummy+0xe>
 80201ba:	4903      	ldr	r1, [pc, #12]	; (80201c8 <frame_dummy+0x14>)
 80201bc:	4803      	ldr	r0, [pc, #12]	; (80201cc <frame_dummy+0x18>)
 80201be:	f3af 8000 	nop.w
 80201c2:	bd08      	pop	{r3, pc}
 80201c4:	00000000 	.word	0x00000000
 80201c8:	20000204 	.word	0x20000204
 80201cc:	0803d8f0 	.word	0x0803d8f0

080201d0 <strlen>:
 80201d0:	4603      	mov	r3, r0
 80201d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201d6:	2a00      	cmp	r2, #0
 80201d8:	d1fb      	bne.n	80201d2 <strlen+0x2>
 80201da:	1a18      	subs	r0, r3, r0
 80201dc:	3801      	subs	r0, #1
 80201de:	4770      	bx	lr

080201e0 <memchr>:
 80201e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80201e4:	2a10      	cmp	r2, #16
 80201e6:	db2b      	blt.n	8020240 <memchr+0x60>
 80201e8:	f010 0f07 	tst.w	r0, #7
 80201ec:	d008      	beq.n	8020200 <memchr+0x20>
 80201ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201f2:	3a01      	subs	r2, #1
 80201f4:	428b      	cmp	r3, r1
 80201f6:	d02d      	beq.n	8020254 <memchr+0x74>
 80201f8:	f010 0f07 	tst.w	r0, #7
 80201fc:	b342      	cbz	r2, 8020250 <memchr+0x70>
 80201fe:	d1f6      	bne.n	80201ee <memchr+0xe>
 8020200:	b4f0      	push	{r4, r5, r6, r7}
 8020202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802020a:	f022 0407 	bic.w	r4, r2, #7
 802020e:	f07f 0700 	mvns.w	r7, #0
 8020212:	2300      	movs	r3, #0
 8020214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020218:	3c08      	subs	r4, #8
 802021a:	ea85 0501 	eor.w	r5, r5, r1
 802021e:	ea86 0601 	eor.w	r6, r6, r1
 8020222:	fa85 f547 	uadd8	r5, r5, r7
 8020226:	faa3 f587 	sel	r5, r3, r7
 802022a:	fa86 f647 	uadd8	r6, r6, r7
 802022e:	faa5 f687 	sel	r6, r5, r7
 8020232:	b98e      	cbnz	r6, 8020258 <memchr+0x78>
 8020234:	d1ee      	bne.n	8020214 <memchr+0x34>
 8020236:	bcf0      	pop	{r4, r5, r6, r7}
 8020238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802023c:	f002 0207 	and.w	r2, r2, #7
 8020240:	b132      	cbz	r2, 8020250 <memchr+0x70>
 8020242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020246:	3a01      	subs	r2, #1
 8020248:	ea83 0301 	eor.w	r3, r3, r1
 802024c:	b113      	cbz	r3, 8020254 <memchr+0x74>
 802024e:	d1f8      	bne.n	8020242 <memchr+0x62>
 8020250:	2000      	movs	r0, #0
 8020252:	4770      	bx	lr
 8020254:	3801      	subs	r0, #1
 8020256:	4770      	bx	lr
 8020258:	2d00      	cmp	r5, #0
 802025a:	bf06      	itte	eq
 802025c:	4635      	moveq	r5, r6
 802025e:	3803      	subeq	r0, #3
 8020260:	3807      	subne	r0, #7
 8020262:	f015 0f01 	tst.w	r5, #1
 8020266:	d107      	bne.n	8020278 <memchr+0x98>
 8020268:	3001      	adds	r0, #1
 802026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802026e:	bf02      	ittt	eq
 8020270:	3001      	addeq	r0, #1
 8020272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8020276:	3001      	addeq	r0, #1
 8020278:	bcf0      	pop	{r4, r5, r6, r7}
 802027a:	3801      	subs	r0, #1
 802027c:	4770      	bx	lr
 802027e:	bf00      	nop

08020280 <__aeabi_drsub>:
 8020280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020284:	e002      	b.n	802028c <__adddf3>
 8020286:	bf00      	nop

08020288 <__aeabi_dsub>:
 8020288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802028c <__adddf3>:
 802028c:	b530      	push	{r4, r5, lr}
 802028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020296:	ea94 0f05 	teq	r4, r5
 802029a:	bf08      	it	eq
 802029c:	ea90 0f02 	teqeq	r0, r2
 80202a0:	bf1f      	itttt	ne
 80202a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80202a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80202aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80202ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80202b2:	f000 80e2 	beq.w	802047a <__adddf3+0x1ee>
 80202b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80202ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80202be:	bfb8      	it	lt
 80202c0:	426d      	neglt	r5, r5
 80202c2:	dd0c      	ble.n	80202de <__adddf3+0x52>
 80202c4:	442c      	add	r4, r5
 80202c6:	ea80 0202 	eor.w	r2, r0, r2
 80202ca:	ea81 0303 	eor.w	r3, r1, r3
 80202ce:	ea82 0000 	eor.w	r0, r2, r0
 80202d2:	ea83 0101 	eor.w	r1, r3, r1
 80202d6:	ea80 0202 	eor.w	r2, r0, r2
 80202da:	ea81 0303 	eor.w	r3, r1, r3
 80202de:	2d36      	cmp	r5, #54	; 0x36
 80202e0:	bf88      	it	hi
 80202e2:	bd30      	pophi	{r4, r5, pc}
 80202e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80202e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80202ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80202f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80202f4:	d002      	beq.n	80202fc <__adddf3+0x70>
 80202f6:	4240      	negs	r0, r0
 80202f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80202fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020308:	d002      	beq.n	8020310 <__adddf3+0x84>
 802030a:	4252      	negs	r2, r2
 802030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020310:	ea94 0f05 	teq	r4, r5
 8020314:	f000 80a7 	beq.w	8020466 <__adddf3+0x1da>
 8020318:	f1a4 0401 	sub.w	r4, r4, #1
 802031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020320:	db0d      	blt.n	802033e <__adddf3+0xb2>
 8020322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020326:	fa22 f205 	lsr.w	r2, r2, r5
 802032a:	1880      	adds	r0, r0, r2
 802032c:	f141 0100 	adc.w	r1, r1, #0
 8020330:	fa03 f20e 	lsl.w	r2, r3, lr
 8020334:	1880      	adds	r0, r0, r2
 8020336:	fa43 f305 	asr.w	r3, r3, r5
 802033a:	4159      	adcs	r1, r3
 802033c:	e00e      	b.n	802035c <__adddf3+0xd0>
 802033e:	f1a5 0520 	sub.w	r5, r5, #32
 8020342:	f10e 0e20 	add.w	lr, lr, #32
 8020346:	2a01      	cmp	r2, #1
 8020348:	fa03 fc0e 	lsl.w	ip, r3, lr
 802034c:	bf28      	it	cs
 802034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020352:	fa43 f305 	asr.w	r3, r3, r5
 8020356:	18c0      	adds	r0, r0, r3
 8020358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020360:	d507      	bpl.n	8020372 <__adddf3+0xe6>
 8020362:	f04f 0e00 	mov.w	lr, #0
 8020366:	f1dc 0c00 	rsbs	ip, ip, #0
 802036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020376:	d31b      	bcc.n	80203b0 <__adddf3+0x124>
 8020378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802037c:	d30c      	bcc.n	8020398 <__adddf3+0x10c>
 802037e:	0849      	lsrs	r1, r1, #1
 8020380:	ea5f 0030 	movs.w	r0, r0, rrx
 8020384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020388:	f104 0401 	add.w	r4, r4, #1
 802038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020394:	f080 809a 	bcs.w	80204cc <__adddf3+0x240>
 8020398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802039c:	bf08      	it	eq
 802039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80203a2:	f150 0000 	adcs.w	r0, r0, #0
 80203a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80203aa:	ea41 0105 	orr.w	r1, r1, r5
 80203ae:	bd30      	pop	{r4, r5, pc}
 80203b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80203b4:	4140      	adcs	r0, r0
 80203b6:	eb41 0101 	adc.w	r1, r1, r1
 80203ba:	3c01      	subs	r4, #1
 80203bc:	bf28      	it	cs
 80203be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80203c2:	d2e9      	bcs.n	8020398 <__adddf3+0x10c>
 80203c4:	f091 0f00 	teq	r1, #0
 80203c8:	bf04      	itt	eq
 80203ca:	4601      	moveq	r1, r0
 80203cc:	2000      	moveq	r0, #0
 80203ce:	fab1 f381 	clz	r3, r1
 80203d2:	bf08      	it	eq
 80203d4:	3320      	addeq	r3, #32
 80203d6:	f1a3 030b 	sub.w	r3, r3, #11
 80203da:	f1b3 0220 	subs.w	r2, r3, #32
 80203de:	da0c      	bge.n	80203fa <__adddf3+0x16e>
 80203e0:	320c      	adds	r2, #12
 80203e2:	dd08      	ble.n	80203f6 <__adddf3+0x16a>
 80203e4:	f102 0c14 	add.w	ip, r2, #20
 80203e8:	f1c2 020c 	rsb	r2, r2, #12
 80203ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80203f0:	fa21 f102 	lsr.w	r1, r1, r2
 80203f4:	e00c      	b.n	8020410 <__adddf3+0x184>
 80203f6:	f102 0214 	add.w	r2, r2, #20
 80203fa:	bfd8      	it	le
 80203fc:	f1c2 0c20 	rsble	ip, r2, #32
 8020400:	fa01 f102 	lsl.w	r1, r1, r2
 8020404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020408:	bfdc      	itt	le
 802040a:	ea41 010c 	orrle.w	r1, r1, ip
 802040e:	4090      	lslle	r0, r2
 8020410:	1ae4      	subs	r4, r4, r3
 8020412:	bfa2      	ittt	ge
 8020414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020418:	4329      	orrge	r1, r5
 802041a:	bd30      	popge	{r4, r5, pc}
 802041c:	ea6f 0404 	mvn.w	r4, r4
 8020420:	3c1f      	subs	r4, #31
 8020422:	da1c      	bge.n	802045e <__adddf3+0x1d2>
 8020424:	340c      	adds	r4, #12
 8020426:	dc0e      	bgt.n	8020446 <__adddf3+0x1ba>
 8020428:	f104 0414 	add.w	r4, r4, #20
 802042c:	f1c4 0220 	rsb	r2, r4, #32
 8020430:	fa20 f004 	lsr.w	r0, r0, r4
 8020434:	fa01 f302 	lsl.w	r3, r1, r2
 8020438:	ea40 0003 	orr.w	r0, r0, r3
 802043c:	fa21 f304 	lsr.w	r3, r1, r4
 8020440:	ea45 0103 	orr.w	r1, r5, r3
 8020444:	bd30      	pop	{r4, r5, pc}
 8020446:	f1c4 040c 	rsb	r4, r4, #12
 802044a:	f1c4 0220 	rsb	r2, r4, #32
 802044e:	fa20 f002 	lsr.w	r0, r0, r2
 8020452:	fa01 f304 	lsl.w	r3, r1, r4
 8020456:	ea40 0003 	orr.w	r0, r0, r3
 802045a:	4629      	mov	r1, r5
 802045c:	bd30      	pop	{r4, r5, pc}
 802045e:	fa21 f004 	lsr.w	r0, r1, r4
 8020462:	4629      	mov	r1, r5
 8020464:	bd30      	pop	{r4, r5, pc}
 8020466:	f094 0f00 	teq	r4, #0
 802046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802046e:	bf06      	itte	eq
 8020470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020474:	3401      	addeq	r4, #1
 8020476:	3d01      	subne	r5, #1
 8020478:	e74e      	b.n	8020318 <__adddf3+0x8c>
 802047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802047e:	bf18      	it	ne
 8020480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020484:	d029      	beq.n	80204da <__adddf3+0x24e>
 8020486:	ea94 0f05 	teq	r4, r5
 802048a:	bf08      	it	eq
 802048c:	ea90 0f02 	teqeq	r0, r2
 8020490:	d005      	beq.n	802049e <__adddf3+0x212>
 8020492:	ea54 0c00 	orrs.w	ip, r4, r0
 8020496:	bf04      	itt	eq
 8020498:	4619      	moveq	r1, r3
 802049a:	4610      	moveq	r0, r2
 802049c:	bd30      	pop	{r4, r5, pc}
 802049e:	ea91 0f03 	teq	r1, r3
 80204a2:	bf1e      	ittt	ne
 80204a4:	2100      	movne	r1, #0
 80204a6:	2000      	movne	r0, #0
 80204a8:	bd30      	popne	{r4, r5, pc}
 80204aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80204ae:	d105      	bne.n	80204bc <__adddf3+0x230>
 80204b0:	0040      	lsls	r0, r0, #1
 80204b2:	4149      	adcs	r1, r1
 80204b4:	bf28      	it	cs
 80204b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80204ba:	bd30      	pop	{r4, r5, pc}
 80204bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80204c0:	bf3c      	itt	cc
 80204c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80204c6:	bd30      	popcc	{r4, r5, pc}
 80204c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80204cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80204d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80204d4:	f04f 0000 	mov.w	r0, #0
 80204d8:	bd30      	pop	{r4, r5, pc}
 80204da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80204de:	bf1a      	itte	ne
 80204e0:	4619      	movne	r1, r3
 80204e2:	4610      	movne	r0, r2
 80204e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80204e8:	bf1c      	itt	ne
 80204ea:	460b      	movne	r3, r1
 80204ec:	4602      	movne	r2, r0
 80204ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80204f2:	bf06      	itte	eq
 80204f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80204f8:	ea91 0f03 	teqeq	r1, r3
 80204fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020500:	bd30      	pop	{r4, r5, pc}
 8020502:	bf00      	nop

08020504 <__aeabi_ui2d>:
 8020504:	f090 0f00 	teq	r0, #0
 8020508:	bf04      	itt	eq
 802050a:	2100      	moveq	r1, #0
 802050c:	4770      	bxeq	lr
 802050e:	b530      	push	{r4, r5, lr}
 8020510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020518:	f04f 0500 	mov.w	r5, #0
 802051c:	f04f 0100 	mov.w	r1, #0
 8020520:	e750      	b.n	80203c4 <__adddf3+0x138>
 8020522:	bf00      	nop

08020524 <__aeabi_i2d>:
 8020524:	f090 0f00 	teq	r0, #0
 8020528:	bf04      	itt	eq
 802052a:	2100      	moveq	r1, #0
 802052c:	4770      	bxeq	lr
 802052e:	b530      	push	{r4, r5, lr}
 8020530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802053c:	bf48      	it	mi
 802053e:	4240      	negmi	r0, r0
 8020540:	f04f 0100 	mov.w	r1, #0
 8020544:	e73e      	b.n	80203c4 <__adddf3+0x138>
 8020546:	bf00      	nop

08020548 <__aeabi_f2d>:
 8020548:	0042      	lsls	r2, r0, #1
 802054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020556:	bf1f      	itttt	ne
 8020558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020564:	4770      	bxne	lr
 8020566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802056a:	bf08      	it	eq
 802056c:	4770      	bxeq	lr
 802056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020572:	bf04      	itt	eq
 8020574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020578:	4770      	bxeq	lr
 802057a:	b530      	push	{r4, r5, lr}
 802057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020588:	e71c      	b.n	80203c4 <__adddf3+0x138>
 802058a:	bf00      	nop

0802058c <__aeabi_ul2d>:
 802058c:	ea50 0201 	orrs.w	r2, r0, r1
 8020590:	bf08      	it	eq
 8020592:	4770      	bxeq	lr
 8020594:	b530      	push	{r4, r5, lr}
 8020596:	f04f 0500 	mov.w	r5, #0
 802059a:	e00a      	b.n	80205b2 <__aeabi_l2d+0x16>

0802059c <__aeabi_l2d>:
 802059c:	ea50 0201 	orrs.w	r2, r0, r1
 80205a0:	bf08      	it	eq
 80205a2:	4770      	bxeq	lr
 80205a4:	b530      	push	{r4, r5, lr}
 80205a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80205aa:	d502      	bpl.n	80205b2 <__aeabi_l2d+0x16>
 80205ac:	4240      	negs	r0, r0
 80205ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80205b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80205b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80205ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80205be:	f43f aed8 	beq.w	8020372 <__adddf3+0xe6>
 80205c2:	f04f 0203 	mov.w	r2, #3
 80205c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205ca:	bf18      	it	ne
 80205cc:	3203      	addne	r2, #3
 80205ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205d2:	bf18      	it	ne
 80205d4:	3203      	addne	r2, #3
 80205d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80205da:	f1c2 0320 	rsb	r3, r2, #32
 80205de:	fa00 fc03 	lsl.w	ip, r0, r3
 80205e2:	fa20 f002 	lsr.w	r0, r0, r2
 80205e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80205ea:	ea40 000e 	orr.w	r0, r0, lr
 80205ee:	fa21 f102 	lsr.w	r1, r1, r2
 80205f2:	4414      	add	r4, r2
 80205f4:	e6bd      	b.n	8020372 <__adddf3+0xe6>
 80205f6:	bf00      	nop

080205f8 <__aeabi_dmul>:
 80205f8:	b570      	push	{r4, r5, r6, lr}
 80205fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80205fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020606:	bf1d      	ittte	ne
 8020608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802060c:	ea94 0f0c 	teqne	r4, ip
 8020610:	ea95 0f0c 	teqne	r5, ip
 8020614:	f000 f8de 	bleq	80207d4 <__aeabi_dmul+0x1dc>
 8020618:	442c      	add	r4, r5
 802061a:	ea81 0603 	eor.w	r6, r1, r3
 802061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802062a:	bf18      	it	ne
 802062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020638:	d038      	beq.n	80206ac <__aeabi_dmul+0xb4>
 802063a:	fba0 ce02 	umull	ip, lr, r0, r2
 802063e:	f04f 0500 	mov.w	r5, #0
 8020642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802064e:	f04f 0600 	mov.w	r6, #0
 8020652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020656:	f09c 0f00 	teq	ip, #0
 802065a:	bf18      	it	ne
 802065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802066c:	d204      	bcs.n	8020678 <__aeabi_dmul+0x80>
 802066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020672:	416d      	adcs	r5, r5
 8020674:	eb46 0606 	adc.w	r6, r6, r6
 8020678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020690:	bf88      	it	hi
 8020692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020696:	d81e      	bhi.n	80206d6 <__aeabi_dmul+0xde>
 8020698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802069c:	bf08      	it	eq
 802069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80206a2:	f150 0000 	adcs.w	r0, r0, #0
 80206a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80206aa:	bd70      	pop	{r4, r5, r6, pc}
 80206ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80206b0:	ea46 0101 	orr.w	r1, r6, r1
 80206b4:	ea40 0002 	orr.w	r0, r0, r2
 80206b8:	ea81 0103 	eor.w	r1, r1, r3
 80206bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80206c0:	bfc2      	ittt	gt
 80206c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80206c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80206ca:	bd70      	popgt	{r4, r5, r6, pc}
 80206cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80206d0:	f04f 0e00 	mov.w	lr, #0
 80206d4:	3c01      	subs	r4, #1
 80206d6:	f300 80ab 	bgt.w	8020830 <__aeabi_dmul+0x238>
 80206da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80206de:	bfde      	ittt	le
 80206e0:	2000      	movle	r0, #0
 80206e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80206e6:	bd70      	pople	{r4, r5, r6, pc}
 80206e8:	f1c4 0400 	rsb	r4, r4, #0
 80206ec:	3c20      	subs	r4, #32
 80206ee:	da35      	bge.n	802075c <__aeabi_dmul+0x164>
 80206f0:	340c      	adds	r4, #12
 80206f2:	dc1b      	bgt.n	802072c <__aeabi_dmul+0x134>
 80206f4:	f104 0414 	add.w	r4, r4, #20
 80206f8:	f1c4 0520 	rsb	r5, r4, #32
 80206fc:	fa00 f305 	lsl.w	r3, r0, r5
 8020700:	fa20 f004 	lsr.w	r0, r0, r4
 8020704:	fa01 f205 	lsl.w	r2, r1, r5
 8020708:	ea40 0002 	orr.w	r0, r0, r2
 802070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020718:	fa21 f604 	lsr.w	r6, r1, r4
 802071c:	eb42 0106 	adc.w	r1, r2, r6
 8020720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020724:	bf08      	it	eq
 8020726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802072a:	bd70      	pop	{r4, r5, r6, pc}
 802072c:	f1c4 040c 	rsb	r4, r4, #12
 8020730:	f1c4 0520 	rsb	r5, r4, #32
 8020734:	fa00 f304 	lsl.w	r3, r0, r4
 8020738:	fa20 f005 	lsr.w	r0, r0, r5
 802073c:	fa01 f204 	lsl.w	r2, r1, r4
 8020740:	ea40 0002 	orr.w	r0, r0, r2
 8020744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802074c:	f141 0100 	adc.w	r1, r1, #0
 8020750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020754:	bf08      	it	eq
 8020756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802075a:	bd70      	pop	{r4, r5, r6, pc}
 802075c:	f1c4 0520 	rsb	r5, r4, #32
 8020760:	fa00 f205 	lsl.w	r2, r0, r5
 8020764:	ea4e 0e02 	orr.w	lr, lr, r2
 8020768:	fa20 f304 	lsr.w	r3, r0, r4
 802076c:	fa01 f205 	lsl.w	r2, r1, r5
 8020770:	ea43 0302 	orr.w	r3, r3, r2
 8020774:	fa21 f004 	lsr.w	r0, r1, r4
 8020778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802077c:	fa21 f204 	lsr.w	r2, r1, r4
 8020780:	ea20 0002 	bic.w	r0, r0, r2
 8020784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802078c:	bf08      	it	eq
 802078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020792:	bd70      	pop	{r4, r5, r6, pc}
 8020794:	f094 0f00 	teq	r4, #0
 8020798:	d10f      	bne.n	80207ba <__aeabi_dmul+0x1c2>
 802079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802079e:	0040      	lsls	r0, r0, #1
 80207a0:	eb41 0101 	adc.w	r1, r1, r1
 80207a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80207a8:	bf08      	it	eq
 80207aa:	3c01      	subeq	r4, #1
 80207ac:	d0f7      	beq.n	802079e <__aeabi_dmul+0x1a6>
 80207ae:	ea41 0106 	orr.w	r1, r1, r6
 80207b2:	f095 0f00 	teq	r5, #0
 80207b6:	bf18      	it	ne
 80207b8:	4770      	bxne	lr
 80207ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80207be:	0052      	lsls	r2, r2, #1
 80207c0:	eb43 0303 	adc.w	r3, r3, r3
 80207c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80207c8:	bf08      	it	eq
 80207ca:	3d01      	subeq	r5, #1
 80207cc:	d0f7      	beq.n	80207be <__aeabi_dmul+0x1c6>
 80207ce:	ea43 0306 	orr.w	r3, r3, r6
 80207d2:	4770      	bx	lr
 80207d4:	ea94 0f0c 	teq	r4, ip
 80207d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80207dc:	bf18      	it	ne
 80207de:	ea95 0f0c 	teqne	r5, ip
 80207e2:	d00c      	beq.n	80207fe <__aeabi_dmul+0x206>
 80207e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207e8:	bf18      	it	ne
 80207ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207ee:	d1d1      	bne.n	8020794 <__aeabi_dmul+0x19c>
 80207f0:	ea81 0103 	eor.w	r1, r1, r3
 80207f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80207f8:	f04f 0000 	mov.w	r0, #0
 80207fc:	bd70      	pop	{r4, r5, r6, pc}
 80207fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020802:	bf06      	itte	eq
 8020804:	4610      	moveq	r0, r2
 8020806:	4619      	moveq	r1, r3
 8020808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802080c:	d019      	beq.n	8020842 <__aeabi_dmul+0x24a>
 802080e:	ea94 0f0c 	teq	r4, ip
 8020812:	d102      	bne.n	802081a <__aeabi_dmul+0x222>
 8020814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020818:	d113      	bne.n	8020842 <__aeabi_dmul+0x24a>
 802081a:	ea95 0f0c 	teq	r5, ip
 802081e:	d105      	bne.n	802082c <__aeabi_dmul+0x234>
 8020820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020824:	bf1c      	itt	ne
 8020826:	4610      	movne	r0, r2
 8020828:	4619      	movne	r1, r3
 802082a:	d10a      	bne.n	8020842 <__aeabi_dmul+0x24a>
 802082c:	ea81 0103 	eor.w	r1, r1, r3
 8020830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802083c:	f04f 0000 	mov.w	r0, #0
 8020840:	bd70      	pop	{r4, r5, r6, pc}
 8020842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802084a:	bd70      	pop	{r4, r5, r6, pc}

0802084c <__aeabi_ddiv>:
 802084c:	b570      	push	{r4, r5, r6, lr}
 802084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802085a:	bf1d      	ittte	ne
 802085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020860:	ea94 0f0c 	teqne	r4, ip
 8020864:	ea95 0f0c 	teqne	r5, ip
 8020868:	f000 f8a7 	bleq	80209ba <__aeabi_ddiv+0x16e>
 802086c:	eba4 0405 	sub.w	r4, r4, r5
 8020870:	ea81 0e03 	eor.w	lr, r1, r3
 8020874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802087c:	f000 8088 	beq.w	8020990 <__aeabi_ddiv+0x144>
 8020880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80208a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80208a4:	429d      	cmp	r5, r3
 80208a6:	bf08      	it	eq
 80208a8:	4296      	cmpeq	r6, r2
 80208aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80208ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80208b2:	d202      	bcs.n	80208ba <__aeabi_ddiv+0x6e>
 80208b4:	085b      	lsrs	r3, r3, #1
 80208b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80208ba:	1ab6      	subs	r6, r6, r2
 80208bc:	eb65 0503 	sbc.w	r5, r5, r3
 80208c0:	085b      	lsrs	r3, r3, #1
 80208c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80208c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80208ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80208ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80208d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208d6:	bf22      	ittt	cs
 80208d8:	1ab6      	subcs	r6, r6, r2
 80208da:	4675      	movcs	r5, lr
 80208dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80208e0:	085b      	lsrs	r3, r3, #1
 80208e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80208e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80208ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80208ee:	bf22      	ittt	cs
 80208f0:	1ab6      	subcs	r6, r6, r2
 80208f2:	4675      	movcs	r5, lr
 80208f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80208f8:	085b      	lsrs	r3, r3, #1
 80208fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80208fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8020902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020906:	bf22      	ittt	cs
 8020908:	1ab6      	subcs	r6, r6, r2
 802090a:	4675      	movcs	r5, lr
 802090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020910:	085b      	lsrs	r3, r3, #1
 8020912:	ea4f 0232 	mov.w	r2, r2, rrx
 8020916:	ebb6 0e02 	subs.w	lr, r6, r2
 802091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802091e:	bf22      	ittt	cs
 8020920:	1ab6      	subcs	r6, r6, r2
 8020922:	4675      	movcs	r5, lr
 8020924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020928:	ea55 0e06 	orrs.w	lr, r5, r6
 802092c:	d018      	beq.n	8020960 <__aeabi_ddiv+0x114>
 802092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802094a:	d1c0      	bne.n	80208ce <__aeabi_ddiv+0x82>
 802094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020950:	d10b      	bne.n	802096a <__aeabi_ddiv+0x11e>
 8020952:	ea41 0100 	orr.w	r1, r1, r0
 8020956:	f04f 0000 	mov.w	r0, #0
 802095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802095e:	e7b6      	b.n	80208ce <__aeabi_ddiv+0x82>
 8020960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020964:	bf04      	itt	eq
 8020966:	4301      	orreq	r1, r0
 8020968:	2000      	moveq	r0, #0
 802096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802096e:	bf88      	it	hi
 8020970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020974:	f63f aeaf 	bhi.w	80206d6 <__aeabi_dmul+0xde>
 8020978:	ebb5 0c03 	subs.w	ip, r5, r3
 802097c:	bf04      	itt	eq
 802097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020986:	f150 0000 	adcs.w	r0, r0, #0
 802098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802098e:	bd70      	pop	{r4, r5, r6, pc}
 8020990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802099c:	bfc2      	ittt	gt
 802099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80209a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80209a6:	bd70      	popgt	{r4, r5, r6, pc}
 80209a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80209ac:	f04f 0e00 	mov.w	lr, #0
 80209b0:	3c01      	subs	r4, #1
 80209b2:	e690      	b.n	80206d6 <__aeabi_dmul+0xde>
 80209b4:	ea45 0e06 	orr.w	lr, r5, r6
 80209b8:	e68d      	b.n	80206d6 <__aeabi_dmul+0xde>
 80209ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80209be:	ea94 0f0c 	teq	r4, ip
 80209c2:	bf08      	it	eq
 80209c4:	ea95 0f0c 	teqeq	r5, ip
 80209c8:	f43f af3b 	beq.w	8020842 <__aeabi_dmul+0x24a>
 80209cc:	ea94 0f0c 	teq	r4, ip
 80209d0:	d10a      	bne.n	80209e8 <__aeabi_ddiv+0x19c>
 80209d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80209d6:	f47f af34 	bne.w	8020842 <__aeabi_dmul+0x24a>
 80209da:	ea95 0f0c 	teq	r5, ip
 80209de:	f47f af25 	bne.w	802082c <__aeabi_dmul+0x234>
 80209e2:	4610      	mov	r0, r2
 80209e4:	4619      	mov	r1, r3
 80209e6:	e72c      	b.n	8020842 <__aeabi_dmul+0x24a>
 80209e8:	ea95 0f0c 	teq	r5, ip
 80209ec:	d106      	bne.n	80209fc <__aeabi_ddiv+0x1b0>
 80209ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80209f2:	f43f aefd 	beq.w	80207f0 <__aeabi_dmul+0x1f8>
 80209f6:	4610      	mov	r0, r2
 80209f8:	4619      	mov	r1, r3
 80209fa:	e722      	b.n	8020842 <__aeabi_dmul+0x24a>
 80209fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020a00:	bf18      	it	ne
 8020a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020a06:	f47f aec5 	bne.w	8020794 <__aeabi_dmul+0x19c>
 8020a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020a0e:	f47f af0d 	bne.w	802082c <__aeabi_dmul+0x234>
 8020a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020a16:	f47f aeeb 	bne.w	80207f0 <__aeabi_dmul+0x1f8>
 8020a1a:	e712      	b.n	8020842 <__aeabi_dmul+0x24a>

08020a1c <__gedf2>:
 8020a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8020a20:	e006      	b.n	8020a30 <__cmpdf2+0x4>
 8020a22:	bf00      	nop

08020a24 <__ledf2>:
 8020a24:	f04f 0c01 	mov.w	ip, #1
 8020a28:	e002      	b.n	8020a30 <__cmpdf2+0x4>
 8020a2a:	bf00      	nop

08020a2c <__cmpdf2>:
 8020a2c:	f04f 0c01 	mov.w	ip, #1
 8020a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a40:	bf18      	it	ne
 8020a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020a46:	d01b      	beq.n	8020a80 <__cmpdf2+0x54>
 8020a48:	b001      	add	sp, #4
 8020a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020a4e:	bf0c      	ite	eq
 8020a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020a54:	ea91 0f03 	teqne	r1, r3
 8020a58:	bf02      	ittt	eq
 8020a5a:	ea90 0f02 	teqeq	r0, r2
 8020a5e:	2000      	moveq	r0, #0
 8020a60:	4770      	bxeq	lr
 8020a62:	f110 0f00 	cmn.w	r0, #0
 8020a66:	ea91 0f03 	teq	r1, r3
 8020a6a:	bf58      	it	pl
 8020a6c:	4299      	cmppl	r1, r3
 8020a6e:	bf08      	it	eq
 8020a70:	4290      	cmpeq	r0, r2
 8020a72:	bf2c      	ite	cs
 8020a74:	17d8      	asrcs	r0, r3, #31
 8020a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020a7a:	f040 0001 	orr.w	r0, r0, #1
 8020a7e:	4770      	bx	lr
 8020a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a88:	d102      	bne.n	8020a90 <__cmpdf2+0x64>
 8020a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020a8e:	d107      	bne.n	8020aa0 <__cmpdf2+0x74>
 8020a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a98:	d1d6      	bne.n	8020a48 <__cmpdf2+0x1c>
 8020a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020a9e:	d0d3      	beq.n	8020a48 <__cmpdf2+0x1c>
 8020aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020aa4:	4770      	bx	lr
 8020aa6:	bf00      	nop

08020aa8 <__aeabi_cdrcmple>:
 8020aa8:	4684      	mov	ip, r0
 8020aaa:	4610      	mov	r0, r2
 8020aac:	4662      	mov	r2, ip
 8020aae:	468c      	mov	ip, r1
 8020ab0:	4619      	mov	r1, r3
 8020ab2:	4663      	mov	r3, ip
 8020ab4:	e000      	b.n	8020ab8 <__aeabi_cdcmpeq>
 8020ab6:	bf00      	nop

08020ab8 <__aeabi_cdcmpeq>:
 8020ab8:	b501      	push	{r0, lr}
 8020aba:	f7ff ffb7 	bl	8020a2c <__cmpdf2>
 8020abe:	2800      	cmp	r0, #0
 8020ac0:	bf48      	it	mi
 8020ac2:	f110 0f00 	cmnmi.w	r0, #0
 8020ac6:	bd01      	pop	{r0, pc}

08020ac8 <__aeabi_dcmpeq>:
 8020ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020acc:	f7ff fff4 	bl	8020ab8 <__aeabi_cdcmpeq>
 8020ad0:	bf0c      	ite	eq
 8020ad2:	2001      	moveq	r0, #1
 8020ad4:	2000      	movne	r0, #0
 8020ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8020ada:	bf00      	nop

08020adc <__aeabi_dcmplt>:
 8020adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020ae0:	f7ff ffea 	bl	8020ab8 <__aeabi_cdcmpeq>
 8020ae4:	bf34      	ite	cc
 8020ae6:	2001      	movcc	r0, #1
 8020ae8:	2000      	movcs	r0, #0
 8020aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8020aee:	bf00      	nop

08020af0 <__aeabi_dcmple>:
 8020af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020af4:	f7ff ffe0 	bl	8020ab8 <__aeabi_cdcmpeq>
 8020af8:	bf94      	ite	ls
 8020afa:	2001      	movls	r0, #1
 8020afc:	2000      	movhi	r0, #0
 8020afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b02:	bf00      	nop

08020b04 <__aeabi_dcmpge>:
 8020b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b08:	f7ff ffce 	bl	8020aa8 <__aeabi_cdrcmple>
 8020b0c:	bf94      	ite	ls
 8020b0e:	2001      	movls	r0, #1
 8020b10:	2000      	movhi	r0, #0
 8020b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b16:	bf00      	nop

08020b18 <__aeabi_dcmpgt>:
 8020b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b1c:	f7ff ffc4 	bl	8020aa8 <__aeabi_cdrcmple>
 8020b20:	bf34      	ite	cc
 8020b22:	2001      	movcc	r0, #1
 8020b24:	2000      	movcs	r0, #0
 8020b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b2a:	bf00      	nop

08020b2c <__aeabi_dcmpun>:
 8020b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b34:	d102      	bne.n	8020b3c <__aeabi_dcmpun+0x10>
 8020b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020b3a:	d10a      	bne.n	8020b52 <__aeabi_dcmpun+0x26>
 8020b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b44:	d102      	bne.n	8020b4c <__aeabi_dcmpun+0x20>
 8020b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020b4a:	d102      	bne.n	8020b52 <__aeabi_dcmpun+0x26>
 8020b4c:	f04f 0000 	mov.w	r0, #0
 8020b50:	4770      	bx	lr
 8020b52:	f04f 0001 	mov.w	r0, #1
 8020b56:	4770      	bx	lr

08020b58 <__aeabi_d2iz>:
 8020b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020b60:	d215      	bcs.n	8020b8e <__aeabi_d2iz+0x36>
 8020b62:	d511      	bpl.n	8020b88 <__aeabi_d2iz+0x30>
 8020b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020b6c:	d912      	bls.n	8020b94 <__aeabi_d2iz+0x3c>
 8020b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8020b82:	bf18      	it	ne
 8020b84:	4240      	negne	r0, r0
 8020b86:	4770      	bx	lr
 8020b88:	f04f 0000 	mov.w	r0, #0
 8020b8c:	4770      	bx	lr
 8020b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020b92:	d105      	bne.n	8020ba0 <__aeabi_d2iz+0x48>
 8020b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020b98:	bf08      	it	eq
 8020b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020b9e:	4770      	bx	lr
 8020ba0:	f04f 0000 	mov.w	r0, #0
 8020ba4:	4770      	bx	lr
 8020ba6:	bf00      	nop

08020ba8 <__aeabi_d2uiz>:
 8020ba8:	004a      	lsls	r2, r1, #1
 8020baa:	d211      	bcs.n	8020bd0 <__aeabi_d2uiz+0x28>
 8020bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020bb0:	d211      	bcs.n	8020bd6 <__aeabi_d2uiz+0x2e>
 8020bb2:	d50d      	bpl.n	8020bd0 <__aeabi_d2uiz+0x28>
 8020bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020bbc:	d40e      	bmi.n	8020bdc <__aeabi_d2uiz+0x34>
 8020bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020bca:	fa23 f002 	lsr.w	r0, r3, r2
 8020bce:	4770      	bx	lr
 8020bd0:	f04f 0000 	mov.w	r0, #0
 8020bd4:	4770      	bx	lr
 8020bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020bda:	d102      	bne.n	8020be2 <__aeabi_d2uiz+0x3a>
 8020bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8020be0:	4770      	bx	lr
 8020be2:	f04f 0000 	mov.w	r0, #0
 8020be6:	4770      	bx	lr

08020be8 <__aeabi_d2f>:
 8020be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020bf0:	bf24      	itt	cs
 8020bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8020bfa:	d90d      	bls.n	8020c18 <__aeabi_d2f+0x30>
 8020bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020c10:	bf08      	it	eq
 8020c12:	f020 0001 	biceq.w	r0, r0, #1
 8020c16:	4770      	bx	lr
 8020c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020c1c:	d121      	bne.n	8020c62 <__aeabi_d2f+0x7a>
 8020c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020c22:	bfbc      	itt	lt
 8020c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8020c28:	4770      	bxlt	lr
 8020c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020c32:	f1c2 0218 	rsb	r2, r2, #24
 8020c36:	f1c2 0c20 	rsb	ip, r2, #32
 8020c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8020c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8020c42:	bf18      	it	ne
 8020c44:	f040 0001 	orrne.w	r0, r0, #1
 8020c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020c54:	ea40 000c 	orr.w	r0, r0, ip
 8020c58:	fa23 f302 	lsr.w	r3, r3, r2
 8020c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020c60:	e7cc      	b.n	8020bfc <__aeabi_d2f+0x14>
 8020c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020c66:	d107      	bne.n	8020c78 <__aeabi_d2f+0x90>
 8020c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020c6c:	bf1e      	ittt	ne
 8020c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020c76:	4770      	bxne	lr
 8020c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020c84:	4770      	bx	lr
 8020c86:	bf00      	nop

08020c88 <__aeabi_uldivmod>:
 8020c88:	b953      	cbnz	r3, 8020ca0 <__aeabi_uldivmod+0x18>
 8020c8a:	b94a      	cbnz	r2, 8020ca0 <__aeabi_uldivmod+0x18>
 8020c8c:	2900      	cmp	r1, #0
 8020c8e:	bf08      	it	eq
 8020c90:	2800      	cmpeq	r0, #0
 8020c92:	bf1c      	itt	ne
 8020c94:	f04f 31ff 	movne.w	r1, #4294967295
 8020c98:	f04f 30ff 	movne.w	r0, #4294967295
 8020c9c:	f000 b9a4 	b.w	8020fe8 <__aeabi_idiv0>
 8020ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8020ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020ca8:	f000 f83c 	bl	8020d24 <__udivmoddi4>
 8020cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020cb4:	b004      	add	sp, #16
 8020cb6:	4770      	bx	lr

08020cb8 <__aeabi_d2lz>:
 8020cb8:	b538      	push	{r3, r4, r5, lr}
 8020cba:	2200      	movs	r2, #0
 8020cbc:	2300      	movs	r3, #0
 8020cbe:	4604      	mov	r4, r0
 8020cc0:	460d      	mov	r5, r1
 8020cc2:	f7ff ff0b 	bl	8020adc <__aeabi_dcmplt>
 8020cc6:	b928      	cbnz	r0, 8020cd4 <__aeabi_d2lz+0x1c>
 8020cc8:	4620      	mov	r0, r4
 8020cca:	4629      	mov	r1, r5
 8020ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020cd0:	f000 b80a 	b.w	8020ce8 <__aeabi_d2ulz>
 8020cd4:	4620      	mov	r0, r4
 8020cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8020cda:	f000 f805 	bl	8020ce8 <__aeabi_d2ulz>
 8020cde:	4240      	negs	r0, r0
 8020ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020ce4:	bd38      	pop	{r3, r4, r5, pc}
 8020ce6:	bf00      	nop

08020ce8 <__aeabi_d2ulz>:
 8020ce8:	b5d0      	push	{r4, r6, r7, lr}
 8020cea:	4b0c      	ldr	r3, [pc, #48]	; (8020d1c <__aeabi_d2ulz+0x34>)
 8020cec:	2200      	movs	r2, #0
 8020cee:	4606      	mov	r6, r0
 8020cf0:	460f      	mov	r7, r1
 8020cf2:	f7ff fc81 	bl	80205f8 <__aeabi_dmul>
 8020cf6:	f7ff ff57 	bl	8020ba8 <__aeabi_d2uiz>
 8020cfa:	4604      	mov	r4, r0
 8020cfc:	f7ff fc02 	bl	8020504 <__aeabi_ui2d>
 8020d00:	4b07      	ldr	r3, [pc, #28]	; (8020d20 <__aeabi_d2ulz+0x38>)
 8020d02:	2200      	movs	r2, #0
 8020d04:	f7ff fc78 	bl	80205f8 <__aeabi_dmul>
 8020d08:	4602      	mov	r2, r0
 8020d0a:	460b      	mov	r3, r1
 8020d0c:	4630      	mov	r0, r6
 8020d0e:	4639      	mov	r1, r7
 8020d10:	f7ff faba 	bl	8020288 <__aeabi_dsub>
 8020d14:	f7ff ff48 	bl	8020ba8 <__aeabi_d2uiz>
 8020d18:	4621      	mov	r1, r4
 8020d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8020d1c:	3df00000 	.word	0x3df00000
 8020d20:	41f00000 	.word	0x41f00000

08020d24 <__udivmoddi4>:
 8020d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d28:	9d08      	ldr	r5, [sp, #32]
 8020d2a:	4604      	mov	r4, r0
 8020d2c:	468c      	mov	ip, r1
 8020d2e:	2b00      	cmp	r3, #0
 8020d30:	f040 8083 	bne.w	8020e3a <__udivmoddi4+0x116>
 8020d34:	428a      	cmp	r2, r1
 8020d36:	4617      	mov	r7, r2
 8020d38:	d947      	bls.n	8020dca <__udivmoddi4+0xa6>
 8020d3a:	fab2 f282 	clz	r2, r2
 8020d3e:	b142      	cbz	r2, 8020d52 <__udivmoddi4+0x2e>
 8020d40:	f1c2 0020 	rsb	r0, r2, #32
 8020d44:	fa24 f000 	lsr.w	r0, r4, r0
 8020d48:	4091      	lsls	r1, r2
 8020d4a:	4097      	lsls	r7, r2
 8020d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8020d50:	4094      	lsls	r4, r2
 8020d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8020d56:	0c23      	lsrs	r3, r4, #16
 8020d58:	fbbc f6f8 	udiv	r6, ip, r8
 8020d5c:	fa1f fe87 	uxth.w	lr, r7
 8020d60:	fb08 c116 	mls	r1, r8, r6, ip
 8020d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020d68:	fb06 f10e 	mul.w	r1, r6, lr
 8020d6c:	4299      	cmp	r1, r3
 8020d6e:	d909      	bls.n	8020d84 <__udivmoddi4+0x60>
 8020d70:	18fb      	adds	r3, r7, r3
 8020d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8020d76:	f080 8119 	bcs.w	8020fac <__udivmoddi4+0x288>
 8020d7a:	4299      	cmp	r1, r3
 8020d7c:	f240 8116 	bls.w	8020fac <__udivmoddi4+0x288>
 8020d80:	3e02      	subs	r6, #2
 8020d82:	443b      	add	r3, r7
 8020d84:	1a5b      	subs	r3, r3, r1
 8020d86:	b2a4      	uxth	r4, r4
 8020d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8020d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8020d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8020d98:	45a6      	cmp	lr, r4
 8020d9a:	d909      	bls.n	8020db0 <__udivmoddi4+0x8c>
 8020d9c:	193c      	adds	r4, r7, r4
 8020d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8020da2:	f080 8105 	bcs.w	8020fb0 <__udivmoddi4+0x28c>
 8020da6:	45a6      	cmp	lr, r4
 8020da8:	f240 8102 	bls.w	8020fb0 <__udivmoddi4+0x28c>
 8020dac:	3802      	subs	r0, #2
 8020dae:	443c      	add	r4, r7
 8020db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020db4:	eba4 040e 	sub.w	r4, r4, lr
 8020db8:	2600      	movs	r6, #0
 8020dba:	b11d      	cbz	r5, 8020dc4 <__udivmoddi4+0xa0>
 8020dbc:	40d4      	lsrs	r4, r2
 8020dbe:	2300      	movs	r3, #0
 8020dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8020dc4:	4631      	mov	r1, r6
 8020dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020dca:	b902      	cbnz	r2, 8020dce <__udivmoddi4+0xaa>
 8020dcc:	deff      	udf	#255	; 0xff
 8020dce:	fab2 f282 	clz	r2, r2
 8020dd2:	2a00      	cmp	r2, #0
 8020dd4:	d150      	bne.n	8020e78 <__udivmoddi4+0x154>
 8020dd6:	1bcb      	subs	r3, r1, r7
 8020dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020ddc:	fa1f f887 	uxth.w	r8, r7
 8020de0:	2601      	movs	r6, #1
 8020de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8020de6:	0c21      	lsrs	r1, r4, #16
 8020de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8020dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020df0:	fb08 f30c 	mul.w	r3, r8, ip
 8020df4:	428b      	cmp	r3, r1
 8020df6:	d907      	bls.n	8020e08 <__udivmoddi4+0xe4>
 8020df8:	1879      	adds	r1, r7, r1
 8020dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020dfe:	d202      	bcs.n	8020e06 <__udivmoddi4+0xe2>
 8020e00:	428b      	cmp	r3, r1
 8020e02:	f200 80e9 	bhi.w	8020fd8 <__udivmoddi4+0x2b4>
 8020e06:	4684      	mov	ip, r0
 8020e08:	1ac9      	subs	r1, r1, r3
 8020e0a:	b2a3      	uxth	r3, r4
 8020e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8020e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8020e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8020e18:	fb08 f800 	mul.w	r8, r8, r0
 8020e1c:	45a0      	cmp	r8, r4
 8020e1e:	d907      	bls.n	8020e30 <__udivmoddi4+0x10c>
 8020e20:	193c      	adds	r4, r7, r4
 8020e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8020e26:	d202      	bcs.n	8020e2e <__udivmoddi4+0x10a>
 8020e28:	45a0      	cmp	r8, r4
 8020e2a:	f200 80d9 	bhi.w	8020fe0 <__udivmoddi4+0x2bc>
 8020e2e:	4618      	mov	r0, r3
 8020e30:	eba4 0408 	sub.w	r4, r4, r8
 8020e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020e38:	e7bf      	b.n	8020dba <__udivmoddi4+0x96>
 8020e3a:	428b      	cmp	r3, r1
 8020e3c:	d909      	bls.n	8020e52 <__udivmoddi4+0x12e>
 8020e3e:	2d00      	cmp	r5, #0
 8020e40:	f000 80b1 	beq.w	8020fa6 <__udivmoddi4+0x282>
 8020e44:	2600      	movs	r6, #0
 8020e46:	e9c5 0100 	strd	r0, r1, [r5]
 8020e4a:	4630      	mov	r0, r6
 8020e4c:	4631      	mov	r1, r6
 8020e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e52:	fab3 f683 	clz	r6, r3
 8020e56:	2e00      	cmp	r6, #0
 8020e58:	d14a      	bne.n	8020ef0 <__udivmoddi4+0x1cc>
 8020e5a:	428b      	cmp	r3, r1
 8020e5c:	d302      	bcc.n	8020e64 <__udivmoddi4+0x140>
 8020e5e:	4282      	cmp	r2, r0
 8020e60:	f200 80b8 	bhi.w	8020fd4 <__udivmoddi4+0x2b0>
 8020e64:	1a84      	subs	r4, r0, r2
 8020e66:	eb61 0103 	sbc.w	r1, r1, r3
 8020e6a:	2001      	movs	r0, #1
 8020e6c:	468c      	mov	ip, r1
 8020e6e:	2d00      	cmp	r5, #0
 8020e70:	d0a8      	beq.n	8020dc4 <__udivmoddi4+0xa0>
 8020e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8020e76:	e7a5      	b.n	8020dc4 <__udivmoddi4+0xa0>
 8020e78:	f1c2 0320 	rsb	r3, r2, #32
 8020e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8020e80:	4097      	lsls	r7, r2
 8020e82:	fa01 f002 	lsl.w	r0, r1, r2
 8020e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020e8a:	40d9      	lsrs	r1, r3
 8020e8c:	4330      	orrs	r0, r6
 8020e8e:	0c03      	lsrs	r3, r0, #16
 8020e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8020e94:	fa1f f887 	uxth.w	r8, r7
 8020e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8020e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020ea0:	fb06 f108 	mul.w	r1, r6, r8
 8020ea4:	4299      	cmp	r1, r3
 8020ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8020eaa:	d909      	bls.n	8020ec0 <__udivmoddi4+0x19c>
 8020eac:	18fb      	adds	r3, r7, r3
 8020eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8020eb2:	f080 808d 	bcs.w	8020fd0 <__udivmoddi4+0x2ac>
 8020eb6:	4299      	cmp	r1, r3
 8020eb8:	f240 808a 	bls.w	8020fd0 <__udivmoddi4+0x2ac>
 8020ebc:	3e02      	subs	r6, #2
 8020ebe:	443b      	add	r3, r7
 8020ec0:	1a5b      	subs	r3, r3, r1
 8020ec2:	b281      	uxth	r1, r0
 8020ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8020ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8020ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020ed0:	fb00 f308 	mul.w	r3, r0, r8
 8020ed4:	428b      	cmp	r3, r1
 8020ed6:	d907      	bls.n	8020ee8 <__udivmoddi4+0x1c4>
 8020ed8:	1879      	adds	r1, r7, r1
 8020eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8020ede:	d273      	bcs.n	8020fc8 <__udivmoddi4+0x2a4>
 8020ee0:	428b      	cmp	r3, r1
 8020ee2:	d971      	bls.n	8020fc8 <__udivmoddi4+0x2a4>
 8020ee4:	3802      	subs	r0, #2
 8020ee6:	4439      	add	r1, r7
 8020ee8:	1acb      	subs	r3, r1, r3
 8020eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8020eee:	e778      	b.n	8020de2 <__udivmoddi4+0xbe>
 8020ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8020ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8020ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8020efc:	431c      	orrs	r4, r3
 8020efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8020f02:	fa01 f306 	lsl.w	r3, r1, r6
 8020f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8020f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8020f0e:	431f      	orrs	r7, r3
 8020f10:	0c3b      	lsrs	r3, r7, #16
 8020f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8020f16:	fa1f f884 	uxth.w	r8, r4
 8020f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8020f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8020f22:	fb09 fa08 	mul.w	sl, r9, r8
 8020f26:	458a      	cmp	sl, r1
 8020f28:	fa02 f206 	lsl.w	r2, r2, r6
 8020f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8020f30:	d908      	bls.n	8020f44 <__udivmoddi4+0x220>
 8020f32:	1861      	adds	r1, r4, r1
 8020f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8020f38:	d248      	bcs.n	8020fcc <__udivmoddi4+0x2a8>
 8020f3a:	458a      	cmp	sl, r1
 8020f3c:	d946      	bls.n	8020fcc <__udivmoddi4+0x2a8>
 8020f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8020f42:	4421      	add	r1, r4
 8020f44:	eba1 010a 	sub.w	r1, r1, sl
 8020f48:	b2bf      	uxth	r7, r7
 8020f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8020f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8020f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8020f56:	fb00 f808 	mul.w	r8, r0, r8
 8020f5a:	45b8      	cmp	r8, r7
 8020f5c:	d907      	bls.n	8020f6e <__udivmoddi4+0x24a>
 8020f5e:	19e7      	adds	r7, r4, r7
 8020f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8020f64:	d22e      	bcs.n	8020fc4 <__udivmoddi4+0x2a0>
 8020f66:	45b8      	cmp	r8, r7
 8020f68:	d92c      	bls.n	8020fc4 <__udivmoddi4+0x2a0>
 8020f6a:	3802      	subs	r0, #2
 8020f6c:	4427      	add	r7, r4
 8020f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020f72:	eba7 0708 	sub.w	r7, r7, r8
 8020f76:	fba0 8902 	umull	r8, r9, r0, r2
 8020f7a:	454f      	cmp	r7, r9
 8020f7c:	46c6      	mov	lr, r8
 8020f7e:	4649      	mov	r1, r9
 8020f80:	d31a      	bcc.n	8020fb8 <__udivmoddi4+0x294>
 8020f82:	d017      	beq.n	8020fb4 <__udivmoddi4+0x290>
 8020f84:	b15d      	cbz	r5, 8020f9e <__udivmoddi4+0x27a>
 8020f86:	ebb3 020e 	subs.w	r2, r3, lr
 8020f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8020f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8020f92:	40f2      	lsrs	r2, r6
 8020f94:	ea4c 0202 	orr.w	r2, ip, r2
 8020f98:	40f7      	lsrs	r7, r6
 8020f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8020f9e:	2600      	movs	r6, #0
 8020fa0:	4631      	mov	r1, r6
 8020fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020fa6:	462e      	mov	r6, r5
 8020fa8:	4628      	mov	r0, r5
 8020faa:	e70b      	b.n	8020dc4 <__udivmoddi4+0xa0>
 8020fac:	4606      	mov	r6, r0
 8020fae:	e6e9      	b.n	8020d84 <__udivmoddi4+0x60>
 8020fb0:	4618      	mov	r0, r3
 8020fb2:	e6fd      	b.n	8020db0 <__udivmoddi4+0x8c>
 8020fb4:	4543      	cmp	r3, r8
 8020fb6:	d2e5      	bcs.n	8020f84 <__udivmoddi4+0x260>
 8020fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8020fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8020fc0:	3801      	subs	r0, #1
 8020fc2:	e7df      	b.n	8020f84 <__udivmoddi4+0x260>
 8020fc4:	4608      	mov	r0, r1
 8020fc6:	e7d2      	b.n	8020f6e <__udivmoddi4+0x24a>
 8020fc8:	4660      	mov	r0, ip
 8020fca:	e78d      	b.n	8020ee8 <__udivmoddi4+0x1c4>
 8020fcc:	4681      	mov	r9, r0
 8020fce:	e7b9      	b.n	8020f44 <__udivmoddi4+0x220>
 8020fd0:	4666      	mov	r6, ip
 8020fd2:	e775      	b.n	8020ec0 <__udivmoddi4+0x19c>
 8020fd4:	4630      	mov	r0, r6
 8020fd6:	e74a      	b.n	8020e6e <__udivmoddi4+0x14a>
 8020fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8020fdc:	4439      	add	r1, r7
 8020fde:	e713      	b.n	8020e08 <__udivmoddi4+0xe4>
 8020fe0:	3802      	subs	r0, #2
 8020fe2:	443c      	add	r4, r7
 8020fe4:	e724      	b.n	8020e30 <__udivmoddi4+0x10c>
 8020fe6:	bf00      	nop

08020fe8 <__aeabi_idiv0>:
 8020fe8:	4770      	bx	lr
 8020fea:	bf00      	nop

08020fec <crc32>:
#include "CRC32.h"

uint32_t crc32( const uint8_t *buf, uint32_t len) {
 8020fec:	b480      	push	{r7}
 8020fee:	b087      	sub	sp, #28
 8020ff0:	af00      	add	r7, sp, #0
 8020ff2:	6078      	str	r0, [r7, #4]
 8020ff4:	6039      	str	r1, [r7, #0]
    const uint8_t *p;
    int nr;
    uint32_t crc;

    crc = 0;
 8020ff6:	2300      	movs	r3, #0
 8020ff8:	60fb      	str	r3, [r7, #12]
    for (nr = len, p = buf; nr--; ++p) {
 8020ffa:	683b      	ldr	r3, [r7, #0]
 8020ffc:	613b      	str	r3, [r7, #16]
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	617b      	str	r3, [r7, #20]
 8021002:	e00e      	b.n	8021022 <crc32+0x36>
        COMPUTE(crc, *p);
 8021004:	68fb      	ldr	r3, [r7, #12]
 8021006:	021a      	lsls	r2, r3, #8
 8021008:	68fb      	ldr	r3, [r7, #12]
 802100a:	0e1b      	lsrs	r3, r3, #24
 802100c:	6979      	ldr	r1, [r7, #20]
 802100e:	7809      	ldrb	r1, [r1, #0]
 8021010:	404b      	eors	r3, r1
 8021012:	4916      	ldr	r1, [pc, #88]	; (802106c <crc32+0x80>)
 8021014:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021018:	4053      	eors	r3, r2
 802101a:	60fb      	str	r3, [r7, #12]
    for (nr = len, p = buf; nr--; ++p) {
 802101c:	697b      	ldr	r3, [r7, #20]
 802101e:	3301      	adds	r3, #1
 8021020:	617b      	str	r3, [r7, #20]
 8021022:	693b      	ldr	r3, [r7, #16]
 8021024:	1e5a      	subs	r2, r3, #1
 8021026:	613a      	str	r2, [r7, #16]
 8021028:	2b00      	cmp	r3, #0
 802102a:	d1eb      	bne.n	8021004 <crc32+0x18>
    }

    for (; len != 0; len >>= 8) {
 802102c:	e00e      	b.n	802104c <crc32+0x60>
        COMPUTE(crc, len & 0xff);
 802102e:	68fb      	ldr	r3, [r7, #12]
 8021030:	021a      	lsls	r2, r3, #8
 8021032:	68fb      	ldr	r3, [r7, #12]
 8021034:	0e19      	lsrs	r1, r3, #24
 8021036:	683b      	ldr	r3, [r7, #0]
 8021038:	b2db      	uxtb	r3, r3
 802103a:	404b      	eors	r3, r1
 802103c:	490b      	ldr	r1, [pc, #44]	; (802106c <crc32+0x80>)
 802103e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8021042:	4053      	eors	r3, r2
 8021044:	60fb      	str	r3, [r7, #12]
    for (; len != 0; len >>= 8) {
 8021046:	683b      	ldr	r3, [r7, #0]
 8021048:	0a1b      	lsrs	r3, r3, #8
 802104a:	603b      	str	r3, [r7, #0]
 802104c:	683b      	ldr	r3, [r7, #0]
 802104e:	2b00      	cmp	r3, #0
 8021050:	d1ed      	bne.n	802102e <crc32+0x42>
    }
    buf-=len;
 8021052:	683b      	ldr	r3, [r7, #0]
 8021054:	425b      	negs	r3, r3
 8021056:	687a      	ldr	r2, [r7, #4]
 8021058:	4413      	add	r3, r2
 802105a:	607b      	str	r3, [r7, #4]
    return(~crc);
 802105c:	68fb      	ldr	r3, [r7, #12]
 802105e:	43db      	mvns	r3, r3
 8021060:	4618      	mov	r0, r3
 8021062:	371c      	adds	r7, #28
 8021064:	46bd      	mov	sp, r7
 8021066:	f85d 7b04 	ldr.w	r7, [sp], #4
 802106a:	4770      	bx	lr
 802106c:	0803dd14 	.word	0x0803dd14

08021070 <Chacha20_Xor>:
FUNC(void, CHACHA20_PUBLIC_FUNCTION) Chacha20_Xor(uint8 keyStream[],
						  uint32 cell[],
						  uint8 textInput[],
						  uint16 size,
						  uint8 textOutput[])
{
 8021070:	b580      	push	{r7, lr}
 8021072:	b086      	sub	sp, #24
 8021074:	af02      	add	r7, sp, #8
 8021076:	60f8      	str	r0, [r7, #12]
 8021078:	60b9      	str	r1, [r7, #8]
 802107a:	607a      	str	r2, [r7, #4]
 802107c:	603b      	str	r3, [r7, #0]
	// C: call setCell
	ChaCha20_SetCell(cell, Gb_sulConstant, Gb_sculChachaKey, \
 802107e:	4b0a      	ldr	r3, [pc, #40]	; (80210a8 <Chacha20_Xor+0x38>)
 8021080:	9300      	str	r3, [sp, #0]
 8021082:	4b0a      	ldr	r3, [pc, #40]	; (80210ac <Chacha20_Xor+0x3c>)
 8021084:	4a0a      	ldr	r2, [pc, #40]	; (80210b0 <Chacha20_Xor+0x40>)
 8021086:	490b      	ldr	r1, [pc, #44]	; (80210b4 <Chacha20_Xor+0x44>)
 8021088:	68b8      	ldr	r0, [r7, #8]
 802108a:	f000 f815 	bl	80210b8 <ChaCha20_SetCell>
	                 Gb_sulBlockNumber, Gb_sulNonce);

	ChaCha20_FinalXor((uint8*)keyStream, (uint8*)cell, \
 802108e:	69bb      	ldr	r3, [r7, #24]
 8021090:	9300      	str	r3, [sp, #0]
 8021092:	683b      	ldr	r3, [r7, #0]
 8021094:	687a      	ldr	r2, [r7, #4]
 8021096:	68b9      	ldr	r1, [r7, #8]
 8021098:	68f8      	ldr	r0, [r7, #12]
 802109a:	f000 fa97 	bl	80215cc <ChaCha20_FinalXor>
	                  (uint8*)textInput, size, (uint8*)textOutput);
} /* END ChaCha20_Xor */
 802109e:	bf00      	nop
 80210a0:	3710      	adds	r7, #16
 80210a2:	46bd      	mov	sp, r7
 80210a4:	bd80      	pop	{r7, pc}
 80210a6:	bf00      	nop
 80210a8:	20000018 	.word	0x20000018
 80210ac:	20000010 	.word	0x20000010
 80210b0:	0803e114 	.word	0x0803e114
 80210b4:	20000000 	.word	0x20000000

080210b8 <ChaCha20_SetCell>:
FUNC(void, CHACHA20_PRIVATE_FUNCTION) ChaCha20_SetCell(uint32 cell[],
						       uint32 constant[],
						       const uint32 key[],
						       uint32 blockNumber[],
						       uint32 nonce[])
{
 80210b8:	b480      	push	{r7}
 80210ba:	b087      	sub	sp, #28
 80210bc:	af00      	add	r7, sp, #0
 80210be:	60f8      	str	r0, [r7, #12]
 80210c0:	60b9      	str	r1, [r7, #8]
 80210c2:	607a      	str	r2, [r7, #4]
 80210c4:	603b      	str	r3, [r7, #0]

	// L: setConstant, i = 0 -> 3
	for (uint8 i = 0; i < 4; i++)
 80210c6:	2300      	movs	r3, #0
 80210c8:	75fb      	strb	r3, [r7, #23]
 80210ca:	e00c      	b.n	80210e6 <ChaCha20_SetCell+0x2e>
		// C: Assign cell[i] = constant[i]
		cell[i] = constant[i];
 80210cc:	7dfb      	ldrb	r3, [r7, #23]
 80210ce:	009b      	lsls	r3, r3, #2
 80210d0:	68ba      	ldr	r2, [r7, #8]
 80210d2:	441a      	add	r2, r3
 80210d4:	7dfb      	ldrb	r3, [r7, #23]
 80210d6:	009b      	lsls	r3, r3, #2
 80210d8:	68f9      	ldr	r1, [r7, #12]
 80210da:	440b      	add	r3, r1
 80210dc:	6812      	ldr	r2, [r2, #0]
 80210de:	601a      	str	r2, [r3, #0]
	for (uint8 i = 0; i < 4; i++)
 80210e0:	7dfb      	ldrb	r3, [r7, #23]
 80210e2:	3301      	adds	r3, #1
 80210e4:	75fb      	strb	r3, [r7, #23]
 80210e6:	7dfb      	ldrb	r3, [r7, #23]
 80210e8:	2b03      	cmp	r3, #3
 80210ea:	d9ef      	bls.n	80210cc <ChaCha20_SetCell+0x14>

	// L: setkey, i = 4 -> 11
	for (uint8 i = 4; i < 12; i++)
 80210ec:	2304      	movs	r3, #4
 80210ee:	75bb      	strb	r3, [r7, #22]
 80210f0:	e00f      	b.n	8021112 <ChaCha20_SetCell+0x5a>

		// C: Assign cell[i] = key[i - 4]
		cell[i] = key[i - 4];
 80210f2:	7dbb      	ldrb	r3, [r7, #22]
 80210f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80210f8:	3b04      	subs	r3, #4
 80210fa:	009b      	lsls	r3, r3, #2
 80210fc:	687a      	ldr	r2, [r7, #4]
 80210fe:	441a      	add	r2, r3
 8021100:	7dbb      	ldrb	r3, [r7, #22]
 8021102:	009b      	lsls	r3, r3, #2
 8021104:	68f9      	ldr	r1, [r7, #12]
 8021106:	440b      	add	r3, r1
 8021108:	6812      	ldr	r2, [r2, #0]
 802110a:	601a      	str	r2, [r3, #0]
	for (uint8 i = 4; i < 12; i++)
 802110c:	7dbb      	ldrb	r3, [r7, #22]
 802110e:	3301      	adds	r3, #1
 8021110:	75bb      	strb	r3, [r7, #22]
 8021112:	7dbb      	ldrb	r3, [r7, #22]
 8021114:	2b0b      	cmp	r3, #11
 8021116:	d9ec      	bls.n	80210f2 <ChaCha20_SetCell+0x3a>

	// L: setBlockNumber, i = 12 -> 13
	for (uint8 i = 12; i < 14; i++)
 8021118:	230c      	movs	r3, #12
 802111a:	757b      	strb	r3, [r7, #21]
 802111c:	e00f      	b.n	802113e <ChaCha20_SetCell+0x86>

		// C: Assign cell[i] = blockNumber[i - 12]
		cell[i] = blockNumber[i - 12];
 802111e:	7d7b      	ldrb	r3, [r7, #21]
 8021120:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021124:	3b0c      	subs	r3, #12
 8021126:	009b      	lsls	r3, r3, #2
 8021128:	683a      	ldr	r2, [r7, #0]
 802112a:	441a      	add	r2, r3
 802112c:	7d7b      	ldrb	r3, [r7, #21]
 802112e:	009b      	lsls	r3, r3, #2
 8021130:	68f9      	ldr	r1, [r7, #12]
 8021132:	440b      	add	r3, r1
 8021134:	6812      	ldr	r2, [r2, #0]
 8021136:	601a      	str	r2, [r3, #0]
	for (uint8 i = 12; i < 14; i++)
 8021138:	7d7b      	ldrb	r3, [r7, #21]
 802113a:	3301      	adds	r3, #1
 802113c:	757b      	strb	r3, [r7, #21]
 802113e:	7d7b      	ldrb	r3, [r7, #21]
 8021140:	2b0d      	cmp	r3, #13
 8021142:	d9ec      	bls.n	802111e <ChaCha20_SetCell+0x66>

	// L: setBlockNumber, i = 14 -> 15
	for (uint8 i = 14; i < 16; i++)
 8021144:	230e      	movs	r3, #14
 8021146:	753b      	strb	r3, [r7, #20]
 8021148:	e00f      	b.n	802116a <ChaCha20_SetCell+0xb2>

		// C: Assign cell[i] = nonce[i - 12]
		cell[i] = nonce[i - 14];
 802114a:	7d3b      	ldrb	r3, [r7, #20]
 802114c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021150:	3b0e      	subs	r3, #14
 8021152:	009b      	lsls	r3, r3, #2
 8021154:	6a3a      	ldr	r2, [r7, #32]
 8021156:	441a      	add	r2, r3
 8021158:	7d3b      	ldrb	r3, [r7, #20]
 802115a:	009b      	lsls	r3, r3, #2
 802115c:	68f9      	ldr	r1, [r7, #12]
 802115e:	440b      	add	r3, r1
 8021160:	6812      	ldr	r2, [r2, #0]
 8021162:	601a      	str	r2, [r3, #0]
	for (uint8 i = 14; i < 16; i++)
 8021164:	7d3b      	ldrb	r3, [r7, #20]
 8021166:	3301      	adds	r3, #1
 8021168:	753b      	strb	r3, [r7, #20]
 802116a:	7d3b      	ldrb	r3, [r7, #20]
 802116c:	2b0f      	cmp	r3, #15
 802116e:	d9ec      	bls.n	802114a <ChaCha20_SetCell+0x92>
}/* END ChaCha20_SetCell */
 8021170:	bf00      	nop
 8021172:	bf00      	nop
 8021174:	371c      	adds	r7, #28
 8021176:	46bd      	mov	sp, r7
 8021178:	f85d 7b04 	ldr.w	r7, [sp], #4
 802117c:	4770      	bx	lr

0802117e <ChaCha20_Round>:
**
** Functions Invoked     : None
***********************************************************************************/
FUNC(void, CHACHA20_PRIVATE_FUNCTION) ChaCha20_Round(uint8 keyStream[],
						     uint32 cell[])
{
 802117e:	b480      	push	{r7}
 8021180:	b095      	sub	sp, #84	; 0x54
 8021182:	af00      	add	r7, sp, #0
 8021184:	6078      	str	r0, [r7, #4]
 8021186:	6039      	str	r1, [r7, #0]
	// C-DE: x-array for storing 16 cells KSG input
	uint32 x[16];

	//L: for storing 16 cells KSG input
	for (uint8 i = 0; i < 16; i++)
 8021188:	2300      	movs	r3, #0
 802118a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 802118e:	e012      	b.n	80211b6 <ChaCha20_Round+0x38>
		x[i] = cell[i];
 8021190:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8021194:	009b      	lsls	r3, r3, #2
 8021196:	683a      	ldr	r2, [r7, #0]
 8021198:	441a      	add	r2, r3
 802119a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 802119e:	6812      	ldr	r2, [r2, #0]
 80211a0:	009b      	lsls	r3, r3, #2
 80211a2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80211a6:	440b      	add	r3, r1
 80211a8:	f843 2c44 	str.w	r2, [r3, #-68]
	for (uint8 i = 0; i < 16; i++)
 80211ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80211b0:	3301      	adds	r3, #1
 80211b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80211b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80211ba:	2b0f      	cmp	r3, #15
 80211bc:	d9e8      	bls.n	8021190 <ChaCha20_Round+0x12>

	//Loop for mixing in Round function-------------
	for (uint8 i = 0; i < ROUNDS; i += 2)
 80211be:	2300      	movs	r3, #0
 80211c0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80211c4:	e184      	b.n	80214d0 <ChaCha20_Round+0x352>
	{
		//Odd rounds------------------------------
		QR(x[0], x[4], x[8], x[12]);
 80211c6:	68fa      	ldr	r2, [r7, #12]
 80211c8:	69fb      	ldr	r3, [r7, #28]
 80211ca:	4413      	add	r3, r2
 80211cc:	60fb      	str	r3, [r7, #12]
 80211ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80211d0:	68fb      	ldr	r3, [r7, #12]
 80211d2:	4053      	eors	r3, r2
 80211d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80211d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80211d8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80211dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80211de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80211e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80211e2:	4413      	add	r3, r2
 80211e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80211e6:	69fa      	ldr	r2, [r7, #28]
 80211e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211ea:	4053      	eors	r3, r2
 80211ec:	61fb      	str	r3, [r7, #28]
 80211ee:	69fb      	ldr	r3, [r7, #28]
 80211f0:	ea4f 5333 	mov.w	r3, r3, ror #20
 80211f4:	61fb      	str	r3, [r7, #28]
 80211f6:	68fa      	ldr	r2, [r7, #12]
 80211f8:	69fb      	ldr	r3, [r7, #28]
 80211fa:	4413      	add	r3, r2
 80211fc:	60fb      	str	r3, [r7, #12]
 80211fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021200:	68fb      	ldr	r3, [r7, #12]
 8021202:	4053      	eors	r3, r2
 8021204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021208:	ea4f 6333 	mov.w	r3, r3, ror #24
 802120c:	63fb      	str	r3, [r7, #60]	; 0x3c
 802120e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8021212:	4413      	add	r3, r2
 8021214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021216:	69fa      	ldr	r2, [r7, #28]
 8021218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802121a:	4053      	eors	r3, r2
 802121c:	61fb      	str	r3, [r7, #28]
 802121e:	69fb      	ldr	r3, [r7, #28]
 8021220:	ea4f 6373 	mov.w	r3, r3, ror #25
 8021224:	61fb      	str	r3, [r7, #28]
		QR(x[1], x[5], x[9], x[13]);
 8021226:	693a      	ldr	r2, [r7, #16]
 8021228:	6a3b      	ldr	r3, [r7, #32]
 802122a:	4413      	add	r3, r2
 802122c:	613b      	str	r3, [r7, #16]
 802122e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021230:	693b      	ldr	r3, [r7, #16]
 8021232:	4053      	eors	r3, r2
 8021234:	643b      	str	r3, [r7, #64]	; 0x40
 8021236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021238:	ea4f 4333 	mov.w	r3, r3, ror #16
 802123c:	643b      	str	r3, [r7, #64]	; 0x40
 802123e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021242:	4413      	add	r3, r2
 8021244:	633b      	str	r3, [r7, #48]	; 0x30
 8021246:	6a3a      	ldr	r2, [r7, #32]
 8021248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802124a:	4053      	eors	r3, r2
 802124c:	623b      	str	r3, [r7, #32]
 802124e:	6a3b      	ldr	r3, [r7, #32]
 8021250:	ea4f 5333 	mov.w	r3, r3, ror #20
 8021254:	623b      	str	r3, [r7, #32]
 8021256:	693a      	ldr	r2, [r7, #16]
 8021258:	6a3b      	ldr	r3, [r7, #32]
 802125a:	4413      	add	r3, r2
 802125c:	613b      	str	r3, [r7, #16]
 802125e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021260:	693b      	ldr	r3, [r7, #16]
 8021262:	4053      	eors	r3, r2
 8021264:	643b      	str	r3, [r7, #64]	; 0x40
 8021266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021268:	ea4f 6333 	mov.w	r3, r3, ror #24
 802126c:	643b      	str	r3, [r7, #64]	; 0x40
 802126e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021272:	4413      	add	r3, r2
 8021274:	633b      	str	r3, [r7, #48]	; 0x30
 8021276:	6a3a      	ldr	r2, [r7, #32]
 8021278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802127a:	4053      	eors	r3, r2
 802127c:	623b      	str	r3, [r7, #32]
 802127e:	6a3b      	ldr	r3, [r7, #32]
 8021280:	ea4f 6373 	mov.w	r3, r3, ror #25
 8021284:	623b      	str	r3, [r7, #32]
		QR(x[2], x[6], x[10], x[14]);
 8021286:	697a      	ldr	r2, [r7, #20]
 8021288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802128a:	4413      	add	r3, r2
 802128c:	617b      	str	r3, [r7, #20]
 802128e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021290:	697b      	ldr	r3, [r7, #20]
 8021292:	4053      	eors	r3, r2
 8021294:	647b      	str	r3, [r7, #68]	; 0x44
 8021296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021298:	ea4f 4333 	mov.w	r3, r3, ror #16
 802129c:	647b      	str	r3, [r7, #68]	; 0x44
 802129e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80212a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80212a2:	4413      	add	r3, r2
 80212a4:	637b      	str	r3, [r7, #52]	; 0x34
 80212a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80212a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80212aa:	4053      	eors	r3, r2
 80212ac:	627b      	str	r3, [r7, #36]	; 0x24
 80212ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212b0:	ea4f 5333 	mov.w	r3, r3, ror #20
 80212b4:	627b      	str	r3, [r7, #36]	; 0x24
 80212b6:	697a      	ldr	r2, [r7, #20]
 80212b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212ba:	4413      	add	r3, r2
 80212bc:	617b      	str	r3, [r7, #20]
 80212be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80212c0:	697b      	ldr	r3, [r7, #20]
 80212c2:	4053      	eors	r3, r2
 80212c4:	647b      	str	r3, [r7, #68]	; 0x44
 80212c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80212c8:	ea4f 6333 	mov.w	r3, r3, ror #24
 80212cc:	647b      	str	r3, [r7, #68]	; 0x44
 80212ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80212d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80212d2:	4413      	add	r3, r2
 80212d4:	637b      	str	r3, [r7, #52]	; 0x34
 80212d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80212d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80212da:	4053      	eors	r3, r2
 80212dc:	627b      	str	r3, [r7, #36]	; 0x24
 80212de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212e0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80212e4:	627b      	str	r3, [r7, #36]	; 0x24
		QR(x[3], x[7], x[11], x[15]);
 80212e6:	69ba      	ldr	r2, [r7, #24]
 80212e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80212ea:	4413      	add	r3, r2
 80212ec:	61bb      	str	r3, [r7, #24]
 80212ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80212f0:	69bb      	ldr	r3, [r7, #24]
 80212f2:	4053      	eors	r3, r2
 80212f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80212f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80212f8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80212fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80212fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021302:	4413      	add	r3, r2
 8021304:	63bb      	str	r3, [r7, #56]	; 0x38
 8021306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802130a:	4053      	eors	r3, r2
 802130c:	62bb      	str	r3, [r7, #40]	; 0x28
 802130e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021310:	ea4f 5333 	mov.w	r3, r3, ror #20
 8021314:	62bb      	str	r3, [r7, #40]	; 0x28
 8021316:	69ba      	ldr	r2, [r7, #24]
 8021318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802131a:	4413      	add	r3, r2
 802131c:	61bb      	str	r3, [r7, #24]
 802131e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021320:	69bb      	ldr	r3, [r7, #24]
 8021322:	4053      	eors	r3, r2
 8021324:	64bb      	str	r3, [r7, #72]	; 0x48
 8021326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021328:	ea4f 6333 	mov.w	r3, r3, ror #24
 802132c:	64bb      	str	r3, [r7, #72]	; 0x48
 802132e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8021330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021332:	4413      	add	r3, r2
 8021334:	63bb      	str	r3, [r7, #56]	; 0x38
 8021336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802133a:	4053      	eors	r3, r2
 802133c:	62bb      	str	r3, [r7, #40]	; 0x28
 802133e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021340:	ea4f 6373 	mov.w	r3, r3, ror #25
 8021344:	62bb      	str	r3, [r7, #40]	; 0x28
		//Even rounds-------------------------
		QR(x[0], x[5], x[10], x[15]);
 8021346:	68fa      	ldr	r2, [r7, #12]
 8021348:	6a3b      	ldr	r3, [r7, #32]
 802134a:	4413      	add	r3, r2
 802134c:	60fb      	str	r3, [r7, #12]
 802134e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021350:	68fb      	ldr	r3, [r7, #12]
 8021352:	4053      	eors	r3, r2
 8021354:	64bb      	str	r3, [r7, #72]	; 0x48
 8021356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021358:	ea4f 4333 	mov.w	r3, r3, ror #16
 802135c:	64bb      	str	r3, [r7, #72]	; 0x48
 802135e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021362:	4413      	add	r3, r2
 8021364:	637b      	str	r3, [r7, #52]	; 0x34
 8021366:	6a3a      	ldr	r2, [r7, #32]
 8021368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802136a:	4053      	eors	r3, r2
 802136c:	623b      	str	r3, [r7, #32]
 802136e:	6a3b      	ldr	r3, [r7, #32]
 8021370:	ea4f 5333 	mov.w	r3, r3, ror #20
 8021374:	623b      	str	r3, [r7, #32]
 8021376:	68fa      	ldr	r2, [r7, #12]
 8021378:	6a3b      	ldr	r3, [r7, #32]
 802137a:	4413      	add	r3, r2
 802137c:	60fb      	str	r3, [r7, #12]
 802137e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8021380:	68fb      	ldr	r3, [r7, #12]
 8021382:	4053      	eors	r3, r2
 8021384:	64bb      	str	r3, [r7, #72]	; 0x48
 8021386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021388:	ea4f 6333 	mov.w	r3, r3, ror #24
 802138c:	64bb      	str	r3, [r7, #72]	; 0x48
 802138e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8021392:	4413      	add	r3, r2
 8021394:	637b      	str	r3, [r7, #52]	; 0x34
 8021396:	6a3a      	ldr	r2, [r7, #32]
 8021398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802139a:	4053      	eors	r3, r2
 802139c:	623b      	str	r3, [r7, #32]
 802139e:	6a3b      	ldr	r3, [r7, #32]
 80213a0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80213a4:	623b      	str	r3, [r7, #32]
		QR(x[1], x[6], x[11], x[12]);
 80213a6:	693a      	ldr	r2, [r7, #16]
 80213a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213aa:	4413      	add	r3, r2
 80213ac:	613b      	str	r3, [r7, #16]
 80213ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80213b0:	693b      	ldr	r3, [r7, #16]
 80213b2:	4053      	eors	r3, r2
 80213b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80213b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213b8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80213bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80213be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80213c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213c2:	4413      	add	r3, r2
 80213c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80213c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80213c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80213ca:	4053      	eors	r3, r2
 80213cc:	627b      	str	r3, [r7, #36]	; 0x24
 80213ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213d0:	ea4f 5333 	mov.w	r3, r3, ror #20
 80213d4:	627b      	str	r3, [r7, #36]	; 0x24
 80213d6:	693a      	ldr	r2, [r7, #16]
 80213d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213da:	4413      	add	r3, r2
 80213dc:	613b      	str	r3, [r7, #16]
 80213de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80213e0:	693b      	ldr	r3, [r7, #16]
 80213e2:	4053      	eors	r3, r2
 80213e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80213e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213e8:	ea4f 6333 	mov.w	r3, r3, ror #24
 80213ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80213ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80213f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80213f2:	4413      	add	r3, r2
 80213f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80213f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80213f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80213fa:	4053      	eors	r3, r2
 80213fc:	627b      	str	r3, [r7, #36]	; 0x24
 80213fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021400:	ea4f 6373 	mov.w	r3, r3, ror #25
 8021404:	627b      	str	r3, [r7, #36]	; 0x24
		QR(x[2], x[7], x[8], x[13]);
 8021406:	697a      	ldr	r2, [r7, #20]
 8021408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802140a:	4413      	add	r3, r2
 802140c:	617b      	str	r3, [r7, #20]
 802140e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021410:	697b      	ldr	r3, [r7, #20]
 8021412:	4053      	eors	r3, r2
 8021414:	643b      	str	r3, [r7, #64]	; 0x40
 8021416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021418:	ea4f 4333 	mov.w	r3, r3, ror #16
 802141c:	643b      	str	r3, [r7, #64]	; 0x40
 802141e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021422:	4413      	add	r3, r2
 8021424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802142a:	4053      	eors	r3, r2
 802142c:	62bb      	str	r3, [r7, #40]	; 0x28
 802142e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021430:	ea4f 5333 	mov.w	r3, r3, ror #20
 8021434:	62bb      	str	r3, [r7, #40]	; 0x28
 8021436:	697a      	ldr	r2, [r7, #20]
 8021438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802143a:	4413      	add	r3, r2
 802143c:	617b      	str	r3, [r7, #20]
 802143e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8021440:	697b      	ldr	r3, [r7, #20]
 8021442:	4053      	eors	r3, r2
 8021444:	643b      	str	r3, [r7, #64]	; 0x40
 8021446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021448:	ea4f 6333 	mov.w	r3, r3, ror #24
 802144c:	643b      	str	r3, [r7, #64]	; 0x40
 802144e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021452:	4413      	add	r3, r2
 8021454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802145a:	4053      	eors	r3, r2
 802145c:	62bb      	str	r3, [r7, #40]	; 0x28
 802145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021460:	ea4f 6373 	mov.w	r3, r3, ror #25
 8021464:	62bb      	str	r3, [r7, #40]	; 0x28
		QR(x[3], x[4], x[9], x[14]);
 8021466:	69ba      	ldr	r2, [r7, #24]
 8021468:	69fb      	ldr	r3, [r7, #28]
 802146a:	4413      	add	r3, r2
 802146c:	61bb      	str	r3, [r7, #24]
 802146e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8021470:	69bb      	ldr	r3, [r7, #24]
 8021472:	4053      	eors	r3, r2
 8021474:	647b      	str	r3, [r7, #68]	; 0x44
 8021476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021478:	ea4f 4333 	mov.w	r3, r3, ror #16
 802147c:	647b      	str	r3, [r7, #68]	; 0x44
 802147e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021482:	4413      	add	r3, r2
 8021484:	633b      	str	r3, [r7, #48]	; 0x30
 8021486:	69fa      	ldr	r2, [r7, #28]
 8021488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802148a:	4053      	eors	r3, r2
 802148c:	61fb      	str	r3, [r7, #28]
 802148e:	69fb      	ldr	r3, [r7, #28]
 8021490:	ea4f 5333 	mov.w	r3, r3, ror #20
 8021494:	61fb      	str	r3, [r7, #28]
 8021496:	69ba      	ldr	r2, [r7, #24]
 8021498:	69fb      	ldr	r3, [r7, #28]
 802149a:	4413      	add	r3, r2
 802149c:	61bb      	str	r3, [r7, #24]
 802149e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80214a0:	69bb      	ldr	r3, [r7, #24]
 80214a2:	4053      	eors	r3, r2
 80214a4:	647b      	str	r3, [r7, #68]	; 0x44
 80214a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80214a8:	ea4f 6333 	mov.w	r3, r3, ror #24
 80214ac:	647b      	str	r3, [r7, #68]	; 0x44
 80214ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80214b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80214b2:	4413      	add	r3, r2
 80214b4:	633b      	str	r3, [r7, #48]	; 0x30
 80214b6:	69fa      	ldr	r2, [r7, #28]
 80214b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214ba:	4053      	eors	r3, r2
 80214bc:	61fb      	str	r3, [r7, #28]
 80214be:	69fb      	ldr	r3, [r7, #28]
 80214c0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80214c4:	61fb      	str	r3, [r7, #28]
	for (uint8 i = 0; i < ROUNDS; i += 2)
 80214c6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80214ca:	3302      	adds	r3, #2
 80214cc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80214d0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80214d4:	2b13      	cmp	r3, #19
 80214d6:	f67f ae76 	bls.w	80211c6 <ChaCha20_Round+0x48>
	}

	//Loop for adding KSG table input with output table of Round function
	for (uint8 i = 0, b = 0; i < 16; i++)
 80214da:	2300      	movs	r3, #0
 80214dc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80214e0:	2300      	movs	r3, #0
 80214e2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80214e6:	e066      	b.n	80215b6 <ChaCha20_Round+0x438>
	{
		x[i] += cell[i];
 80214e8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80214ec:	009b      	lsls	r3, r3, #2
 80214ee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80214f2:	4413      	add	r3, r2
 80214f4:	f853 1c44 	ldr.w	r1, [r3, #-68]
 80214f8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80214fc:	009b      	lsls	r3, r3, #2
 80214fe:	683a      	ldr	r2, [r7, #0]
 8021500:	4413      	add	r3, r2
 8021502:	681a      	ldr	r2, [r3, #0]
 8021504:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8021508:	440a      	add	r2, r1
 802150a:	009b      	lsls	r3, r3, #2
 802150c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8021510:	440b      	add	r3, r1
 8021512:	f843 2c44 	str.w	r2, [r3, #-68]

		// Store keystream
		keyStream[b++] = x[i] & 0xFF;
 8021516:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 802151a:	009b      	lsls	r3, r3, #2
 802151c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8021520:	4413      	add	r3, r2
 8021522:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8021526:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 802152a:	1c59      	adds	r1, r3, #1
 802152c:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 8021530:	4619      	mov	r1, r3
 8021532:	687b      	ldr	r3, [r7, #4]
 8021534:	440b      	add	r3, r1
 8021536:	b2d2      	uxtb	r2, r2
 8021538:	701a      	strb	r2, [r3, #0]
		keyStream[b++] = (x[i] >> 8) & 0xFF;
 802153a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 802153e:	009b      	lsls	r3, r3, #2
 8021540:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8021544:	4413      	add	r3, r2
 8021546:	f853 3c44 	ldr.w	r3, [r3, #-68]
 802154a:	0a1a      	lsrs	r2, r3, #8
 802154c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8021550:	1c59      	adds	r1, r3, #1
 8021552:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 8021556:	4619      	mov	r1, r3
 8021558:	687b      	ldr	r3, [r7, #4]
 802155a:	440b      	add	r3, r1
 802155c:	b2d2      	uxtb	r2, r2
 802155e:	701a      	strb	r2, [r3, #0]
		keyStream[b++] = (x[i] >> 16) & 0xFF;
 8021560:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8021564:	009b      	lsls	r3, r3, #2
 8021566:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802156a:	4413      	add	r3, r2
 802156c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8021570:	0c1a      	lsrs	r2, r3, #16
 8021572:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8021576:	1c59      	adds	r1, r3, #1
 8021578:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 802157c:	4619      	mov	r1, r3
 802157e:	687b      	ldr	r3, [r7, #4]
 8021580:	440b      	add	r3, r1
 8021582:	b2d2      	uxtb	r2, r2
 8021584:	701a      	strb	r2, [r3, #0]
		keyStream[b++] = (x[i] >> 24) & 0xFF;
 8021586:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 802158a:	009b      	lsls	r3, r3, #2
 802158c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8021590:	4413      	add	r3, r2
 8021592:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8021596:	0e1a      	lsrs	r2, r3, #24
 8021598:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 802159c:	1c59      	adds	r1, r3, #1
 802159e:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
 80215a2:	4619      	mov	r1, r3
 80215a4:	687b      	ldr	r3, [r7, #4]
 80215a6:	440b      	add	r3, r1
 80215a8:	b2d2      	uxtb	r2, r2
 80215aa:	701a      	strb	r2, [r3, #0]
	for (uint8 i = 0, b = 0; i < 16; i++)
 80215ac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80215b0:	3301      	adds	r3, #1
 80215b2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80215b6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80215ba:	2b0f      	cmp	r3, #15
 80215bc:	d994      	bls.n	80214e8 <ChaCha20_Round+0x36a>
	}
}/* END ChaCha20_Round */
 80215be:	bf00      	nop
 80215c0:	bf00      	nop
 80215c2:	3754      	adds	r7, #84	; 0x54
 80215c4:	46bd      	mov	sp, r7
 80215c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215ca:	4770      	bx	lr

080215cc <ChaCha20_FinalXor>:
FUNC(void, CHACHA20_PRIVATE_FUNCTION) ChaCha20_FinalXor(uint8 keyStream[],
							uint8 cell[],
							uint8 textInput[],
							uint16 size,
							uint8 textOutput[])
{
 80215cc:	b580      	push	{r7, lr}
 80215ce:	b088      	sub	sp, #32
 80215d0:	af00      	add	r7, sp, #0
 80215d2:	60f8      	str	r0, [r7, #12]
 80215d4:	60b9      	str	r1, [r7, #8]
 80215d6:	607a      	str	r2, [r7, #4]
 80215d8:	603b      	str	r3, [r7, #0]
	// C: roundFunction
	ChaCha20_Round(keyStream, (uint32*)cell);
 80215da:	68b9      	ldr	r1, [r7, #8]
 80215dc:	68f8      	ldr	r0, [r7, #12]
 80215de:	f7ff fdce 	bl	802117e <ChaCha20_Round>

	// L: textInput and textOutput
	uint16 j = 0;
 80215e2:	2300      	movs	r3, #0
 80215e4:	61fb      	str	r3, [r7, #28]
	uint16 round = size/64;
 80215e6:	683b      	ldr	r3, [r7, #0]
 80215e8:	099b      	lsrs	r3, r3, #6
 80215ea:	613b      	str	r3, [r7, #16]
		   round += (size%64!=0)?1:0;
 80215ec:	683b      	ldr	r3, [r7, #0]
 80215ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	d001      	beq.n	80215fa <ChaCha20_FinalXor+0x2e>
 80215f6:	2301      	movs	r3, #1
 80215f8:	e000      	b.n	80215fc <ChaCha20_FinalXor+0x30>
 80215fa:	2300      	movs	r3, #0
 80215fc:	693a      	ldr	r2, [r7, #16]
 80215fe:	4413      	add	r3, r2
 8021600:	613b      	str	r3, [r7, #16]
//	while (textInput[j])
//	{
	for(int16 r = 0; r < round; r++){
 8021602:	2300      	movs	r3, #0
 8021604:	61bb      	str	r3, [r7, #24]
 8021606:	e020      	b.n	802164a <ChaCha20_FinalXor+0x7e>
		// L: keyStream
		for (uint8 i = 0; i < 64&&j<size; i++)
 8021608:	2300      	movs	r3, #0
 802160a:	75fb      	strb	r3, [r7, #23]
 802160c:	e013      	b.n	8021636 <ChaCha20_FinalXor+0x6a>
		{
			// C: xor cell8 and textInput8
			textOutput[j] = (keyStream[i] ^ textInput[j]);
 802160e:	7dfb      	ldrb	r3, [r7, #23]
 8021610:	68fa      	ldr	r2, [r7, #12]
 8021612:	4413      	add	r3, r2
 8021614:	7819      	ldrb	r1, [r3, #0]
 8021616:	687a      	ldr	r2, [r7, #4]
 8021618:	69fb      	ldr	r3, [r7, #28]
 802161a:	4413      	add	r3, r2
 802161c:	781a      	ldrb	r2, [r3, #0]
 802161e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021620:	69fb      	ldr	r3, [r7, #28]
 8021622:	4403      	add	r3, r0
 8021624:	404a      	eors	r2, r1
 8021626:	b2d2      	uxtb	r2, r2
 8021628:	701a      	strb	r2, [r3, #0]
			j++;
 802162a:	69fb      	ldr	r3, [r7, #28]
 802162c:	3301      	adds	r3, #1
 802162e:	61fb      	str	r3, [r7, #28]
		for (uint8 i = 0; i < 64&&j<size; i++)
 8021630:	7dfb      	ldrb	r3, [r7, #23]
 8021632:	3301      	adds	r3, #1
 8021634:	75fb      	strb	r3, [r7, #23]
 8021636:	7dfb      	ldrb	r3, [r7, #23]
 8021638:	2b3f      	cmp	r3, #63	; 0x3f
 802163a:	d803      	bhi.n	8021644 <ChaCha20_FinalXor+0x78>
 802163c:	69fa      	ldr	r2, [r7, #28]
 802163e:	683b      	ldr	r3, [r7, #0]
 8021640:	429a      	cmp	r2, r3
 8021642:	d3e4      	bcc.n	802160e <ChaCha20_FinalXor+0x42>
	for(int16 r = 0; r < round; r++){
 8021644:	69bb      	ldr	r3, [r7, #24]
 8021646:	3301      	adds	r3, #1
 8021648:	61bb      	str	r3, [r7, #24]
 802164a:	69bb      	ldr	r3, [r7, #24]
 802164c:	693a      	ldr	r2, [r7, #16]
 802164e:	429a      	cmp	r2, r3
 8021650:	d8da      	bhi.n	8021608 <ChaCha20_FinalXor+0x3c>
		}
	}

//	}
}/* END ChaCha20_FinalXor */
 8021652:	bf00      	nop
 8021654:	bf00      	nop
 8021656:	3720      	adds	r7, #32
 8021658:	46bd      	mov	sp, r7
 802165a:	bd80      	pop	{r7, pc}

0802165c <sd_init>:
#include "Frame.h"

HAL_StatusTypeDef sd_init(){
 802165c:	b580      	push	{r7, lr}
 802165e:	af00      	add	r7, sp, #0
	if(BSP_SD_Init() == MSD_OK ) return HAL_OK;
 8021660:	f015 f890 	bl	8036784 <BSP_SD_Init>
 8021664:	4603      	mov	r3, r0
 8021666:	2b00      	cmp	r3, #0
 8021668:	d101      	bne.n	802166e <sd_init+0x12>
 802166a:	2300      	movs	r3, #0
 802166c:	e000      	b.n	8021670 <sd_init+0x14>
	else return HAL_ERROR;
 802166e:	2301      	movs	r3, #1
}
 8021670:	4618      	mov	r0, r3
 8021672:	bd80      	pop	{r7, pc}

08021674 <sd_mount>:

FRESULT sd_mount(FATFS *fatfs){
 8021674:	b580      	push	{r7, lr}
 8021676:	b082      	sub	sp, #8
 8021678:	af00      	add	r7, sp, #0
 802167a:	6078      	str	r0, [r7, #4]
	return f_mount(fatfs, "", 1);
 802167c:	2201      	movs	r2, #1
 802167e:	4904      	ldr	r1, [pc, #16]	; (8021690 <sd_mount+0x1c>)
 8021680:	6878      	ldr	r0, [r7, #4]
 8021682:	f016 ff21 	bl	80384c8 <f_mount>
 8021686:	4603      	mov	r3, r0
}
 8021688:	4618      	mov	r0, r3
 802168a:	3708      	adds	r7, #8
 802168c:	46bd      	mov	sp, r7
 802168e:	bd80      	pop	{r7, pc}
 8021690:	0803d908 	.word	0x0803d908

08021694 <sd_open>:

FRESULT sd_open(FIL *myfile, const char *file_name, uint8_t mode){
 8021694:	b580      	push	{r7, lr}
 8021696:	b084      	sub	sp, #16
 8021698:	af00      	add	r7, sp, #0
 802169a:	60f8      	str	r0, [r7, #12]
 802169c:	60b9      	str	r1, [r7, #8]
 802169e:	4613      	mov	r3, r2
 80216a0:	71fb      	strb	r3, [r7, #7]
	return f_open(myfile, file_name, mode);
 80216a2:	79fb      	ldrb	r3, [r7, #7]
 80216a4:	461a      	mov	r2, r3
 80216a6:	68b9      	ldr	r1, [r7, #8]
 80216a8:	68f8      	ldr	r0, [r7, #12]
 80216aa:	f016 ff53 	bl	8038554 <f_open>
 80216ae:	4603      	mov	r3, r0
}
 80216b0:	4618      	mov	r0, r3
 80216b2:	3710      	adds	r7, #16
 80216b4:	46bd      	mov	sp, r7
 80216b6:	bd80      	pop	{r7, pc}

080216b8 <sd_write>:

UINT sd_write(FIL *myfile, const uint8_t *write_buf, uint16_t size){
 80216b8:	b580      	push	{r7, lr}
 80216ba:	b086      	sub	sp, #24
 80216bc:	af00      	add	r7, sp, #0
 80216be:	60f8      	str	r0, [r7, #12]
 80216c0:	60b9      	str	r1, [r7, #8]
 80216c2:	4613      	mov	r3, r2
 80216c4:	80fb      	strh	r3, [r7, #6]
		UINT bw;
		f_write (myfile, write_buf, size, &bw);
 80216c6:	88fa      	ldrh	r2, [r7, #6]
 80216c8:	f107 0314 	add.w	r3, r7, #20
 80216cc:	68b9      	ldr	r1, [r7, #8]
 80216ce:	68f8      	ldr	r0, [r7, #12]
 80216d0:	f017 fa3d 	bl	8038b4e <f_write>
		return bw;
 80216d4:	697b      	ldr	r3, [r7, #20]
}
 80216d6:	4618      	mov	r0, r3
 80216d8:	3718      	adds	r7, #24
 80216da:	46bd      	mov	sp, r7
 80216dc:	bd80      	pop	{r7, pc}

080216de <sd_read>:

uint32_t sd_read(FIL *myfile, uint8_t *read_buf, uint32_t size){
 80216de:	b580      	push	{r7, lr}
 80216e0:	b086      	sub	sp, #24
 80216e2:	af00      	add	r7, sp, #0
 80216e4:	60f8      	str	r0, [r7, #12]
 80216e6:	60b9      	str	r1, [r7, #8]
 80216e8:	607a      	str	r2, [r7, #4]
	uint32_t br = 0;
 80216ea:	2300      	movs	r3, #0
 80216ec:	617b      	str	r3, [r7, #20]
	f_read(myfile, read_buf, size,(UINT*) &br);
 80216ee:	f107 0314 	add.w	r3, r7, #20
 80216f2:	687a      	ldr	r2, [r7, #4]
 80216f4:	68b9      	ldr	r1, [r7, #8]
 80216f6:	68f8      	ldr	r0, [r7, #12]
 80216f8:	f017 f8ea 	bl	80388d0 <f_read>
	return br;
 80216fc:	697b      	ldr	r3, [r7, #20]
}
 80216fe:	4618      	mov	r0, r3
 8021700:	3718      	adds	r7, #24
 8021702:	46bd      	mov	sp, r7
 8021704:	bd80      	pop	{r7, pc}

08021706 <sd_close>:

void sd_close(FIL *myfile){
 8021706:	b580      	push	{r7, lr}
 8021708:	b082      	sub	sp, #8
 802170a:	af00      	add	r7, sp, #0
 802170c:	6078      	str	r0, [r7, #4]
	f_close(myfile);
 802170e:	6878      	ldr	r0, [r7, #4]
 8021710:	f017 fc10 	bl	8038f34 <f_close>
}
 8021714:	bf00      	nop
 8021716:	3708      	adds	r7, #8
 8021718:	46bd      	mov	sp, r7
 802171a:	bd80      	pop	{r7, pc}

0802171c <Frame_SendResponseFrame>:

void Frame_SendResponseFrame(defResponseType response){
 802171c:	b580      	push	{r7, lr}
 802171e:	b086      	sub	sp, #24
 8021720:	af00      	add	r7, sp, #0
 8021722:	4603      	mov	r3, r0
 8021724:	71fb      	strb	r3, [r7, #7]
	defResponsePacket res_fr = {
 8021726:	f107 0308 	add.w	r3, r7, #8
 802172a:	2200      	movs	r2, #0
 802172c:	601a      	str	r2, [r3, #0]
 802172e:	605a      	str	r2, [r3, #4]
 8021730:	609a      	str	r2, [r3, #8]
 8021732:	60da      	str	r2, [r3, #12]
 8021734:	2303      	movs	r3, #3
 8021736:	727b      	strb	r3, [r7, #9]
 8021738:	f44f 7380 	mov.w	r3, #256	; 0x100
 802173c:	817b      	strh	r3, [r7, #10]
 802173e:	79fb      	ldrb	r3, [r7, #7]
 8021740:	733b      	strb	r3, [r7, #12]
 8021742:	2301      	movs	r3, #1
 8021744:	753b      	strb	r3, [r7, #20]
			.DataLength = {0x00, 0x01,},
			.Command = response,
			.Eof = EOF_SIGNAL,
	};

	res_fr.Crc.DataUint32 = crc32(&response, 1);
 8021746:	1dfb      	adds	r3, r7, #7
 8021748:	2101      	movs	r1, #1
 802174a:	4618      	mov	r0, r3
 802174c:	f7ff fc4e 	bl	8020fec <crc32>
 8021750:	4603      	mov	r3, r0
 8021752:	613b      	str	r3, [r7, #16]

	HAL_UART_Transmit(&MY_UART, (uint8_t*)&res_fr.Sof, 1, 1000);
 8021754:	f107 0108 	add.w	r1, r7, #8
 8021758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802175c:	2201      	movs	r2, #1
 802175e:	481b      	ldr	r0, [pc, #108]	; (80217cc <Frame_SendResponseFrame+0xb0>)
 8021760:	f013 faa7 	bl	8034cb2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&MY_UART, (uint8_t*)&res_fr.Type, 1, 1000);
 8021764:	f107 0308 	add.w	r3, r7, #8
 8021768:	1c59      	adds	r1, r3, #1
 802176a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802176e:	2201      	movs	r2, #1
 8021770:	4816      	ldr	r0, [pc, #88]	; (80217cc <Frame_SendResponseFrame+0xb0>)
 8021772:	f013 fa9e 	bl	8034cb2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&MY_UART, (uint8_t*)res_fr.DataLength, 2, 1000);
 8021776:	f107 0308 	add.w	r3, r7, #8
 802177a:	1c99      	adds	r1, r3, #2
 802177c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8021780:	2202      	movs	r2, #2
 8021782:	4812      	ldr	r0, [pc, #72]	; (80217cc <Frame_SendResponseFrame+0xb0>)
 8021784:	f013 fa95 	bl	8034cb2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&MY_UART, (uint8_t*)&res_fr.Command, 1, 1000);
 8021788:	f107 0308 	add.w	r3, r7, #8
 802178c:	1d19      	adds	r1, r3, #4
 802178e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8021792:	2201      	movs	r2, #1
 8021794:	480d      	ldr	r0, [pc, #52]	; (80217cc <Frame_SendResponseFrame+0xb0>)
 8021796:	f013 fa8c 	bl	8034cb2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&MY_UART, (uint8_t*)res_fr.Crc.DataArray, 4, 1000);
 802179a:	f107 0308 	add.w	r3, r7, #8
 802179e:	f103 0108 	add.w	r1, r3, #8
 80217a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80217a6:	2204      	movs	r2, #4
 80217a8:	4808      	ldr	r0, [pc, #32]	; (80217cc <Frame_SendResponseFrame+0xb0>)
 80217aa:	f013 fa82 	bl	8034cb2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&MY_UART, (uint8_t*)&res_fr.Eof, 1, 1000);
 80217ae:	f107 0308 	add.w	r3, r7, #8
 80217b2:	f103 010c 	add.w	r1, r3, #12
 80217b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80217ba:	2201      	movs	r2, #1
 80217bc:	4803      	ldr	r0, [pc, #12]	; (80217cc <Frame_SendResponseFrame+0xb0>)
 80217be:	f013 fa78 	bl	8034cb2 <HAL_UART_Transmit>
}
 80217c2:	bf00      	nop
 80217c4:	3718      	adds	r7, #24
 80217c6:	46bd      	mov	sp, r7
 80217c8:	bd80      	pop	{r7, pc}
 80217ca:	bf00      	nop
 80217cc:	20000464 	.word	0x20000464

080217d0 <Frame_ReadStartFrame>:


defReturnType Frame_ReadStartFrame(){
 80217d0:	b580      	push	{r7, lr}
 80217d2:	b084      	sub	sp, #16
 80217d4:	af00      	add	r7, sp, #0
	uint8_t buf[COMMAND_FRAME_LENGHT] = {0,};
 80217d6:	2300      	movs	r3, #0
 80217d8:	607b      	str	r3, [r7, #4]
 80217da:	f107 0308 	add.w	r3, r7, #8
 80217de:	2200      	movs	r2, #0
 80217e0:	601a      	str	r2, [r3, #0]
 80217e2:	809a      	strh	r2, [r3, #4]

	HAL_UART_Receive(&MY_UART, buf, COMMAND_FRAME_LENGHT, 3000);
 80217e4:	1d39      	adds	r1, r7, #4
 80217e6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80217ea:	220a      	movs	r2, #10
 80217ec:	480c      	ldr	r0, [pc, #48]	; (8021820 <Frame_ReadStartFrame+0x50>)
 80217ee:	f013 faf2 	bl	8034dd6 <HAL_UART_Receive>

	if(!((buf[0] == SOF_SIGNAL)&&(buf[COMMAND_FRAME_LENGHT - 1]  == EOF_SIGNAL)))
 80217f2:	793b      	ldrb	r3, [r7, #4]
 80217f4:	2b00      	cmp	r3, #0
 80217f6:	d102      	bne.n	80217fe <Frame_ReadStartFrame+0x2e>
 80217f8:	7b7b      	ldrb	r3, [r7, #13]
 80217fa:	2b01      	cmp	r3, #1
 80217fc:	d001      	beq.n	8021802 <Frame_ReadStartFrame+0x32>
		return HANDLE_FAILED;
 80217fe:	2301      	movs	r3, #1
 8021800:	e00a      	b.n	8021818 <Frame_ReadStartFrame+0x48>

	if(buf[1] != COMMAND_TYPE) return HANDLE_FAILED;
 8021802:	797b      	ldrb	r3, [r7, #5]
 8021804:	2b00      	cmp	r3, #0
 8021806:	d001      	beq.n	802180c <Frame_ReadStartFrame+0x3c>
 8021808:	2301      	movs	r3, #1
 802180a:	e005      	b.n	8021818 <Frame_ReadStartFrame+0x48>

	if(buf[4] != START_COMMAND) return HANDLE_FAILED;
 802180c:	7a3b      	ldrb	r3, [r7, #8]
 802180e:	2b00      	cmp	r3, #0
 8021810:	d001      	beq.n	8021816 <Frame_ReadStartFrame+0x46>
 8021812:	2301      	movs	r3, #1
 8021814:	e000      	b.n	8021818 <Frame_ReadStartFrame+0x48>

	return HANDLE_OK;
 8021816:	2300      	movs	r3, #0
}
 8021818:	4618      	mov	r0, r3
 802181a:	3710      	adds	r7, #16
 802181c:	46bd      	mov	sp, r7
 802181e:	bd80      	pop	{r7, pc}
 8021820:	20000464 	.word	0x20000464

08021824 <Frame_ReadStopFrame>:


defReturnType Frame_ReadStopFrame(){
 8021824:	b580      	push	{r7, lr}
 8021826:	b084      	sub	sp, #16
 8021828:	af00      	add	r7, sp, #0
	uint8_t buf[COMMAND_FRAME_LENGHT] = {0,};
 802182a:	2300      	movs	r3, #0
 802182c:	607b      	str	r3, [r7, #4]
 802182e:	f107 0308 	add.w	r3, r7, #8
 8021832:	2200      	movs	r2, #0
 8021834:	601a      	str	r2, [r3, #0]
 8021836:	809a      	strh	r2, [r3, #4]

	HAL_UART_Receive(&MY_UART, buf, COMMAND_FRAME_LENGHT, 3000);
 8021838:	1d39      	adds	r1, r7, #4
 802183a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 802183e:	220a      	movs	r2, #10
 8021840:	4804      	ldr	r0, [pc, #16]	; (8021854 <Frame_ReadStopFrame+0x30>)
 8021842:	f013 fac8 	bl	8034dd6 <HAL_UART_Receive>

	if(!((buf[0] = SOF_SIGNAL)&&(buf[COMMAND_FRAME_LENGHT - 1]  = EOF_SIGNAL)))
 8021846:	2300      	movs	r3, #0
 8021848:	713b      	strb	r3, [r7, #4]
		return HANDLE_FAILED;
 802184a:	2301      	movs	r3, #1
	if(buf[1] != COMMAND_TYPE) return HANDLE_FAILED;

	if(buf[4] != STOP_COMMAND) return HANDLE_FAILED;

	return HANDLE_OK;
}
 802184c:	4618      	mov	r0, r3
 802184e:	3710      	adds	r7, #16
 8021850:	46bd      	mov	sp, r7
 8021852:	bd80      	pop	{r7, pc}
 8021854:	20000464 	.word	0x20000464

08021858 <Frame_ReadHeaderFrame>:


defReturnType Frame_ReadHeaderFrame(){
 8021858:	b580      	push	{r7, lr}
 802185a:	b086      	sub	sp, #24
 802185c:	af00      	add	r7, sp, #0
	uint8_t buf[HEADER_FRAME_LENGHT] = {0,};
 802185e:	2300      	movs	r3, #0
 8021860:	607b      	str	r3, [r7, #4]
 8021862:	f107 0308 	add.w	r3, r7, #8
 8021866:	2200      	movs	r2, #0
 8021868:	601a      	str	r2, [r3, #0]
 802186a:	605a      	str	r2, [r3, #4]
 802186c:	721a      	strb	r2, [r3, #8]
	uint32To4Bytes crc_merge;
	HAL_UART_Receive(&MY_UART, (uint8_t *) buf, HEADER_FRAME_LENGHT, 3000);
 802186e:	1d39      	adds	r1, r7, #4
 8021870:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8021874:	220d      	movs	r2, #13
 8021876:	4816      	ldr	r0, [pc, #88]	; (80218d0 <Frame_ReadHeaderFrame+0x78>)
 8021878:	f013 faad 	bl	8034dd6 <HAL_UART_Receive>

	if(!((buf[0] == SOF_SIGNAL)&&(buf[HEADER_FRAME_LENGHT - 1]  == EOF_SIGNAL)))
 802187c:	793b      	ldrb	r3, [r7, #4]
 802187e:	2b00      	cmp	r3, #0
 8021880:	d102      	bne.n	8021888 <Frame_ReadHeaderFrame+0x30>
 8021882:	7c3b      	ldrb	r3, [r7, #16]
 8021884:	2b01      	cmp	r3, #1
 8021886:	d001      	beq.n	802188c <Frame_ReadHeaderFrame+0x34>
		return HANDLE_FAILED;
 8021888:	2301      	movs	r3, #1
 802188a:	e01d      	b.n	80218c8 <Frame_ReadHeaderFrame+0x70>

	crc_merge.DataArray[0] = buf[11];
 802188c:	7bfb      	ldrb	r3, [r7, #15]
 802188e:	703b      	strb	r3, [r7, #0]
	crc_merge.DataArray[1] = buf[10];
 8021890:	7bbb      	ldrb	r3, [r7, #14]
 8021892:	707b      	strb	r3, [r7, #1]
	crc_merge.DataArray[2] = buf[9];
 8021894:	7b7b      	ldrb	r3, [r7, #13]
 8021896:	70bb      	strb	r3, [r7, #2]
	crc_merge.DataArray[3] = buf[8];
 8021898:	7b3b      	ldrb	r3, [r7, #12]
 802189a:	70fb      	strb	r3, [r7, #3]

	if(buf[1] != HEADER_TYPE) return HANDLE_FAILED;
 802189c:	797b      	ldrb	r3, [r7, #5]
 802189e:	2b01      	cmp	r3, #1
 80218a0:	d001      	beq.n	80218a6 <Frame_ReadHeaderFrame+0x4e>
 80218a2:	2301      	movs	r3, #1
 80218a4:	e010      	b.n	80218c8 <Frame_ReadHeaderFrame+0x70>

	uint32_t crc_header = crc32((uint8_t*)(&buf[0] + 4), 4);
 80218a6:	1d3b      	adds	r3, r7, #4
 80218a8:	3304      	adds	r3, #4
 80218aa:	2104      	movs	r1, #4
 80218ac:	4618      	mov	r0, r3
 80218ae:	f7ff fb9d 	bl	8020fec <crc32>
 80218b2:	6178      	str	r0, [r7, #20]

	if(crc_header != crc_merge.DataUint32) return HANDLE_FAILED;
 80218b4:	683b      	ldr	r3, [r7, #0]
 80218b6:	697a      	ldr	r2, [r7, #20]
 80218b8:	429a      	cmp	r2, r3
 80218ba:	d001      	beq.n	80218c0 <Frame_ReadHeaderFrame+0x68>
 80218bc:	2301      	movs	r3, #1
 80218be:	e003      	b.n	80218c8 <Frame_ReadHeaderFrame+0x70>
	Frame_NumberOfKbyteData = buf[6]*256 + buf[7];
 80218c0:	7afa      	ldrb	r2, [r7, #11]
 80218c2:	4b04      	ldr	r3, [pc, #16]	; (80218d4 <Frame_ReadHeaderFrame+0x7c>)
 80218c4:	701a      	strb	r2, [r3, #0]

	return HANDLE_OK;
 80218c6:	2300      	movs	r3, #0
}
 80218c8:	4618      	mov	r0, r3
 80218ca:	3718      	adds	r7, #24
 80218cc:	46bd      	mov	sp, r7
 80218ce:	bd80      	pop	{r7, pc}
 80218d0:	20000464 	.word	0x20000464
 80218d4:	2000029c 	.word	0x2000029c

080218d8 <Frame_ReadDataFrame>:


defReturnType Frame_ReadDataFrame(uint8_t* data){
 80218d8:	b580      	push	{r7, lr}
 80218da:	b086      	sub	sp, #24
 80218dc:	af00      	add	r7, sp, #0
 80218de:	6078      	str	r0, [r7, #4]
	uint32To4Bytes crc_merge;
	uint8_t buf[4];
//	while(MY_UART.RxXferCount == 0);
	HAL_UART_Receive(&MY_UART, buf, 4, 1000);
 80218e0:	f107 010c 	add.w	r1, r7, #12
 80218e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80218e8:	2204      	movs	r2, #4
 80218ea:	4839      	ldr	r0, [pc, #228]	; (80219d0 <Frame_ReadDataFrame+0xf8>)
 80218ec:	f013 fa73 	bl	8034dd6 <HAL_UART_Receive>
	Frame_DataLenghtPerFrame = buf[2]*256 + buf[3];
 80218f0:	7bbb      	ldrb	r3, [r7, #14]
 80218f2:	b29b      	uxth	r3, r3
 80218f4:	021b      	lsls	r3, r3, #8
 80218f6:	b29a      	uxth	r2, r3
 80218f8:	7bfb      	ldrb	r3, [r7, #15]
 80218fa:	b29b      	uxth	r3, r3
 80218fc:	4413      	add	r3, r2
 80218fe:	b29a      	uxth	r2, r3
 8021900:	4b34      	ldr	r3, [pc, #208]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 8021902:	801a      	strh	r2, [r3, #0]

	HAL_UART_Receive(&MY_UART, data, Frame_DataLenghtPerFrame + 5, 3000);
 8021904:	4b33      	ldr	r3, [pc, #204]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 8021906:	881b      	ldrh	r3, [r3, #0]
 8021908:	3305      	adds	r3, #5
 802190a:	b29a      	uxth	r2, r3
 802190c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8021910:	6879      	ldr	r1, [r7, #4]
 8021912:	482f      	ldr	r0, [pc, #188]	; (80219d0 <Frame_ReadDataFrame+0xf8>)
 8021914:	f013 fa5f 	bl	8034dd6 <HAL_UART_Receive>

	if(!((buf[0] == SOF_SIGNAL)&&(data[Frame_DataLenghtPerFrame + 5 - 1] == EOF_SIGNAL))) {
 8021918:	7b3b      	ldrb	r3, [r7, #12]
 802191a:	2b00      	cmp	r3, #0
 802191c:	d107      	bne.n	802192e <Frame_ReadDataFrame+0x56>
 802191e:	4b2d      	ldr	r3, [pc, #180]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 8021920:	881b      	ldrh	r3, [r3, #0]
 8021922:	3304      	adds	r3, #4
 8021924:	687a      	ldr	r2, [r7, #4]
 8021926:	4413      	add	r3, r2
 8021928:	781b      	ldrb	r3, [r3, #0]
 802192a:	2b01      	cmp	r3, #1
 802192c:	d00a      	beq.n	8021944 <Frame_ReadDataFrame+0x6c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 802192e:	2201      	movs	r2, #1
 8021930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021934:	4828      	ldr	r0, [pc, #160]	; (80219d8 <Frame_ReadDataFrame+0x100>)
 8021936:	f011 fa27 	bl	8032d88 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 802193a:	20c8      	movs	r0, #200	; 0xc8
 802193c:	f010 fbe8 	bl	8032110 <HAL_Delay>
		return HANDLE_FAILED;
 8021940:	2301      	movs	r3, #1
 8021942:	e040      	b.n	80219c6 <Frame_ReadDataFrame+0xee>
	}

	if(buf[1] != DATA_TYPE){
 8021944:	7b7b      	ldrb	r3, [r7, #13]
 8021946:	2b02      	cmp	r3, #2
 8021948:	d00a      	beq.n	8021960 <Frame_ReadDataFrame+0x88>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 802194a:	2201      	movs	r2, #1
 802194c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021950:	4821      	ldr	r0, [pc, #132]	; (80219d8 <Frame_ReadDataFrame+0x100>)
 8021952:	f011 fa19 	bl	8032d88 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8021956:	20c8      	movs	r0, #200	; 0xc8
 8021958:	f010 fbda 	bl	8032110 <HAL_Delay>
		return HANDLE_FAILED;
 802195c:	2301      	movs	r3, #1
 802195e:	e032      	b.n	80219c6 <Frame_ReadDataFrame+0xee>
	}

	crc_merge.DataArray[0] = data[Frame_DataLenghtPerFrame + 5 - 2];
 8021960:	4b1c      	ldr	r3, [pc, #112]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 8021962:	881b      	ldrh	r3, [r3, #0]
 8021964:	3303      	adds	r3, #3
 8021966:	687a      	ldr	r2, [r7, #4]
 8021968:	4413      	add	r3, r2
 802196a:	781b      	ldrb	r3, [r3, #0]
 802196c:	743b      	strb	r3, [r7, #16]
	crc_merge.DataArray[1] = data[Frame_DataLenghtPerFrame + 5 - 3];
 802196e:	4b19      	ldr	r3, [pc, #100]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 8021970:	881b      	ldrh	r3, [r3, #0]
 8021972:	3302      	adds	r3, #2
 8021974:	687a      	ldr	r2, [r7, #4]
 8021976:	4413      	add	r3, r2
 8021978:	781b      	ldrb	r3, [r3, #0]
 802197a:	747b      	strb	r3, [r7, #17]
	crc_merge.DataArray[2] = data[Frame_DataLenghtPerFrame + 5 - 4];
 802197c:	4b15      	ldr	r3, [pc, #84]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 802197e:	881b      	ldrh	r3, [r3, #0]
 8021980:	3301      	adds	r3, #1
 8021982:	687a      	ldr	r2, [r7, #4]
 8021984:	4413      	add	r3, r2
 8021986:	781b      	ldrb	r3, [r3, #0]
 8021988:	74bb      	strb	r3, [r7, #18]
	crc_merge.DataArray[3] = data[Frame_DataLenghtPerFrame + 5 - 5];
 802198a:	4b12      	ldr	r3, [pc, #72]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 802198c:	881b      	ldrh	r3, [r3, #0]
 802198e:	461a      	mov	r2, r3
 8021990:	687b      	ldr	r3, [r7, #4]
 8021992:	4413      	add	r3, r2
 8021994:	781b      	ldrb	r3, [r3, #0]
 8021996:	74fb      	strb	r3, [r7, #19]

	uint32_t crc_data = crc32((uint8_t*)(&data[0]), Frame_DataLenghtPerFrame);
 8021998:	4b0e      	ldr	r3, [pc, #56]	; (80219d4 <Frame_ReadDataFrame+0xfc>)
 802199a:	881b      	ldrh	r3, [r3, #0]
 802199c:	4619      	mov	r1, r3
 802199e:	6878      	ldr	r0, [r7, #4]
 80219a0:	f7ff fb24 	bl	8020fec <crc32>
 80219a4:	6178      	str	r0, [r7, #20]

	if(crc_data != crc_merge.DataUint32){
 80219a6:	693b      	ldr	r3, [r7, #16]
 80219a8:	697a      	ldr	r2, [r7, #20]
 80219aa:	429a      	cmp	r2, r3
 80219ac:	d00a      	beq.n	80219c4 <Frame_ReadDataFrame+0xec>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80219ae:	2201      	movs	r2, #1
 80219b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219b4:	4808      	ldr	r0, [pc, #32]	; (80219d8 <Frame_ReadDataFrame+0x100>)
 80219b6:	f011 f9e7 	bl	8032d88 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80219ba:	20c8      	movs	r0, #200	; 0xc8
 80219bc:	f010 fba8 	bl	8032110 <HAL_Delay>
		return HANDLE_FAILED;
 80219c0:	2301      	movs	r3, #1
 80219c2:	e000      	b.n	80219c6 <Frame_ReadDataFrame+0xee>
	}

	return HANDLE_OK;
 80219c4:	2300      	movs	r3, #0
}
 80219c6:	4618      	mov	r0, r3
 80219c8:	3718      	adds	r7, #24
 80219ca:	46bd      	mov	sp, r7
 80219cc:	bd80      	pop	{r7, pc}
 80219ce:	bf00      	nop
 80219d0:	20000464 	.word	0x20000464
 80219d4:	2000029e 	.word	0x2000029e
 80219d8:	40020c00 	.word	0x40020c00

080219dc <Frame_InitFlash>:
	HAL_FLASH_Lock();
	return HANDLE_OK;
}


defReturnType Frame_InitFlash(uint8_t slot){
 80219dc:	b580      	push	{r7, lr}
 80219de:	b08a      	sub	sp, #40	; 0x28
 80219e0:	af00      	add	r7, sp, #0
 80219e2:	4603      	mov	r3, r0
 80219e4:	71fb      	strb	r3, [r7, #7]
	defReturnType ret;

	ret = HAL_FLASH_Unlock();
 80219e6:	f010 fdaf 	bl	8032548 <HAL_FLASH_Unlock>
 80219ea:	4603      	mov	r3, r0
 80219ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(ret != (uint8_t)HAL_OK){
 80219f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80219f4:	2b00      	cmp	r3, #0
 80219f6:	d001      	beq.n	80219fc <Frame_InitFlash+0x20>
		return HANDLE_FAILED;
 80219f8:	2301      	movs	r3, #1
 80219fa:	e028      	b.n	8021a4e <Frame_InitFlash+0x72>
	}

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 80219fc:	2300      	movs	r3, #0
 80219fe:	613b      	str	r3, [r7, #16]

	if(slot == 0x00){
 8021a00:	79fb      	ldrb	r3, [r7, #7]
 8021a02:	2b00      	cmp	r3, #0
 8021a04:	d102      	bne.n	8021a0c <Frame_InitFlash+0x30>
		EraseInitStruct.Sector        = FLASH_SECTOR_5;
 8021a06:	2305      	movs	r3, #5
 8021a08:	61bb      	str	r3, [r7, #24]
 8021a0a:	e00a      	b.n	8021a22 <Frame_InitFlash+0x46>
	}
	else if(slot == 0x01){
 8021a0c:	79fb      	ldrb	r3, [r7, #7]
 8021a0e:	2b01      	cmp	r3, #1
 8021a10:	d102      	bne.n	8021a18 <Frame_InitFlash+0x3c>
		EraseInitStruct.Sector        = FLASH_SECTOR_7;
 8021a12:	2307      	movs	r3, #7
 8021a14:	61bb      	str	r3, [r7, #24]
 8021a16:	e004      	b.n	8021a22 <Frame_InitFlash+0x46>
	}
	else if(slot == 0x02){
 8021a18:	79fb      	ldrb	r3, [r7, #7]
 8021a1a:	2b02      	cmp	r3, #2
 8021a1c:	d101      	bne.n	8021a22 <Frame_InitFlash+0x46>
		EraseInitStruct.Sector        = FLASH_SECTOR_9;
 8021a1e:	2309      	movs	r3, #9
 8021a20:	61bb      	str	r3, [r7, #24]
	}
	EraseInitStruct.NbSectors     = 2;           //erase 2 sectors
 8021a22:	2302      	movs	r3, #2
 8021a24:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8021a26:	2302      	movs	r3, #2
 8021a28:	623b      	str	r3, [r7, #32]

	ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8021a2a:	f107 020c 	add.w	r2, r7, #12
 8021a2e:	f107 0310 	add.w	r3, r7, #16
 8021a32:	4611      	mov	r1, r2
 8021a34:	4618      	mov	r0, r3
 8021a36:	f010 fee9 	bl	803280c <HAL_FLASHEx_Erase>
 8021a3a:	4603      	mov	r3, r0
 8021a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if( ret != (uint8_t)HAL_OK )
 8021a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021a44:	2b00      	cmp	r3, #0
 8021a46:	d001      	beq.n	8021a4c <Frame_InitFlash+0x70>
	{
		return HANDLE_FAILED;
 8021a48:	2301      	movs	r3, #1
 8021a4a:	e000      	b.n	8021a4e <Frame_InitFlash+0x72>
	}

	return HANDLE_OK;
 8021a4c:	2300      	movs	r3, #0
}
 8021a4e:	4618      	mov	r0, r3
 8021a50:	3728      	adds	r7, #40	; 0x28
 8021a52:	46bd      	mov	sp, r7
 8021a54:	bd80      	pop	{r7, pc}
	...

08021a58 <Frame_WriteCfg>:
	return (c11*16 + c22);
}



defReturnType Frame_WriteCfg(defFlashCfg *Flash_Cfg){//write to sector 11 in STM32F407
 8021a58:	b580      	push	{r7, lr}
 8021a5a:	b08a      	sub	sp, #40	; 0x28
 8021a5c:	af00      	add	r7, sp, #0
 8021a5e:	6078      	str	r0, [r7, #4]
	defReturnType ret;

	ret = HAL_FLASH_Unlock();
 8021a60:	f010 fd72 	bl	8032548 <HAL_FLASH_Unlock>
 8021a64:	4603      	mov	r3, r0
 8021a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(ret != (uint8_t)HAL_OK){
 8021a6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021a6e:	2b00      	cmp	r3, #0
 8021a70:	d001      	beq.n	8021a76 <Frame_WriteCfg+0x1e>
		return HANDLE_FAILED;
 8021a72:	2301      	movs	r3, #1
 8021a74:	e03a      	b.n	8021aec <Frame_WriteCfg+0x94>
	}

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError;

	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8021a76:	2300      	movs	r3, #0
 8021a78:	60fb      	str	r3, [r7, #12]

	EraseInitStruct.Sector        = FLASH_SECTOR_11;
 8021a7a:	230b      	movs	r3, #11
 8021a7c:	617b      	str	r3, [r7, #20]

	EraseInitStruct.NbSectors     = 1;           //erase 1 sectors
 8021a7e:	2301      	movs	r3, #1
 8021a80:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8021a82:	2302      	movs	r3, #2
 8021a84:	61fb      	str	r3, [r7, #28]

	ret = HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8021a86:	f107 0208 	add.w	r2, r7, #8
 8021a8a:	f107 030c 	add.w	r3, r7, #12
 8021a8e:	4611      	mov	r1, r2
 8021a90:	4618      	mov	r0, r3
 8021a92:	f010 febb 	bl	803280c <HAL_FLASHEx_Erase>
 8021a96:	4603      	mov	r3, r0
 8021a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if( ret != (uint8_t)HAL_OK )
 8021a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021aa0:	2b00      	cmp	r3, #0
 8021aa2:	d001      	beq.n	8021aa8 <Frame_WriteCfg+0x50>
	{
		return HANDLE_FAILED;
 8021aa4:	2301      	movs	r3, #1
 8021aa6:	e021      	b.n	8021aec <Frame_WriteCfg+0x94>
	}

	uint32_t baseaddr = 0x080E0000; //Sector 11 in STM32F407
 8021aa8:	4b12      	ldr	r3, [pc, #72]	; (8021af4 <Frame_WriteCfg+0x9c>)
 8021aaa:	623b      	str	r3, [r7, #32]

	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, baseaddr, Flash_Cfg->FlashOnGoing) != HAL_OK)
 8021aac:	687b      	ldr	r3, [r7, #4]
 8021aae:	781b      	ldrb	r3, [r3, #0]
 8021ab0:	b2da      	uxtb	r2, r3
 8021ab2:	f04f 0300 	mov.w	r3, #0
 8021ab6:	6a39      	ldr	r1, [r7, #32]
 8021ab8:	2000      	movs	r0, #0
 8021aba:	f010 fcf1 	bl	80324a0 <HAL_FLASH_Program>
 8021abe:	4603      	mov	r3, r0
 8021ac0:	2b00      	cmp	r3, #0
 8021ac2:	d001      	beq.n	8021ac8 <Frame_WriteCfg+0x70>
			return HANDLE_FAILED;
 8021ac4:	2301      	movs	r3, #1
 8021ac6:	e011      	b.n	8021aec <Frame_WriteCfg+0x94>
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, baseaddr + 1, Flash_Cfg->ResetCause) != HAL_OK)
 8021ac8:	6a3b      	ldr	r3, [r7, #32]
 8021aca:	1c59      	adds	r1, r3, #1
 8021acc:	687b      	ldr	r3, [r7, #4]
 8021ace:	785b      	ldrb	r3, [r3, #1]
 8021ad0:	b2da      	uxtb	r2, r3
 8021ad2:	f04f 0300 	mov.w	r3, #0
 8021ad6:	2000      	movs	r0, #0
 8021ad8:	f010 fce2 	bl	80324a0 <HAL_FLASH_Program>
 8021adc:	4603      	mov	r3, r0
 8021ade:	2b00      	cmp	r3, #0
 8021ae0:	d001      	beq.n	8021ae6 <Frame_WriteCfg+0x8e>
			return HANDLE_FAILED;
 8021ae2:	2301      	movs	r3, #1
 8021ae4:	e002      	b.n	8021aec <Frame_WriteCfg+0x94>

	HAL_FLASH_Lock();
 8021ae6:	f010 fd51 	bl	803258c <HAL_FLASH_Lock>
	return HANDLE_OK;
 8021aea:	2300      	movs	r3, #0
}
 8021aec:	4618      	mov	r0, r3
 8021aee:	3728      	adds	r7, #40	; 0x28
 8021af0:	46bd      	mov	sp, r7
 8021af2:	bd80      	pop	{r7, pc}
 8021af4:	080e0000 	.word	0x080e0000

08021af8 <Frame_ReadCfg>:


defReturnType Frame_ReadCfg(defFlashCfg* Cfg){//write to sector 4 in STM32F407
 8021af8:	b580      	push	{r7, lr}
 8021afa:	b086      	sub	sp, #24
 8021afc:	af00      	add	r7, sp, #0
 8021afe:	6078      	str	r0, [r7, #4]
	defReturnType ret;

	ret = HAL_FLASH_Unlock();
 8021b00:	f010 fd22 	bl	8032548 <HAL_FLASH_Unlock>
 8021b04:	4603      	mov	r3, r0
 8021b06:	75fb      	strb	r3, [r7, #23]
	if(ret != (uint8_t)HAL_OK){
 8021b08:	7dfb      	ldrb	r3, [r7, #23]
 8021b0a:	2b00      	cmp	r3, #0
 8021b0c:	d001      	beq.n	8021b12 <Frame_ReadCfg+0x1a>
		return HANDLE_FAILED;
 8021b0e:	2301      	movs	r3, #1
 8021b10:	e010      	b.n	8021b34 <Frame_ReadCfg+0x3c>
	}


	uint32_t baseaddr = 0x080E0000; //Sector 4 in STM32F407
 8021b12:	4b0a      	ldr	r3, [pc, #40]	; (8021b3c <Frame_ReadCfg+0x44>)
 8021b14:	613b      	str	r3, [r7, #16]

	uint32_t Rx_Buf = *(__IO uint32_t *)baseaddr;
 8021b16:	693b      	ldr	r3, [r7, #16]
 8021b18:	681b      	ldr	r3, [r3, #0]
 8021b1a:	60fb      	str	r3, [r7, #12]
	Cfg->FlashOnGoing = (uint8_t)((Rx_Buf)&0xFF);
 8021b1c:	68fb      	ldr	r3, [r7, #12]
 8021b1e:	b2da      	uxtb	r2, r3
 8021b20:	687b      	ldr	r3, [r7, #4]
 8021b22:	701a      	strb	r2, [r3, #0]
	Cfg->ResetCause = (uint8_t)(((Rx_Buf)>>8)&0xFF);
 8021b24:	68fb      	ldr	r3, [r7, #12]
 8021b26:	0a1b      	lsrs	r3, r3, #8
 8021b28:	b2da      	uxtb	r2, r3
 8021b2a:	687b      	ldr	r3, [r7, #4]
 8021b2c:	705a      	strb	r2, [r3, #1]

	HAL_FLASH_Lock();
 8021b2e:	f010 fd2d 	bl	803258c <HAL_FLASH_Lock>
	return HANDLE_OK;
 8021b32:	2300      	movs	r3, #0
}
 8021b34:	4618      	mov	r0, r3
 8021b36:	3718      	adds	r7, #24
 8021b38:	46bd      	mov	sp, r7
 8021b3a:	bd80      	pop	{r7, pc}
 8021b3c:	080e0000 	.word	0x080e0000

08021b40 <ota_and_write_to_sd_card>:

	HAL_FLASH_Lock();
	return HANDLE_OK;
}

HAL_StatusTypeDef ota_and_write_to_sd_card(FATFS *fatfs, FIL *myfile, const char *file_name, uint8_t mode){
 8021b40:	b590      	push	{r4, r7, lr}
 8021b42:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8021b46:	af00      	add	r7, sp, #0
 8021b48:	f107 040c 	add.w	r4, r7, #12
 8021b4c:	6020      	str	r0, [r4, #0]
 8021b4e:	f107 0008 	add.w	r0, r7, #8
 8021b52:	6001      	str	r1, [r0, #0]
 8021b54:	1d39      	adds	r1, r7, #4
 8021b56:	600a      	str	r2, [r1, #0]
 8021b58:	461a      	mov	r2, r3
 8021b5a:	1cfb      	adds	r3, r7, #3
 8021b5c:	701a      	strb	r2, [r3, #0]

	if(sd_init() == HAL_ERROR) return HAL_ERROR;
 8021b5e:	f7ff fd7d 	bl	802165c <sd_init>
 8021b62:	4603      	mov	r3, r0
 8021b64:	2b01      	cmp	r3, #1
 8021b66:	d101      	bne.n	8021b6c <ota_and_write_to_sd_card+0x2c>
 8021b68:	2301      	movs	r3, #1
 8021b6a:	e0b7      	b.n	8021cdc <ota_and_write_to_sd_card+0x19c>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8021b6c:	2201      	movs	r2, #1
 8021b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8021b72:	485d      	ldr	r0, [pc, #372]	; (8021ce8 <ota_and_write_to_sd_card+0x1a8>)
 8021b74:	f011 f908 	bl	8032d88 <HAL_GPIO_WritePin>
	if(sd_mount(fatfs) != FR_OK) return HAL_ERROR;
 8021b78:	f107 030c 	add.w	r3, r7, #12
 8021b7c:	6818      	ldr	r0, [r3, #0]
 8021b7e:	f7ff fd79 	bl	8021674 <sd_mount>
 8021b82:	4603      	mov	r3, r0
 8021b84:	2b00      	cmp	r3, #0
 8021b86:	d001      	beq.n	8021b8c <ota_and_write_to_sd_card+0x4c>
 8021b88:	2301      	movs	r3, #1
 8021b8a:	e0a7      	b.n	8021cdc <ota_and_write_to_sd_card+0x19c>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8021b8c:	2201      	movs	r2, #1
 8021b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021b92:	4855      	ldr	r0, [pc, #340]	; (8021ce8 <ota_and_write_to_sd_card+0x1a8>)
 8021b94:	f011 f8f8 	bl	8032d88 <HAL_GPIO_WritePin>
	if(sd_open(myfile, file_name, FA_WRITE|FA_CREATE_ALWAYS) != FR_OK) return HAL_ERROR;
 8021b98:	1d39      	adds	r1, r7, #4
 8021b9a:	f107 0308 	add.w	r3, r7, #8
 8021b9e:	220a      	movs	r2, #10
 8021ba0:	6809      	ldr	r1, [r1, #0]
 8021ba2:	6818      	ldr	r0, [r3, #0]
 8021ba4:	f7ff fd76 	bl	8021694 <sd_open>
 8021ba8:	4603      	mov	r3, r0
 8021baa:	2b00      	cmp	r3, #0
 8021bac:	d001      	beq.n	8021bb2 <ota_and_write_to_sd_card+0x72>
 8021bae:	2301      	movs	r3, #1
 8021bb0:	e094      	b.n	8021cdc <ota_and_write_to_sd_card+0x19c>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8021bb2:	2201      	movs	r2, #1
 8021bb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021bb8:	484b      	ldr	r0, [pc, #300]	; (8021ce8 <ota_and_write_to_sd_card+0x1a8>)
 8021bba:	f011 f8e5 	bl	8032d88 <HAL_GPIO_WritePin>


	Frame_SendResponseFrame(RESPONSE_ACK);
 8021bbe:	2000      	movs	r0, #0
 8021bc0:	f7ff fdac 	bl	802171c <Frame_SendResponseFrame>

	if(Frame_ReadStartFrame() == HANDLE_OK){
 8021bc4:	f7ff fe04 	bl	80217d0 <Frame_ReadStartFrame>
 8021bc8:	4603      	mov	r3, r0
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d108      	bne.n	8021be0 <ota_and_write_to_sd_card+0xa0>
		Frame_SendResponseFrame(RESPONSE_ACK);
 8021bce:	2000      	movs	r0, #0
 8021bd0:	f7ff fda4 	bl	802171c <Frame_SendResponseFrame>
		Frame_SendResponseFrame(RESPONSE_NACK);
		Frame_ReadStopFrame();
		return HAL_ERROR;
	}

	if(Frame_ReadHeaderFrame() == HANDLE_OK){
 8021bd4:	f7ff fe40 	bl	8021858 <Frame_ReadHeaderFrame>
 8021bd8:	4603      	mov	r3, r0
 8021bda:	2b00      	cmp	r3, #0
 8021bdc:	d10e      	bne.n	8021bfc <ota_and_write_to_sd_card+0xbc>
 8021bde:	e006      	b.n	8021bee <ota_and_write_to_sd_card+0xae>
		Frame_SendResponseFrame(RESPONSE_NACK);
 8021be0:	2001      	movs	r0, #1
 8021be2:	f7ff fd9b 	bl	802171c <Frame_SendResponseFrame>
		Frame_ReadStopFrame();
 8021be6:	f7ff fe1d 	bl	8021824 <Frame_ReadStopFrame>
		return HAL_ERROR;
 8021bea:	2301      	movs	r3, #1
 8021bec:	e076      	b.n	8021cdc <ota_and_write_to_sd_card+0x19c>
		Frame_SendResponseFrame(RESPONSE_ACK);
 8021bee:	2000      	movs	r0, #0
 8021bf0:	f7ff fd94 	bl	802171c <Frame_SendResponseFrame>
		Frame_SendResponseFrame(RESPONSE_NACK);
		Frame_ReadStopFrame();
		return HAL_ERROR;
	}

	for(uint16_t NoFrame = 0; NoFrame < Frame_NumberOfKbyteData; NoFrame ++){
 8021bf4:	2300      	movs	r3, #0
 8021bf6:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
 8021bfa:	e05f      	b.n	8021cbc <ota_and_write_to_sd_card+0x17c>
		Frame_SendResponseFrame(RESPONSE_NACK);
 8021bfc:	2001      	movs	r0, #1
 8021bfe:	f7ff fd8d 	bl	802171c <Frame_SendResponseFrame>
		Frame_ReadStopFrame();
 8021c02:	f7ff fe0f 	bl	8021824 <Frame_ReadStopFrame>
		return HAL_ERROR;
 8021c06:	2301      	movs	r3, #1
 8021c08:	e068      	b.n	8021cdc <ota_and_write_to_sd_card+0x19c>
		uint8_t bufOTA[DATA_FRAME_LENGHT - 4];
		uint8_t flag = 0x00;
 8021c0a:	2300      	movs	r3, #0
 8021c0c:	f887 3415 	strb.w	r3, [r7, #1045]	; 0x415
		__HAL_TIM_SET_COUNTER(&htim1,0);
 8021c10:	4b36      	ldr	r3, [pc, #216]	; (8021cec <ota_and_write_to_sd_card+0x1ac>)
 8021c12:	681b      	ldr	r3, [r3, #0]
 8021c14:	2200      	movs	r2, #0
 8021c16:	625a      	str	r2, [r3, #36]	; 0x24
		while(__HAL_TIM_GET_COUNTER(&htim1) < 10000){
 8021c18:	bf00      	nop
 8021c1a:	4b34      	ldr	r3, [pc, #208]	; (8021cec <ota_and_write_to_sd_card+0x1ac>)
 8021c1c:	681b      	ldr	r3, [r3, #0]
 8021c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021c20:	f242 720f 	movw	r2, #9999	; 0x270f
 8021c24:	4293      	cmp	r3, r2
 8021c26:	d831      	bhi.n	8021c8c <ota_and_write_to_sd_card+0x14c>
			if(Frame_ReadDataFrame(bufOTA) == HANDLE_OK){
 8021c28:	f107 0310 	add.w	r3, r7, #16
 8021c2c:	4618      	mov	r0, r3
 8021c2e:	f7ff fe53 	bl	80218d8 <Frame_ReadDataFrame>
 8021c32:	4603      	mov	r3, r0
 8021c34:	2b00      	cmp	r3, #0
 8021c36:	d128      	bne.n	8021c8a <ota_and_write_to_sd_card+0x14a>
				if(sd_write(myfile, bufOTA, Frame_DataLenghtPerFrame)!=Frame_DataLenghtPerFrame){
 8021c38:	4b2d      	ldr	r3, [pc, #180]	; (8021cf0 <ota_and_write_to_sd_card+0x1b0>)
 8021c3a:	881a      	ldrh	r2, [r3, #0]
 8021c3c:	f107 0110 	add.w	r1, r7, #16
 8021c40:	f107 0308 	add.w	r3, r7, #8
 8021c44:	6818      	ldr	r0, [r3, #0]
 8021c46:	f7ff fd37 	bl	80216b8 <sd_write>
 8021c4a:	4603      	mov	r3, r0
 8021c4c:	4a28      	ldr	r2, [pc, #160]	; (8021cf0 <ota_and_write_to_sd_card+0x1b0>)
 8021c4e:	8812      	ldrh	r2, [r2, #0]
 8021c50:	4293      	cmp	r3, r2
 8021c52:	d003      	beq.n	8021c5c <ota_and_write_to_sd_card+0x11c>
//					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
					HAL_Delay(500);
 8021c54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8021c58:	f010 fa5a 	bl	8032110 <HAL_Delay>
				}
//				Frame_WriteFlashToSlot(FLASH_SLOT_0,(uint8_t*)bufOTA, Frame_DataLenghtPerFrame);
				Frame_FlashAddUntillNow += Frame_DataLenghtPerFrame;
 8021c5c:	4b25      	ldr	r3, [pc, #148]	; (8021cf4 <ota_and_write_to_sd_card+0x1b4>)
 8021c5e:	881a      	ldrh	r2, [r3, #0]
 8021c60:	4b23      	ldr	r3, [pc, #140]	; (8021cf0 <ota_and_write_to_sd_card+0x1b0>)
 8021c62:	881b      	ldrh	r3, [r3, #0]
 8021c64:	4413      	add	r3, r2
 8021c66:	b29a      	uxth	r2, r3
 8021c68:	4b22      	ldr	r3, [pc, #136]	; (8021cf4 <ota_and_write_to_sd_card+0x1b4>)
 8021c6a:	801a      	strh	r2, [r3, #0]
				Frame_TotalSize += Frame_DataLenghtPerFrame;
 8021c6c:	4b20      	ldr	r3, [pc, #128]	; (8021cf0 <ota_and_write_to_sd_card+0x1b0>)
 8021c6e:	881b      	ldrh	r3, [r3, #0]
 8021c70:	461a      	mov	r2, r3
 8021c72:	4b21      	ldr	r3, [pc, #132]	; (8021cf8 <ota_and_write_to_sd_card+0x1b8>)
 8021c74:	681b      	ldr	r3, [r3, #0]
 8021c76:	4413      	add	r3, r2
 8021c78:	4a1f      	ldr	r2, [pc, #124]	; (8021cf8 <ota_and_write_to_sd_card+0x1b8>)
 8021c7a:	6013      	str	r3, [r2, #0]
				Frame_SendResponseFrame(RESPONSE_ACK);
 8021c7c:	2000      	movs	r0, #0
 8021c7e:	f7ff fd4d 	bl	802171c <Frame_SendResponseFrame>
				flag = 0x01;
 8021c82:	2301      	movs	r3, #1
 8021c84:	f887 3415 	strb.w	r3, [r7, #1045]	; 0x415
				break;
 8021c88:	e000      	b.n	8021c8c <ota_and_write_to_sd_card+0x14c>
			}
			else{
				break;
 8021c8a:	bf00      	nop
			}
		}
		if(flag == 0x00){
 8021c8c:	f897 3415 	ldrb.w	r3, [r7, #1045]	; 0x415
 8021c90:	2b00      	cmp	r3, #0
 8021c92:	d106      	bne.n	8021ca2 <ota_and_write_to_sd_card+0x162>
			Frame_SendResponseFrame(RESPONSE_NACK);
 8021c94:	2001      	movs	r0, #1
 8021c96:	f7ff fd41 	bl	802171c <Frame_SendResponseFrame>
			Frame_ReadStopFrame();
 8021c9a:	f7ff fdc3 	bl	8021824 <Frame_ReadStopFrame>
			return HAL_ERROR;
 8021c9e:	2301      	movs	r3, #1
 8021ca0:	e01c      	b.n	8021cdc <ota_and_write_to_sd_card+0x19c>
		}
		memset(bufOTA, 0, DATA_FRAME_LENGHT - 4);
 8021ca2:	f107 0310 	add.w	r3, r7, #16
 8021ca6:	f240 4205 	movw	r2, #1029	; 0x405
 8021caa:	2100      	movs	r1, #0
 8021cac:	4618      	mov	r0, r3
 8021cae:	f017 fc1f 	bl	80394f0 <memset>
	for(uint16_t NoFrame = 0; NoFrame < Frame_NumberOfKbyteData; NoFrame ++){
 8021cb2:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	; 0x416
 8021cb6:	3301      	adds	r3, #1
 8021cb8:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
 8021cbc:	4b0f      	ldr	r3, [pc, #60]	; (8021cfc <ota_and_write_to_sd_card+0x1bc>)
 8021cbe:	781b      	ldrb	r3, [r3, #0]
 8021cc0:	b29b      	uxth	r3, r3
 8021cc2:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	; 0x416
 8021cc6:	429a      	cmp	r2, r3
 8021cc8:	d39f      	bcc.n	8021c0a <ota_and_write_to_sd_card+0xca>
	}
	Frame_FlashAddUntillNow = 0;
 8021cca:	4b0a      	ldr	r3, [pc, #40]	; (8021cf4 <ota_and_write_to_sd_card+0x1b4>)
 8021ccc:	2200      	movs	r2, #0
 8021cce:	801a      	strh	r2, [r3, #0]
//	HAL_FLASH_Lock();
	sd_close(myfile);
 8021cd0:	f107 0308 	add.w	r3, r7, #8
 8021cd4:	6818      	ldr	r0, [r3, #0]
 8021cd6:	f7ff fd16 	bl	8021706 <sd_close>
	return HAL_OK;
 8021cda:	2300      	movs	r3, #0
}
 8021cdc:	4618      	mov	r0, r3
 8021cde:	f207 471c 	addw	r7, r7, #1052	; 0x41c
 8021ce2:	46bd      	mov	sp, r7
 8021ce4:	bd90      	pop	{r4, r7, pc}
 8021ce6:	bf00      	nop
 8021ce8:	40020c00 	.word	0x40020c00
 8021cec:	20000398 	.word	0x20000398
 8021cf0:	2000029e 	.word	0x2000029e
 8021cf4:	200002a0 	.word	0x200002a0
 8021cf8:	200002a4 	.word	0x200002a4
 8021cfc:	2000029c 	.word	0x2000029c

08021d00 <store_into_flash>:


void store_into_flash(uint8_t* buffer, uint32_t address, uint16_t size){
 8021d00:	b580      	push	{r7, lr}
 8021d02:	b086      	sub	sp, #24
 8021d04:	af00      	add	r7, sp, #0
 8021d06:	60f8      	str	r0, [r7, #12]
 8021d08:	60b9      	str	r1, [r7, #8]
 8021d0a:	4613      	mov	r3, r2
 8021d0c:	80fb      	strh	r3, [r7, #6]
	for(uint16_t s = 0; s < size; s++){
 8021d0e:	2300      	movs	r3, #0
 8021d10:	82fb      	strh	r3, [r7, #22]
 8021d12:	e011      	b.n	8021d38 <store_into_flash+0x38>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address, *(buffer));
 8021d14:	68fb      	ldr	r3, [r7, #12]
 8021d16:	781b      	ldrb	r3, [r3, #0]
 8021d18:	b2da      	uxtb	r2, r3
 8021d1a:	f04f 0300 	mov.w	r3, #0
 8021d1e:	68b9      	ldr	r1, [r7, #8]
 8021d20:	2000      	movs	r0, #0
 8021d22:	f010 fbbd 	bl	80324a0 <HAL_FLASH_Program>
		address++;
 8021d26:	68bb      	ldr	r3, [r7, #8]
 8021d28:	3301      	adds	r3, #1
 8021d2a:	60bb      	str	r3, [r7, #8]
		buffer++;
 8021d2c:	68fb      	ldr	r3, [r7, #12]
 8021d2e:	3301      	adds	r3, #1
 8021d30:	60fb      	str	r3, [r7, #12]
	for(uint16_t s = 0; s < size; s++){
 8021d32:	8afb      	ldrh	r3, [r7, #22]
 8021d34:	3301      	adds	r3, #1
 8021d36:	82fb      	strh	r3, [r7, #22]
 8021d38:	8afa      	ldrh	r2, [r7, #22]
 8021d3a:	88fb      	ldrh	r3, [r7, #6]
 8021d3c:	429a      	cmp	r2, r3
 8021d3e:	d3e9      	bcc.n	8021d14 <store_into_flash+0x14>
	}
}
 8021d40:	bf00      	nop
 8021d42:	bf00      	nop
 8021d44:	3718      	adds	r7, #24
 8021d46:	46bd      	mov	sp, r7
 8021d48:	bd80      	pop	{r7, pc}
	...

08021d4c <read_file_and_store_into_flash>:
//	  sd_write(myfile, "NGUYEN VAN NHI");
//	  sd_write(myfile, bufff);
//	  sd_close(myfile);
}

uint32_t read_file_and_store_into_flash(FATFS *fatfs, FIL *myfile, const char *file_name, uint8_t mode, defFlashSlot slot, uint8_t *signature, uint8_t *publickey, uint8_t *hashvalue){
 8021d4c:	b590      	push	{r4, r7, lr}
 8021d4e:	f6ad 0d2c 	subw	sp, sp, #2092	; 0x82c
 8021d52:	af02      	add	r7, sp, #8
 8021d54:	f107 040c 	add.w	r4, r7, #12
 8021d58:	6020      	str	r0, [r4, #0]
 8021d5a:	f107 0008 	add.w	r0, r7, #8
 8021d5e:	6001      	str	r1, [r0, #0]
 8021d60:	1d39      	adds	r1, r7, #4
 8021d62:	600a      	str	r2, [r1, #0]
 8021d64:	461a      	mov	r2, r3
 8021d66:	1cfb      	adds	r3, r7, #3
 8021d68:	701a      	strb	r2, [r3, #0]

	uint32_t BaseAddress;
	if(sd_init() == HAL_ERROR) return HAL_ERROR;
 8021d6a:	f7ff fc77 	bl	802165c <sd_init>
 8021d6e:	4603      	mov	r3, r0
 8021d70:	2b01      	cmp	r3, #1
 8021d72:	d101      	bne.n	8021d78 <read_file_and_store_into_flash+0x2c>
 8021d74:	2301      	movs	r3, #1
 8021d76:	e139      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 8021d78:	2201      	movs	r2, #1
 8021d7a:	2101      	movs	r1, #1
 8021d7c:	489e      	ldr	r0, [pc, #632]	; (8021ff8 <read_file_and_store_into_flash+0x2ac>)
 8021d7e:	f011 f803 	bl	8032d88 <HAL_GPIO_WritePin>
	if(sd_mount(fatfs) != FR_OK) return HAL_ERROR;
 8021d82:	f107 030c 	add.w	r3, r7, #12
 8021d86:	6818      	ldr	r0, [r3, #0]
 8021d88:	f7ff fc74 	bl	8021674 <sd_mount>
 8021d8c:	4603      	mov	r3, r0
 8021d8e:	2b00      	cmp	r3, #0
 8021d90:	d001      	beq.n	8021d96 <read_file_and_store_into_flash+0x4a>
 8021d92:	2301      	movs	r3, #1
 8021d94:	e12a      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8021d96:	2201      	movs	r2, #1
 8021d98:	2102      	movs	r1, #2
 8021d9a:	4897      	ldr	r0, [pc, #604]	; (8021ff8 <read_file_and_store_into_flash+0x2ac>)
 8021d9c:	f010 fff4 	bl	8032d88 <HAL_GPIO_WritePin>
	if(sd_open(myfile, file_name, mode) != FR_OK) return HAL_ERROR;
 8021da0:	1cfb      	adds	r3, r7, #3
 8021da2:	781a      	ldrb	r2, [r3, #0]
 8021da4:	1d39      	adds	r1, r7, #4
 8021da6:	f107 0308 	add.w	r3, r7, #8
 8021daa:	6809      	ldr	r1, [r1, #0]
 8021dac:	6818      	ldr	r0, [r3, #0]
 8021dae:	f7ff fc71 	bl	8021694 <sd_open>
 8021db2:	4603      	mov	r3, r0
 8021db4:	2b00      	cmp	r3, #0
 8021db6:	d001      	beq.n	8021dbc <read_file_and_store_into_flash+0x70>
 8021db8:	2301      	movs	r3, #1
 8021dba:	e117      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8021dbc:	2201      	movs	r2, #1
 8021dbe:	2104      	movs	r1, #4
 8021dc0:	488d      	ldr	r0, [pc, #564]	; (8021ff8 <read_file_and_store_into_flash+0x2ac>)
 8021dc2:	f010 ffe1 	bl	8032d88 <HAL_GPIO_WritePin>
	uint32_t size_file = f_size(myfile) - 160;
 8021dc6:	f107 0308 	add.w	r3, r7, #8
 8021dca:	681b      	ldr	r3, [r3, #0]
 8021dcc:	68db      	ldr	r3, [r3, #12]
 8021dce:	3ba0      	subs	r3, #160	; 0xa0
 8021dd0:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814

	if(Frame_InitFlash(slot) != HANDLE_OK) return HAL_ERROR;
 8021dd4:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 8021dd8:	4618      	mov	r0, r3
 8021dda:	f7ff fdff 	bl	80219dc <Frame_InitFlash>
 8021dde:	4603      	mov	r3, r0
 8021de0:	2b00      	cmp	r3, #0
 8021de2:	d001      	beq.n	8021de8 <read_file_and_store_into_flash+0x9c>
 8021de4:	2301      	movs	r3, #1
 8021de6:	e101      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8021de8:	2201      	movs	r2, #1
 8021dea:	2108      	movs	r1, #8
 8021dec:	4882      	ldr	r0, [pc, #520]	; (8021ff8 <read_file_and_store_into_flash+0x2ac>)
 8021dee:	f010 ffcb 	bl	8032d88 <HAL_GPIO_WritePin>

	if(slot == FLASH_SLOT_0) BaseAddress = FLASH_SLOT_0_ADD;
 8021df2:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 8021df6:	2b00      	cmp	r3, #0
 8021df8:	d103      	bne.n	8021e02 <read_file_and_store_into_flash+0xb6>
 8021dfa:	4b80      	ldr	r3, [pc, #512]	; (8021ffc <read_file_and_store_into_flash+0x2b0>)
 8021dfc:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8021e00:	e00e      	b.n	8021e20 <read_file_and_store_into_flash+0xd4>
	else if(slot == FLASH_SLOT_1) BaseAddress = FLASH_SLOT_1_ADD;
 8021e02:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 8021e06:	2b01      	cmp	r3, #1
 8021e08:	d103      	bne.n	8021e12 <read_file_and_store_into_flash+0xc6>
 8021e0a:	4b7d      	ldr	r3, [pc, #500]	; (8022000 <read_file_and_store_into_flash+0x2b4>)
 8021e0c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8021e10:	e006      	b.n	8021e20 <read_file_and_store_into_flash+0xd4>
	else if(slot == FLASH_SLOT_2) BaseAddress = FLASH_SLOT_2_ADD;
 8021e12:	f897 3830 	ldrb.w	r3, [r7, #2096]	; 0x830
 8021e16:	2b02      	cmp	r3, #2
 8021e18:	d102      	bne.n	8021e20 <read_file_and_store_into_flash+0xd4>
 8021e1a:	4b7a      	ldr	r3, [pc, #488]	; (8022004 <read_file_and_store_into_flash+0x2b8>)
 8021e1c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
	else{}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8021e20:	2201      	movs	r2, #1
 8021e22:	2110      	movs	r1, #16
 8021e24:	4874      	ldr	r0, [pc, #464]	; (8021ff8 <read_file_and_store_into_flash+0x2ac>)
 8021e26:	f010 ffaf 	bl	8032d88 <HAL_GPIO_WritePin>
	uint16_t round = size_file/1024; round += (size_file%1024 != 0)?1:0;
 8021e2a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8021e2e:	0a9b      	lsrs	r3, r3, #10
 8021e30:	f8a7 3812 	strh.w	r3, [r7, #2066]	; 0x812
 8021e34:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8021e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8021e3c:	2b00      	cmp	r3, #0
 8021e3e:	bf14      	ite	ne
 8021e40:	2301      	movne	r3, #1
 8021e42:	2300      	moveq	r3, #0
 8021e44:	b2db      	uxtb	r3, r3
 8021e46:	b29a      	uxth	r2, r3
 8021e48:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 8021e4c:	4413      	add	r3, r2
 8021e4e:	f8a7 3812 	strh.w	r3, [r7, #2066]	; 0x812

	uint8_t buffer_cipher[1024] = {0,};
 8021e52:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8021e56:	2200      	movs	r2, #0
 8021e58:	601a      	str	r2, [r3, #0]
 8021e5a:	3304      	adds	r3, #4
 8021e5c:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8021e60:	2100      	movs	r1, #0
 8021e62:	4618      	mov	r0, r3
 8021e64:	f017 fb44 	bl	80394f0 <memset>
	uint8_t buffer_plaintext[1024] = {0,};
 8021e68:	f107 0310 	add.w	r3, r7, #16
 8021e6c:	2200      	movs	r2, #0
 8021e6e:	601a      	str	r2, [r3, #0]
 8021e70:	3304      	adds	r3, #4
 8021e72:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8021e76:	2100      	movs	r1, #0
 8021e78:	4618      	mov	r0, r3
 8021e7a:	f017 fb39 	bl	80394f0 <memset>

	if(sd_read(myfile, signature, 64) != 64) return HAL_ERROR;
 8021e7e:	f107 0308 	add.w	r3, r7, #8
 8021e82:	2240      	movs	r2, #64	; 0x40
 8021e84:	f8d7 1834 	ldr.w	r1, [r7, #2100]	; 0x834
 8021e88:	6818      	ldr	r0, [r3, #0]
 8021e8a:	f7ff fc28 	bl	80216de <sd_read>
 8021e8e:	4603      	mov	r3, r0
 8021e90:	2b40      	cmp	r3, #64	; 0x40
 8021e92:	d001      	beq.n	8021e98 <read_file_and_store_into_flash+0x14c>
 8021e94:	2301      	movs	r3, #1
 8021e96:	e0a9      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
	if(sd_read(myfile, publickey, 32) != 32) return HAL_ERROR;
 8021e98:	f107 0308 	add.w	r3, r7, #8
 8021e9c:	2220      	movs	r2, #32
 8021e9e:	f8d7 1838 	ldr.w	r1, [r7, #2104]	; 0x838
 8021ea2:	6818      	ldr	r0, [r3, #0]
 8021ea4:	f7ff fc1b 	bl	80216de <sd_read>
 8021ea8:	4603      	mov	r3, r0
 8021eaa:	2b20      	cmp	r3, #32
 8021eac:	d001      	beq.n	8021eb2 <read_file_and_store_into_flash+0x166>
 8021eae:	2301      	movs	r3, #1
 8021eb0:	e09c      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
	if(sd_read(myfile, hashvalue, 64) != 64) return HAL_ERROR;
 8021eb2:	f107 0308 	add.w	r3, r7, #8
 8021eb6:	2240      	movs	r2, #64	; 0x40
 8021eb8:	f8d7 183c 	ldr.w	r1, [r7, #2108]	; 0x83c
 8021ebc:	6818      	ldr	r0, [r3, #0]
 8021ebe:	f7ff fc0e 	bl	80216de <sd_read>
 8021ec2:	4603      	mov	r3, r0
 8021ec4:	2b40      	cmp	r3, #64	; 0x40
 8021ec6:	d001      	beq.n	8021ecc <read_file_and_store_into_flash+0x180>
 8021ec8:	2301      	movs	r3, #1
 8021eca:	e08f      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>

	for(uint16_t r = 0; r < round - 1; r++){
 8021ecc:	2300      	movs	r3, #0
 8021ece:	f8a7 381a 	strh.w	r3, [r7, #2074]	; 0x81a
 8021ed2:	e03c      	b.n	8021f4e <read_file_and_store_into_flash+0x202>
		if(sd_read(myfile, buffer_cipher, 1024) != 1024) return HAL_ERROR;
 8021ed4:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8021ed8:	f107 0308 	add.w	r3, r7, #8
 8021edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021ee0:	6818      	ldr	r0, [r3, #0]
 8021ee2:	f7ff fbfc 	bl	80216de <sd_read>
 8021ee6:	4603      	mov	r3, r0
 8021ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021eec:	d001      	beq.n	8021ef2 <read_file_and_store_into_flash+0x1a6>
 8021eee:	2301      	movs	r3, #1
 8021ef0:	e07c      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
		Chacha20_Xor(Gb_scKeyStream, Gb_sulCell, buffer_cipher, 1024, buffer_plaintext);
 8021ef2:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8021ef6:	f107 0310 	add.w	r3, r7, #16
 8021efa:	9300      	str	r3, [sp, #0]
 8021efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021f00:	4941      	ldr	r1, [pc, #260]	; (8022008 <read_file_and_store_into_flash+0x2bc>)
 8021f02:	4842      	ldr	r0, [pc, #264]	; (802200c <read_file_and_store_into_flash+0x2c0>)
 8021f04:	f7ff f8b4 	bl	8021070 <Chacha20_Xor>
		store_into_flash(buffer_plaintext, BaseAddress + r*1024, 1024);
 8021f08:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	; 0x81a
 8021f0c:	029b      	lsls	r3, r3, #10
 8021f0e:	461a      	mov	r2, r3
 8021f10:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8021f14:	18d1      	adds	r1, r2, r3
 8021f16:	f107 0310 	add.w	r3, r7, #16
 8021f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021f1e:	4618      	mov	r0, r3
 8021f20:	f7ff feee 	bl	8021d00 <store_into_flash>
		memset(buffer_cipher,0,1024);
 8021f24:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8021f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021f2c:	2100      	movs	r1, #0
 8021f2e:	4618      	mov	r0, r3
 8021f30:	f017 fade 	bl	80394f0 <memset>
		memset(buffer_plaintext,0,1024);
 8021f34:	f107 0310 	add.w	r3, r7, #16
 8021f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8021f3c:	2100      	movs	r1, #0
 8021f3e:	4618      	mov	r0, r3
 8021f40:	f017 fad6 	bl	80394f0 <memset>
	for(uint16_t r = 0; r < round - 1; r++){
 8021f44:	f8b7 381a 	ldrh.w	r3, [r7, #2074]	; 0x81a
 8021f48:	3301      	adds	r3, #1
 8021f4a:	f8a7 381a 	strh.w	r3, [r7, #2074]	; 0x81a
 8021f4e:	f8b7 281a 	ldrh.w	r2, [r7, #2074]	; 0x81a
 8021f52:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 8021f56:	3b01      	subs	r3, #1
 8021f58:	429a      	cmp	r2, r3
 8021f5a:	dbbb      	blt.n	8021ed4 <read_file_and_store_into_flash+0x188>
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8021f5c:	2201      	movs	r2, #1
 8021f5e:	2120      	movs	r1, #32
 8021f60:	4825      	ldr	r0, [pc, #148]	; (8021ff8 <read_file_and_store_into_flash+0x2ac>)
 8021f62:	f010 ff11 	bl	8032d88 <HAL_GPIO_WritePin>

	if(sd_read(myfile, buffer_cipher, size_file%1024) != size_file%1024) return HAL_ERROR;
 8021f66:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8021f6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8021f6e:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8021f72:	f107 0308 	add.w	r3, r7, #8
 8021f76:	6818      	ldr	r0, [r3, #0]
 8021f78:	f7ff fbb1 	bl	80216de <sd_read>
 8021f7c:	4602      	mov	r2, r0
 8021f7e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8021f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8021f86:	429a      	cmp	r2, r3
 8021f88:	d001      	beq.n	8021f8e <read_file_and_store_into_flash+0x242>
 8021f8a:	2301      	movs	r3, #1
 8021f8c:	e02e      	b.n	8021fec <read_file_and_store_into_flash+0x2a0>
	Chacha20_Xor(Gb_scKeyStream, Gb_sulCell, buffer_cipher, size_file%1024, buffer_plaintext);
 8021f8e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8021f92:	f3c3 0109 	ubfx	r1, r3, #0, #10
 8021f96:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8021f9a:	f107 0310 	add.w	r3, r7, #16
 8021f9e:	9300      	str	r3, [sp, #0]
 8021fa0:	460b      	mov	r3, r1
 8021fa2:	4919      	ldr	r1, [pc, #100]	; (8022008 <read_file_and_store_into_flash+0x2bc>)
 8021fa4:	4819      	ldr	r0, [pc, #100]	; (802200c <read_file_and_store_into_flash+0x2c0>)
 8021fa6:	f7ff f863 	bl	8021070 <Chacha20_Xor>
	store_into_flash(buffer_plaintext, BaseAddress + (round - 1)*1024, size_file%1024);
 8021faa:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 8021fae:	3b01      	subs	r3, #1
 8021fb0:	029b      	lsls	r3, r3, #10
 8021fb2:	461a      	mov	r2, r3
 8021fb4:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8021fb8:	18d1      	adds	r1, r2, r3
 8021fba:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8021fbe:	b29b      	uxth	r3, r3
 8021fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8021fc4:	b29a      	uxth	r2, r3
 8021fc6:	f107 0310 	add.w	r3, r7, #16
 8021fca:	4618      	mov	r0, r3
 8021fcc:	f7ff fe98 	bl	8021d00 <store_into_flash>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8021fd0:	2201      	movs	r2, #1
 8021fd2:	2180      	movs	r1, #128	; 0x80
 8021fd4:	4808      	ldr	r0, [pc, #32]	; (8021ff8 <read_file_and_store_into_flash+0x2ac>)
 8021fd6:	f010 fed7 	bl	8032d88 <HAL_GPIO_WritePin>

	sd_close(myfile);
 8021fda:	f107 0308 	add.w	r3, r7, #8
 8021fde:	6818      	ldr	r0, [r3, #0]
 8021fe0:	f7ff fb91 	bl	8021706 <sd_close>
	HAL_FLASH_Lock();
 8021fe4:	f010 fad2 	bl	803258c <HAL_FLASH_Lock>

	return size_file;
 8021fe8:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
}
 8021fec:	4618      	mov	r0, r3
 8021fee:	f607 0724 	addw	r7, r7, #2084	; 0x824
 8021ff2:	46bd      	mov	sp, r7
 8021ff4:	bd90      	pop	{r4, r7, pc}
 8021ff6:	bf00      	nop
 8021ff8:	40021000 	.word	0x40021000
 8021ffc:	08020000 	.word	0x08020000
 8022000:	08060000 	.word	0x08060000
 8022004:	080a0000 	.word	0x080a0000
 8022008:	2000021c 	.word	0x2000021c
 802200c:	2000025c 	.word	0x2000025c

08022010 <read_chunk_data_in_flash>:


	return HAL_OK;
}

void read_chunk_data_in_flash(uint8_t *buf, uint32_t address, uint16_t size){
 8022010:	b480      	push	{r7}
 8022012:	b087      	sub	sp, #28
 8022014:	af00      	add	r7, sp, #0
 8022016:	60f8      	str	r0, [r7, #12]
 8022018:	60b9      	str	r1, [r7, #8]
 802201a:	4613      	mov	r3, r2
 802201c:	80fb      	strh	r3, [r7, #6]
	for(uint32_t index = 0; index< size ; index++){
 802201e:	2300      	movs	r3, #0
 8022020:	617b      	str	r3, [r7, #20]
 8022022:	e00c      	b.n	802203e <read_chunk_data_in_flash+0x2e>
		*buf = *(__IO uint8_t *)(address + index);
 8022024:	68ba      	ldr	r2, [r7, #8]
 8022026:	697b      	ldr	r3, [r7, #20]
 8022028:	4413      	add	r3, r2
 802202a:	781b      	ldrb	r3, [r3, #0]
 802202c:	b2da      	uxtb	r2, r3
 802202e:	68fb      	ldr	r3, [r7, #12]
 8022030:	701a      	strb	r2, [r3, #0]
		buf++;
 8022032:	68fb      	ldr	r3, [r7, #12]
 8022034:	3301      	adds	r3, #1
 8022036:	60fb      	str	r3, [r7, #12]
	for(uint32_t index = 0; index< size ; index++){
 8022038:	697b      	ldr	r3, [r7, #20]
 802203a:	3301      	adds	r3, #1
 802203c:	617b      	str	r3, [r7, #20]
 802203e:	88fb      	ldrh	r3, [r7, #6]
 8022040:	697a      	ldr	r2, [r7, #20]
 8022042:	429a      	cmp	r2, r3
 8022044:	d3ee      	bcc.n	8022024 <read_chunk_data_in_flash+0x14>
	}
}
 8022046:	bf00      	nop
 8022048:	bf00      	nop
 802204a:	371c      	adds	r7, #28
 802204c:	46bd      	mov	sp, r7
 802204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022052:	4770      	bx	lr

08022054 <tree_hash_on_flash>:

HAL_StatusTypeDef tree_hash_on_flash(defFlashSlot slot, uint8_t* md, uint32_t size, uint32_t *rd){
 8022054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022056:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
 802205a:	af00      	add	r7, sp, #0
 802205c:	4604      	mov	r4, r0
 802205e:	f107 0008 	add.w	r0, r7, #8
 8022062:	6001      	str	r1, [r0, #0]
 8022064:	1d39      	adds	r1, r7, #4
 8022066:	600a      	str	r2, [r1, #0]
 8022068:	463a      	mov	r2, r7
 802206a:	6013      	str	r3, [r2, #0]
 802206c:	f107 030f 	add.w	r3, r7, #15
 8022070:	4622      	mov	r2, r4
 8022072:	701a      	strb	r2, [r3, #0]
 8022074:	466b      	mov	r3, sp
 8022076:	461d      	mov	r5, r3
	uint16 round = size/1024; round += (size%64 != 0)?1:0;
 8022078:	1d3b      	adds	r3, r7, #4
 802207a:	681b      	ldr	r3, [r3, #0]
 802207c:	0a9b      	lsrs	r3, r3, #10
 802207e:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8022082:	1d3b      	adds	r3, r7, #4
 8022084:	681b      	ldr	r3, [r3, #0]
 8022086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802208a:	2b00      	cmp	r3, #0
 802208c:	d001      	beq.n	8022092 <tree_hash_on_flash+0x3e>
 802208e:	2301      	movs	r3, #1
 8022090:	e000      	b.n	8022094 <tree_hash_on_flash+0x40>
 8022092:	2300      	movs	r3, #0
 8022094:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8022098:	4413      	add	r3, r2
 802209a:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
	uint8_t buff_hash[round][64];
 802209e:	f8d7 4824 	ldr.w	r4, [r7, #2084]	; 0x824
 80220a2:	4623      	mov	r3, r4
 80220a4:	3b01      	subs	r3, #1
 80220a6:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
 80220aa:	4620      	mov	r0, r4
 80220ac:	f04f 0100 	mov.w	r1, #0
 80220b0:	f04f 0200 	mov.w	r2, #0
 80220b4:	f04f 0300 	mov.w	r3, #0
 80220b8:	024b      	lsls	r3, r1, #9
 80220ba:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80220be:	0242      	lsls	r2, r0, #9
 80220c0:	4620      	mov	r0, r4
 80220c2:	f04f 0100 	mov.w	r1, #0
 80220c6:	f04f 0200 	mov.w	r2, #0
 80220ca:	f04f 0300 	mov.w	r3, #0
 80220ce:	024b      	lsls	r3, r1, #9
 80220d0:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80220d4:	0242      	lsls	r2, r0, #9
 80220d6:	01a3      	lsls	r3, r4, #6
 80220d8:	3307      	adds	r3, #7
 80220da:	08db      	lsrs	r3, r3, #3
 80220dc:	00db      	lsls	r3, r3, #3
 80220de:	ebad 0d03 	sub.w	sp, sp, r3
 80220e2:	466b      	mov	r3, sp
 80220e4:	3300      	adds	r3, #0
 80220e6:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
	uint32_t BaseAddress;

	if(slot == FLASH_SLOT_0) BaseAddress = FLASH_SLOT_0_ADD;
 80220ea:	f107 030f 	add.w	r3, r7, #15
 80220ee:	781b      	ldrb	r3, [r3, #0]
 80220f0:	2b00      	cmp	r3, #0
 80220f2:	d103      	bne.n	80220fc <tree_hash_on_flash+0xa8>
 80220f4:	4b70      	ldr	r3, [pc, #448]	; (80222b8 <tree_hash_on_flash+0x264>)
 80220f6:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 80220fa:	e010      	b.n	802211e <tree_hash_on_flash+0xca>
	else if(slot == FLASH_SLOT_1) BaseAddress = FLASH_SLOT_1_ADD;
 80220fc:	f107 030f 	add.w	r3, r7, #15
 8022100:	781b      	ldrb	r3, [r3, #0]
 8022102:	2b01      	cmp	r3, #1
 8022104:	d103      	bne.n	802210e <tree_hash_on_flash+0xba>
 8022106:	4b6d      	ldr	r3, [pc, #436]	; (80222bc <tree_hash_on_flash+0x268>)
 8022108:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 802210c:	e007      	b.n	802211e <tree_hash_on_flash+0xca>
	else if(slot == FLASH_SLOT_2) BaseAddress = FLASH_SLOT_2_ADD;
 802210e:	f107 030f 	add.w	r3, r7, #15
 8022112:	781b      	ldrb	r3, [r3, #0]
 8022114:	2b02      	cmp	r3, #2
 8022116:	d102      	bne.n	802211e <tree_hash_on_flash+0xca>
 8022118:	4b69      	ldr	r3, [pc, #420]	; (80222c0 <tree_hash_on_flash+0x26c>)
 802211a:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
	else{}


	for(uint16 i = 0;i<round - 1;i++){
 802211e:	2300      	movs	r3, #0
 8022120:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8022124:	e029      	b.n	802217a <tree_hash_on_flash+0x126>
		uint8 buff_file[1024] = {0,};
 8022126:	f107 0314 	add.w	r3, r7, #20
 802212a:	2200      	movs	r2, #0
 802212c:	601a      	str	r2, [r3, #0]
 802212e:	3304      	adds	r3, #4
 8022130:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8022134:	2100      	movs	r1, #0
 8022136:	4618      	mov	r0, r3
 8022138:	f017 f9da 	bl	80394f0 <memset>
		read_chunk_data_in_flash(buff_file, BaseAddress + i*1024, 1024);
 802213c:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8022140:	029a      	lsls	r2, r3, #10
 8022142:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8022146:	18d1      	adds	r1, r2, r3
 8022148:	f107 0314 	add.w	r3, r7, #20
 802214c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8022150:	4618      	mov	r0, r3
 8022152:	f7ff ff5d 	bl	8022010 <read_chunk_data_in_flash>
		sha3(buff_file,1024, &buff_hash[i], 64);
 8022156:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 802215a:	019b      	lsls	r3, r3, #6
 802215c:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 8022160:	441a      	add	r2, r3
 8022162:	f107 0014 	add.w	r0, r7, #20
 8022166:	2340      	movs	r3, #64	; 0x40
 8022168:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802216c:	f00d f9c3 	bl	802f4f6 <sha3>
	for(uint16 i = 0;i<round - 1;i++){
 8022170:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8022174:	3301      	adds	r3, #1
 8022176:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 802217a:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 802217e:	3b01      	subs	r3, #1
 8022180:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8022184:	429a      	cmp	r2, r3
 8022186:	d3ce      	bcc.n	8022126 <tree_hash_on_flash+0xd2>
	}

	uint8_t buff_file[1024] = {0,};
 8022188:	f207 4314 	addw	r3, r7, #1044	; 0x414
 802218c:	2200      	movs	r2, #0
 802218e:	601a      	str	r2, [r3, #0]
 8022190:	3304      	adds	r3, #4
 8022192:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8022196:	2100      	movs	r1, #0
 8022198:	4618      	mov	r0, r3
 802219a:	f017 f9a9 	bl	80394f0 <memset>
	read_chunk_data_in_flash(buff_file, BaseAddress + (round-1)*1024, size%1024);
 802219e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80221a2:	3b01      	subs	r3, #1
 80221a4:	029a      	lsls	r2, r3, #10
 80221a6:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 80221aa:	18d1      	adds	r1, r2, r3
 80221ac:	1d3b      	adds	r3, r7, #4
 80221ae:	681b      	ldr	r3, [r3, #0]
 80221b0:	b29b      	uxth	r3, r3
 80221b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80221b6:	b29a      	uxth	r2, r3
 80221b8:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80221bc:	4618      	mov	r0, r3
 80221be:	f7ff ff27 	bl	8022010 <read_chunk_data_in_flash>

	sha3(buff_file, size%1024, &buff_hash[round-1], 64);
 80221c2:	1d3b      	adds	r3, r7, #4
 80221c4:	681b      	ldr	r3, [r3, #0]
 80221c6:	f3c3 0109 	ubfx	r1, r3, #0, #10
 80221ca:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80221ce:	3b01      	subs	r3, #1
 80221d0:	019b      	lsls	r3, r3, #6
 80221d2:	f8d7 281c 	ldr.w	r2, [r7, #2076]	; 0x81c
 80221d6:	441a      	add	r2, r3
 80221d8:	f207 4014 	addw	r0, r7, #1044	; 0x414
 80221dc:	2340      	movs	r3, #64	; 0x40
 80221de:	f00d f98a 	bl	802f4f6 <sha3>


	uint8_t all_of_hash[round*64];
 80221e2:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80221e6:	019c      	lsls	r4, r3, #6
 80221e8:	466b      	mov	r3, sp
 80221ea:	461e      	mov	r6, r3
 80221ec:	4623      	mov	r3, r4
 80221ee:	3b01      	subs	r3, #1
 80221f0:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
 80221f4:	4620      	mov	r0, r4
 80221f6:	f04f 0100 	mov.w	r1, #0
 80221fa:	f04f 0200 	mov.w	r2, #0
 80221fe:	f04f 0300 	mov.w	r3, #0
 8022202:	00cb      	lsls	r3, r1, #3
 8022204:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8022208:	00c2      	lsls	r2, r0, #3
 802220a:	4620      	mov	r0, r4
 802220c:	f04f 0100 	mov.w	r1, #0
 8022210:	f04f 0200 	mov.w	r2, #0
 8022214:	f04f 0300 	mov.w	r3, #0
 8022218:	00cb      	lsls	r3, r1, #3
 802221a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 802221e:	00c2      	lsls	r2, r0, #3
 8022220:	1de3      	adds	r3, r4, #7
 8022222:	08db      	lsrs	r3, r3, #3
 8022224:	00db      	lsls	r3, r3, #3
 8022226:	ebad 0d03 	sub.w	sp, sp, r3
 802222a:	466b      	mov	r3, sp
 802222c:	3300      	adds	r3, #0
 802222e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	for(uint16 i = 0; i< round; i++){
 8022232:	2300      	movs	r3, #0
 8022234:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
 8022238:	e024      	b.n	8022284 <tree_hash_on_flash+0x230>
		for(uint16 j = 0;j<64;j++){
 802223a:	2300      	movs	r3, #0
 802223c:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8022240:	e017      	b.n	8022272 <tree_hash_on_flash+0x21e>
			all_of_hash[i*64+j] = buff_hash[i][j];
 8022242:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8022246:	019a      	lsls	r2, r3, #6
 8022248:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 802224c:	4413      	add	r3, r2
 802224e:	f8d7 181c 	ldr.w	r1, [r7, #2076]	; 0x81c
 8022252:	f8d7 2830 	ldr.w	r2, [r7, #2096]	; 0x830
 8022256:	0192      	lsls	r2, r2, #6
 8022258:	4411      	add	r1, r2
 802225a:	f8d7 2834 	ldr.w	r2, [r7, #2100]	; 0x834
 802225e:	440a      	add	r2, r1
 8022260:	7811      	ldrb	r1, [r2, #0]
 8022262:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8022266:	54d1      	strb	r1, [r2, r3]
		for(uint16 j = 0;j<64;j++){
 8022268:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 802226c:	3301      	adds	r3, #1
 802226e:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8022272:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8022276:	2b3f      	cmp	r3, #63	; 0x3f
 8022278:	d9e3      	bls.n	8022242 <tree_hash_on_flash+0x1ee>
	for(uint16 i = 0; i< round; i++){
 802227a:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 802227e:	3301      	adds	r3, #1
 8022280:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
 8022284:	f8d7 2830 	ldr.w	r2, [r7, #2096]	; 0x830
 8022288:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 802228c:	429a      	cmp	r2, r3
 802228e:	d3d4      	bcc.n	802223a <tree_hash_on_flash+0x1e6>
		}
	}

	sha3(all_of_hash, round*64, md, 64);
 8022290:	f8d7 0814 	ldr.w	r0, [r7, #2068]	; 0x814
 8022294:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8022298:	0199      	lsls	r1, r3, #6
 802229a:	f107 0208 	add.w	r2, r7, #8
 802229e:	2340      	movs	r3, #64	; 0x40
 80222a0:	6812      	ldr	r2, [r2, #0]
 80222a2:	f00d f928 	bl	802f4f6 <sha3>


	return HAL_OK;
 80222a6:	2300      	movs	r3, #0
 80222a8:	46b5      	mov	sp, r6
 80222aa:	46ad      	mov	sp, r5
}
 80222ac:	4618      	mov	r0, r3
 80222ae:	f607 073c 	addw	r7, r7, #2108	; 0x83c
 80222b2:	46bd      	mov	sp, r7
 80222b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80222b6:	bf00      	nop
 80222b8:	08020000 	.word	0x08020000
 80222bc:	08060000 	.word	0x08060000
 80222c0:	080a0000 	.word	0x080a0000

080222c4 <load_3>:


/*
    helper functions
*/
static uint64_t load_3(const unsigned char *in) {
 80222c4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80222c8:	b085      	sub	sp, #20
 80222ca:	af00      	add	r7, sp, #0
 80222cc:	6078      	str	r0, [r7, #4]
    uint64_t result;

    result = (uint64_t) in[0];
 80222ce:	687b      	ldr	r3, [r7, #4]
 80222d0:	781b      	ldrb	r3, [r3, #0]
 80222d2:	b2da      	uxtb	r2, r3
 80222d4:	f04f 0300 	mov.w	r3, #0
 80222d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result |= ((uint64_t) in[1]) << 8;
 80222dc:	687b      	ldr	r3, [r7, #4]
 80222de:	3301      	adds	r3, #1
 80222e0:	781b      	ldrb	r3, [r3, #0]
 80222e2:	b2d8      	uxtb	r0, r3
 80222e4:	f04f 0100 	mov.w	r1, #0
 80222e8:	f04f 0200 	mov.w	r2, #0
 80222ec:	f04f 0300 	mov.w	r3, #0
 80222f0:	020b      	lsls	r3, r1, #8
 80222f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80222f6:	0202      	lsls	r2, r0, #8
 80222f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80222fc:	ea40 0802 	orr.w	r8, r0, r2
 8022300:	ea41 0903 	orr.w	r9, r1, r3
 8022304:	e9c7 8902 	strd	r8, r9, [r7, #8]
    result |= ((uint64_t) in[2]) << 16;
 8022308:	687b      	ldr	r3, [r7, #4]
 802230a:	3302      	adds	r3, #2
 802230c:	781b      	ldrb	r3, [r3, #0]
 802230e:	b2d8      	uxtb	r0, r3
 8022310:	f04f 0100 	mov.w	r1, #0
 8022314:	f04f 0200 	mov.w	r2, #0
 8022318:	f04f 0300 	mov.w	r3, #0
 802231c:	040b      	lsls	r3, r1, #16
 802231e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8022322:	0402      	lsls	r2, r0, #16
 8022324:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8022328:	ea40 0402 	orr.w	r4, r0, r2
 802232c:	ea41 0503 	orr.w	r5, r1, r3
 8022330:	e9c7 4502 	strd	r4, r5, [r7, #8]

    return result;
 8022334:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8022338:	4610      	mov	r0, r2
 802233a:	4619      	mov	r1, r3
 802233c:	3714      	adds	r7, #20
 802233e:	46bd      	mov	sp, r7
 8022340:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8022344:	4770      	bx	lr

08022346 <load_4>:

static uint64_t load_4(const unsigned char *in) {
 8022346:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802234a:	b086      	sub	sp, #24
 802234c:	af00      	add	r7, sp, #0
 802234e:	60f8      	str	r0, [r7, #12]
    uint64_t result;

    result = (uint64_t) in[0];
 8022350:	68fb      	ldr	r3, [r7, #12]
 8022352:	781b      	ldrb	r3, [r3, #0]
 8022354:	b2da      	uxtb	r2, r3
 8022356:	f04f 0300 	mov.w	r3, #0
 802235a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[1]) << 8;
 802235e:	68fb      	ldr	r3, [r7, #12]
 8022360:	3301      	adds	r3, #1
 8022362:	781b      	ldrb	r3, [r3, #0]
 8022364:	b2d8      	uxtb	r0, r3
 8022366:	f04f 0100 	mov.w	r1, #0
 802236a:	f04f 0200 	mov.w	r2, #0
 802236e:	f04f 0300 	mov.w	r3, #0
 8022372:	020b      	lsls	r3, r1, #8
 8022374:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8022378:	0202      	lsls	r2, r0, #8
 802237a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802237e:	ea40 0602 	orr.w	r6, r0, r2
 8022382:	603e      	str	r6, [r7, #0]
 8022384:	430b      	orrs	r3, r1
 8022386:	607b      	str	r3, [r7, #4]
 8022388:	e9d7 2300 	ldrd	r2, r3, [r7]
 802238c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[2]) << 16;
 8022390:	68fb      	ldr	r3, [r7, #12]
 8022392:	3302      	adds	r3, #2
 8022394:	781b      	ldrb	r3, [r3, #0]
 8022396:	b2d8      	uxtb	r0, r3
 8022398:	f04f 0100 	mov.w	r1, #0
 802239c:	f04f 0200 	mov.w	r2, #0
 80223a0:	f04f 0300 	mov.w	r3, #0
 80223a4:	040b      	lsls	r3, r1, #16
 80223a6:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80223aa:	0402      	lsls	r2, r0, #16
 80223ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80223b0:	ea40 0a02 	orr.w	sl, r0, r2
 80223b4:	ea41 0b03 	orr.w	fp, r1, r3
 80223b8:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    result |= ((uint64_t) in[3]) << 24;
 80223bc:	68fb      	ldr	r3, [r7, #12]
 80223be:	3303      	adds	r3, #3
 80223c0:	781b      	ldrb	r3, [r3, #0]
 80223c2:	b2da      	uxtb	r2, r3
 80223c4:	f04f 0300 	mov.w	r3, #0
 80223c8:	0a15      	lsrs	r5, r2, #8
 80223ca:	0614      	lsls	r4, r2, #24
 80223cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80223d0:	ea42 0804 	orr.w	r8, r2, r4
 80223d4:	ea43 0905 	orr.w	r9, r3, r5
 80223d8:	e9c7 8904 	strd	r8, r9, [r7, #16]
    
    return result;
 80223dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80223e0:	4610      	mov	r0, r2
 80223e2:	4619      	mov	r1, r3
 80223e4:	3718      	adds	r7, #24
 80223e6:	46bd      	mov	sp, r7
 80223e8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80223ec:	4770      	bx	lr

080223ee <fe_0>:

/*
    h = 0
*/

void fe_0(fe h) {
 80223ee:	b480      	push	{r7}
 80223f0:	b083      	sub	sp, #12
 80223f2:	af00      	add	r7, sp, #0
 80223f4:	6078      	str	r0, [r7, #4]
    h[0] = 0;
 80223f6:	687b      	ldr	r3, [r7, #4]
 80223f8:	2200      	movs	r2, #0
 80223fa:	601a      	str	r2, [r3, #0]
    h[1] = 0;
 80223fc:	687b      	ldr	r3, [r7, #4]
 80223fe:	3304      	adds	r3, #4
 8022400:	2200      	movs	r2, #0
 8022402:	601a      	str	r2, [r3, #0]
    h[2] = 0;
 8022404:	687b      	ldr	r3, [r7, #4]
 8022406:	3308      	adds	r3, #8
 8022408:	2200      	movs	r2, #0
 802240a:	601a      	str	r2, [r3, #0]
    h[3] = 0;
 802240c:	687b      	ldr	r3, [r7, #4]
 802240e:	330c      	adds	r3, #12
 8022410:	2200      	movs	r2, #0
 8022412:	601a      	str	r2, [r3, #0]
    h[4] = 0;
 8022414:	687b      	ldr	r3, [r7, #4]
 8022416:	3310      	adds	r3, #16
 8022418:	2200      	movs	r2, #0
 802241a:	601a      	str	r2, [r3, #0]
    h[5] = 0;
 802241c:	687b      	ldr	r3, [r7, #4]
 802241e:	3314      	adds	r3, #20
 8022420:	2200      	movs	r2, #0
 8022422:	601a      	str	r2, [r3, #0]
    h[6] = 0;
 8022424:	687b      	ldr	r3, [r7, #4]
 8022426:	3318      	adds	r3, #24
 8022428:	2200      	movs	r2, #0
 802242a:	601a      	str	r2, [r3, #0]
    h[7] = 0;
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	331c      	adds	r3, #28
 8022430:	2200      	movs	r2, #0
 8022432:	601a      	str	r2, [r3, #0]
    h[8] = 0;
 8022434:	687b      	ldr	r3, [r7, #4]
 8022436:	3320      	adds	r3, #32
 8022438:	2200      	movs	r2, #0
 802243a:	601a      	str	r2, [r3, #0]
    h[9] = 0;
 802243c:	687b      	ldr	r3, [r7, #4]
 802243e:	3324      	adds	r3, #36	; 0x24
 8022440:	2200      	movs	r2, #0
 8022442:	601a      	str	r2, [r3, #0]
}
 8022444:	bf00      	nop
 8022446:	370c      	adds	r7, #12
 8022448:	46bd      	mov	sp, r7
 802244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802244e:	4770      	bx	lr

08022450 <fe_1>:

/*
    h = 1
*/

void fe_1(fe h) {
 8022450:	b480      	push	{r7}
 8022452:	b083      	sub	sp, #12
 8022454:	af00      	add	r7, sp, #0
 8022456:	6078      	str	r0, [r7, #4]
    h[0] = 1;
 8022458:	687b      	ldr	r3, [r7, #4]
 802245a:	2201      	movs	r2, #1
 802245c:	601a      	str	r2, [r3, #0]
    h[1] = 0;
 802245e:	687b      	ldr	r3, [r7, #4]
 8022460:	3304      	adds	r3, #4
 8022462:	2200      	movs	r2, #0
 8022464:	601a      	str	r2, [r3, #0]
    h[2] = 0;
 8022466:	687b      	ldr	r3, [r7, #4]
 8022468:	3308      	adds	r3, #8
 802246a:	2200      	movs	r2, #0
 802246c:	601a      	str	r2, [r3, #0]
    h[3] = 0;
 802246e:	687b      	ldr	r3, [r7, #4]
 8022470:	330c      	adds	r3, #12
 8022472:	2200      	movs	r2, #0
 8022474:	601a      	str	r2, [r3, #0]
    h[4] = 0;
 8022476:	687b      	ldr	r3, [r7, #4]
 8022478:	3310      	adds	r3, #16
 802247a:	2200      	movs	r2, #0
 802247c:	601a      	str	r2, [r3, #0]
    h[5] = 0;
 802247e:	687b      	ldr	r3, [r7, #4]
 8022480:	3314      	adds	r3, #20
 8022482:	2200      	movs	r2, #0
 8022484:	601a      	str	r2, [r3, #0]
    h[6] = 0;
 8022486:	687b      	ldr	r3, [r7, #4]
 8022488:	3318      	adds	r3, #24
 802248a:	2200      	movs	r2, #0
 802248c:	601a      	str	r2, [r3, #0]
    h[7] = 0;
 802248e:	687b      	ldr	r3, [r7, #4]
 8022490:	331c      	adds	r3, #28
 8022492:	2200      	movs	r2, #0
 8022494:	601a      	str	r2, [r3, #0]
    h[8] = 0;
 8022496:	687b      	ldr	r3, [r7, #4]
 8022498:	3320      	adds	r3, #32
 802249a:	2200      	movs	r2, #0
 802249c:	601a      	str	r2, [r3, #0]
    h[9] = 0;
 802249e:	687b      	ldr	r3, [r7, #4]
 80224a0:	3324      	adds	r3, #36	; 0x24
 80224a2:	2200      	movs	r2, #0
 80224a4:	601a      	str	r2, [r3, #0]
}
 80224a6:	bf00      	nop
 80224a8:	370c      	adds	r7, #12
 80224aa:	46bd      	mov	sp, r7
 80224ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224b0:	4770      	bx	lr

080224b2 <fe_add>:

    Postconditions:
       |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

void fe_add(fe h, const fe f, const fe g) {
 80224b2:	b480      	push	{r7}
 80224b4:	b0a3      	sub	sp, #140	; 0x8c
 80224b6:	af00      	add	r7, sp, #0
 80224b8:	60f8      	str	r0, [r7, #12]
 80224ba:	60b9      	str	r1, [r7, #8]
 80224bc:	607a      	str	r2, [r7, #4]
    int32_t f0 = f[0];
 80224be:	68bb      	ldr	r3, [r7, #8]
 80224c0:	681b      	ldr	r3, [r3, #0]
 80224c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    int32_t f1 = f[1];
 80224c6:	68bb      	ldr	r3, [r7, #8]
 80224c8:	685b      	ldr	r3, [r3, #4]
 80224ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int32_t f2 = f[2];
 80224ce:	68bb      	ldr	r3, [r7, #8]
 80224d0:	689b      	ldr	r3, [r3, #8]
 80224d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    int32_t f3 = f[3];
 80224d4:	68bb      	ldr	r3, [r7, #8]
 80224d6:	68db      	ldr	r3, [r3, #12]
 80224d8:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t f4 = f[4];
 80224da:	68bb      	ldr	r3, [r7, #8]
 80224dc:	691b      	ldr	r3, [r3, #16]
 80224de:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t f5 = f[5];
 80224e0:	68bb      	ldr	r3, [r7, #8]
 80224e2:	695b      	ldr	r3, [r3, #20]
 80224e4:	673b      	str	r3, [r7, #112]	; 0x70
    int32_t f6 = f[6];
 80224e6:	68bb      	ldr	r3, [r7, #8]
 80224e8:	699b      	ldr	r3, [r3, #24]
 80224ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t f7 = f[7];
 80224ec:	68bb      	ldr	r3, [r7, #8]
 80224ee:	69db      	ldr	r3, [r3, #28]
 80224f0:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t f8 = f[8];
 80224f2:	68bb      	ldr	r3, [r7, #8]
 80224f4:	6a1b      	ldr	r3, [r3, #32]
 80224f6:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t f9 = f[9];
 80224f8:	68bb      	ldr	r3, [r7, #8]
 80224fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80224fc:	663b      	str	r3, [r7, #96]	; 0x60
    int32_t g0 = g[0];
 80224fe:	687b      	ldr	r3, [r7, #4]
 8022500:	681b      	ldr	r3, [r3, #0]
 8022502:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t g1 = g[1];
 8022504:	687b      	ldr	r3, [r7, #4]
 8022506:	685b      	ldr	r3, [r3, #4]
 8022508:	65bb      	str	r3, [r7, #88]	; 0x58
    int32_t g2 = g[2];
 802250a:	687b      	ldr	r3, [r7, #4]
 802250c:	689b      	ldr	r3, [r3, #8]
 802250e:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t g3 = g[3];
 8022510:	687b      	ldr	r3, [r7, #4]
 8022512:	68db      	ldr	r3, [r3, #12]
 8022514:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t g4 = g[4];
 8022516:	687b      	ldr	r3, [r7, #4]
 8022518:	691b      	ldr	r3, [r3, #16]
 802251a:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t g5 = g[5];
 802251c:	687b      	ldr	r3, [r7, #4]
 802251e:	695b      	ldr	r3, [r3, #20]
 8022520:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t g6 = g[6];
 8022522:	687b      	ldr	r3, [r7, #4]
 8022524:	699b      	ldr	r3, [r3, #24]
 8022526:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t g7 = g[7];
 8022528:	687b      	ldr	r3, [r7, #4]
 802252a:	69db      	ldr	r3, [r3, #28]
 802252c:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t g8 = g[8];
 802252e:	687b      	ldr	r3, [r7, #4]
 8022530:	6a1b      	ldr	r3, [r3, #32]
 8022532:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t g9 = g[9];
 8022534:	687b      	ldr	r3, [r7, #4]
 8022536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022538:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t h0 = f0 + g0;
 802253a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 802253e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8022540:	4413      	add	r3, r2
 8022542:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t h1 = f1 + g1;
 8022544:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8022548:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802254a:	4413      	add	r3, r2
 802254c:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t h2 = f2 + g2;
 802254e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8022550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8022552:	4413      	add	r3, r2
 8022554:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t h3 = f3 + g3;
 8022556:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8022558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802255a:	4413      	add	r3, r2
 802255c:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t h4 = f4 + g4;
 802255e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8022560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8022562:	4413      	add	r3, r2
 8022564:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h5 = f5 + g5;
 8022566:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8022568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802256a:	4413      	add	r3, r2
 802256c:	623b      	str	r3, [r7, #32]
    int32_t h6 = f6 + g6;
 802256e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8022570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022572:	4413      	add	r3, r2
 8022574:	61fb      	str	r3, [r7, #28]
    int32_t h7 = f7 + g7;
 8022576:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8022578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802257a:	4413      	add	r3, r2
 802257c:	61bb      	str	r3, [r7, #24]
    int32_t h8 = f8 + g8;
 802257e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8022580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022582:	4413      	add	r3, r2
 8022584:	617b      	str	r3, [r7, #20]
    int32_t h9 = f9 + g9;
 8022586:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8022588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802258a:	4413      	add	r3, r2
 802258c:	613b      	str	r3, [r7, #16]
    
    h[0] = h0;
 802258e:	68fb      	ldr	r3, [r7, #12]
 8022590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8022592:	601a      	str	r2, [r3, #0]
    h[1] = h1;
 8022594:	68fb      	ldr	r3, [r7, #12]
 8022596:	3304      	adds	r3, #4
 8022598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802259a:	601a      	str	r2, [r3, #0]
    h[2] = h2;
 802259c:	68fb      	ldr	r3, [r7, #12]
 802259e:	3308      	adds	r3, #8
 80225a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80225a2:	601a      	str	r2, [r3, #0]
    h[3] = h3;
 80225a4:	68fb      	ldr	r3, [r7, #12]
 80225a6:	330c      	adds	r3, #12
 80225a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80225aa:	601a      	str	r2, [r3, #0]
    h[4] = h4;
 80225ac:	68fb      	ldr	r3, [r7, #12]
 80225ae:	3310      	adds	r3, #16
 80225b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80225b2:	601a      	str	r2, [r3, #0]
    h[5] = h5;
 80225b4:	68fb      	ldr	r3, [r7, #12]
 80225b6:	3314      	adds	r3, #20
 80225b8:	6a3a      	ldr	r2, [r7, #32]
 80225ba:	601a      	str	r2, [r3, #0]
    h[6] = h6;
 80225bc:	68fb      	ldr	r3, [r7, #12]
 80225be:	3318      	adds	r3, #24
 80225c0:	69fa      	ldr	r2, [r7, #28]
 80225c2:	601a      	str	r2, [r3, #0]
    h[7] = h7;
 80225c4:	68fb      	ldr	r3, [r7, #12]
 80225c6:	331c      	adds	r3, #28
 80225c8:	69ba      	ldr	r2, [r7, #24]
 80225ca:	601a      	str	r2, [r3, #0]
    h[8] = h8;
 80225cc:	68fb      	ldr	r3, [r7, #12]
 80225ce:	3320      	adds	r3, #32
 80225d0:	697a      	ldr	r2, [r7, #20]
 80225d2:	601a      	str	r2, [r3, #0]
    h[9] = h9;
 80225d4:	68fb      	ldr	r3, [r7, #12]
 80225d6:	3324      	adds	r3, #36	; 0x24
 80225d8:	693a      	ldr	r2, [r7, #16]
 80225da:	601a      	str	r2, [r3, #0]
}
 80225dc:	bf00      	nop
 80225de:	378c      	adds	r7, #140	; 0x8c
 80225e0:	46bd      	mov	sp, r7
 80225e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225e6:	4770      	bx	lr

080225e8 <fe_copy>:

/*
    h = f
*/

void fe_copy(fe h, const fe f) {
 80225e8:	b480      	push	{r7}
 80225ea:	b08d      	sub	sp, #52	; 0x34
 80225ec:	af00      	add	r7, sp, #0
 80225ee:	6078      	str	r0, [r7, #4]
 80225f0:	6039      	str	r1, [r7, #0]
    int32_t f0 = f[0];
 80225f2:	683b      	ldr	r3, [r7, #0]
 80225f4:	681b      	ldr	r3, [r3, #0]
 80225f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t f1 = f[1];
 80225f8:	683b      	ldr	r3, [r7, #0]
 80225fa:	685b      	ldr	r3, [r3, #4]
 80225fc:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t f2 = f[2];
 80225fe:	683b      	ldr	r3, [r7, #0]
 8022600:	689b      	ldr	r3, [r3, #8]
 8022602:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t f3 = f[3];
 8022604:	683b      	ldr	r3, [r7, #0]
 8022606:	68db      	ldr	r3, [r3, #12]
 8022608:	623b      	str	r3, [r7, #32]
    int32_t f4 = f[4];
 802260a:	683b      	ldr	r3, [r7, #0]
 802260c:	691b      	ldr	r3, [r3, #16]
 802260e:	61fb      	str	r3, [r7, #28]
    int32_t f5 = f[5];
 8022610:	683b      	ldr	r3, [r7, #0]
 8022612:	695b      	ldr	r3, [r3, #20]
 8022614:	61bb      	str	r3, [r7, #24]
    int32_t f6 = f[6];
 8022616:	683b      	ldr	r3, [r7, #0]
 8022618:	699b      	ldr	r3, [r3, #24]
 802261a:	617b      	str	r3, [r7, #20]
    int32_t f7 = f[7];
 802261c:	683b      	ldr	r3, [r7, #0]
 802261e:	69db      	ldr	r3, [r3, #28]
 8022620:	613b      	str	r3, [r7, #16]
    int32_t f8 = f[8];
 8022622:	683b      	ldr	r3, [r7, #0]
 8022624:	6a1b      	ldr	r3, [r3, #32]
 8022626:	60fb      	str	r3, [r7, #12]
    int32_t f9 = f[9];
 8022628:	683b      	ldr	r3, [r7, #0]
 802262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802262c:	60bb      	str	r3, [r7, #8]
    
    h[0] = f0;
 802262e:	687b      	ldr	r3, [r7, #4]
 8022630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022632:	601a      	str	r2, [r3, #0]
    h[1] = f1;
 8022634:	687b      	ldr	r3, [r7, #4]
 8022636:	3304      	adds	r3, #4
 8022638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802263a:	601a      	str	r2, [r3, #0]
    h[2] = f2;
 802263c:	687b      	ldr	r3, [r7, #4]
 802263e:	3308      	adds	r3, #8
 8022640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022642:	601a      	str	r2, [r3, #0]
    h[3] = f3;
 8022644:	687b      	ldr	r3, [r7, #4]
 8022646:	330c      	adds	r3, #12
 8022648:	6a3a      	ldr	r2, [r7, #32]
 802264a:	601a      	str	r2, [r3, #0]
    h[4] = f4;
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	3310      	adds	r3, #16
 8022650:	69fa      	ldr	r2, [r7, #28]
 8022652:	601a      	str	r2, [r3, #0]
    h[5] = f5;
 8022654:	687b      	ldr	r3, [r7, #4]
 8022656:	3314      	adds	r3, #20
 8022658:	69ba      	ldr	r2, [r7, #24]
 802265a:	601a      	str	r2, [r3, #0]
    h[6] = f6;
 802265c:	687b      	ldr	r3, [r7, #4]
 802265e:	3318      	adds	r3, #24
 8022660:	697a      	ldr	r2, [r7, #20]
 8022662:	601a      	str	r2, [r3, #0]
    h[7] = f7;
 8022664:	687b      	ldr	r3, [r7, #4]
 8022666:	331c      	adds	r3, #28
 8022668:	693a      	ldr	r2, [r7, #16]
 802266a:	601a      	str	r2, [r3, #0]
    h[8] = f8;
 802266c:	687b      	ldr	r3, [r7, #4]
 802266e:	3320      	adds	r3, #32
 8022670:	68fa      	ldr	r2, [r7, #12]
 8022672:	601a      	str	r2, [r3, #0]
    h[9] = f9;
 8022674:	687b      	ldr	r3, [r7, #4]
 8022676:	3324      	adds	r3, #36	; 0x24
 8022678:	68ba      	ldr	r2, [r7, #8]
 802267a:	601a      	str	r2, [r3, #0]
}
 802267c:	bf00      	nop
 802267e:	3734      	adds	r7, #52	; 0x34
 8022680:	46bd      	mov	sp, r7
 8022682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022686:	4770      	bx	lr

08022688 <fe_frombytes>:

/*
    Ignores top bit of h.
*/

void fe_frombytes(fe h, const unsigned char *s) {
 8022688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802268c:	b0e7      	sub	sp, #412	; 0x19c
 802268e:	af00      	add	r7, sp, #0
 8022690:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8022694:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
    int64_t h0 = load_4(s);
 8022698:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 802269c:	f7ff fe53 	bl	8022346 <load_4>
 80226a0:	4602      	mov	r2, r0
 80226a2:	460b      	mov	r3, r1
 80226a4:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
    int64_t h1 = load_3(s + 4) << 6;
 80226a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80226ac:	3304      	adds	r3, #4
 80226ae:	4618      	mov	r0, r3
 80226b0:	f7ff fe08 	bl	80222c4 <load_3>
 80226b4:	4602      	mov	r2, r0
 80226b6:	460b      	mov	r3, r1
 80226b8:	f04f 0000 	mov.w	r0, #0
 80226bc:	f04f 0100 	mov.w	r1, #0
 80226c0:	0199      	lsls	r1, r3, #6
 80226c2:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80226c6:	0190      	lsls	r0, r2, #6
 80226c8:	e9c7 0162 	strd	r0, r1, [r7, #392]	; 0x188
    int64_t h2 = load_3(s + 7) << 5;
 80226cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80226d0:	3307      	adds	r3, #7
 80226d2:	4618      	mov	r0, r3
 80226d4:	f7ff fdf6 	bl	80222c4 <load_3>
 80226d8:	4602      	mov	r2, r0
 80226da:	460b      	mov	r3, r1
 80226dc:	f04f 0000 	mov.w	r0, #0
 80226e0:	f04f 0100 	mov.w	r1, #0
 80226e4:	0159      	lsls	r1, r3, #5
 80226e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80226ea:	0150      	lsls	r0, r2, #5
 80226ec:	e9c7 0160 	strd	r0, r1, [r7, #384]	; 0x180
    int64_t h3 = load_3(s + 10) << 3;
 80226f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80226f4:	330a      	adds	r3, #10
 80226f6:	4618      	mov	r0, r3
 80226f8:	f7ff fde4 	bl	80222c4 <load_3>
 80226fc:	4602      	mov	r2, r0
 80226fe:	460b      	mov	r3, r1
 8022700:	f04f 0000 	mov.w	r0, #0
 8022704:	f04f 0100 	mov.w	r1, #0
 8022708:	00d9      	lsls	r1, r3, #3
 802270a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 802270e:	00d0      	lsls	r0, r2, #3
 8022710:	e9c7 015e 	strd	r0, r1, [r7, #376]	; 0x178
    int64_t h4 = load_3(s + 13) << 2;
 8022714:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8022718:	330d      	adds	r3, #13
 802271a:	4618      	mov	r0, r3
 802271c:	f7ff fdd2 	bl	80222c4 <load_3>
 8022720:	4602      	mov	r2, r0
 8022722:	460b      	mov	r3, r1
 8022724:	f04f 0000 	mov.w	r0, #0
 8022728:	f04f 0100 	mov.w	r1, #0
 802272c:	0099      	lsls	r1, r3, #2
 802272e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8022732:	0090      	lsls	r0, r2, #2
 8022734:	e9c7 015c 	strd	r0, r1, [r7, #368]	; 0x170
    int64_t h5 = load_4(s + 16);
 8022738:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 802273c:	3310      	adds	r3, #16
 802273e:	4618      	mov	r0, r3
 8022740:	f7ff fe01 	bl	8022346 <load_4>
 8022744:	4602      	mov	r2, r0
 8022746:	460b      	mov	r3, r1
 8022748:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
    int64_t h6 = load_3(s + 20) << 7;
 802274c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8022750:	3314      	adds	r3, #20
 8022752:	4618      	mov	r0, r3
 8022754:	f7ff fdb6 	bl	80222c4 <load_3>
 8022758:	4602      	mov	r2, r0
 802275a:	460b      	mov	r3, r1
 802275c:	f04f 0000 	mov.w	r0, #0
 8022760:	f04f 0100 	mov.w	r1, #0
 8022764:	01d9      	lsls	r1, r3, #7
 8022766:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 802276a:	01d0      	lsls	r0, r2, #7
 802276c:	e9c7 0158 	strd	r0, r1, [r7, #352]	; 0x160
    int64_t h7 = load_3(s + 23) << 5;
 8022770:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8022774:	3317      	adds	r3, #23
 8022776:	4618      	mov	r0, r3
 8022778:	f7ff fda4 	bl	80222c4 <load_3>
 802277c:	4602      	mov	r2, r0
 802277e:	460b      	mov	r3, r1
 8022780:	f04f 0000 	mov.w	r0, #0
 8022784:	f04f 0100 	mov.w	r1, #0
 8022788:	0159      	lsls	r1, r3, #5
 802278a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802278e:	0150      	lsls	r0, r2, #5
 8022790:	e9c7 0156 	strd	r0, r1, [r7, #344]	; 0x158
    int64_t h8 = load_3(s + 26) << 4;
 8022794:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8022798:	331a      	adds	r3, #26
 802279a:	4618      	mov	r0, r3
 802279c:	f7ff fd92 	bl	80222c4 <load_3>
 80227a0:	4602      	mov	r2, r0
 80227a2:	460b      	mov	r3, r1
 80227a4:	f04f 0000 	mov.w	r0, #0
 80227a8:	f04f 0100 	mov.w	r1, #0
 80227ac:	0119      	lsls	r1, r3, #4
 80227ae:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80227b2:	0110      	lsls	r0, r2, #4
 80227b4:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
    int64_t h9 = (load_3(s + 29) & 8388607) << 2;
 80227b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80227bc:	331d      	adds	r3, #29
 80227be:	4618      	mov	r0, r3
 80227c0:	f7ff fd80 	bl	80222c4 <load_3>
 80227c4:	4602      	mov	r2, r0
 80227c6:	460b      	mov	r3, r1
 80227c8:	f04f 0000 	mov.w	r0, #0
 80227cc:	f04f 0100 	mov.w	r1, #0
 80227d0:	0099      	lsls	r1, r3, #2
 80227d2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80227d6:	0090      	lsls	r0, r2, #2
 80227d8:	4aeb      	ldr	r2, [pc, #940]	; (8022b88 <fe_frombytes+0x500>)
 80227da:	f04f 0300 	mov.w	r3, #0
 80227de:	ea00 0602 	and.w	r6, r0, r2
 80227e2:	f8c7 60a8 	str.w	r6, [r7, #168]	; 0xa8
 80227e6:	400b      	ands	r3, r1
 80227e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80227ec:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80227f0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;

    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 80227f4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80227f8:	f112 7480 	adds.w	r4, r2, #16777216	; 0x1000000
 80227fc:	f143 0500 	adc.w	r5, r3, #0
 8022800:	f04f 0200 	mov.w	r2, #0
 8022804:	f04f 0300 	mov.w	r3, #0
 8022808:	0e62      	lsrs	r2, r4, #25
 802280a:	ea42 12c5 	orr.w	r2, r2, r5, lsl #7
 802280e:	166b      	asrs	r3, r5, #25
 8022810:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
    h0 += carry9 * 19;
 8022814:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8022818:	4622      	mov	r2, r4
 802281a:	462b      	mov	r3, r5
 802281c:	f04f 0000 	mov.w	r0, #0
 8022820:	f04f 0100 	mov.w	r1, #0
 8022824:	00d9      	lsls	r1, r3, #3
 8022826:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 802282a:	00d0      	lsls	r0, r2, #3
 802282c:	4602      	mov	r2, r0
 802282e:	460b      	mov	r3, r1
 8022830:	1912      	adds	r2, r2, r4
 8022832:	eb45 0303 	adc.w	r3, r5, r3
 8022836:	1891      	adds	r1, r2, r2
 8022838:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 802283c:	415b      	adcs	r3, r3
 802283e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8022842:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8022846:	eb12 0a04 	adds.w	sl, r2, r4
 802284a:	eb43 0b05 	adc.w	fp, r3, r5
 802284e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8022852:	eb12 010a 	adds.w	r1, r2, sl
 8022856:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 802285a:	eb43 030b 	adc.w	r3, r3, fp
 802285e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8022862:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8022866:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
    h9 -= carry9 << 25;
 802286a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 802286e:	f04f 0000 	mov.w	r0, #0
 8022872:	f04f 0100 	mov.w	r1, #0
 8022876:	0659      	lsls	r1, r3, #25
 8022878:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 802287c:	0650      	lsls	r0, r2, #25
 802287e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8022882:	1a14      	subs	r4, r2, r0
 8022884:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8022888:	eb63 0301 	sbc.w	r3, r3, r1
 802288c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8022890:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8022894:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 8022898:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 802289c:	f112 7880 	adds.w	r8, r2, #16777216	; 0x1000000
 80228a0:	f143 0900 	adc.w	r9, r3, #0
 80228a4:	f04f 0200 	mov.w	r2, #0
 80228a8:	f04f 0300 	mov.w	r3, #0
 80228ac:	ea4f 6258 	mov.w	r2, r8, lsr #25
 80228b0:	ea42 12c9 	orr.w	r2, r2, r9, lsl #7
 80228b4:	ea4f 6369 	mov.w	r3, r9, asr #25
 80228b8:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
    h2 += carry1;
 80228bc:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 80228c0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80228c4:	1884      	adds	r4, r0, r2
 80228c6:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80228ca:	eb41 0303 	adc.w	r3, r1, r3
 80228ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80228d2:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80228d6:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
    h1 -= carry1 << 25;
 80228da:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80228de:	f04f 0000 	mov.w	r0, #0
 80228e2:	f04f 0100 	mov.w	r1, #0
 80228e6:	0659      	lsls	r1, r3, #25
 80228e8:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80228ec:	0650      	lsls	r0, r2, #25
 80228ee:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80228f2:	1a14      	subs	r4, r2, r0
 80228f4:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 80228f8:	eb63 0301 	sbc.w	r3, r3, r1
 80228fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8022900:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8022904:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 8022908:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 802290c:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8022910:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8022914:	f143 0300 	adc.w	r3, r3, #0
 8022918:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 802291c:	f04f 0200 	mov.w	r2, #0
 8022920:	f04f 0300 	mov.w	r3, #0
 8022924:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8022928:	4621      	mov	r1, r4
 802292a:	0e4a      	lsrs	r2, r1, #25
 802292c:	4629      	mov	r1, r5
 802292e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8022932:	4629      	mov	r1, r5
 8022934:	164b      	asrs	r3, r1, #25
 8022936:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
    h4 += carry3;
 802293a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 802293e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8022942:	1884      	adds	r4, r0, r2
 8022944:	67bc      	str	r4, [r7, #120]	; 0x78
 8022946:	eb41 0303 	adc.w	r3, r1, r3
 802294a:	67fb      	str	r3, [r7, #124]	; 0x7c
 802294c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8022950:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
    h3 -= carry3 << 25;
 8022954:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8022958:	f04f 0000 	mov.w	r0, #0
 802295c:	f04f 0100 	mov.w	r1, #0
 8022960:	0659      	lsls	r1, r3, #25
 8022962:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8022966:	0650      	lsls	r0, r2, #25
 8022968:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 802296c:	1a14      	subs	r4, r2, r0
 802296e:	673c      	str	r4, [r7, #112]	; 0x70
 8022970:	eb63 0301 	sbc.w	r3, r3, r1
 8022974:	677b      	str	r3, [r7, #116]	; 0x74
 8022976:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 802297a:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 802297e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8022982:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8022986:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 802298a:	f143 0300 	adc.w	r3, r3, #0
 802298e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8022992:	f04f 0200 	mov.w	r2, #0
 8022996:	f04f 0300 	mov.w	r3, #0
 802299a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 802299e:	4621      	mov	r1, r4
 80229a0:	0e4a      	lsrs	r2, r1, #25
 80229a2:	4629      	mov	r1, r5
 80229a4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80229a8:	4629      	mov	r1, r5
 80229aa:	164b      	asrs	r3, r1, #25
 80229ac:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
    h6 += carry5;
 80229b0:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 80229b4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80229b8:	1884      	adds	r4, r0, r2
 80229ba:	66bc      	str	r4, [r7, #104]	; 0x68
 80229bc:	eb41 0303 	adc.w	r3, r1, r3
 80229c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80229c2:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80229c6:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
    h5 -= carry5 << 25;
 80229ca:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80229ce:	f04f 0000 	mov.w	r0, #0
 80229d2:	f04f 0100 	mov.w	r1, #0
 80229d6:	0659      	lsls	r1, r3, #25
 80229d8:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80229dc:	0650      	lsls	r0, r2, #25
 80229de:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80229e2:	1a14      	subs	r4, r2, r0
 80229e4:	663c      	str	r4, [r7, #96]	; 0x60
 80229e6:	eb63 0301 	sbc.w	r3, r3, r1
 80229ea:	667b      	str	r3, [r7, #100]	; 0x64
 80229ec:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80229f0:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 80229f4:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80229f8:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 80229fc:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8022a00:	f143 0300 	adc.w	r3, r3, #0
 8022a04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8022a08:	f04f 0200 	mov.w	r2, #0
 8022a0c:	f04f 0300 	mov.w	r3, #0
 8022a10:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8022a14:	4621      	mov	r1, r4
 8022a16:	0e4a      	lsrs	r2, r1, #25
 8022a18:	4629      	mov	r1, r5
 8022a1a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8022a1e:	4629      	mov	r1, r5
 8022a20:	164b      	asrs	r3, r1, #25
 8022a22:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    h8 += carry7;
 8022a26:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8022a2a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8022a2e:	1884      	adds	r4, r0, r2
 8022a30:	65bc      	str	r4, [r7, #88]	; 0x58
 8022a32:	eb41 0303 	adc.w	r3, r1, r3
 8022a36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8022a38:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8022a3c:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    h7 -= carry7 << 25;
 8022a40:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8022a44:	f04f 0000 	mov.w	r0, #0
 8022a48:	f04f 0100 	mov.w	r1, #0
 8022a4c:	0659      	lsls	r1, r3, #25
 8022a4e:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8022a52:	0650      	lsls	r0, r2, #25
 8022a54:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8022a58:	1a14      	subs	r4, r2, r0
 8022a5a:	653c      	str	r4, [r7, #80]	; 0x50
 8022a5c:	eb63 0301 	sbc.w	r3, r3, r1
 8022a60:	657b      	str	r3, [r7, #84]	; 0x54
 8022a62:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8022a66:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8022a6a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8022a6e:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8022a72:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8022a76:	f143 0300 	adc.w	r3, r3, #0
 8022a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8022a7e:	f04f 0200 	mov.w	r2, #0
 8022a82:	f04f 0300 	mov.w	r3, #0
 8022a86:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8022a8a:	4621      	mov	r1, r4
 8022a8c:	0e8a      	lsrs	r2, r1, #26
 8022a8e:	4629      	mov	r1, r5
 8022a90:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8022a94:	4629      	mov	r1, r5
 8022a96:	168b      	asrs	r3, r1, #26
 8022a98:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
    h1 += carry0;
 8022a9c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8022aa0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8022aa4:	1884      	adds	r4, r0, r2
 8022aa6:	64bc      	str	r4, [r7, #72]	; 0x48
 8022aa8:	eb41 0303 	adc.w	r3, r1, r3
 8022aac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8022aae:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8022ab2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
    h0 -= carry0 << 26;
 8022ab6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8022aba:	f04f 0000 	mov.w	r0, #0
 8022abe:	f04f 0100 	mov.w	r1, #0
 8022ac2:	0699      	lsls	r1, r3, #26
 8022ac4:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8022ac8:	0690      	lsls	r0, r2, #26
 8022aca:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8022ace:	1a14      	subs	r4, r2, r0
 8022ad0:	643c      	str	r4, [r7, #64]	; 0x40
 8022ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8022ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8022ad8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8022adc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 8022ae0:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8022ae4:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8022ae8:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8022aec:	f143 0300 	adc.w	r3, r3, #0
 8022af0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8022af4:	f04f 0200 	mov.w	r2, #0
 8022af8:	f04f 0300 	mov.w	r3, #0
 8022afc:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8022b00:	4621      	mov	r1, r4
 8022b02:	0e8a      	lsrs	r2, r1, #26
 8022b04:	4629      	mov	r1, r5
 8022b06:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8022b0a:	4629      	mov	r1, r5
 8022b0c:	168b      	asrs	r3, r1, #26
 8022b0e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
    h3 += carry2;
 8022b12:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8022b16:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8022b1a:	1884      	adds	r4, r0, r2
 8022b1c:	63bc      	str	r4, [r7, #56]	; 0x38
 8022b1e:	eb41 0303 	adc.w	r3, r1, r3
 8022b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8022b24:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8022b28:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
    h2 -= carry2 << 26;
 8022b2c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8022b30:	f04f 0000 	mov.w	r0, #0
 8022b34:	f04f 0100 	mov.w	r1, #0
 8022b38:	0699      	lsls	r1, r3, #26
 8022b3a:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8022b3e:	0690      	lsls	r0, r2, #26
 8022b40:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8022b44:	1a14      	subs	r4, r2, r0
 8022b46:	633c      	str	r4, [r7, #48]	; 0x30
 8022b48:	eb63 0301 	sbc.w	r3, r3, r1
 8022b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8022b4e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8022b52:	e9c7 3460 	strd	r3, r4, [r7, #384]	; 0x180
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8022b56:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8022b5a:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8022b5e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8022b62:	f143 0300 	adc.w	r3, r3, #0
 8022b66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8022b6a:	f04f 0200 	mov.w	r2, #0
 8022b6e:	f04f 0300 	mov.w	r3, #0
 8022b72:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8022b76:	4621      	mov	r1, r4
 8022b78:	0e8a      	lsrs	r2, r1, #26
 8022b7a:	4629      	mov	r1, r5
 8022b7c:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8022b80:	4629      	mov	r1, r5
 8022b82:	168b      	asrs	r3, r1, #26
 8022b84:	e002      	b.n	8022b8c <fe_frombytes+0x504>
 8022b86:	bf00      	nop
 8022b88:	01fffffc 	.word	0x01fffffc
 8022b8c:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
    h5 += carry4;
 8022b90:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8022b94:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8022b98:	1884      	adds	r4, r0, r2
 8022b9a:	62bc      	str	r4, [r7, #40]	; 0x28
 8022b9c:	eb41 0303 	adc.w	r3, r1, r3
 8022ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022ba2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8022ba6:	e9c7 345a 	strd	r3, r4, [r7, #360]	; 0x168
    h4 -= carry4 << 26;
 8022baa:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8022bae:	f04f 0000 	mov.w	r0, #0
 8022bb2:	f04f 0100 	mov.w	r1, #0
 8022bb6:	0699      	lsls	r1, r3, #26
 8022bb8:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8022bbc:	0690      	lsls	r0, r2, #26
 8022bbe:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8022bc2:	1a14      	subs	r4, r2, r0
 8022bc4:	623c      	str	r4, [r7, #32]
 8022bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8022bca:	627b      	str	r3, [r7, #36]	; 0x24
 8022bcc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8022bd0:	e9c7 345c 	strd	r3, r4, [r7, #368]	; 0x170
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 8022bd4:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8022bd8:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8022bdc:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8022be0:	f143 0300 	adc.w	r3, r3, #0
 8022be4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8022be8:	f04f 0200 	mov.w	r2, #0
 8022bec:	f04f 0300 	mov.w	r3, #0
 8022bf0:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8022bf4:	4621      	mov	r1, r4
 8022bf6:	0e8a      	lsrs	r2, r1, #26
 8022bf8:	4629      	mov	r1, r5
 8022bfa:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8022bfe:	4629      	mov	r1, r5
 8022c00:	168b      	asrs	r3, r1, #26
 8022c02:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
    h7 += carry6;
 8022c06:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8022c0a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8022c0e:	1884      	adds	r4, r0, r2
 8022c10:	61bc      	str	r4, [r7, #24]
 8022c12:	eb41 0303 	adc.w	r3, r1, r3
 8022c16:	61fb      	str	r3, [r7, #28]
 8022c18:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8022c1c:	e9c7 3456 	strd	r3, r4, [r7, #344]	; 0x158
    h6 -= carry6 << 26;
 8022c20:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8022c24:	f04f 0200 	mov.w	r2, #0
 8022c28:	f04f 0300 	mov.w	r3, #0
 8022c2c:	068b      	lsls	r3, r1, #26
 8022c2e:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8022c32:	0682      	lsls	r2, r0, #26
 8022c34:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8022c38:	1a84      	subs	r4, r0, r2
 8022c3a:	613c      	str	r4, [r7, #16]
 8022c3c:	eb61 0303 	sbc.w	r3, r1, r3
 8022c40:	617b      	str	r3, [r7, #20]
 8022c42:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8022c46:	e9c7 3458 	strd	r3, r4, [r7, #352]	; 0x160
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 8022c4a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8022c4e:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8022c52:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8022c56:	f143 0300 	adc.w	r3, r3, #0
 8022c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8022c5e:	f04f 0200 	mov.w	r2, #0
 8022c62:	f04f 0300 	mov.w	r3, #0
 8022c66:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8022c6a:	4621      	mov	r1, r4
 8022c6c:	0e8a      	lsrs	r2, r1, #26
 8022c6e:	4629      	mov	r1, r5
 8022c70:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8022c74:	4629      	mov	r1, r5
 8022c76:	168b      	asrs	r3, r1, #26
 8022c78:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    h9 += carry8;
 8022c7c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8022c80:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8022c84:	1884      	adds	r4, r0, r2
 8022c86:	60bc      	str	r4, [r7, #8]
 8022c88:	eb41 0303 	adc.w	r3, r1, r3
 8022c8c:	60fb      	str	r3, [r7, #12]
 8022c8e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8022c92:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
    h8 -= carry8 << 26;
 8022c96:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8022c9a:	f04f 0200 	mov.w	r2, #0
 8022c9e:	f04f 0300 	mov.w	r3, #0
 8022ca2:	068b      	lsls	r3, r1, #26
 8022ca4:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8022ca8:	0682      	lsls	r2, r0, #26
 8022caa:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8022cae:	1a84      	subs	r4, r0, r2
 8022cb0:	603c      	str	r4, [r7, #0]
 8022cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8022cb6:	607b      	str	r3, [r7, #4]
 8022cb8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8022cbc:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150

    h[0] = (int32_t) h0;
 8022cc0:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8022cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022cc8:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 8022cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022cce:	3304      	adds	r3, #4
 8022cd0:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8022cd4:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 8022cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022cda:	3308      	adds	r3, #8
 8022cdc:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8022ce0:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 8022ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022ce6:	330c      	adds	r3, #12
 8022ce8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8022cec:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 8022cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022cf2:	3310      	adds	r3, #16
 8022cf4:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8022cf8:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 8022cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022cfe:	3314      	adds	r3, #20
 8022d00:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8022d04:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 8022d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d0a:	3318      	adds	r3, #24
 8022d0c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8022d10:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 8022d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d16:	331c      	adds	r3, #28
 8022d18:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8022d1c:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 8022d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d22:	3320      	adds	r3, #32
 8022d24:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8022d28:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 8022d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8022d2e:	3324      	adds	r3, #36	; 0x24
 8022d30:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8022d34:	601a      	str	r2, [r3, #0]
}
 8022d36:	bf00      	nop
 8022d38:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8022d3c:	46bd      	mov	sp, r7
 8022d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d42:	bf00      	nop

08022d44 <fe_invert>:



void fe_invert(fe out, const fe z) {
 8022d44:	b580      	push	{r7, lr}
 8022d46:	b0ac      	sub	sp, #176	; 0xb0
 8022d48:	af00      	add	r7, sp, #0
 8022d4a:	6078      	str	r0, [r7, #4]
 8022d4c:	6039      	str	r1, [r7, #0]
    fe t1;
    fe t2;
    fe t3;
    int i;

    fe_sq(t0, z);
 8022d4e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8022d52:	6839      	ldr	r1, [r7, #0]
 8022d54:	4618      	mov	r0, r3
 8022d56:	f003 f99a 	bl	802608e <fe_sq>

    for (i = 1; i < 1; ++i) {
 8022d5a:	2301      	movs	r3, #1
 8022d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022d60:	e00c      	b.n	8022d7c <fe_invert+0x38>
        fe_sq(t0, t0);
 8022d62:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8022d66:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8022d6a:	4611      	mov	r1, r2
 8022d6c:	4618      	mov	r0, r3
 8022d6e:	f003 f98e 	bl	802608e <fe_sq>
    for (i = 1; i < 1; ++i) {
 8022d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022d76:	3301      	adds	r3, #1
 8022d78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022d7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022d80:	2b00      	cmp	r3, #0
 8022d82:	ddee      	ble.n	8022d62 <fe_invert+0x1e>
    }

    fe_sq(t1, t0);
 8022d84:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8022d88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8022d8c:	4611      	mov	r1, r2
 8022d8e:	4618      	mov	r0, r3
 8022d90:	f003 f97d 	bl	802608e <fe_sq>

    for (i = 1; i < 2; ++i) {
 8022d94:	2301      	movs	r3, #1
 8022d96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022d9a:	e00c      	b.n	8022db6 <fe_invert+0x72>
        fe_sq(t1, t1);
 8022d9c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8022da0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8022da4:	4611      	mov	r1, r2
 8022da6:	4618      	mov	r0, r3
 8022da8:	f003 f971 	bl	802608e <fe_sq>
    for (i = 1; i < 2; ++i) {
 8022dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022db0:	3301      	adds	r3, #1
 8022db2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022dba:	2b01      	cmp	r3, #1
 8022dbc:	ddee      	ble.n	8022d9c <fe_invert+0x58>
    }

    fe_mul(t1, z, t1);
 8022dbe:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8022dc2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8022dc6:	6839      	ldr	r1, [r7, #0]
 8022dc8:	4618      	mov	r0, r3
 8022dca:	f000 fa51 	bl	8023270 <fe_mul>
    fe_mul(t0, t0, t1);
 8022dce:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8022dd2:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8022dd6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8022dda:	4618      	mov	r0, r3
 8022ddc:	f000 fa48 	bl	8023270 <fe_mul>
    fe_sq(t2, t0);
 8022de0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8022de4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022de8:	4611      	mov	r1, r2
 8022dea:	4618      	mov	r0, r3
 8022dec:	f003 f94f 	bl	802608e <fe_sq>

    for (i = 1; i < 1; ++i) {
 8022df0:	2301      	movs	r3, #1
 8022df2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022df6:	e00c      	b.n	8022e12 <fe_invert+0xce>
        fe_sq(t2, t2);
 8022df8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8022dfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022e00:	4611      	mov	r1, r2
 8022e02:	4618      	mov	r0, r3
 8022e04:	f003 f943 	bl	802608e <fe_sq>
    for (i = 1; i < 1; ++i) {
 8022e08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022e0c:	3301      	adds	r3, #1
 8022e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022e12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022e16:	2b00      	cmp	r3, #0
 8022e18:	ddee      	ble.n	8022df8 <fe_invert+0xb4>
    }

    fe_mul(t1, t1, t2);
 8022e1a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8022e1e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8022e22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8022e26:	4618      	mov	r0, r3
 8022e28:	f000 fa22 	bl	8023270 <fe_mul>
    fe_sq(t2, t1);
 8022e2c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8022e30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022e34:	4611      	mov	r1, r2
 8022e36:	4618      	mov	r0, r3
 8022e38:	f003 f929 	bl	802608e <fe_sq>

    for (i = 1; i < 5; ++i) {
 8022e3c:	2301      	movs	r3, #1
 8022e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022e42:	e00c      	b.n	8022e5e <fe_invert+0x11a>
        fe_sq(t2, t2);
 8022e44:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8022e48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022e4c:	4611      	mov	r1, r2
 8022e4e:	4618      	mov	r0, r3
 8022e50:	f003 f91d 	bl	802608e <fe_sq>
    for (i = 1; i < 5; ++i) {
 8022e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022e58:	3301      	adds	r3, #1
 8022e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022e62:	2b04      	cmp	r3, #4
 8022e64:	ddee      	ble.n	8022e44 <fe_invert+0x100>
    }

    fe_mul(t1, t2, t1);
 8022e66:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8022e6a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8022e6e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8022e72:	4618      	mov	r0, r3
 8022e74:	f000 f9fc 	bl	8023270 <fe_mul>
    fe_sq(t2, t1);
 8022e78:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8022e7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022e80:	4611      	mov	r1, r2
 8022e82:	4618      	mov	r0, r3
 8022e84:	f003 f903 	bl	802608e <fe_sq>

    for (i = 1; i < 10; ++i) {
 8022e88:	2301      	movs	r3, #1
 8022e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022e8e:	e00c      	b.n	8022eaa <fe_invert+0x166>
        fe_sq(t2, t2);
 8022e90:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8022e94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022e98:	4611      	mov	r1, r2
 8022e9a:	4618      	mov	r0, r3
 8022e9c:	f003 f8f7 	bl	802608e <fe_sq>
    for (i = 1; i < 10; ++i) {
 8022ea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022ea4:	3301      	adds	r3, #1
 8022ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022eae:	2b09      	cmp	r3, #9
 8022eb0:	ddee      	ble.n	8022e90 <fe_invert+0x14c>
    }

    fe_mul(t2, t2, t1);
 8022eb2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8022eb6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8022eba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022ebe:	4618      	mov	r0, r3
 8022ec0:	f000 f9d6 	bl	8023270 <fe_mul>
    fe_sq(t3, t2);
 8022ec4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8022ec8:	f107 030c 	add.w	r3, r7, #12
 8022ecc:	4611      	mov	r1, r2
 8022ece:	4618      	mov	r0, r3
 8022ed0:	f003 f8dd 	bl	802608e <fe_sq>

    for (i = 1; i < 20; ++i) {
 8022ed4:	2301      	movs	r3, #1
 8022ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022eda:	e00c      	b.n	8022ef6 <fe_invert+0x1b2>
        fe_sq(t3, t3);
 8022edc:	f107 020c 	add.w	r2, r7, #12
 8022ee0:	f107 030c 	add.w	r3, r7, #12
 8022ee4:	4611      	mov	r1, r2
 8022ee6:	4618      	mov	r0, r3
 8022ee8:	f003 f8d1 	bl	802608e <fe_sq>
    for (i = 1; i < 20; ++i) {
 8022eec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022ef0:	3301      	adds	r3, #1
 8022ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022efa:	2b13      	cmp	r3, #19
 8022efc:	ddee      	ble.n	8022edc <fe_invert+0x198>
    }

    fe_mul(t2, t3, t2);
 8022efe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8022f02:	f107 010c 	add.w	r1, r7, #12
 8022f06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022f0a:	4618      	mov	r0, r3
 8022f0c:	f000 f9b0 	bl	8023270 <fe_mul>
    fe_sq(t2, t2);
 8022f10:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8022f14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022f18:	4611      	mov	r1, r2
 8022f1a:	4618      	mov	r0, r3
 8022f1c:	f003 f8b7 	bl	802608e <fe_sq>

    for (i = 1; i < 10; ++i) {
 8022f20:	2301      	movs	r3, #1
 8022f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022f26:	e00c      	b.n	8022f42 <fe_invert+0x1fe>
        fe_sq(t2, t2);
 8022f28:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8022f2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022f30:	4611      	mov	r1, r2
 8022f32:	4618      	mov	r0, r3
 8022f34:	f003 f8ab 	bl	802608e <fe_sq>
    for (i = 1; i < 10; ++i) {
 8022f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022f3c:	3301      	adds	r3, #1
 8022f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022f46:	2b09      	cmp	r3, #9
 8022f48:	ddee      	ble.n	8022f28 <fe_invert+0x1e4>
    }

    fe_mul(t1, t2, t1);
 8022f4a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8022f4e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8022f52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8022f56:	4618      	mov	r0, r3
 8022f58:	f000 f98a 	bl	8023270 <fe_mul>
    fe_sq(t2, t1);
 8022f5c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8022f60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022f64:	4611      	mov	r1, r2
 8022f66:	4618      	mov	r0, r3
 8022f68:	f003 f891 	bl	802608e <fe_sq>

    for (i = 1; i < 50; ++i) {
 8022f6c:	2301      	movs	r3, #1
 8022f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022f72:	e00c      	b.n	8022f8e <fe_invert+0x24a>
        fe_sq(t2, t2);
 8022f74:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8022f78:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022f7c:	4611      	mov	r1, r2
 8022f7e:	4618      	mov	r0, r3
 8022f80:	f003 f885 	bl	802608e <fe_sq>
    for (i = 1; i < 50; ++i) {
 8022f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022f88:	3301      	adds	r3, #1
 8022f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022f8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022f92:	2b31      	cmp	r3, #49	; 0x31
 8022f94:	ddee      	ble.n	8022f74 <fe_invert+0x230>
    }

    fe_mul(t2, t2, t1);
 8022f96:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8022f9a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8022f9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022fa2:	4618      	mov	r0, r3
 8022fa4:	f000 f964 	bl	8023270 <fe_mul>
    fe_sq(t3, t2);
 8022fa8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8022fac:	f107 030c 	add.w	r3, r7, #12
 8022fb0:	4611      	mov	r1, r2
 8022fb2:	4618      	mov	r0, r3
 8022fb4:	f003 f86b 	bl	802608e <fe_sq>

    for (i = 1; i < 100; ++i) {
 8022fb8:	2301      	movs	r3, #1
 8022fba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022fbe:	e00c      	b.n	8022fda <fe_invert+0x296>
        fe_sq(t3, t3);
 8022fc0:	f107 020c 	add.w	r2, r7, #12
 8022fc4:	f107 030c 	add.w	r3, r7, #12
 8022fc8:	4611      	mov	r1, r2
 8022fca:	4618      	mov	r0, r3
 8022fcc:	f003 f85f 	bl	802608e <fe_sq>
    for (i = 1; i < 100; ++i) {
 8022fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022fd4:	3301      	adds	r3, #1
 8022fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8022fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8022fde:	2b63      	cmp	r3, #99	; 0x63
 8022fe0:	ddee      	ble.n	8022fc0 <fe_invert+0x27c>
    }

    fe_mul(t2, t3, t2);
 8022fe2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8022fe6:	f107 010c 	add.w	r1, r7, #12
 8022fea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022fee:	4618      	mov	r0, r3
 8022ff0:	f000 f93e 	bl	8023270 <fe_mul>
    fe_sq(t2, t2);
 8022ff4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8022ff8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8022ffc:	4611      	mov	r1, r2
 8022ffe:	4618      	mov	r0, r3
 8023000:	f003 f845 	bl	802608e <fe_sq>

    for (i = 1; i < 50; ++i) {
 8023004:	2301      	movs	r3, #1
 8023006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802300a:	e00c      	b.n	8023026 <fe_invert+0x2e2>
        fe_sq(t2, t2);
 802300c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8023010:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8023014:	4611      	mov	r1, r2
 8023016:	4618      	mov	r0, r3
 8023018:	f003 f839 	bl	802608e <fe_sq>
    for (i = 1; i < 50; ++i) {
 802301c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8023020:	3301      	adds	r3, #1
 8023022:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802302a:	2b31      	cmp	r3, #49	; 0x31
 802302c:	ddee      	ble.n	802300c <fe_invert+0x2c8>
    }

    fe_mul(t1, t2, t1);
 802302e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8023032:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8023036:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802303a:	4618      	mov	r0, r3
 802303c:	f000 f918 	bl	8023270 <fe_mul>
    fe_sq(t1, t1);
 8023040:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8023044:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023048:	4611      	mov	r1, r2
 802304a:	4618      	mov	r0, r3
 802304c:	f003 f81f 	bl	802608e <fe_sq>

    for (i = 1; i < 5; ++i) {
 8023050:	2301      	movs	r3, #1
 8023052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023056:	e00c      	b.n	8023072 <fe_invert+0x32e>
        fe_sq(t1, t1);
 8023058:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802305c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023060:	4611      	mov	r1, r2
 8023062:	4618      	mov	r0, r3
 8023064:	f003 f813 	bl	802608e <fe_sq>
    for (i = 1; i < 5; ++i) {
 8023068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802306c:	3301      	adds	r3, #1
 802306e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8023076:	2b04      	cmp	r3, #4
 8023078:	ddee      	ble.n	8023058 <fe_invert+0x314>
    }

    fe_mul(out, t1, t0);
 802307a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 802307e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8023082:	4619      	mov	r1, r3
 8023084:	6878      	ldr	r0, [r7, #4]
 8023086:	f000 f8f3 	bl	8023270 <fe_mul>
}
 802308a:	bf00      	nop
 802308c:	37b0      	adds	r7, #176	; 0xb0
 802308e:	46bd      	mov	sp, r7
 8023090:	bd80      	pop	{r7, pc}

08023092 <fe_isnegative>:

    Preconditions:
       |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

int fe_isnegative(const fe f) {
 8023092:	b580      	push	{r7, lr}
 8023094:	b08a      	sub	sp, #40	; 0x28
 8023096:	af00      	add	r7, sp, #0
 8023098:	6078      	str	r0, [r7, #4]
    unsigned char s[32];

    fe_tobytes(s, f);
 802309a:	f107 0308 	add.w	r3, r7, #8
 802309e:	6879      	ldr	r1, [r7, #4]
 80230a0:	4618      	mov	r0, r3
 80230a2:	f006 f8e2 	bl	802926a <fe_tobytes>
    
    return s[0] & 1;
 80230a6:	7a3b      	ldrb	r3, [r7, #8]
 80230a8:	f003 0301 	and.w	r3, r3, #1
}
 80230ac:	4618      	mov	r0, r3
 80230ae:	3728      	adds	r7, #40	; 0x28
 80230b0:	46bd      	mov	sp, r7
 80230b2:	bd80      	pop	{r7, pc}

080230b4 <fe_isnonzero>:

    Preconditions:
       |f| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

int fe_isnonzero(const fe f) {
 80230b4:	b580      	push	{r7, lr}
 80230b6:	b08c      	sub	sp, #48	; 0x30
 80230b8:	af00      	add	r7, sp, #0
 80230ba:	6078      	str	r0, [r7, #4]
    unsigned char s[32];
    unsigned char r;

    fe_tobytes(s, f);
 80230bc:	f107 030c 	add.w	r3, r7, #12
 80230c0:	6879      	ldr	r1, [r7, #4]
 80230c2:	4618      	mov	r0, r3
 80230c4:	f006 f8d1 	bl	802926a <fe_tobytes>

    r = s[0];
 80230c8:	7b3b      	ldrb	r3, [r7, #12]
 80230ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    #define F(i) r |= s[i]
    F(1);
 80230ce:	7b7a      	ldrb	r2, [r7, #13]
 80230d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80230d4:	4313      	orrs	r3, r2
 80230d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(2);
 80230da:	7bba      	ldrb	r2, [r7, #14]
 80230dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80230e0:	4313      	orrs	r3, r2
 80230e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(3);
 80230e6:	7bfa      	ldrb	r2, [r7, #15]
 80230e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80230ec:	4313      	orrs	r3, r2
 80230ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(4);
 80230f2:	7c3a      	ldrb	r2, [r7, #16]
 80230f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80230f8:	4313      	orrs	r3, r2
 80230fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(5);
 80230fe:	7c7a      	ldrb	r2, [r7, #17]
 8023100:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023104:	4313      	orrs	r3, r2
 8023106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(6);
 802310a:	7cba      	ldrb	r2, [r7, #18]
 802310c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023110:	4313      	orrs	r3, r2
 8023112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(7);
 8023116:	7cfa      	ldrb	r2, [r7, #19]
 8023118:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802311c:	4313      	orrs	r3, r2
 802311e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(8);
 8023122:	7d3a      	ldrb	r2, [r7, #20]
 8023124:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023128:	4313      	orrs	r3, r2
 802312a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(9);
 802312e:	7d7a      	ldrb	r2, [r7, #21]
 8023130:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023134:	4313      	orrs	r3, r2
 8023136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(10);
 802313a:	7dba      	ldrb	r2, [r7, #22]
 802313c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023140:	4313      	orrs	r3, r2
 8023142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(11);
 8023146:	7dfa      	ldrb	r2, [r7, #23]
 8023148:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802314c:	4313      	orrs	r3, r2
 802314e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(12);
 8023152:	7e3a      	ldrb	r2, [r7, #24]
 8023154:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023158:	4313      	orrs	r3, r2
 802315a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(13);
 802315e:	7e7a      	ldrb	r2, [r7, #25]
 8023160:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023164:	4313      	orrs	r3, r2
 8023166:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(14);
 802316a:	7eba      	ldrb	r2, [r7, #26]
 802316c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023170:	4313      	orrs	r3, r2
 8023172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(15);
 8023176:	7efa      	ldrb	r2, [r7, #27]
 8023178:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802317c:	4313      	orrs	r3, r2
 802317e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(16);
 8023182:	7f3a      	ldrb	r2, [r7, #28]
 8023184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023188:	4313      	orrs	r3, r2
 802318a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(17);
 802318e:	7f7a      	ldrb	r2, [r7, #29]
 8023190:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023194:	4313      	orrs	r3, r2
 8023196:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(18);
 802319a:	7fba      	ldrb	r2, [r7, #30]
 802319c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80231a0:	4313      	orrs	r3, r2
 80231a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(19);
 80231a6:	7ffa      	ldrb	r2, [r7, #31]
 80231a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80231ac:	4313      	orrs	r3, r2
 80231ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(20);
 80231b2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80231b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80231ba:	4313      	orrs	r3, r2
 80231bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(21);
 80231c0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80231c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80231c8:	4313      	orrs	r3, r2
 80231ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(22);
 80231ce:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80231d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80231d6:	4313      	orrs	r3, r2
 80231d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(23);
 80231dc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80231e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80231e4:	4313      	orrs	r3, r2
 80231e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(24);
 80231ea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80231ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80231f2:	4313      	orrs	r3, r2
 80231f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(25);
 80231f8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80231fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023200:	4313      	orrs	r3, r2
 8023202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(26);
 8023206:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802320a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802320e:	4313      	orrs	r3, r2
 8023210:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(27);
 8023214:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8023218:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802321c:	4313      	orrs	r3, r2
 802321e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(28);
 8023222:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8023226:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802322a:	4313      	orrs	r3, r2
 802322c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(29);
 8023230:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8023234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023238:	4313      	orrs	r3, r2
 802323a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(30);
 802323e:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8023242:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023246:	4313      	orrs	r3, r2
 8023248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    F(31);
 802324c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8023250:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8023254:	4313      	orrs	r3, r2
 8023256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    #undef F

    return r != 0;
 802325a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802325e:	2b00      	cmp	r3, #0
 8023260:	bf14      	ite	ne
 8023262:	2301      	movne	r3, #1
 8023264:	2300      	moveq	r3, #0
 8023266:	b2db      	uxtb	r3, r3
}
 8023268:	4618      	mov	r0, r3
 802326a:	3730      	adds	r7, #48	; 0x30
 802326c:	46bd      	mov	sp, r7
 802326e:	bd80      	pop	{r7, pc}

08023270 <fe_mul>:
    Can get away with 11 carries, but then data flow is much deeper.

    With tighter constraints on inputs can squeeze carries into int32.
*/

void fe_mul(fe h, const fe f, const fe g) {
 8023270:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8023274:	f6ad 0d4c 	subw	sp, sp, #2124	; 0x84c
 8023278:	af00      	add	r7, sp, #0
 802327a:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 802327e:	6018      	str	r0, [r3, #0]
 8023280:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8023284:	6019      	str	r1, [r3, #0]
 8023286:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 802328a:	601a      	str	r2, [r3, #0]
    int32_t f0 = f[0];
 802328c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8023290:	681b      	ldr	r3, [r3, #0]
 8023292:	681b      	ldr	r3, [r3, #0]
 8023294:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
    int32_t f1 = f[1];
 8023298:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 802329c:	681b      	ldr	r3, [r3, #0]
 802329e:	685b      	ldr	r3, [r3, #4]
 80232a0:	f8c7 3840 	str.w	r3, [r7, #2112]	; 0x840
    int32_t f2 = f[2];
 80232a4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80232a8:	681b      	ldr	r3, [r3, #0]
 80232aa:	689b      	ldr	r3, [r3, #8]
 80232ac:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
    int32_t f3 = f[3];
 80232b0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80232b4:	681b      	ldr	r3, [r3, #0]
 80232b6:	68db      	ldr	r3, [r3, #12]
 80232b8:	f8c7 3838 	str.w	r3, [r7, #2104]	; 0x838
    int32_t f4 = f[4];
 80232bc:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80232c0:	681b      	ldr	r3, [r3, #0]
 80232c2:	691b      	ldr	r3, [r3, #16]
 80232c4:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
    int32_t f5 = f[5];
 80232c8:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80232cc:	681b      	ldr	r3, [r3, #0]
 80232ce:	695b      	ldr	r3, [r3, #20]
 80232d0:	f8c7 3830 	str.w	r3, [r7, #2096]	; 0x830
    int32_t f6 = f[6];
 80232d4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80232d8:	681b      	ldr	r3, [r3, #0]
 80232da:	699b      	ldr	r3, [r3, #24]
 80232dc:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
    int32_t f7 = f[7];
 80232e0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80232e4:	681b      	ldr	r3, [r3, #0]
 80232e6:	69db      	ldr	r3, [r3, #28]
 80232e8:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
    int32_t f8 = f[8];
 80232ec:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80232f0:	681b      	ldr	r3, [r3, #0]
 80232f2:	6a1b      	ldr	r3, [r3, #32]
 80232f4:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
    int32_t f9 = f[9];
 80232f8:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80232fc:	681b      	ldr	r3, [r3, #0]
 80232fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023300:	f8c7 3820 	str.w	r3, [r7, #2080]	; 0x820
    int32_t g0 = g[0];
 8023304:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023308:	681b      	ldr	r3, [r3, #0]
 802330a:	681b      	ldr	r3, [r3, #0]
 802330c:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
    int32_t g1 = g[1];
 8023310:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023314:	681b      	ldr	r3, [r3, #0]
 8023316:	685b      	ldr	r3, [r3, #4]
 8023318:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
    int32_t g2 = g[2];
 802331c:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023320:	681b      	ldr	r3, [r3, #0]
 8023322:	689b      	ldr	r3, [r3, #8]
 8023324:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
    int32_t g3 = g[3];
 8023328:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 802332c:	681b      	ldr	r3, [r3, #0]
 802332e:	68db      	ldr	r3, [r3, #12]
 8023330:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
    int32_t g4 = g[4];
 8023334:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023338:	681b      	ldr	r3, [r3, #0]
 802333a:	691b      	ldr	r3, [r3, #16]
 802333c:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
    int32_t g5 = g[5];
 8023340:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023344:	681b      	ldr	r3, [r3, #0]
 8023346:	695b      	ldr	r3, [r3, #20]
 8023348:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
    int32_t g6 = g[6];
 802334c:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023350:	681b      	ldr	r3, [r3, #0]
 8023352:	699b      	ldr	r3, [r3, #24]
 8023354:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
    int32_t g7 = g[7];
 8023358:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 802335c:	681b      	ldr	r3, [r3, #0]
 802335e:	69db      	ldr	r3, [r3, #28]
 8023360:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
    int32_t g8 = g[8];
 8023364:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023368:	681b      	ldr	r3, [r3, #0]
 802336a:	6a1b      	ldr	r3, [r3, #32]
 802336c:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
    int32_t g9 = g[9];
 8023370:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8023374:	681b      	ldr	r3, [r3, #0]
 8023376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023378:	f8c7 37f8 	str.w	r3, [r7, #2040]	; 0x7f8
    int32_t g1_19 = 19 * g1; /* 1.959375*2^29 */
 802337c:	f8d7 2818 	ldr.w	r2, [r7, #2072]	; 0x818
 8023380:	4613      	mov	r3, r2
 8023382:	00db      	lsls	r3, r3, #3
 8023384:	4413      	add	r3, r2
 8023386:	005b      	lsls	r3, r3, #1
 8023388:	4413      	add	r3, r2
 802338a:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
    int32_t g2_19 = 19 * g2; /* 1.959375*2^30; still ok */
 802338e:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8023392:	4613      	mov	r3, r2
 8023394:	00db      	lsls	r3, r3, #3
 8023396:	4413      	add	r3, r2
 8023398:	005b      	lsls	r3, r3, #1
 802339a:	4413      	add	r3, r2
 802339c:	f8c7 37f0 	str.w	r3, [r7, #2032]	; 0x7f0
    int32_t g3_19 = 19 * g3;
 80233a0:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 80233a4:	4613      	mov	r3, r2
 80233a6:	00db      	lsls	r3, r3, #3
 80233a8:	4413      	add	r3, r2
 80233aa:	005b      	lsls	r3, r3, #1
 80233ac:	4413      	add	r3, r2
 80233ae:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
    int32_t g4_19 = 19 * g4;
 80233b2:	f8d7 280c 	ldr.w	r2, [r7, #2060]	; 0x80c
 80233b6:	4613      	mov	r3, r2
 80233b8:	00db      	lsls	r3, r3, #3
 80233ba:	4413      	add	r3, r2
 80233bc:	005b      	lsls	r3, r3, #1
 80233be:	4413      	add	r3, r2
 80233c0:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
    int32_t g5_19 = 19 * g5;
 80233c4:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 80233c8:	4613      	mov	r3, r2
 80233ca:	00db      	lsls	r3, r3, #3
 80233cc:	4413      	add	r3, r2
 80233ce:	005b      	lsls	r3, r3, #1
 80233d0:	4413      	add	r3, r2
 80233d2:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
    int32_t g6_19 = 19 * g6;
 80233d6:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 80233da:	4613      	mov	r3, r2
 80233dc:	00db      	lsls	r3, r3, #3
 80233de:	4413      	add	r3, r2
 80233e0:	005b      	lsls	r3, r3, #1
 80233e2:	4413      	add	r3, r2
 80233e4:	f8c7 37e0 	str.w	r3, [r7, #2016]	; 0x7e0
    int32_t g7_19 = 19 * g7;
 80233e8:	f8d7 2800 	ldr.w	r2, [r7, #2048]	; 0x800
 80233ec:	4613      	mov	r3, r2
 80233ee:	00db      	lsls	r3, r3, #3
 80233f0:	4413      	add	r3, r2
 80233f2:	005b      	lsls	r3, r3, #1
 80233f4:	4413      	add	r3, r2
 80233f6:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
    int32_t g8_19 = 19 * g8;
 80233fa:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	; 0x7fc
 80233fe:	4613      	mov	r3, r2
 8023400:	00db      	lsls	r3, r3, #3
 8023402:	4413      	add	r3, r2
 8023404:	005b      	lsls	r3, r3, #1
 8023406:	4413      	add	r3, r2
 8023408:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
    int32_t g9_19 = 19 * g9;
 802340c:	f8d7 27f8 	ldr.w	r2, [r7, #2040]	; 0x7f8
 8023410:	4613      	mov	r3, r2
 8023412:	00db      	lsls	r3, r3, #3
 8023414:	4413      	add	r3, r2
 8023416:	005b      	lsls	r3, r3, #1
 8023418:	4413      	add	r3, r2
 802341a:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
    int32_t f1_2 = 2 * f1;
 802341e:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8023422:	005b      	lsls	r3, r3, #1
 8023424:	f8c7 37d0 	str.w	r3, [r7, #2000]	; 0x7d0
    int32_t f3_2 = 2 * f3;
 8023428:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 802342c:	005b      	lsls	r3, r3, #1
 802342e:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
    int32_t f5_2 = 2 * f5;
 8023432:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8023436:	005b      	lsls	r3, r3, #1
 8023438:	f8c7 37c8 	str.w	r3, [r7, #1992]	; 0x7c8
    int32_t f7_2 = 2 * f7;
 802343c:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8023440:	005b      	lsls	r3, r3, #1
 8023442:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
    int32_t f9_2 = 2 * f9;
 8023446:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 802344a:	005b      	lsls	r3, r3, #1
 802344c:	f8c7 37c0 	str.w	r3, [r7, #1984]	; 0x7c0
    int64_t f0g0    = f0   * (int64_t) g0;
 8023450:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8023454:	4618      	mov	r0, r3
 8023456:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802345a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 802345e:	461a      	mov	r2, r3
 8023460:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023464:	fb02 f501 	mul.w	r5, r2, r1
 8023468:	fb00 f403 	mul.w	r4, r0, r3
 802346c:	442c      	add	r4, r5
 802346e:	fba0 2302 	umull	r2, r3, r0, r2
 8023472:	18e1      	adds	r1, r4, r3
 8023474:	460b      	mov	r3, r1
 8023476:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 802347a:	e9c1 2300 	strd	r2, r3, [r1]
 802347e:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8023482:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g1    = f0   * (int64_t) g1;
 8023486:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 802348a:	4618      	mov	r0, r3
 802348c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023490:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8023494:	461a      	mov	r2, r3
 8023496:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802349a:	fb02 f501 	mul.w	r5, r2, r1
 802349e:	fb00 f403 	mul.w	r4, r0, r3
 80234a2:	442c      	add	r4, r5
 80234a4:	fba0 2302 	umull	r2, r3, r0, r2
 80234a8:	18e1      	adds	r1, r4, r3
 80234aa:	460b      	mov	r3, r1
 80234ac:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 80234b0:	e9c1 2300 	strd	r2, r3, [r1]
 80234b4:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 80234b8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g2    = f0   * (int64_t) g2;
 80234bc:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 80234c0:	4618      	mov	r0, r3
 80234c2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80234c6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80234ca:	461a      	mov	r2, r3
 80234cc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80234d0:	fb02 f501 	mul.w	r5, r2, r1
 80234d4:	fb00 f403 	mul.w	r4, r0, r3
 80234d8:	442c      	add	r4, r5
 80234da:	fba0 2302 	umull	r2, r3, r0, r2
 80234de:	18e1      	adds	r1, r4, r3
 80234e0:	460b      	mov	r3, r1
 80234e2:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 80234e6:	e9c1 2300 	strd	r2, r3, [r1]
 80234ea:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 80234ee:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g3    = f0   * (int64_t) g3;
 80234f2:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 80234f6:	4618      	mov	r0, r3
 80234f8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80234fc:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8023500:	461a      	mov	r2, r3
 8023502:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023506:	fb02 f501 	mul.w	r5, r2, r1
 802350a:	fb00 f403 	mul.w	r4, r0, r3
 802350e:	442c      	add	r4, r5
 8023510:	fba0 2302 	umull	r2, r3, r0, r2
 8023514:	18e1      	adds	r1, r4, r3
 8023516:	460b      	mov	r3, r1
 8023518:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 802351c:	e9c1 2300 	strd	r2, r3, [r1]
 8023520:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 8023524:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g4    = f0   * (int64_t) g4;
 8023528:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 802352c:	4618      	mov	r0, r3
 802352e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023532:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8023536:	461a      	mov	r2, r3
 8023538:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802353c:	fb02 f501 	mul.w	r5, r2, r1
 8023540:	fb00 f403 	mul.w	r4, r0, r3
 8023544:	442c      	add	r4, r5
 8023546:	fba0 2302 	umull	r2, r3, r0, r2
 802354a:	18e1      	adds	r1, r4, r3
 802354c:	460b      	mov	r3, r1
 802354e:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 8023552:	e9c1 2300 	strd	r2, r3, [r1]
 8023556:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 802355a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g5    = f0   * (int64_t) g5;
 802355e:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8023562:	4618      	mov	r0, r3
 8023564:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023568:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 802356c:	461a      	mov	r2, r3
 802356e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023572:	fb02 f501 	mul.w	r5, r2, r1
 8023576:	fb00 f403 	mul.w	r4, r0, r3
 802357a:	442c      	add	r4, r5
 802357c:	fba0 2302 	umull	r2, r3, r0, r2
 8023580:	18e1      	adds	r1, r4, r3
 8023582:	460b      	mov	r3, r1
 8023584:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 8023588:	e9c1 2300 	strd	r2, r3, [r1]
 802358c:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 8023590:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g6    = f0   * (int64_t) g6;
 8023594:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8023598:	4618      	mov	r0, r3
 802359a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802359e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80235a2:	461a      	mov	r2, r3
 80235a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80235a8:	fb02 f501 	mul.w	r5, r2, r1
 80235ac:	fb00 f403 	mul.w	r4, r0, r3
 80235b0:	442c      	add	r4, r5
 80235b2:	fba0 2302 	umull	r2, r3, r0, r2
 80235b6:	18e1      	adds	r1, r4, r3
 80235b8:	460b      	mov	r3, r1
 80235ba:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 80235be:	e9c1 2300 	strd	r2, r3, [r1]
 80235c2:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 80235c6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g7    = f0   * (int64_t) g7;
 80235ca:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 80235ce:	4618      	mov	r0, r3
 80235d0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80235d4:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 80235d8:	461a      	mov	r2, r3
 80235da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80235de:	fb02 f501 	mul.w	r5, r2, r1
 80235e2:	fb00 f403 	mul.w	r4, r0, r3
 80235e6:	442c      	add	r4, r5
 80235e8:	fba0 2302 	umull	r2, r3, r0, r2
 80235ec:	18e1      	adds	r1, r4, r3
 80235ee:	460b      	mov	r3, r1
 80235f0:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 80235f4:	e9c1 2300 	strd	r2, r3, [r1]
 80235f8:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 80235fc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g8    = f0   * (int64_t) g8;
 8023600:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8023604:	4618      	mov	r0, r3
 8023606:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802360a:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 802360e:	461a      	mov	r2, r3
 8023610:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023614:	fb02 f501 	mul.w	r5, r2, r1
 8023618:	fb00 f403 	mul.w	r4, r0, r3
 802361c:	442c      	add	r4, r5
 802361e:	fba0 2302 	umull	r2, r3, r0, r2
 8023622:	18e1      	adds	r1, r4, r3
 8023624:	460b      	mov	r3, r1
 8023626:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 802362a:	e9c1 2300 	strd	r2, r3, [r1]
 802362e:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 8023632:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0g9    = f0   * (int64_t) g9;
 8023636:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 802363a:	4618      	mov	r0, r3
 802363c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023640:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	; 0x7f8
 8023644:	461a      	mov	r2, r3
 8023646:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802364a:	fb02 f501 	mul.w	r5, r2, r1
 802364e:	fb00 f403 	mul.w	r4, r0, r3
 8023652:	442c      	add	r4, r5
 8023654:	fba0 2302 	umull	r2, r3, r0, r2
 8023658:	18e1      	adds	r1, r4, r3
 802365a:	460b      	mov	r3, r1
 802365c:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 8023660:	e9c1 2300 	strd	r2, r3, [r1]
 8023664:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 8023668:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g0    = f1   * (int64_t) g0;
 802366c:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8023670:	4618      	mov	r0, r3
 8023672:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023676:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 802367a:	461a      	mov	r2, r3
 802367c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023680:	fb02 f501 	mul.w	r5, r2, r1
 8023684:	fb00 f403 	mul.w	r4, r0, r3
 8023688:	442c      	add	r4, r5
 802368a:	fba0 2302 	umull	r2, r3, r0, r2
 802368e:	18e1      	adds	r1, r4, r3
 8023690:	460b      	mov	r3, r1
 8023692:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8023696:	e9c1 2300 	strd	r2, r3, [r1]
 802369a:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 802369e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g1_2  = f1_2 * (int64_t) g1;
 80236a2:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 80236a6:	4618      	mov	r0, r3
 80236a8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80236ac:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80236b0:	461a      	mov	r2, r3
 80236b2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80236b6:	fb02 f501 	mul.w	r5, r2, r1
 80236ba:	fb00 f403 	mul.w	r4, r0, r3
 80236be:	442c      	add	r4, r5
 80236c0:	fba0 2302 	umull	r2, r3, r0, r2
 80236c4:	18e1      	adds	r1, r4, r3
 80236c6:	460b      	mov	r3, r1
 80236c8:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 80236cc:	e9c1 2300 	strd	r2, r3, [r1]
 80236d0:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 80236d4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g2    = f1   * (int64_t) g2;
 80236d8:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 80236dc:	4618      	mov	r0, r3
 80236de:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80236e2:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80236e6:	461a      	mov	r2, r3
 80236e8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80236ec:	fb02 f501 	mul.w	r5, r2, r1
 80236f0:	fb00 f403 	mul.w	r4, r0, r3
 80236f4:	442c      	add	r4, r5
 80236f6:	fba0 2302 	umull	r2, r3, r0, r2
 80236fa:	18e1      	adds	r1, r4, r3
 80236fc:	460b      	mov	r3, r1
 80236fe:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 8023702:	e9c1 2300 	strd	r2, r3, [r1]
 8023706:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 802370a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g3_2  = f1_2 * (int64_t) g3;
 802370e:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8023712:	4618      	mov	r0, r3
 8023714:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023718:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 802371c:	461a      	mov	r2, r3
 802371e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023722:	fb02 f501 	mul.w	r5, r2, r1
 8023726:	fb00 f403 	mul.w	r4, r0, r3
 802372a:	442c      	add	r4, r5
 802372c:	fba0 2302 	umull	r2, r3, r0, r2
 8023730:	18e1      	adds	r1, r4, r3
 8023732:	460b      	mov	r3, r1
 8023734:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 8023738:	e9c1 2300 	strd	r2, r3, [r1]
 802373c:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 8023740:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g4    = f1   * (int64_t) g4;
 8023744:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8023748:	4618      	mov	r0, r3
 802374a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802374e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8023752:	461a      	mov	r2, r3
 8023754:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023758:	fb02 f501 	mul.w	r5, r2, r1
 802375c:	fb00 f403 	mul.w	r4, r0, r3
 8023760:	442c      	add	r4, r5
 8023762:	fba0 2302 	umull	r2, r3, r0, r2
 8023766:	18e1      	adds	r1, r4, r3
 8023768:	460b      	mov	r3, r1
 802376a:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 802376e:	e9c1 2300 	strd	r2, r3, [r1]
 8023772:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 8023776:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g5_2  = f1_2 * (int64_t) g5;
 802377a:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 802377e:	4618      	mov	r0, r3
 8023780:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023784:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8023788:	461a      	mov	r2, r3
 802378a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802378e:	fb02 f501 	mul.w	r5, r2, r1
 8023792:	fb00 f403 	mul.w	r4, r0, r3
 8023796:	442c      	add	r4, r5
 8023798:	fba0 2302 	umull	r2, r3, r0, r2
 802379c:	18e1      	adds	r1, r4, r3
 802379e:	460b      	mov	r3, r1
 80237a0:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 80237a4:	e9c1 2300 	strd	r2, r3, [r1]
 80237a8:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 80237ac:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g6    = f1   * (int64_t) g6;
 80237b0:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 80237b4:	4618      	mov	r0, r3
 80237b6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80237ba:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80237be:	461a      	mov	r2, r3
 80237c0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80237c4:	fb02 f501 	mul.w	r5, r2, r1
 80237c8:	fb00 f403 	mul.w	r4, r0, r3
 80237cc:	442c      	add	r4, r5
 80237ce:	fba0 2302 	umull	r2, r3, r0, r2
 80237d2:	18e1      	adds	r1, r4, r3
 80237d4:	460b      	mov	r3, r1
 80237d6:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 80237da:	e9c1 2300 	strd	r2, r3, [r1]
 80237de:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 80237e2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g7_2  = f1_2 * (int64_t) g7;
 80237e6:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 80237ea:	4618      	mov	r0, r3
 80237ec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80237f0:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 80237f4:	461a      	mov	r2, r3
 80237f6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80237fa:	fb02 f501 	mul.w	r5, r2, r1
 80237fe:	fb00 f403 	mul.w	r4, r0, r3
 8023802:	442c      	add	r4, r5
 8023804:	fba0 2302 	umull	r2, r3, r0, r2
 8023808:	18e1      	adds	r1, r4, r3
 802380a:	460b      	mov	r3, r1
 802380c:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8023810:	e9c1 2300 	strd	r2, r3, [r1]
 8023814:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 8023818:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g8    = f1   * (int64_t) g8;
 802381c:	f8d7 3840 	ldr.w	r3, [r7, #2112]	; 0x840
 8023820:	4618      	mov	r0, r3
 8023822:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023826:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	; 0x7fc
 802382a:	461a      	mov	r2, r3
 802382c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023830:	fb02 f501 	mul.w	r5, r2, r1
 8023834:	fb00 f403 	mul.w	r4, r0, r3
 8023838:	442c      	add	r4, r5
 802383a:	fba0 2302 	umull	r2, r3, r0, r2
 802383e:	18e1      	adds	r1, r4, r3
 8023840:	460b      	mov	r3, r1
 8023842:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 8023846:	e9c1 2300 	strd	r2, r3, [r1]
 802384a:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 802384e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1g9_38 = f1_2 * (int64_t) g9_19;
 8023852:	f8d7 37d0 	ldr.w	r3, [r7, #2000]	; 0x7d0
 8023856:	4618      	mov	r0, r3
 8023858:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802385c:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8023860:	461a      	mov	r2, r3
 8023862:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023866:	fb02 f501 	mul.w	r5, r2, r1
 802386a:	fb00 f403 	mul.w	r4, r0, r3
 802386e:	442c      	add	r4, r5
 8023870:	fba0 2302 	umull	r2, r3, r0, r2
 8023874:	18e1      	adds	r1, r4, r3
 8023876:	460b      	mov	r3, r1
 8023878:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 802387c:	e9c1 2300 	strd	r2, r3, [r1]
 8023880:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 8023884:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g0    = f2   * (int64_t) g0;
 8023888:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 802388c:	4618      	mov	r0, r3
 802388e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023892:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8023896:	461a      	mov	r2, r3
 8023898:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802389c:	fb02 f501 	mul.w	r5, r2, r1
 80238a0:	fb00 f403 	mul.w	r4, r0, r3
 80238a4:	442c      	add	r4, r5
 80238a6:	fba0 2302 	umull	r2, r3, r0, r2
 80238aa:	18e1      	adds	r1, r4, r3
 80238ac:	460b      	mov	r3, r1
 80238ae:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 80238b2:	e9c1 2300 	strd	r2, r3, [r1]
 80238b6:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 80238ba:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g1    = f2   * (int64_t) g1;
 80238be:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80238c2:	4618      	mov	r0, r3
 80238c4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80238c8:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 80238cc:	461a      	mov	r2, r3
 80238ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80238d2:	fb02 f501 	mul.w	r5, r2, r1
 80238d6:	fb00 f403 	mul.w	r4, r0, r3
 80238da:	442c      	add	r4, r5
 80238dc:	fba0 2302 	umull	r2, r3, r0, r2
 80238e0:	18e1      	adds	r1, r4, r3
 80238e2:	460b      	mov	r3, r1
 80238e4:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 80238e8:	e9c1 2300 	strd	r2, r3, [r1]
 80238ec:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 80238f0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g2    = f2   * (int64_t) g2;
 80238f4:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80238f8:	4618      	mov	r0, r3
 80238fa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80238fe:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8023902:	461a      	mov	r2, r3
 8023904:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023908:	fb02 f501 	mul.w	r5, r2, r1
 802390c:	fb00 f403 	mul.w	r4, r0, r3
 8023910:	442c      	add	r4, r5
 8023912:	fba0 2302 	umull	r2, r3, r0, r2
 8023916:	18e1      	adds	r1, r4, r3
 8023918:	460b      	mov	r3, r1
 802391a:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 802391e:	e9c1 2300 	strd	r2, r3, [r1]
 8023922:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 8023926:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g3    = f2   * (int64_t) g3;
 802392a:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 802392e:	4618      	mov	r0, r3
 8023930:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023934:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8023938:	461a      	mov	r2, r3
 802393a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802393e:	fb02 f501 	mul.w	r5, r2, r1
 8023942:	fb00 f403 	mul.w	r4, r0, r3
 8023946:	442c      	add	r4, r5
 8023948:	fba0 2302 	umull	r2, r3, r0, r2
 802394c:	18e1      	adds	r1, r4, r3
 802394e:	460b      	mov	r3, r1
 8023950:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 8023954:	e9c1 2300 	strd	r2, r3, [r1]
 8023958:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 802395c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g4    = f2   * (int64_t) g4;
 8023960:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8023964:	4618      	mov	r0, r3
 8023966:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802396a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 802396e:	461a      	mov	r2, r3
 8023970:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023974:	fb02 f501 	mul.w	r5, r2, r1
 8023978:	fb00 f403 	mul.w	r4, r0, r3
 802397c:	442c      	add	r4, r5
 802397e:	fba0 2302 	umull	r2, r3, r0, r2
 8023982:	18e1      	adds	r1, r4, r3
 8023984:	460b      	mov	r3, r1
 8023986:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 802398a:	e9c1 2300 	strd	r2, r3, [r1]
 802398e:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 8023992:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g5    = f2   * (int64_t) g5;
 8023996:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 802399a:	4618      	mov	r0, r3
 802399c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80239a0:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 80239a4:	461a      	mov	r2, r3
 80239a6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80239aa:	fb02 f501 	mul.w	r5, r2, r1
 80239ae:	fb00 f403 	mul.w	r4, r0, r3
 80239b2:	442c      	add	r4, r5
 80239b4:	fba0 2302 	umull	r2, r3, r0, r2
 80239b8:	18e1      	adds	r1, r4, r3
 80239ba:	460b      	mov	r3, r1
 80239bc:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 80239c0:	e9c1 2300 	strd	r2, r3, [r1]
 80239c4:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 80239c8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g6    = f2   * (int64_t) g6;
 80239cc:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 80239d0:	4618      	mov	r0, r3
 80239d2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80239d6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 80239da:	461a      	mov	r2, r3
 80239dc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80239e0:	fb02 f501 	mul.w	r5, r2, r1
 80239e4:	fb00 f403 	mul.w	r4, r0, r3
 80239e8:	442c      	add	r4, r5
 80239ea:	fba0 2302 	umull	r2, r3, r0, r2
 80239ee:	18e1      	adds	r1, r4, r3
 80239f0:	460b      	mov	r3, r1
 80239f2:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 80239f6:	e9c1 2300 	strd	r2, r3, [r1]
 80239fa:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 80239fe:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g7    = f2   * (int64_t) g7;
 8023a02:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8023a06:	4618      	mov	r0, r3
 8023a08:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023a0c:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8023a10:	461a      	mov	r2, r3
 8023a12:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023a16:	fb02 f501 	mul.w	r5, r2, r1
 8023a1a:	fb00 f403 	mul.w	r4, r0, r3
 8023a1e:	442c      	add	r4, r5
 8023a20:	fba0 2302 	umull	r2, r3, r0, r2
 8023a24:	18e1      	adds	r1, r4, r3
 8023a26:	460b      	mov	r3, r1
 8023a28:	f507 61dc 	add.w	r1, r7, #1760	; 0x6e0
 8023a2c:	e9c1 2300 	strd	r2, r3, [r1]
 8023a30:	f507 61dc 	add.w	r1, r7, #1760	; 0x6e0
 8023a34:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g8_19 = f2   * (int64_t) g8_19;
 8023a38:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8023a3c:	4618      	mov	r0, r3
 8023a3e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023a42:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8023a46:	461a      	mov	r2, r3
 8023a48:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023a4c:	fb02 f501 	mul.w	r5, r2, r1
 8023a50:	fb00 f403 	mul.w	r4, r0, r3
 8023a54:	442c      	add	r4, r5
 8023a56:	fba0 2302 	umull	r2, r3, r0, r2
 8023a5a:	18e1      	adds	r1, r4, r3
 8023a5c:	460b      	mov	r3, r1
 8023a5e:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8023a62:	e9c1 2300 	strd	r2, r3, [r1]
 8023a66:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 8023a6a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2g9_19 = f2   * (int64_t) g9_19;
 8023a6e:	f8d7 383c 	ldr.w	r3, [r7, #2108]	; 0x83c
 8023a72:	4618      	mov	r0, r3
 8023a74:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023a78:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8023a7c:	461a      	mov	r2, r3
 8023a7e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023a82:	fb02 f501 	mul.w	r5, r2, r1
 8023a86:	fb00 f403 	mul.w	r4, r0, r3
 8023a8a:	442c      	add	r4, r5
 8023a8c:	fba0 2302 	umull	r2, r3, r0, r2
 8023a90:	18e1      	adds	r1, r4, r3
 8023a92:	460b      	mov	r3, r1
 8023a94:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 8023a98:	e9c1 2300 	strd	r2, r3, [r1]
 8023a9c:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 8023aa0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g0    = f3   * (int64_t) g0;
 8023aa4:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8023aa8:	4618      	mov	r0, r3
 8023aaa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023aae:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8023ab2:	461a      	mov	r2, r3
 8023ab4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023ab8:	fb02 f501 	mul.w	r5, r2, r1
 8023abc:	fb00 f403 	mul.w	r4, r0, r3
 8023ac0:	442c      	add	r4, r5
 8023ac2:	fba0 2302 	umull	r2, r3, r0, r2
 8023ac6:	18e1      	adds	r1, r4, r3
 8023ac8:	460b      	mov	r3, r1
 8023aca:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 8023ace:	e9c1 2300 	strd	r2, r3, [r1]
 8023ad2:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 8023ad6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g1_2  = f3_2 * (int64_t) g1;
 8023ada:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 8023ade:	4618      	mov	r0, r3
 8023ae0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023ae4:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8023ae8:	461a      	mov	r2, r3
 8023aea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023aee:	fb02 f501 	mul.w	r5, r2, r1
 8023af2:	fb00 f403 	mul.w	r4, r0, r3
 8023af6:	442c      	add	r4, r5
 8023af8:	fba0 2302 	umull	r2, r3, r0, r2
 8023afc:	18e1      	adds	r1, r4, r3
 8023afe:	460b      	mov	r3, r1
 8023b00:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 8023b04:	e9c1 2300 	strd	r2, r3, [r1]
 8023b08:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 8023b0c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g2    = f3   * (int64_t) g2;
 8023b10:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8023b14:	4618      	mov	r0, r3
 8023b16:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023b1a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8023b1e:	461a      	mov	r2, r3
 8023b20:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023b24:	fb02 f501 	mul.w	r5, r2, r1
 8023b28:	fb00 f403 	mul.w	r4, r0, r3
 8023b2c:	442c      	add	r4, r5
 8023b2e:	fba0 2302 	umull	r2, r3, r0, r2
 8023b32:	18e1      	adds	r1, r4, r3
 8023b34:	460b      	mov	r3, r1
 8023b36:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8023b3a:	e9c1 2300 	strd	r2, r3, [r1]
 8023b3e:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 8023b42:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g3_2  = f3_2 * (int64_t) g3;
 8023b46:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 8023b4a:	4618      	mov	r0, r3
 8023b4c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023b50:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8023b54:	461a      	mov	r2, r3
 8023b56:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023b5a:	fb02 f501 	mul.w	r5, r2, r1
 8023b5e:	fb00 f403 	mul.w	r4, r0, r3
 8023b62:	442c      	add	r4, r5
 8023b64:	fba0 2302 	umull	r2, r3, r0, r2
 8023b68:	18e1      	adds	r1, r4, r3
 8023b6a:	460b      	mov	r3, r1
 8023b6c:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8023b70:	e9c1 2300 	strd	r2, r3, [r1]
 8023b74:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 8023b78:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g4    = f3   * (int64_t) g4;
 8023b7c:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8023b80:	4618      	mov	r0, r3
 8023b82:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023b86:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8023b8a:	461a      	mov	r2, r3
 8023b8c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023b90:	fb02 f501 	mul.w	r5, r2, r1
 8023b94:	fb00 f403 	mul.w	r4, r0, r3
 8023b98:	442c      	add	r4, r5
 8023b9a:	fba0 2302 	umull	r2, r3, r0, r2
 8023b9e:	18e1      	adds	r1, r4, r3
 8023ba0:	460b      	mov	r3, r1
 8023ba2:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 8023ba6:	e9c1 2300 	strd	r2, r3, [r1]
 8023baa:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 8023bae:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g5_2  = f3_2 * (int64_t) g5;
 8023bb2:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 8023bb6:	4618      	mov	r0, r3
 8023bb8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023bbc:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8023bc0:	461a      	mov	r2, r3
 8023bc2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023bc6:	fb02 f501 	mul.w	r5, r2, r1
 8023bca:	fb00 f403 	mul.w	r4, r0, r3
 8023bce:	442c      	add	r4, r5
 8023bd0:	fba0 2302 	umull	r2, r3, r0, r2
 8023bd4:	18e1      	adds	r1, r4, r3
 8023bd6:	460b      	mov	r3, r1
 8023bd8:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8023bdc:	e9c1 2300 	strd	r2, r3, [r1]
 8023be0:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 8023be4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g6    = f3   * (int64_t) g6;
 8023be8:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8023bec:	4618      	mov	r0, r3
 8023bee:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023bf2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8023bf6:	461a      	mov	r2, r3
 8023bf8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023bfc:	fb02 f501 	mul.w	r5, r2, r1
 8023c00:	fb00 f403 	mul.w	r4, r0, r3
 8023c04:	442c      	add	r4, r5
 8023c06:	fba0 2302 	umull	r2, r3, r0, r2
 8023c0a:	18e1      	adds	r1, r4, r3
 8023c0c:	460b      	mov	r3, r1
 8023c0e:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 8023c12:	e9c1 2300 	strd	r2, r3, [r1]
 8023c16:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 8023c1a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g7_38 = f3_2 * (int64_t) g7_19;
 8023c1e:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 8023c22:	4618      	mov	r0, r3
 8023c24:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023c28:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8023c2c:	461a      	mov	r2, r3
 8023c2e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023c32:	fb02 f501 	mul.w	r5, r2, r1
 8023c36:	fb00 f403 	mul.w	r4, r0, r3
 8023c3a:	442c      	add	r4, r5
 8023c3c:	fba0 2302 	umull	r2, r3, r0, r2
 8023c40:	18e1      	adds	r1, r4, r3
 8023c42:	460b      	mov	r3, r1
 8023c44:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 8023c48:	e9c1 2300 	strd	r2, r3, [r1]
 8023c4c:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 8023c50:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g8_19 = f3   * (int64_t) g8_19;
 8023c54:	f8d7 3838 	ldr.w	r3, [r7, #2104]	; 0x838
 8023c58:	4618      	mov	r0, r3
 8023c5a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023c5e:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8023c62:	461a      	mov	r2, r3
 8023c64:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023c68:	fb02 f501 	mul.w	r5, r2, r1
 8023c6c:	fb00 f403 	mul.w	r4, r0, r3
 8023c70:	442c      	add	r4, r5
 8023c72:	fba0 2302 	umull	r2, r3, r0, r2
 8023c76:	18e1      	adds	r1, r4, r3
 8023c78:	460b      	mov	r3, r1
 8023c7a:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 8023c7e:	e9c1 2300 	strd	r2, r3, [r1]
 8023c82:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 8023c86:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3g9_38 = f3_2 * (int64_t) g9_19;
 8023c8a:	f8d7 37cc 	ldr.w	r3, [r7, #1996]	; 0x7cc
 8023c8e:	4618      	mov	r0, r3
 8023c90:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023c94:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8023c98:	461a      	mov	r2, r3
 8023c9a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023c9e:	fb02 f501 	mul.w	r5, r2, r1
 8023ca2:	fb00 f403 	mul.w	r4, r0, r3
 8023ca6:	442c      	add	r4, r5
 8023ca8:	fba0 2302 	umull	r2, r3, r0, r2
 8023cac:	18e1      	adds	r1, r4, r3
 8023cae:	460b      	mov	r3, r1
 8023cb0:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 8023cb4:	e9c1 2300 	strd	r2, r3, [r1]
 8023cb8:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 8023cbc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g0    = f4   * (int64_t) g0;
 8023cc0:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8023cc4:	4618      	mov	r0, r3
 8023cc6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023cca:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8023cce:	461a      	mov	r2, r3
 8023cd0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023cd4:	fb02 f501 	mul.w	r5, r2, r1
 8023cd8:	fb00 f403 	mul.w	r4, r0, r3
 8023cdc:	442c      	add	r4, r5
 8023cde:	fba0 2302 	umull	r2, r3, r0, r2
 8023ce2:	18e1      	adds	r1, r4, r3
 8023ce4:	460b      	mov	r3, r1
 8023ce6:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8023cea:	e9c1 2300 	strd	r2, r3, [r1]
 8023cee:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 8023cf2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g1    = f4   * (int64_t) g1;
 8023cf6:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8023cfa:	4618      	mov	r0, r3
 8023cfc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023d00:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8023d04:	461a      	mov	r2, r3
 8023d06:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023d0a:	fb02 f501 	mul.w	r5, r2, r1
 8023d0e:	fb00 f403 	mul.w	r4, r0, r3
 8023d12:	442c      	add	r4, r5
 8023d14:	fba0 2302 	umull	r2, r3, r0, r2
 8023d18:	18e1      	adds	r1, r4, r3
 8023d1a:	460b      	mov	r3, r1
 8023d1c:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 8023d20:	e9c1 2300 	strd	r2, r3, [r1]
 8023d24:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 8023d28:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g2    = f4   * (int64_t) g2;
 8023d2c:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8023d30:	4618      	mov	r0, r3
 8023d32:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023d36:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8023d3a:	461a      	mov	r2, r3
 8023d3c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023d40:	fb02 f501 	mul.w	r5, r2, r1
 8023d44:	fb00 f403 	mul.w	r4, r0, r3
 8023d48:	442c      	add	r4, r5
 8023d4a:	fba0 2302 	umull	r2, r3, r0, r2
 8023d4e:	18e1      	adds	r1, r4, r3
 8023d50:	460b      	mov	r3, r1
 8023d52:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 8023d56:	e9c1 2300 	strd	r2, r3, [r1]
 8023d5a:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 8023d5e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g3    = f4   * (int64_t) g3;
 8023d62:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8023d66:	4618      	mov	r0, r3
 8023d68:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023d6c:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8023d70:	461a      	mov	r2, r3
 8023d72:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023d76:	fb02 f501 	mul.w	r5, r2, r1
 8023d7a:	fb00 f403 	mul.w	r4, r0, r3
 8023d7e:	442c      	add	r4, r5
 8023d80:	fba0 2302 	umull	r2, r3, r0, r2
 8023d84:	18e1      	adds	r1, r4, r3
 8023d86:	460b      	mov	r3, r1
 8023d88:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8023d8c:	e9c1 2300 	strd	r2, r3, [r1]
 8023d90:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8023d94:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g4    = f4   * (int64_t) g4;
 8023d98:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8023d9c:	4618      	mov	r0, r3
 8023d9e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023da2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8023da6:	461a      	mov	r2, r3
 8023da8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023dac:	fb02 f501 	mul.w	r5, r2, r1
 8023db0:	fb00 f403 	mul.w	r4, r0, r3
 8023db4:	442c      	add	r4, r5
 8023db6:	fba0 2302 	umull	r2, r3, r0, r2
 8023dba:	18e1      	adds	r1, r4, r3
 8023dbc:	460b      	mov	r3, r1
 8023dbe:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 8023dc2:	e9c1 2300 	strd	r2, r3, [r1]
 8023dc6:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 8023dca:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g5    = f4   * (int64_t) g5;
 8023dce:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8023dd2:	4618      	mov	r0, r3
 8023dd4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023dd8:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8023ddc:	461a      	mov	r2, r3
 8023dde:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023de2:	fb02 f501 	mul.w	r5, r2, r1
 8023de6:	fb00 f403 	mul.w	r4, r0, r3
 8023dea:	442c      	add	r4, r5
 8023dec:	fba0 2302 	umull	r2, r3, r0, r2
 8023df0:	18e1      	adds	r1, r4, r3
 8023df2:	460b      	mov	r3, r1
 8023df4:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8023df8:	e9c1 2300 	strd	r2, r3, [r1]
 8023dfc:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8023e00:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g6_19 = f4   * (int64_t) g6_19;
 8023e04:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8023e08:	4618      	mov	r0, r3
 8023e0a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023e0e:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 8023e12:	461a      	mov	r2, r3
 8023e14:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023e18:	fb02 f501 	mul.w	r5, r2, r1
 8023e1c:	fb00 f403 	mul.w	r4, r0, r3
 8023e20:	442c      	add	r4, r5
 8023e22:	fba0 2302 	umull	r2, r3, r0, r2
 8023e26:	18e1      	adds	r1, r4, r3
 8023e28:	460b      	mov	r3, r1
 8023e2a:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 8023e2e:	e9c1 2300 	strd	r2, r3, [r1]
 8023e32:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 8023e36:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g7_19 = f4   * (int64_t) g7_19;
 8023e3a:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8023e3e:	4618      	mov	r0, r3
 8023e40:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023e44:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8023e48:	461a      	mov	r2, r3
 8023e4a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023e4e:	fb02 f501 	mul.w	r5, r2, r1
 8023e52:	fb00 f403 	mul.w	r4, r0, r3
 8023e56:	442c      	add	r4, r5
 8023e58:	fba0 2302 	umull	r2, r3, r0, r2
 8023e5c:	18e1      	adds	r1, r4, r3
 8023e5e:	460b      	mov	r3, r1
 8023e60:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8023e64:	e9c1 2300 	strd	r2, r3, [r1]
 8023e68:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8023e6c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g8_19 = f4   * (int64_t) g8_19;
 8023e70:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8023e74:	4618      	mov	r0, r3
 8023e76:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023e7a:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 8023e7e:	461a      	mov	r2, r3
 8023e80:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023e84:	fb02 f501 	mul.w	r5, r2, r1
 8023e88:	fb00 f403 	mul.w	r4, r0, r3
 8023e8c:	442c      	add	r4, r5
 8023e8e:	fba0 2302 	umull	r2, r3, r0, r2
 8023e92:	18e1      	adds	r1, r4, r3
 8023e94:	460b      	mov	r3, r1
 8023e96:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 8023e9a:	e9c1 2300 	strd	r2, r3, [r1]
 8023e9e:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 8023ea2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4g9_19 = f4   * (int64_t) g9_19;
 8023ea6:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8023eaa:	4618      	mov	r0, r3
 8023eac:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023eb0:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8023eb4:	461a      	mov	r2, r3
 8023eb6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023eba:	fb02 f501 	mul.w	r5, r2, r1
 8023ebe:	fb00 f403 	mul.w	r4, r0, r3
 8023ec2:	442c      	add	r4, r5
 8023ec4:	fba0 2302 	umull	r2, r3, r0, r2
 8023ec8:	18e1      	adds	r1, r4, r3
 8023eca:	460b      	mov	r3, r1
 8023ecc:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8023ed0:	e9c1 2300 	strd	r2, r3, [r1]
 8023ed4:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8023ed8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g0    = f5   * (int64_t) g0;
 8023edc:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8023ee0:	4618      	mov	r0, r3
 8023ee2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023ee6:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8023eea:	461a      	mov	r2, r3
 8023eec:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023ef0:	fb02 f501 	mul.w	r5, r2, r1
 8023ef4:	fb00 f403 	mul.w	r4, r0, r3
 8023ef8:	442c      	add	r4, r5
 8023efa:	fba0 2302 	umull	r2, r3, r0, r2
 8023efe:	18e1      	adds	r1, r4, r3
 8023f00:	460b      	mov	r3, r1
 8023f02:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 8023f06:	e9c1 2300 	strd	r2, r3, [r1]
 8023f0a:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 8023f0e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g1_2  = f5_2 * (int64_t) g1;
 8023f12:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 8023f16:	4618      	mov	r0, r3
 8023f18:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023f1c:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8023f20:	461a      	mov	r2, r3
 8023f22:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023f26:	fb02 f501 	mul.w	r5, r2, r1
 8023f2a:	fb00 f403 	mul.w	r4, r0, r3
 8023f2e:	442c      	add	r4, r5
 8023f30:	fba0 2302 	umull	r2, r3, r0, r2
 8023f34:	18e1      	adds	r1, r4, r3
 8023f36:	460b      	mov	r3, r1
 8023f38:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8023f3c:	e9c1 2300 	strd	r2, r3, [r1]
 8023f40:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8023f44:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g2    = f5   * (int64_t) g2;
 8023f48:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8023f4c:	4618      	mov	r0, r3
 8023f4e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023f52:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8023f56:	461a      	mov	r2, r3
 8023f58:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023f5c:	fb02 f501 	mul.w	r5, r2, r1
 8023f60:	fb00 f403 	mul.w	r4, r0, r3
 8023f64:	442c      	add	r4, r5
 8023f66:	fba0 2302 	umull	r2, r3, r0, r2
 8023f6a:	18e1      	adds	r1, r4, r3
 8023f6c:	460b      	mov	r3, r1
 8023f6e:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 8023f72:	e9c1 2300 	strd	r2, r3, [r1]
 8023f76:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 8023f7a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g3_2  = f5_2 * (int64_t) g3;
 8023f7e:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 8023f82:	4618      	mov	r0, r3
 8023f84:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023f88:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8023f8c:	461a      	mov	r2, r3
 8023f8e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023f92:	fb02 f501 	mul.w	r5, r2, r1
 8023f96:	fb00 f403 	mul.w	r4, r0, r3
 8023f9a:	442c      	add	r4, r5
 8023f9c:	fba0 2302 	umull	r2, r3, r0, r2
 8023fa0:	18e1      	adds	r1, r4, r3
 8023fa2:	460b      	mov	r3, r1
 8023fa4:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8023fa8:	e9c1 2300 	strd	r2, r3, [r1]
 8023fac:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8023fb0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g4    = f5   * (int64_t) g4;
 8023fb4:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8023fb8:	4618      	mov	r0, r3
 8023fba:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023fbe:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8023fc2:	461a      	mov	r2, r3
 8023fc4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023fc8:	fb02 f501 	mul.w	r5, r2, r1
 8023fcc:	fb00 f403 	mul.w	r4, r0, r3
 8023fd0:	442c      	add	r4, r5
 8023fd2:	fba0 2302 	umull	r2, r3, r0, r2
 8023fd6:	18e1      	adds	r1, r4, r3
 8023fd8:	460b      	mov	r3, r1
 8023fda:	f507 61c1 	add.w	r1, r7, #1544	; 0x608
 8023fde:	e9c1 2300 	strd	r2, r3, [r1]
 8023fe2:	f507 61c1 	add.w	r1, r7, #1544	; 0x608
 8023fe6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g5_38 = f5_2 * (int64_t) g5_19;
 8023fea:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 8023fee:	4618      	mov	r0, r3
 8023ff0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8023ff4:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8023ff8:	461a      	mov	r2, r3
 8023ffa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023ffe:	fb02 f501 	mul.w	r5, r2, r1
 8024002:	fb00 f403 	mul.w	r4, r0, r3
 8024006:	442c      	add	r4, r5
 8024008:	fba0 2302 	umull	r2, r3, r0, r2
 802400c:	18e1      	adds	r1, r4, r3
 802400e:	460b      	mov	r3, r1
 8024010:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8024014:	e9c1 2300 	strd	r2, r3, [r1]
 8024018:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 802401c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g6_19 = f5   * (int64_t) g6_19;
 8024020:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8024024:	4618      	mov	r0, r3
 8024026:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802402a:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 802402e:	461a      	mov	r2, r3
 8024030:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024034:	fb02 f501 	mul.w	r5, r2, r1
 8024038:	fb00 f403 	mul.w	r4, r0, r3
 802403c:	442c      	add	r4, r5
 802403e:	fba0 2302 	umull	r2, r3, r0, r2
 8024042:	18e1      	adds	r1, r4, r3
 8024044:	460b      	mov	r3, r1
 8024046:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 802404a:	e9c1 2300 	strd	r2, r3, [r1]
 802404e:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 8024052:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g7_38 = f5_2 * (int64_t) g7_19;
 8024056:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 802405a:	4618      	mov	r0, r3
 802405c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024060:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8024064:	461a      	mov	r2, r3
 8024066:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802406a:	fb02 f501 	mul.w	r5, r2, r1
 802406e:	fb00 f403 	mul.w	r4, r0, r3
 8024072:	442c      	add	r4, r5
 8024074:	fba0 2302 	umull	r2, r3, r0, r2
 8024078:	18e1      	adds	r1, r4, r3
 802407a:	460b      	mov	r3, r1
 802407c:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 8024080:	e9c1 2300 	strd	r2, r3, [r1]
 8024084:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 8024088:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g8_19 = f5   * (int64_t) g8_19;
 802408c:	f8d7 3830 	ldr.w	r3, [r7, #2096]	; 0x830
 8024090:	4618      	mov	r0, r3
 8024092:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024096:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 802409a:	461a      	mov	r2, r3
 802409c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80240a0:	fb02 f501 	mul.w	r5, r2, r1
 80240a4:	fb00 f403 	mul.w	r4, r0, r3
 80240a8:	442c      	add	r4, r5
 80240aa:	fba0 2302 	umull	r2, r3, r0, r2
 80240ae:	18e1      	adds	r1, r4, r3
 80240b0:	460b      	mov	r3, r1
 80240b2:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 80240b6:	e9c1 2300 	strd	r2, r3, [r1]
 80240ba:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 80240be:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f5g9_38 = f5_2 * (int64_t) g9_19;
 80240c2:	f8d7 37c8 	ldr.w	r3, [r7, #1992]	; 0x7c8
 80240c6:	4618      	mov	r0, r3
 80240c8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80240cc:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 80240d0:	461a      	mov	r2, r3
 80240d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80240d6:	fb02 f501 	mul.w	r5, r2, r1
 80240da:	fb00 f403 	mul.w	r4, r0, r3
 80240de:	442c      	add	r4, r5
 80240e0:	fba0 2302 	umull	r2, r3, r0, r2
 80240e4:	18e1      	adds	r1, r4, r3
 80240e6:	460b      	mov	r3, r1
 80240e8:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 80240ec:	e9c1 2300 	strd	r2, r3, [r1]
 80240f0:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 80240f4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g0    = f6   * (int64_t) g0;
 80240f8:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80240fc:	4618      	mov	r0, r3
 80240fe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024102:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8024106:	461a      	mov	r2, r3
 8024108:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802410c:	fb02 f501 	mul.w	r5, r2, r1
 8024110:	fb00 f403 	mul.w	r4, r0, r3
 8024114:	442c      	add	r4, r5
 8024116:	fba0 2302 	umull	r2, r3, r0, r2
 802411a:	18e1      	adds	r1, r4, r3
 802411c:	460b      	mov	r3, r1
 802411e:	f507 61bb 	add.w	r1, r7, #1496	; 0x5d8
 8024122:	e9c1 2300 	strd	r2, r3, [r1]
 8024126:	f507 61bb 	add.w	r1, r7, #1496	; 0x5d8
 802412a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g1    = f6   * (int64_t) g1;
 802412e:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8024132:	4618      	mov	r0, r3
 8024134:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024138:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 802413c:	461a      	mov	r2, r3
 802413e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024142:	fb02 f501 	mul.w	r5, r2, r1
 8024146:	fb00 f403 	mul.w	r4, r0, r3
 802414a:	442c      	add	r4, r5
 802414c:	fba0 2302 	umull	r2, r3, r0, r2
 8024150:	18e1      	adds	r1, r4, r3
 8024152:	460b      	mov	r3, r1
 8024154:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 8024158:	e9c1 2300 	strd	r2, r3, [r1]
 802415c:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 8024160:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g2    = f6   * (int64_t) g2;
 8024164:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8024168:	4618      	mov	r0, r3
 802416a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802416e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8024172:	461a      	mov	r2, r3
 8024174:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024178:	fb02 f501 	mul.w	r5, r2, r1
 802417c:	fb00 f403 	mul.w	r4, r0, r3
 8024180:	442c      	add	r4, r5
 8024182:	fba0 2302 	umull	r2, r3, r0, r2
 8024186:	18e1      	adds	r1, r4, r3
 8024188:	460b      	mov	r3, r1
 802418a:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 802418e:	e9c1 2300 	strd	r2, r3, [r1]
 8024192:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 8024196:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g3    = f6   * (int64_t) g3;
 802419a:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 802419e:	4618      	mov	r0, r3
 80241a0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80241a4:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 80241a8:	461a      	mov	r2, r3
 80241aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80241ae:	fb02 f501 	mul.w	r5, r2, r1
 80241b2:	fb00 f403 	mul.w	r4, r0, r3
 80241b6:	442c      	add	r4, r5
 80241b8:	fba0 2302 	umull	r2, r3, r0, r2
 80241bc:	18e1      	adds	r1, r4, r3
 80241be:	460b      	mov	r3, r1
 80241c0:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 80241c4:	e9c1 2300 	strd	r2, r3, [r1]
 80241c8:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 80241cc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g4_19 = f6   * (int64_t) g4_19;
 80241d0:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80241d4:	4618      	mov	r0, r3
 80241d6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80241da:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 80241de:	461a      	mov	r2, r3
 80241e0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80241e4:	fb02 f501 	mul.w	r5, r2, r1
 80241e8:	fb00 f403 	mul.w	r4, r0, r3
 80241ec:	442c      	add	r4, r5
 80241ee:	fba0 2302 	umull	r2, r3, r0, r2
 80241f2:	18e1      	adds	r1, r4, r3
 80241f4:	460b      	mov	r3, r1
 80241f6:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 80241fa:	e9c1 2300 	strd	r2, r3, [r1]
 80241fe:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8024202:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g5_19 = f6   * (int64_t) g5_19;
 8024206:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 802420a:	4618      	mov	r0, r3
 802420c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024210:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8024214:	461a      	mov	r2, r3
 8024216:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802421a:	fb02 f501 	mul.w	r5, r2, r1
 802421e:	fb00 f403 	mul.w	r4, r0, r3
 8024222:	442c      	add	r4, r5
 8024224:	fba0 2302 	umull	r2, r3, r0, r2
 8024228:	18e1      	adds	r1, r4, r3
 802422a:	460b      	mov	r3, r1
 802422c:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8024230:	e9c1 2300 	strd	r2, r3, [r1]
 8024234:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8024238:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g6_19 = f6   * (int64_t) g6_19;
 802423c:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8024240:	4618      	mov	r0, r3
 8024242:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024246:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 802424a:	461a      	mov	r2, r3
 802424c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024250:	fb02 f501 	mul.w	r5, r2, r1
 8024254:	fb00 f403 	mul.w	r4, r0, r3
 8024258:	442c      	add	r4, r5
 802425a:	fba0 2302 	umull	r2, r3, r0, r2
 802425e:	18e1      	adds	r1, r4, r3
 8024260:	460b      	mov	r3, r1
 8024262:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 8024266:	e9c1 2300 	strd	r2, r3, [r1]
 802426a:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 802426e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g7_19 = f6   * (int64_t) g7_19;
 8024272:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8024276:	4618      	mov	r0, r3
 8024278:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802427c:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 8024280:	461a      	mov	r2, r3
 8024282:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024286:	fb02 f501 	mul.w	r5, r2, r1
 802428a:	fb00 f403 	mul.w	r4, r0, r3
 802428e:	442c      	add	r4, r5
 8024290:	fba0 2302 	umull	r2, r3, r0, r2
 8024294:	18e1      	adds	r1, r4, r3
 8024296:	460b      	mov	r3, r1
 8024298:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 802429c:	e9c1 2300 	strd	r2, r3, [r1]
 80242a0:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 80242a4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g8_19 = f6   * (int64_t) g8_19;
 80242a8:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80242ac:	4618      	mov	r0, r3
 80242ae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80242b2:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 80242b6:	461a      	mov	r2, r3
 80242b8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80242bc:	fb02 f501 	mul.w	r5, r2, r1
 80242c0:	fb00 f403 	mul.w	r4, r0, r3
 80242c4:	442c      	add	r4, r5
 80242c6:	fba0 2302 	umull	r2, r3, r0, r2
 80242ca:	18e1      	adds	r1, r4, r3
 80242cc:	460b      	mov	r3, r1
 80242ce:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 80242d2:	e9c1 2300 	strd	r2, r3, [r1]
 80242d6:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 80242da:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f6g9_19 = f6   * (int64_t) g9_19;
 80242de:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 80242e2:	4618      	mov	r0, r3
 80242e4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80242e8:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 80242ec:	461a      	mov	r2, r3
 80242ee:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80242f2:	fb02 f501 	mul.w	r5, r2, r1
 80242f6:	fb00 f403 	mul.w	r4, r0, r3
 80242fa:	442c      	add	r4, r5
 80242fc:	fba0 2302 	umull	r2, r3, r0, r2
 8024300:	18e1      	adds	r1, r4, r3
 8024302:	460b      	mov	r3, r1
 8024304:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8024308:	e9c1 2300 	strd	r2, r3, [r1]
 802430c:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8024310:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g0    = f7   * (int64_t) g0;
 8024314:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8024318:	4618      	mov	r0, r3
 802431a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802431e:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8024322:	461a      	mov	r2, r3
 8024324:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024328:	fb02 f501 	mul.w	r5, r2, r1
 802432c:	fb00 f403 	mul.w	r4, r0, r3
 8024330:	442c      	add	r4, r5
 8024332:	fba0 2302 	umull	r2, r3, r0, r2
 8024336:	18e1      	adds	r1, r4, r3
 8024338:	460b      	mov	r3, r1
 802433a:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 802433e:	e9c1 2300 	strd	r2, r3, [r1]
 8024342:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8024346:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g1_2  = f7_2 * (int64_t) g1;
 802434a:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 802434e:	4618      	mov	r0, r3
 8024350:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024354:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8024358:	461a      	mov	r2, r3
 802435a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802435e:	fb02 f501 	mul.w	r5, r2, r1
 8024362:	fb00 f403 	mul.w	r4, r0, r3
 8024366:	442c      	add	r4, r5
 8024368:	fba0 2302 	umull	r2, r3, r0, r2
 802436c:	18e1      	adds	r1, r4, r3
 802436e:	460b      	mov	r3, r1
 8024370:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8024374:	e9c1 2300 	strd	r2, r3, [r1]
 8024378:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 802437c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g2    = f7   * (int64_t) g2;
 8024380:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8024384:	4618      	mov	r0, r3
 8024386:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802438a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 802438e:	461a      	mov	r2, r3
 8024390:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024394:	fb02 f501 	mul.w	r5, r2, r1
 8024398:	fb00 f403 	mul.w	r4, r0, r3
 802439c:	442c      	add	r4, r5
 802439e:	fba0 2302 	umull	r2, r3, r0, r2
 80243a2:	18e1      	adds	r1, r4, r3
 80243a4:	460b      	mov	r3, r1
 80243a6:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 80243aa:	e9c1 2300 	strd	r2, r3, [r1]
 80243ae:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 80243b2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g3_38 = f7_2 * (int64_t) g3_19;
 80243b6:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 80243ba:	4618      	mov	r0, r3
 80243bc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80243c0:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 80243c4:	461a      	mov	r2, r3
 80243c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80243ca:	fb02 f501 	mul.w	r5, r2, r1
 80243ce:	fb00 f403 	mul.w	r4, r0, r3
 80243d2:	442c      	add	r4, r5
 80243d4:	fba0 2302 	umull	r2, r3, r0, r2
 80243d8:	18e1      	adds	r1, r4, r3
 80243da:	460b      	mov	r3, r1
 80243dc:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 80243e0:	e9c1 2300 	strd	r2, r3, [r1]
 80243e4:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 80243e8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g4_19 = f7   * (int64_t) g4_19;
 80243ec:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 80243f0:	4618      	mov	r0, r3
 80243f2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80243f6:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 80243fa:	461a      	mov	r2, r3
 80243fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024400:	fb02 f501 	mul.w	r5, r2, r1
 8024404:	fb00 f403 	mul.w	r4, r0, r3
 8024408:	442c      	add	r4, r5
 802440a:	fba0 2302 	umull	r2, r3, r0, r2
 802440e:	18e1      	adds	r1, r4, r3
 8024410:	460b      	mov	r3, r1
 8024412:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 8024416:	e9c1 2300 	strd	r2, r3, [r1]
 802441a:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 802441e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g5_38 = f7_2 * (int64_t) g5_19;
 8024422:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8024426:	4618      	mov	r0, r3
 8024428:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802442c:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8024430:	461a      	mov	r2, r3
 8024432:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024436:	fb02 f501 	mul.w	r5, r2, r1
 802443a:	fb00 f403 	mul.w	r4, r0, r3
 802443e:	442c      	add	r4, r5
 8024440:	fba0 2302 	umull	r2, r3, r0, r2
 8024444:	18e1      	adds	r1, r4, r3
 8024446:	460b      	mov	r3, r1
 8024448:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 802444c:	e9c1 2300 	strd	r2, r3, [r1]
 8024450:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8024454:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g6_19 = f7   * (int64_t) g6_19;
 8024458:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 802445c:	4618      	mov	r0, r3
 802445e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024462:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 8024466:	461a      	mov	r2, r3
 8024468:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802446c:	fb02 f501 	mul.w	r5, r2, r1
 8024470:	fb00 f403 	mul.w	r4, r0, r3
 8024474:	442c      	add	r4, r5
 8024476:	fba0 2302 	umull	r2, r3, r0, r2
 802447a:	18e1      	adds	r1, r4, r3
 802447c:	460b      	mov	r3, r1
 802447e:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8024482:	e9c1 2300 	strd	r2, r3, [r1]
 8024486:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 802448a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g7_38 = f7_2 * (int64_t) g7_19;
 802448e:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 8024492:	4618      	mov	r0, r3
 8024494:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024498:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 802449c:	461a      	mov	r2, r3
 802449e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80244a2:	fb02 f501 	mul.w	r5, r2, r1
 80244a6:	fb00 f403 	mul.w	r4, r0, r3
 80244aa:	442c      	add	r4, r5
 80244ac:	fba0 2302 	umull	r2, r3, r0, r2
 80244b0:	18e1      	adds	r1, r4, r3
 80244b2:	460b      	mov	r3, r1
 80244b4:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 80244b8:	e9c1 2300 	strd	r2, r3, [r1]
 80244bc:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 80244c0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g8_19 = f7   * (int64_t) g8_19;
 80244c4:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 80244c8:	4618      	mov	r0, r3
 80244ca:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80244ce:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 80244d2:	461a      	mov	r2, r3
 80244d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80244d8:	fb02 f501 	mul.w	r5, r2, r1
 80244dc:	fb00 f403 	mul.w	r4, r0, r3
 80244e0:	442c      	add	r4, r5
 80244e2:	fba0 2302 	umull	r2, r3, r0, r2
 80244e6:	18e1      	adds	r1, r4, r3
 80244e8:	460b      	mov	r3, r1
 80244ea:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 80244ee:	e9c1 2300 	strd	r2, r3, [r1]
 80244f2:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 80244f6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f7g9_38 = f7_2 * (int64_t) g9_19;
 80244fa:	f8d7 37c4 	ldr.w	r3, [r7, #1988]	; 0x7c4
 80244fe:	4618      	mov	r0, r3
 8024500:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024504:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8024508:	461a      	mov	r2, r3
 802450a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802450e:	fb02 f501 	mul.w	r5, r2, r1
 8024512:	fb00 f403 	mul.w	r4, r0, r3
 8024516:	442c      	add	r4, r5
 8024518:	fba0 2302 	umull	r2, r3, r0, r2
 802451c:	18e1      	adds	r1, r4, r3
 802451e:	460b      	mov	r3, r1
 8024520:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 8024524:	e9c1 2300 	strd	r2, r3, [r1]
 8024528:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 802452c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g0    = f8   * (int64_t) g0;
 8024530:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8024534:	4618      	mov	r0, r3
 8024536:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802453a:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 802453e:	461a      	mov	r2, r3
 8024540:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024544:	fb02 f501 	mul.w	r5, r2, r1
 8024548:	fb00 f403 	mul.w	r4, r0, r3
 802454c:	442c      	add	r4, r5
 802454e:	fba0 2302 	umull	r2, r3, r0, r2
 8024552:	18e1      	adds	r1, r4, r3
 8024554:	460b      	mov	r3, r1
 8024556:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 802455a:	e9c1 2300 	strd	r2, r3, [r1]
 802455e:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8024562:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g1    = f8   * (int64_t) g1;
 8024566:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 802456a:	4618      	mov	r0, r3
 802456c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024570:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8024574:	461a      	mov	r2, r3
 8024576:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802457a:	fb02 f501 	mul.w	r5, r2, r1
 802457e:	fb00 f403 	mul.w	r4, r0, r3
 8024582:	442c      	add	r4, r5
 8024584:	fba0 2302 	umull	r2, r3, r0, r2
 8024588:	18e1      	adds	r1, r4, r3
 802458a:	460b      	mov	r3, r1
 802458c:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 8024590:	e9c1 2300 	strd	r2, r3, [r1]
 8024594:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 8024598:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g2_19 = f8   * (int64_t) g2_19;
 802459c:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80245a0:	4618      	mov	r0, r3
 80245a2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80245a6:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 80245aa:	461a      	mov	r2, r3
 80245ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80245b0:	fb02 f501 	mul.w	r5, r2, r1
 80245b4:	fb00 f403 	mul.w	r4, r0, r3
 80245b8:	442c      	add	r4, r5
 80245ba:	fba0 2302 	umull	r2, r3, r0, r2
 80245be:	18e1      	adds	r1, r4, r3
 80245c0:	460b      	mov	r3, r1
 80245c2:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 80245c6:	e9c1 2300 	strd	r2, r3, [r1]
 80245ca:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 80245ce:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g3_19 = f8   * (int64_t) g3_19;
 80245d2:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80245d6:	4618      	mov	r0, r3
 80245d8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80245dc:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 80245e0:	461a      	mov	r2, r3
 80245e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80245e6:	fb02 f501 	mul.w	r5, r2, r1
 80245ea:	fb00 f403 	mul.w	r4, r0, r3
 80245ee:	442c      	add	r4, r5
 80245f0:	fba0 2302 	umull	r2, r3, r0, r2
 80245f4:	18e1      	adds	r1, r4, r3
 80245f6:	460b      	mov	r3, r1
 80245f8:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 80245fc:	e9c1 2300 	strd	r2, r3, [r1]
 8024600:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 8024604:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g4_19 = f8   * (int64_t) g4_19;
 8024608:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 802460c:	4618      	mov	r0, r3
 802460e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024612:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8024616:	461a      	mov	r2, r3
 8024618:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802461c:	fb02 f501 	mul.w	r5, r2, r1
 8024620:	fb00 f403 	mul.w	r4, r0, r3
 8024624:	442c      	add	r4, r5
 8024626:	fba0 2302 	umull	r2, r3, r0, r2
 802462a:	18e1      	adds	r1, r4, r3
 802462c:	460b      	mov	r3, r1
 802462e:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8024632:	e9c1 2300 	strd	r2, r3, [r1]
 8024636:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 802463a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g5_19 = f8   * (int64_t) g5_19;
 802463e:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8024642:	4618      	mov	r0, r3
 8024644:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024648:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 802464c:	461a      	mov	r2, r3
 802464e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024652:	fb02 f501 	mul.w	r5, r2, r1
 8024656:	fb00 f403 	mul.w	r4, r0, r3
 802465a:	442c      	add	r4, r5
 802465c:	fba0 2302 	umull	r2, r3, r0, r2
 8024660:	18e1      	adds	r1, r4, r3
 8024662:	460b      	mov	r3, r1
 8024664:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8024668:	e9c1 2300 	strd	r2, r3, [r1]
 802466c:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8024670:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g6_19 = f8   * (int64_t) g6_19;
 8024674:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8024678:	4618      	mov	r0, r3
 802467a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802467e:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 8024682:	461a      	mov	r2, r3
 8024684:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024688:	fb02 f501 	mul.w	r5, r2, r1
 802468c:	fb00 f403 	mul.w	r4, r0, r3
 8024690:	442c      	add	r4, r5
 8024692:	fba0 2302 	umull	r2, r3, r0, r2
 8024696:	18e1      	adds	r1, r4, r3
 8024698:	460b      	mov	r3, r1
 802469a:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 802469e:	e9c1 2300 	strd	r2, r3, [r1]
 80246a2:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 80246a6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g7_19 = f8   * (int64_t) g7_19;
 80246aa:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80246ae:	4618      	mov	r0, r3
 80246b0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80246b4:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 80246b8:	461a      	mov	r2, r3
 80246ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80246be:	fb02 f501 	mul.w	r5, r2, r1
 80246c2:	fb00 f403 	mul.w	r4, r0, r3
 80246c6:	442c      	add	r4, r5
 80246c8:	fba0 2302 	umull	r2, r3, r0, r2
 80246cc:	18e1      	adds	r1, r4, r3
 80246ce:	460b      	mov	r3, r1
 80246d0:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 80246d4:	e9c1 2300 	strd	r2, r3, [r1]
 80246d8:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 80246dc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g8_19 = f8   * (int64_t) g8_19;
 80246e0:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 80246e4:	4618      	mov	r0, r3
 80246e6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80246ea:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 80246ee:	461a      	mov	r2, r3
 80246f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80246f4:	fb02 f501 	mul.w	r5, r2, r1
 80246f8:	fb00 f403 	mul.w	r4, r0, r3
 80246fc:	442c      	add	r4, r5
 80246fe:	fba0 2302 	umull	r2, r3, r0, r2
 8024702:	18e1      	adds	r1, r4, r3
 8024704:	460b      	mov	r3, r1
 8024706:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 802470a:	e9c1 2300 	strd	r2, r3, [r1]
 802470e:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 8024712:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f8g9_19 = f8   * (int64_t) g9_19;
 8024716:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 802471a:	4618      	mov	r0, r3
 802471c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024720:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8024724:	461a      	mov	r2, r3
 8024726:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802472a:	fb02 f501 	mul.w	r5, r2, r1
 802472e:	fb00 f403 	mul.w	r4, r0, r3
 8024732:	442c      	add	r4, r5
 8024734:	fba0 2302 	umull	r2, r3, r0, r2
 8024738:	18e1      	adds	r1, r4, r3
 802473a:	460b      	mov	r3, r1
 802473c:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8024740:	e9c1 2300 	strd	r2, r3, [r1]
 8024744:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8024748:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g0    = f9   * (int64_t) g0;
 802474c:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8024750:	4618      	mov	r0, r3
 8024752:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024756:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 802475a:	461a      	mov	r2, r3
 802475c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024760:	fb02 f501 	mul.w	r5, r2, r1
 8024764:	fb00 f403 	mul.w	r4, r0, r3
 8024768:	442c      	add	r4, r5
 802476a:	fba0 2302 	umull	r2, r3, r0, r2
 802476e:	18e1      	adds	r1, r4, r3
 8024770:	460b      	mov	r3, r1
 8024772:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 8024776:	e9c1 2300 	strd	r2, r3, [r1]
 802477a:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 802477e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g1_38 = f9_2 * (int64_t) g1_19;
 8024782:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8024786:	4618      	mov	r0, r3
 8024788:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802478c:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	; 0x7f4
 8024790:	461a      	mov	r2, r3
 8024792:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024796:	fb02 f501 	mul.w	r5, r2, r1
 802479a:	fb00 f403 	mul.w	r4, r0, r3
 802479e:	442c      	add	r4, r5
 80247a0:	fba0 2302 	umull	r2, r3, r0, r2
 80247a4:	18e1      	adds	r1, r4, r3
 80247a6:	460b      	mov	r3, r1
 80247a8:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80247ac:	e9c1 2300 	strd	r2, r3, [r1]
 80247b0:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80247b4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g2_19 = f9   * (int64_t) g2_19;
 80247b8:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 80247bc:	4618      	mov	r0, r3
 80247be:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80247c2:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 80247c6:	461a      	mov	r2, r3
 80247c8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80247cc:	fb02 f501 	mul.w	r5, r2, r1
 80247d0:	fb00 f403 	mul.w	r4, r0, r3
 80247d4:	442c      	add	r4, r5
 80247d6:	fba0 2302 	umull	r2, r3, r0, r2
 80247da:	18e1      	adds	r1, r4, r3
 80247dc:	460b      	mov	r3, r1
 80247de:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80247e2:	e9c1 2300 	strd	r2, r3, [r1]
 80247e6:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 80247ea:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g3_38 = f9_2 * (int64_t) g3_19;
 80247ee:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 80247f2:	4618      	mov	r0, r3
 80247f4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80247f8:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 80247fc:	461a      	mov	r2, r3
 80247fe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024802:	fb02 f501 	mul.w	r5, r2, r1
 8024806:	fb00 f403 	mul.w	r4, r0, r3
 802480a:	442c      	add	r4, r5
 802480c:	fba0 2302 	umull	r2, r3, r0, r2
 8024810:	18e1      	adds	r1, r4, r3
 8024812:	460b      	mov	r3, r1
 8024814:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8024818:	e9c1 2300 	strd	r2, r3, [r1]
 802481c:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8024820:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g4_19 = f9   * (int64_t) g4_19;
 8024824:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8024828:	4618      	mov	r0, r3
 802482a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802482e:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8024832:	461a      	mov	r2, r3
 8024834:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024838:	fb02 f501 	mul.w	r5, r2, r1
 802483c:	fb00 f403 	mul.w	r4, r0, r3
 8024840:	442c      	add	r4, r5
 8024842:	fba0 2302 	umull	r2, r3, r0, r2
 8024846:	18e1      	adds	r1, r4, r3
 8024848:	460b      	mov	r3, r1
 802484a:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 802484e:	e9c1 2300 	strd	r2, r3, [r1]
 8024852:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8024856:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g5_38 = f9_2 * (int64_t) g5_19;
 802485a:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 802485e:	4618      	mov	r0, r3
 8024860:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024864:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8024868:	461a      	mov	r2, r3
 802486a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802486e:	fb02 f501 	mul.w	r5, r2, r1
 8024872:	fb00 f403 	mul.w	r4, r0, r3
 8024876:	442c      	add	r4, r5
 8024878:	fba0 2302 	umull	r2, r3, r0, r2
 802487c:	18e1      	adds	r1, r4, r3
 802487e:	460b      	mov	r3, r1
 8024880:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8024884:	e9c1 2300 	strd	r2, r3, [r1]
 8024888:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 802488c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g6_19 = f9   * (int64_t) g6_19;
 8024890:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8024894:	4618      	mov	r0, r3
 8024896:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802489a:	f8d7 37e0 	ldr.w	r3, [r7, #2016]	; 0x7e0
 802489e:	461a      	mov	r2, r3
 80248a0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80248a4:	fb02 f501 	mul.w	r5, r2, r1
 80248a8:	fb00 f403 	mul.w	r4, r0, r3
 80248ac:	442c      	add	r4, r5
 80248ae:	fba0 2302 	umull	r2, r3, r0, r2
 80248b2:	18e1      	adds	r1, r4, r3
 80248b4:	460b      	mov	r3, r1
 80248b6:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 80248ba:	e9c1 2300 	strd	r2, r3, [r1]
 80248be:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 80248c2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g7_38 = f9_2 * (int64_t) g7_19;
 80248c6:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 80248ca:	4618      	mov	r0, r3
 80248cc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80248d0:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
 80248d4:	461a      	mov	r2, r3
 80248d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80248da:	fb02 f501 	mul.w	r5, r2, r1
 80248de:	fb00 f403 	mul.w	r4, r0, r3
 80248e2:	442c      	add	r4, r5
 80248e4:	fba0 2302 	umull	r2, r3, r0, r2
 80248e8:	18e1      	adds	r1, r4, r3
 80248ea:	460b      	mov	r3, r1
 80248ec:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 80248f0:	e9c1 2300 	strd	r2, r3, [r1]
 80248f4:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 80248f8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g8_19 = f9   * (int64_t) g8_19;
 80248fc:	f8d7 3820 	ldr.w	r3, [r7, #2080]	; 0x820
 8024900:	4618      	mov	r0, r3
 8024902:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8024906:	f8d7 37d8 	ldr.w	r3, [r7, #2008]	; 0x7d8
 802490a:	461a      	mov	r2, r3
 802490c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024910:	fb02 f501 	mul.w	r5, r2, r1
 8024914:	fb00 f403 	mul.w	r4, r0, r3
 8024918:	442c      	add	r4, r5
 802491a:	fba0 2302 	umull	r2, r3, r0, r2
 802491e:	18e1      	adds	r1, r4, r3
 8024920:	460b      	mov	r3, r1
 8024922:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8024926:	e9c1 2300 	strd	r2, r3, [r1]
 802492a:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 802492e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f9g9_38 = f9_2 * (int64_t) g9_19;
 8024932:	f8d7 37c0 	ldr.w	r3, [r7, #1984]	; 0x7c0
 8024936:	4618      	mov	r0, r3
 8024938:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802493c:	f8d7 37d4 	ldr.w	r3, [r7, #2004]	; 0x7d4
 8024940:	461a      	mov	r2, r3
 8024942:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8024946:	fb02 f501 	mul.w	r5, r2, r1
 802494a:	fb00 f403 	mul.w	r4, r0, r3
 802494e:	442c      	add	r4, r5
 8024950:	fba0 2302 	umull	r2, r3, r0, r2
 8024954:	18e1      	adds	r1, r4, r3
 8024956:	460b      	mov	r3, r1
 8024958:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 802495c:	e9c1 2300 	strd	r2, r3, [r1]
 8024960:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8024964:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t h0 = f0g0 + f1g9_38 + f2g8_19 + f3g7_38 + f4g6_19 + f5g5_38 + f6g4_19 + f7g3_38 + f8g2_19 + f9g1_38;
 8024968:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 802496c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024970:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8024974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024978:	1884      	adds	r4, r0, r2
 802497a:	f8c7 43e8 	str.w	r4, [r7, #1000]	; 0x3e8
 802497e:	eb41 0303 	adc.w	r3, r1, r3
 8024982:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8024986:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 802498a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802498e:	e9d7 45fa 	ldrd	r4, r5, [r7, #1000]	; 0x3e8
 8024992:	4621      	mov	r1, r4
 8024994:	1889      	adds	r1, r1, r2
 8024996:	f8c7 13e0 	str.w	r1, [r7, #992]	; 0x3e0
 802499a:	4629      	mov	r1, r5
 802499c:	eb43 0101 	adc.w	r1, r3, r1
 80249a0:	f8c7 13e4 	str.w	r1, [r7, #996]	; 0x3e4
 80249a4:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80249a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249ac:	e9d7 45f8 	ldrd	r4, r5, [r7, #992]	; 0x3e0
 80249b0:	4621      	mov	r1, r4
 80249b2:	1889      	adds	r1, r1, r2
 80249b4:	f8c7 13d8 	str.w	r1, [r7, #984]	; 0x3d8
 80249b8:	4629      	mov	r1, r5
 80249ba:	eb43 0101 	adc.w	r1, r3, r1
 80249be:	f8c7 13dc 	str.w	r1, [r7, #988]	; 0x3dc
 80249c2:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 80249c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249ca:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	; 0x3d8
 80249ce:	4621      	mov	r1, r4
 80249d0:	1889      	adds	r1, r1, r2
 80249d2:	f8c7 13d0 	str.w	r1, [r7, #976]	; 0x3d0
 80249d6:	4629      	mov	r1, r5
 80249d8:	eb43 0101 	adc.w	r1, r3, r1
 80249dc:	f8c7 13d4 	str.w	r1, [r7, #980]	; 0x3d4
 80249e0:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80249e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249e8:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	; 0x3d0
 80249ec:	4621      	mov	r1, r4
 80249ee:	1889      	adds	r1, r1, r2
 80249f0:	f8c7 13c8 	str.w	r1, [r7, #968]	; 0x3c8
 80249f4:	4629      	mov	r1, r5
 80249f6:	eb43 0101 	adc.w	r1, r3, r1
 80249fa:	f8c7 13cc 	str.w	r1, [r7, #972]	; 0x3cc
 80249fe:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8024a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a06:	e9d7 45f2 	ldrd	r4, r5, [r7, #968]	; 0x3c8
 8024a0a:	4621      	mov	r1, r4
 8024a0c:	1889      	adds	r1, r1, r2
 8024a0e:	f8c7 13c0 	str.w	r1, [r7, #960]	; 0x3c0
 8024a12:	4629      	mov	r1, r5
 8024a14:	eb43 0101 	adc.w	r1, r3, r1
 8024a18:	f8c7 13c4 	str.w	r1, [r7, #964]	; 0x3c4
 8024a1c:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8024a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a24:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	; 0x3c0
 8024a28:	4621      	mov	r1, r4
 8024a2a:	1889      	adds	r1, r1, r2
 8024a2c:	f8c7 13b8 	str.w	r1, [r7, #952]	; 0x3b8
 8024a30:	4629      	mov	r1, r5
 8024a32:	eb43 0101 	adc.w	r1, r3, r1
 8024a36:	f8c7 13bc 	str.w	r1, [r7, #956]	; 0x3bc
 8024a3a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8024a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a42:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	; 0x3b8
 8024a46:	4621      	mov	r1, r4
 8024a48:	1889      	adds	r1, r1, r2
 8024a4a:	f8c7 13b0 	str.w	r1, [r7, #944]	; 0x3b0
 8024a4e:	4629      	mov	r1, r5
 8024a50:	eb43 0101 	adc.w	r1, r3, r1
 8024a54:	f8c7 13b4 	str.w	r1, [r7, #948]	; 0x3b4
 8024a58:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8024a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a60:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	; 0x3b0
 8024a64:	4621      	mov	r1, r4
 8024a66:	1851      	adds	r1, r2, r1
 8024a68:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8024a6c:	4629      	mov	r1, r5
 8024a6e:	eb43 0101 	adc.w	r1, r3, r1
 8024a72:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8024a76:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8024a7a:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8024a7e:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h1 = f0g1 + f1g0   + f2g9_19 + f3g8_19 + f4g7_19 + f5g6_19 + f6g5_19 + f7g4_19 + f8g3_19 + f9g2_19;
 8024a82:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8024a86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024a8a:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 8024a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a92:	1884      	adds	r4, r0, r2
 8024a94:	f8c7 43a8 	str.w	r4, [r7, #936]	; 0x3a8
 8024a98:	eb41 0303 	adc.w	r3, r1, r3
 8024a9c:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8024aa0:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8024aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024aa8:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 8024aac:	4621      	mov	r1, r4
 8024aae:	1889      	adds	r1, r1, r2
 8024ab0:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 8024ab4:	4629      	mov	r1, r5
 8024ab6:	eb43 0101 	adc.w	r1, r3, r1
 8024aba:	f8c7 13a4 	str.w	r1, [r7, #932]	; 0x3a4
 8024abe:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8024ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ac6:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 8024aca:	4621      	mov	r1, r4
 8024acc:	1889      	adds	r1, r1, r2
 8024ace:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 8024ad2:	4629      	mov	r1, r5
 8024ad4:	eb43 0101 	adc.w	r1, r3, r1
 8024ad8:	f8c7 139c 	str.w	r1, [r7, #924]	; 0x39c
 8024adc:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8024ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ae4:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 8024ae8:	4621      	mov	r1, r4
 8024aea:	1889      	adds	r1, r1, r2
 8024aec:	f8c7 1390 	str.w	r1, [r7, #912]	; 0x390
 8024af0:	4629      	mov	r1, r5
 8024af2:	eb43 0101 	adc.w	r1, r3, r1
 8024af6:	f8c7 1394 	str.w	r1, [r7, #916]	; 0x394
 8024afa:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 8024afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b02:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	; 0x390
 8024b06:	4621      	mov	r1, r4
 8024b08:	1889      	adds	r1, r1, r2
 8024b0a:	f8c7 1388 	str.w	r1, [r7, #904]	; 0x388
 8024b0e:	4629      	mov	r1, r5
 8024b10:	eb43 0101 	adc.w	r1, r3, r1
 8024b14:	f8c7 138c 	str.w	r1, [r7, #908]	; 0x38c
 8024b18:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8024b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b20:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 8024b24:	4621      	mov	r1, r4
 8024b26:	1889      	adds	r1, r1, r2
 8024b28:	f8c7 1380 	str.w	r1, [r7, #896]	; 0x380
 8024b2c:	4629      	mov	r1, r5
 8024b2e:	eb43 0101 	adc.w	r1, r3, r1
 8024b32:	f8c7 1384 	str.w	r1, [r7, #900]	; 0x384
 8024b36:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8024b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b3e:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	; 0x380
 8024b42:	4621      	mov	r1, r4
 8024b44:	1889      	adds	r1, r1, r2
 8024b46:	f8c7 1378 	str.w	r1, [r7, #888]	; 0x378
 8024b4a:	4629      	mov	r1, r5
 8024b4c:	eb43 0101 	adc.w	r1, r3, r1
 8024b50:	f8c7 137c 	str.w	r1, [r7, #892]	; 0x37c
 8024b54:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8024b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b5c:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 8024b60:	4621      	mov	r1, r4
 8024b62:	1889      	adds	r1, r1, r2
 8024b64:	f8c7 1370 	str.w	r1, [r7, #880]	; 0x370
 8024b68:	4629      	mov	r1, r5
 8024b6a:	eb43 0101 	adc.w	r1, r3, r1
 8024b6e:	f8c7 1374 	str.w	r1, [r7, #884]	; 0x374
 8024b72:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8024b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b7a:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	; 0x370
 8024b7e:	4621      	mov	r1, r4
 8024b80:	1851      	adds	r1, r2, r1
 8024b82:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8024b86:	4629      	mov	r1, r5
 8024b88:	eb43 0101 	adc.w	r1, r3, r1
 8024b8c:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8024b90:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8024b94:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8024b98:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h2 = f0g2 + f1g1_2 + f2g0   + f3g9_38 + f4g8_19 + f5g7_38 + f6g6_19 + f7g5_38 + f8g4_19 + f9g3_38;
 8024b9c:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 8024ba0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024ba4:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 8024ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bac:	1884      	adds	r4, r0, r2
 8024bae:	f8c7 4368 	str.w	r4, [r7, #872]	; 0x368
 8024bb2:	eb41 0303 	adc.w	r3, r1, r3
 8024bb6:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8024bba:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 8024bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bc2:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 8024bc6:	4621      	mov	r1, r4
 8024bc8:	1889      	adds	r1, r1, r2
 8024bca:	f8c7 1360 	str.w	r1, [r7, #864]	; 0x360
 8024bce:	4629      	mov	r1, r5
 8024bd0:	eb43 0101 	adc.w	r1, r3, r1
 8024bd4:	f8c7 1364 	str.w	r1, [r7, #868]	; 0x364
 8024bd8:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8024bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024be0:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	; 0x360
 8024be4:	4621      	mov	r1, r4
 8024be6:	1889      	adds	r1, r1, r2
 8024be8:	f8c7 1358 	str.w	r1, [r7, #856]	; 0x358
 8024bec:	4629      	mov	r1, r5
 8024bee:	eb43 0101 	adc.w	r1, r3, r1
 8024bf2:	f8c7 135c 	str.w	r1, [r7, #860]	; 0x35c
 8024bf6:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8024bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bfe:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	; 0x358
 8024c02:	4621      	mov	r1, r4
 8024c04:	1889      	adds	r1, r1, r2
 8024c06:	f8c7 1350 	str.w	r1, [r7, #848]	; 0x350
 8024c0a:	4629      	mov	r1, r5
 8024c0c:	eb43 0101 	adc.w	r1, r3, r1
 8024c10:	f8c7 1354 	str.w	r1, [r7, #852]	; 0x354
 8024c14:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8024c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c1c:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	; 0x350
 8024c20:	4621      	mov	r1, r4
 8024c22:	1889      	adds	r1, r1, r2
 8024c24:	f8c7 1348 	str.w	r1, [r7, #840]	; 0x348
 8024c28:	4629      	mov	r1, r5
 8024c2a:	eb43 0101 	adc.w	r1, r3, r1
 8024c2e:	f8c7 134c 	str.w	r1, [r7, #844]	; 0x34c
 8024c32:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8024c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c3a:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	; 0x348
 8024c3e:	4621      	mov	r1, r4
 8024c40:	1889      	adds	r1, r1, r2
 8024c42:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 8024c46:	4629      	mov	r1, r5
 8024c48:	eb43 0101 	adc.w	r1, r3, r1
 8024c4c:	f8c7 1344 	str.w	r1, [r7, #836]	; 0x344
 8024c50:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8024c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c58:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	; 0x340
 8024c5c:	4621      	mov	r1, r4
 8024c5e:	1889      	adds	r1, r1, r2
 8024c60:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 8024c64:	4629      	mov	r1, r5
 8024c66:	eb43 0101 	adc.w	r1, r3, r1
 8024c6a:	f8c7 133c 	str.w	r1, [r7, #828]	; 0x33c
 8024c6e:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8024c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c76:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	; 0x338
 8024c7a:	4621      	mov	r1, r4
 8024c7c:	1889      	adds	r1, r1, r2
 8024c7e:	f8c7 1330 	str.w	r1, [r7, #816]	; 0x330
 8024c82:	4629      	mov	r1, r5
 8024c84:	eb43 0101 	adc.w	r1, r3, r1
 8024c88:	f8c7 1334 	str.w	r1, [r7, #820]	; 0x334
 8024c8c:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8024c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c94:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	; 0x330
 8024c98:	4621      	mov	r1, r4
 8024c9a:	1851      	adds	r1, r2, r1
 8024c9c:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8024ca0:	4629      	mov	r1, r5
 8024ca2:	eb43 0101 	adc.w	r1, r3, r1
 8024ca6:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8024caa:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8024cae:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8024cb2:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h3 = f0g3 + f1g2   + f2g1   + f3g0   + f4g9_19 + f5g8_19 + f6g7_19 + f7g6_19 + f8g5_19 + f9g4_19;
 8024cb6:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8024cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024cbe:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 8024cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cc6:	1884      	adds	r4, r0, r2
 8024cc8:	f8c7 4328 	str.w	r4, [r7, #808]	; 0x328
 8024ccc:	eb41 0303 	adc.w	r3, r1, r3
 8024cd0:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8024cd4:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8024cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cdc:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	; 0x328
 8024ce0:	4621      	mov	r1, r4
 8024ce2:	1889      	adds	r1, r1, r2
 8024ce4:	f8c7 1320 	str.w	r1, [r7, #800]	; 0x320
 8024ce8:	4629      	mov	r1, r5
 8024cea:	eb43 0101 	adc.w	r1, r3, r1
 8024cee:	f8c7 1324 	str.w	r1, [r7, #804]	; 0x324
 8024cf2:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 8024cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cfa:	e9d7 45c8 	ldrd	r4, r5, [r7, #800]	; 0x320
 8024cfe:	4621      	mov	r1, r4
 8024d00:	1889      	adds	r1, r1, r2
 8024d02:	f8c7 1318 	str.w	r1, [r7, #792]	; 0x318
 8024d06:	4629      	mov	r1, r5
 8024d08:	eb43 0101 	adc.w	r1, r3, r1
 8024d0c:	f8c7 131c 	str.w	r1, [r7, #796]	; 0x31c
 8024d10:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8024d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d18:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	; 0x318
 8024d1c:	4621      	mov	r1, r4
 8024d1e:	1889      	adds	r1, r1, r2
 8024d20:	f8c7 1310 	str.w	r1, [r7, #784]	; 0x310
 8024d24:	4629      	mov	r1, r5
 8024d26:	eb43 0101 	adc.w	r1, r3, r1
 8024d2a:	f8c7 1314 	str.w	r1, [r7, #788]	; 0x314
 8024d2e:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 8024d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d36:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	; 0x310
 8024d3a:	4621      	mov	r1, r4
 8024d3c:	1889      	adds	r1, r1, r2
 8024d3e:	f8c7 1308 	str.w	r1, [r7, #776]	; 0x308
 8024d42:	4629      	mov	r1, r5
 8024d44:	eb43 0101 	adc.w	r1, r3, r1
 8024d48:	f8c7 130c 	str.w	r1, [r7, #780]	; 0x30c
 8024d4c:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8024d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d54:	e9d7 45c2 	ldrd	r4, r5, [r7, #776]	; 0x308
 8024d58:	4621      	mov	r1, r4
 8024d5a:	1889      	adds	r1, r1, r2
 8024d5c:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
 8024d60:	4629      	mov	r1, r5
 8024d62:	eb43 0101 	adc.w	r1, r3, r1
 8024d66:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
 8024d6a:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 8024d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d72:	e9d7 45c0 	ldrd	r4, r5, [r7, #768]	; 0x300
 8024d76:	4621      	mov	r1, r4
 8024d78:	1889      	adds	r1, r1, r2
 8024d7a:	f8c7 12f8 	str.w	r1, [r7, #760]	; 0x2f8
 8024d7e:	4629      	mov	r1, r5
 8024d80:	eb43 0101 	adc.w	r1, r3, r1
 8024d84:	f8c7 12fc 	str.w	r1, [r7, #764]	; 0x2fc
 8024d88:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8024d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d90:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 8024d94:	4621      	mov	r1, r4
 8024d96:	1889      	adds	r1, r1, r2
 8024d98:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 8024d9c:	4629      	mov	r1, r5
 8024d9e:	eb43 0101 	adc.w	r1, r3, r1
 8024da2:	f8c7 12f4 	str.w	r1, [r7, #756]	; 0x2f4
 8024da6:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8024daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024dae:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	; 0x2f0
 8024db2:	4621      	mov	r1, r4
 8024db4:	1851      	adds	r1, r2, r1
 8024db6:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8024dba:	4629      	mov	r1, r5
 8024dbc:	eb43 0101 	adc.w	r1, r3, r1
 8024dc0:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8024dc4:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8024dc8:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8024dcc:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h4 = f0g4 + f1g3_2 + f2g2   + f3g1_2 + f4g0   + f5g9_38 + f6g8_19 + f7g7_38 + f8g6_19 + f9g5_38;
 8024dd0:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 8024dd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024dd8:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8024ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024de0:	1884      	adds	r4, r0, r2
 8024de2:	f8c7 42e8 	str.w	r4, [r7, #744]	; 0x2e8
 8024de6:	eb41 0303 	adc.w	r3, r1, r3
 8024dea:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8024dee:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 8024df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024df6:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	; 0x2e8
 8024dfa:	4621      	mov	r1, r4
 8024dfc:	1889      	adds	r1, r1, r2
 8024dfe:	f8c7 12e0 	str.w	r1, [r7, #736]	; 0x2e0
 8024e02:	4629      	mov	r1, r5
 8024e04:	eb43 0101 	adc.w	r1, r3, r1
 8024e08:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
 8024e0c:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8024e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e14:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 8024e18:	4621      	mov	r1, r4
 8024e1a:	1889      	adds	r1, r1, r2
 8024e1c:	f8c7 12d8 	str.w	r1, [r7, #728]	; 0x2d8
 8024e20:	4629      	mov	r1, r5
 8024e22:	eb43 0101 	adc.w	r1, r3, r1
 8024e26:	f8c7 12dc 	str.w	r1, [r7, #732]	; 0x2dc
 8024e2a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 8024e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e32:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	; 0x2d8
 8024e36:	4621      	mov	r1, r4
 8024e38:	1889      	adds	r1, r1, r2
 8024e3a:	f8c7 12d0 	str.w	r1, [r7, #720]	; 0x2d0
 8024e3e:	4629      	mov	r1, r5
 8024e40:	eb43 0101 	adc.w	r1, r3, r1
 8024e44:	f8c7 12d4 	str.w	r1, [r7, #724]	; 0x2d4
 8024e48:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8024e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e50:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 8024e54:	4621      	mov	r1, r4
 8024e56:	1889      	adds	r1, r1, r2
 8024e58:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 8024e5c:	4629      	mov	r1, r5
 8024e5e:	eb43 0101 	adc.w	r1, r3, r1
 8024e62:	f8c7 12cc 	str.w	r1, [r7, #716]	; 0x2cc
 8024e66:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 8024e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e6e:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	; 0x2c8
 8024e72:	4621      	mov	r1, r4
 8024e74:	1889      	adds	r1, r1, r2
 8024e76:	f8c7 12c0 	str.w	r1, [r7, #704]	; 0x2c0
 8024e7a:	4629      	mov	r1, r5
 8024e7c:	eb43 0101 	adc.w	r1, r3, r1
 8024e80:	f8c7 12c4 	str.w	r1, [r7, #708]	; 0x2c4
 8024e84:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8024e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e8c:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 8024e90:	4621      	mov	r1, r4
 8024e92:	1889      	adds	r1, r1, r2
 8024e94:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 8024e98:	4629      	mov	r1, r5
 8024e9a:	eb43 0101 	adc.w	r1, r3, r1
 8024e9e:	f8c7 12bc 	str.w	r1, [r7, #700]	; 0x2bc
 8024ea2:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8024ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024eaa:	e9d7 45ae 	ldrd	r4, r5, [r7, #696]	; 0x2b8
 8024eae:	4621      	mov	r1, r4
 8024eb0:	1889      	adds	r1, r1, r2
 8024eb2:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8024eb6:	4629      	mov	r1, r5
 8024eb8:	eb43 0101 	adc.w	r1, r3, r1
 8024ebc:	f8c7 12b4 	str.w	r1, [r7, #692]	; 0x2b4
 8024ec0:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8024ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ec8:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 8024ecc:	4621      	mov	r1, r4
 8024ece:	1851      	adds	r1, r2, r1
 8024ed0:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8024ed4:	4629      	mov	r1, r5
 8024ed6:	eb43 0101 	adc.w	r1, r3, r1
 8024eda:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8024ede:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8024ee2:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8024ee6:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h5 = f0g5 + f1g4   + f2g3   + f3g2   + f4g1   + f5g0   + f6g9_19 + f7g8_19 + f8g7_19 + f9g6_19;
 8024eea:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8024eee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024ef2:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 8024ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024efa:	1884      	adds	r4, r0, r2
 8024efc:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 8024f00:	eb41 0303 	adc.w	r3, r1, r3
 8024f04:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8024f08:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 8024f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f10:	e9d7 45aa 	ldrd	r4, r5, [r7, #680]	; 0x2a8
 8024f14:	4621      	mov	r1, r4
 8024f16:	1889      	adds	r1, r1, r2
 8024f18:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 8024f1c:	4629      	mov	r1, r5
 8024f1e:	eb43 0101 	adc.w	r1, r3, r1
 8024f22:	f8c7 12a4 	str.w	r1, [r7, #676]	; 0x2a4
 8024f26:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8024f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f2e:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	; 0x2a0
 8024f32:	4621      	mov	r1, r4
 8024f34:	1889      	adds	r1, r1, r2
 8024f36:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 8024f3a:	4629      	mov	r1, r5
 8024f3c:	eb43 0101 	adc.w	r1, r3, r1
 8024f40:	f8c7 129c 	str.w	r1, [r7, #668]	; 0x29c
 8024f44:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8024f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f4c:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 8024f50:	4621      	mov	r1, r4
 8024f52:	1889      	adds	r1, r1, r2
 8024f54:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8024f58:	4629      	mov	r1, r5
 8024f5a:	eb43 0101 	adc.w	r1, r3, r1
 8024f5e:	f8c7 1294 	str.w	r1, [r7, #660]	; 0x294
 8024f62:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8024f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f6a:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	; 0x290
 8024f6e:	4621      	mov	r1, r4
 8024f70:	1889      	adds	r1, r1, r2
 8024f72:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 8024f76:	4629      	mov	r1, r5
 8024f78:	eb43 0101 	adc.w	r1, r3, r1
 8024f7c:	f8c7 128c 	str.w	r1, [r7, #652]	; 0x28c
 8024f80:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8024f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024f88:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 8024f8c:	4621      	mov	r1, r4
 8024f8e:	1889      	adds	r1, r1, r2
 8024f90:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8024f94:	4629      	mov	r1, r5
 8024f96:	eb43 0101 	adc.w	r1, r3, r1
 8024f9a:	f8c7 1284 	str.w	r1, [r7, #644]	; 0x284
 8024f9e:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8024fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fa6:	e9d7 45a0 	ldrd	r4, r5, [r7, #640]	; 0x280
 8024faa:	4621      	mov	r1, r4
 8024fac:	1889      	adds	r1, r1, r2
 8024fae:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8024fb2:	4629      	mov	r1, r5
 8024fb4:	eb43 0101 	adc.w	r1, r3, r1
 8024fb8:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 8024fbc:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8024fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fc4:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	; 0x278
 8024fc8:	4621      	mov	r1, r4
 8024fca:	1889      	adds	r1, r1, r2
 8024fcc:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 8024fd0:	4629      	mov	r1, r5
 8024fd2:	eb43 0101 	adc.w	r1, r3, r1
 8024fd6:	f8c7 1274 	str.w	r1, [r7, #628]	; 0x274
 8024fda:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8024fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fe2:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 8024fe6:	4621      	mov	r1, r4
 8024fe8:	1851      	adds	r1, r2, r1
 8024fea:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8024fee:	4629      	mov	r1, r5
 8024ff0:	eb43 0101 	adc.w	r1, r3, r1
 8024ff4:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8024ff8:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8024ffc:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8025000:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h6 = f0g6 + f1g5_2 + f2g4   + f3g3_2 + f4g2   + f5g1_2 + f6g0   + f7g9_38 + f8g8_19 + f9g7_38;
 8025004:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 8025008:	e9d3 0100 	ldrd	r0, r1, [r3]
 802500c:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8025010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025014:	1884      	adds	r4, r0, r2
 8025016:	f8c7 4268 	str.w	r4, [r7, #616]	; 0x268
 802501a:	eb41 0303 	adc.w	r3, r1, r3
 802501e:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8025022:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 8025026:	e9d3 2300 	ldrd	r2, r3, [r3]
 802502a:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 802502e:	4621      	mov	r1, r4
 8025030:	1889      	adds	r1, r1, r2
 8025032:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 8025036:	4629      	mov	r1, r5
 8025038:	eb43 0101 	adc.w	r1, r3, r1
 802503c:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 8025040:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8025044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025048:	e9d7 4598 	ldrd	r4, r5, [r7, #608]	; 0x260
 802504c:	4621      	mov	r1, r4
 802504e:	1889      	adds	r1, r1, r2
 8025050:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 8025054:	4629      	mov	r1, r5
 8025056:	eb43 0101 	adc.w	r1, r3, r1
 802505a:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 802505e:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8025062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025066:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 802506a:	4621      	mov	r1, r4
 802506c:	1889      	adds	r1, r1, r2
 802506e:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 8025072:	4629      	mov	r1, r5
 8025074:	eb43 0101 	adc.w	r1, r3, r1
 8025078:	f8c7 1254 	str.w	r1, [r7, #596]	; 0x254
 802507c:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8025080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025084:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	; 0x250
 8025088:	4621      	mov	r1, r4
 802508a:	1889      	adds	r1, r1, r2
 802508c:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8025090:	4629      	mov	r1, r5
 8025092:	eb43 0101 	adc.w	r1, r3, r1
 8025096:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 802509a:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 802509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250a2:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 80250a6:	4621      	mov	r1, r4
 80250a8:	1889      	adds	r1, r1, r2
 80250aa:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 80250ae:	4629      	mov	r1, r5
 80250b0:	eb43 0101 	adc.w	r1, r3, r1
 80250b4:	f8c7 1244 	str.w	r1, [r7, #580]	; 0x244
 80250b8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80250bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250c0:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 80250c4:	4621      	mov	r1, r4
 80250c6:	1889      	adds	r1, r1, r2
 80250c8:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 80250cc:	4629      	mov	r1, r5
 80250ce:	eb43 0101 	adc.w	r1, r3, r1
 80250d2:	f8c7 123c 	str.w	r1, [r7, #572]	; 0x23c
 80250d6:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 80250da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250de:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 80250e2:	4621      	mov	r1, r4
 80250e4:	1889      	adds	r1, r1, r2
 80250e6:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 80250ea:	4629      	mov	r1, r5
 80250ec:	eb43 0101 	adc.w	r1, r3, r1
 80250f0:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 80250f4:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80250f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80250fc:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	; 0x230
 8025100:	4621      	mov	r1, r4
 8025102:	1851      	adds	r1, r2, r1
 8025104:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8025108:	4629      	mov	r1, r5
 802510a:	eb43 0101 	adc.w	r1, r3, r1
 802510e:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8025112:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8025116:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 802511a:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h7 = f0g7 + f1g6   + f2g5   + f3g4   + f4g3   + f5g2   + f6g1   + f7g0   + f8g9_19 + f9g8_19;
 802511e:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8025122:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025126:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802512e:	1884      	adds	r4, r0, r2
 8025130:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 8025134:	eb41 0303 	adc.w	r3, r1, r3
 8025138:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 802513c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8025140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025144:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 8025148:	4621      	mov	r1, r4
 802514a:	1889      	adds	r1, r1, r2
 802514c:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8025150:	4629      	mov	r1, r5
 8025152:	eb43 0101 	adc.w	r1, r3, r1
 8025156:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 802515a:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 802515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025162:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 8025166:	4621      	mov	r1, r4
 8025168:	1889      	adds	r1, r1, r2
 802516a:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 802516e:	4629      	mov	r1, r5
 8025170:	eb43 0101 	adc.w	r1, r3, r1
 8025174:	f8c7 121c 	str.w	r1, [r7, #540]	; 0x21c
 8025178:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 802517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025180:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8025184:	4621      	mov	r1, r4
 8025186:	1889      	adds	r1, r1, r2
 8025188:	f8c7 1210 	str.w	r1, [r7, #528]	; 0x210
 802518c:	4629      	mov	r1, r5
 802518e:	eb43 0101 	adc.w	r1, r3, r1
 8025192:	f8c7 1214 	str.w	r1, [r7, #532]	; 0x214
 8025196:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 802519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802519e:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 80251a2:	4621      	mov	r1, r4
 80251a4:	1889      	adds	r1, r1, r2
 80251a6:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 80251aa:	4629      	mov	r1, r5
 80251ac:	eb43 0101 	adc.w	r1, r3, r1
 80251b0:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 80251b4:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80251b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80251bc:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 80251c0:	4621      	mov	r1, r4
 80251c2:	1889      	adds	r1, r1, r2
 80251c4:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 80251c8:	4629      	mov	r1, r5
 80251ca:	eb43 0101 	adc.w	r1, r3, r1
 80251ce:	f8c7 1204 	str.w	r1, [r7, #516]	; 0x204
 80251d2:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 80251d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80251da:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 80251de:	4621      	mov	r1, r4
 80251e0:	1889      	adds	r1, r1, r2
 80251e2:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 80251e6:	4629      	mov	r1, r5
 80251e8:	eb43 0101 	adc.w	r1, r3, r1
 80251ec:	f8c7 11fc 	str.w	r1, [r7, #508]	; 0x1fc
 80251f0:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80251f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80251f8:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	; 0x1f8
 80251fc:	4621      	mov	r1, r4
 80251fe:	1889      	adds	r1, r1, r2
 8025200:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 8025204:	4629      	mov	r1, r5
 8025206:	eb43 0101 	adc.w	r1, r3, r1
 802520a:	f8c7 11f4 	str.w	r1, [r7, #500]	; 0x1f4
 802520e:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8025212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025216:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 802521a:	4621      	mov	r1, r4
 802521c:	1851      	adds	r1, r2, r1
 802521e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8025222:	4629      	mov	r1, r5
 8025224:	eb43 0101 	adc.w	r1, r3, r1
 8025228:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 802522c:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8025230:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8025234:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h8 = f0g8 + f1g7_2 + f2g6   + f3g5_2 + f4g4   + f5g3_2 + f6g2   + f7g1_2 + f8g0   + f9g9_38;
 8025238:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 802523c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025240:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8025244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025248:	1884      	adds	r4, r0, r2
 802524a:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 802524e:	eb41 0303 	adc.w	r3, r1, r3
 8025252:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8025256:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802525e:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8025262:	4621      	mov	r1, r4
 8025264:	1889      	adds	r1, r1, r2
 8025266:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 802526a:	4629      	mov	r1, r5
 802526c:	eb43 0101 	adc.w	r1, r3, r1
 8025270:	f8c7 11e4 	str.w	r1, [r7, #484]	; 0x1e4
 8025274:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8025278:	e9d3 2300 	ldrd	r2, r3, [r3]
 802527c:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8025280:	4621      	mov	r1, r4
 8025282:	1889      	adds	r1, r1, r2
 8025284:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 8025288:	4629      	mov	r1, r5
 802528a:	eb43 0101 	adc.w	r1, r3, r1
 802528e:	f8c7 11dc 	str.w	r1, [r7, #476]	; 0x1dc
 8025292:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8025296:	e9d3 2300 	ldrd	r2, r3, [r3]
 802529a:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 802529e:	4621      	mov	r1, r4
 80252a0:	1889      	adds	r1, r1, r2
 80252a2:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 80252a6:	4629      	mov	r1, r5
 80252a8:	eb43 0101 	adc.w	r1, r3, r1
 80252ac:	f8c7 11d4 	str.w	r1, [r7, #468]	; 0x1d4
 80252b0:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 80252b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252b8:	e9d7 4574 	ldrd	r4, r5, [r7, #464]	; 0x1d0
 80252bc:	4621      	mov	r1, r4
 80252be:	1889      	adds	r1, r1, r2
 80252c0:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 80252c4:	4629      	mov	r1, r5
 80252c6:	eb43 0101 	adc.w	r1, r3, r1
 80252ca:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 80252ce:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 80252d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252d6:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 80252da:	4621      	mov	r1, r4
 80252dc:	1889      	adds	r1, r1, r2
 80252de:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 80252e2:	4629      	mov	r1, r5
 80252e4:	eb43 0101 	adc.w	r1, r3, r1
 80252e8:	f8c7 11c4 	str.w	r1, [r7, #452]	; 0x1c4
 80252ec:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80252f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252f4:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 80252f8:	4621      	mov	r1, r4
 80252fa:	1889      	adds	r1, r1, r2
 80252fc:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8025300:	4629      	mov	r1, r5
 8025302:	eb43 0101 	adc.w	r1, r3, r1
 8025306:	f8c7 11bc 	str.w	r1, [r7, #444]	; 0x1bc
 802530a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 802530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025312:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8025316:	4621      	mov	r1, r4
 8025318:	1889      	adds	r1, r1, r2
 802531a:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 802531e:	4629      	mov	r1, r5
 8025320:	eb43 0101 	adc.w	r1, r3, r1
 8025324:	f8c7 11b4 	str.w	r1, [r7, #436]	; 0x1b4
 8025328:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 802532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025330:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 8025334:	4621      	mov	r1, r4
 8025336:	1851      	adds	r1, r2, r1
 8025338:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 802533c:	4629      	mov	r1, r5
 802533e:	eb43 0101 	adc.w	r1, r3, r1
 8025342:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8025346:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 802534a:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 802534e:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t h9 = f0g9 + f1g8   + f2g7   + f3g6   + f4g5   + f5g4   + f6g3   + f7g2   + f8g1   + f9g0   ;
 8025352:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8025356:	e9d3 0100 	ldrd	r0, r1, [r3]
 802535a:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 802535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025362:	1884      	adds	r4, r0, r2
 8025364:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 8025368:	eb41 0303 	adc.w	r3, r1, r3
 802536c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8025370:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8025374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025378:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 802537c:	4621      	mov	r1, r4
 802537e:	1889      	adds	r1, r1, r2
 8025380:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 8025384:	4629      	mov	r1, r5
 8025386:	eb43 0101 	adc.w	r1, r3, r1
 802538a:	f8c7 11a4 	str.w	r1, [r7, #420]	; 0x1a4
 802538e:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 8025392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025396:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 802539a:	4621      	mov	r1, r4
 802539c:	1889      	adds	r1, r1, r2
 802539e:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 80253a2:	4629      	mov	r1, r5
 80253a4:	eb43 0101 	adc.w	r1, r3, r1
 80253a8:	f8c7 119c 	str.w	r1, [r7, #412]	; 0x19c
 80253ac:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80253b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253b4:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 80253b8:	4621      	mov	r1, r4
 80253ba:	1889      	adds	r1, r1, r2
 80253bc:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 80253c0:	4629      	mov	r1, r5
 80253c2:	eb43 0101 	adc.w	r1, r3, r1
 80253c6:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 80253ca:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 80253ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253d2:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 80253d6:	4621      	mov	r1, r4
 80253d8:	1889      	adds	r1, r1, r2
 80253da:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 80253de:	4629      	mov	r1, r5
 80253e0:	eb43 0101 	adc.w	r1, r3, r1
 80253e4:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
 80253e8:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80253ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253f0:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 80253f4:	4621      	mov	r1, r4
 80253f6:	1889      	adds	r1, r1, r2
 80253f8:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 80253fc:	4629      	mov	r1, r5
 80253fe:	eb43 0101 	adc.w	r1, r3, r1
 8025402:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8025406:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 802540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802540e:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 8025412:	4621      	mov	r1, r4
 8025414:	1889      	adds	r1, r1, r2
 8025416:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 802541a:	4629      	mov	r1, r5
 802541c:	eb43 0101 	adc.w	r1, r3, r1
 8025420:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 8025424:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8025428:	e9d3 2300 	ldrd	r2, r3, [r3]
 802542c:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 8025430:	4621      	mov	r1, r4
 8025432:	1889      	adds	r1, r1, r2
 8025434:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8025438:	4629      	mov	r1, r5
 802543a:	eb43 0101 	adc.w	r1, r3, r1
 802543e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8025442:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8025446:	e9d3 2300 	ldrd	r2, r3, [r3]
 802544a:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 802544e:	4621      	mov	r1, r4
 8025450:	1851      	adds	r1, r2, r1
 8025452:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8025456:	4629      	mov	r1, r5
 8025458:	eb43 0101 	adc.w	r1, r3, r1
 802545c:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8025460:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8025464:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8025468:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;

    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 802546c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8025470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025474:	f112 7800 	adds.w	r8, r2, #33554432	; 0x2000000
 8025478:	f143 0900 	adc.w	r9, r3, #0
 802547c:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8025480:	f04f 0200 	mov.w	r2, #0
 8025484:	f04f 0300 	mov.w	r3, #0
 8025488:	ea4f 6298 	mov.w	r2, r8, lsr #26
 802548c:	ea42 1289 	orr.w	r2, r2, r9, lsl #6
 8025490:	ea4f 63a9 	mov.w	r3, r9, asr #26
 8025494:	e9c1 2300 	strd	r2, r3, [r1]
    h1 += carry0;
 8025498:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 802549c:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 80254a0:	e9d2 0100 	ldrd	r0, r1, [r2]
 80254a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254a8:	1884      	adds	r4, r0, r2
 80254aa:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80254ae:	eb41 0303 	adc.w	r3, r1, r3
 80254b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80254b6:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80254ba:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 80254be:	e9c2 3400 	strd	r3, r4, [r2]
    h0 -= carry0 << 26;
 80254c2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80254c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254ca:	f04f 0000 	mov.w	r0, #0
 80254ce:	f04f 0100 	mov.w	r1, #0
 80254d2:	0699      	lsls	r1, r3, #26
 80254d4:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80254d8:	0690      	lsls	r0, r2, #26
 80254da:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80254de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254e2:	1a14      	subs	r4, r2, r0
 80254e4:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80254e8:	eb63 0301 	sbc.w	r3, r3, r1
 80254ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80254f0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80254f4:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80254f8:	e9c2 3400 	strd	r3, r4, [r2]
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 80254fc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8025500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025504:	f112 7a00 	adds.w	sl, r2, #33554432	; 0x2000000
 8025508:	f143 0b00 	adc.w	fp, r3, #0
 802550c:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8025510:	f04f 0200 	mov.w	r2, #0
 8025514:	f04f 0300 	mov.w	r3, #0
 8025518:	ea4f 629a 	mov.w	r2, sl, lsr #26
 802551c:	ea42 128b 	orr.w	r2, r2, fp, lsl #6
 8025520:	ea4f 63ab 	mov.w	r3, fp, asr #26
 8025524:	e9c1 2300 	strd	r2, r3, [r1]
    h5 += carry4;
 8025528:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 802552c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8025530:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025538:	1884      	adds	r4, r0, r2
 802553a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 802553e:	eb41 0303 	adc.w	r3, r1, r3
 8025542:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8025546:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 802554a:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 802554e:	e9c2 3400 	strd	r3, r4, [r2]
    h4 -= carry4 << 26;
 8025552:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8025556:	e9d3 2300 	ldrd	r2, r3, [r3]
 802555a:	f04f 0000 	mov.w	r0, #0
 802555e:	f04f 0100 	mov.w	r1, #0
 8025562:	0699      	lsls	r1, r3, #26
 8025564:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8025568:	0690      	lsls	r0, r2, #26
 802556a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 802556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025572:	1a14      	subs	r4, r2, r0
 8025574:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8025578:	eb63 0301 	sbc.w	r3, r3, r1
 802557c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8025580:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8025584:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8025588:	e9c2 3400 	strd	r3, r4, [r2]

    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 802558c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8025590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025594:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8025598:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 802559c:	f143 0300 	adc.w	r3, r3, #0
 80255a0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80255a4:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 80255a8:	f04f 0200 	mov.w	r2, #0
 80255ac:	f04f 0300 	mov.w	r3, #0
 80255b0:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 80255b4:	4620      	mov	r0, r4
 80255b6:	0e42      	lsrs	r2, r0, #25
 80255b8:	4628      	mov	r0, r5
 80255ba:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 80255be:	4628      	mov	r0, r5
 80255c0:	1643      	asrs	r3, r0, #25
 80255c2:	e9c1 2300 	strd	r2, r3, [r1]
    h2 += carry1;
 80255c6:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80255ca:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 80255ce:	e9d2 0100 	ldrd	r0, r1, [r2]
 80255d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80255d6:	1884      	adds	r4, r0, r2
 80255d8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80255dc:	eb41 0303 	adc.w	r3, r1, r3
 80255e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80255e4:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80255e8:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 80255ec:	e9c2 3400 	strd	r3, r4, [r2]
    h1 -= carry1 << 25;
 80255f0:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80255f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80255f8:	f04f 0000 	mov.w	r0, #0
 80255fc:	f04f 0100 	mov.w	r1, #0
 8025600:	0659      	lsls	r1, r3, #25
 8025602:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8025606:	0650      	lsls	r0, r2, #25
 8025608:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 802560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025610:	1a14      	subs	r4, r2, r0
 8025612:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8025616:	eb63 0301 	sbc.w	r3, r3, r1
 802561a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802561e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8025622:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8025626:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 802562a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 802562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025632:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8025636:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 802563a:	f143 0300 	adc.w	r3, r3, #0
 802563e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8025642:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8025646:	f04f 0200 	mov.w	r2, #0
 802564a:	f04f 0300 	mov.w	r3, #0
 802564e:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8025652:	4620      	mov	r0, r4
 8025654:	0e42      	lsrs	r2, r0, #25
 8025656:	4628      	mov	r0, r5
 8025658:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 802565c:	4628      	mov	r0, r5
 802565e:	1643      	asrs	r3, r0, #25
 8025660:	e9c1 2300 	strd	r2, r3, [r1]
    h6 += carry5;
 8025664:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8025668:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 802566c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025674:	1884      	adds	r4, r0, r2
 8025676:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 802567a:	eb41 0303 	adc.w	r3, r1, r3
 802567e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8025682:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8025686:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 802568a:	e9c2 3400 	strd	r3, r4, [r2]
    h5 -= carry5 << 25;
 802568e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8025692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025696:	f04f 0000 	mov.w	r0, #0
 802569a:	f04f 0100 	mov.w	r1, #0
 802569e:	0659      	lsls	r1, r3, #25
 80256a0:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80256a4:	0650      	lsls	r0, r2, #25
 80256a6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80256aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80256ae:	1a14      	subs	r4, r2, r0
 80256b0:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80256b4:	eb63 0301 	sbc.w	r3, r3, r1
 80256b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80256bc:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80256c0:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 80256c4:	e9c2 3400 	strd	r3, r4, [r2]

    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 80256c8:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80256cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80256d0:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80256d4:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 80256d8:	f143 0300 	adc.w	r3, r3, #0
 80256dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80256e0:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 80256e4:	f04f 0200 	mov.w	r2, #0
 80256e8:	f04f 0300 	mov.w	r3, #0
 80256ec:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80256f0:	4620      	mov	r0, r4
 80256f2:	0e82      	lsrs	r2, r0, #26
 80256f4:	4628      	mov	r0, r5
 80256f6:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80256fa:	4628      	mov	r0, r5
 80256fc:	1683      	asrs	r3, r0, #26
 80256fe:	e9c1 2300 	strd	r2, r3, [r1]
    h3 += carry2;
 8025702:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8025706:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 802570a:	e9d2 0100 	ldrd	r0, r1, [r2]
 802570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025712:	1884      	adds	r4, r0, r2
 8025714:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8025718:	eb41 0303 	adc.w	r3, r1, r3
 802571c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025720:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8025724:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8025728:	e9c2 3400 	strd	r3, r4, [r2]
    h2 -= carry2 << 26;
 802572c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8025730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025734:	f04f 0000 	mov.w	r0, #0
 8025738:	f04f 0100 	mov.w	r1, #0
 802573c:	0699      	lsls	r1, r3, #26
 802573e:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8025742:	0690      	lsls	r0, r2, #26
 8025744:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8025748:	e9d3 2300 	ldrd	r2, r3, [r3]
 802574c:	1a14      	subs	r4, r2, r0
 802574e:	67bc      	str	r4, [r7, #120]	; 0x78
 8025750:	eb63 0301 	sbc.w	r3, r3, r1
 8025754:	67fb      	str	r3, [r7, #124]	; 0x7c
 8025756:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 802575a:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 802575e:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 8025762:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8025766:	e9d3 2300 	ldrd	r2, r3, [r3]
 802576a:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 802576e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8025772:	f143 0300 	adc.w	r3, r3, #0
 8025776:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 802577a:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 802577e:	f04f 0200 	mov.w	r2, #0
 8025782:	f04f 0300 	mov.w	r3, #0
 8025786:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 802578a:	4620      	mov	r0, r4
 802578c:	0e82      	lsrs	r2, r0, #26
 802578e:	4628      	mov	r0, r5
 8025790:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8025794:	4628      	mov	r0, r5
 8025796:	1683      	asrs	r3, r0, #26
 8025798:	e9c1 2300 	strd	r2, r3, [r1]
    h7 += carry6;
 802579c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80257a0:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 80257a4:	e9d2 0100 	ldrd	r0, r1, [r2]
 80257a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257ac:	1884      	adds	r4, r0, r2
 80257ae:	673c      	str	r4, [r7, #112]	; 0x70
 80257b0:	eb41 0303 	adc.w	r3, r1, r3
 80257b4:	677b      	str	r3, [r7, #116]	; 0x74
 80257b6:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80257ba:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 80257be:	e9c2 3400 	strd	r3, r4, [r2]
    h6 -= carry6 << 26;
 80257c2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80257c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257ca:	f04f 0000 	mov.w	r0, #0
 80257ce:	f04f 0100 	mov.w	r1, #0
 80257d2:	0699      	lsls	r1, r3, #26
 80257d4:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80257d8:	0690      	lsls	r0, r2, #26
 80257da:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80257de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257e2:	1a14      	subs	r4, r2, r0
 80257e4:	66bc      	str	r4, [r7, #104]	; 0x68
 80257e6:	eb63 0301 	sbc.w	r3, r3, r1
 80257ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80257ec:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80257f0:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 80257f4:	e9c2 3400 	strd	r3, r4, [r2]

    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 80257f8:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80257fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025800:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8025804:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8025808:	f143 0300 	adc.w	r3, r3, #0
 802580c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8025810:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8025814:	f04f 0200 	mov.w	r2, #0
 8025818:	f04f 0300 	mov.w	r3, #0
 802581c:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 8025820:	4620      	mov	r0, r4
 8025822:	0e42      	lsrs	r2, r0, #25
 8025824:	4628      	mov	r0, r5
 8025826:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 802582a:	4628      	mov	r0, r5
 802582c:	1643      	asrs	r3, r0, #25
 802582e:	e9c1 2300 	strd	r2, r3, [r1]
    h4 += carry3;
 8025832:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8025836:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 802583a:	e9d2 0100 	ldrd	r0, r1, [r2]
 802583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025842:	1884      	adds	r4, r0, r2
 8025844:	663c      	str	r4, [r7, #96]	; 0x60
 8025846:	eb41 0303 	adc.w	r3, r1, r3
 802584a:	667b      	str	r3, [r7, #100]	; 0x64
 802584c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8025850:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8025854:	e9c2 3400 	strd	r3, r4, [r2]
    h3 -= carry3 << 25;
 8025858:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 802585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025860:	f04f 0000 	mov.w	r0, #0
 8025864:	f04f 0100 	mov.w	r1, #0
 8025868:	0659      	lsls	r1, r3, #25
 802586a:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 802586e:	0650      	lsls	r0, r2, #25
 8025870:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8025874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025878:	1a14      	subs	r4, r2, r0
 802587a:	65bc      	str	r4, [r7, #88]	; 0x58
 802587c:	eb63 0301 	sbc.w	r3, r3, r1
 8025880:	65fb      	str	r3, [r7, #92]	; 0x5c
 8025882:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8025886:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 802588a:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 802588e:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8025892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025896:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 802589a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 802589e:	f143 0300 	adc.w	r3, r3, #0
 80258a2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80258a6:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80258aa:	f04f 0200 	mov.w	r2, #0
 80258ae:	f04f 0300 	mov.w	r3, #0
 80258b2:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 80258b6:	4620      	mov	r0, r4
 80258b8:	0e42      	lsrs	r2, r0, #25
 80258ba:	4628      	mov	r0, r5
 80258bc:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 80258c0:	4628      	mov	r0, r5
 80258c2:	1643      	asrs	r3, r0, #25
 80258c4:	e9c1 2300 	strd	r2, r3, [r1]
    h8 += carry7;
 80258c8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80258cc:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 80258d0:	e9d2 0100 	ldrd	r0, r1, [r2]
 80258d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258d8:	1884      	adds	r4, r0, r2
 80258da:	653c      	str	r4, [r7, #80]	; 0x50
 80258dc:	eb41 0303 	adc.w	r3, r1, r3
 80258e0:	657b      	str	r3, [r7, #84]	; 0x54
 80258e2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80258e6:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 80258ea:	e9c2 3400 	strd	r3, r4, [r2]
    h7 -= carry7 << 25;
 80258ee:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80258f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258f6:	f04f 0000 	mov.w	r0, #0
 80258fa:	f04f 0100 	mov.w	r1, #0
 80258fe:	0659      	lsls	r1, r3, #25
 8025900:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8025904:	0650      	lsls	r0, r2, #25
 8025906:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 802590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802590e:	1a14      	subs	r4, r2, r0
 8025910:	64bc      	str	r4, [r7, #72]	; 0x48
 8025912:	eb63 0301 	sbc.w	r3, r3, r1
 8025916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8025918:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 802591c:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8025920:	e9c2 3400 	strd	r3, r4, [r2]

    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8025924:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8025928:	e9d3 2300 	ldrd	r2, r3, [r3]
 802592c:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8025930:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8025934:	f143 0300 	adc.w	r3, r3, #0
 8025938:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 802593c:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8025940:	f04f 0200 	mov.w	r2, #0
 8025944:	f04f 0300 	mov.w	r3, #0
 8025948:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 802594c:	4620      	mov	r0, r4
 802594e:	0e82      	lsrs	r2, r0, #26
 8025950:	4628      	mov	r0, r5
 8025952:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8025956:	4628      	mov	r0, r5
 8025958:	1683      	asrs	r3, r0, #26
 802595a:	e9c1 2300 	strd	r2, r3, [r1]
    h5 += carry4;
 802595e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8025962:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8025966:	e9d2 0100 	ldrd	r0, r1, [r2]
 802596a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802596e:	1884      	adds	r4, r0, r2
 8025970:	643c      	str	r4, [r7, #64]	; 0x40
 8025972:	eb41 0303 	adc.w	r3, r1, r3
 8025976:	647b      	str	r3, [r7, #68]	; 0x44
 8025978:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 802597c:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8025980:	e9c2 3400 	strd	r3, r4, [r2]
    h4 -= carry4 << 26;
 8025984:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8025988:	e9d3 2300 	ldrd	r2, r3, [r3]
 802598c:	f04f 0000 	mov.w	r0, #0
 8025990:	f04f 0100 	mov.w	r1, #0
 8025994:	0699      	lsls	r1, r3, #26
 8025996:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 802599a:	0690      	lsls	r0, r2, #26
 802599c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80259a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259a4:	1a14      	subs	r4, r2, r0
 80259a6:	63bc      	str	r4, [r7, #56]	; 0x38
 80259a8:	eb63 0301 	sbc.w	r3, r3, r1
 80259ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80259ae:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80259b2:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 80259b6:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 80259ba:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80259be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259c2:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80259c6:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80259ca:	f143 0300 	adc.w	r3, r3, #0
 80259ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80259d2:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80259d6:	f04f 0200 	mov.w	r2, #0
 80259da:	f04f 0300 	mov.w	r3, #0
 80259de:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 80259e2:	4620      	mov	r0, r4
 80259e4:	0e82      	lsrs	r2, r0, #26
 80259e6:	4628      	mov	r0, r5
 80259e8:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 80259ec:	4628      	mov	r0, r5
 80259ee:	1683      	asrs	r3, r0, #26
 80259f0:	e9c1 2300 	strd	r2, r3, [r1]
    h9 += carry8;
 80259f4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80259f8:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 80259fc:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a04:	1884      	adds	r4, r0, r2
 8025a06:	633c      	str	r4, [r7, #48]	; 0x30
 8025a08:	eb41 0303 	adc.w	r3, r1, r3
 8025a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8025a0e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8025a12:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8025a16:	e9c2 3400 	strd	r3, r4, [r2]
    h8 -= carry8 << 26;
 8025a1a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8025a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a22:	f04f 0000 	mov.w	r0, #0
 8025a26:	f04f 0100 	mov.w	r1, #0
 8025a2a:	0699      	lsls	r1, r3, #26
 8025a2c:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8025a30:	0690      	lsls	r0, r2, #26
 8025a32:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8025a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a3a:	1a14      	subs	r4, r2, r0
 8025a3c:	62bc      	str	r4, [r7, #40]	; 0x28
 8025a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8025a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025a44:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8025a48:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8025a4c:	e9c2 3400 	strd	r3, r4, [r2]

    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 8025a50:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8025a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a58:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8025a5c:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8025a60:	f143 0300 	adc.w	r3, r3, #0
 8025a64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8025a68:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8025a6c:	f04f 0200 	mov.w	r2, #0
 8025a70:	f04f 0300 	mov.w	r3, #0
 8025a74:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8025a78:	4620      	mov	r0, r4
 8025a7a:	0e42      	lsrs	r2, r0, #25
 8025a7c:	4628      	mov	r0, r5
 8025a7e:	ea42 12c0 	orr.w	r2, r2, r0, lsl #7
 8025a82:	4628      	mov	r0, r5
 8025a84:	1643      	asrs	r3, r0, #25
 8025a86:	e9c1 2300 	strd	r2, r3, [r1]
    h0 += carry9 * 19;
 8025a8a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8025a8e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8025a92:	4622      	mov	r2, r4
 8025a94:	462b      	mov	r3, r5
 8025a96:	f04f 0000 	mov.w	r0, #0
 8025a9a:	f04f 0100 	mov.w	r1, #0
 8025a9e:	00d9      	lsls	r1, r3, #3
 8025aa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8025aa4:	00d0      	lsls	r0, r2, #3
 8025aa6:	4602      	mov	r2, r0
 8025aa8:	460b      	mov	r3, r1
 8025aaa:	1912      	adds	r2, r2, r4
 8025aac:	eb45 0303 	adc.w	r3, r5, r3
 8025ab0:	1891      	adds	r1, r2, r2
 8025ab2:	6239      	str	r1, [r7, #32]
 8025ab4:	415b      	adcs	r3, r3
 8025ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8025ab8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8025abc:	1911      	adds	r1, r2, r4
 8025abe:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8025ac2:	416b      	adcs	r3, r5
 8025ac4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8025ac8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8025acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ad0:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8025ad4:	4621      	mov	r1, r4
 8025ad6:	1851      	adds	r1, r2, r1
 8025ad8:	61b9      	str	r1, [r7, #24]
 8025ada:	4629      	mov	r1, r5
 8025adc:	eb43 0101 	adc.w	r1, r3, r1
 8025ae0:	61f9      	str	r1, [r7, #28]
 8025ae2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8025ae6:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8025aea:	e9c2 3400 	strd	r3, r4, [r2]
    h9 -= carry9 << 25;
 8025aee:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8025af2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025af6:	f04f 0200 	mov.w	r2, #0
 8025afa:	f04f 0300 	mov.w	r3, #0
 8025afe:	064b      	lsls	r3, r1, #25
 8025b00:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8025b04:	0642      	lsls	r2, r0, #25
 8025b06:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8025b0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025b0e:	1a84      	subs	r4, r0, r2
 8025b10:	613c      	str	r4, [r7, #16]
 8025b12:	eb61 0303 	sbc.w	r3, r1, r3
 8025b16:	617b      	str	r3, [r7, #20]
 8025b18:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8025b1c:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8025b20:	e9c2 3400 	strd	r3, r4, [r2]

    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8025b24:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8025b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025b2c:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8025b30:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8025b34:	f143 0300 	adc.w	r3, r3, #0
 8025b38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8025b3c:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8025b40:	f04f 0200 	mov.w	r2, #0
 8025b44:	f04f 0300 	mov.w	r3, #0
 8025b48:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8025b4c:	4620      	mov	r0, r4
 8025b4e:	0e82      	lsrs	r2, r0, #26
 8025b50:	4628      	mov	r0, r5
 8025b52:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8025b56:	4628      	mov	r0, r5
 8025b58:	1683      	asrs	r3, r0, #26
 8025b5a:	e9c1 2300 	strd	r2, r3, [r1]
    h1 += carry0;
 8025b5e:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8025b62:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8025b66:	e9d2 0100 	ldrd	r0, r1, [r2]
 8025b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025b6e:	1884      	adds	r4, r0, r2
 8025b70:	60bc      	str	r4, [r7, #8]
 8025b72:	eb41 0303 	adc.w	r3, r1, r3
 8025b76:	60fb      	str	r3, [r7, #12]
 8025b78:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8025b7c:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8025b80:	e9c2 3400 	strd	r3, r4, [r2]
    h0 -= carry0 << 26;
 8025b84:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8025b88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8025b8c:	f04f 0200 	mov.w	r2, #0
 8025b90:	f04f 0300 	mov.w	r3, #0
 8025b94:	068b      	lsls	r3, r1, #26
 8025b96:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8025b9a:	0682      	lsls	r2, r0, #26
 8025b9c:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8025ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025ba4:	1a84      	subs	r4, r0, r2
 8025ba6:	603c      	str	r4, [r7, #0]
 8025ba8:	eb61 0303 	sbc.w	r3, r1, r3
 8025bac:	607b      	str	r3, [r7, #4]
 8025bae:	e9d7 3400 	ldrd	r3, r4, [r7]
 8025bb2:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8025bb6:	e9c2 3400 	strd	r3, r4, [r2]

    h[0] = (int32_t) h0;
 8025bba:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8025bbe:	681a      	ldr	r2, [r3, #0]
 8025bc0:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8025bc4:	681b      	ldr	r3, [r3, #0]
 8025bc6:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 8025bc8:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8025bcc:	681b      	ldr	r3, [r3, #0]
 8025bce:	3304      	adds	r3, #4
 8025bd0:	f507 6292 	add.w	r2, r7, #1168	; 0x490
 8025bd4:	6812      	ldr	r2, [r2, #0]
 8025bd6:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 8025bd8:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8025bdc:	681b      	ldr	r3, [r3, #0]
 8025bde:	3308      	adds	r3, #8
 8025be0:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8025be4:	6812      	ldr	r2, [r2, #0]
 8025be6:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 8025be8:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8025bec:	681b      	ldr	r3, [r3, #0]
 8025bee:	330c      	adds	r3, #12
 8025bf0:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8025bf4:	6812      	ldr	r2, [r2, #0]
 8025bf6:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 8025bf8:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8025bfc:	681b      	ldr	r3, [r3, #0]
 8025bfe:	3310      	adds	r3, #16
 8025c00:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 8025c04:	6812      	ldr	r2, [r2, #0]
 8025c06:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 8025c08:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8025c0c:	681b      	ldr	r3, [r3, #0]
 8025c0e:	3314      	adds	r3, #20
 8025c10:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 8025c14:	6812      	ldr	r2, [r2, #0]
 8025c16:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 8025c18:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8025c1c:	681b      	ldr	r3, [r3, #0]
 8025c1e:	3318      	adds	r3, #24
 8025c20:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8025c24:	6812      	ldr	r2, [r2, #0]
 8025c26:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 8025c28:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8025c2c:	681b      	ldr	r3, [r3, #0]
 8025c2e:	331c      	adds	r3, #28
 8025c30:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8025c34:	6812      	ldr	r2, [r2, #0]
 8025c36:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 8025c38:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8025c3c:	681b      	ldr	r3, [r3, #0]
 8025c3e:	3320      	adds	r3, #32
 8025c40:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 8025c44:	6812      	ldr	r2, [r2, #0]
 8025c46:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 8025c48:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8025c4c:	681b      	ldr	r3, [r3, #0]
 8025c4e:	3324      	adds	r3, #36	; 0x24
 8025c50:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8025c54:	6812      	ldr	r2, [r2, #0]
 8025c56:	601a      	str	r2, [r3, #0]
}
 8025c58:	bf00      	nop
 8025c5a:	f607 074c 	addw	r7, r7, #2124	; 0x84c
 8025c5e:	46bd      	mov	sp, r7
 8025c60:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8025c64:	4770      	bx	lr

08025c66 <fe_neg>:

Postconditions:
   |h| bounded by 1.1*2^25,1.1*2^24,1.1*2^25,1.1*2^24,etc.
*/

void fe_neg(fe h, const fe f) {
 8025c66:	b480      	push	{r7}
 8025c68:	b097      	sub	sp, #92	; 0x5c
 8025c6a:	af00      	add	r7, sp, #0
 8025c6c:	6078      	str	r0, [r7, #4]
 8025c6e:	6039      	str	r1, [r7, #0]
    int32_t f0 = f[0];
 8025c70:	683b      	ldr	r3, [r7, #0]
 8025c72:	681b      	ldr	r3, [r3, #0]
 8025c74:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t f1 = f[1];
 8025c76:	683b      	ldr	r3, [r7, #0]
 8025c78:	685b      	ldr	r3, [r3, #4]
 8025c7a:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t f2 = f[2];
 8025c7c:	683b      	ldr	r3, [r7, #0]
 8025c7e:	689b      	ldr	r3, [r3, #8]
 8025c80:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t f3 = f[3];
 8025c82:	683b      	ldr	r3, [r7, #0]
 8025c84:	68db      	ldr	r3, [r3, #12]
 8025c86:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t f4 = f[4];
 8025c88:	683b      	ldr	r3, [r7, #0]
 8025c8a:	691b      	ldr	r3, [r3, #16]
 8025c8c:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t f5 = f[5];
 8025c8e:	683b      	ldr	r3, [r7, #0]
 8025c90:	695b      	ldr	r3, [r3, #20]
 8025c92:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t f6 = f[6];
 8025c94:	683b      	ldr	r3, [r7, #0]
 8025c96:	699b      	ldr	r3, [r3, #24]
 8025c98:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t f7 = f[7];
 8025c9a:	683b      	ldr	r3, [r7, #0]
 8025c9c:	69db      	ldr	r3, [r3, #28]
 8025c9e:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t f8 = f[8];
 8025ca0:	683b      	ldr	r3, [r7, #0]
 8025ca2:	6a1b      	ldr	r3, [r3, #32]
 8025ca4:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t f9 = f[9];
 8025ca6:	683b      	ldr	r3, [r7, #0]
 8025ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025caa:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t h0 = -f0;
 8025cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025cae:	425b      	negs	r3, r3
 8025cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t h1 = -f1;
 8025cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025cb4:	425b      	negs	r3, r3
 8025cb6:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t h2 = -f2;
 8025cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8025cba:	425b      	negs	r3, r3
 8025cbc:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h3 = -f3;
 8025cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025cc0:	425b      	negs	r3, r3
 8025cc2:	623b      	str	r3, [r7, #32]
    int32_t h4 = -f4;
 8025cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025cc6:	425b      	negs	r3, r3
 8025cc8:	61fb      	str	r3, [r7, #28]
    int32_t h5 = -f5;
 8025cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025ccc:	425b      	negs	r3, r3
 8025cce:	61bb      	str	r3, [r7, #24]
    int32_t h6 = -f6;
 8025cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025cd2:	425b      	negs	r3, r3
 8025cd4:	617b      	str	r3, [r7, #20]
    int32_t h7 = -f7;
 8025cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025cd8:	425b      	negs	r3, r3
 8025cda:	613b      	str	r3, [r7, #16]
    int32_t h8 = -f8;
 8025cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025cde:	425b      	negs	r3, r3
 8025ce0:	60fb      	str	r3, [r7, #12]
    int32_t h9 = -f9;
 8025ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025ce4:	425b      	negs	r3, r3
 8025ce6:	60bb      	str	r3, [r7, #8]

    h[0] = h0;
 8025ce8:	687b      	ldr	r3, [r7, #4]
 8025cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025cec:	601a      	str	r2, [r3, #0]
    h[1] = h1;
 8025cee:	687b      	ldr	r3, [r7, #4]
 8025cf0:	3304      	adds	r3, #4
 8025cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025cf4:	601a      	str	r2, [r3, #0]
    h[2] = h2;
 8025cf6:	687b      	ldr	r3, [r7, #4]
 8025cf8:	3308      	adds	r3, #8
 8025cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025cfc:	601a      	str	r2, [r3, #0]
    h[3] = h3;
 8025cfe:	687b      	ldr	r3, [r7, #4]
 8025d00:	330c      	adds	r3, #12
 8025d02:	6a3a      	ldr	r2, [r7, #32]
 8025d04:	601a      	str	r2, [r3, #0]
    h[4] = h4;
 8025d06:	687b      	ldr	r3, [r7, #4]
 8025d08:	3310      	adds	r3, #16
 8025d0a:	69fa      	ldr	r2, [r7, #28]
 8025d0c:	601a      	str	r2, [r3, #0]
    h[5] = h5;
 8025d0e:	687b      	ldr	r3, [r7, #4]
 8025d10:	3314      	adds	r3, #20
 8025d12:	69ba      	ldr	r2, [r7, #24]
 8025d14:	601a      	str	r2, [r3, #0]
    h[6] = h6;
 8025d16:	687b      	ldr	r3, [r7, #4]
 8025d18:	3318      	adds	r3, #24
 8025d1a:	697a      	ldr	r2, [r7, #20]
 8025d1c:	601a      	str	r2, [r3, #0]
    h[7] = h7;
 8025d1e:	687b      	ldr	r3, [r7, #4]
 8025d20:	331c      	adds	r3, #28
 8025d22:	693a      	ldr	r2, [r7, #16]
 8025d24:	601a      	str	r2, [r3, #0]
    h[8] = h8;
 8025d26:	687b      	ldr	r3, [r7, #4]
 8025d28:	3320      	adds	r3, #32
 8025d2a:	68fa      	ldr	r2, [r7, #12]
 8025d2c:	601a      	str	r2, [r3, #0]
    h[9] = h9;
 8025d2e:	687b      	ldr	r3, [r7, #4]
 8025d30:	3324      	adds	r3, #36	; 0x24
 8025d32:	68ba      	ldr	r2, [r7, #8]
 8025d34:	601a      	str	r2, [r3, #0]
}
 8025d36:	bf00      	nop
 8025d38:	375c      	adds	r7, #92	; 0x5c
 8025d3a:	46bd      	mov	sp, r7
 8025d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d40:	4770      	bx	lr

08025d42 <fe_pow22523>:


void fe_pow22523(fe out, const fe z) {
 8025d42:	b580      	push	{r7, lr}
 8025d44:	b0a2      	sub	sp, #136	; 0x88
 8025d46:	af00      	add	r7, sp, #0
 8025d48:	6078      	str	r0, [r7, #4]
 8025d4a:	6039      	str	r1, [r7, #0]
    fe t0;
    fe t1;
    fe t2;
    int i;
    fe_sq(t0, z);
 8025d4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025d50:	6839      	ldr	r1, [r7, #0]
 8025d52:	4618      	mov	r0, r3
 8025d54:	f000 f99b 	bl	802608e <fe_sq>

    for (i = 1; i < 1; ++i) {
 8025d58:	2301      	movs	r3, #1
 8025d5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025d5e:	e00c      	b.n	8025d7a <fe_pow22523+0x38>
        fe_sq(t0, t0);
 8025d60:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025d64:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025d68:	4611      	mov	r1, r2
 8025d6a:	4618      	mov	r0, r3
 8025d6c:	f000 f98f 	bl	802608e <fe_sq>
    for (i = 1; i < 1; ++i) {
 8025d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025d74:	3301      	adds	r3, #1
 8025d76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025d7e:	2b00      	cmp	r3, #0
 8025d80:	ddee      	ble.n	8025d60 <fe_pow22523+0x1e>
    }

    fe_sq(t1, t0);
 8025d82:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025d86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025d8a:	4611      	mov	r1, r2
 8025d8c:	4618      	mov	r0, r3
 8025d8e:	f000 f97e 	bl	802608e <fe_sq>

    for (i = 1; i < 2; ++i) {
 8025d92:	2301      	movs	r3, #1
 8025d94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025d98:	e00c      	b.n	8025db4 <fe_pow22523+0x72>
        fe_sq(t1, t1);
 8025d9a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025d9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025da2:	4611      	mov	r1, r2
 8025da4:	4618      	mov	r0, r3
 8025da6:	f000 f972 	bl	802608e <fe_sq>
    for (i = 1; i < 2; ++i) {
 8025daa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025dae:	3301      	adds	r3, #1
 8025db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025db8:	2b01      	cmp	r3, #1
 8025dba:	ddee      	ble.n	8025d9a <fe_pow22523+0x58>
    }

    fe_mul(t1, z, t1);
 8025dbc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025dc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025dc4:	6839      	ldr	r1, [r7, #0]
 8025dc6:	4618      	mov	r0, r3
 8025dc8:	f7fd fa52 	bl	8023270 <fe_mul>
    fe_mul(t0, t0, t1);
 8025dcc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025dd0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8025dd4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025dd8:	4618      	mov	r0, r3
 8025dda:	f7fd fa49 	bl	8023270 <fe_mul>
    fe_sq(t0, t0);
 8025dde:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025de2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025de6:	4611      	mov	r1, r2
 8025de8:	4618      	mov	r0, r3
 8025dea:	f000 f950 	bl	802608e <fe_sq>

    for (i = 1; i < 1; ++i) {
 8025dee:	2301      	movs	r3, #1
 8025df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025df4:	e00c      	b.n	8025e10 <fe_pow22523+0xce>
        fe_sq(t0, t0);
 8025df6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025dfa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025dfe:	4611      	mov	r1, r2
 8025e00:	4618      	mov	r0, r3
 8025e02:	f000 f944 	bl	802608e <fe_sq>
    for (i = 1; i < 1; ++i) {
 8025e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025e0a:	3301      	adds	r3, #1
 8025e0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025e14:	2b00      	cmp	r3, #0
 8025e16:	ddee      	ble.n	8025df6 <fe_pow22523+0xb4>
    }

    fe_mul(t0, t1, t0);
 8025e18:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025e1c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8025e20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025e24:	4618      	mov	r0, r3
 8025e26:	f7fd fa23 	bl	8023270 <fe_mul>
    fe_sq(t1, t0);
 8025e2a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025e2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025e32:	4611      	mov	r1, r2
 8025e34:	4618      	mov	r0, r3
 8025e36:	f000 f92a 	bl	802608e <fe_sq>

    for (i = 1; i < 5; ++i) {
 8025e3a:	2301      	movs	r3, #1
 8025e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025e40:	e00c      	b.n	8025e5c <fe_pow22523+0x11a>
        fe_sq(t1, t1);
 8025e42:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025e46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025e4a:	4611      	mov	r1, r2
 8025e4c:	4618      	mov	r0, r3
 8025e4e:	f000 f91e 	bl	802608e <fe_sq>
    for (i = 1; i < 5; ++i) {
 8025e52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025e56:	3301      	adds	r3, #1
 8025e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025e60:	2b04      	cmp	r3, #4
 8025e62:	ddee      	ble.n	8025e42 <fe_pow22523+0x100>
    }

    fe_mul(t0, t1, t0);
 8025e64:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025e68:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8025e6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025e70:	4618      	mov	r0, r3
 8025e72:	f7fd f9fd 	bl	8023270 <fe_mul>
    fe_sq(t1, t0);
 8025e76:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025e7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025e7e:	4611      	mov	r1, r2
 8025e80:	4618      	mov	r0, r3
 8025e82:	f000 f904 	bl	802608e <fe_sq>

    for (i = 1; i < 10; ++i) {
 8025e86:	2301      	movs	r3, #1
 8025e88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025e8c:	e00c      	b.n	8025ea8 <fe_pow22523+0x166>
        fe_sq(t1, t1);
 8025e8e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025e92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025e96:	4611      	mov	r1, r2
 8025e98:	4618      	mov	r0, r3
 8025e9a:	f000 f8f8 	bl	802608e <fe_sq>
    for (i = 1; i < 10; ++i) {
 8025e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025ea2:	3301      	adds	r3, #1
 8025ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025eac:	2b09      	cmp	r3, #9
 8025eae:	ddee      	ble.n	8025e8e <fe_pow22523+0x14c>
    }

    fe_mul(t1, t1, t0);
 8025eb0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025eb4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8025eb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025ebc:	4618      	mov	r0, r3
 8025ebe:	f7fd f9d7 	bl	8023270 <fe_mul>
    fe_sq(t2, t1);
 8025ec2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025ec6:	f107 030c 	add.w	r3, r7, #12
 8025eca:	4611      	mov	r1, r2
 8025ecc:	4618      	mov	r0, r3
 8025ece:	f000 f8de 	bl	802608e <fe_sq>

    for (i = 1; i < 20; ++i) {
 8025ed2:	2301      	movs	r3, #1
 8025ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025ed8:	e00c      	b.n	8025ef4 <fe_pow22523+0x1b2>
        fe_sq(t2, t2);
 8025eda:	f107 020c 	add.w	r2, r7, #12
 8025ede:	f107 030c 	add.w	r3, r7, #12
 8025ee2:	4611      	mov	r1, r2
 8025ee4:	4618      	mov	r0, r3
 8025ee6:	f000 f8d2 	bl	802608e <fe_sq>
    for (i = 1; i < 20; ++i) {
 8025eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025eee:	3301      	adds	r3, #1
 8025ef0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025ef4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025ef8:	2b13      	cmp	r3, #19
 8025efa:	ddee      	ble.n	8025eda <fe_pow22523+0x198>
    }

    fe_mul(t1, t2, t1);
 8025efc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025f00:	f107 010c 	add.w	r1, r7, #12
 8025f04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025f08:	4618      	mov	r0, r3
 8025f0a:	f7fd f9b1 	bl	8023270 <fe_mul>
    fe_sq(t1, t1);
 8025f0e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025f12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025f16:	4611      	mov	r1, r2
 8025f18:	4618      	mov	r0, r3
 8025f1a:	f000 f8b8 	bl	802608e <fe_sq>

    for (i = 1; i < 10; ++i) {
 8025f1e:	2301      	movs	r3, #1
 8025f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025f24:	e00c      	b.n	8025f40 <fe_pow22523+0x1fe>
        fe_sq(t1, t1);
 8025f26:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025f2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025f2e:	4611      	mov	r1, r2
 8025f30:	4618      	mov	r0, r3
 8025f32:	f000 f8ac 	bl	802608e <fe_sq>
    for (i = 1; i < 10; ++i) {
 8025f36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025f3a:	3301      	adds	r3, #1
 8025f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025f44:	2b09      	cmp	r3, #9
 8025f46:	ddee      	ble.n	8025f26 <fe_pow22523+0x1e4>
    }

    fe_mul(t0, t1, t0);
 8025f48:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025f4c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8025f50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8025f54:	4618      	mov	r0, r3
 8025f56:	f7fd f98b 	bl	8023270 <fe_mul>
    fe_sq(t1, t0);
 8025f5a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025f5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025f62:	4611      	mov	r1, r2
 8025f64:	4618      	mov	r0, r3
 8025f66:	f000 f892 	bl	802608e <fe_sq>

    for (i = 1; i < 50; ++i) {
 8025f6a:	2301      	movs	r3, #1
 8025f6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025f70:	e00c      	b.n	8025f8c <fe_pow22523+0x24a>
        fe_sq(t1, t1);
 8025f72:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025f76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025f7a:	4611      	mov	r1, r2
 8025f7c:	4618      	mov	r0, r3
 8025f7e:	f000 f886 	bl	802608e <fe_sq>
    for (i = 1; i < 50; ++i) {
 8025f82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025f86:	3301      	adds	r3, #1
 8025f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025f90:	2b31      	cmp	r3, #49	; 0x31
 8025f92:	ddee      	ble.n	8025f72 <fe_pow22523+0x230>
    }

    fe_mul(t1, t1, t0);
 8025f94:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8025f98:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8025f9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025fa0:	4618      	mov	r0, r3
 8025fa2:	f7fd f965 	bl	8023270 <fe_mul>
    fe_sq(t2, t1);
 8025fa6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025faa:	f107 030c 	add.w	r3, r7, #12
 8025fae:	4611      	mov	r1, r2
 8025fb0:	4618      	mov	r0, r3
 8025fb2:	f000 f86c 	bl	802608e <fe_sq>

    for (i = 1; i < 100; ++i) {
 8025fb6:	2301      	movs	r3, #1
 8025fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025fbc:	e00c      	b.n	8025fd8 <fe_pow22523+0x296>
        fe_sq(t2, t2);
 8025fbe:	f107 020c 	add.w	r2, r7, #12
 8025fc2:	f107 030c 	add.w	r3, r7, #12
 8025fc6:	4611      	mov	r1, r2
 8025fc8:	4618      	mov	r0, r3
 8025fca:	f000 f860 	bl	802608e <fe_sq>
    for (i = 1; i < 100; ++i) {
 8025fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025fd2:	3301      	adds	r3, #1
 8025fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8025fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8025fdc:	2b63      	cmp	r3, #99	; 0x63
 8025fde:	ddee      	ble.n	8025fbe <fe_pow22523+0x27c>
    }

    fe_mul(t1, t2, t1);
 8025fe0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025fe4:	f107 010c 	add.w	r1, r7, #12
 8025fe8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025fec:	4618      	mov	r0, r3
 8025fee:	f7fd f93f 	bl	8023270 <fe_mul>
    fe_sq(t1, t1);
 8025ff2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8025ff6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8025ffa:	4611      	mov	r1, r2
 8025ffc:	4618      	mov	r0, r3
 8025ffe:	f000 f846 	bl	802608e <fe_sq>

    for (i = 1; i < 50; ++i) {
 8026002:	2301      	movs	r3, #1
 8026004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8026008:	e00c      	b.n	8026024 <fe_pow22523+0x2e2>
        fe_sq(t1, t1);
 802600a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 802600e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8026012:	4611      	mov	r1, r2
 8026014:	4618      	mov	r0, r3
 8026016:	f000 f83a 	bl	802608e <fe_sq>
    for (i = 1; i < 50; ++i) {
 802601a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802601e:	3301      	adds	r3, #1
 8026020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8026024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026028:	2b31      	cmp	r3, #49	; 0x31
 802602a:	ddee      	ble.n	802600a <fe_pow22523+0x2c8>
    }

    fe_mul(t0, t1, t0);
 802602c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8026030:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8026034:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8026038:	4618      	mov	r0, r3
 802603a:	f7fd f919 	bl	8023270 <fe_mul>
    fe_sq(t0, t0);
 802603e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8026042:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8026046:	4611      	mov	r1, r2
 8026048:	4618      	mov	r0, r3
 802604a:	f000 f820 	bl	802608e <fe_sq>

    for (i = 1; i < 2; ++i) {
 802604e:	2301      	movs	r3, #1
 8026050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8026054:	e00c      	b.n	8026070 <fe_pow22523+0x32e>
        fe_sq(t0, t0);
 8026056:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 802605a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802605e:	4611      	mov	r1, r2
 8026060:	4618      	mov	r0, r3
 8026062:	f000 f814 	bl	802608e <fe_sq>
    for (i = 1; i < 2; ++i) {
 8026066:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 802606a:	3301      	adds	r3, #1
 802606c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8026070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026074:	2b01      	cmp	r3, #1
 8026076:	ddee      	ble.n	8026056 <fe_pow22523+0x314>
    }

    fe_mul(out, t0, z);
 8026078:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 802607c:	683a      	ldr	r2, [r7, #0]
 802607e:	4619      	mov	r1, r3
 8026080:	6878      	ldr	r0, [r7, #4]
 8026082:	f7fd f8f5 	bl	8023270 <fe_mul>
    return;
 8026086:	bf00      	nop
}
 8026088:	3788      	adds	r7, #136	; 0x88
 802608a:	46bd      	mov	sp, r7
 802608c:	bd80      	pop	{r7, pc}

0802608e <fe_sq>:

/*
See fe_mul.c for discussion of implementation strategy.
*/

void fe_sq(fe h, const fe f) {
 802608e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8026092:	f2ad 5d4c 	subw	sp, sp, #1356	; 0x54c
 8026096:	af00      	add	r7, sp, #0
 8026098:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 802609c:	6018      	str	r0, [r3, #0]
 802609e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80260a2:	6019      	str	r1, [r3, #0]
    int32_t f0 = f[0];
 80260a4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80260a8:	681b      	ldr	r3, [r3, #0]
 80260aa:	681b      	ldr	r3, [r3, #0]
 80260ac:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
    int32_t f1 = f[1];
 80260b0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80260b4:	681b      	ldr	r3, [r3, #0]
 80260b6:	685b      	ldr	r3, [r3, #4]
 80260b8:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
    int32_t f2 = f[2];
 80260bc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80260c0:	681b      	ldr	r3, [r3, #0]
 80260c2:	689b      	ldr	r3, [r3, #8]
 80260c4:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
    int32_t f3 = f[3];
 80260c8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80260cc:	681b      	ldr	r3, [r3, #0]
 80260ce:	68db      	ldr	r3, [r3, #12]
 80260d0:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
    int32_t f4 = f[4];
 80260d4:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80260d8:	681b      	ldr	r3, [r3, #0]
 80260da:	691b      	ldr	r3, [r3, #16]
 80260dc:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    int32_t f5 = f[5];
 80260e0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80260e4:	681b      	ldr	r3, [r3, #0]
 80260e6:	695b      	ldr	r3, [r3, #20]
 80260e8:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
    int32_t f6 = f[6];
 80260ec:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80260f0:	681b      	ldr	r3, [r3, #0]
 80260f2:	699b      	ldr	r3, [r3, #24]
 80260f4:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    int32_t f7 = f[7];
 80260f8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80260fc:	681b      	ldr	r3, [r3, #0]
 80260fe:	69db      	ldr	r3, [r3, #28]
 8026100:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
    int32_t f8 = f[8];
 8026104:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8026108:	681b      	ldr	r3, [r3, #0]
 802610a:	6a1b      	ldr	r3, [r3, #32]
 802610c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    int32_t f9 = f[9];
 8026110:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8026114:	681b      	ldr	r3, [r3, #0]
 8026116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026118:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    int32_t f0_2 = 2 * f0;
 802611c:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8026120:	005b      	lsls	r3, r3, #1
 8026122:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
    int32_t f1_2 = 2 * f1;
 8026126:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 802612a:	005b      	lsls	r3, r3, #1
 802612c:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
    int32_t f2_2 = 2 * f2;
 8026130:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8026134:	005b      	lsls	r3, r3, #1
 8026136:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    int32_t f3_2 = 2 * f3;
 802613a:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 802613e:	005b      	lsls	r3, r3, #1
 8026140:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
    int32_t f4_2 = 2 * f4;
 8026144:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8026148:	005b      	lsls	r3, r3, #1
 802614a:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
    int32_t f5_2 = 2 * f5;
 802614e:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8026152:	005b      	lsls	r3, r3, #1
 8026154:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
    int32_t f6_2 = 2 * f6;
 8026158:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 802615c:	005b      	lsls	r3, r3, #1
 802615e:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
    int32_t f7_2 = 2 * f7;
 8026162:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8026166:	005b      	lsls	r3, r3, #1
 8026168:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    int32_t f5_38 = 38 * f5; /* 1.959375*2^30 */
 802616c:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 8026170:	2326      	movs	r3, #38	; 0x26
 8026172:	fb03 f302 	mul.w	r3, r3, r2
 8026176:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
    int32_t f6_19 = 19 * f6; /* 1.959375*2^30 */
 802617a:	f8d7 252c 	ldr.w	r2, [r7, #1324]	; 0x52c
 802617e:	4613      	mov	r3, r2
 8026180:	00db      	lsls	r3, r3, #3
 8026182:	4413      	add	r3, r2
 8026184:	005b      	lsls	r3, r3, #1
 8026186:	4413      	add	r3, r2
 8026188:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
    int32_t f7_38 = 38 * f7; /* 1.959375*2^30 */
 802618c:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 8026190:	2326      	movs	r3, #38	; 0x26
 8026192:	fb03 f302 	mul.w	r3, r3, r2
 8026196:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
    int32_t f8_19 = 19 * f8; /* 1.959375*2^30 */
 802619a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 802619e:	4613      	mov	r3, r2
 80261a0:	00db      	lsls	r3, r3, #3
 80261a2:	4413      	add	r3, r2
 80261a4:	005b      	lsls	r3, r3, #1
 80261a6:	4413      	add	r3, r2
 80261a8:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
    int32_t f9_38 = 38 * f9; /* 1.959375*2^30 */
 80261ac:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 80261b0:	2326      	movs	r3, #38	; 0x26
 80261b2:	fb03 f302 	mul.w	r3, r3, r2
 80261b6:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
    int64_t f0f0    = f0   * (int64_t) f0;
 80261ba:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80261be:	4618      	mov	r0, r3
 80261c0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80261c4:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80261c8:	461a      	mov	r2, r3
 80261ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80261ce:	fb02 f501 	mul.w	r5, r2, r1
 80261d2:	fb00 f403 	mul.w	r4, r0, r3
 80261d6:	442c      	add	r4, r5
 80261d8:	fba0 2302 	umull	r2, r3, r0, r2
 80261dc:	18e1      	adds	r1, r4, r3
 80261de:	460b      	mov	r3, r1
 80261e0:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80261e4:	e9c1 2300 	strd	r2, r3, [r1]
 80261e8:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 80261ec:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f1_2  = f0_2 * (int64_t) f1;
 80261f0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80261f4:	4618      	mov	r0, r3
 80261f6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80261fa:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80261fe:	461a      	mov	r2, r3
 8026200:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026204:	fb02 f501 	mul.w	r5, r2, r1
 8026208:	fb00 f403 	mul.w	r4, r0, r3
 802620c:	442c      	add	r4, r5
 802620e:	fba0 2302 	umull	r2, r3, r0, r2
 8026212:	18e1      	adds	r1, r4, r3
 8026214:	460b      	mov	r3, r1
 8026216:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 802621a:	e9c1 2300 	strd	r2, r3, [r1]
 802621e:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8026222:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f2_2  = f0_2 * (int64_t) f2;
 8026226:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 802622a:	4618      	mov	r0, r3
 802622c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026230:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8026234:	461a      	mov	r2, r3
 8026236:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802623a:	fb02 f501 	mul.w	r5, r2, r1
 802623e:	fb00 f403 	mul.w	r4, r0, r3
 8026242:	442c      	add	r4, r5
 8026244:	fba0 2302 	umull	r2, r3, r0, r2
 8026248:	18e1      	adds	r1, r4, r3
 802624a:	460b      	mov	r3, r1
 802624c:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8026250:	e9c1 2300 	strd	r2, r3, [r1]
 8026254:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8026258:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f3_2  = f0_2 * (int64_t) f3;
 802625c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8026260:	4618      	mov	r0, r3
 8026262:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026266:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 802626a:	461a      	mov	r2, r3
 802626c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026270:	fb02 f501 	mul.w	r5, r2, r1
 8026274:	fb00 f403 	mul.w	r4, r0, r3
 8026278:	442c      	add	r4, r5
 802627a:	fba0 2302 	umull	r2, r3, r0, r2
 802627e:	18e1      	adds	r1, r4, r3
 8026280:	460b      	mov	r3, r1
 8026282:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8026286:	e9c1 2300 	strd	r2, r3, [r1]
 802628a:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 802628e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f4_2  = f0_2 * (int64_t) f4;
 8026292:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8026296:	4618      	mov	r0, r3
 8026298:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802629c:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80262a0:	461a      	mov	r2, r3
 80262a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80262a6:	fb02 f501 	mul.w	r5, r2, r1
 80262aa:	fb00 f403 	mul.w	r4, r0, r3
 80262ae:	442c      	add	r4, r5
 80262b0:	fba0 2302 	umull	r2, r3, r0, r2
 80262b4:	18e1      	adds	r1, r4, r3
 80262b6:	460b      	mov	r3, r1
 80262b8:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 80262bc:	e9c1 2300 	strd	r2, r3, [r1]
 80262c0:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 80262c4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f5_2  = f0_2 * (int64_t) f5;
 80262c8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80262cc:	4618      	mov	r0, r3
 80262ce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80262d2:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80262d6:	461a      	mov	r2, r3
 80262d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80262dc:	fb02 f501 	mul.w	r5, r2, r1
 80262e0:	fb00 f403 	mul.w	r4, r0, r3
 80262e4:	442c      	add	r4, r5
 80262e6:	fba0 2302 	umull	r2, r3, r0, r2
 80262ea:	18e1      	adds	r1, r4, r3
 80262ec:	460b      	mov	r3, r1
 80262ee:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 80262f2:	e9c1 2300 	strd	r2, r3, [r1]
 80262f6:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 80262fa:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f6_2  = f0_2 * (int64_t) f6;
 80262fe:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8026302:	4618      	mov	r0, r3
 8026304:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026308:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 802630c:	461a      	mov	r2, r3
 802630e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026312:	fb02 f501 	mul.w	r5, r2, r1
 8026316:	fb00 f403 	mul.w	r4, r0, r3
 802631a:	442c      	add	r4, r5
 802631c:	fba0 2302 	umull	r2, r3, r0, r2
 8026320:	18e1      	adds	r1, r4, r3
 8026322:	460b      	mov	r3, r1
 8026324:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8026328:	e9c1 2300 	strd	r2, r3, [r1]
 802632c:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8026330:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f7_2  = f0_2 * (int64_t) f7;
 8026334:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8026338:	4618      	mov	r0, r3
 802633a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802633e:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8026342:	461a      	mov	r2, r3
 8026344:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026348:	fb02 f501 	mul.w	r5, r2, r1
 802634c:	fb00 f403 	mul.w	r4, r0, r3
 8026350:	442c      	add	r4, r5
 8026352:	fba0 2302 	umull	r2, r3, r0, r2
 8026356:	18e1      	adds	r1, r4, r3
 8026358:	460b      	mov	r3, r1
 802635a:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 802635e:	e9c1 2300 	strd	r2, r3, [r1]
 8026362:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8026366:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f8_2  = f0_2 * (int64_t) f8;
 802636a:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 802636e:	4618      	mov	r0, r3
 8026370:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026374:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8026378:	461a      	mov	r2, r3
 802637a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802637e:	fb02 f501 	mul.w	r5, r2, r1
 8026382:	fb00 f403 	mul.w	r4, r0, r3
 8026386:	442c      	add	r4, r5
 8026388:	fba0 2302 	umull	r2, r3, r0, r2
 802638c:	18e1      	adds	r1, r4, r3
 802638e:	460b      	mov	r3, r1
 8026390:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8026394:	e9c1 2300 	strd	r2, r3, [r1]
 8026398:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 802639c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f9_2  = f0_2 * (int64_t) f9;
 80263a0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80263a4:	4618      	mov	r0, r3
 80263a6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80263aa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80263ae:	461a      	mov	r2, r3
 80263b0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80263b4:	fb02 f501 	mul.w	r5, r2, r1
 80263b8:	fb00 f403 	mul.w	r4, r0, r3
 80263bc:	442c      	add	r4, r5
 80263be:	fba0 2302 	umull	r2, r3, r0, r2
 80263c2:	18e1      	adds	r1, r4, r3
 80263c4:	460b      	mov	r3, r1
 80263c6:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 80263ca:	e9c1 2300 	strd	r2, r3, [r1]
 80263ce:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 80263d2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f1_2  = f1_2 * (int64_t) f1;
 80263d6:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80263da:	4618      	mov	r0, r3
 80263dc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80263e0:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80263e4:	461a      	mov	r2, r3
 80263e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80263ea:	fb02 f501 	mul.w	r5, r2, r1
 80263ee:	fb00 f403 	mul.w	r4, r0, r3
 80263f2:	442c      	add	r4, r5
 80263f4:	fba0 2302 	umull	r2, r3, r0, r2
 80263f8:	18e1      	adds	r1, r4, r3
 80263fa:	460b      	mov	r3, r1
 80263fc:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 8026400:	e9c1 2300 	strd	r2, r3, [r1]
 8026404:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 8026408:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f2_2  = f1_2 * (int64_t) f2;
 802640c:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8026410:	4618      	mov	r0, r3
 8026412:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026416:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 802641a:	461a      	mov	r2, r3
 802641c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026420:	fb02 f501 	mul.w	r5, r2, r1
 8026424:	fb00 f403 	mul.w	r4, r0, r3
 8026428:	442c      	add	r4, r5
 802642a:	fba0 2302 	umull	r2, r3, r0, r2
 802642e:	18e1      	adds	r1, r4, r3
 8026430:	460b      	mov	r3, r1
 8026432:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8026436:	e9c1 2300 	strd	r2, r3, [r1]
 802643a:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 802643e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f3_4  = f1_2 * (int64_t) f3_2;
 8026442:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8026446:	4618      	mov	r0, r3
 8026448:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802644c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8026450:	461a      	mov	r2, r3
 8026452:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026456:	fb02 f501 	mul.w	r5, r2, r1
 802645a:	fb00 f403 	mul.w	r4, r0, r3
 802645e:	442c      	add	r4, r5
 8026460:	fba0 2302 	umull	r2, r3, r0, r2
 8026464:	18e1      	adds	r1, r4, r3
 8026466:	460b      	mov	r3, r1
 8026468:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 802646c:	e9c1 2300 	strd	r2, r3, [r1]
 8026470:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8026474:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f4_2  = f1_2 * (int64_t) f4;
 8026478:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 802647c:	4618      	mov	r0, r3
 802647e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026482:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8026486:	461a      	mov	r2, r3
 8026488:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802648c:	fb02 f501 	mul.w	r5, r2, r1
 8026490:	fb00 f403 	mul.w	r4, r0, r3
 8026494:	442c      	add	r4, r5
 8026496:	fba0 2302 	umull	r2, r3, r0, r2
 802649a:	18e1      	adds	r1, r4, r3
 802649c:	460b      	mov	r3, r1
 802649e:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 80264a2:	e9c1 2300 	strd	r2, r3, [r1]
 80264a6:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 80264aa:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f5_4  = f1_2 * (int64_t) f5_2;
 80264ae:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80264b2:	4618      	mov	r0, r3
 80264b4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80264b8:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 80264bc:	461a      	mov	r2, r3
 80264be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80264c2:	fb02 f501 	mul.w	r5, r2, r1
 80264c6:	fb00 f403 	mul.w	r4, r0, r3
 80264ca:	442c      	add	r4, r5
 80264cc:	fba0 2302 	umull	r2, r3, r0, r2
 80264d0:	18e1      	adds	r1, r4, r3
 80264d2:	460b      	mov	r3, r1
 80264d4:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 80264d8:	e9c1 2300 	strd	r2, r3, [r1]
 80264dc:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 80264e0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f6_2  = f1_2 * (int64_t) f6;
 80264e4:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80264e8:	4618      	mov	r0, r3
 80264ea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80264ee:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80264f2:	461a      	mov	r2, r3
 80264f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80264f8:	fb02 f501 	mul.w	r5, r2, r1
 80264fc:	fb00 f403 	mul.w	r4, r0, r3
 8026500:	442c      	add	r4, r5
 8026502:	fba0 2302 	umull	r2, r3, r0, r2
 8026506:	18e1      	adds	r1, r4, r3
 8026508:	460b      	mov	r3, r1
 802650a:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 802650e:	e9c1 2300 	strd	r2, r3, [r1]
 8026512:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8026516:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f7_4  = f1_2 * (int64_t) f7_2;
 802651a:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 802651e:	4618      	mov	r0, r3
 8026520:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026524:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8026528:	461a      	mov	r2, r3
 802652a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802652e:	fb02 f501 	mul.w	r5, r2, r1
 8026532:	fb00 f403 	mul.w	r4, r0, r3
 8026536:	442c      	add	r4, r5
 8026538:	fba0 2302 	umull	r2, r3, r0, r2
 802653c:	18e1      	adds	r1, r4, r3
 802653e:	460b      	mov	r3, r1
 8026540:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8026544:	e9c1 2300 	strd	r2, r3, [r1]
 8026548:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 802654c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f8_2  = f1_2 * (int64_t) f8;
 8026550:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 8026554:	4618      	mov	r0, r3
 8026556:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802655a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 802655e:	461a      	mov	r2, r3
 8026560:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026564:	fb02 f501 	mul.w	r5, r2, r1
 8026568:	fb00 f403 	mul.w	r4, r0, r3
 802656c:	442c      	add	r4, r5
 802656e:	fba0 2302 	umull	r2, r3, r0, r2
 8026572:	18e1      	adds	r1, r4, r3
 8026574:	460b      	mov	r3, r1
 8026576:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 802657a:	e9c1 2300 	strd	r2, r3, [r1]
 802657e:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8026582:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f9_76 = f1_2 * (int64_t) f9_38;
 8026586:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 802658a:	4618      	mov	r0, r3
 802658c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026590:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8026594:	461a      	mov	r2, r3
 8026596:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802659a:	fb02 f501 	mul.w	r5, r2, r1
 802659e:	fb00 f403 	mul.w	r4, r0, r3
 80265a2:	442c      	add	r4, r5
 80265a4:	fba0 2302 	umull	r2, r3, r0, r2
 80265a8:	18e1      	adds	r1, r4, r3
 80265aa:	460b      	mov	r3, r1
 80265ac:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 80265b0:	e9c1 2300 	strd	r2, r3, [r1]
 80265b4:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 80265b8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f2    = f2   * (int64_t) f2;
 80265bc:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80265c0:	4618      	mov	r0, r3
 80265c2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80265c6:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80265ca:	461a      	mov	r2, r3
 80265cc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80265d0:	fb02 f501 	mul.w	r5, r2, r1
 80265d4:	fb00 f403 	mul.w	r4, r0, r3
 80265d8:	442c      	add	r4, r5
 80265da:	fba0 2302 	umull	r2, r3, r0, r2
 80265de:	18e1      	adds	r1, r4, r3
 80265e0:	460b      	mov	r3, r1
 80265e2:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 80265e6:	e9c1 2300 	strd	r2, r3, [r1]
 80265ea:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 80265ee:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f3_2  = f2_2 * (int64_t) f3;
 80265f2:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80265f6:	4618      	mov	r0, r3
 80265f8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80265fc:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8026600:	461a      	mov	r2, r3
 8026602:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026606:	fb02 f501 	mul.w	r5, r2, r1
 802660a:	fb00 f403 	mul.w	r4, r0, r3
 802660e:	442c      	add	r4, r5
 8026610:	fba0 2302 	umull	r2, r3, r0, r2
 8026614:	18e1      	adds	r1, r4, r3
 8026616:	460b      	mov	r3, r1
 8026618:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 802661c:	e9c1 2300 	strd	r2, r3, [r1]
 8026620:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8026624:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f4_2  = f2_2 * (int64_t) f4;
 8026628:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 802662c:	4618      	mov	r0, r3
 802662e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026632:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8026636:	461a      	mov	r2, r3
 8026638:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802663c:	fb02 f501 	mul.w	r5, r2, r1
 8026640:	fb00 f403 	mul.w	r4, r0, r3
 8026644:	442c      	add	r4, r5
 8026646:	fba0 2302 	umull	r2, r3, r0, r2
 802664a:	18e1      	adds	r1, r4, r3
 802664c:	460b      	mov	r3, r1
 802664e:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8026652:	e9c1 2300 	strd	r2, r3, [r1]
 8026656:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 802665a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f5_2  = f2_2 * (int64_t) f5;
 802665e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8026662:	4618      	mov	r0, r3
 8026664:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026668:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 802666c:	461a      	mov	r2, r3
 802666e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026672:	fb02 f501 	mul.w	r5, r2, r1
 8026676:	fb00 f403 	mul.w	r4, r0, r3
 802667a:	442c      	add	r4, r5
 802667c:	fba0 2302 	umull	r2, r3, r0, r2
 8026680:	18e1      	adds	r1, r4, r3
 8026682:	460b      	mov	r3, r1
 8026684:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8026688:	e9c1 2300 	strd	r2, r3, [r1]
 802668c:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8026690:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f6_2  = f2_2 * (int64_t) f6;
 8026694:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8026698:	4618      	mov	r0, r3
 802669a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802669e:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80266a2:	461a      	mov	r2, r3
 80266a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80266a8:	fb02 f501 	mul.w	r5, r2, r1
 80266ac:	fb00 f403 	mul.w	r4, r0, r3
 80266b0:	442c      	add	r4, r5
 80266b2:	fba0 2302 	umull	r2, r3, r0, r2
 80266b6:	18e1      	adds	r1, r4, r3
 80266b8:	460b      	mov	r3, r1
 80266ba:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 80266be:	e9c1 2300 	strd	r2, r3, [r1]
 80266c2:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 80266c6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f7_2  = f2_2 * (int64_t) f7;
 80266ca:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80266ce:	4618      	mov	r0, r3
 80266d0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80266d4:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 80266d8:	461a      	mov	r2, r3
 80266da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80266de:	fb02 f501 	mul.w	r5, r2, r1
 80266e2:	fb00 f403 	mul.w	r4, r0, r3
 80266e6:	442c      	add	r4, r5
 80266e8:	fba0 2302 	umull	r2, r3, r0, r2
 80266ec:	18e1      	adds	r1, r4, r3
 80266ee:	460b      	mov	r3, r1
 80266f0:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 80266f4:	e9c1 2300 	strd	r2, r3, [r1]
 80266f8:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 80266fc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f8_38 = f2_2 * (int64_t) f8_19;
 8026700:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8026704:	4618      	mov	r0, r3
 8026706:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802670a:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 802670e:	461a      	mov	r2, r3
 8026710:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026714:	fb02 f501 	mul.w	r5, r2, r1
 8026718:	fb00 f403 	mul.w	r4, r0, r3
 802671c:	442c      	add	r4, r5
 802671e:	fba0 2302 	umull	r2, r3, r0, r2
 8026722:	18e1      	adds	r1, r4, r3
 8026724:	460b      	mov	r3, r1
 8026726:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 802672a:	e9c1 2300 	strd	r2, r3, [r1]
 802672e:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8026732:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f9_38 = f2   * (int64_t) f9_38;
 8026736:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 802673a:	4618      	mov	r0, r3
 802673c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026740:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8026744:	461a      	mov	r2, r3
 8026746:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802674a:	fb02 f501 	mul.w	r5, r2, r1
 802674e:	fb00 f403 	mul.w	r4, r0, r3
 8026752:	442c      	add	r4, r5
 8026754:	fba0 2302 	umull	r2, r3, r0, r2
 8026758:	18e1      	adds	r1, r4, r3
 802675a:	460b      	mov	r3, r1
 802675c:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8026760:	e9c1 2300 	strd	r2, r3, [r1]
 8026764:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8026768:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f3_2  = f3_2 * (int64_t) f3;
 802676c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8026770:	4618      	mov	r0, r3
 8026772:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026776:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 802677a:	461a      	mov	r2, r3
 802677c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026780:	fb02 f501 	mul.w	r5, r2, r1
 8026784:	fb00 f403 	mul.w	r4, r0, r3
 8026788:	442c      	add	r4, r5
 802678a:	fba0 2302 	umull	r2, r3, r0, r2
 802678e:	18e1      	adds	r1, r4, r3
 8026790:	460b      	mov	r3, r1
 8026792:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8026796:	e9c1 2300 	strd	r2, r3, [r1]
 802679a:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 802679e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f4_2  = f3_2 * (int64_t) f4;
 80267a2:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80267a6:	4618      	mov	r0, r3
 80267a8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80267ac:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80267b0:	461a      	mov	r2, r3
 80267b2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80267b6:	fb02 f501 	mul.w	r5, r2, r1
 80267ba:	fb00 f403 	mul.w	r4, r0, r3
 80267be:	442c      	add	r4, r5
 80267c0:	fba0 2302 	umull	r2, r3, r0, r2
 80267c4:	18e1      	adds	r1, r4, r3
 80267c6:	460b      	mov	r3, r1
 80267c8:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80267cc:	e9c1 2300 	strd	r2, r3, [r1]
 80267d0:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 80267d4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f5_4  = f3_2 * (int64_t) f5_2;
 80267d8:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80267dc:	4618      	mov	r0, r3
 80267de:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80267e2:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 80267e6:	461a      	mov	r2, r3
 80267e8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80267ec:	fb02 f501 	mul.w	r5, r2, r1
 80267f0:	fb00 f403 	mul.w	r4, r0, r3
 80267f4:	442c      	add	r4, r5
 80267f6:	fba0 2302 	umull	r2, r3, r0, r2
 80267fa:	18e1      	adds	r1, r4, r3
 80267fc:	460b      	mov	r3, r1
 80267fe:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
 8026802:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
    int64_t f3f6_2  = f3_2 * (int64_t) f6;
 8026806:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 802680a:	4618      	mov	r0, r3
 802680c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026810:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8026814:	461a      	mov	r2, r3
 8026816:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802681a:	fb02 f501 	mul.w	r5, r2, r1
 802681e:	fb00 f403 	mul.w	r4, r0, r3
 8026822:	442c      	add	r4, r5
 8026824:	fba0 2302 	umull	r2, r3, r0, r2
 8026828:	18e1      	adds	r1, r4, r3
 802682a:	460b      	mov	r3, r1
 802682c:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
 8026830:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
    int64_t f3f7_76 = f3_2 * (int64_t) f7_38;
 8026834:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8026838:	4618      	mov	r0, r3
 802683a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802683e:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8026842:	461a      	mov	r2, r3
 8026844:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026848:	fb02 f501 	mul.w	r5, r2, r1
 802684c:	fb00 f403 	mul.w	r4, r0, r3
 8026850:	442c      	add	r4, r5
 8026852:	fba0 2302 	umull	r2, r3, r0, r2
 8026856:	18e1      	adds	r1, r4, r3
 8026858:	460b      	mov	r3, r1
 802685a:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
 802685e:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
    int64_t f3f8_38 = f3_2 * (int64_t) f8_19;
 8026862:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8026866:	4618      	mov	r0, r3
 8026868:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802686c:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8026870:	461a      	mov	r2, r3
 8026872:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026876:	fb02 f501 	mul.w	r5, r2, r1
 802687a:	fb00 f403 	mul.w	r4, r0, r3
 802687e:	442c      	add	r4, r5
 8026880:	fba0 2302 	umull	r2, r3, r0, r2
 8026884:	18e1      	adds	r1, r4, r3
 8026886:	460b      	mov	r3, r1
 8026888:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
 802688c:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
    int64_t f3f9_76 = f3_2 * (int64_t) f9_38;
 8026890:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8026894:	4618      	mov	r0, r3
 8026896:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802689a:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 802689e:	461a      	mov	r2, r3
 80268a0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80268a4:	fb02 f501 	mul.w	r5, r2, r1
 80268a8:	fb00 f403 	mul.w	r4, r0, r3
 80268ac:	442c      	add	r4, r5
 80268ae:	fba0 2302 	umull	r2, r3, r0, r2
 80268b2:	18e1      	adds	r1, r4, r3
 80268b4:	460b      	mov	r3, r1
 80268b6:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
 80268ba:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
    int64_t f4f4    = f4   * (int64_t) f4;
 80268be:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80268c2:	4618      	mov	r0, r3
 80268c4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80268c8:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80268cc:	461a      	mov	r2, r3
 80268ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80268d2:	fb02 f501 	mul.w	r5, r2, r1
 80268d6:	fb00 f403 	mul.w	r4, r0, r3
 80268da:	442c      	add	r4, r5
 80268dc:	fba0 2302 	umull	r2, r3, r0, r2
 80268e0:	18e1      	adds	r1, r4, r3
 80268e2:	460b      	mov	r3, r1
 80268e4:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
 80268e8:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
    int64_t f4f5_2  = f4_2 * (int64_t) f5;
 80268ec:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 80268f0:	4618      	mov	r0, r3
 80268f2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80268f6:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80268fa:	461a      	mov	r2, r3
 80268fc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026900:	fb02 f501 	mul.w	r5, r2, r1
 8026904:	fb00 f403 	mul.w	r4, r0, r3
 8026908:	442c      	add	r4, r5
 802690a:	fba0 2302 	umull	r2, r3, r0, r2
 802690e:	18e1      	adds	r1, r4, r3
 8026910:	460b      	mov	r3, r1
 8026912:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
 8026916:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
    int64_t f4f6_38 = f4_2 * (int64_t) f6_19;
 802691a:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 802691e:	4618      	mov	r0, r3
 8026920:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026924:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8026928:	461a      	mov	r2, r3
 802692a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802692e:	fb02 f501 	mul.w	r5, r2, r1
 8026932:	fb00 f403 	mul.w	r4, r0, r3
 8026936:	442c      	add	r4, r5
 8026938:	fba0 2302 	umull	r2, r3, r0, r2
 802693c:	18e1      	adds	r1, r4, r3
 802693e:	460b      	mov	r3, r1
 8026940:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
 8026944:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
    int64_t f4f7_38 = f4   * (int64_t) f7_38;
 8026948:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 802694c:	4618      	mov	r0, r3
 802694e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026952:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8026956:	461a      	mov	r2, r3
 8026958:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802695c:	fb02 f501 	mul.w	r5, r2, r1
 8026960:	fb00 f403 	mul.w	r4, r0, r3
 8026964:	442c      	add	r4, r5
 8026966:	fba0 2302 	umull	r2, r3, r0, r2
 802696a:	18e1      	adds	r1, r4, r3
 802696c:	460b      	mov	r3, r1
 802696e:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
 8026972:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
    int64_t f4f8_38 = f4_2 * (int64_t) f8_19;
 8026976:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 802697a:	4618      	mov	r0, r3
 802697c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026980:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8026984:	461a      	mov	r2, r3
 8026986:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802698a:	fb02 f501 	mul.w	r5, r2, r1
 802698e:	fb00 f403 	mul.w	r4, r0, r3
 8026992:	442c      	add	r4, r5
 8026994:	fba0 2302 	umull	r2, r3, r0, r2
 8026998:	18e1      	adds	r1, r4, r3
 802699a:	460b      	mov	r3, r1
 802699c:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
 80269a0:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
    int64_t f4f9_38 = f4   * (int64_t) f9_38;
 80269a4:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80269a8:	4618      	mov	r0, r3
 80269aa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80269ae:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80269b2:	461a      	mov	r2, r3
 80269b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80269b8:	fb02 f501 	mul.w	r5, r2, r1
 80269bc:	fb00 f403 	mul.w	r4, r0, r3
 80269c0:	442c      	add	r4, r5
 80269c2:	fba0 2302 	umull	r2, r3, r0, r2
 80269c6:	18e1      	adds	r1, r4, r3
 80269c8:	460b      	mov	r3, r1
 80269ca:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
 80269ce:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
    int64_t f5f5_38 = f5   * (int64_t) f5_38;
 80269d2:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80269d6:	4618      	mov	r0, r3
 80269d8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80269dc:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 80269e0:	461a      	mov	r2, r3
 80269e2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80269e6:	fb02 f501 	mul.w	r5, r2, r1
 80269ea:	fb00 f403 	mul.w	r4, r0, r3
 80269ee:	442c      	add	r4, r5
 80269f0:	fba0 2302 	umull	r2, r3, r0, r2
 80269f4:	18e1      	adds	r1, r4, r3
 80269f6:	460b      	mov	r3, r1
 80269f8:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
 80269fc:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
    int64_t f5f6_38 = f5_2 * (int64_t) f6_19;
 8026a00:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8026a04:	4618      	mov	r0, r3
 8026a06:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026a0a:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8026a0e:	461a      	mov	r2, r3
 8026a10:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026a14:	fb02 f501 	mul.w	r5, r2, r1
 8026a18:	fb00 f403 	mul.w	r4, r0, r3
 8026a1c:	442c      	add	r4, r5
 8026a1e:	fba0 2302 	umull	r2, r3, r0, r2
 8026a22:	18e1      	adds	r1, r4, r3
 8026a24:	460b      	mov	r3, r1
 8026a26:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
 8026a2a:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
    int64_t f5f7_76 = f5_2 * (int64_t) f7_38;
 8026a2e:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8026a32:	4618      	mov	r0, r3
 8026a34:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026a38:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8026a3c:	461a      	mov	r2, r3
 8026a3e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026a42:	fb02 f501 	mul.w	r5, r2, r1
 8026a46:	fb00 f403 	mul.w	r4, r0, r3
 8026a4a:	442c      	add	r4, r5
 8026a4c:	fba0 2302 	umull	r2, r3, r0, r2
 8026a50:	18e1      	adds	r1, r4, r3
 8026a52:	460b      	mov	r3, r1
 8026a54:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
 8026a58:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
    int64_t f5f8_38 = f5_2 * (int64_t) f8_19;
 8026a5c:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8026a60:	4618      	mov	r0, r3
 8026a62:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026a66:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8026a6a:	461a      	mov	r2, r3
 8026a6c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026a70:	fb02 f501 	mul.w	r5, r2, r1
 8026a74:	fb00 f403 	mul.w	r4, r0, r3
 8026a78:	442c      	add	r4, r5
 8026a7a:	fba0 2302 	umull	r2, r3, r0, r2
 8026a7e:	18e1      	adds	r1, r4, r3
 8026a80:	460b      	mov	r3, r1
 8026a82:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
 8026a86:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
    int64_t f5f9_76 = f5_2 * (int64_t) f9_38;
 8026a8a:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8026a8e:	4618      	mov	r0, r3
 8026a90:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026a94:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8026a98:	461a      	mov	r2, r3
 8026a9a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026a9e:	fb02 f501 	mul.w	r5, r2, r1
 8026aa2:	fb00 f403 	mul.w	r4, r0, r3
 8026aa6:	442c      	add	r4, r5
 8026aa8:	fba0 2302 	umull	r2, r3, r0, r2
 8026aac:	18e1      	adds	r1, r4, r3
 8026aae:	460b      	mov	r3, r1
 8026ab0:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
 8026ab4:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
    int64_t f6f6_19 = f6   * (int64_t) f6_19;
 8026ab8:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8026abc:	4618      	mov	r0, r3
 8026abe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026ac2:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8026ac6:	461a      	mov	r2, r3
 8026ac8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026acc:	fb02 f501 	mul.w	r5, r2, r1
 8026ad0:	fb00 f403 	mul.w	r4, r0, r3
 8026ad4:	442c      	add	r4, r5
 8026ad6:	fba0 2302 	umull	r2, r3, r0, r2
 8026ada:	18e1      	adds	r1, r4, r3
 8026adc:	460b      	mov	r3, r1
 8026ade:	e9c7 23de 	strd	r2, r3, [r7, #888]	; 0x378
 8026ae2:	e9c7 23de 	strd	r2, r3, [r7, #888]	; 0x378
    int64_t f6f7_38 = f6   * (int64_t) f7_38;
 8026ae6:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8026aea:	4618      	mov	r0, r3
 8026aec:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026af0:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8026af4:	461a      	mov	r2, r3
 8026af6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026afa:	fb02 f501 	mul.w	r5, r2, r1
 8026afe:	fb00 f403 	mul.w	r4, r0, r3
 8026b02:	442c      	add	r4, r5
 8026b04:	fba0 2302 	umull	r2, r3, r0, r2
 8026b08:	18e1      	adds	r1, r4, r3
 8026b0a:	460b      	mov	r3, r1
 8026b0c:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
 8026b10:	e9c7 23dc 	strd	r2, r3, [r7, #880]	; 0x370
    int64_t f6f8_38 = f6_2 * (int64_t) f8_19;
 8026b14:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8026b18:	4618      	mov	r0, r3
 8026b1a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026b1e:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8026b22:	461a      	mov	r2, r3
 8026b24:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026b28:	fb02 f501 	mul.w	r5, r2, r1
 8026b2c:	fb00 f403 	mul.w	r4, r0, r3
 8026b30:	442c      	add	r4, r5
 8026b32:	fba0 2302 	umull	r2, r3, r0, r2
 8026b36:	18e1      	adds	r1, r4, r3
 8026b38:	460b      	mov	r3, r1
 8026b3a:	e9c7 23da 	strd	r2, r3, [r7, #872]	; 0x368
 8026b3e:	e9c7 23da 	strd	r2, r3, [r7, #872]	; 0x368
    int64_t f6f9_38 = f6   * (int64_t) f9_38;
 8026b42:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8026b46:	4618      	mov	r0, r3
 8026b48:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026b4c:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8026b50:	461a      	mov	r2, r3
 8026b52:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026b56:	fb02 f501 	mul.w	r5, r2, r1
 8026b5a:	fb00 f403 	mul.w	r4, r0, r3
 8026b5e:	442c      	add	r4, r5
 8026b60:	fba0 2302 	umull	r2, r3, r0, r2
 8026b64:	18e1      	adds	r1, r4, r3
 8026b66:	460b      	mov	r3, r1
 8026b68:	e9c7 23d8 	strd	r2, r3, [r7, #864]	; 0x360
 8026b6c:	e9c7 23d8 	strd	r2, r3, [r7, #864]	; 0x360
    int64_t f7f7_38 = f7   * (int64_t) f7_38;
 8026b70:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8026b74:	4618      	mov	r0, r3
 8026b76:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026b7a:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8026b7e:	461a      	mov	r2, r3
 8026b80:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026b84:	fb02 f501 	mul.w	r5, r2, r1
 8026b88:	fb00 f403 	mul.w	r4, r0, r3
 8026b8c:	442c      	add	r4, r5
 8026b8e:	fba0 2302 	umull	r2, r3, r0, r2
 8026b92:	18e1      	adds	r1, r4, r3
 8026b94:	460b      	mov	r3, r1
 8026b96:	e9c7 23d6 	strd	r2, r3, [r7, #856]	; 0x358
 8026b9a:	e9c7 23d6 	strd	r2, r3, [r7, #856]	; 0x358
    int64_t f7f8_38 = f7_2 * (int64_t) f8_19;
 8026b9e:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8026ba2:	4618      	mov	r0, r3
 8026ba4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026ba8:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8026bac:	461a      	mov	r2, r3
 8026bae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026bb2:	fb02 f501 	mul.w	r5, r2, r1
 8026bb6:	fb00 f403 	mul.w	r4, r0, r3
 8026bba:	442c      	add	r4, r5
 8026bbc:	fba0 2302 	umull	r2, r3, r0, r2
 8026bc0:	18e1      	adds	r1, r4, r3
 8026bc2:	460b      	mov	r3, r1
 8026bc4:	e9c7 23d4 	strd	r2, r3, [r7, #848]	; 0x350
 8026bc8:	e9c7 23d4 	strd	r2, r3, [r7, #848]	; 0x350
    int64_t f7f9_76 = f7_2 * (int64_t) f9_38;
 8026bcc:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8026bd0:	4618      	mov	r0, r3
 8026bd2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026bd6:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8026bda:	461a      	mov	r2, r3
 8026bdc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026be0:	fb02 f501 	mul.w	r5, r2, r1
 8026be4:	fb00 f403 	mul.w	r4, r0, r3
 8026be8:	442c      	add	r4, r5
 8026bea:	fba0 2302 	umull	r2, r3, r0, r2
 8026bee:	18e1      	adds	r1, r4, r3
 8026bf0:	460b      	mov	r3, r1
 8026bf2:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
 8026bf6:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
    int64_t f8f8_19 = f8   * (int64_t) f8_19;
 8026bfa:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8026bfe:	4618      	mov	r0, r3
 8026c00:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026c04:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 8026c08:	461a      	mov	r2, r3
 8026c0a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026c0e:	fb02 f501 	mul.w	r5, r2, r1
 8026c12:	fb00 f403 	mul.w	r4, r0, r3
 8026c16:	442c      	add	r4, r5
 8026c18:	fba0 2302 	umull	r2, r3, r0, r2
 8026c1c:	18e1      	adds	r1, r4, r3
 8026c1e:	460b      	mov	r3, r1
 8026c20:	e9c7 23d0 	strd	r2, r3, [r7, #832]	; 0x340
 8026c24:	e9c7 23d0 	strd	r2, r3, [r7, #832]	; 0x340
    int64_t f8f9_38 = f8   * (int64_t) f9_38;
 8026c28:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8026c2c:	4618      	mov	r0, r3
 8026c2e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026c32:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8026c36:	461a      	mov	r2, r3
 8026c38:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026c3c:	fb02 f501 	mul.w	r5, r2, r1
 8026c40:	fb00 f403 	mul.w	r4, r0, r3
 8026c44:	442c      	add	r4, r5
 8026c46:	fba0 2302 	umull	r2, r3, r0, r2
 8026c4a:	18e1      	adds	r1, r4, r3
 8026c4c:	460b      	mov	r3, r1
 8026c4e:	e9c7 23ce 	strd	r2, r3, [r7, #824]	; 0x338
 8026c52:	e9c7 23ce 	strd	r2, r3, [r7, #824]	; 0x338
    int64_t f9f9_38 = f9   * (int64_t) f9_38;
 8026c56:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8026c5a:	4618      	mov	r0, r3
 8026c5c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8026c60:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8026c64:	461a      	mov	r2, r3
 8026c66:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8026c6a:	fb02 f501 	mul.w	r5, r2, r1
 8026c6e:	fb00 f403 	mul.w	r4, r0, r3
 8026c72:	442c      	add	r4, r5
 8026c74:	fba0 2302 	umull	r2, r3, r0, r2
 8026c78:	18e1      	adds	r1, r4, r3
 8026c7a:	460b      	mov	r3, r1
 8026c7c:	e9c7 23cc 	strd	r2, r3, [r7, #816]	; 0x330
 8026c80:	e9c7 23cc 	strd	r2, r3, [r7, #816]	; 0x330
    int64_t h0 = f0f0  + f1f9_76 + f2f8_38 + f3f7_76 + f4f6_38 + f5f5_38;
 8026c84:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8026c88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026c8c:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8026c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c94:	1884      	adds	r4, r0, r2
 8026c96:	f8c7 4280 	str.w	r4, [r7, #640]	; 0x280
 8026c9a:	eb41 0303 	adc.w	r3, r1, r3
 8026c9e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8026ca2:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8026ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026caa:	e9d7 45a0 	ldrd	r4, r5, [r7, #640]	; 0x280
 8026cae:	4621      	mov	r1, r4
 8026cb0:	1889      	adds	r1, r1, r2
 8026cb2:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8026cb6:	4629      	mov	r1, r5
 8026cb8:	eb43 0101 	adc.w	r1, r3, r1
 8026cbc:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 8026cc0:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 8026cc4:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	; 0x278
 8026cc8:	4621      	mov	r1, r4
 8026cca:	1889      	adds	r1, r1, r2
 8026ccc:	f8c7 1270 	str.w	r1, [r7, #624]	; 0x270
 8026cd0:	4629      	mov	r1, r5
 8026cd2:	eb43 0101 	adc.w	r1, r3, r1
 8026cd6:	f8c7 1274 	str.w	r1, [r7, #628]	; 0x274
 8026cda:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 8026cde:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 8026ce2:	4621      	mov	r1, r4
 8026ce4:	1889      	adds	r1, r1, r2
 8026ce6:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 8026cea:	4629      	mov	r1, r5
 8026cec:	eb43 0101 	adc.w	r1, r3, r1
 8026cf0:	f8c7 126c 	str.w	r1, [r7, #620]	; 0x26c
 8026cf4:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 8026cf8:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 8026cfc:	4621      	mov	r1, r4
 8026cfe:	1851      	adds	r1, r2, r1
 8026d00:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8026d04:	4629      	mov	r1, r5
 8026d06:	eb43 0101 	adc.w	r1, r3, r1
 8026d0a:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8026d0e:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8026d12:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    int64_t h1 = f0f1_2 + f2f9_38 + f3f8_38 + f4f7_38 + f5f6_38;
 8026d16:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8026d1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026d1e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8026d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026d26:	1884      	adds	r4, r0, r2
 8026d28:	f8c7 4260 	str.w	r4, [r7, #608]	; 0x260
 8026d2c:	eb41 0303 	adc.w	r3, r1, r3
 8026d30:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8026d34:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 8026d38:	e9d7 4598 	ldrd	r4, r5, [r7, #608]	; 0x260
 8026d3c:	4621      	mov	r1, r4
 8026d3e:	1889      	adds	r1, r1, r2
 8026d40:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 8026d44:	4629      	mov	r1, r5
 8026d46:	eb43 0101 	adc.w	r1, r3, r1
 8026d4a:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 8026d4e:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 8026d52:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 8026d56:	4621      	mov	r1, r4
 8026d58:	1889      	adds	r1, r1, r2
 8026d5a:	f8c7 1250 	str.w	r1, [r7, #592]	; 0x250
 8026d5e:	4629      	mov	r1, r5
 8026d60:	eb43 0101 	adc.w	r1, r3, r1
 8026d64:	f8c7 1254 	str.w	r1, [r7, #596]	; 0x254
 8026d68:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 8026d6c:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	; 0x250
 8026d70:	4621      	mov	r1, r4
 8026d72:	1851      	adds	r1, r2, r1
 8026d74:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8026d78:	4629      	mov	r1, r5
 8026d7a:	eb43 0101 	adc.w	r1, r3, r1
 8026d7e:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8026d82:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8026d86:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    int64_t h2 = f0f2_2 + f1f1_2 + f3f9_76 + f4f8_38 + f5f7_76 + f6f6_19;
 8026d8a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8026d8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026d92:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8026d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026d9a:	1884      	adds	r4, r0, r2
 8026d9c:	f8c7 4248 	str.w	r4, [r7, #584]	; 0x248
 8026da0:	eb41 0303 	adc.w	r3, r1, r3
 8026da4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8026da8:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 8026dac:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 8026db0:	4621      	mov	r1, r4
 8026db2:	1889      	adds	r1, r1, r2
 8026db4:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 8026db8:	4629      	mov	r1, r5
 8026dba:	eb43 0101 	adc.w	r1, r3, r1
 8026dbe:	f8c7 1244 	str.w	r1, [r7, #580]	; 0x244
 8026dc2:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 8026dc6:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 8026dca:	4621      	mov	r1, r4
 8026dcc:	1889      	adds	r1, r1, r2
 8026dce:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 8026dd2:	4629      	mov	r1, r5
 8026dd4:	eb43 0101 	adc.w	r1, r3, r1
 8026dd8:	f8c7 123c 	str.w	r1, [r7, #572]	; 0x23c
 8026ddc:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 8026de0:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 8026de4:	4621      	mov	r1, r4
 8026de6:	1889      	adds	r1, r1, r2
 8026de8:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8026dec:	4629      	mov	r1, r5
 8026dee:	eb43 0101 	adc.w	r1, r3, r1
 8026df2:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 8026df6:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8026dfa:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	; 0x230
 8026dfe:	4621      	mov	r1, r4
 8026e00:	1851      	adds	r1, r2, r1
 8026e02:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8026e06:	4629      	mov	r1, r5
 8026e08:	eb43 0101 	adc.w	r1, r3, r1
 8026e0c:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8026e10:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8026e14:	e9c7 34c6 	strd	r3, r4, [r7, #792]	; 0x318
    int64_t h3 = f0f3_2 + f1f2_2 + f4f9_38 + f5f8_38 + f6f7_38;
 8026e18:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8026e1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026e20:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8026e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e28:	1884      	adds	r4, r0, r2
 8026e2a:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 8026e2e:	eb41 0303 	adc.w	r3, r1, r3
 8026e32:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8026e36:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 8026e3a:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 8026e3e:	4621      	mov	r1, r4
 8026e40:	1889      	adds	r1, r1, r2
 8026e42:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 8026e46:	4629      	mov	r1, r5
 8026e48:	eb43 0101 	adc.w	r1, r3, r1
 8026e4c:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 8026e50:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8026e54:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 8026e58:	4621      	mov	r1, r4
 8026e5a:	1889      	adds	r1, r1, r2
 8026e5c:	f8c7 1218 	str.w	r1, [r7, #536]	; 0x218
 8026e60:	4629      	mov	r1, r5
 8026e62:	eb43 0101 	adc.w	r1, r3, r1
 8026e66:	f8c7 121c 	str.w	r1, [r7, #540]	; 0x21c
 8026e6a:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8026e6e:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8026e72:	4621      	mov	r1, r4
 8026e74:	1851      	adds	r1, r2, r1
 8026e76:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8026e7a:	4629      	mov	r1, r5
 8026e7c:	eb43 0101 	adc.w	r1, r3, r1
 8026e80:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8026e84:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8026e88:	e9c7 34c4 	strd	r3, r4, [r7, #784]	; 0x310
    int64_t h4 = f0f4_2 + f1f3_4 + f2f2   + f5f9_76 + f6f8_38 + f7f7_38;
 8026e8c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8026e90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026e94:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8026e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026e9c:	1884      	adds	r4, r0, r2
 8026e9e:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 8026ea2:	eb41 0303 	adc.w	r3, r1, r3
 8026ea6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8026eaa:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8026eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026eb2:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 8026eb6:	4621      	mov	r1, r4
 8026eb8:	1889      	adds	r1, r1, r2
 8026eba:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8026ebe:	4629      	mov	r1, r5
 8026ec0:	eb43 0101 	adc.w	r1, r3, r1
 8026ec4:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 8026ec8:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 8026ecc:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 8026ed0:	4621      	mov	r1, r4
 8026ed2:	1889      	adds	r1, r1, r2
 8026ed4:	f8c7 1200 	str.w	r1, [r7, #512]	; 0x200
 8026ed8:	4629      	mov	r1, r5
 8026eda:	eb43 0101 	adc.w	r1, r3, r1
 8026ede:	f8c7 1204 	str.w	r1, [r7, #516]	; 0x204
 8026ee2:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 8026ee6:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 8026eea:	4621      	mov	r1, r4
 8026eec:	1889      	adds	r1, r1, r2
 8026eee:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 8026ef2:	4629      	mov	r1, r5
 8026ef4:	eb43 0101 	adc.w	r1, r3, r1
 8026ef8:	f8c7 11fc 	str.w	r1, [r7, #508]	; 0x1fc
 8026efc:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8026f00:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	; 0x1f8
 8026f04:	4621      	mov	r1, r4
 8026f06:	1851      	adds	r1, r2, r1
 8026f08:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8026f0c:	4629      	mov	r1, r5
 8026f0e:	eb43 0101 	adc.w	r1, r3, r1
 8026f12:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8026f16:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8026f1a:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    int64_t h5 = f0f5_2 + f1f4_2 + f2f3_2 + f6f9_38 + f7f8_38;
 8026f1e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8026f22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026f26:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8026f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f2e:	1884      	adds	r4, r0, r2
 8026f30:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8026f34:	eb41 0303 	adc.w	r3, r1, r3
 8026f38:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8026f3c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8026f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026f44:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8026f48:	4621      	mov	r1, r4
 8026f4a:	1889      	adds	r1, r1, r2
 8026f4c:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8026f50:	4629      	mov	r1, r5
 8026f52:	eb43 0101 	adc.w	r1, r3, r1
 8026f56:	f8c7 11ec 	str.w	r1, [r7, #492]	; 0x1ec
 8026f5a:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8026f5e:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8026f62:	4621      	mov	r1, r4
 8026f64:	1889      	adds	r1, r1, r2
 8026f66:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8026f6a:	4629      	mov	r1, r5
 8026f6c:	eb43 0101 	adc.w	r1, r3, r1
 8026f70:	f8c7 11e4 	str.w	r1, [r7, #484]	; 0x1e4
 8026f74:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8026f78:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8026f7c:	4621      	mov	r1, r4
 8026f7e:	1851      	adds	r1, r2, r1
 8026f80:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8026f84:	4629      	mov	r1, r5
 8026f86:	eb43 0101 	adc.w	r1, r3, r1
 8026f8a:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8026f8e:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8026f92:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    int64_t h6 = f0f6_2 + f1f5_4 + f2f4_2 + f3f3_2 + f7f9_76 + f8f8_19;
 8026f96:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8026f9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8026f9e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8026fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026fa6:	1884      	adds	r4, r0, r2
 8026fa8:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 8026fac:	eb41 0303 	adc.w	r3, r1, r3
 8026fb0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8026fb4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8026fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026fbc:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 8026fc0:	4621      	mov	r1, r4
 8026fc2:	1889      	adds	r1, r1, r2
 8026fc4:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 8026fc8:	4629      	mov	r1, r5
 8026fca:	eb43 0101 	adc.w	r1, r3, r1
 8026fce:	f8c7 11d4 	str.w	r1, [r7, #468]	; 0x1d4
 8026fd2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8026fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026fda:	e9d7 4574 	ldrd	r4, r5, [r7, #464]	; 0x1d0
 8026fde:	4621      	mov	r1, r4
 8026fe0:	1889      	adds	r1, r1, r2
 8026fe2:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 8026fe6:	4629      	mov	r1, r5
 8026fe8:	eb43 0101 	adc.w	r1, r3, r1
 8026fec:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 8026ff0:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8026ff4:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 8026ff8:	4621      	mov	r1, r4
 8026ffa:	1889      	adds	r1, r1, r2
 8026ffc:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 8027000:	4629      	mov	r1, r5
 8027002:	eb43 0101 	adc.w	r1, r3, r1
 8027006:	f8c7 11c4 	str.w	r1, [r7, #452]	; 0x1c4
 802700a:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 802700e:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 8027012:	4621      	mov	r1, r4
 8027014:	1851      	adds	r1, r2, r1
 8027016:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 802701a:	4629      	mov	r1, r5
 802701c:	eb43 0101 	adc.w	r1, r3, r1
 8027020:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8027024:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8027028:	e9c7 34be 	strd	r3, r4, [r7, #760]	; 0x2f8
    int64_t h7 = f0f7_2 + f1f6_2 + f2f5_2 + f3f4_2 + f8f9_38;
 802702c:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8027030:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027034:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8027038:	e9d3 2300 	ldrd	r2, r3, [r3]
 802703c:	1884      	adds	r4, r0, r2
 802703e:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 8027042:	eb41 0303 	adc.w	r3, r1, r3
 8027046:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 802704a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 802704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027052:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8027056:	4621      	mov	r1, r4
 8027058:	1889      	adds	r1, r1, r2
 802705a:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 802705e:	4629      	mov	r1, r5
 8027060:	eb43 0101 	adc.w	r1, r3, r1
 8027064:	f8c7 11b4 	str.w	r1, [r7, #436]	; 0x1b4
 8027068:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 802706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027070:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 8027074:	4621      	mov	r1, r4
 8027076:	1889      	adds	r1, r1, r2
 8027078:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 802707c:	4629      	mov	r1, r5
 802707e:	eb43 0101 	adc.w	r1, r3, r1
 8027082:	f8c7 11ac 	str.w	r1, [r7, #428]	; 0x1ac
 8027086:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 802708a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 802708e:	4621      	mov	r1, r4
 8027090:	1851      	adds	r1, r2, r1
 8027092:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8027096:	4629      	mov	r1, r5
 8027098:	eb43 0101 	adc.w	r1, r3, r1
 802709c:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80270a0:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80270a4:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    int64_t h8 = f0f8_2 + f1f7_4 + f2f6_2 + f3f5_4 + f4f4   + f9f9_38;
 80270a8:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80270ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80270b0:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80270b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80270b8:	1884      	adds	r4, r0, r2
 80270ba:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 80270be:	eb41 0303 	adc.w	r3, r1, r3
 80270c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80270c6:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80270ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80270ce:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 80270d2:	4621      	mov	r1, r4
 80270d4:	1889      	adds	r1, r1, r2
 80270d6:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 80270da:	4629      	mov	r1, r5
 80270dc:	eb43 0101 	adc.w	r1, r3, r1
 80270e0:	f8c7 119c 	str.w	r1, [r7, #412]	; 0x19c
 80270e4:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 80270e8:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 80270ec:	4621      	mov	r1, r4
 80270ee:	1889      	adds	r1, r1, r2
 80270f0:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 80270f4:	4629      	mov	r1, r5
 80270f6:	eb43 0101 	adc.w	r1, r3, r1
 80270fa:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 80270fe:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 8027102:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8027106:	4621      	mov	r1, r4
 8027108:	1889      	adds	r1, r1, r2
 802710a:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 802710e:	4629      	mov	r1, r5
 8027110:	eb43 0101 	adc.w	r1, r3, r1
 8027114:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
 8027118:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 802711c:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8027120:	4621      	mov	r1, r4
 8027122:	1851      	adds	r1, r2, r1
 8027124:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8027128:	4629      	mov	r1, r5
 802712a:	eb43 0101 	adc.w	r1, r3, r1
 802712e:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8027132:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8027136:	e9c7 34ba 	strd	r3, r4, [r7, #744]	; 0x2e8
    int64_t h9 = f0f9_2 + f1f8_2 + f2f7_2 + f3f6_2 + f4f5_2;
 802713a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 802713e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8027142:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8027146:	e9d3 2300 	ldrd	r2, r3, [r3]
 802714a:	1884      	adds	r4, r0, r2
 802714c:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 8027150:	eb41 0303 	adc.w	r3, r1, r3
 8027154:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8027158:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 802715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8027160:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 8027164:	4621      	mov	r1, r4
 8027166:	1889      	adds	r1, r1, r2
 8027168:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 802716c:	4629      	mov	r1, r5
 802716e:	eb43 0101 	adc.w	r1, r3, r1
 8027172:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 8027176:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 802717a:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 802717e:	4621      	mov	r1, r4
 8027180:	1889      	adds	r1, r1, r2
 8027182:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8027186:	4629      	mov	r1, r5
 8027188:	eb43 0101 	adc.w	r1, r3, r1
 802718c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8027190:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 8027194:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8027198:	4621      	mov	r1, r4
 802719a:	1851      	adds	r1, r2, r1
 802719c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80271a0:	4629      	mov	r1, r5
 80271a2:	eb43 0101 	adc.w	r1, r3, r1
 80271a6:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 80271aa:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80271ae:	e9c7 34b8 	strd	r3, r4, [r7, #736]	; 0x2e0
    int64_t carry5;
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 80271b2:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 80271b6:	f112 7800 	adds.w	r8, r2, #33554432	; 0x2000000
 80271ba:	f143 0900 	adc.w	r9, r3, #0
 80271be:	f04f 0200 	mov.w	r2, #0
 80271c2:	f04f 0300 	mov.w	r3, #0
 80271c6:	ea4f 6298 	mov.w	r2, r8, lsr #26
 80271ca:	ea42 1289 	orr.w	r2, r2, r9, lsl #6
 80271ce:	ea4f 63a9 	mov.w	r3, r9, asr #26
 80271d2:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8
    h1 += carry0;
 80271d6:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 80271da:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 80271de:	1884      	adds	r4, r0, r2
 80271e0:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80271e4:	eb41 0303 	adc.w	r3, r1, r3
 80271e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80271ec:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80271f0:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    h0 -= carry0 << 26;
 80271f4:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 80271f8:	f04f 0000 	mov.w	r0, #0
 80271fc:	f04f 0100 	mov.w	r1, #0
 8027200:	0699      	lsls	r1, r3, #26
 8027202:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8027206:	0690      	lsls	r0, r2, #26
 8027208:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 802720c:	1a14      	subs	r4, r2, r0
 802720e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8027212:	eb63 0301 	sbc.w	r3, r3, r1
 8027216:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 802721a:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 802721e:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8027222:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8027226:	f112 7a00 	adds.w	sl, r2, #33554432	; 0x2000000
 802722a:	f143 0b00 	adc.w	fp, r3, #0
 802722e:	f04f 0200 	mov.w	r2, #0
 8027232:	f04f 0300 	mov.w	r3, #0
 8027236:	ea4f 629a 	mov.w	r2, sl, lsr #26
 802723a:	ea42 128b 	orr.w	r2, r2, fp, lsl #6
 802723e:	ea4f 63ab 	mov.w	r3, fp, asr #26
 8027242:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
    h5 += carry4;
 8027246:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 802724a:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 802724e:	1884      	adds	r4, r0, r2
 8027250:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8027254:	eb41 0303 	adc.w	r3, r1, r3
 8027258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802725c:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8027260:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    h4 -= carry4 << 26;
 8027264:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8027268:	f04f 0000 	mov.w	r0, #0
 802726c:	f04f 0100 	mov.w	r1, #0
 8027270:	0699      	lsls	r1, r3, #26
 8027272:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8027276:	0690      	lsls	r0, r2, #26
 8027278:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 802727c:	1a14      	subs	r4, r2, r0
 802727e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8027282:	eb63 0301 	sbc.w	r3, r3, r1
 8027286:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802728a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 802728e:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 8027292:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8027296:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 802729a:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 802729e:	f143 0300 	adc.w	r3, r3, #0
 80272a2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80272a6:	f04f 0200 	mov.w	r2, #0
 80272aa:	f04f 0300 	mov.w	r3, #0
 80272ae:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 80272b2:	4621      	mov	r1, r4
 80272b4:	0e4a      	lsrs	r2, r1, #25
 80272b6:	4629      	mov	r1, r5
 80272b8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80272bc:	4629      	mov	r1, r5
 80272be:	164b      	asrs	r3, r1, #25
 80272c0:	e9c7 23b2 	strd	r2, r3, [r7, #712]	; 0x2c8
    h2 += carry1;
 80272c4:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	; 0x318
 80272c8:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 80272cc:	1884      	adds	r4, r0, r2
 80272ce:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80272d2:	eb41 0303 	adc.w	r3, r1, r3
 80272d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80272da:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80272de:	e9c7 34c6 	strd	r3, r4, [r7, #792]	; 0x318
    h1 -= carry1 << 25;
 80272e2:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 80272e6:	f04f 0000 	mov.w	r0, #0
 80272ea:	f04f 0100 	mov.w	r1, #0
 80272ee:	0659      	lsls	r1, r3, #25
 80272f0:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80272f4:	0650      	lsls	r0, r2, #25
 80272f6:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 80272fa:	1a14      	subs	r4, r2, r0
 80272fc:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8027300:	eb63 0301 	sbc.w	r3, r3, r1
 8027304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8027308:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 802730c:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 8027310:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8027314:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8027318:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 802731c:	f143 0300 	adc.w	r3, r3, #0
 8027320:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8027324:	f04f 0200 	mov.w	r2, #0
 8027328:	f04f 0300 	mov.w	r3, #0
 802732c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8027330:	4621      	mov	r1, r4
 8027332:	0e4a      	lsrs	r2, r1, #25
 8027334:	4629      	mov	r1, r5
 8027336:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 802733a:	4629      	mov	r1, r5
 802733c:	164b      	asrs	r3, r1, #25
 802733e:	e9c7 23b0 	strd	r2, r3, [r7, #704]	; 0x2c0
    h6 += carry5;
 8027342:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	; 0x2f8
 8027346:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 802734a:	1884      	adds	r4, r0, r2
 802734c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8027350:	eb41 0303 	adc.w	r3, r1, r3
 8027354:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8027358:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 802735c:	e9c7 34be 	strd	r3, r4, [r7, #760]	; 0x2f8
    h5 -= carry5 << 25;
 8027360:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8027364:	f04f 0000 	mov.w	r0, #0
 8027368:	f04f 0100 	mov.w	r1, #0
 802736c:	0659      	lsls	r1, r3, #25
 802736e:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8027372:	0650      	lsls	r0, r2, #25
 8027374:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8027378:	1a14      	subs	r4, r2, r0
 802737a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 802737e:	eb63 0301 	sbc.w	r3, r3, r1
 8027382:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8027386:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 802738a:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 802738e:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8027392:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8027396:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 802739a:	f143 0300 	adc.w	r3, r3, #0
 802739e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80273a2:	f04f 0200 	mov.w	r2, #0
 80273a6:	f04f 0300 	mov.w	r3, #0
 80273aa:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80273ae:	4621      	mov	r1, r4
 80273b0:	0e8a      	lsrs	r2, r1, #26
 80273b2:	4629      	mov	r1, r5
 80273b4:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80273b8:	4629      	mov	r1, r5
 80273ba:	168b      	asrs	r3, r1, #26
 80273bc:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
    h3 += carry2;
 80273c0:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	; 0x310
 80273c4:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80273c8:	1884      	adds	r4, r0, r2
 80273ca:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 80273ce:	eb41 0303 	adc.w	r3, r1, r3
 80273d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80273d6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80273da:	e9c7 34c4 	strd	r3, r4, [r7, #784]	; 0x310
    h2 -= carry2 << 26;
 80273de:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80273e2:	f04f 0000 	mov.w	r0, #0
 80273e6:	f04f 0100 	mov.w	r1, #0
 80273ea:	0699      	lsls	r1, r3, #26
 80273ec:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80273f0:	0690      	lsls	r0, r2, #26
 80273f2:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 80273f6:	1a14      	subs	r4, r2, r0
 80273f8:	67bc      	str	r4, [r7, #120]	; 0x78
 80273fa:	eb63 0301 	sbc.w	r3, r3, r1
 80273fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8027400:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8027404:	e9c7 34c6 	strd	r3, r4, [r7, #792]	; 0x318
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 8027408:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 802740c:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8027410:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8027414:	f143 0300 	adc.w	r3, r3, #0
 8027418:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 802741c:	f04f 0200 	mov.w	r2, #0
 8027420:	f04f 0300 	mov.w	r3, #0
 8027424:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8027428:	4621      	mov	r1, r4
 802742a:	0e8a      	lsrs	r2, r1, #26
 802742c:	4629      	mov	r1, r5
 802742e:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8027432:	4629      	mov	r1, r5
 8027434:	168b      	asrs	r3, r1, #26
 8027436:	e9c7 23ac 	strd	r2, r3, [r7, #688]	; 0x2b0
    h7 += carry6;
 802743a:	e9d7 01bc 	ldrd	r0, r1, [r7, #752]	; 0x2f0
 802743e:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8027442:	1884      	adds	r4, r0, r2
 8027444:	673c      	str	r4, [r7, #112]	; 0x70
 8027446:	eb41 0303 	adc.w	r3, r1, r3
 802744a:	677b      	str	r3, [r7, #116]	; 0x74
 802744c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8027450:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    h6 -= carry6 << 26;
 8027454:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8027458:	f04f 0000 	mov.w	r0, #0
 802745c:	f04f 0100 	mov.w	r1, #0
 8027460:	0699      	lsls	r1, r3, #26
 8027462:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8027466:	0690      	lsls	r0, r2, #26
 8027468:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 802746c:	1a14      	subs	r4, r2, r0
 802746e:	66bc      	str	r4, [r7, #104]	; 0x68
 8027470:	eb63 0301 	sbc.w	r3, r3, r1
 8027474:	66fb      	str	r3, [r7, #108]	; 0x6c
 8027476:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 802747a:	e9c7 34be 	strd	r3, r4, [r7, #760]	; 0x2f8
    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 802747e:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8027482:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8027486:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 802748a:	f143 0300 	adc.w	r3, r3, #0
 802748e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8027492:	f04f 0200 	mov.w	r2, #0
 8027496:	f04f 0300 	mov.w	r3, #0
 802749a:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	; 0x148
 802749e:	4621      	mov	r1, r4
 80274a0:	0e4a      	lsrs	r2, r1, #25
 80274a2:	4629      	mov	r1, r5
 80274a4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80274a8:	4629      	mov	r1, r5
 80274aa:	164b      	asrs	r3, r1, #25
 80274ac:	e9c7 23aa 	strd	r2, r3, [r7, #680]	; 0x2a8
    h4 += carry3;
 80274b0:	e9d7 01c2 	ldrd	r0, r1, [r7, #776]	; 0x308
 80274b4:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80274b8:	1884      	adds	r4, r0, r2
 80274ba:	663c      	str	r4, [r7, #96]	; 0x60
 80274bc:	eb41 0303 	adc.w	r3, r1, r3
 80274c0:	667b      	str	r3, [r7, #100]	; 0x64
 80274c2:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80274c6:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    h3 -= carry3 << 25;
 80274ca:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 80274ce:	f04f 0000 	mov.w	r0, #0
 80274d2:	f04f 0100 	mov.w	r1, #0
 80274d6:	0659      	lsls	r1, r3, #25
 80274d8:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 80274dc:	0650      	lsls	r0, r2, #25
 80274de:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 80274e2:	1a14      	subs	r4, r2, r0
 80274e4:	65bc      	str	r4, [r7, #88]	; 0x58
 80274e6:	eb63 0301 	sbc.w	r3, r3, r1
 80274ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80274ec:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80274f0:	e9c7 34c4 	strd	r3, r4, [r7, #784]	; 0x310
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 80274f4:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 80274f8:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 80274fc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8027500:	f143 0300 	adc.w	r3, r3, #0
 8027504:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8027508:	f04f 0200 	mov.w	r2, #0
 802750c:	f04f 0300 	mov.w	r3, #0
 8027510:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 8027514:	4621      	mov	r1, r4
 8027516:	0e4a      	lsrs	r2, r1, #25
 8027518:	4629      	mov	r1, r5
 802751a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 802751e:	4629      	mov	r1, r5
 8027520:	164b      	asrs	r3, r1, #25
 8027522:	e9c7 23a8 	strd	r2, r3, [r7, #672]	; 0x2a0
    h8 += carry7;
 8027526:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	; 0x2e8
 802752a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 802752e:	1884      	adds	r4, r0, r2
 8027530:	653c      	str	r4, [r7, #80]	; 0x50
 8027532:	eb41 0303 	adc.w	r3, r1, r3
 8027536:	657b      	str	r3, [r7, #84]	; 0x54
 8027538:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 802753c:	e9c7 34ba 	strd	r3, r4, [r7, #744]	; 0x2e8
    h7 -= carry7 << 25;
 8027540:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 8027544:	f04f 0000 	mov.w	r0, #0
 8027548:	f04f 0100 	mov.w	r1, #0
 802754c:	0659      	lsls	r1, r3, #25
 802754e:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8027552:	0650      	lsls	r0, r2, #25
 8027554:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8027558:	1a14      	subs	r4, r2, r0
 802755a:	64bc      	str	r4, [r7, #72]	; 0x48
 802755c:	eb63 0301 	sbc.w	r3, r3, r1
 8027560:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027562:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8027566:	e9c7 34bc 	strd	r3, r4, [r7, #752]	; 0x2f0
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 802756a:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 802756e:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8027572:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8027576:	f143 0300 	adc.w	r3, r3, #0
 802757a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 802757e:	f04f 0200 	mov.w	r2, #0
 8027582:	f04f 0300 	mov.w	r3, #0
 8027586:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	; 0x138
 802758a:	4621      	mov	r1, r4
 802758c:	0e8a      	lsrs	r2, r1, #26
 802758e:	4629      	mov	r1, r5
 8027590:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8027594:	4629      	mov	r1, r5
 8027596:	168b      	asrs	r3, r1, #26
 8027598:	e9c7 23b4 	strd	r2, r3, [r7, #720]	; 0x2d0
    h5 += carry4;
 802759c:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 80275a0:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80275a4:	1884      	adds	r4, r0, r2
 80275a6:	643c      	str	r4, [r7, #64]	; 0x40
 80275a8:	eb41 0303 	adc.w	r3, r1, r3
 80275ac:	647b      	str	r3, [r7, #68]	; 0x44
 80275ae:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80275b2:	e9c7 34c0 	strd	r3, r4, [r7, #768]	; 0x300
    h4 -= carry4 << 26;
 80275b6:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 80275ba:	f04f 0000 	mov.w	r0, #0
 80275be:	f04f 0100 	mov.w	r1, #0
 80275c2:	0699      	lsls	r1, r3, #26
 80275c4:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 80275c8:	0690      	lsls	r0, r2, #26
 80275ca:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 80275ce:	1a14      	subs	r4, r2, r0
 80275d0:	63bc      	str	r4, [r7, #56]	; 0x38
 80275d2:	eb63 0301 	sbc.w	r3, r3, r1
 80275d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80275d8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80275dc:	e9c7 34c2 	strd	r3, r4, [r7, #776]	; 0x308
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 80275e0:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 80275e4:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 80275e8:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80275ec:	f143 0300 	adc.w	r3, r3, #0
 80275f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80275f4:	f04f 0200 	mov.w	r2, #0
 80275f8:	f04f 0300 	mov.w	r3, #0
 80275fc:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 8027600:	4621      	mov	r1, r4
 8027602:	0e8a      	lsrs	r2, r1, #26
 8027604:	4629      	mov	r1, r5
 8027606:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 802760a:	4629      	mov	r1, r5
 802760c:	168b      	asrs	r3, r1, #26
 802760e:	e9c7 23a6 	strd	r2, r3, [r7, #664]	; 0x298
    h9 += carry8;
 8027612:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 8027616:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 802761a:	1884      	adds	r4, r0, r2
 802761c:	633c      	str	r4, [r7, #48]	; 0x30
 802761e:	eb41 0303 	adc.w	r3, r1, r3
 8027622:	637b      	str	r3, [r7, #52]	; 0x34
 8027624:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8027628:	e9c7 34b8 	strd	r3, r4, [r7, #736]	; 0x2e0
    h8 -= carry8 << 26;
 802762c:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8027630:	f04f 0000 	mov.w	r0, #0
 8027634:	f04f 0100 	mov.w	r1, #0
 8027638:	0699      	lsls	r1, r3, #26
 802763a:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 802763e:	0690      	lsls	r0, r2, #26
 8027640:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8027644:	1a14      	subs	r4, r2, r0
 8027646:	62bc      	str	r4, [r7, #40]	; 0x28
 8027648:	eb63 0301 	sbc.w	r3, r3, r1
 802764c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802764e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8027652:	e9c7 34ba 	strd	r3, r4, [r7, #744]	; 0x2e8
    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 8027656:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 802765a:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 802765e:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8027662:	f143 0300 	adc.w	r3, r3, #0
 8027666:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 802766a:	f04f 0200 	mov.w	r2, #0
 802766e:	f04f 0300 	mov.w	r3, #0
 8027672:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8027676:	4621      	mov	r1, r4
 8027678:	0e4a      	lsrs	r2, r1, #25
 802767a:	4629      	mov	r1, r5
 802767c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8027680:	4629      	mov	r1, r5
 8027682:	164b      	asrs	r3, r1, #25
 8027684:	e9c7 23a4 	strd	r2, r3, [r7, #656]	; 0x290
    h0 += carry9 * 19;
 8027688:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	; 0x290
 802768c:	4622      	mov	r2, r4
 802768e:	462b      	mov	r3, r5
 8027690:	f04f 0000 	mov.w	r0, #0
 8027694:	f04f 0100 	mov.w	r1, #0
 8027698:	00d9      	lsls	r1, r3, #3
 802769a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 802769e:	00d0      	lsls	r0, r2, #3
 80276a0:	4602      	mov	r2, r0
 80276a2:	460b      	mov	r3, r1
 80276a4:	1912      	adds	r2, r2, r4
 80276a6:	eb45 0303 	adc.w	r3, r5, r3
 80276aa:	1891      	adds	r1, r2, r2
 80276ac:	6239      	str	r1, [r7, #32]
 80276ae:	415b      	adcs	r3, r3
 80276b0:	627b      	str	r3, [r7, #36]	; 0x24
 80276b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80276b6:	1911      	adds	r1, r2, r4
 80276b8:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 80276bc:	416b      	adcs	r3, r5
 80276be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80276c2:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 80276c6:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 80276ca:	4621      	mov	r1, r4
 80276cc:	1851      	adds	r1, r2, r1
 80276ce:	61b9      	str	r1, [r7, #24]
 80276d0:	4629      	mov	r1, r5
 80276d2:	eb43 0101 	adc.w	r1, r3, r1
 80276d6:	61f9      	str	r1, [r7, #28]
 80276d8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80276dc:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    h9 -= carry9 << 25;
 80276e0:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	; 0x290
 80276e4:	f04f 0200 	mov.w	r2, #0
 80276e8:	f04f 0300 	mov.w	r3, #0
 80276ec:	064b      	lsls	r3, r1, #25
 80276ee:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 80276f2:	0642      	lsls	r2, r0, #25
 80276f4:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 80276f8:	1a84      	subs	r4, r0, r2
 80276fa:	613c      	str	r4, [r7, #16]
 80276fc:	eb61 0303 	sbc.w	r3, r1, r3
 8027700:	617b      	str	r3, [r7, #20]
 8027702:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8027706:	e9c7 34b8 	strd	r3, r4, [r7, #736]	; 0x2e0
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 802770a:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 802770e:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8027712:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8027716:	f143 0300 	adc.w	r3, r3, #0
 802771a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 802771e:	f04f 0200 	mov.w	r2, #0
 8027722:	f04f 0300 	mov.w	r3, #0
 8027726:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 802772a:	4621      	mov	r1, r4
 802772c:	0e8a      	lsrs	r2, r1, #26
 802772e:	4629      	mov	r1, r5
 8027730:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8027734:	4629      	mov	r1, r5
 8027736:	168b      	asrs	r3, r1, #26
 8027738:	e9c7 23b6 	strd	r2, r3, [r7, #728]	; 0x2d8
    h1 += carry0;
 802773c:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8027740:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8027744:	1884      	adds	r4, r0, r2
 8027746:	60bc      	str	r4, [r7, #8]
 8027748:	eb41 0303 	adc.w	r3, r1, r3
 802774c:	60fb      	str	r3, [r7, #12]
 802774e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8027752:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
    h0 -= carry0 << 26;
 8027756:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	; 0x2d8
 802775a:	f04f 0200 	mov.w	r2, #0
 802775e:	f04f 0300 	mov.w	r3, #0
 8027762:	068b      	lsls	r3, r1, #26
 8027764:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8027768:	0682      	lsls	r2, r0, #26
 802776a:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 802776e:	1a84      	subs	r4, r0, r2
 8027770:	603c      	str	r4, [r7, #0]
 8027772:	eb61 0303 	sbc.w	r3, r1, r3
 8027776:	607b      	str	r3, [r7, #4]
 8027778:	e9d7 3400 	ldrd	r3, r4, [r7]
 802777c:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
    h[0] = (int32_t) h0;
 8027780:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8027784:	681a      	ldr	r2, [r3, #0]
 8027786:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 802778a:	681b      	ldr	r3, [r3, #0]
 802778c:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 802778e:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8027792:	681b      	ldr	r3, [r3, #0]
 8027794:	3304      	adds	r3, #4
 8027796:	f507 7248 	add.w	r2, r7, #800	; 0x320
 802779a:	6812      	ldr	r2, [r2, #0]
 802779c:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 802779e:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80277a2:	681b      	ldr	r3, [r3, #0]
 80277a4:	3308      	adds	r3, #8
 80277a6:	f507 7246 	add.w	r2, r7, #792	; 0x318
 80277aa:	6812      	ldr	r2, [r2, #0]
 80277ac:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 80277ae:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80277b2:	681b      	ldr	r3, [r3, #0]
 80277b4:	330c      	adds	r3, #12
 80277b6:	f507 7244 	add.w	r2, r7, #784	; 0x310
 80277ba:	6812      	ldr	r2, [r2, #0]
 80277bc:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 80277be:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80277c2:	681b      	ldr	r3, [r3, #0]
 80277c4:	3310      	adds	r3, #16
 80277c6:	f507 7242 	add.w	r2, r7, #776	; 0x308
 80277ca:	6812      	ldr	r2, [r2, #0]
 80277cc:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 80277ce:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80277d2:	681b      	ldr	r3, [r3, #0]
 80277d4:	3314      	adds	r3, #20
 80277d6:	f507 7240 	add.w	r2, r7, #768	; 0x300
 80277da:	6812      	ldr	r2, [r2, #0]
 80277dc:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 80277de:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80277e2:	681b      	ldr	r3, [r3, #0]
 80277e4:	3318      	adds	r3, #24
 80277e6:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 80277ea:	6812      	ldr	r2, [r2, #0]
 80277ec:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 80277ee:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80277f2:	681b      	ldr	r3, [r3, #0]
 80277f4:	331c      	adds	r3, #28
 80277f6:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 80277fa:	6812      	ldr	r2, [r2, #0]
 80277fc:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 80277fe:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8027802:	681b      	ldr	r3, [r3, #0]
 8027804:	3320      	adds	r3, #32
 8027806:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 802780a:	6812      	ldr	r2, [r2, #0]
 802780c:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 802780e:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8027812:	681b      	ldr	r3, [r3, #0]
 8027814:	3324      	adds	r3, #36	; 0x24
 8027816:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 802781a:	6812      	ldr	r2, [r2, #0]
 802781c:	601a      	str	r2, [r3, #0]
}
 802781e:	bf00      	nop
 8027820:	f207 574c 	addw	r7, r7, #1356	; 0x54c
 8027824:	46bd      	mov	sp, r7
 8027826:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 802782a:	4770      	bx	lr

0802782c <fe_sq2>:

/*
See fe_mul.c for discussion of implementation strategy.
*/

void fe_sq2(fe h, const fe f) {
 802782c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8027830:	f2ad 5d9c 	subw	sp, sp, #1436	; 0x59c
 8027834:	af00      	add	r7, sp, #0
 8027836:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 802783a:	6018      	str	r0, [r3, #0]
 802783c:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8027840:	6019      	str	r1, [r3, #0]
    int32_t f0 = f[0];
 8027842:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8027846:	681b      	ldr	r3, [r3, #0]
 8027848:	681b      	ldr	r3, [r3, #0]
 802784a:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
    int32_t f1 = f[1];
 802784e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8027852:	681b      	ldr	r3, [r3, #0]
 8027854:	685b      	ldr	r3, [r3, #4]
 8027856:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
    int32_t f2 = f[2];
 802785a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 802785e:	681b      	ldr	r3, [r3, #0]
 8027860:	689b      	ldr	r3, [r3, #8]
 8027862:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
    int32_t f3 = f[3];
 8027866:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 802786a:	681b      	ldr	r3, [r3, #0]
 802786c:	68db      	ldr	r3, [r3, #12]
 802786e:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
    int32_t f4 = f[4];
 8027872:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8027876:	681b      	ldr	r3, [r3, #0]
 8027878:	691b      	ldr	r3, [r3, #16]
 802787a:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
    int32_t f5 = f[5];
 802787e:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8027882:	681b      	ldr	r3, [r3, #0]
 8027884:	695b      	ldr	r3, [r3, #20]
 8027886:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
    int32_t f6 = f[6];
 802788a:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 802788e:	681b      	ldr	r3, [r3, #0]
 8027890:	699b      	ldr	r3, [r3, #24]
 8027892:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
    int32_t f7 = f[7];
 8027896:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 802789a:	681b      	ldr	r3, [r3, #0]
 802789c:	69db      	ldr	r3, [r3, #28]
 802789e:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
    int32_t f8 = f[8];
 80278a2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80278a6:	681b      	ldr	r3, [r3, #0]
 80278a8:	6a1b      	ldr	r3, [r3, #32]
 80278aa:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
    int32_t f9 = f[9];
 80278ae:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 80278b2:	681b      	ldr	r3, [r3, #0]
 80278b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80278b6:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
    int32_t f0_2 = 2 * f0;
 80278ba:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 80278be:	005b      	lsls	r3, r3, #1
 80278c0:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
    int32_t f1_2 = 2 * f1;
 80278c4:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 80278c8:	005b      	lsls	r3, r3, #1
 80278ca:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
    int32_t f2_2 = 2 * f2;
 80278ce:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80278d2:	005b      	lsls	r3, r3, #1
 80278d4:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
    int32_t f3_2 = 2 * f3;
 80278d8:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 80278dc:	005b      	lsls	r3, r3, #1
 80278de:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
    int32_t f4_2 = 2 * f4;
 80278e2:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80278e6:	005b      	lsls	r3, r3, #1
 80278e8:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
    int32_t f5_2 = 2 * f5;
 80278ec:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 80278f0:	005b      	lsls	r3, r3, #1
 80278f2:	f8c7 3558 	str.w	r3, [r7, #1368]	; 0x558
    int32_t f6_2 = 2 * f6;
 80278f6:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 80278fa:	005b      	lsls	r3, r3, #1
 80278fc:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
    int32_t f7_2 = 2 * f7;
 8027900:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8027904:	005b      	lsls	r3, r3, #1
 8027906:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
    int32_t f5_38 = 38 * f5; /* 1.959375*2^30 */
 802790a:	f8d7 2580 	ldr.w	r2, [r7, #1408]	; 0x580
 802790e:	2326      	movs	r3, #38	; 0x26
 8027910:	fb03 f302 	mul.w	r3, r3, r2
 8027914:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
    int32_t f6_19 = 19 * f6; /* 1.959375*2^30 */
 8027918:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 802791c:	4613      	mov	r3, r2
 802791e:	00db      	lsls	r3, r3, #3
 8027920:	4413      	add	r3, r2
 8027922:	005b      	lsls	r3, r3, #1
 8027924:	4413      	add	r3, r2
 8027926:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
    int32_t f7_38 = 38 * f7; /* 1.959375*2^30 */
 802792a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 802792e:	2326      	movs	r3, #38	; 0x26
 8027930:	fb03 f302 	mul.w	r3, r3, r2
 8027934:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
    int32_t f8_19 = 19 * f8; /* 1.959375*2^30 */
 8027938:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 802793c:	4613      	mov	r3, r2
 802793e:	00db      	lsls	r3, r3, #3
 8027940:	4413      	add	r3, r2
 8027942:	005b      	lsls	r3, r3, #1
 8027944:	4413      	add	r3, r2
 8027946:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
    int32_t f9_38 = 38 * f9; /* 1.959375*2^30 */
 802794a:	f8d7 2570 	ldr.w	r2, [r7, #1392]	; 0x570
 802794e:	2326      	movs	r3, #38	; 0x26
 8027950:	fb03 f302 	mul.w	r3, r3, r2
 8027954:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
    int64_t f0f0    = f0   * (int64_t) f0;
 8027958:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 802795c:	4618      	mov	r0, r3
 802795e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027962:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8027966:	461a      	mov	r2, r3
 8027968:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802796c:	fb02 f501 	mul.w	r5, r2, r1
 8027970:	fb00 f403 	mul.w	r4, r0, r3
 8027974:	442c      	add	r4, r5
 8027976:	fba0 2302 	umull	r2, r3, r0, r2
 802797a:	18e1      	adds	r1, r4, r3
 802797c:	460b      	mov	r3, r1
 802797e:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 8027982:	e9c1 2300 	strd	r2, r3, [r1]
 8027986:	f507 61a6 	add.w	r1, r7, #1328	; 0x530
 802798a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f1_2  = f0_2 * (int64_t) f1;
 802798e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8027992:	4618      	mov	r0, r3
 8027994:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027998:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 802799c:	461a      	mov	r2, r3
 802799e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80279a2:	fb02 f501 	mul.w	r5, r2, r1
 80279a6:	fb00 f403 	mul.w	r4, r0, r3
 80279aa:	442c      	add	r4, r5
 80279ac:	fba0 2302 	umull	r2, r3, r0, r2
 80279b0:	18e1      	adds	r1, r4, r3
 80279b2:	460b      	mov	r3, r1
 80279b4:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 80279b8:	e9c1 2300 	strd	r2, r3, [r1]
 80279bc:	f507 61a5 	add.w	r1, r7, #1320	; 0x528
 80279c0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f2_2  = f0_2 * (int64_t) f2;
 80279c4:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80279c8:	4618      	mov	r0, r3
 80279ca:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80279ce:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80279d2:	461a      	mov	r2, r3
 80279d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80279d8:	fb02 f501 	mul.w	r5, r2, r1
 80279dc:	fb00 f403 	mul.w	r4, r0, r3
 80279e0:	442c      	add	r4, r5
 80279e2:	fba0 2302 	umull	r2, r3, r0, r2
 80279e6:	18e1      	adds	r1, r4, r3
 80279e8:	460b      	mov	r3, r1
 80279ea:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 80279ee:	e9c1 2300 	strd	r2, r3, [r1]
 80279f2:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 80279f6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f3_2  = f0_2 * (int64_t) f3;
 80279fa:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80279fe:	4618      	mov	r0, r3
 8027a00:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027a04:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8027a08:	461a      	mov	r2, r3
 8027a0a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027a0e:	fb02 f501 	mul.w	r5, r2, r1
 8027a12:	fb00 f403 	mul.w	r4, r0, r3
 8027a16:	442c      	add	r4, r5
 8027a18:	fba0 2302 	umull	r2, r3, r0, r2
 8027a1c:	18e1      	adds	r1, r4, r3
 8027a1e:	460b      	mov	r3, r1
 8027a20:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8027a24:	e9c1 2300 	strd	r2, r3, [r1]
 8027a28:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 8027a2c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f4_2  = f0_2 * (int64_t) f4;
 8027a30:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8027a34:	4618      	mov	r0, r3
 8027a36:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027a3a:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8027a3e:	461a      	mov	r2, r3
 8027a40:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027a44:	fb02 f501 	mul.w	r5, r2, r1
 8027a48:	fb00 f403 	mul.w	r4, r0, r3
 8027a4c:	442c      	add	r4, r5
 8027a4e:	fba0 2302 	umull	r2, r3, r0, r2
 8027a52:	18e1      	adds	r1, r4, r3
 8027a54:	460b      	mov	r3, r1
 8027a56:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8027a5a:	e9c1 2300 	strd	r2, r3, [r1]
 8027a5e:	f507 61a2 	add.w	r1, r7, #1296	; 0x510
 8027a62:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f5_2  = f0_2 * (int64_t) f5;
 8027a66:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8027a6a:	4618      	mov	r0, r3
 8027a6c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027a70:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8027a74:	461a      	mov	r2, r3
 8027a76:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027a7a:	fb02 f501 	mul.w	r5, r2, r1
 8027a7e:	fb00 f403 	mul.w	r4, r0, r3
 8027a82:	442c      	add	r4, r5
 8027a84:	fba0 2302 	umull	r2, r3, r0, r2
 8027a88:	18e1      	adds	r1, r4, r3
 8027a8a:	460b      	mov	r3, r1
 8027a8c:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8027a90:	e9c1 2300 	strd	r2, r3, [r1]
 8027a94:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8027a98:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f6_2  = f0_2 * (int64_t) f6;
 8027a9c:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8027aa0:	4618      	mov	r0, r3
 8027aa2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027aa6:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8027aaa:	461a      	mov	r2, r3
 8027aac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027ab0:	fb02 f501 	mul.w	r5, r2, r1
 8027ab4:	fb00 f403 	mul.w	r4, r0, r3
 8027ab8:	442c      	add	r4, r5
 8027aba:	fba0 2302 	umull	r2, r3, r0, r2
 8027abe:	18e1      	adds	r1, r4, r3
 8027ac0:	460b      	mov	r3, r1
 8027ac2:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8027ac6:	e9c1 2300 	strd	r2, r3, [r1]
 8027aca:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 8027ace:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f7_2  = f0_2 * (int64_t) f7;
 8027ad2:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8027ad6:	4618      	mov	r0, r3
 8027ad8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027adc:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8027ae0:	461a      	mov	r2, r3
 8027ae2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027ae6:	fb02 f501 	mul.w	r5, r2, r1
 8027aea:	fb00 f403 	mul.w	r4, r0, r3
 8027aee:	442c      	add	r4, r5
 8027af0:	fba0 2302 	umull	r2, r3, r0, r2
 8027af4:	18e1      	adds	r1, r4, r3
 8027af6:	460b      	mov	r3, r1
 8027af8:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 8027afc:	e9c1 2300 	strd	r2, r3, [r1]
 8027b00:	f507 619f 	add.w	r1, r7, #1272	; 0x4f8
 8027b04:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f8_2  = f0_2 * (int64_t) f8;
 8027b08:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8027b0c:	4618      	mov	r0, r3
 8027b0e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027b12:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8027b16:	461a      	mov	r2, r3
 8027b18:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027b1c:	fb02 f501 	mul.w	r5, r2, r1
 8027b20:	fb00 f403 	mul.w	r4, r0, r3
 8027b24:	442c      	add	r4, r5
 8027b26:	fba0 2302 	umull	r2, r3, r0, r2
 8027b2a:	18e1      	adds	r1, r4, r3
 8027b2c:	460b      	mov	r3, r1
 8027b2e:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8027b32:	e9c1 2300 	strd	r2, r3, [r1]
 8027b36:	f507 619e 	add.w	r1, r7, #1264	; 0x4f0
 8027b3a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f0f9_2  = f0_2 * (int64_t) f9;
 8027b3e:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 8027b42:	4618      	mov	r0, r3
 8027b44:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027b48:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8027b4c:	461a      	mov	r2, r3
 8027b4e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027b52:	fb02 f501 	mul.w	r5, r2, r1
 8027b56:	fb00 f403 	mul.w	r4, r0, r3
 8027b5a:	442c      	add	r4, r5
 8027b5c:	fba0 2302 	umull	r2, r3, r0, r2
 8027b60:	18e1      	adds	r1, r4, r3
 8027b62:	460b      	mov	r3, r1
 8027b64:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 8027b68:	e9c1 2300 	strd	r2, r3, [r1]
 8027b6c:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 8027b70:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f1_2  = f1_2 * (int64_t) f1;
 8027b74:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8027b78:	4618      	mov	r0, r3
 8027b7a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027b7e:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 8027b82:	461a      	mov	r2, r3
 8027b84:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027b88:	fb02 f501 	mul.w	r5, r2, r1
 8027b8c:	fb00 f403 	mul.w	r4, r0, r3
 8027b90:	442c      	add	r4, r5
 8027b92:	fba0 2302 	umull	r2, r3, r0, r2
 8027b96:	18e1      	adds	r1, r4, r3
 8027b98:	460b      	mov	r3, r1
 8027b9a:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 8027b9e:	e9c1 2300 	strd	r2, r3, [r1]
 8027ba2:	f507 619c 	add.w	r1, r7, #1248	; 0x4e0
 8027ba6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f2_2  = f1_2 * (int64_t) f2;
 8027baa:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8027bae:	4618      	mov	r0, r3
 8027bb0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027bb4:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8027bb8:	461a      	mov	r2, r3
 8027bba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027bbe:	fb02 f501 	mul.w	r5, r2, r1
 8027bc2:	fb00 f403 	mul.w	r4, r0, r3
 8027bc6:	442c      	add	r4, r5
 8027bc8:	fba0 2302 	umull	r2, r3, r0, r2
 8027bcc:	18e1      	adds	r1, r4, r3
 8027bce:	460b      	mov	r3, r1
 8027bd0:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8027bd4:	e9c1 2300 	strd	r2, r3, [r1]
 8027bd8:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8027bdc:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f3_4  = f1_2 * (int64_t) f3_2;
 8027be0:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8027be4:	4618      	mov	r0, r3
 8027be6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027bea:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8027bee:	461a      	mov	r2, r3
 8027bf0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027bf4:	fb02 f501 	mul.w	r5, r2, r1
 8027bf8:	fb00 f403 	mul.w	r4, r0, r3
 8027bfc:	442c      	add	r4, r5
 8027bfe:	fba0 2302 	umull	r2, r3, r0, r2
 8027c02:	18e1      	adds	r1, r4, r3
 8027c04:	460b      	mov	r3, r1
 8027c06:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8027c0a:	e9c1 2300 	strd	r2, r3, [r1]
 8027c0e:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 8027c12:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f4_2  = f1_2 * (int64_t) f4;
 8027c16:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8027c1a:	4618      	mov	r0, r3
 8027c1c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027c20:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8027c24:	461a      	mov	r2, r3
 8027c26:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027c2a:	fb02 f501 	mul.w	r5, r2, r1
 8027c2e:	fb00 f403 	mul.w	r4, r0, r3
 8027c32:	442c      	add	r4, r5
 8027c34:	fba0 2302 	umull	r2, r3, r0, r2
 8027c38:	18e1      	adds	r1, r4, r3
 8027c3a:	460b      	mov	r3, r1
 8027c3c:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8027c40:	e9c1 2300 	strd	r2, r3, [r1]
 8027c44:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8027c48:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f5_4  = f1_2 * (int64_t) f5_2;
 8027c4c:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8027c50:	4618      	mov	r0, r3
 8027c52:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027c56:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8027c5a:	461a      	mov	r2, r3
 8027c5c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027c60:	fb02 f501 	mul.w	r5, r2, r1
 8027c64:	fb00 f403 	mul.w	r4, r0, r3
 8027c68:	442c      	add	r4, r5
 8027c6a:	fba0 2302 	umull	r2, r3, r0, r2
 8027c6e:	18e1      	adds	r1, r4, r3
 8027c70:	460b      	mov	r3, r1
 8027c72:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8027c76:	e9c1 2300 	strd	r2, r3, [r1]
 8027c7a:	f507 6198 	add.w	r1, r7, #1216	; 0x4c0
 8027c7e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f6_2  = f1_2 * (int64_t) f6;
 8027c82:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8027c86:	4618      	mov	r0, r3
 8027c88:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027c8c:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8027c90:	461a      	mov	r2, r3
 8027c92:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027c96:	fb02 f501 	mul.w	r5, r2, r1
 8027c9a:	fb00 f403 	mul.w	r4, r0, r3
 8027c9e:	442c      	add	r4, r5
 8027ca0:	fba0 2302 	umull	r2, r3, r0, r2
 8027ca4:	18e1      	adds	r1, r4, r3
 8027ca6:	460b      	mov	r3, r1
 8027ca8:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 8027cac:	e9c1 2300 	strd	r2, r3, [r1]
 8027cb0:	f507 6197 	add.w	r1, r7, #1208	; 0x4b8
 8027cb4:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f7_4  = f1_2 * (int64_t) f7_2;
 8027cb8:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8027cbc:	4618      	mov	r0, r3
 8027cbe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027cc2:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8027cc6:	461a      	mov	r2, r3
 8027cc8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027ccc:	fb02 f501 	mul.w	r5, r2, r1
 8027cd0:	fb00 f403 	mul.w	r4, r0, r3
 8027cd4:	442c      	add	r4, r5
 8027cd6:	fba0 2302 	umull	r2, r3, r0, r2
 8027cda:	18e1      	adds	r1, r4, r3
 8027cdc:	460b      	mov	r3, r1
 8027cde:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8027ce2:	e9c1 2300 	strd	r2, r3, [r1]
 8027ce6:	f507 6196 	add.w	r1, r7, #1200	; 0x4b0
 8027cea:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f8_2  = f1_2 * (int64_t) f8;
 8027cee:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8027cf2:	4618      	mov	r0, r3
 8027cf4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027cf8:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8027cfc:	461a      	mov	r2, r3
 8027cfe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027d02:	fb02 f501 	mul.w	r5, r2, r1
 8027d06:	fb00 f403 	mul.w	r4, r0, r3
 8027d0a:	442c      	add	r4, r5
 8027d0c:	fba0 2302 	umull	r2, r3, r0, r2
 8027d10:	18e1      	adds	r1, r4, r3
 8027d12:	460b      	mov	r3, r1
 8027d14:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8027d18:	e9c1 2300 	strd	r2, r3, [r1]
 8027d1c:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 8027d20:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f1f9_76 = f1_2 * (int64_t) f9_38;
 8027d24:	f8d7 3568 	ldr.w	r3, [r7, #1384]	; 0x568
 8027d28:	4618      	mov	r0, r3
 8027d2a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027d2e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8027d32:	461a      	mov	r2, r3
 8027d34:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027d38:	fb02 f501 	mul.w	r5, r2, r1
 8027d3c:	fb00 f403 	mul.w	r4, r0, r3
 8027d40:	442c      	add	r4, r5
 8027d42:	fba0 2302 	umull	r2, r3, r0, r2
 8027d46:	18e1      	adds	r1, r4, r3
 8027d48:	460b      	mov	r3, r1
 8027d4a:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8027d4e:	e9c1 2300 	strd	r2, r3, [r1]
 8027d52:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 8027d56:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f2    = f2   * (int64_t) f2;
 8027d5a:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8027d5e:	4618      	mov	r0, r3
 8027d60:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027d64:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8027d68:	461a      	mov	r2, r3
 8027d6a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027d6e:	fb02 f501 	mul.w	r5, r2, r1
 8027d72:	fb00 f403 	mul.w	r4, r0, r3
 8027d76:	442c      	add	r4, r5
 8027d78:	fba0 2302 	umull	r2, r3, r0, r2
 8027d7c:	18e1      	adds	r1, r4, r3
 8027d7e:	460b      	mov	r3, r1
 8027d80:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8027d84:	e9c1 2300 	strd	r2, r3, [r1]
 8027d88:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8027d8c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f3_2  = f2_2 * (int64_t) f3;
 8027d90:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8027d94:	4618      	mov	r0, r3
 8027d96:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027d9a:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8027d9e:	461a      	mov	r2, r3
 8027da0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027da4:	fb02 f501 	mul.w	r5, r2, r1
 8027da8:	fb00 f403 	mul.w	r4, r0, r3
 8027dac:	442c      	add	r4, r5
 8027dae:	fba0 2302 	umull	r2, r3, r0, r2
 8027db2:	18e1      	adds	r1, r4, r3
 8027db4:	460b      	mov	r3, r1
 8027db6:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 8027dba:	e9c1 2300 	strd	r2, r3, [r1]
 8027dbe:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 8027dc2:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f4_2  = f2_2 * (int64_t) f4;
 8027dc6:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8027dca:	4618      	mov	r0, r3
 8027dcc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027dd0:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8027dd4:	461a      	mov	r2, r3
 8027dd6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027dda:	fb02 f501 	mul.w	r5, r2, r1
 8027dde:	fb00 f403 	mul.w	r4, r0, r3
 8027de2:	442c      	add	r4, r5
 8027de4:	fba0 2302 	umull	r2, r3, r0, r2
 8027de8:	18e1      	adds	r1, r4, r3
 8027dea:	460b      	mov	r3, r1
 8027dec:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8027df0:	e9c1 2300 	strd	r2, r3, [r1]
 8027df4:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8027df8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f5_2  = f2_2 * (int64_t) f5;
 8027dfc:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8027e00:	4618      	mov	r0, r3
 8027e02:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027e06:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8027e0a:	461a      	mov	r2, r3
 8027e0c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027e10:	fb02 f501 	mul.w	r5, r2, r1
 8027e14:	fb00 f403 	mul.w	r4, r0, r3
 8027e18:	442c      	add	r4, r5
 8027e1a:	fba0 2302 	umull	r2, r3, r0, r2
 8027e1e:	18e1      	adds	r1, r4, r3
 8027e20:	460b      	mov	r3, r1
 8027e22:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8027e26:	e9c1 2300 	strd	r2, r3, [r1]
 8027e2a:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8027e2e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f6_2  = f2_2 * (int64_t) f6;
 8027e32:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8027e36:	4618      	mov	r0, r3
 8027e38:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027e3c:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8027e40:	461a      	mov	r2, r3
 8027e42:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027e46:	fb02 f501 	mul.w	r5, r2, r1
 8027e4a:	fb00 f403 	mul.w	r4, r0, r3
 8027e4e:	442c      	add	r4, r5
 8027e50:	fba0 2302 	umull	r2, r3, r0, r2
 8027e54:	18e1      	adds	r1, r4, r3
 8027e56:	460b      	mov	r3, r1
 8027e58:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8027e5c:	e9c1 2300 	strd	r2, r3, [r1]
 8027e60:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8027e64:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f7_2  = f2_2 * (int64_t) f7;
 8027e68:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8027e6c:	4618      	mov	r0, r3
 8027e6e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027e72:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8027e76:	461a      	mov	r2, r3
 8027e78:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027e7c:	fb02 f501 	mul.w	r5, r2, r1
 8027e80:	fb00 f403 	mul.w	r4, r0, r3
 8027e84:	442c      	add	r4, r5
 8027e86:	fba0 2302 	umull	r2, r3, r0, r2
 8027e8a:	18e1      	adds	r1, r4, r3
 8027e8c:	460b      	mov	r3, r1
 8027e8e:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8027e92:	e9c1 2300 	strd	r2, r3, [r1]
 8027e96:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8027e9a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f8_38 = f2_2 * (int64_t) f8_19;
 8027e9e:	f8d7 3564 	ldr.w	r3, [r7, #1380]	; 0x564
 8027ea2:	4618      	mov	r0, r3
 8027ea4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027ea8:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8027eac:	461a      	mov	r2, r3
 8027eae:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027eb2:	fb02 f501 	mul.w	r5, r2, r1
 8027eb6:	fb00 f403 	mul.w	r4, r0, r3
 8027eba:	442c      	add	r4, r5
 8027ebc:	fba0 2302 	umull	r2, r3, r0, r2
 8027ec0:	18e1      	adds	r1, r4, r3
 8027ec2:	460b      	mov	r3, r1
 8027ec4:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8027ec8:	e9c1 2300 	strd	r2, r3, [r1]
 8027ecc:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8027ed0:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f2f9_38 = f2   * (int64_t) f9_38;
 8027ed4:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8027ed8:	4618      	mov	r0, r3
 8027eda:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027ede:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8027ee2:	461a      	mov	r2, r3
 8027ee4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027ee8:	fb02 f501 	mul.w	r5, r2, r1
 8027eec:	fb00 f403 	mul.w	r4, r0, r3
 8027ef0:	442c      	add	r4, r5
 8027ef2:	fba0 2302 	umull	r2, r3, r0, r2
 8027ef6:	18e1      	adds	r1, r4, r3
 8027ef8:	460b      	mov	r3, r1
 8027efa:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8027efe:	e9c1 2300 	strd	r2, r3, [r1]
 8027f02:	f507 618c 	add.w	r1, r7, #1120	; 0x460
 8027f06:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f3_2  = f3_2 * (int64_t) f3;
 8027f0a:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8027f0e:	4618      	mov	r0, r3
 8027f10:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027f14:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8027f18:	461a      	mov	r2, r3
 8027f1a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027f1e:	fb02 f501 	mul.w	r5, r2, r1
 8027f22:	fb00 f403 	mul.w	r4, r0, r3
 8027f26:	442c      	add	r4, r5
 8027f28:	fba0 2302 	umull	r2, r3, r0, r2
 8027f2c:	18e1      	adds	r1, r4, r3
 8027f2e:	460b      	mov	r3, r1
 8027f30:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8027f34:	e9c1 2300 	strd	r2, r3, [r1]
 8027f38:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8027f3c:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f4_2  = f3_2 * (int64_t) f4;
 8027f40:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8027f44:	4618      	mov	r0, r3
 8027f46:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027f4a:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8027f4e:	461a      	mov	r2, r3
 8027f50:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027f54:	fb02 f501 	mul.w	r5, r2, r1
 8027f58:	fb00 f403 	mul.w	r4, r0, r3
 8027f5c:	442c      	add	r4, r5
 8027f5e:	fba0 2302 	umull	r2, r3, r0, r2
 8027f62:	18e1      	adds	r1, r4, r3
 8027f64:	460b      	mov	r3, r1
 8027f66:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8027f6a:	e9c1 2300 	strd	r2, r3, [r1]
 8027f6e:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8027f72:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f5_4  = f3_2 * (int64_t) f5_2;
 8027f76:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8027f7a:	4618      	mov	r0, r3
 8027f7c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027f80:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8027f84:	461a      	mov	r2, r3
 8027f86:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027f8a:	fb02 f501 	mul.w	r5, r2, r1
 8027f8e:	fb00 f403 	mul.w	r4, r0, r3
 8027f92:	442c      	add	r4, r5
 8027f94:	fba0 2302 	umull	r2, r3, r0, r2
 8027f98:	18e1      	adds	r1, r4, r3
 8027f9a:	460b      	mov	r3, r1
 8027f9c:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8027fa0:	e9c1 2300 	strd	r2, r3, [r1]
 8027fa4:	f507 6189 	add.w	r1, r7, #1096	; 0x448
 8027fa8:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f6_2  = f3_2 * (int64_t) f6;
 8027fac:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8027fb0:	4618      	mov	r0, r3
 8027fb2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027fb6:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8027fba:	461a      	mov	r2, r3
 8027fbc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027fc0:	fb02 f501 	mul.w	r5, r2, r1
 8027fc4:	fb00 f403 	mul.w	r4, r0, r3
 8027fc8:	442c      	add	r4, r5
 8027fca:	fba0 2302 	umull	r2, r3, r0, r2
 8027fce:	18e1      	adds	r1, r4, r3
 8027fd0:	460b      	mov	r3, r1
 8027fd2:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8027fd6:	e9c1 2300 	strd	r2, r3, [r1]
 8027fda:	f507 6188 	add.w	r1, r7, #1088	; 0x440
 8027fde:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f7_76 = f3_2 * (int64_t) f7_38;
 8027fe2:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8027fe6:	4618      	mov	r0, r3
 8027fe8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8027fec:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8027ff0:	461a      	mov	r2, r3
 8027ff2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8027ff6:	fb02 f501 	mul.w	r5, r2, r1
 8027ffa:	fb00 f403 	mul.w	r4, r0, r3
 8027ffe:	442c      	add	r4, r5
 8028000:	fba0 2302 	umull	r2, r3, r0, r2
 8028004:	18e1      	adds	r1, r4, r3
 8028006:	460b      	mov	r3, r1
 8028008:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 802800c:	e9c1 2300 	strd	r2, r3, [r1]
 8028010:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8028014:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f8_38 = f3_2 * (int64_t) f8_19;
 8028018:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 802801c:	4618      	mov	r0, r3
 802801e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028022:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8028026:	461a      	mov	r2, r3
 8028028:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802802c:	fb02 f501 	mul.w	r5, r2, r1
 8028030:	fb00 f403 	mul.w	r4, r0, r3
 8028034:	442c      	add	r4, r5
 8028036:	fba0 2302 	umull	r2, r3, r0, r2
 802803a:	18e1      	adds	r1, r4, r3
 802803c:	460b      	mov	r3, r1
 802803e:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8028042:	e9c1 2300 	strd	r2, r3, [r1]
 8028046:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 802804a:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f3f9_76 = f3_2 * (int64_t) f9_38;
 802804e:	f8d7 3560 	ldr.w	r3, [r7, #1376]	; 0x560
 8028052:	4618      	mov	r0, r3
 8028054:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028058:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 802805c:	461a      	mov	r2, r3
 802805e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028062:	fb02 f501 	mul.w	r5, r2, r1
 8028066:	fb00 f403 	mul.w	r4, r0, r3
 802806a:	442c      	add	r4, r5
 802806c:	fba0 2302 	umull	r2, r3, r0, r2
 8028070:	18e1      	adds	r1, r4, r3
 8028072:	460b      	mov	r3, r1
 8028074:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8028078:	e9c1 2300 	strd	r2, r3, [r1]
 802807c:	f507 6185 	add.w	r1, r7, #1064	; 0x428
 8028080:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f4    = f4   * (int64_t) f4;
 8028084:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8028088:	4618      	mov	r0, r3
 802808a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802808e:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8028092:	461a      	mov	r2, r3
 8028094:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028098:	fb02 f501 	mul.w	r5, r2, r1
 802809c:	fb00 f403 	mul.w	r4, r0, r3
 80280a0:	442c      	add	r4, r5
 80280a2:	fba0 2302 	umull	r2, r3, r0, r2
 80280a6:	18e1      	adds	r1, r4, r3
 80280a8:	460b      	mov	r3, r1
 80280aa:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 80280ae:	e9c1 2300 	strd	r2, r3, [r1]
 80280b2:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 80280b6:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f5_2  = f4_2 * (int64_t) f5;
 80280ba:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 80280be:	4618      	mov	r0, r3
 80280c0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80280c4:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 80280c8:	461a      	mov	r2, r3
 80280ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80280ce:	fb02 f501 	mul.w	r5, r2, r1
 80280d2:	fb00 f403 	mul.w	r4, r0, r3
 80280d6:	442c      	add	r4, r5
 80280d8:	fba0 2302 	umull	r2, r3, r0, r2
 80280dc:	18e1      	adds	r1, r4, r3
 80280de:	460b      	mov	r3, r1
 80280e0:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80280e4:	e9c1 2300 	strd	r2, r3, [r1]
 80280e8:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80280ec:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f6_38 = f4_2 * (int64_t) f6_19;
 80280f0:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 80280f4:	4618      	mov	r0, r3
 80280f6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80280fa:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 80280fe:	461a      	mov	r2, r3
 8028100:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028104:	fb02 f501 	mul.w	r5, r2, r1
 8028108:	fb00 f403 	mul.w	r4, r0, r3
 802810c:	442c      	add	r4, r5
 802810e:	fba0 2302 	umull	r2, r3, r0, r2
 8028112:	18e1      	adds	r1, r4, r3
 8028114:	460b      	mov	r3, r1
 8028116:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 802811a:	e9c1 2300 	strd	r2, r3, [r1]
 802811e:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8028122:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f7_38 = f4   * (int64_t) f7_38;
 8028126:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 802812a:	4618      	mov	r0, r3
 802812c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028130:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8028134:	461a      	mov	r2, r3
 8028136:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802813a:	fb02 f501 	mul.w	r5, r2, r1
 802813e:	fb00 f403 	mul.w	r4, r0, r3
 8028142:	442c      	add	r4, r5
 8028144:	fba0 2302 	umull	r2, r3, r0, r2
 8028148:	18e1      	adds	r1, r4, r3
 802814a:	460b      	mov	r3, r1
 802814c:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8028150:	e9c1 2300 	strd	r2, r3, [r1]
 8028154:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8028158:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f8_38 = f4_2 * (int64_t) f8_19;
 802815c:	f8d7 355c 	ldr.w	r3, [r7, #1372]	; 0x55c
 8028160:	4618      	mov	r0, r3
 8028162:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028166:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 802816a:	461a      	mov	r2, r3
 802816c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028170:	fb02 f501 	mul.w	r5, r2, r1
 8028174:	fb00 f403 	mul.w	r4, r0, r3
 8028178:	442c      	add	r4, r5
 802817a:	fba0 2302 	umull	r2, r3, r0, r2
 802817e:	18e1      	adds	r1, r4, r3
 8028180:	460b      	mov	r3, r1
 8028182:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 8028186:	e9c1 2300 	strd	r2, r3, [r1]
 802818a:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 802818e:	e9c1 2300 	strd	r2, r3, [r1]
    int64_t f4f9_38 = f4   * (int64_t) f9_38;
 8028192:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8028196:	4618      	mov	r0, r3
 8028198:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802819c:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80281a0:	461a      	mov	r2, r3
 80281a2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80281a6:	fb02 f501 	mul.w	r5, r2, r1
 80281aa:	fb00 f403 	mul.w	r4, r0, r3
 80281ae:	442c      	add	r4, r5
 80281b0:	fba0 2302 	umull	r2, r3, r0, r2
 80281b4:	18e1      	adds	r1, r4, r3
 80281b6:	460b      	mov	r3, r1
 80281b8:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
 80281bc:	e9c7 23fe 	strd	r2, r3, [r7, #1016]	; 0x3f8
    int64_t f5f5_38 = f5   * (int64_t) f5_38;
 80281c0:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 80281c4:	4618      	mov	r0, r3
 80281c6:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80281ca:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 80281ce:	461a      	mov	r2, r3
 80281d0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80281d4:	fb02 f501 	mul.w	r5, r2, r1
 80281d8:	fb00 f403 	mul.w	r4, r0, r3
 80281dc:	442c      	add	r4, r5
 80281de:	fba0 2302 	umull	r2, r3, r0, r2
 80281e2:	18e1      	adds	r1, r4, r3
 80281e4:	460b      	mov	r3, r1
 80281e6:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
 80281ea:	e9c7 23fc 	strd	r2, r3, [r7, #1008]	; 0x3f0
    int64_t f5f6_38 = f5_2 * (int64_t) f6_19;
 80281ee:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 80281f2:	4618      	mov	r0, r3
 80281f4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80281f8:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 80281fc:	461a      	mov	r2, r3
 80281fe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028202:	fb02 f501 	mul.w	r5, r2, r1
 8028206:	fb00 f403 	mul.w	r4, r0, r3
 802820a:	442c      	add	r4, r5
 802820c:	fba0 2302 	umull	r2, r3, r0, r2
 8028210:	18e1      	adds	r1, r4, r3
 8028212:	460b      	mov	r3, r1
 8028214:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
 8028218:	e9c7 23fa 	strd	r2, r3, [r7, #1000]	; 0x3e8
    int64_t f5f7_76 = f5_2 * (int64_t) f7_38;
 802821c:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 8028220:	4618      	mov	r0, r3
 8028222:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028226:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 802822a:	461a      	mov	r2, r3
 802822c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028230:	fb02 f501 	mul.w	r5, r2, r1
 8028234:	fb00 f403 	mul.w	r4, r0, r3
 8028238:	442c      	add	r4, r5
 802823a:	fba0 2302 	umull	r2, r3, r0, r2
 802823e:	18e1      	adds	r1, r4, r3
 8028240:	460b      	mov	r3, r1
 8028242:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
 8028246:	e9c7 23f8 	strd	r2, r3, [r7, #992]	; 0x3e0
    int64_t f5f8_38 = f5_2 * (int64_t) f8_19;
 802824a:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 802824e:	4618      	mov	r0, r3
 8028250:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028254:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8028258:	461a      	mov	r2, r3
 802825a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802825e:	fb02 f501 	mul.w	r5, r2, r1
 8028262:	fb00 f403 	mul.w	r4, r0, r3
 8028266:	442c      	add	r4, r5
 8028268:	fba0 2302 	umull	r2, r3, r0, r2
 802826c:	18e1      	adds	r1, r4, r3
 802826e:	460b      	mov	r3, r1
 8028270:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
 8028274:	e9c7 23f6 	strd	r2, r3, [r7, #984]	; 0x3d8
    int64_t f5f9_76 = f5_2 * (int64_t) f9_38;
 8028278:	f8d7 3558 	ldr.w	r3, [r7, #1368]	; 0x558
 802827c:	4618      	mov	r0, r3
 802827e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028282:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8028286:	461a      	mov	r2, r3
 8028288:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802828c:	fb02 f501 	mul.w	r5, r2, r1
 8028290:	fb00 f403 	mul.w	r4, r0, r3
 8028294:	442c      	add	r4, r5
 8028296:	fba0 2302 	umull	r2, r3, r0, r2
 802829a:	18e1      	adds	r1, r4, r3
 802829c:	460b      	mov	r3, r1
 802829e:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
 80282a2:	e9c7 23f4 	strd	r2, r3, [r7, #976]	; 0x3d0
    int64_t f6f6_19 = f6   * (int64_t) f6_19;
 80282a6:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 80282aa:	4618      	mov	r0, r3
 80282ac:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80282b0:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 80282b4:	461a      	mov	r2, r3
 80282b6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80282ba:	fb02 f501 	mul.w	r5, r2, r1
 80282be:	fb00 f403 	mul.w	r4, r0, r3
 80282c2:	442c      	add	r4, r5
 80282c4:	fba0 2302 	umull	r2, r3, r0, r2
 80282c8:	18e1      	adds	r1, r4, r3
 80282ca:	460b      	mov	r3, r1
 80282cc:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
 80282d0:	e9c7 23f2 	strd	r2, r3, [r7, #968]	; 0x3c8
    int64_t f6f7_38 = f6   * (int64_t) f7_38;
 80282d4:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 80282d8:	4618      	mov	r0, r3
 80282da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80282de:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80282e2:	461a      	mov	r2, r3
 80282e4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80282e8:	fb02 f501 	mul.w	r5, r2, r1
 80282ec:	fb00 f403 	mul.w	r4, r0, r3
 80282f0:	442c      	add	r4, r5
 80282f2:	fba0 2302 	umull	r2, r3, r0, r2
 80282f6:	18e1      	adds	r1, r4, r3
 80282f8:	460b      	mov	r3, r1
 80282fa:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
 80282fe:	e9c7 23f0 	strd	r2, r3, [r7, #960]	; 0x3c0
    int64_t f6f8_38 = f6_2 * (int64_t) f8_19;
 8028302:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8028306:	4618      	mov	r0, r3
 8028308:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802830c:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8028310:	461a      	mov	r2, r3
 8028312:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028316:	fb02 f501 	mul.w	r5, r2, r1
 802831a:	fb00 f403 	mul.w	r4, r0, r3
 802831e:	442c      	add	r4, r5
 8028320:	fba0 2302 	umull	r2, r3, r0, r2
 8028324:	18e1      	adds	r1, r4, r3
 8028326:	460b      	mov	r3, r1
 8028328:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
 802832c:	e9c7 23ee 	strd	r2, r3, [r7, #952]	; 0x3b8
    int64_t f6f9_38 = f6   * (int64_t) f9_38;
 8028330:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8028334:	4618      	mov	r0, r3
 8028336:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802833a:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 802833e:	461a      	mov	r2, r3
 8028340:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028344:	fb02 f501 	mul.w	r5, r2, r1
 8028348:	fb00 f403 	mul.w	r4, r0, r3
 802834c:	442c      	add	r4, r5
 802834e:	fba0 2302 	umull	r2, r3, r0, r2
 8028352:	18e1      	adds	r1, r4, r3
 8028354:	460b      	mov	r3, r1
 8028356:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
 802835a:	e9c7 23ec 	strd	r2, r3, [r7, #944]	; 0x3b0
    int64_t f7f7_38 = f7   * (int64_t) f7_38;
 802835e:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8028362:	4618      	mov	r0, r3
 8028364:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028368:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 802836c:	461a      	mov	r2, r3
 802836e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028372:	fb02 f501 	mul.w	r5, r2, r1
 8028376:	fb00 f403 	mul.w	r4, r0, r3
 802837a:	442c      	add	r4, r5
 802837c:	fba0 2302 	umull	r2, r3, r0, r2
 8028380:	18e1      	adds	r1, r4, r3
 8028382:	460b      	mov	r3, r1
 8028384:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
 8028388:	e9c7 23ea 	strd	r2, r3, [r7, #936]	; 0x3a8
    int64_t f7f8_38 = f7_2 * (int64_t) f8_19;
 802838c:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8028390:	4618      	mov	r0, r3
 8028392:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028396:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 802839a:	461a      	mov	r2, r3
 802839c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80283a0:	fb02 f501 	mul.w	r5, r2, r1
 80283a4:	fb00 f403 	mul.w	r4, r0, r3
 80283a8:	442c      	add	r4, r5
 80283aa:	fba0 2302 	umull	r2, r3, r0, r2
 80283ae:	18e1      	adds	r1, r4, r3
 80283b0:	460b      	mov	r3, r1
 80283b2:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
 80283b6:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
    int64_t f7f9_76 = f7_2 * (int64_t) f9_38;
 80283ba:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 80283be:	4618      	mov	r0, r3
 80283c0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80283c4:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80283c8:	461a      	mov	r2, r3
 80283ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80283ce:	fb02 f501 	mul.w	r5, r2, r1
 80283d2:	fb00 f403 	mul.w	r4, r0, r3
 80283d6:	442c      	add	r4, r5
 80283d8:	fba0 2302 	umull	r2, r3, r0, r2
 80283dc:	18e1      	adds	r1, r4, r3
 80283de:	460b      	mov	r3, r1
 80283e0:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
 80283e4:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
    int64_t f8f8_19 = f8   * (int64_t) f8_19;
 80283e8:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 80283ec:	4618      	mov	r0, r3
 80283ee:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80283f2:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80283f6:	461a      	mov	r2, r3
 80283f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80283fc:	fb02 f501 	mul.w	r5, r2, r1
 8028400:	fb00 f403 	mul.w	r4, r0, r3
 8028404:	442c      	add	r4, r5
 8028406:	fba0 2302 	umull	r2, r3, r0, r2
 802840a:	18e1      	adds	r1, r4, r3
 802840c:	460b      	mov	r3, r1
 802840e:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
 8028412:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
    int64_t f8f9_38 = f8   * (int64_t) f9_38;
 8028416:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 802841a:	4618      	mov	r0, r3
 802841c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8028420:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8028424:	461a      	mov	r2, r3
 8028426:	ea4f 73e2 	mov.w	r3, r2, asr #31
 802842a:	fb02 f501 	mul.w	r5, r2, r1
 802842e:	fb00 f403 	mul.w	r4, r0, r3
 8028432:	442c      	add	r4, r5
 8028434:	fba0 2302 	umull	r2, r3, r0, r2
 8028438:	18e1      	adds	r1, r4, r3
 802843a:	460b      	mov	r3, r1
 802843c:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
 8028440:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388
    int64_t f9f9_38 = f9   * (int64_t) f9_38;
 8028444:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8028448:	4618      	mov	r0, r3
 802844a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 802844e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8028452:	461a      	mov	r2, r3
 8028454:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8028458:	fb02 f501 	mul.w	r5, r2, r1
 802845c:	fb00 f403 	mul.w	r4, r0, r3
 8028460:	442c      	add	r4, r5
 8028462:	fba0 2302 	umull	r2, r3, r0, r2
 8028466:	18e1      	adds	r1, r4, r3
 8028468:	460b      	mov	r3, r1
 802846a:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
 802846e:	e9c7 23e0 	strd	r2, r3, [r7, #896]	; 0x380
    int64_t h0 = f0f0  + f1f9_76 + f2f8_38 + f3f7_76 + f4f6_38 + f5f5_38;
 8028472:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8028476:	e9d3 0100 	ldrd	r0, r1, [r3]
 802847a:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 802847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028482:	eb10 0802 	adds.w	r8, r0, r2
 8028486:	eb41 0903 	adc.w	r9, r1, r3
 802848a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 802848e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028492:	eb18 0a02 	adds.w	sl, r8, r2
 8028496:	eb49 0b03 	adc.w	fp, r9, r3
 802849a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 802849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80284a2:	eb1a 0102 	adds.w	r1, sl, r2
 80284a6:	f8c7 12d0 	str.w	r1, [r7, #720]	; 0x2d0
 80284aa:	eb4b 0303 	adc.w	r3, fp, r3
 80284ae:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 80284b2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80284b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80284ba:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 80284be:	4621      	mov	r1, r4
 80284c0:	1889      	adds	r1, r1, r2
 80284c2:	f8c7 12c8 	str.w	r1, [r7, #712]	; 0x2c8
 80284c6:	4629      	mov	r1, r5
 80284c8:	eb43 0101 	adc.w	r1, r3, r1
 80284cc:	f8c7 12cc 	str.w	r1, [r7, #716]	; 0x2cc
 80284d0:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 80284d4:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	; 0x2c8
 80284d8:	4621      	mov	r1, r4
 80284da:	1851      	adds	r1, r2, r1
 80284dc:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 80284e0:	4629      	mov	r1, r5
 80284e2:	eb43 0101 	adc.w	r1, r3, r1
 80284e6:	f8c7 1164 	str.w	r1, [r7, #356]	; 0x164
 80284ea:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 80284ee:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    int64_t h1 = f0f1_2 + f2f9_38 + f3f8_38 + f4f7_38 + f5f6_38;
 80284f2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80284f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80284fa:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80284fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028502:	1884      	adds	r4, r0, r2
 8028504:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 8028508:	eb41 0303 	adc.w	r3, r1, r3
 802850c:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8028510:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8028514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028518:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 802851c:	4621      	mov	r1, r4
 802851e:	1889      	adds	r1, r1, r2
 8028520:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 8028524:	4629      	mov	r1, r5
 8028526:	eb43 0101 	adc.w	r1, r3, r1
 802852a:	f8c7 12bc 	str.w	r1, [r7, #700]	; 0x2bc
 802852e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8028532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028536:	e9d7 45ae 	ldrd	r4, r5, [r7, #696]	; 0x2b8
 802853a:	4621      	mov	r1, r4
 802853c:	1889      	adds	r1, r1, r2
 802853e:	f8c7 12b0 	str.w	r1, [r7, #688]	; 0x2b0
 8028542:	4629      	mov	r1, r5
 8028544:	eb43 0101 	adc.w	r1, r3, r1
 8028548:	f8c7 12b4 	str.w	r1, [r7, #692]	; 0x2b4
 802854c:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 8028550:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 8028554:	4621      	mov	r1, r4
 8028556:	1851      	adds	r1, r2, r1
 8028558:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 802855c:	4629      	mov	r1, r5
 802855e:	eb43 0101 	adc.w	r1, r3, r1
 8028562:	f8c7 115c 	str.w	r1, [r7, #348]	; 0x15c
 8028566:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 802856a:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    int64_t h2 = f0f2_2 + f1f1_2 + f3f9_76 + f4f8_38 + f5f7_76 + f6f6_19;
 802856e:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8028572:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028576:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 802857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802857e:	1884      	adds	r4, r0, r2
 8028580:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 8028584:	eb41 0303 	adc.w	r3, r1, r3
 8028588:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 802858c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8028590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028594:	e9d7 45aa 	ldrd	r4, r5, [r7, #680]	; 0x2a8
 8028598:	4621      	mov	r1, r4
 802859a:	1889      	adds	r1, r1, r2
 802859c:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 80285a0:	4629      	mov	r1, r5
 80285a2:	eb43 0101 	adc.w	r1, r3, r1
 80285a6:	f8c7 12a4 	str.w	r1, [r7, #676]	; 0x2a4
 80285aa:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80285ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80285b2:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	; 0x2a0
 80285b6:	4621      	mov	r1, r4
 80285b8:	1889      	adds	r1, r1, r2
 80285ba:	f8c7 1298 	str.w	r1, [r7, #664]	; 0x298
 80285be:	4629      	mov	r1, r5
 80285c0:	eb43 0101 	adc.w	r1, r3, r1
 80285c4:	f8c7 129c 	str.w	r1, [r7, #668]	; 0x29c
 80285c8:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 80285cc:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 80285d0:	4621      	mov	r1, r4
 80285d2:	1889      	adds	r1, r1, r2
 80285d4:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 80285d8:	4629      	mov	r1, r5
 80285da:	eb43 0101 	adc.w	r1, r3, r1
 80285de:	f8c7 1294 	str.w	r1, [r7, #660]	; 0x294
 80285e2:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 80285e6:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	; 0x290
 80285ea:	4621      	mov	r1, r4
 80285ec:	1851      	adds	r1, r2, r1
 80285ee:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 80285f2:	4629      	mov	r1, r5
 80285f4:	eb43 0101 	adc.w	r1, r3, r1
 80285f8:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 80285fc:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8028600:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    int64_t h3 = f0f3_2 + f1f2_2 + f4f9_38 + f5f8_38 + f6f7_38;
 8028604:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8028608:	e9d3 0100 	ldrd	r0, r1, [r3]
 802860c:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8028610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028614:	1884      	adds	r4, r0, r2
 8028616:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 802861a:	eb41 0303 	adc.w	r3, r1, r3
 802861e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8028622:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 8028626:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 802862a:	4621      	mov	r1, r4
 802862c:	1889      	adds	r1, r1, r2
 802862e:	f8c7 1280 	str.w	r1, [r7, #640]	; 0x280
 8028632:	4629      	mov	r1, r5
 8028634:	eb43 0101 	adc.w	r1, r3, r1
 8028638:	f8c7 1284 	str.w	r1, [r7, #644]	; 0x284
 802863c:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 8028640:	e9d7 45a0 	ldrd	r4, r5, [r7, #640]	; 0x280
 8028644:	4621      	mov	r1, r4
 8028646:	1889      	adds	r1, r1, r2
 8028648:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 802864c:	4629      	mov	r1, r5
 802864e:	eb43 0101 	adc.w	r1, r3, r1
 8028652:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 8028656:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 802865a:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	; 0x278
 802865e:	4621      	mov	r1, r4
 8028660:	1851      	adds	r1, r2, r1
 8028662:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8028666:	4629      	mov	r1, r5
 8028668:	eb43 0101 	adc.w	r1, r3, r1
 802866c:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8028670:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 8028674:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    int64_t h4 = f0f4_2 + f1f3_4 + f2f2   + f5f9_76 + f6f8_38 + f7f7_38;
 8028678:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 802867c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028680:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8028684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028688:	1884      	adds	r4, r0, r2
 802868a:	f8c7 4270 	str.w	r4, [r7, #624]	; 0x270
 802868e:	eb41 0303 	adc.w	r3, r1, r3
 8028692:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8028696:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 802869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802869e:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 80286a2:	4621      	mov	r1, r4
 80286a4:	1889      	adds	r1, r1, r2
 80286a6:	f8c7 1268 	str.w	r1, [r7, #616]	; 0x268
 80286aa:	4629      	mov	r1, r5
 80286ac:	eb43 0101 	adc.w	r1, r3, r1
 80286b0:	f8c7 126c 	str.w	r1, [r7, #620]	; 0x26c
 80286b4:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 80286b8:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 80286bc:	4621      	mov	r1, r4
 80286be:	1889      	adds	r1, r1, r2
 80286c0:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 80286c4:	4629      	mov	r1, r5
 80286c6:	eb43 0101 	adc.w	r1, r3, r1
 80286ca:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 80286ce:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 80286d2:	e9d7 4598 	ldrd	r4, r5, [r7, #608]	; 0x260
 80286d6:	4621      	mov	r1, r4
 80286d8:	1889      	adds	r1, r1, r2
 80286da:	f8c7 1258 	str.w	r1, [r7, #600]	; 0x258
 80286de:	4629      	mov	r1, r5
 80286e0:	eb43 0101 	adc.w	r1, r3, r1
 80286e4:	f8c7 125c 	str.w	r1, [r7, #604]	; 0x25c
 80286e8:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 80286ec:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 80286f0:	4621      	mov	r1, r4
 80286f2:	1851      	adds	r1, r2, r1
 80286f4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80286f8:	4629      	mov	r1, r5
 80286fa:	eb43 0101 	adc.w	r1, r3, r1
 80286fe:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8028702:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8028706:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    int64_t h5 = f0f5_2 + f1f4_2 + f2f3_2 + f6f9_38 + f7f8_38;
 802870a:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 802870e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028712:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8028716:	e9d3 2300 	ldrd	r2, r3, [r3]
 802871a:	1884      	adds	r4, r0, r2
 802871c:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 8028720:	eb41 0303 	adc.w	r3, r1, r3
 8028724:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8028728:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 802872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028730:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	; 0x250
 8028734:	4621      	mov	r1, r4
 8028736:	1889      	adds	r1, r1, r2
 8028738:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 802873c:	4629      	mov	r1, r5
 802873e:	eb43 0101 	adc.w	r1, r3, r1
 8028742:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 8028746:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 802874a:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 802874e:	4621      	mov	r1, r4
 8028750:	1889      	adds	r1, r1, r2
 8028752:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 8028756:	4629      	mov	r1, r5
 8028758:	eb43 0101 	adc.w	r1, r3, r1
 802875c:	f8c7 1244 	str.w	r1, [r7, #580]	; 0x244
 8028760:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 8028764:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 8028768:	4621      	mov	r1, r4
 802876a:	1851      	adds	r1, r2, r1
 802876c:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8028770:	4629      	mov	r1, r5
 8028772:	eb43 0101 	adc.w	r1, r3, r1
 8028776:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 802877a:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 802877e:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    int64_t h6 = f0f6_2 + f1f5_4 + f2f4_2 + f3f3_2 + f7f9_76 + f8f8_19;
 8028782:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8028786:	e9d3 0100 	ldrd	r0, r1, [r3]
 802878a:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 802878e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028792:	1884      	adds	r4, r0, r2
 8028794:	f8c7 4238 	str.w	r4, [r7, #568]	; 0x238
 8028798:	eb41 0303 	adc.w	r3, r1, r3
 802879c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80287a0:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80287a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80287a8:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 80287ac:	4621      	mov	r1, r4
 80287ae:	1889      	adds	r1, r1, r2
 80287b0:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 80287b4:	4629      	mov	r1, r5
 80287b6:	eb43 0101 	adc.w	r1, r3, r1
 80287ba:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 80287be:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80287c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80287c6:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	; 0x230
 80287ca:	4621      	mov	r1, r4
 80287cc:	1889      	adds	r1, r1, r2
 80287ce:	f8c7 1228 	str.w	r1, [r7, #552]	; 0x228
 80287d2:	4629      	mov	r1, r5
 80287d4:	eb43 0101 	adc.w	r1, r3, r1
 80287d8:	f8c7 122c 	str.w	r1, [r7, #556]	; 0x22c
 80287dc:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 80287e0:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 80287e4:	4621      	mov	r1, r4
 80287e6:	1889      	adds	r1, r1, r2
 80287e8:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 80287ec:	4629      	mov	r1, r5
 80287ee:	eb43 0101 	adc.w	r1, r3, r1
 80287f2:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 80287f6:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 80287fa:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	; 0x220
 80287fe:	4621      	mov	r1, r4
 8028800:	1851      	adds	r1, r2, r1
 8028802:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8028806:	4629      	mov	r1, r5
 8028808:	eb43 0101 	adc.w	r1, r3, r1
 802880c:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8028810:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8028814:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    int64_t h7 = f0f7_2 + f1f6_2 + f2f5_2 + f3f4_2 + f8f9_38;
 8028818:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 802881c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028820:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8028824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028828:	1884      	adds	r4, r0, r2
 802882a:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 802882e:	eb41 0303 	adc.w	r3, r1, r3
 8028832:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8028836:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 802883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802883e:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8028842:	4621      	mov	r1, r4
 8028844:	1889      	adds	r1, r1, r2
 8028846:	f8c7 1210 	str.w	r1, [r7, #528]	; 0x210
 802884a:	4629      	mov	r1, r5
 802884c:	eb43 0101 	adc.w	r1, r3, r1
 8028850:	f8c7 1214 	str.w	r1, [r7, #532]	; 0x214
 8028854:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8028858:	e9d3 2300 	ldrd	r2, r3, [r3]
 802885c:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 8028860:	4621      	mov	r1, r4
 8028862:	1889      	adds	r1, r1, r2
 8028864:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8028868:	4629      	mov	r1, r5
 802886a:	eb43 0101 	adc.w	r1, r3, r1
 802886e:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 8028872:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8028876:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 802887a:	4621      	mov	r1, r4
 802887c:	1851      	adds	r1, r2, r1
 802887e:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8028882:	4629      	mov	r1, r5
 8028884:	eb43 0101 	adc.w	r1, r3, r1
 8028888:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 802888c:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8028890:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    int64_t h8 = f0f8_2 + f1f7_4 + f2f6_2 + f3f5_4 + f4f4   + f9f9_38;
 8028894:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8028898:	e9d3 0100 	ldrd	r0, r1, [r3]
 802889c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80288a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80288a4:	1884      	adds	r4, r0, r2
 80288a6:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 80288aa:	eb41 0303 	adc.w	r3, r1, r3
 80288ae:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80288b2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80288b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80288ba:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 80288be:	4621      	mov	r1, r4
 80288c0:	1889      	adds	r1, r1, r2
 80288c2:	f8c7 11f8 	str.w	r1, [r7, #504]	; 0x1f8
 80288c6:	4629      	mov	r1, r5
 80288c8:	eb43 0101 	adc.w	r1, r3, r1
 80288cc:	f8c7 11fc 	str.w	r1, [r7, #508]	; 0x1fc
 80288d0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80288d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80288d8:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	; 0x1f8
 80288dc:	4621      	mov	r1, r4
 80288de:	1889      	adds	r1, r1, r2
 80288e0:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 80288e4:	4629      	mov	r1, r5
 80288e6:	eb43 0101 	adc.w	r1, r3, r1
 80288ea:	f8c7 11f4 	str.w	r1, [r7, #500]	; 0x1f4
 80288ee:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80288f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80288f6:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80288fa:	4621      	mov	r1, r4
 80288fc:	1889      	adds	r1, r1, r2
 80288fe:	f8c7 11e8 	str.w	r1, [r7, #488]	; 0x1e8
 8028902:	4629      	mov	r1, r5
 8028904:	eb43 0101 	adc.w	r1, r3, r1
 8028908:	f8c7 11ec 	str.w	r1, [r7, #492]	; 0x1ec
 802890c:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 8028910:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8028914:	4621      	mov	r1, r4
 8028916:	1851      	adds	r1, r2, r1
 8028918:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 802891c:	4629      	mov	r1, r5
 802891e:	eb43 0101 	adc.w	r1, r3, r1
 8028922:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8028926:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 802892a:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    int64_t h9 = f0f9_2 + f1f8_2 + f2f7_2 + f3f6_2 + f4f5_2;
 802892e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8028932:	e9d3 0100 	ldrd	r0, r1, [r3]
 8028936:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 802893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802893e:	1884      	adds	r4, r0, r2
 8028940:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 8028944:	eb41 0303 	adc.w	r3, r1, r3
 8028948:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 802894c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8028950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028954:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8028958:	4621      	mov	r1, r4
 802895a:	1889      	adds	r1, r1, r2
 802895c:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 8028960:	4629      	mov	r1, r5
 8028962:	eb43 0101 	adc.w	r1, r3, r1
 8028966:	f8c7 11dc 	str.w	r1, [r7, #476]	; 0x1dc
 802896a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 802896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028972:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 8028976:	4621      	mov	r1, r4
 8028978:	1889      	adds	r1, r1, r2
 802897a:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
 802897e:	4629      	mov	r1, r5
 8028980:	eb43 0101 	adc.w	r1, r3, r1
 8028984:	f8c7 11d4 	str.w	r1, [r7, #468]	; 0x1d4
 8028988:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 802898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028990:	e9d7 4574 	ldrd	r4, r5, [r7, #464]	; 0x1d0
 8028994:	4621      	mov	r1, r4
 8028996:	1851      	adds	r1, r2, r1
 8028998:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 802899c:	4629      	mov	r1, r5
 802899e:	eb43 0101 	adc.w	r1, r3, r1
 80289a2:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 80289a6:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 80289aa:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    int64_t carry5;
    int64_t carry6;
    int64_t carry7;
    int64_t carry8;
    int64_t carry9;
    h0 += h0;
 80289ae:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 80289b2:	1891      	adds	r1, r2, r2
 80289b4:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80289b8:	415b      	adcs	r3, r3
 80289ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80289be:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80289c2:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    h1 += h1;
 80289c6:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 80289ca:	1891      	adds	r1, r2, r2
 80289cc:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80289d0:	415b      	adcs	r3, r3
 80289d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80289d6:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 80289da:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    h2 += h2;
 80289de:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 80289e2:	1891      	adds	r1, r2, r2
 80289e4:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 80289e8:	415b      	adcs	r3, r3
 80289ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80289ee:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80289f2:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    h3 += h3;
 80289f6:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 80289fa:	1891      	adds	r1, r2, r2
 80289fc:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8028a00:	415b      	adcs	r3, r3
 8028a02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8028a06:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8028a0a:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    h4 += h4;
 8028a0e:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8028a12:	1891      	adds	r1, r2, r2
 8028a14:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8028a18:	415b      	adcs	r3, r3
 8028a1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8028a1e:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8028a22:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    h5 += h5;
 8028a26:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8028a2a:	1891      	adds	r1, r2, r2
 8028a2c:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8028a30:	415b      	adcs	r3, r3
 8028a32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8028a36:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8028a3a:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    h6 += h6;
 8028a3e:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8028a42:	1891      	adds	r1, r2, r2
 8028a44:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8028a48:	415b      	adcs	r3, r3
 8028a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8028a4e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8028a52:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    h7 += h7;
 8028a56:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8028a5a:	1891      	adds	r1, r2, r2
 8028a5c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8028a60:	415b      	adcs	r3, r3
 8028a62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8028a66:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 8028a6a:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    h8 += h8;
 8028a6e:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 8028a72:	1891      	adds	r1, r2, r2
 8028a74:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8028a78:	415b      	adcs	r3, r3
 8028a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8028a7e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8028a82:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    h9 += h9;
 8028a86:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 8028a8a:	1891      	adds	r1, r2, r2
 8028a8c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8028a90:	415b      	adcs	r3, r3
 8028a92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8028a96:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8028a9a:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8028a9e:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8028aa2:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8028aa6:	f8c7 11c8 	str.w	r1, [r7, #456]	; 0x1c8
 8028aaa:	f143 0300 	adc.w	r3, r3, #0
 8028aae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8028ab2:	f04f 0200 	mov.w	r2, #0
 8028ab6:	f04f 0300 	mov.w	r3, #0
 8028aba:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 8028abe:	4621      	mov	r1, r4
 8028ac0:	0e8a      	lsrs	r2, r1, #26
 8028ac2:	4629      	mov	r1, r5
 8028ac4:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8028ac8:	4629      	mov	r1, r5
 8028aca:	168b      	asrs	r3, r1, #26
 8028acc:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
    h1 += carry0;
 8028ad0:	e9d7 01dc 	ldrd	r0, r1, [r7, #880]	; 0x370
 8028ad4:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8028ad8:	1884      	adds	r4, r0, r2
 8028ada:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8028ade:	eb41 0303 	adc.w	r3, r1, r3
 8028ae2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8028ae6:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8028aea:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    h0 -= carry0 << 26;
 8028aee:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8028af2:	f04f 0000 	mov.w	r0, #0
 8028af6:	f04f 0100 	mov.w	r1, #0
 8028afa:	0699      	lsls	r1, r3, #26
 8028afc:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8028b00:	0690      	lsls	r0, r2, #26
 8028b02:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8028b06:	1a14      	subs	r4, r2, r0
 8028b08:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8028b0c:	eb63 0301 	sbc.w	r3, r3, r1
 8028b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8028b14:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8028b18:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8028b1c:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8028b20:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8028b24:	f8c7 11c0 	str.w	r1, [r7, #448]	; 0x1c0
 8028b28:	f143 0300 	adc.w	r3, r3, #0
 8028b2c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8028b30:	f04f 0200 	mov.w	r2, #0
 8028b34:	f04f 0300 	mov.w	r3, #0
 8028b38:	e9d7 4570 	ldrd	r4, r5, [r7, #448]	; 0x1c0
 8028b3c:	4621      	mov	r1, r4
 8028b3e:	0e8a      	lsrs	r2, r1, #26
 8028b40:	4629      	mov	r1, r5
 8028b42:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8028b46:	4629      	mov	r1, r5
 8028b48:	168b      	asrs	r3, r1, #26
 8028b4a:	e9c7 23c8 	strd	r2, r3, [r7, #800]	; 0x320
    h5 += carry4;
 8028b4e:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	; 0x350
 8028b52:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8028b56:	1884      	adds	r4, r0, r2
 8028b58:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8028b5c:	eb41 0303 	adc.w	r3, r1, r3
 8028b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8028b64:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8028b68:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    h4 -= carry4 << 26;
 8028b6c:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8028b70:	f04f 0000 	mov.w	r0, #0
 8028b74:	f04f 0100 	mov.w	r1, #0
 8028b78:	0699      	lsls	r1, r3, #26
 8028b7a:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8028b7e:	0690      	lsls	r0, r2, #26
 8028b80:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8028b84:	1a14      	subs	r4, r2, r0
 8028b86:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8028b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8028b8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8028b92:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8028b96:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    carry1 = (h1 + (int64_t) (1 << 24)) >> 25;
 8028b9a:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8028b9e:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8028ba2:	f8c7 11b8 	str.w	r1, [r7, #440]	; 0x1b8
 8028ba6:	f143 0300 	adc.w	r3, r3, #0
 8028baa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8028bae:	f04f 0200 	mov.w	r2, #0
 8028bb2:	f04f 0300 	mov.w	r3, #0
 8028bb6:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8028bba:	4621      	mov	r1, r4
 8028bbc:	0e4a      	lsrs	r2, r1, #25
 8028bbe:	4629      	mov	r1, r5
 8028bc0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8028bc4:	4629      	mov	r1, r5
 8028bc6:	164b      	asrs	r3, r1, #25
 8028bc8:	e9c7 23c6 	strd	r2, r3, [r7, #792]	; 0x318
    h2 += carry1;
 8028bcc:	e9d7 01da 	ldrd	r0, r1, [r7, #872]	; 0x368
 8028bd0:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8028bd4:	1884      	adds	r4, r0, r2
 8028bd6:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8028bda:	eb41 0303 	adc.w	r3, r1, r3
 8028bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8028be2:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8028be6:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    h1 -= carry1 << 25;
 8028bea:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8028bee:	f04f 0000 	mov.w	r0, #0
 8028bf2:	f04f 0100 	mov.w	r1, #0
 8028bf6:	0659      	lsls	r1, r3, #25
 8028bf8:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8028bfc:	0650      	lsls	r0, r2, #25
 8028bfe:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8028c02:	1a14      	subs	r4, r2, r0
 8028c04:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8028c08:	eb63 0301 	sbc.w	r3, r3, r1
 8028c0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8028c10:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8028c14:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    carry5 = (h5 + (int64_t) (1 << 24)) >> 25;
 8028c18:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8028c1c:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8028c20:	f8c7 11b0 	str.w	r1, [r7, #432]	; 0x1b0
 8028c24:	f143 0300 	adc.w	r3, r3, #0
 8028c28:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8028c2c:	f04f 0200 	mov.w	r2, #0
 8028c30:	f04f 0300 	mov.w	r3, #0
 8028c34:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	; 0x1b0
 8028c38:	4621      	mov	r1, r4
 8028c3a:	0e4a      	lsrs	r2, r1, #25
 8028c3c:	4629      	mov	r1, r5
 8028c3e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8028c42:	4629      	mov	r1, r5
 8028c44:	164b      	asrs	r3, r1, #25
 8028c46:	e9c7 23c4 	strd	r2, r3, [r7, #784]	; 0x310
    h6 += carry5;
 8028c4a:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	; 0x348
 8028c4e:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8028c52:	1884      	adds	r4, r0, r2
 8028c54:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8028c58:	eb41 0303 	adc.w	r3, r1, r3
 8028c5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8028c60:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8028c64:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    h5 -= carry5 << 25;
 8028c68:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8028c6c:	f04f 0000 	mov.w	r0, #0
 8028c70:	f04f 0100 	mov.w	r1, #0
 8028c74:	0659      	lsls	r1, r3, #25
 8028c76:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8028c7a:	0650      	lsls	r0, r2, #25
 8028c7c:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8028c80:	1a14      	subs	r4, r2, r0
 8028c82:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8028c86:	eb63 0301 	sbc.w	r3, r3, r1
 8028c8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8028c8e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8028c92:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    carry2 = (h2 + (int64_t) (1 << 25)) >> 26;
 8028c96:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 8028c9a:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8028c9e:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 8028ca2:	f143 0300 	adc.w	r3, r3, #0
 8028ca6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8028caa:	f04f 0200 	mov.w	r2, #0
 8028cae:	f04f 0300 	mov.w	r3, #0
 8028cb2:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8028cb6:	4621      	mov	r1, r4
 8028cb8:	0e8a      	lsrs	r2, r1, #26
 8028cba:	4629      	mov	r1, r5
 8028cbc:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8028cc0:	4629      	mov	r1, r5
 8028cc2:	168b      	asrs	r3, r1, #26
 8028cc4:	e9c7 23c2 	strd	r2, r3, [r7, #776]	; 0x308
    h3 += carry2;
 8028cc8:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 8028ccc:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8028cd0:	1884      	adds	r4, r0, r2
 8028cd2:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8028cd6:	eb41 0303 	adc.w	r3, r1, r3
 8028cda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8028cde:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8028ce2:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    h2 -= carry2 << 26;
 8028ce6:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8028cea:	f04f 0000 	mov.w	r0, #0
 8028cee:	f04f 0100 	mov.w	r1, #0
 8028cf2:	0699      	lsls	r1, r3, #26
 8028cf4:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8028cf8:	0690      	lsls	r0, r2, #26
 8028cfa:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 8028cfe:	1a14      	subs	r4, r2, r0
 8028d00:	67bc      	str	r4, [r7, #120]	; 0x78
 8028d02:	eb63 0301 	sbc.w	r3, r3, r1
 8028d06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8028d08:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8028d0c:	e9c7 34da 	strd	r3, r4, [r7, #872]	; 0x368
    carry6 = (h6 + (int64_t) (1 << 25)) >> 26;
 8028d10:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8028d14:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8028d18:	f8c7 11a0 	str.w	r1, [r7, #416]	; 0x1a0
 8028d1c:	f143 0300 	adc.w	r3, r3, #0
 8028d20:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8028d24:	f04f 0200 	mov.w	r2, #0
 8028d28:	f04f 0300 	mov.w	r3, #0
 8028d2c:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8028d30:	4621      	mov	r1, r4
 8028d32:	0e8a      	lsrs	r2, r1, #26
 8028d34:	4629      	mov	r1, r5
 8028d36:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8028d3a:	4629      	mov	r1, r5
 8028d3c:	168b      	asrs	r3, r1, #26
 8028d3e:	e9c7 23c0 	strd	r2, r3, [r7, #768]	; 0x300
    h7 += carry6;
 8028d42:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8028d46:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8028d4a:	1884      	adds	r4, r0, r2
 8028d4c:	673c      	str	r4, [r7, #112]	; 0x70
 8028d4e:	eb41 0303 	adc.w	r3, r1, r3
 8028d52:	677b      	str	r3, [r7, #116]	; 0x74
 8028d54:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 8028d58:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    h6 -= carry6 << 26;
 8028d5c:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8028d60:	f04f 0000 	mov.w	r0, #0
 8028d64:	f04f 0100 	mov.w	r1, #0
 8028d68:	0699      	lsls	r1, r3, #26
 8028d6a:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8028d6e:	0690      	lsls	r0, r2, #26
 8028d70:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8028d74:	1a14      	subs	r4, r2, r0
 8028d76:	66bc      	str	r4, [r7, #104]	; 0x68
 8028d78:	eb63 0301 	sbc.w	r3, r3, r1
 8028d7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8028d7e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8028d82:	e9c7 34d2 	strd	r3, r4, [r7, #840]	; 0x348
    carry3 = (h3 + (int64_t) (1 << 24)) >> 25;
 8028d86:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8028d8a:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8028d8e:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 8028d92:	f143 0300 	adc.w	r3, r3, #0
 8028d96:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8028d9a:	f04f 0200 	mov.w	r2, #0
 8028d9e:	f04f 0300 	mov.w	r3, #0
 8028da2:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 8028da6:	4621      	mov	r1, r4
 8028da8:	0e4a      	lsrs	r2, r1, #25
 8028daa:	4629      	mov	r1, r5
 8028dac:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8028db0:	4629      	mov	r1, r5
 8028db2:	164b      	asrs	r3, r1, #25
 8028db4:	e9c7 23be 	strd	r2, r3, [r7, #760]	; 0x2f8
    h4 += carry3;
 8028db8:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	; 0x358
 8028dbc:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8028dc0:	1884      	adds	r4, r0, r2
 8028dc2:	663c      	str	r4, [r7, #96]	; 0x60
 8028dc4:	eb41 0303 	adc.w	r3, r1, r3
 8028dc8:	667b      	str	r3, [r7, #100]	; 0x64
 8028dca:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8028dce:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    h3 -= carry3 << 25;
 8028dd2:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8028dd6:	f04f 0000 	mov.w	r0, #0
 8028dda:	f04f 0100 	mov.w	r1, #0
 8028dde:	0659      	lsls	r1, r3, #25
 8028de0:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8028de4:	0650      	lsls	r0, r2, #25
 8028de6:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8028dea:	1a14      	subs	r4, r2, r0
 8028dec:	65bc      	str	r4, [r7, #88]	; 0x58
 8028dee:	eb63 0301 	sbc.w	r3, r3, r1
 8028df2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8028df4:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8028df8:	e9c7 34d8 	strd	r3, r4, [r7, #864]	; 0x360
    carry7 = (h7 + (int64_t) (1 << 24)) >> 25;
 8028dfc:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8028e00:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8028e04:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8028e08:	f143 0300 	adc.w	r3, r3, #0
 8028e0c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8028e10:	f04f 0200 	mov.w	r2, #0
 8028e14:	f04f 0300 	mov.w	r3, #0
 8028e18:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8028e1c:	4621      	mov	r1, r4
 8028e1e:	0e4a      	lsrs	r2, r1, #25
 8028e20:	4629      	mov	r1, r5
 8028e22:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8028e26:	4629      	mov	r1, r5
 8028e28:	164b      	asrs	r3, r1, #25
 8028e2a:	e9c7 23bc 	strd	r2, r3, [r7, #752]	; 0x2f0
    h8 += carry7;
 8028e2e:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 8028e32:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8028e36:	1884      	adds	r4, r0, r2
 8028e38:	653c      	str	r4, [r7, #80]	; 0x50
 8028e3a:	eb41 0303 	adc.w	r3, r1, r3
 8028e3e:	657b      	str	r3, [r7, #84]	; 0x54
 8028e40:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8028e44:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    h7 -= carry7 << 25;
 8028e48:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8028e4c:	f04f 0000 	mov.w	r0, #0
 8028e50:	f04f 0100 	mov.w	r1, #0
 8028e54:	0659      	lsls	r1, r3, #25
 8028e56:	ea41 11d2 	orr.w	r1, r1, r2, lsr #7
 8028e5a:	0650      	lsls	r0, r2, #25
 8028e5c:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8028e60:	1a14      	subs	r4, r2, r0
 8028e62:	64bc      	str	r4, [r7, #72]	; 0x48
 8028e64:	eb63 0301 	sbc.w	r3, r3, r1
 8028e68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8028e6a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8028e6e:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
    carry4 = (h4 + (int64_t) (1 << 25)) >> 26;
 8028e72:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8028e76:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8028e7a:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8028e7e:	f143 0300 	adc.w	r3, r3, #0
 8028e82:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8028e86:	f04f 0200 	mov.w	r2, #0
 8028e8a:	f04f 0300 	mov.w	r3, #0
 8028e8e:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8028e92:	4621      	mov	r1, r4
 8028e94:	0e8a      	lsrs	r2, r1, #26
 8028e96:	4629      	mov	r1, r5
 8028e98:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8028e9c:	4629      	mov	r1, r5
 8028e9e:	168b      	asrs	r3, r1, #26
 8028ea0:	e9c7 23c8 	strd	r2, r3, [r7, #800]	; 0x320
    h5 += carry4;
 8028ea4:	e9d7 01d4 	ldrd	r0, r1, [r7, #848]	; 0x350
 8028ea8:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8028eac:	1884      	adds	r4, r0, r2
 8028eae:	643c      	str	r4, [r7, #64]	; 0x40
 8028eb0:	eb41 0303 	adc.w	r3, r1, r3
 8028eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8028eb6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8028eba:	e9c7 34d4 	strd	r3, r4, [r7, #848]	; 0x350
    h4 -= carry4 << 26;
 8028ebe:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8028ec2:	f04f 0000 	mov.w	r0, #0
 8028ec6:	f04f 0100 	mov.w	r1, #0
 8028eca:	0699      	lsls	r1, r3, #26
 8028ecc:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8028ed0:	0690      	lsls	r0, r2, #26
 8028ed2:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8028ed6:	1a14      	subs	r4, r2, r0
 8028ed8:	63bc      	str	r4, [r7, #56]	; 0x38
 8028eda:	eb63 0301 	sbc.w	r3, r3, r1
 8028ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8028ee0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8028ee4:	e9c7 34d6 	strd	r3, r4, [r7, #856]	; 0x358
    carry8 = (h8 + (int64_t) (1 << 25)) >> 26;
 8028ee8:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 8028eec:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 8028ef0:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
 8028ef4:	f143 0300 	adc.w	r3, r3, #0
 8028ef8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8028efc:	f04f 0200 	mov.w	r2, #0
 8028f00:	f04f 0300 	mov.w	r3, #0
 8028f04:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 8028f08:	4621      	mov	r1, r4
 8028f0a:	0e8a      	lsrs	r2, r1, #26
 8028f0c:	4629      	mov	r1, r5
 8028f0e:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 8028f12:	4629      	mov	r1, r5
 8028f14:	168b      	asrs	r3, r1, #26
 8028f16:	e9c7 23ba 	strd	r2, r3, [r7, #744]	; 0x2e8
    h9 += carry8;
 8028f1a:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 8028f1e:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8028f22:	1884      	adds	r4, r0, r2
 8028f24:	633c      	str	r4, [r7, #48]	; 0x30
 8028f26:	eb41 0303 	adc.w	r3, r1, r3
 8028f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8028f2c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8028f30:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    h8 -= carry8 << 26;
 8028f34:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8028f38:	f04f 0000 	mov.w	r0, #0
 8028f3c:	f04f 0100 	mov.w	r1, #0
 8028f40:	0699      	lsls	r1, r3, #26
 8028f42:	ea41 1192 	orr.w	r1, r1, r2, lsr #6
 8028f46:	0690      	lsls	r0, r2, #26
 8028f48:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 8028f4c:	1a14      	subs	r4, r2, r0
 8028f4e:	62bc      	str	r4, [r7, #40]	; 0x28
 8028f50:	eb63 0301 	sbc.w	r3, r3, r1
 8028f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028f56:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8028f5a:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
    carry9 = (h9 + (int64_t) (1 << 24)) >> 25;
 8028f5e:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 8028f62:	f112 7180 	adds.w	r1, r2, #16777216	; 0x1000000
 8028f66:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8028f6a:	f143 0300 	adc.w	r3, r3, #0
 8028f6e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8028f72:	f04f 0200 	mov.w	r2, #0
 8028f76:	f04f 0300 	mov.w	r3, #0
 8028f7a:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 8028f7e:	4621      	mov	r1, r4
 8028f80:	0e4a      	lsrs	r2, r1, #25
 8028f82:	4629      	mov	r1, r5
 8028f84:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8028f88:	4629      	mov	r1, r5
 8028f8a:	164b      	asrs	r3, r1, #25
 8028f8c:	e9c7 23b8 	strd	r2, r3, [r7, #736]	; 0x2e0
    h0 += carry9 * 19;
 8028f90:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 8028f94:	4622      	mov	r2, r4
 8028f96:	462b      	mov	r3, r5
 8028f98:	f04f 0000 	mov.w	r0, #0
 8028f9c:	f04f 0100 	mov.w	r1, #0
 8028fa0:	00d9      	lsls	r1, r3, #3
 8028fa2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8028fa6:	00d0      	lsls	r0, r2, #3
 8028fa8:	4602      	mov	r2, r0
 8028faa:	460b      	mov	r3, r1
 8028fac:	1912      	adds	r2, r2, r4
 8028fae:	eb45 0303 	adc.w	r3, r5, r3
 8028fb2:	1891      	adds	r1, r2, r2
 8028fb4:	6239      	str	r1, [r7, #32]
 8028fb6:	415b      	adcs	r3, r3
 8028fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8028fba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8028fbe:	1911      	adds	r1, r2, r4
 8028fc0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
 8028fc4:	416b      	adcs	r3, r5
 8028fc6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8028fca:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8028fce:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8028fd2:	4621      	mov	r1, r4
 8028fd4:	1851      	adds	r1, r2, r1
 8028fd6:	61b9      	str	r1, [r7, #24]
 8028fd8:	4629      	mov	r1, r5
 8028fda:	eb43 0101 	adc.w	r1, r3, r1
 8028fde:	61f9      	str	r1, [r7, #28]
 8028fe0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8028fe4:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    h9 -= carry9 << 25;
 8028fe8:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 8028fec:	f04f 0200 	mov.w	r2, #0
 8028ff0:	f04f 0300 	mov.w	r3, #0
 8028ff4:	064b      	lsls	r3, r1, #25
 8028ff6:	ea43 13d0 	orr.w	r3, r3, r0, lsr #7
 8028ffa:	0642      	lsls	r2, r0, #25
 8028ffc:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 8029000:	1a84      	subs	r4, r0, r2
 8029002:	613c      	str	r4, [r7, #16]
 8029004:	eb61 0303 	sbc.w	r3, r1, r3
 8029008:	617b      	str	r3, [r7, #20]
 802900a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 802900e:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
    carry0 = (h0 + (int64_t) (1 << 25)) >> 26;
 8029012:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8029016:	f112 7100 	adds.w	r1, r2, #33554432	; 0x2000000
 802901a:	f8c7 1168 	str.w	r1, [r7, #360]	; 0x168
 802901e:	f143 0300 	adc.w	r3, r3, #0
 8029022:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8029026:	f04f 0200 	mov.w	r2, #0
 802902a:	f04f 0300 	mov.w	r3, #0
 802902e:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8029032:	4621      	mov	r1, r4
 8029034:	0e8a      	lsrs	r2, r1, #26
 8029036:	4629      	mov	r1, r5
 8029038:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 802903c:	4629      	mov	r1, r5
 802903e:	168b      	asrs	r3, r1, #26
 8029040:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
    h1 += carry0;
 8029044:	e9d7 01dc 	ldrd	r0, r1, [r7, #880]	; 0x370
 8029048:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 802904c:	1884      	adds	r4, r0, r2
 802904e:	60bc      	str	r4, [r7, #8]
 8029050:	eb41 0303 	adc.w	r3, r1, r3
 8029054:	60fb      	str	r3, [r7, #12]
 8029056:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 802905a:	e9c7 34dc 	strd	r3, r4, [r7, #880]	; 0x370
    h0 -= carry0 << 26;
 802905e:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 8029062:	f04f 0200 	mov.w	r2, #0
 8029066:	f04f 0300 	mov.w	r3, #0
 802906a:	068b      	lsls	r3, r1, #26
 802906c:	ea43 1390 	orr.w	r3, r3, r0, lsr #6
 8029070:	0682      	lsls	r2, r0, #26
 8029072:	e9d7 01de 	ldrd	r0, r1, [r7, #888]	; 0x378
 8029076:	1a84      	subs	r4, r0, r2
 8029078:	603c      	str	r4, [r7, #0]
 802907a:	eb61 0303 	sbc.w	r3, r1, r3
 802907e:	607b      	str	r3, [r7, #4]
 8029080:	e9d7 3400 	ldrd	r3, r4, [r7]
 8029084:	e9c7 34de 	strd	r3, r4, [r7, #888]	; 0x378
    h[0] = (int32_t) h0;
 8029088:	f507 735e 	add.w	r3, r7, #888	; 0x378
 802908c:	681a      	ldr	r2, [r3, #0]
 802908e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8029092:	681b      	ldr	r3, [r3, #0]
 8029094:	601a      	str	r2, [r3, #0]
    h[1] = (int32_t) h1;
 8029096:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 802909a:	681b      	ldr	r3, [r3, #0]
 802909c:	3304      	adds	r3, #4
 802909e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80290a2:	6812      	ldr	r2, [r2, #0]
 80290a4:	601a      	str	r2, [r3, #0]
    h[2] = (int32_t) h2;
 80290a6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80290aa:	681b      	ldr	r3, [r3, #0]
 80290ac:	3308      	adds	r3, #8
 80290ae:	f507 725a 	add.w	r2, r7, #872	; 0x368
 80290b2:	6812      	ldr	r2, [r2, #0]
 80290b4:	601a      	str	r2, [r3, #0]
    h[3] = (int32_t) h3;
 80290b6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80290ba:	681b      	ldr	r3, [r3, #0]
 80290bc:	330c      	adds	r3, #12
 80290be:	f507 7258 	add.w	r2, r7, #864	; 0x360
 80290c2:	6812      	ldr	r2, [r2, #0]
 80290c4:	601a      	str	r2, [r3, #0]
    h[4] = (int32_t) h4;
 80290c6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80290ca:	681b      	ldr	r3, [r3, #0]
 80290cc:	3310      	adds	r3, #16
 80290ce:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80290d2:	6812      	ldr	r2, [r2, #0]
 80290d4:	601a      	str	r2, [r3, #0]
    h[5] = (int32_t) h5;
 80290d6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80290da:	681b      	ldr	r3, [r3, #0]
 80290dc:	3314      	adds	r3, #20
 80290de:	f507 7254 	add.w	r2, r7, #848	; 0x350
 80290e2:	6812      	ldr	r2, [r2, #0]
 80290e4:	601a      	str	r2, [r3, #0]
    h[6] = (int32_t) h6;
 80290e6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80290ea:	681b      	ldr	r3, [r3, #0]
 80290ec:	3318      	adds	r3, #24
 80290ee:	f507 7252 	add.w	r2, r7, #840	; 0x348
 80290f2:	6812      	ldr	r2, [r2, #0]
 80290f4:	601a      	str	r2, [r3, #0]
    h[7] = (int32_t) h7;
 80290f6:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 80290fa:	681b      	ldr	r3, [r3, #0]
 80290fc:	331c      	adds	r3, #28
 80290fe:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8029102:	6812      	ldr	r2, [r2, #0]
 8029104:	601a      	str	r2, [r3, #0]
    h[8] = (int32_t) h8;
 8029106:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 802910a:	681b      	ldr	r3, [r3, #0]
 802910c:	3320      	adds	r3, #32
 802910e:	f507 724e 	add.w	r2, r7, #824	; 0x338
 8029112:	6812      	ldr	r2, [r2, #0]
 8029114:	601a      	str	r2, [r3, #0]
    h[9] = (int32_t) h9;
 8029116:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 802911a:	681b      	ldr	r3, [r3, #0]
 802911c:	3324      	adds	r3, #36	; 0x24
 802911e:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8029122:	6812      	ldr	r2, [r2, #0]
 8029124:	601a      	str	r2, [r3, #0]
}
 8029126:	bf00      	nop
 8029128:	f207 579c 	addw	r7, r7, #1436	; 0x59c
 802912c:	46bd      	mov	sp, r7
 802912e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8029132:	4770      	bx	lr

08029134 <fe_sub>:

Postconditions:
   |h| bounded by 1.1*2^26,1.1*2^25,1.1*2^26,1.1*2^25,etc.
*/

void fe_sub(fe h, const fe f, const fe g) {
 8029134:	b480      	push	{r7}
 8029136:	b0a3      	sub	sp, #140	; 0x8c
 8029138:	af00      	add	r7, sp, #0
 802913a:	60f8      	str	r0, [r7, #12]
 802913c:	60b9      	str	r1, [r7, #8]
 802913e:	607a      	str	r2, [r7, #4]
    int32_t f0 = f[0];
 8029140:	68bb      	ldr	r3, [r7, #8]
 8029142:	681b      	ldr	r3, [r3, #0]
 8029144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    int32_t f1 = f[1];
 8029148:	68bb      	ldr	r3, [r7, #8]
 802914a:	685b      	ldr	r3, [r3, #4]
 802914c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int32_t f2 = f[2];
 8029150:	68bb      	ldr	r3, [r7, #8]
 8029152:	689b      	ldr	r3, [r3, #8]
 8029154:	67fb      	str	r3, [r7, #124]	; 0x7c
    int32_t f3 = f[3];
 8029156:	68bb      	ldr	r3, [r7, #8]
 8029158:	68db      	ldr	r3, [r3, #12]
 802915a:	67bb      	str	r3, [r7, #120]	; 0x78
    int32_t f4 = f[4];
 802915c:	68bb      	ldr	r3, [r7, #8]
 802915e:	691b      	ldr	r3, [r3, #16]
 8029160:	677b      	str	r3, [r7, #116]	; 0x74
    int32_t f5 = f[5];
 8029162:	68bb      	ldr	r3, [r7, #8]
 8029164:	695b      	ldr	r3, [r3, #20]
 8029166:	673b      	str	r3, [r7, #112]	; 0x70
    int32_t f6 = f[6];
 8029168:	68bb      	ldr	r3, [r7, #8]
 802916a:	699b      	ldr	r3, [r3, #24]
 802916c:	66fb      	str	r3, [r7, #108]	; 0x6c
    int32_t f7 = f[7];
 802916e:	68bb      	ldr	r3, [r7, #8]
 8029170:	69db      	ldr	r3, [r3, #28]
 8029172:	66bb      	str	r3, [r7, #104]	; 0x68
    int32_t f8 = f[8];
 8029174:	68bb      	ldr	r3, [r7, #8]
 8029176:	6a1b      	ldr	r3, [r3, #32]
 8029178:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t f9 = f[9];
 802917a:	68bb      	ldr	r3, [r7, #8]
 802917c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802917e:	663b      	str	r3, [r7, #96]	; 0x60
    int32_t g0 = g[0];
 8029180:	687b      	ldr	r3, [r7, #4]
 8029182:	681b      	ldr	r3, [r3, #0]
 8029184:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t g1 = g[1];
 8029186:	687b      	ldr	r3, [r7, #4]
 8029188:	685b      	ldr	r3, [r3, #4]
 802918a:	65bb      	str	r3, [r7, #88]	; 0x58
    int32_t g2 = g[2];
 802918c:	687b      	ldr	r3, [r7, #4]
 802918e:	689b      	ldr	r3, [r3, #8]
 8029190:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t g3 = g[3];
 8029192:	687b      	ldr	r3, [r7, #4]
 8029194:	68db      	ldr	r3, [r3, #12]
 8029196:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t g4 = g[4];
 8029198:	687b      	ldr	r3, [r7, #4]
 802919a:	691b      	ldr	r3, [r3, #16]
 802919c:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t g5 = g[5];
 802919e:	687b      	ldr	r3, [r7, #4]
 80291a0:	695b      	ldr	r3, [r3, #20]
 80291a2:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t g6 = g[6];
 80291a4:	687b      	ldr	r3, [r7, #4]
 80291a6:	699b      	ldr	r3, [r3, #24]
 80291a8:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t g7 = g[7];
 80291aa:	687b      	ldr	r3, [r7, #4]
 80291ac:	69db      	ldr	r3, [r3, #28]
 80291ae:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t g8 = g[8];
 80291b0:	687b      	ldr	r3, [r7, #4]
 80291b2:	6a1b      	ldr	r3, [r3, #32]
 80291b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t g9 = g[9];
 80291b6:	687b      	ldr	r3, [r7, #4]
 80291b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80291ba:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t h0 = f0 - g0;
 80291bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80291c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80291c2:	1ad3      	subs	r3, r2, r3
 80291c4:	637b      	str	r3, [r7, #52]	; 0x34
    int32_t h1 = f1 - g1;
 80291c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80291ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80291cc:	1ad3      	subs	r3, r2, r3
 80291ce:	633b      	str	r3, [r7, #48]	; 0x30
    int32_t h2 = f2 - g2;
 80291d0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80291d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80291d4:	1ad3      	subs	r3, r2, r3
 80291d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    int32_t h3 = f3 - g3;
 80291d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80291da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80291dc:	1ad3      	subs	r3, r2, r3
 80291de:	62bb      	str	r3, [r7, #40]	; 0x28
    int32_t h4 = f4 - g4;
 80291e0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80291e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80291e4:	1ad3      	subs	r3, r2, r3
 80291e6:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t h5 = f5 - g5;
 80291e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80291ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80291ec:	1ad3      	subs	r3, r2, r3
 80291ee:	623b      	str	r3, [r7, #32]
    int32_t h6 = f6 - g6;
 80291f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80291f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80291f4:	1ad3      	subs	r3, r2, r3
 80291f6:	61fb      	str	r3, [r7, #28]
    int32_t h7 = f7 - g7;
 80291f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80291fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80291fc:	1ad3      	subs	r3, r2, r3
 80291fe:	61bb      	str	r3, [r7, #24]
    int32_t h8 = f8 - g8;
 8029200:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8029202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029204:	1ad3      	subs	r3, r2, r3
 8029206:	617b      	str	r3, [r7, #20]
    int32_t h9 = f9 - g9;
 8029208:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 802920a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802920c:	1ad3      	subs	r3, r2, r3
 802920e:	613b      	str	r3, [r7, #16]

    h[0] = h0;
 8029210:	68fb      	ldr	r3, [r7, #12]
 8029212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029214:	601a      	str	r2, [r3, #0]
    h[1] = h1;
 8029216:	68fb      	ldr	r3, [r7, #12]
 8029218:	3304      	adds	r3, #4
 802921a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802921c:	601a      	str	r2, [r3, #0]
    h[2] = h2;
 802921e:	68fb      	ldr	r3, [r7, #12]
 8029220:	3308      	adds	r3, #8
 8029222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8029224:	601a      	str	r2, [r3, #0]
    h[3] = h3;
 8029226:	68fb      	ldr	r3, [r7, #12]
 8029228:	330c      	adds	r3, #12
 802922a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802922c:	601a      	str	r2, [r3, #0]
    h[4] = h4;
 802922e:	68fb      	ldr	r3, [r7, #12]
 8029230:	3310      	adds	r3, #16
 8029232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029234:	601a      	str	r2, [r3, #0]
    h[5] = h5;
 8029236:	68fb      	ldr	r3, [r7, #12]
 8029238:	3314      	adds	r3, #20
 802923a:	6a3a      	ldr	r2, [r7, #32]
 802923c:	601a      	str	r2, [r3, #0]
    h[6] = h6;
 802923e:	68fb      	ldr	r3, [r7, #12]
 8029240:	3318      	adds	r3, #24
 8029242:	69fa      	ldr	r2, [r7, #28]
 8029244:	601a      	str	r2, [r3, #0]
    h[7] = h7;
 8029246:	68fb      	ldr	r3, [r7, #12]
 8029248:	331c      	adds	r3, #28
 802924a:	69ba      	ldr	r2, [r7, #24]
 802924c:	601a      	str	r2, [r3, #0]
    h[8] = h8;
 802924e:	68fb      	ldr	r3, [r7, #12]
 8029250:	3320      	adds	r3, #32
 8029252:	697a      	ldr	r2, [r7, #20]
 8029254:	601a      	str	r2, [r3, #0]
    h[9] = h9;
 8029256:	68fb      	ldr	r3, [r7, #12]
 8029258:	3324      	adds	r3, #36	; 0x24
 802925a:	693a      	ldr	r2, [r7, #16]
 802925c:	601a      	str	r2, [r3, #0]
}
 802925e:	bf00      	nop
 8029260:	378c      	adds	r7, #140	; 0x8c
 8029262:	46bd      	mov	sp, r7
 8029264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029268:	4770      	bx	lr

0802926a <fe_tobytes>:

  Have q+2^(-255)x = 2^(-255)(h + 19 2^(-25) h9 + 2^(-1))
  so floor(2^(-255)(h + 19 2^(-25) h9 + 2^(-1))) = q.
*/

void fe_tobytes(unsigned char *s, const fe h) {
 802926a:	b480      	push	{r7}
 802926c:	b099      	sub	sp, #100	; 0x64
 802926e:	af00      	add	r7, sp, #0
 8029270:	6078      	str	r0, [r7, #4]
 8029272:	6039      	str	r1, [r7, #0]
    int32_t h0 = h[0];
 8029274:	683b      	ldr	r3, [r7, #0]
 8029276:	681b      	ldr	r3, [r3, #0]
 8029278:	65fb      	str	r3, [r7, #92]	; 0x5c
    int32_t h1 = h[1];
 802927a:	683b      	ldr	r3, [r7, #0]
 802927c:	685b      	ldr	r3, [r3, #4]
 802927e:	65bb      	str	r3, [r7, #88]	; 0x58
    int32_t h2 = h[2];
 8029280:	683b      	ldr	r3, [r7, #0]
 8029282:	689b      	ldr	r3, [r3, #8]
 8029284:	657b      	str	r3, [r7, #84]	; 0x54
    int32_t h3 = h[3];
 8029286:	683b      	ldr	r3, [r7, #0]
 8029288:	68db      	ldr	r3, [r3, #12]
 802928a:	653b      	str	r3, [r7, #80]	; 0x50
    int32_t h4 = h[4];
 802928c:	683b      	ldr	r3, [r7, #0]
 802928e:	691b      	ldr	r3, [r3, #16]
 8029290:	64fb      	str	r3, [r7, #76]	; 0x4c
    int32_t h5 = h[5];
 8029292:	683b      	ldr	r3, [r7, #0]
 8029294:	695b      	ldr	r3, [r3, #20]
 8029296:	64bb      	str	r3, [r7, #72]	; 0x48
    int32_t h6 = h[6];
 8029298:	683b      	ldr	r3, [r7, #0]
 802929a:	699b      	ldr	r3, [r3, #24]
 802929c:	647b      	str	r3, [r7, #68]	; 0x44
    int32_t h7 = h[7];
 802929e:	683b      	ldr	r3, [r7, #0]
 80292a0:	69db      	ldr	r3, [r3, #28]
 80292a2:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t h8 = h[8];
 80292a4:	683b      	ldr	r3, [r7, #0]
 80292a6:	6a1b      	ldr	r3, [r3, #32]
 80292a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    int32_t h9 = h[9];
 80292aa:	683b      	ldr	r3, [r7, #0]
 80292ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80292ae:	63bb      	str	r3, [r7, #56]	; 0x38
    int32_t carry5;
    int32_t carry6;
    int32_t carry7;
    int32_t carry8;
    int32_t carry9;
    q = (19 * h9 + (((int32_t) 1) << 24)) >> 25;
 80292b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80292b2:	4613      	mov	r3, r2
 80292b4:	00db      	lsls	r3, r3, #3
 80292b6:	4413      	add	r3, r2
 80292b8:	005b      	lsls	r3, r3, #1
 80292ba:	4413      	add	r3, r2
 80292bc:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80292c0:	165b      	asrs	r3, r3, #25
 80292c2:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h0 + q) >> 26;
 80292c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80292c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80292c8:	4413      	add	r3, r2
 80292ca:	169b      	asrs	r3, r3, #26
 80292cc:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h1 + q) >> 25;
 80292ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80292d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80292d2:	4413      	add	r3, r2
 80292d4:	165b      	asrs	r3, r3, #25
 80292d6:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h2 + q) >> 26;
 80292d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80292da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80292dc:	4413      	add	r3, r2
 80292de:	169b      	asrs	r3, r3, #26
 80292e0:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h3 + q) >> 25;
 80292e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80292e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80292e6:	4413      	add	r3, r2
 80292e8:	165b      	asrs	r3, r3, #25
 80292ea:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h4 + q) >> 26;
 80292ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80292ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80292f0:	4413      	add	r3, r2
 80292f2:	169b      	asrs	r3, r3, #26
 80292f4:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h5 + q) >> 25;
 80292f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80292f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80292fa:	4413      	add	r3, r2
 80292fc:	165b      	asrs	r3, r3, #25
 80292fe:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h6 + q) >> 26;
 8029300:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8029302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029304:	4413      	add	r3, r2
 8029306:	169b      	asrs	r3, r3, #26
 8029308:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h7 + q) >> 25;
 802930a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802930c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802930e:	4413      	add	r3, r2
 8029310:	165b      	asrs	r3, r3, #25
 8029312:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h8 + q) >> 26;
 8029314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8029316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029318:	4413      	add	r3, r2
 802931a:	169b      	asrs	r3, r3, #26
 802931c:	637b      	str	r3, [r7, #52]	; 0x34
    q = (h9 + q) >> 25;
 802931e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029322:	4413      	add	r3, r2
 8029324:	165b      	asrs	r3, r3, #25
 8029326:	637b      	str	r3, [r7, #52]	; 0x34
    /* Goal: Output h-(2^255-19)q, which is between 0 and 2^255-20. */
    h0 += 19 * q;
 8029328:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802932a:	4613      	mov	r3, r2
 802932c:	00db      	lsls	r3, r3, #3
 802932e:	4413      	add	r3, r2
 8029330:	005b      	lsls	r3, r3, #1
 8029332:	4413      	add	r3, r2
 8029334:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8029336:	4413      	add	r3, r2
 8029338:	65fb      	str	r3, [r7, #92]	; 0x5c
    /* Goal: Output h-2^255 q, which is between 0 and 2^255-20. */
    carry0 = h0 >> 26;
 802933a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802933c:	169b      	asrs	r3, r3, #26
 802933e:	633b      	str	r3, [r7, #48]	; 0x30
    h1 += carry0;
 8029340:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8029344:	4413      	add	r3, r2
 8029346:	65bb      	str	r3, [r7, #88]	; 0x58
    h0 -= carry0 << 26;
 8029348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802934a:	069b      	lsls	r3, r3, #26
 802934c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 802934e:	1ad3      	subs	r3, r2, r3
 8029350:	65fb      	str	r3, [r7, #92]	; 0x5c
    carry1 = h1 >> 25;
 8029352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029354:	165b      	asrs	r3, r3, #25
 8029356:	62fb      	str	r3, [r7, #44]	; 0x2c
    h2 += carry1;
 8029358:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802935a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802935c:	4413      	add	r3, r2
 802935e:	657b      	str	r3, [r7, #84]	; 0x54
    h1 -= carry1 << 25;
 8029360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029362:	065b      	lsls	r3, r3, #25
 8029364:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029366:	1ad3      	subs	r3, r2, r3
 8029368:	65bb      	str	r3, [r7, #88]	; 0x58
    carry2 = h2 >> 26;
 802936a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802936c:	169b      	asrs	r3, r3, #26
 802936e:	62bb      	str	r3, [r7, #40]	; 0x28
    h3 += carry2;
 8029370:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8029372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8029374:	4413      	add	r3, r2
 8029376:	653b      	str	r3, [r7, #80]	; 0x50
    h2 -= carry2 << 26;
 8029378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802937a:	069b      	lsls	r3, r3, #26
 802937c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802937e:	1ad3      	subs	r3, r2, r3
 8029380:	657b      	str	r3, [r7, #84]	; 0x54
    carry3 = h3 >> 25;
 8029382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029384:	165b      	asrs	r3, r3, #25
 8029386:	627b      	str	r3, [r7, #36]	; 0x24
    h4 += carry3;
 8029388:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802938c:	4413      	add	r3, r2
 802938e:	64fb      	str	r3, [r7, #76]	; 0x4c
    h3 -= carry3 << 25;
 8029390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029392:	065b      	lsls	r3, r3, #25
 8029394:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8029396:	1ad3      	subs	r3, r2, r3
 8029398:	653b      	str	r3, [r7, #80]	; 0x50
    carry4 = h4 >> 26;
 802939a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802939c:	169b      	asrs	r3, r3, #26
 802939e:	623b      	str	r3, [r7, #32]
    h5 += carry4;
 80293a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80293a2:	6a3b      	ldr	r3, [r7, #32]
 80293a4:	4413      	add	r3, r2
 80293a6:	64bb      	str	r3, [r7, #72]	; 0x48
    h4 -= carry4 << 26;
 80293a8:	6a3b      	ldr	r3, [r7, #32]
 80293aa:	069b      	lsls	r3, r3, #26
 80293ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80293ae:	1ad3      	subs	r3, r2, r3
 80293b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    carry5 = h5 >> 25;
 80293b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80293b4:	165b      	asrs	r3, r3, #25
 80293b6:	61fb      	str	r3, [r7, #28]
    h6 += carry5;
 80293b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80293ba:	69fb      	ldr	r3, [r7, #28]
 80293bc:	4413      	add	r3, r2
 80293be:	647b      	str	r3, [r7, #68]	; 0x44
    h5 -= carry5 << 25;
 80293c0:	69fb      	ldr	r3, [r7, #28]
 80293c2:	065b      	lsls	r3, r3, #25
 80293c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80293c6:	1ad3      	subs	r3, r2, r3
 80293c8:	64bb      	str	r3, [r7, #72]	; 0x48
    carry6 = h6 >> 26;
 80293ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80293cc:	169b      	asrs	r3, r3, #26
 80293ce:	61bb      	str	r3, [r7, #24]
    h7 += carry6;
 80293d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80293d2:	69bb      	ldr	r3, [r7, #24]
 80293d4:	4413      	add	r3, r2
 80293d6:	643b      	str	r3, [r7, #64]	; 0x40
    h6 -= carry6 << 26;
 80293d8:	69bb      	ldr	r3, [r7, #24]
 80293da:	069b      	lsls	r3, r3, #26
 80293dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80293de:	1ad3      	subs	r3, r2, r3
 80293e0:	647b      	str	r3, [r7, #68]	; 0x44
    carry7 = h7 >> 25;
 80293e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80293e4:	165b      	asrs	r3, r3, #25
 80293e6:	617b      	str	r3, [r7, #20]
    h8 += carry7;
 80293e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80293ea:	697b      	ldr	r3, [r7, #20]
 80293ec:	4413      	add	r3, r2
 80293ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    h7 -= carry7 << 25;
 80293f0:	697b      	ldr	r3, [r7, #20]
 80293f2:	065b      	lsls	r3, r3, #25
 80293f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80293f6:	1ad3      	subs	r3, r2, r3
 80293f8:	643b      	str	r3, [r7, #64]	; 0x40
    carry8 = h8 >> 26;
 80293fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80293fc:	169b      	asrs	r3, r3, #26
 80293fe:	613b      	str	r3, [r7, #16]
    h9 += carry8;
 8029400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029402:	693b      	ldr	r3, [r7, #16]
 8029404:	4413      	add	r3, r2
 8029406:	63bb      	str	r3, [r7, #56]	; 0x38
    h8 -= carry8 << 26;
 8029408:	693b      	ldr	r3, [r7, #16]
 802940a:	069b      	lsls	r3, r3, #26
 802940c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802940e:	1ad3      	subs	r3, r2, r3
 8029410:	63fb      	str	r3, [r7, #60]	; 0x3c
    carry9 = h9 >> 25;
 8029412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029414:	165b      	asrs	r3, r3, #25
 8029416:	60fb      	str	r3, [r7, #12]
    h9 -= carry9 << 25;
 8029418:	68fb      	ldr	r3, [r7, #12]
 802941a:	065b      	lsls	r3, r3, #25
 802941c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802941e:	1ad3      	subs	r3, r2, r3
 8029420:	63bb      	str	r3, [r7, #56]	; 0x38
    Goal: Output h0+...+2^255 h10-2^255 q, which is between 0 and 2^255-20.
    Have h0+...+2^230 h9 between 0 and 2^255-1;
    evidently 2^255 h10-2^255 q = 0.
    Goal: Output h0+...+2^230 h9.
    */
    s[0] = (unsigned char) (h0 >> 0);
 8029422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029424:	b2da      	uxtb	r2, r3
 8029426:	687b      	ldr	r3, [r7, #4]
 8029428:	701a      	strb	r2, [r3, #0]
    s[1] = (unsigned char) (h0 >> 8);
 802942a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802942c:	121a      	asrs	r2, r3, #8
 802942e:	687b      	ldr	r3, [r7, #4]
 8029430:	3301      	adds	r3, #1
 8029432:	b2d2      	uxtb	r2, r2
 8029434:	701a      	strb	r2, [r3, #0]
    s[2] = (unsigned char) (h0 >> 16);
 8029436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029438:	141a      	asrs	r2, r3, #16
 802943a:	687b      	ldr	r3, [r7, #4]
 802943c:	3302      	adds	r3, #2
 802943e:	b2d2      	uxtb	r2, r2
 8029440:	701a      	strb	r2, [r3, #0]
    s[3] = (unsigned char) ((h0 >> 24) | (h1 << 2));
 8029442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029444:	161b      	asrs	r3, r3, #24
 8029446:	b25a      	sxtb	r2, r3
 8029448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802944a:	009b      	lsls	r3, r3, #2
 802944c:	b25b      	sxtb	r3, r3
 802944e:	4313      	orrs	r3, r2
 8029450:	b25a      	sxtb	r2, r3
 8029452:	687b      	ldr	r3, [r7, #4]
 8029454:	3303      	adds	r3, #3
 8029456:	b2d2      	uxtb	r2, r2
 8029458:	701a      	strb	r2, [r3, #0]
    s[4] = (unsigned char) (h1 >> 6);
 802945a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802945c:	119a      	asrs	r2, r3, #6
 802945e:	687b      	ldr	r3, [r7, #4]
 8029460:	3304      	adds	r3, #4
 8029462:	b2d2      	uxtb	r2, r2
 8029464:	701a      	strb	r2, [r3, #0]
    s[5] = (unsigned char) (h1 >> 14);
 8029466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029468:	139a      	asrs	r2, r3, #14
 802946a:	687b      	ldr	r3, [r7, #4]
 802946c:	3305      	adds	r3, #5
 802946e:	b2d2      	uxtb	r2, r2
 8029470:	701a      	strb	r2, [r3, #0]
    s[6] = (unsigned char) ((h1 >> 22) | (h2 << 3));
 8029472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029474:	159b      	asrs	r3, r3, #22
 8029476:	b25a      	sxtb	r2, r3
 8029478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802947a:	00db      	lsls	r3, r3, #3
 802947c:	b25b      	sxtb	r3, r3
 802947e:	4313      	orrs	r3, r2
 8029480:	b25a      	sxtb	r2, r3
 8029482:	687b      	ldr	r3, [r7, #4]
 8029484:	3306      	adds	r3, #6
 8029486:	b2d2      	uxtb	r2, r2
 8029488:	701a      	strb	r2, [r3, #0]
    s[7] = (unsigned char) (h2 >> 5);
 802948a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802948c:	115a      	asrs	r2, r3, #5
 802948e:	687b      	ldr	r3, [r7, #4]
 8029490:	3307      	adds	r3, #7
 8029492:	b2d2      	uxtb	r2, r2
 8029494:	701a      	strb	r2, [r3, #0]
    s[8] = (unsigned char) (h2 >> 13);
 8029496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029498:	135a      	asrs	r2, r3, #13
 802949a:	687b      	ldr	r3, [r7, #4]
 802949c:	3308      	adds	r3, #8
 802949e:	b2d2      	uxtb	r2, r2
 80294a0:	701a      	strb	r2, [r3, #0]
    s[9] = (unsigned char) ((h2 >> 21) | (h3 << 5));
 80294a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80294a4:	155b      	asrs	r3, r3, #21
 80294a6:	b25a      	sxtb	r2, r3
 80294a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80294aa:	015b      	lsls	r3, r3, #5
 80294ac:	b25b      	sxtb	r3, r3
 80294ae:	4313      	orrs	r3, r2
 80294b0:	b25a      	sxtb	r2, r3
 80294b2:	687b      	ldr	r3, [r7, #4]
 80294b4:	3309      	adds	r3, #9
 80294b6:	b2d2      	uxtb	r2, r2
 80294b8:	701a      	strb	r2, [r3, #0]
    s[10] = (unsigned char) (h3 >> 3);
 80294ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80294bc:	10da      	asrs	r2, r3, #3
 80294be:	687b      	ldr	r3, [r7, #4]
 80294c0:	330a      	adds	r3, #10
 80294c2:	b2d2      	uxtb	r2, r2
 80294c4:	701a      	strb	r2, [r3, #0]
    s[11] = (unsigned char) (h3 >> 11);
 80294c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80294c8:	12da      	asrs	r2, r3, #11
 80294ca:	687b      	ldr	r3, [r7, #4]
 80294cc:	330b      	adds	r3, #11
 80294ce:	b2d2      	uxtb	r2, r2
 80294d0:	701a      	strb	r2, [r3, #0]
    s[12] = (unsigned char) ((h3 >> 19) | (h4 << 6));
 80294d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80294d4:	14db      	asrs	r3, r3, #19
 80294d6:	b25a      	sxtb	r2, r3
 80294d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80294da:	019b      	lsls	r3, r3, #6
 80294dc:	b25b      	sxtb	r3, r3
 80294de:	4313      	orrs	r3, r2
 80294e0:	b25a      	sxtb	r2, r3
 80294e2:	687b      	ldr	r3, [r7, #4]
 80294e4:	330c      	adds	r3, #12
 80294e6:	b2d2      	uxtb	r2, r2
 80294e8:	701a      	strb	r2, [r3, #0]
    s[13] = (unsigned char) (h4 >> 2);
 80294ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80294ec:	109a      	asrs	r2, r3, #2
 80294ee:	687b      	ldr	r3, [r7, #4]
 80294f0:	330d      	adds	r3, #13
 80294f2:	b2d2      	uxtb	r2, r2
 80294f4:	701a      	strb	r2, [r3, #0]
    s[14] = (unsigned char) (h4 >> 10);
 80294f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80294f8:	129a      	asrs	r2, r3, #10
 80294fa:	687b      	ldr	r3, [r7, #4]
 80294fc:	330e      	adds	r3, #14
 80294fe:	b2d2      	uxtb	r2, r2
 8029500:	701a      	strb	r2, [r3, #0]
    s[15] = (unsigned char) (h4 >> 18);
 8029502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029504:	149a      	asrs	r2, r3, #18
 8029506:	687b      	ldr	r3, [r7, #4]
 8029508:	330f      	adds	r3, #15
 802950a:	b2d2      	uxtb	r2, r2
 802950c:	701a      	strb	r2, [r3, #0]
    s[16] = (unsigned char) (h5 >> 0);
 802950e:	687b      	ldr	r3, [r7, #4]
 8029510:	3310      	adds	r3, #16
 8029512:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8029514:	b2d2      	uxtb	r2, r2
 8029516:	701a      	strb	r2, [r3, #0]
    s[17] = (unsigned char) (h5 >> 8);
 8029518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802951a:	121a      	asrs	r2, r3, #8
 802951c:	687b      	ldr	r3, [r7, #4]
 802951e:	3311      	adds	r3, #17
 8029520:	b2d2      	uxtb	r2, r2
 8029522:	701a      	strb	r2, [r3, #0]
    s[18] = (unsigned char) (h5 >> 16);
 8029524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029526:	141a      	asrs	r2, r3, #16
 8029528:	687b      	ldr	r3, [r7, #4]
 802952a:	3312      	adds	r3, #18
 802952c:	b2d2      	uxtb	r2, r2
 802952e:	701a      	strb	r2, [r3, #0]
    s[19] = (unsigned char) ((h5 >> 24) | (h6 << 1));
 8029530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029532:	161b      	asrs	r3, r3, #24
 8029534:	b25a      	sxtb	r2, r3
 8029536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029538:	005b      	lsls	r3, r3, #1
 802953a:	b25b      	sxtb	r3, r3
 802953c:	4313      	orrs	r3, r2
 802953e:	b25a      	sxtb	r2, r3
 8029540:	687b      	ldr	r3, [r7, #4]
 8029542:	3313      	adds	r3, #19
 8029544:	b2d2      	uxtb	r2, r2
 8029546:	701a      	strb	r2, [r3, #0]
    s[20] = (unsigned char) (h6 >> 7);
 8029548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802954a:	11da      	asrs	r2, r3, #7
 802954c:	687b      	ldr	r3, [r7, #4]
 802954e:	3314      	adds	r3, #20
 8029550:	b2d2      	uxtb	r2, r2
 8029552:	701a      	strb	r2, [r3, #0]
    s[21] = (unsigned char) (h6 >> 15);
 8029554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029556:	13da      	asrs	r2, r3, #15
 8029558:	687b      	ldr	r3, [r7, #4]
 802955a:	3315      	adds	r3, #21
 802955c:	b2d2      	uxtb	r2, r2
 802955e:	701a      	strb	r2, [r3, #0]
    s[22] = (unsigned char) ((h6 >> 23) | (h7 << 3));
 8029560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029562:	15db      	asrs	r3, r3, #23
 8029564:	b25a      	sxtb	r2, r3
 8029566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029568:	00db      	lsls	r3, r3, #3
 802956a:	b25b      	sxtb	r3, r3
 802956c:	4313      	orrs	r3, r2
 802956e:	b25a      	sxtb	r2, r3
 8029570:	687b      	ldr	r3, [r7, #4]
 8029572:	3316      	adds	r3, #22
 8029574:	b2d2      	uxtb	r2, r2
 8029576:	701a      	strb	r2, [r3, #0]
    s[23] = (unsigned char) (h7 >> 5);
 8029578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802957a:	115a      	asrs	r2, r3, #5
 802957c:	687b      	ldr	r3, [r7, #4]
 802957e:	3317      	adds	r3, #23
 8029580:	b2d2      	uxtb	r2, r2
 8029582:	701a      	strb	r2, [r3, #0]
    s[24] = (unsigned char) (h7 >> 13);
 8029584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029586:	135a      	asrs	r2, r3, #13
 8029588:	687b      	ldr	r3, [r7, #4]
 802958a:	3318      	adds	r3, #24
 802958c:	b2d2      	uxtb	r2, r2
 802958e:	701a      	strb	r2, [r3, #0]
    s[25] = (unsigned char) ((h7 >> 21) | (h8 << 4));
 8029590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029592:	155b      	asrs	r3, r3, #21
 8029594:	b25a      	sxtb	r2, r3
 8029596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029598:	011b      	lsls	r3, r3, #4
 802959a:	b25b      	sxtb	r3, r3
 802959c:	4313      	orrs	r3, r2
 802959e:	b25a      	sxtb	r2, r3
 80295a0:	687b      	ldr	r3, [r7, #4]
 80295a2:	3319      	adds	r3, #25
 80295a4:	b2d2      	uxtb	r2, r2
 80295a6:	701a      	strb	r2, [r3, #0]
    s[26] = (unsigned char) (h8 >> 4);
 80295a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80295aa:	111a      	asrs	r2, r3, #4
 80295ac:	687b      	ldr	r3, [r7, #4]
 80295ae:	331a      	adds	r3, #26
 80295b0:	b2d2      	uxtb	r2, r2
 80295b2:	701a      	strb	r2, [r3, #0]
    s[27] = (unsigned char) (h8 >> 12);
 80295b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80295b6:	131a      	asrs	r2, r3, #12
 80295b8:	687b      	ldr	r3, [r7, #4]
 80295ba:	331b      	adds	r3, #27
 80295bc:	b2d2      	uxtb	r2, r2
 80295be:	701a      	strb	r2, [r3, #0]
    s[28] = (unsigned char) ((h8 >> 20) | (h9 << 6));
 80295c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80295c2:	151b      	asrs	r3, r3, #20
 80295c4:	b25a      	sxtb	r2, r3
 80295c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80295c8:	019b      	lsls	r3, r3, #6
 80295ca:	b25b      	sxtb	r3, r3
 80295cc:	4313      	orrs	r3, r2
 80295ce:	b25a      	sxtb	r2, r3
 80295d0:	687b      	ldr	r3, [r7, #4]
 80295d2:	331c      	adds	r3, #28
 80295d4:	b2d2      	uxtb	r2, r2
 80295d6:	701a      	strb	r2, [r3, #0]
    s[29] = (unsigned char) (h9 >> 2);
 80295d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80295da:	109a      	asrs	r2, r3, #2
 80295dc:	687b      	ldr	r3, [r7, #4]
 80295de:	331d      	adds	r3, #29
 80295e0:	b2d2      	uxtb	r2, r2
 80295e2:	701a      	strb	r2, [r3, #0]
    s[30] = (unsigned char) (h9 >> 10);
 80295e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80295e6:	129a      	asrs	r2, r3, #10
 80295e8:	687b      	ldr	r3, [r7, #4]
 80295ea:	331e      	adds	r3, #30
 80295ec:	b2d2      	uxtb	r2, r2
 80295ee:	701a      	strb	r2, [r3, #0]
    s[31] = (unsigned char) (h9 >> 18);
 80295f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80295f2:	149a      	asrs	r2, r3, #18
 80295f4:	687b      	ldr	r3, [r7, #4]
 80295f6:	331f      	adds	r3, #31
 80295f8:	b2d2      	uxtb	r2, r2
 80295fa:	701a      	strb	r2, [r3, #0]
}
 80295fc:	bf00      	nop
 80295fe:	3764      	adds	r7, #100	; 0x64
 8029600:	46bd      	mov	sp, r7
 8029602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029606:	4770      	bx	lr

08029608 <ge_add>:

/*
r = p + q
*/

void ge_add(ge_p1p1 *r, const ge_p3 *p, const ge_cached *q) {
 8029608:	b580      	push	{r7, lr}
 802960a:	b08e      	sub	sp, #56	; 0x38
 802960c:	af00      	add	r7, sp, #0
 802960e:	60f8      	str	r0, [r7, #12]
 8029610:	60b9      	str	r1, [r7, #8]
 8029612:	607a      	str	r2, [r7, #4]
    fe t0;
    fe_add(r->X, p->Y, p->X);
 8029614:	68f8      	ldr	r0, [r7, #12]
 8029616:	68bb      	ldr	r3, [r7, #8]
 8029618:	3328      	adds	r3, #40	; 0x28
 802961a:	68ba      	ldr	r2, [r7, #8]
 802961c:	4619      	mov	r1, r3
 802961e:	f7f8 ff48 	bl	80224b2 <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 8029622:	68fb      	ldr	r3, [r7, #12]
 8029624:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8029628:	68bb      	ldr	r3, [r7, #8]
 802962a:	3328      	adds	r3, #40	; 0x28
 802962c:	68ba      	ldr	r2, [r7, #8]
 802962e:	4619      	mov	r1, r3
 8029630:	f7ff fd80 	bl	8029134 <fe_sub>
    fe_mul(r->Z, r->X, q->YplusX);
 8029634:	68fb      	ldr	r3, [r7, #12]
 8029636:	3350      	adds	r3, #80	; 0x50
 8029638:	68f9      	ldr	r1, [r7, #12]
 802963a:	687a      	ldr	r2, [r7, #4]
 802963c:	4618      	mov	r0, r3
 802963e:	f7f9 fe17 	bl	8023270 <fe_mul>
    fe_mul(r->Y, r->Y, q->YminusX);
 8029642:	68fb      	ldr	r3, [r7, #12]
 8029644:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8029648:	68fb      	ldr	r3, [r7, #12]
 802964a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 802964e:	687b      	ldr	r3, [r7, #4]
 8029650:	3328      	adds	r3, #40	; 0x28
 8029652:	461a      	mov	r2, r3
 8029654:	f7f9 fe0c 	bl	8023270 <fe_mul>
    fe_mul(r->T, q->T2d, p->T);
 8029658:	68fb      	ldr	r3, [r7, #12]
 802965a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802965e:	687b      	ldr	r3, [r7, #4]
 8029660:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8029664:	68bb      	ldr	r3, [r7, #8]
 8029666:	3378      	adds	r3, #120	; 0x78
 8029668:	461a      	mov	r2, r3
 802966a:	f7f9 fe01 	bl	8023270 <fe_mul>
    fe_mul(r->X, p->Z, q->Z);
 802966e:	68f8      	ldr	r0, [r7, #12]
 8029670:	68bb      	ldr	r3, [r7, #8]
 8029672:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8029676:	687b      	ldr	r3, [r7, #4]
 8029678:	3350      	adds	r3, #80	; 0x50
 802967a:	461a      	mov	r2, r3
 802967c:	f7f9 fdf8 	bl	8023270 <fe_mul>
    fe_add(t0, r->X, r->X);
 8029680:	68f9      	ldr	r1, [r7, #12]
 8029682:	68fa      	ldr	r2, [r7, #12]
 8029684:	f107 0310 	add.w	r3, r7, #16
 8029688:	4618      	mov	r0, r3
 802968a:	f7f8 ff12 	bl	80224b2 <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 802968e:	68f8      	ldr	r0, [r7, #12]
 8029690:	68fb      	ldr	r3, [r7, #12]
 8029692:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8029696:	68fb      	ldr	r3, [r7, #12]
 8029698:	3328      	adds	r3, #40	; 0x28
 802969a:	461a      	mov	r2, r3
 802969c:	f7ff fd4a 	bl	8029134 <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 80296a0:	68fb      	ldr	r3, [r7, #12]
 80296a2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80296a6:	68fb      	ldr	r3, [r7, #12]
 80296a8:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80296ac:	68fb      	ldr	r3, [r7, #12]
 80296ae:	3328      	adds	r3, #40	; 0x28
 80296b0:	461a      	mov	r2, r3
 80296b2:	f7f8 fefe 	bl	80224b2 <fe_add>
    fe_add(r->Z, t0, r->T);
 80296b6:	68fb      	ldr	r3, [r7, #12]
 80296b8:	f103 0050 	add.w	r0, r3, #80	; 0x50
 80296bc:	68fb      	ldr	r3, [r7, #12]
 80296be:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80296c2:	f107 0310 	add.w	r3, r7, #16
 80296c6:	4619      	mov	r1, r3
 80296c8:	f7f8 fef3 	bl	80224b2 <fe_add>
    fe_sub(r->T, t0, r->T);
 80296cc:	68fb      	ldr	r3, [r7, #12]
 80296ce:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80296d2:	68fb      	ldr	r3, [r7, #12]
 80296d4:	f103 0278 	add.w	r2, r3, #120	; 0x78
 80296d8:	f107 0310 	add.w	r3, r7, #16
 80296dc:	4619      	mov	r1, r3
 80296de:	f7ff fd29 	bl	8029134 <fe_sub>
}
 80296e2:	bf00      	nop
 80296e4:	3738      	adds	r7, #56	; 0x38
 80296e6:	46bd      	mov	sp, r7
 80296e8:	bd80      	pop	{r7, pc}

080296ea <slide>:


static void slide(signed char *r, const unsigned char *a) {
 80296ea:	b480      	push	{r7}
 80296ec:	b087      	sub	sp, #28
 80296ee:	af00      	add	r7, sp, #0
 80296f0:	6078      	str	r0, [r7, #4]
 80296f2:	6039      	str	r1, [r7, #0]
    int i;
    int b;
    int k;

    for (i = 0; i < 256; ++i) {
 80296f4:	2300      	movs	r3, #0
 80296f6:	617b      	str	r3, [r7, #20]
 80296f8:	e016      	b.n	8029728 <slide+0x3e>
        r[i] = 1 & (a[i >> 3] >> (i & 7));
 80296fa:	697b      	ldr	r3, [r7, #20]
 80296fc:	10db      	asrs	r3, r3, #3
 80296fe:	461a      	mov	r2, r3
 8029700:	683b      	ldr	r3, [r7, #0]
 8029702:	4413      	add	r3, r2
 8029704:	781b      	ldrb	r3, [r3, #0]
 8029706:	461a      	mov	r2, r3
 8029708:	697b      	ldr	r3, [r7, #20]
 802970a:	f003 0307 	and.w	r3, r3, #7
 802970e:	fa42 f303 	asr.w	r3, r2, r3
 8029712:	b25a      	sxtb	r2, r3
 8029714:	697b      	ldr	r3, [r7, #20]
 8029716:	6879      	ldr	r1, [r7, #4]
 8029718:	440b      	add	r3, r1
 802971a:	f002 0201 	and.w	r2, r2, #1
 802971e:	b252      	sxtb	r2, r2
 8029720:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 256; ++i) {
 8029722:	697b      	ldr	r3, [r7, #20]
 8029724:	3301      	adds	r3, #1
 8029726:	617b      	str	r3, [r7, #20]
 8029728:	697b      	ldr	r3, [r7, #20]
 802972a:	2bff      	cmp	r3, #255	; 0xff
 802972c:	dde5      	ble.n	80296fa <slide+0x10>
    }

    for (i = 0; i < 256; ++i)
 802972e:	2300      	movs	r3, #0
 8029730:	617b      	str	r3, [r7, #20]
 8029732:	e0ab      	b.n	802988c <slide+0x1a2>
        if (r[i]) {
 8029734:	697b      	ldr	r3, [r7, #20]
 8029736:	687a      	ldr	r2, [r7, #4]
 8029738:	4413      	add	r3, r2
 802973a:	f993 3000 	ldrsb.w	r3, [r3]
 802973e:	2b00      	cmp	r3, #0
 8029740:	f000 80a1 	beq.w	8029886 <slide+0x19c>
            for (b = 1; b <= 6 && i + b < 256; ++b) {
 8029744:	2301      	movs	r3, #1
 8029746:	613b      	str	r3, [r7, #16]
 8029748:	e092      	b.n	8029870 <slide+0x186>
                if (r[i + b]) {
 802974a:	697a      	ldr	r2, [r7, #20]
 802974c:	693b      	ldr	r3, [r7, #16]
 802974e:	4413      	add	r3, r2
 8029750:	461a      	mov	r2, r3
 8029752:	687b      	ldr	r3, [r7, #4]
 8029754:	4413      	add	r3, r2
 8029756:	f993 3000 	ldrsb.w	r3, [r3]
 802975a:	2b00      	cmp	r3, #0
 802975c:	f000 8085 	beq.w	802986a <slide+0x180>
                    if (r[i] + (r[i + b] << b) <= 15) {
 8029760:	697b      	ldr	r3, [r7, #20]
 8029762:	687a      	ldr	r2, [r7, #4]
 8029764:	4413      	add	r3, r2
 8029766:	f993 3000 	ldrsb.w	r3, [r3]
 802976a:	4619      	mov	r1, r3
 802976c:	697a      	ldr	r2, [r7, #20]
 802976e:	693b      	ldr	r3, [r7, #16]
 8029770:	4413      	add	r3, r2
 8029772:	461a      	mov	r2, r3
 8029774:	687b      	ldr	r3, [r7, #4]
 8029776:	4413      	add	r3, r2
 8029778:	f993 3000 	ldrsb.w	r3, [r3]
 802977c:	461a      	mov	r2, r3
 802977e:	693b      	ldr	r3, [r7, #16]
 8029780:	fa02 f303 	lsl.w	r3, r2, r3
 8029784:	440b      	add	r3, r1
 8029786:	2b0f      	cmp	r3, #15
 8029788:	dc22      	bgt.n	80297d0 <slide+0xe6>
                        r[i] += r[i + b] << b;
 802978a:	697b      	ldr	r3, [r7, #20]
 802978c:	687a      	ldr	r2, [r7, #4]
 802978e:	4413      	add	r3, r2
 8029790:	f993 3000 	ldrsb.w	r3, [r3]
 8029794:	b2da      	uxtb	r2, r3
 8029796:	6979      	ldr	r1, [r7, #20]
 8029798:	693b      	ldr	r3, [r7, #16]
 802979a:	440b      	add	r3, r1
 802979c:	4619      	mov	r1, r3
 802979e:	687b      	ldr	r3, [r7, #4]
 80297a0:	440b      	add	r3, r1
 80297a2:	f993 3000 	ldrsb.w	r3, [r3]
 80297a6:	4619      	mov	r1, r3
 80297a8:	693b      	ldr	r3, [r7, #16]
 80297aa:	fa01 f303 	lsl.w	r3, r1, r3
 80297ae:	b2db      	uxtb	r3, r3
 80297b0:	4413      	add	r3, r2
 80297b2:	b2d9      	uxtb	r1, r3
 80297b4:	697b      	ldr	r3, [r7, #20]
 80297b6:	687a      	ldr	r2, [r7, #4]
 80297b8:	4413      	add	r3, r2
 80297ba:	b24a      	sxtb	r2, r1
 80297bc:	701a      	strb	r2, [r3, #0]
                        r[i + b] = 0;
 80297be:	697a      	ldr	r2, [r7, #20]
 80297c0:	693b      	ldr	r3, [r7, #16]
 80297c2:	4413      	add	r3, r2
 80297c4:	461a      	mov	r2, r3
 80297c6:	687b      	ldr	r3, [r7, #4]
 80297c8:	4413      	add	r3, r2
 80297ca:	2200      	movs	r2, #0
 80297cc:	701a      	strb	r2, [r3, #0]
 80297ce:	e04c      	b.n	802986a <slide+0x180>
                    } else if (r[i] - (r[i + b] << b) >= -15) {
 80297d0:	697b      	ldr	r3, [r7, #20]
 80297d2:	687a      	ldr	r2, [r7, #4]
 80297d4:	4413      	add	r3, r2
 80297d6:	f993 3000 	ldrsb.w	r3, [r3]
 80297da:	4619      	mov	r1, r3
 80297dc:	697a      	ldr	r2, [r7, #20]
 80297de:	693b      	ldr	r3, [r7, #16]
 80297e0:	4413      	add	r3, r2
 80297e2:	461a      	mov	r2, r3
 80297e4:	687b      	ldr	r3, [r7, #4]
 80297e6:	4413      	add	r3, r2
 80297e8:	f993 3000 	ldrsb.w	r3, [r3]
 80297ec:	461a      	mov	r2, r3
 80297ee:	693b      	ldr	r3, [r7, #16]
 80297f0:	fa02 f303 	lsl.w	r3, r2, r3
 80297f4:	1acb      	subs	r3, r1, r3
 80297f6:	f113 0f0f 	cmn.w	r3, #15
 80297fa:	db43      	blt.n	8029884 <slide+0x19a>
                        r[i] -= r[i + b] << b;
 80297fc:	697b      	ldr	r3, [r7, #20]
 80297fe:	687a      	ldr	r2, [r7, #4]
 8029800:	4413      	add	r3, r2
 8029802:	f993 3000 	ldrsb.w	r3, [r3]
 8029806:	b2da      	uxtb	r2, r3
 8029808:	6979      	ldr	r1, [r7, #20]
 802980a:	693b      	ldr	r3, [r7, #16]
 802980c:	440b      	add	r3, r1
 802980e:	4619      	mov	r1, r3
 8029810:	687b      	ldr	r3, [r7, #4]
 8029812:	440b      	add	r3, r1
 8029814:	f993 3000 	ldrsb.w	r3, [r3]
 8029818:	4619      	mov	r1, r3
 802981a:	693b      	ldr	r3, [r7, #16]
 802981c:	fa01 f303 	lsl.w	r3, r1, r3
 8029820:	b2db      	uxtb	r3, r3
 8029822:	1ad3      	subs	r3, r2, r3
 8029824:	b2d9      	uxtb	r1, r3
 8029826:	697b      	ldr	r3, [r7, #20]
 8029828:	687a      	ldr	r2, [r7, #4]
 802982a:	4413      	add	r3, r2
 802982c:	b24a      	sxtb	r2, r1
 802982e:	701a      	strb	r2, [r3, #0]

                        for (k = i + b; k < 256; ++k) {
 8029830:	697a      	ldr	r2, [r7, #20]
 8029832:	693b      	ldr	r3, [r7, #16]
 8029834:	4413      	add	r3, r2
 8029836:	60fb      	str	r3, [r7, #12]
 8029838:	e014      	b.n	8029864 <slide+0x17a>
                            if (!r[k]) {
 802983a:	68fb      	ldr	r3, [r7, #12]
 802983c:	687a      	ldr	r2, [r7, #4]
 802983e:	4413      	add	r3, r2
 8029840:	f993 3000 	ldrsb.w	r3, [r3]
 8029844:	2b00      	cmp	r3, #0
 8029846:	d105      	bne.n	8029854 <slide+0x16a>
                                r[k] = 1;
 8029848:	68fb      	ldr	r3, [r7, #12]
 802984a:	687a      	ldr	r2, [r7, #4]
 802984c:	4413      	add	r3, r2
 802984e:	2201      	movs	r2, #1
 8029850:	701a      	strb	r2, [r3, #0]
                                break;
 8029852:	e00a      	b.n	802986a <slide+0x180>
                            }

                            r[k] = 0;
 8029854:	68fb      	ldr	r3, [r7, #12]
 8029856:	687a      	ldr	r2, [r7, #4]
 8029858:	4413      	add	r3, r2
 802985a:	2200      	movs	r2, #0
 802985c:	701a      	strb	r2, [r3, #0]
                        for (k = i + b; k < 256; ++k) {
 802985e:	68fb      	ldr	r3, [r7, #12]
 8029860:	3301      	adds	r3, #1
 8029862:	60fb      	str	r3, [r7, #12]
 8029864:	68fb      	ldr	r3, [r7, #12]
 8029866:	2bff      	cmp	r3, #255	; 0xff
 8029868:	dde7      	ble.n	802983a <slide+0x150>
            for (b = 1; b <= 6 && i + b < 256; ++b) {
 802986a:	693b      	ldr	r3, [r7, #16]
 802986c:	3301      	adds	r3, #1
 802986e:	613b      	str	r3, [r7, #16]
 8029870:	693b      	ldr	r3, [r7, #16]
 8029872:	2b06      	cmp	r3, #6
 8029874:	dc07      	bgt.n	8029886 <slide+0x19c>
 8029876:	697a      	ldr	r2, [r7, #20]
 8029878:	693b      	ldr	r3, [r7, #16]
 802987a:	4413      	add	r3, r2
 802987c:	2bff      	cmp	r3, #255	; 0xff
 802987e:	f77f af64 	ble.w	802974a <slide+0x60>
 8029882:	e000      	b.n	8029886 <slide+0x19c>
                        }
                    } else {
                        break;
 8029884:	bf00      	nop
    for (i = 0; i < 256; ++i)
 8029886:	697b      	ldr	r3, [r7, #20]
 8029888:	3301      	adds	r3, #1
 802988a:	617b      	str	r3, [r7, #20]
 802988c:	697b      	ldr	r3, [r7, #20]
 802988e:	2bff      	cmp	r3, #255	; 0xff
 8029890:	f77f af50 	ble.w	8029734 <slide+0x4a>
                    }
                }
            }
        }
}
 8029894:	bf00      	nop
 8029896:	bf00      	nop
 8029898:	371c      	adds	r7, #28
 802989a:	46bd      	mov	sp, r7
 802989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80298a0:	4770      	bx	lr
	...

080298a4 <ge_double_scalarmult_vartime>:
where a = a[0]+256*a[1]+...+256^31 a[31].
and b = b[0]+256*b[1]+...+256^31 b[31].
B is the Ed25519 base point (x,4/5) with x positive.
*/

void ge_double_scalarmult_vartime(ge_p2 *r, const unsigned char *a, const ge_p3 *A, const unsigned char *b) {
 80298a4:	b590      	push	{r4, r7, lr}
 80298a6:	f6ad 0dfc 	subw	sp, sp, #2300	; 0x8fc
 80298aa:	af00      	add	r7, sp, #0
 80298ac:	f107 040c 	add.w	r4, r7, #12
 80298b0:	6020      	str	r0, [r4, #0]
 80298b2:	f107 0008 	add.w	r0, r7, #8
 80298b6:	6001      	str	r1, [r0, #0]
 80298b8:	1d39      	adds	r1, r7, #4
 80298ba:	600a      	str	r2, [r1, #0]
 80298bc:	463a      	mov	r2, r7
 80298be:	6013      	str	r3, [r2, #0]
    ge_cached Ai[8]; /* A,3A,5A,7A,9A,11A,13A,15A */
    ge_p1p1 t;
    ge_p3 u;
    ge_p3 A2;
    int i;
    slide(aslide, a);
 80298c0:	f107 0308 	add.w	r3, r7, #8
 80298c4:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 80298c8:	6819      	ldr	r1, [r3, #0]
 80298ca:	4610      	mov	r0, r2
 80298cc:	f7ff ff0d 	bl	80296ea <slide>
    slide(bslide, b);
 80298d0:	463b      	mov	r3, r7
 80298d2:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 80298d6:	6819      	ldr	r1, [r3, #0]
 80298d8:	4610      	mov	r0, r2
 80298da:	f7ff ff06 	bl	80296ea <slide>
    ge_p3_to_cached(&Ai[0], A);
 80298de:	1d3b      	adds	r3, r7, #4
 80298e0:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 80298e4:	6819      	ldr	r1, [r3, #0]
 80298e6:	4610      	mov	r0, r2
 80298e8:	f000 fc4c 	bl	802a184 <ge_p3_to_cached>
    ge_p3_dbl(&t, A);
 80298ec:	1d3b      	adds	r3, r7, #4
 80298ee:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80298f2:	6819      	ldr	r1, [r3, #0]
 80298f4:	4610      	mov	r0, r2
 80298f6:	f000 fc2f 	bl	802a158 <ge_p3_dbl>
    ge_p1p1_to_p3(&A2, &t);
 80298fa:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80298fe:	f107 0314 	add.w	r3, r7, #20
 8029902:	4611      	mov	r1, r2
 8029904:	4618      	mov	r0, r3
 8029906:	f000 fb89 	bl	802a01c <ge_p1p1_to_p3>
    ge_add(&t, &A2, &Ai[0]);
 802990a:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 802990e:	f107 0114 	add.w	r1, r7, #20
 8029912:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8029916:	4618      	mov	r0, r3
 8029918:	f7ff fe76 	bl	8029608 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 802991c:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8029920:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8029924:	4611      	mov	r1, r2
 8029926:	4618      	mov	r0, r3
 8029928:	f000 fb78 	bl	802a01c <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[1], &u);
 802992c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8029930:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8029934:	33a0      	adds	r3, #160	; 0xa0
 8029936:	4611      	mov	r1, r2
 8029938:	4618      	mov	r0, r3
 802993a:	f000 fc23 	bl	802a184 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[1]);
 802993e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8029942:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8029946:	f107 0114 	add.w	r1, r7, #20
 802994a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 802994e:	4618      	mov	r0, r3
 8029950:	f7ff fe5a 	bl	8029608 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 8029954:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8029958:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 802995c:	4611      	mov	r1, r2
 802995e:	4618      	mov	r0, r3
 8029960:	f000 fb5c 	bl	802a01c <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[2], &u);
 8029964:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8029968:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 802996c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8029970:	4611      	mov	r1, r2
 8029972:	4618      	mov	r0, r3
 8029974:	f000 fc06 	bl	802a184 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[2]);
 8029978:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 802997c:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8029980:	f107 0114 	add.w	r1, r7, #20
 8029984:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8029988:	4618      	mov	r0, r3
 802998a:	f7ff fe3d 	bl	8029608 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 802998e:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8029992:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8029996:	4611      	mov	r1, r2
 8029998:	4618      	mov	r0, r3
 802999a:	f000 fb3f 	bl	802a01c <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[3], &u);
 802999e:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80299a2:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80299a6:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80299aa:	4611      	mov	r1, r2
 80299ac:	4618      	mov	r0, r3
 80299ae:	f000 fbe9 	bl	802a184 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[3]);
 80299b2:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80299b6:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 80299ba:	f107 0114 	add.w	r1, r7, #20
 80299be:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80299c2:	4618      	mov	r0, r3
 80299c4:	f7ff fe20 	bl	8029608 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 80299c8:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 80299cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80299d0:	4611      	mov	r1, r2
 80299d2:	4618      	mov	r0, r3
 80299d4:	f000 fb22 	bl	802a01c <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[4], &u);
 80299d8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80299dc:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80299e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80299e4:	4611      	mov	r1, r2
 80299e6:	4618      	mov	r0, r3
 80299e8:	f000 fbcc 	bl	802a184 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[4]);
 80299ec:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80299f0:	f503 7220 	add.w	r2, r3, #640	; 0x280
 80299f4:	f107 0114 	add.w	r1, r7, #20
 80299f8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80299fc:	4618      	mov	r0, r3
 80299fe:	f7ff fe03 	bl	8029608 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 8029a02:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8029a06:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8029a0a:	4611      	mov	r1, r2
 8029a0c:	4618      	mov	r0, r3
 8029a0e:	f000 fb05 	bl	802a01c <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[5], &u);
 8029a12:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8029a16:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8029a1a:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8029a1e:	4611      	mov	r1, r2
 8029a20:	4618      	mov	r0, r3
 8029a22:	f000 fbaf 	bl	802a184 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[5]);
 8029a26:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8029a2a:	f503 7248 	add.w	r2, r3, #800	; 0x320
 8029a2e:	f107 0114 	add.w	r1, r7, #20
 8029a32:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8029a36:	4618      	mov	r0, r3
 8029a38:	f7ff fde6 	bl	8029608 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 8029a3c:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8029a40:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8029a44:	4611      	mov	r1, r2
 8029a46:	4618      	mov	r0, r3
 8029a48:	f000 fae8 	bl	802a01c <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[6], &u);
 8029a4c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8029a50:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8029a54:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8029a58:	4611      	mov	r1, r2
 8029a5a:	4618      	mov	r0, r3
 8029a5c:	f000 fb92 	bl	802a184 <ge_p3_to_cached>
    ge_add(&t, &A2, &Ai[6]);
 8029a60:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8029a64:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
 8029a68:	f107 0114 	add.w	r1, r7, #20
 8029a6c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8029a70:	4618      	mov	r0, r3
 8029a72:	f7ff fdc9 	bl	8029608 <ge_add>
    ge_p1p1_to_p3(&u, &t);
 8029a76:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8029a7a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8029a7e:	4611      	mov	r1, r2
 8029a80:	4618      	mov	r0, r3
 8029a82:	f000 facb 	bl	802a01c <ge_p1p1_to_p3>
    ge_p3_to_cached(&Ai[7], &u);
 8029a86:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8029a8a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8029a8e:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8029a92:	4611      	mov	r1, r2
 8029a94:	4618      	mov	r0, r3
 8029a96:	f000 fb75 	bl	802a184 <ge_p3_to_cached>
    ge_p2_0(r);
 8029a9a:	f107 030c 	add.w	r3, r7, #12
 8029a9e:	6818      	ldr	r0, [r3, #0]
 8029aa0:	f000 faeb 	bl	802a07a <ge_p2_0>

    for (i = 255; i >= 0; --i) {
 8029aa4:	23ff      	movs	r3, #255	; 0xff
 8029aa6:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 8029aaa:	e018      	b.n	8029ade <ge_double_scalarmult_vartime+0x23a>
        if (aslide[i] || bslide[i]) {
 8029aac:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 8029ab0:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8029ab4:	4413      	add	r3, r2
 8029ab6:	f993 3000 	ldrsb.w	r3, [r3]
 8029aba:	2b00      	cmp	r3, #0
 8029abc:	f040 80d5 	bne.w	8029c6a <ge_double_scalarmult_vartime+0x3c6>
 8029ac0:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8029ac4:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8029ac8:	4413      	add	r3, r2
 8029aca:	f993 3000 	ldrsb.w	r3, [r3]
 8029ace:	2b00      	cmp	r3, #0
 8029ad0:	f040 80cb 	bne.w	8029c6a <ge_double_scalarmult_vartime+0x3c6>
    for (i = 255; i >= 0; --i) {
 8029ad4:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8029ad8:	3b01      	subs	r3, #1
 8029ada:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 8029ade:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8029ae2:	2b00      	cmp	r3, #0
 8029ae4:	dae2      	bge.n	8029aac <ge_double_scalarmult_vartime+0x208>
            break;
        }
    }

    for (; i >= 0; --i) {
 8029ae6:	e0c0      	b.n	8029c6a <ge_double_scalarmult_vartime+0x3c6>
        ge_p2_dbl(&t, r);
 8029ae8:	f107 030c 	add.w	r3, r7, #12
 8029aec:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8029af0:	6819      	ldr	r1, [r3, #0]
 8029af2:	4610      	mov	r0, r2
 8029af4:	f000 fad7 	bl	802a0a6 <ge_p2_dbl>

        if (aslide[i] > 0) {
 8029af8:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 8029afc:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8029b00:	4413      	add	r3, r2
 8029b02:	f993 3000 	ldrsb.w	r3, [r3]
 8029b06:	2b00      	cmp	r3, #0
 8029b08:	dd22      	ble.n	8029b50 <ge_double_scalarmult_vartime+0x2ac>
            ge_p1p1_to_p3(&u, &t);
 8029b0a:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8029b0e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8029b12:	4611      	mov	r1, r2
 8029b14:	4618      	mov	r0, r3
 8029b16:	f000 fa81 	bl	802a01c <ge_p1p1_to_p3>
            ge_add(&t, &u, &Ai[aslide[i] / 2]);
 8029b1a:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 8029b1e:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8029b22:	4413      	add	r3, r2
 8029b24:	f993 3000 	ldrsb.w	r3, [r3]
 8029b28:	0fda      	lsrs	r2, r3, #31
 8029b2a:	4413      	add	r3, r2
 8029b2c:	105b      	asrs	r3, r3, #1
 8029b2e:	b25b      	sxtb	r3, r3
 8029b30:	4619      	mov	r1, r3
 8029b32:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8029b36:	460b      	mov	r3, r1
 8029b38:	009b      	lsls	r3, r3, #2
 8029b3a:	440b      	add	r3, r1
 8029b3c:	015b      	lsls	r3, r3, #5
 8029b3e:	441a      	add	r2, r3
 8029b40:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8029b44:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8029b48:	4618      	mov	r0, r3
 8029b4a:	f7ff fd5d 	bl	8029608 <ge_add>
 8029b4e:	e02a      	b.n	8029ba6 <ge_double_scalarmult_vartime+0x302>
        } else if (aslide[i] < 0) {
 8029b50:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 8029b54:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8029b58:	4413      	add	r3, r2
 8029b5a:	f993 3000 	ldrsb.w	r3, [r3]
 8029b5e:	2b00      	cmp	r3, #0
 8029b60:	da21      	bge.n	8029ba6 <ge_double_scalarmult_vartime+0x302>
            ge_p1p1_to_p3(&u, &t);
 8029b62:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8029b66:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8029b6a:	4611      	mov	r1, r2
 8029b6c:	4618      	mov	r0, r3
 8029b6e:	f000 fa55 	bl	802a01c <ge_p1p1_to_p3>
            ge_sub(&t, &u, &Ai[(-aslide[i]) / 2]);
 8029b72:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 8029b76:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8029b7a:	4413      	add	r3, r2
 8029b7c:	f993 3000 	ldrsb.w	r3, [r3]
 8029b80:	0fda      	lsrs	r2, r3, #31
 8029b82:	4413      	add	r3, r2
 8029b84:	105b      	asrs	r3, r3, #1
 8029b86:	425b      	negs	r3, r3
 8029b88:	4619      	mov	r1, r3
 8029b8a:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8029b8e:	460b      	mov	r3, r1
 8029b90:	009b      	lsls	r3, r3, #2
 8029b92:	440b      	add	r3, r1
 8029b94:	015b      	lsls	r3, r3, #5
 8029b96:	441a      	add	r2, r3
 8029b98:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8029b9c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8029ba0:	4618      	mov	r0, r3
 8029ba2:	f000 fb3e 	bl	802a222 <ge_sub>
        }

        if (bslide[i] > 0) {
 8029ba6:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8029baa:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8029bae:	4413      	add	r3, r2
 8029bb0:	f993 3000 	ldrsb.w	r3, [r3]
 8029bb4:	2b00      	cmp	r3, #0
 8029bb6:	dd21      	ble.n	8029bfc <ge_double_scalarmult_vartime+0x358>
            ge_p1p1_to_p3(&u, &t);
 8029bb8:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8029bbc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8029bc0:	4611      	mov	r1, r2
 8029bc2:	4618      	mov	r0, r3
 8029bc4:	f000 fa2a 	bl	802a01c <ge_p1p1_to_p3>
            ge_madd(&t, &u, &Bi[bslide[i] / 2]);
 8029bc8:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8029bcc:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8029bd0:	4413      	add	r3, r2
 8029bd2:	f993 3000 	ldrsb.w	r3, [r3]
 8029bd6:	0fda      	lsrs	r2, r3, #31
 8029bd8:	4413      	add	r3, r2
 8029bda:	105b      	asrs	r3, r3, #1
 8029bdc:	b25b      	sxtb	r3, r3
 8029bde:	461a      	mov	r2, r3
 8029be0:	4613      	mov	r3, r2
 8029be2:	011b      	lsls	r3, r3, #4
 8029be4:	1a9b      	subs	r3, r3, r2
 8029be6:	00db      	lsls	r3, r3, #3
 8029be8:	4a25      	ldr	r2, [pc, #148]	; (8029c80 <ge_double_scalarmult_vartime+0x3dc>)
 8029bea:	441a      	add	r2, r3
 8029bec:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8029bf0:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8029bf4:	4618      	mov	r0, r3
 8029bf6:	f000 f913 	bl	8029e20 <ge_madd>
 8029bfa:	e029      	b.n	8029c50 <ge_double_scalarmult_vartime+0x3ac>
        } else if (bslide[i] < 0) {
 8029bfc:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8029c00:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8029c04:	4413      	add	r3, r2
 8029c06:	f993 3000 	ldrsb.w	r3, [r3]
 8029c0a:	2b00      	cmp	r3, #0
 8029c0c:	da20      	bge.n	8029c50 <ge_double_scalarmult_vartime+0x3ac>
            ge_p1p1_to_p3(&u, &t);
 8029c0e:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8029c12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8029c16:	4611      	mov	r1, r2
 8029c18:	4618      	mov	r0, r3
 8029c1a:	f000 f9ff 	bl	802a01c <ge_p1p1_to_p3>
            ge_msub(&t, &u, &Bi[(-bslide[i]) / 2]);
 8029c1e:	f207 62f4 	addw	r2, r7, #1780	; 0x6f4
 8029c22:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8029c26:	4413      	add	r3, r2
 8029c28:	f993 3000 	ldrsb.w	r3, [r3]
 8029c2c:	0fda      	lsrs	r2, r3, #31
 8029c2e:	4413      	add	r3, r2
 8029c30:	105b      	asrs	r3, r3, #1
 8029c32:	425b      	negs	r3, r3
 8029c34:	461a      	mov	r2, r3
 8029c36:	4613      	mov	r3, r2
 8029c38:	011b      	lsls	r3, r3, #4
 8029c3a:	1a9b      	subs	r3, r3, r2
 8029c3c:	00db      	lsls	r3, r3, #3
 8029c3e:	4a10      	ldr	r2, [pc, #64]	; (8029c80 <ge_double_scalarmult_vartime+0x3dc>)
 8029c40:	441a      	add	r2, r3
 8029c42:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8029c46:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8029c4a:	4618      	mov	r0, r3
 8029c4c:	f000 f954 	bl	8029ef8 <ge_msub>
        }

        ge_p1p1_to_p2(r, &t);
 8029c50:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8029c54:	f107 030c 	add.w	r3, r7, #12
 8029c58:	4611      	mov	r1, r2
 8029c5a:	6818      	ldr	r0, [r3, #0]
 8029c5c:	f000 f9b8 	bl	8029fd0 <ge_p1p1_to_p2>
    for (; i >= 0; --i) {
 8029c60:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8029c64:	3b01      	subs	r3, #1
 8029c66:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 8029c6a:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 8029c6e:	2b00      	cmp	r3, #0
 8029c70:	f6bf af3a 	bge.w	8029ae8 <ge_double_scalarmult_vartime+0x244>
    }
}
 8029c74:	bf00      	nop
 8029c76:	bf00      	nop
 8029c78:	f607 07fc 	addw	r7, r7, #2300	; 0x8fc
 8029c7c:	46bd      	mov	sp, r7
 8029c7e:	bd90      	pop	{r4, r7, pc}
 8029c80:	0803e134 	.word	0x0803e134

08029c84 <ge_frombytes_negate_vartime>:

static const fe sqrtm1 = {
    -32595792, -7943725, 9377950, 3500415, 12389472, -272473, -25146209, -2005654, 326686, 11406482
};

int ge_frombytes_negate_vartime(ge_p3 *h, const unsigned char *s) {
 8029c84:	b580      	push	{r7, lr}
 8029c86:	b0b4      	sub	sp, #208	; 0xd0
 8029c88:	af00      	add	r7, sp, #0
 8029c8a:	6078      	str	r0, [r7, #4]
 8029c8c:	6039      	str	r1, [r7, #0]
    fe u;
    fe v;
    fe v3;
    fe vxx;
    fe check;
    fe_frombytes(h->Y, s);
 8029c8e:	687b      	ldr	r3, [r7, #4]
 8029c90:	3328      	adds	r3, #40	; 0x28
 8029c92:	6839      	ldr	r1, [r7, #0]
 8029c94:	4618      	mov	r0, r3
 8029c96:	f7f8 fcf7 	bl	8022688 <fe_frombytes>
    fe_1(h->Z);
 8029c9a:	687b      	ldr	r3, [r7, #4]
 8029c9c:	3350      	adds	r3, #80	; 0x50
 8029c9e:	4618      	mov	r0, r3
 8029ca0:	f7f8 fbd6 	bl	8022450 <fe_1>
    fe_sq(u, h->Y);
 8029ca4:	687b      	ldr	r3, [r7, #4]
 8029ca6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8029caa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8029cae:	4611      	mov	r1, r2
 8029cb0:	4618      	mov	r0, r3
 8029cb2:	f7fc f9ec 	bl	802608e <fe_sq>
    fe_mul(v, u, d);
 8029cb6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8029cba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8029cbe:	4a56      	ldr	r2, [pc, #344]	; (8029e18 <ge_frombytes_negate_vartime+0x194>)
 8029cc0:	4618      	mov	r0, r3
 8029cc2:	f7f9 fad5 	bl	8023270 <fe_mul>
    fe_sub(u, u, h->Z);     /* u = y^2-1 */
 8029cc6:	687b      	ldr	r3, [r7, #4]
 8029cc8:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8029ccc:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8029cd0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8029cd4:	4618      	mov	r0, r3
 8029cd6:	f7ff fa2d 	bl	8029134 <fe_sub>
    fe_add(v, v, h->Z);     /* v = dy^2+1 */
 8029cda:	687b      	ldr	r3, [r7, #4]
 8029cdc:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8029ce0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8029ce4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8029ce8:	4618      	mov	r0, r3
 8029cea:	f7f8 fbe2 	bl	80224b2 <fe_add>
    fe_sq(v3, v);
 8029cee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8029cf2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8029cf6:	4611      	mov	r1, r2
 8029cf8:	4618      	mov	r0, r3
 8029cfa:	f7fc f9c8 	bl	802608e <fe_sq>
    fe_mul(v3, v3, v);      /* v3 = v^3 */
 8029cfe:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8029d02:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8029d06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8029d0a:	4618      	mov	r0, r3
 8029d0c:	f7f9 fab0 	bl	8023270 <fe_mul>
    fe_sq(h->X, v3);
 8029d10:	687b      	ldr	r3, [r7, #4]
 8029d12:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8029d16:	4611      	mov	r1, r2
 8029d18:	4618      	mov	r0, r3
 8029d1a:	f7fc f9b8 	bl	802608e <fe_sq>
    fe_mul(h->X, h->X, v);
 8029d1e:	687b      	ldr	r3, [r7, #4]
 8029d20:	6879      	ldr	r1, [r7, #4]
 8029d22:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8029d26:	4618      	mov	r0, r3
 8029d28:	f7f9 faa2 	bl	8023270 <fe_mul>
    fe_mul(h->X, h->X, u);  /* x = uv^7 */
 8029d2c:	687b      	ldr	r3, [r7, #4]
 8029d2e:	6879      	ldr	r1, [r7, #4]
 8029d30:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8029d34:	4618      	mov	r0, r3
 8029d36:	f7f9 fa9b 	bl	8023270 <fe_mul>
    fe_pow22523(h->X, h->X); /* x = (uv^7)^((q-5)/8) */
 8029d3a:	687b      	ldr	r3, [r7, #4]
 8029d3c:	687a      	ldr	r2, [r7, #4]
 8029d3e:	4611      	mov	r1, r2
 8029d40:	4618      	mov	r0, r3
 8029d42:	f7fb fffe 	bl	8025d42 <fe_pow22523>
    fe_mul(h->X, h->X, v3);
 8029d46:	687b      	ldr	r3, [r7, #4]
 8029d48:	6879      	ldr	r1, [r7, #4]
 8029d4a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8029d4e:	4618      	mov	r0, r3
 8029d50:	f7f9 fa8e 	bl	8023270 <fe_mul>
    fe_mul(h->X, h->X, u);  /* x = uv^3(uv^7)^((q-5)/8) */
 8029d54:	687b      	ldr	r3, [r7, #4]
 8029d56:	6879      	ldr	r1, [r7, #4]
 8029d58:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8029d5c:	4618      	mov	r0, r3
 8029d5e:	f7f9 fa87 	bl	8023270 <fe_mul>
    fe_sq(vxx, h->X);
 8029d62:	687a      	ldr	r2, [r7, #4]
 8029d64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029d68:	4611      	mov	r1, r2
 8029d6a:	4618      	mov	r0, r3
 8029d6c:	f7fc f98f 	bl	802608e <fe_sq>
    fe_mul(vxx, vxx, v);
 8029d70:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8029d74:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029d78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029d7c:	4618      	mov	r0, r3
 8029d7e:	f7f9 fa77 	bl	8023270 <fe_mul>
    fe_sub(check, vxx, u);  /* vx^2-u */
 8029d82:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8029d86:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029d8a:	f107 0308 	add.w	r3, r7, #8
 8029d8e:	4618      	mov	r0, r3
 8029d90:	f7ff f9d0 	bl	8029134 <fe_sub>

    if (fe_isnonzero(check)) {
 8029d94:	f107 0308 	add.w	r3, r7, #8
 8029d98:	4618      	mov	r0, r3
 8029d9a:	f7f9 f98b 	bl	80230b4 <fe_isnonzero>
 8029d9e:	4603      	mov	r3, r0
 8029da0:	2b00      	cmp	r3, #0
 8029da2:	d019      	beq.n	8029dd8 <ge_frombytes_negate_vartime+0x154>
        fe_add(check, vxx, u); /* vx^2+u */
 8029da4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8029da8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029dac:	f107 0308 	add.w	r3, r7, #8
 8029db0:	4618      	mov	r0, r3
 8029db2:	f7f8 fb7e 	bl	80224b2 <fe_add>

        if (fe_isnonzero(check)) {
 8029db6:	f107 0308 	add.w	r3, r7, #8
 8029dba:	4618      	mov	r0, r3
 8029dbc:	f7f9 f97a 	bl	80230b4 <fe_isnonzero>
 8029dc0:	4603      	mov	r3, r0
 8029dc2:	2b00      	cmp	r3, #0
 8029dc4:	d002      	beq.n	8029dcc <ge_frombytes_negate_vartime+0x148>
            return -1;
 8029dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8029dca:	e021      	b.n	8029e10 <ge_frombytes_negate_vartime+0x18c>
        }

        fe_mul(h->X, h->X, sqrtm1);
 8029dcc:	687b      	ldr	r3, [r7, #4]
 8029dce:	6879      	ldr	r1, [r7, #4]
 8029dd0:	4a12      	ldr	r2, [pc, #72]	; (8029e1c <ge_frombytes_negate_vartime+0x198>)
 8029dd2:	4618      	mov	r0, r3
 8029dd4:	f7f9 fa4c 	bl	8023270 <fe_mul>
    }

    if (fe_isnegative(h->X) == (s[31] >> 7)) {
 8029dd8:	687b      	ldr	r3, [r7, #4]
 8029dda:	4618      	mov	r0, r3
 8029ddc:	f7f9 f959 	bl	8023092 <fe_isnegative>
 8029de0:	4602      	mov	r2, r0
 8029de2:	683b      	ldr	r3, [r7, #0]
 8029de4:	331f      	adds	r3, #31
 8029de6:	781b      	ldrb	r3, [r3, #0]
 8029de8:	09db      	lsrs	r3, r3, #7
 8029dea:	b2db      	uxtb	r3, r3
 8029dec:	429a      	cmp	r2, r3
 8029dee:	d105      	bne.n	8029dfc <ge_frombytes_negate_vartime+0x178>
        fe_neg(h->X, h->X);
 8029df0:	687b      	ldr	r3, [r7, #4]
 8029df2:	687a      	ldr	r2, [r7, #4]
 8029df4:	4611      	mov	r1, r2
 8029df6:	4618      	mov	r0, r3
 8029df8:	f7fb ff35 	bl	8025c66 <fe_neg>
    }

    fe_mul(h->T, h->X, h->Y);
 8029dfc:	687b      	ldr	r3, [r7, #4]
 8029dfe:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8029e02:	6879      	ldr	r1, [r7, #4]
 8029e04:	687b      	ldr	r3, [r7, #4]
 8029e06:	3328      	adds	r3, #40	; 0x28
 8029e08:	461a      	mov	r2, r3
 8029e0a:	f7f9 fa31 	bl	8023270 <fe_mul>
    return 0;
 8029e0e:	2300      	movs	r3, #0
}
 8029e10:	4618      	mov	r0, r3
 8029e12:	37d0      	adds	r7, #208	; 0xd0
 8029e14:	46bd      	mov	sp, r7
 8029e16:	bd80      	pop	{r7, pc}
 8029e18:	0803e4f4 	.word	0x0803e4f4
 8029e1c:	0803e51c 	.word	0x0803e51c

08029e20 <ge_madd>:

/*
r = p + q
*/

void ge_madd(ge_p1p1 *r, const ge_p3 *p, const ge_precomp *q) {
 8029e20:	b580      	push	{r7, lr}
 8029e22:	b08e      	sub	sp, #56	; 0x38
 8029e24:	af00      	add	r7, sp, #0
 8029e26:	60f8      	str	r0, [r7, #12]
 8029e28:	60b9      	str	r1, [r7, #8]
 8029e2a:	607a      	str	r2, [r7, #4]
    fe t0;
    fe_add(r->X, p->Y, p->X);
 8029e2c:	68f8      	ldr	r0, [r7, #12]
 8029e2e:	68bb      	ldr	r3, [r7, #8]
 8029e30:	3328      	adds	r3, #40	; 0x28
 8029e32:	68ba      	ldr	r2, [r7, #8]
 8029e34:	4619      	mov	r1, r3
 8029e36:	f7f8 fb3c 	bl	80224b2 <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 8029e3a:	68fb      	ldr	r3, [r7, #12]
 8029e3c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8029e40:	68bb      	ldr	r3, [r7, #8]
 8029e42:	3328      	adds	r3, #40	; 0x28
 8029e44:	68ba      	ldr	r2, [r7, #8]
 8029e46:	4619      	mov	r1, r3
 8029e48:	f7ff f974 	bl	8029134 <fe_sub>
    fe_mul(r->Z, r->X, q->yplusx);
 8029e4c:	68fb      	ldr	r3, [r7, #12]
 8029e4e:	3350      	adds	r3, #80	; 0x50
 8029e50:	68f9      	ldr	r1, [r7, #12]
 8029e52:	687a      	ldr	r2, [r7, #4]
 8029e54:	4618      	mov	r0, r3
 8029e56:	f7f9 fa0b 	bl	8023270 <fe_mul>
    fe_mul(r->Y, r->Y, q->yminusx);
 8029e5a:	68fb      	ldr	r3, [r7, #12]
 8029e5c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8029e60:	68fb      	ldr	r3, [r7, #12]
 8029e62:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8029e66:	687b      	ldr	r3, [r7, #4]
 8029e68:	3328      	adds	r3, #40	; 0x28
 8029e6a:	461a      	mov	r2, r3
 8029e6c:	f7f9 fa00 	bl	8023270 <fe_mul>
    fe_mul(r->T, q->xy2d, p->T);
 8029e70:	68fb      	ldr	r3, [r7, #12]
 8029e72:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8029e76:	687b      	ldr	r3, [r7, #4]
 8029e78:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8029e7c:	68bb      	ldr	r3, [r7, #8]
 8029e7e:	3378      	adds	r3, #120	; 0x78
 8029e80:	461a      	mov	r2, r3
 8029e82:	f7f9 f9f5 	bl	8023270 <fe_mul>
    fe_add(t0, p->Z, p->Z);
 8029e86:	68bb      	ldr	r3, [r7, #8]
 8029e88:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8029e8c:	68bb      	ldr	r3, [r7, #8]
 8029e8e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8029e92:	f107 0310 	add.w	r3, r7, #16
 8029e96:	4618      	mov	r0, r3
 8029e98:	f7f8 fb0b 	bl	80224b2 <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 8029e9c:	68f8      	ldr	r0, [r7, #12]
 8029e9e:	68fb      	ldr	r3, [r7, #12]
 8029ea0:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8029ea4:	68fb      	ldr	r3, [r7, #12]
 8029ea6:	3328      	adds	r3, #40	; 0x28
 8029ea8:	461a      	mov	r2, r3
 8029eaa:	f7ff f943 	bl	8029134 <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 8029eae:	68fb      	ldr	r3, [r7, #12]
 8029eb0:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8029eb4:	68fb      	ldr	r3, [r7, #12]
 8029eb6:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8029eba:	68fb      	ldr	r3, [r7, #12]
 8029ebc:	3328      	adds	r3, #40	; 0x28
 8029ebe:	461a      	mov	r2, r3
 8029ec0:	f7f8 faf7 	bl	80224b2 <fe_add>
    fe_add(r->Z, t0, r->T);
 8029ec4:	68fb      	ldr	r3, [r7, #12]
 8029ec6:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8029eca:	68fb      	ldr	r3, [r7, #12]
 8029ecc:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8029ed0:	f107 0310 	add.w	r3, r7, #16
 8029ed4:	4619      	mov	r1, r3
 8029ed6:	f7f8 faec 	bl	80224b2 <fe_add>
    fe_sub(r->T, t0, r->T);
 8029eda:	68fb      	ldr	r3, [r7, #12]
 8029edc:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8029ee0:	68fb      	ldr	r3, [r7, #12]
 8029ee2:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8029ee6:	f107 0310 	add.w	r3, r7, #16
 8029eea:	4619      	mov	r1, r3
 8029eec:	f7ff f922 	bl	8029134 <fe_sub>
}
 8029ef0:	bf00      	nop
 8029ef2:	3738      	adds	r7, #56	; 0x38
 8029ef4:	46bd      	mov	sp, r7
 8029ef6:	bd80      	pop	{r7, pc}

08029ef8 <ge_msub>:

/*
r = p - q
*/

void ge_msub(ge_p1p1 *r, const ge_p3 *p, const ge_precomp *q) {
 8029ef8:	b580      	push	{r7, lr}
 8029efa:	b08e      	sub	sp, #56	; 0x38
 8029efc:	af00      	add	r7, sp, #0
 8029efe:	60f8      	str	r0, [r7, #12]
 8029f00:	60b9      	str	r1, [r7, #8]
 8029f02:	607a      	str	r2, [r7, #4]
    fe t0;

    fe_add(r->X, p->Y, p->X);
 8029f04:	68f8      	ldr	r0, [r7, #12]
 8029f06:	68bb      	ldr	r3, [r7, #8]
 8029f08:	3328      	adds	r3, #40	; 0x28
 8029f0a:	68ba      	ldr	r2, [r7, #8]
 8029f0c:	4619      	mov	r1, r3
 8029f0e:	f7f8 fad0 	bl	80224b2 <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 8029f12:	68fb      	ldr	r3, [r7, #12]
 8029f14:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8029f18:	68bb      	ldr	r3, [r7, #8]
 8029f1a:	3328      	adds	r3, #40	; 0x28
 8029f1c:	68ba      	ldr	r2, [r7, #8]
 8029f1e:	4619      	mov	r1, r3
 8029f20:	f7ff f908 	bl	8029134 <fe_sub>
    fe_mul(r->Z, r->X, q->yminusx);
 8029f24:	68fb      	ldr	r3, [r7, #12]
 8029f26:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8029f2a:	68f9      	ldr	r1, [r7, #12]
 8029f2c:	687b      	ldr	r3, [r7, #4]
 8029f2e:	3328      	adds	r3, #40	; 0x28
 8029f30:	461a      	mov	r2, r3
 8029f32:	f7f9 f99d 	bl	8023270 <fe_mul>
    fe_mul(r->Y, r->Y, q->yplusx);
 8029f36:	68fb      	ldr	r3, [r7, #12]
 8029f38:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8029f3c:	68fb      	ldr	r3, [r7, #12]
 8029f3e:	3328      	adds	r3, #40	; 0x28
 8029f40:	687a      	ldr	r2, [r7, #4]
 8029f42:	4619      	mov	r1, r3
 8029f44:	f7f9 f994 	bl	8023270 <fe_mul>
    fe_mul(r->T, q->xy2d, p->T);
 8029f48:	68fb      	ldr	r3, [r7, #12]
 8029f4a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8029f4e:	687b      	ldr	r3, [r7, #4]
 8029f50:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8029f54:	68bb      	ldr	r3, [r7, #8]
 8029f56:	3378      	adds	r3, #120	; 0x78
 8029f58:	461a      	mov	r2, r3
 8029f5a:	f7f9 f989 	bl	8023270 <fe_mul>
    fe_add(t0, p->Z, p->Z);
 8029f5e:	68bb      	ldr	r3, [r7, #8]
 8029f60:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8029f64:	68bb      	ldr	r3, [r7, #8]
 8029f66:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8029f6a:	f107 0310 	add.w	r3, r7, #16
 8029f6e:	4618      	mov	r0, r3
 8029f70:	f7f8 fa9f 	bl	80224b2 <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 8029f74:	68f8      	ldr	r0, [r7, #12]
 8029f76:	68fb      	ldr	r3, [r7, #12]
 8029f78:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8029f7c:	68fb      	ldr	r3, [r7, #12]
 8029f7e:	3328      	adds	r3, #40	; 0x28
 8029f80:	461a      	mov	r2, r3
 8029f82:	f7ff f8d7 	bl	8029134 <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 8029f86:	68fb      	ldr	r3, [r7, #12]
 8029f88:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8029f8c:	68fb      	ldr	r3, [r7, #12]
 8029f8e:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8029f92:	68fb      	ldr	r3, [r7, #12]
 8029f94:	3328      	adds	r3, #40	; 0x28
 8029f96:	461a      	mov	r2, r3
 8029f98:	f7f8 fa8b 	bl	80224b2 <fe_add>
    fe_sub(r->Z, t0, r->T);
 8029f9c:	68fb      	ldr	r3, [r7, #12]
 8029f9e:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8029fa2:	68fb      	ldr	r3, [r7, #12]
 8029fa4:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8029fa8:	f107 0310 	add.w	r3, r7, #16
 8029fac:	4619      	mov	r1, r3
 8029fae:	f7ff f8c1 	bl	8029134 <fe_sub>
    fe_add(r->T, t0, r->T);
 8029fb2:	68fb      	ldr	r3, [r7, #12]
 8029fb4:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8029fb8:	68fb      	ldr	r3, [r7, #12]
 8029fba:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8029fbe:	f107 0310 	add.w	r3, r7, #16
 8029fc2:	4619      	mov	r1, r3
 8029fc4:	f7f8 fa75 	bl	80224b2 <fe_add>
}
 8029fc8:	bf00      	nop
 8029fca:	3738      	adds	r7, #56	; 0x38
 8029fcc:	46bd      	mov	sp, r7
 8029fce:	bd80      	pop	{r7, pc}

08029fd0 <ge_p1p1_to_p2>:

/*
r = p
*/

void ge_p1p1_to_p2(ge_p2 *r, const ge_p1p1 *p) {
 8029fd0:	b580      	push	{r7, lr}
 8029fd2:	b082      	sub	sp, #8
 8029fd4:	af00      	add	r7, sp, #0
 8029fd6:	6078      	str	r0, [r7, #4]
 8029fd8:	6039      	str	r1, [r7, #0]
    fe_mul(r->X, p->X, p->T);
 8029fda:	6878      	ldr	r0, [r7, #4]
 8029fdc:	6839      	ldr	r1, [r7, #0]
 8029fde:	683b      	ldr	r3, [r7, #0]
 8029fe0:	3378      	adds	r3, #120	; 0x78
 8029fe2:	461a      	mov	r2, r3
 8029fe4:	f7f9 f944 	bl	8023270 <fe_mul>
    fe_mul(r->Y, p->Y, p->Z);
 8029fe8:	687b      	ldr	r3, [r7, #4]
 8029fea:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8029fee:	683b      	ldr	r3, [r7, #0]
 8029ff0:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8029ff4:	683b      	ldr	r3, [r7, #0]
 8029ff6:	3350      	adds	r3, #80	; 0x50
 8029ff8:	461a      	mov	r2, r3
 8029ffa:	f7f9 f939 	bl	8023270 <fe_mul>
    fe_mul(r->Z, p->Z, p->T);
 8029ffe:	687b      	ldr	r3, [r7, #4]
 802a000:	f103 0050 	add.w	r0, r3, #80	; 0x50
 802a004:	683b      	ldr	r3, [r7, #0]
 802a006:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802a00a:	683b      	ldr	r3, [r7, #0]
 802a00c:	3378      	adds	r3, #120	; 0x78
 802a00e:	461a      	mov	r2, r3
 802a010:	f7f9 f92e 	bl	8023270 <fe_mul>
}
 802a014:	bf00      	nop
 802a016:	3708      	adds	r7, #8
 802a018:	46bd      	mov	sp, r7
 802a01a:	bd80      	pop	{r7, pc}

0802a01c <ge_p1p1_to_p3>:

/*
r = p
*/

void ge_p1p1_to_p3(ge_p3 *r, const ge_p1p1 *p) {
 802a01c:	b580      	push	{r7, lr}
 802a01e:	b082      	sub	sp, #8
 802a020:	af00      	add	r7, sp, #0
 802a022:	6078      	str	r0, [r7, #4]
 802a024:	6039      	str	r1, [r7, #0]
    fe_mul(r->X, p->X, p->T);
 802a026:	6878      	ldr	r0, [r7, #4]
 802a028:	6839      	ldr	r1, [r7, #0]
 802a02a:	683b      	ldr	r3, [r7, #0]
 802a02c:	3378      	adds	r3, #120	; 0x78
 802a02e:	461a      	mov	r2, r3
 802a030:	f7f9 f91e 	bl	8023270 <fe_mul>
    fe_mul(r->Y, p->Y, p->Z);
 802a034:	687b      	ldr	r3, [r7, #4]
 802a036:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a03a:	683b      	ldr	r3, [r7, #0]
 802a03c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 802a040:	683b      	ldr	r3, [r7, #0]
 802a042:	3350      	adds	r3, #80	; 0x50
 802a044:	461a      	mov	r2, r3
 802a046:	f7f9 f913 	bl	8023270 <fe_mul>
    fe_mul(r->Z, p->Z, p->T);
 802a04a:	687b      	ldr	r3, [r7, #4]
 802a04c:	f103 0050 	add.w	r0, r3, #80	; 0x50
 802a050:	683b      	ldr	r3, [r7, #0]
 802a052:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802a056:	683b      	ldr	r3, [r7, #0]
 802a058:	3378      	adds	r3, #120	; 0x78
 802a05a:	461a      	mov	r2, r3
 802a05c:	f7f9 f908 	bl	8023270 <fe_mul>
    fe_mul(r->T, p->X, p->Y);
 802a060:	687b      	ldr	r3, [r7, #4]
 802a062:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802a066:	6839      	ldr	r1, [r7, #0]
 802a068:	683b      	ldr	r3, [r7, #0]
 802a06a:	3328      	adds	r3, #40	; 0x28
 802a06c:	461a      	mov	r2, r3
 802a06e:	f7f9 f8ff 	bl	8023270 <fe_mul>
}
 802a072:	bf00      	nop
 802a074:	3708      	adds	r7, #8
 802a076:	46bd      	mov	sp, r7
 802a078:	bd80      	pop	{r7, pc}

0802a07a <ge_p2_0>:


void ge_p2_0(ge_p2 *h) {
 802a07a:	b580      	push	{r7, lr}
 802a07c:	b082      	sub	sp, #8
 802a07e:	af00      	add	r7, sp, #0
 802a080:	6078      	str	r0, [r7, #4]
    fe_0(h->X);
 802a082:	687b      	ldr	r3, [r7, #4]
 802a084:	4618      	mov	r0, r3
 802a086:	f7f8 f9b2 	bl	80223ee <fe_0>
    fe_1(h->Y);
 802a08a:	687b      	ldr	r3, [r7, #4]
 802a08c:	3328      	adds	r3, #40	; 0x28
 802a08e:	4618      	mov	r0, r3
 802a090:	f7f8 f9de 	bl	8022450 <fe_1>
    fe_1(h->Z);
 802a094:	687b      	ldr	r3, [r7, #4]
 802a096:	3350      	adds	r3, #80	; 0x50
 802a098:	4618      	mov	r0, r3
 802a09a:	f7f8 f9d9 	bl	8022450 <fe_1>
}
 802a09e:	bf00      	nop
 802a0a0:	3708      	adds	r7, #8
 802a0a2:	46bd      	mov	sp, r7
 802a0a4:	bd80      	pop	{r7, pc}

0802a0a6 <ge_p2_dbl>:

/*
r = 2 * p
*/

void ge_p2_dbl(ge_p1p1 *r, const ge_p2 *p) {
 802a0a6:	b580      	push	{r7, lr}
 802a0a8:	b08c      	sub	sp, #48	; 0x30
 802a0aa:	af00      	add	r7, sp, #0
 802a0ac:	6078      	str	r0, [r7, #4]
 802a0ae:	6039      	str	r1, [r7, #0]
    fe t0;

    fe_sq(r->X, p->X);
 802a0b0:	687b      	ldr	r3, [r7, #4]
 802a0b2:	683a      	ldr	r2, [r7, #0]
 802a0b4:	4611      	mov	r1, r2
 802a0b6:	4618      	mov	r0, r3
 802a0b8:	f7fb ffe9 	bl	802608e <fe_sq>
    fe_sq(r->Z, p->Y);
 802a0bc:	687b      	ldr	r3, [r7, #4]
 802a0be:	f103 0250 	add.w	r2, r3, #80	; 0x50
 802a0c2:	683b      	ldr	r3, [r7, #0]
 802a0c4:	3328      	adds	r3, #40	; 0x28
 802a0c6:	4619      	mov	r1, r3
 802a0c8:	4610      	mov	r0, r2
 802a0ca:	f7fb ffe0 	bl	802608e <fe_sq>
    fe_sq2(r->T, p->Z);
 802a0ce:	687b      	ldr	r3, [r7, #4]
 802a0d0:	f103 0278 	add.w	r2, r3, #120	; 0x78
 802a0d4:	683b      	ldr	r3, [r7, #0]
 802a0d6:	3350      	adds	r3, #80	; 0x50
 802a0d8:	4619      	mov	r1, r3
 802a0da:	4610      	mov	r0, r2
 802a0dc:	f7fd fba6 	bl	802782c <fe_sq2>
    fe_add(r->Y, p->X, p->Y);
 802a0e0:	687b      	ldr	r3, [r7, #4]
 802a0e2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a0e6:	6839      	ldr	r1, [r7, #0]
 802a0e8:	683b      	ldr	r3, [r7, #0]
 802a0ea:	3328      	adds	r3, #40	; 0x28
 802a0ec:	461a      	mov	r2, r3
 802a0ee:	f7f8 f9e0 	bl	80224b2 <fe_add>
    fe_sq(t0, r->Y);
 802a0f2:	687b      	ldr	r3, [r7, #4]
 802a0f4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 802a0f8:	f107 0308 	add.w	r3, r7, #8
 802a0fc:	4611      	mov	r1, r2
 802a0fe:	4618      	mov	r0, r3
 802a100:	f7fb ffc5 	bl	802608e <fe_sq>
    fe_add(r->Y, r->Z, r->X);
 802a104:	687b      	ldr	r3, [r7, #4]
 802a106:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a10a:	687b      	ldr	r3, [r7, #4]
 802a10c:	3350      	adds	r3, #80	; 0x50
 802a10e:	687a      	ldr	r2, [r7, #4]
 802a110:	4619      	mov	r1, r3
 802a112:	f7f8 f9ce 	bl	80224b2 <fe_add>
    fe_sub(r->Z, r->Z, r->X);
 802a116:	687b      	ldr	r3, [r7, #4]
 802a118:	f103 0050 	add.w	r0, r3, #80	; 0x50
 802a11c:	687b      	ldr	r3, [r7, #4]
 802a11e:	3350      	adds	r3, #80	; 0x50
 802a120:	687a      	ldr	r2, [r7, #4]
 802a122:	4619      	mov	r1, r3
 802a124:	f7ff f806 	bl	8029134 <fe_sub>
    fe_sub(r->X, t0, r->Y);
 802a128:	6878      	ldr	r0, [r7, #4]
 802a12a:	687b      	ldr	r3, [r7, #4]
 802a12c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 802a130:	f107 0308 	add.w	r3, r7, #8
 802a134:	4619      	mov	r1, r3
 802a136:	f7fe fffd 	bl	8029134 <fe_sub>
    fe_sub(r->T, r->T, r->Z);
 802a13a:	687b      	ldr	r3, [r7, #4]
 802a13c:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802a140:	687b      	ldr	r3, [r7, #4]
 802a142:	f103 0178 	add.w	r1, r3, #120	; 0x78
 802a146:	687b      	ldr	r3, [r7, #4]
 802a148:	3350      	adds	r3, #80	; 0x50
 802a14a:	461a      	mov	r2, r3
 802a14c:	f7fe fff2 	bl	8029134 <fe_sub>
}
 802a150:	bf00      	nop
 802a152:	3730      	adds	r7, #48	; 0x30
 802a154:	46bd      	mov	sp, r7
 802a156:	bd80      	pop	{r7, pc}

0802a158 <ge_p3_dbl>:

/*
r = 2 * p
*/

void ge_p3_dbl(ge_p1p1 *r, const ge_p3 *p) {
 802a158:	b580      	push	{r7, lr}
 802a15a:	b0a0      	sub	sp, #128	; 0x80
 802a15c:	af00      	add	r7, sp, #0
 802a15e:	6078      	str	r0, [r7, #4]
 802a160:	6039      	str	r1, [r7, #0]
    ge_p2 q;
    ge_p3_to_p2(&q, p);
 802a162:	f107 0308 	add.w	r3, r7, #8
 802a166:	6839      	ldr	r1, [r7, #0]
 802a168:	4618      	mov	r0, r3
 802a16a:	f000 f839 	bl	802a1e0 <ge_p3_to_p2>
    ge_p2_dbl(r, &q);
 802a16e:	f107 0308 	add.w	r3, r7, #8
 802a172:	4619      	mov	r1, r3
 802a174:	6878      	ldr	r0, [r7, #4]
 802a176:	f7ff ff96 	bl	802a0a6 <ge_p2_dbl>
}
 802a17a:	bf00      	nop
 802a17c:	3780      	adds	r7, #128	; 0x80
 802a17e:	46bd      	mov	sp, r7
 802a180:	bd80      	pop	{r7, pc}
	...

0802a184 <ge_p3_to_cached>:

static const fe d2 = {
    -21827239, -5839606, -30745221, 13898782, 229458, 15978800, -12551817, -6495438, 29715968, 9444199
};

void ge_p3_to_cached(ge_cached *r, const ge_p3 *p) {
 802a184:	b580      	push	{r7, lr}
 802a186:	b082      	sub	sp, #8
 802a188:	af00      	add	r7, sp, #0
 802a18a:	6078      	str	r0, [r7, #4]
 802a18c:	6039      	str	r1, [r7, #0]
    fe_add(r->YplusX, p->Y, p->X);
 802a18e:	6878      	ldr	r0, [r7, #4]
 802a190:	683b      	ldr	r3, [r7, #0]
 802a192:	3328      	adds	r3, #40	; 0x28
 802a194:	683a      	ldr	r2, [r7, #0]
 802a196:	4619      	mov	r1, r3
 802a198:	f7f8 f98b 	bl	80224b2 <fe_add>
    fe_sub(r->YminusX, p->Y, p->X);
 802a19c:	687b      	ldr	r3, [r7, #4]
 802a19e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a1a2:	683b      	ldr	r3, [r7, #0]
 802a1a4:	3328      	adds	r3, #40	; 0x28
 802a1a6:	683a      	ldr	r2, [r7, #0]
 802a1a8:	4619      	mov	r1, r3
 802a1aa:	f7fe ffc3 	bl	8029134 <fe_sub>
    fe_copy(r->Z, p->Z);
 802a1ae:	687b      	ldr	r3, [r7, #4]
 802a1b0:	f103 0250 	add.w	r2, r3, #80	; 0x50
 802a1b4:	683b      	ldr	r3, [r7, #0]
 802a1b6:	3350      	adds	r3, #80	; 0x50
 802a1b8:	4619      	mov	r1, r3
 802a1ba:	4610      	mov	r0, r2
 802a1bc:	f7f8 fa14 	bl	80225e8 <fe_copy>
    fe_mul(r->T2d, p->T, d2);
 802a1c0:	687b      	ldr	r3, [r7, #4]
 802a1c2:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802a1c6:	683b      	ldr	r3, [r7, #0]
 802a1c8:	3378      	adds	r3, #120	; 0x78
 802a1ca:	4a04      	ldr	r2, [pc, #16]	; (802a1dc <ge_p3_to_cached+0x58>)
 802a1cc:	4619      	mov	r1, r3
 802a1ce:	f7f9 f84f 	bl	8023270 <fe_mul>
}
 802a1d2:	bf00      	nop
 802a1d4:	3708      	adds	r7, #8
 802a1d6:	46bd      	mov	sp, r7
 802a1d8:	bd80      	pop	{r7, pc}
 802a1da:	bf00      	nop
 802a1dc:	0803e544 	.word	0x0803e544

0802a1e0 <ge_p3_to_p2>:

/*
r = p
*/

void ge_p3_to_p2(ge_p2 *r, const ge_p3 *p) {
 802a1e0:	b580      	push	{r7, lr}
 802a1e2:	b082      	sub	sp, #8
 802a1e4:	af00      	add	r7, sp, #0
 802a1e6:	6078      	str	r0, [r7, #4]
 802a1e8:	6039      	str	r1, [r7, #0]
    fe_copy(r->X, p->X);
 802a1ea:	687b      	ldr	r3, [r7, #4]
 802a1ec:	683a      	ldr	r2, [r7, #0]
 802a1ee:	4611      	mov	r1, r2
 802a1f0:	4618      	mov	r0, r3
 802a1f2:	f7f8 f9f9 	bl	80225e8 <fe_copy>
    fe_copy(r->Y, p->Y);
 802a1f6:	687b      	ldr	r3, [r7, #4]
 802a1f8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 802a1fc:	683b      	ldr	r3, [r7, #0]
 802a1fe:	3328      	adds	r3, #40	; 0x28
 802a200:	4619      	mov	r1, r3
 802a202:	4610      	mov	r0, r2
 802a204:	f7f8 f9f0 	bl	80225e8 <fe_copy>
    fe_copy(r->Z, p->Z);
 802a208:	687b      	ldr	r3, [r7, #4]
 802a20a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 802a20e:	683b      	ldr	r3, [r7, #0]
 802a210:	3350      	adds	r3, #80	; 0x50
 802a212:	4619      	mov	r1, r3
 802a214:	4610      	mov	r0, r2
 802a216:	f7f8 f9e7 	bl	80225e8 <fe_copy>
}
 802a21a:	bf00      	nop
 802a21c:	3708      	adds	r7, #8
 802a21e:	46bd      	mov	sp, r7
 802a220:	bd80      	pop	{r7, pc}

0802a222 <ge_sub>:

/*
r = p - q
*/

void ge_sub(ge_p1p1 *r, const ge_p3 *p, const ge_cached *q) {
 802a222:	b580      	push	{r7, lr}
 802a224:	b08e      	sub	sp, #56	; 0x38
 802a226:	af00      	add	r7, sp, #0
 802a228:	60f8      	str	r0, [r7, #12]
 802a22a:	60b9      	str	r1, [r7, #8]
 802a22c:	607a      	str	r2, [r7, #4]
    fe t0;
    
    fe_add(r->X, p->Y, p->X);
 802a22e:	68f8      	ldr	r0, [r7, #12]
 802a230:	68bb      	ldr	r3, [r7, #8]
 802a232:	3328      	adds	r3, #40	; 0x28
 802a234:	68ba      	ldr	r2, [r7, #8]
 802a236:	4619      	mov	r1, r3
 802a238:	f7f8 f93b 	bl	80224b2 <fe_add>
    fe_sub(r->Y, p->Y, p->X);
 802a23c:	68fb      	ldr	r3, [r7, #12]
 802a23e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a242:	68bb      	ldr	r3, [r7, #8]
 802a244:	3328      	adds	r3, #40	; 0x28
 802a246:	68ba      	ldr	r2, [r7, #8]
 802a248:	4619      	mov	r1, r3
 802a24a:	f7fe ff73 	bl	8029134 <fe_sub>
    fe_mul(r->Z, r->X, q->YminusX);
 802a24e:	68fb      	ldr	r3, [r7, #12]
 802a250:	f103 0050 	add.w	r0, r3, #80	; 0x50
 802a254:	68f9      	ldr	r1, [r7, #12]
 802a256:	687b      	ldr	r3, [r7, #4]
 802a258:	3328      	adds	r3, #40	; 0x28
 802a25a:	461a      	mov	r2, r3
 802a25c:	f7f9 f808 	bl	8023270 <fe_mul>
    fe_mul(r->Y, r->Y, q->YplusX);
 802a260:	68fb      	ldr	r3, [r7, #12]
 802a262:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a266:	68fb      	ldr	r3, [r7, #12]
 802a268:	3328      	adds	r3, #40	; 0x28
 802a26a:	687a      	ldr	r2, [r7, #4]
 802a26c:	4619      	mov	r1, r3
 802a26e:	f7f8 ffff 	bl	8023270 <fe_mul>
    fe_mul(r->T, q->T2d, p->T);
 802a272:	68fb      	ldr	r3, [r7, #12]
 802a274:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802a278:	687b      	ldr	r3, [r7, #4]
 802a27a:	f103 0178 	add.w	r1, r3, #120	; 0x78
 802a27e:	68bb      	ldr	r3, [r7, #8]
 802a280:	3378      	adds	r3, #120	; 0x78
 802a282:	461a      	mov	r2, r3
 802a284:	f7f8 fff4 	bl	8023270 <fe_mul>
    fe_mul(r->X, p->Z, q->Z);
 802a288:	68f8      	ldr	r0, [r7, #12]
 802a28a:	68bb      	ldr	r3, [r7, #8]
 802a28c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802a290:	687b      	ldr	r3, [r7, #4]
 802a292:	3350      	adds	r3, #80	; 0x50
 802a294:	461a      	mov	r2, r3
 802a296:	f7f8 ffeb 	bl	8023270 <fe_mul>
    fe_add(t0, r->X, r->X);
 802a29a:	68f9      	ldr	r1, [r7, #12]
 802a29c:	68fa      	ldr	r2, [r7, #12]
 802a29e:	f107 0310 	add.w	r3, r7, #16
 802a2a2:	4618      	mov	r0, r3
 802a2a4:	f7f8 f905 	bl	80224b2 <fe_add>
    fe_sub(r->X, r->Z, r->Y);
 802a2a8:	68f8      	ldr	r0, [r7, #12]
 802a2aa:	68fb      	ldr	r3, [r7, #12]
 802a2ac:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802a2b0:	68fb      	ldr	r3, [r7, #12]
 802a2b2:	3328      	adds	r3, #40	; 0x28
 802a2b4:	461a      	mov	r2, r3
 802a2b6:	f7fe ff3d 	bl	8029134 <fe_sub>
    fe_add(r->Y, r->Z, r->Y);
 802a2ba:	68fb      	ldr	r3, [r7, #12]
 802a2bc:	f103 0028 	add.w	r0, r3, #40	; 0x28
 802a2c0:	68fb      	ldr	r3, [r7, #12]
 802a2c2:	f103 0150 	add.w	r1, r3, #80	; 0x50
 802a2c6:	68fb      	ldr	r3, [r7, #12]
 802a2c8:	3328      	adds	r3, #40	; 0x28
 802a2ca:	461a      	mov	r2, r3
 802a2cc:	f7f8 f8f1 	bl	80224b2 <fe_add>
    fe_sub(r->Z, t0, r->T);
 802a2d0:	68fb      	ldr	r3, [r7, #12]
 802a2d2:	f103 0050 	add.w	r0, r3, #80	; 0x50
 802a2d6:	68fb      	ldr	r3, [r7, #12]
 802a2d8:	f103 0278 	add.w	r2, r3, #120	; 0x78
 802a2dc:	f107 0310 	add.w	r3, r7, #16
 802a2e0:	4619      	mov	r1, r3
 802a2e2:	f7fe ff27 	bl	8029134 <fe_sub>
    fe_add(r->T, t0, r->T);
 802a2e6:	68fb      	ldr	r3, [r7, #12]
 802a2e8:	f103 0078 	add.w	r0, r3, #120	; 0x78
 802a2ec:	68fb      	ldr	r3, [r7, #12]
 802a2ee:	f103 0278 	add.w	r2, r3, #120	; 0x78
 802a2f2:	f107 0310 	add.w	r3, r7, #16
 802a2f6:	4619      	mov	r1, r3
 802a2f8:	f7f8 f8db 	bl	80224b2 <fe_add>
}
 802a2fc:	bf00      	nop
 802a2fe:	3738      	adds	r7, #56	; 0x38
 802a300:	46bd      	mov	sp, r7
 802a302:	bd80      	pop	{r7, pc}

0802a304 <ge_tobytes>:


void ge_tobytes(unsigned char *s, const ge_p2 *h) {
 802a304:	b580      	push	{r7, lr}
 802a306:	b0a0      	sub	sp, #128	; 0x80
 802a308:	af00      	add	r7, sp, #0
 802a30a:	6078      	str	r0, [r7, #4]
 802a30c:	6039      	str	r1, [r7, #0]
    fe recip;
    fe x;
    fe y;
    fe_invert(recip, h->Z);
 802a30e:	683b      	ldr	r3, [r7, #0]
 802a310:	f103 0250 	add.w	r2, r3, #80	; 0x50
 802a314:	f107 0358 	add.w	r3, r7, #88	; 0x58
 802a318:	4611      	mov	r1, r2
 802a31a:	4618      	mov	r0, r3
 802a31c:	f7f8 fd12 	bl	8022d44 <fe_invert>
    fe_mul(x, h->X, recip);
 802a320:	6839      	ldr	r1, [r7, #0]
 802a322:	f107 0258 	add.w	r2, r7, #88	; 0x58
 802a326:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a32a:	4618      	mov	r0, r3
 802a32c:	f7f8 ffa0 	bl	8023270 <fe_mul>
    fe_mul(y, h->Y, recip);
 802a330:	683b      	ldr	r3, [r7, #0]
 802a332:	f103 0128 	add.w	r1, r3, #40	; 0x28
 802a336:	f107 0258 	add.w	r2, r7, #88	; 0x58
 802a33a:	f107 0308 	add.w	r3, r7, #8
 802a33e:	4618      	mov	r0, r3
 802a340:	f7f8 ff96 	bl	8023270 <fe_mul>
    fe_tobytes(s, y);
 802a344:	f107 0308 	add.w	r3, r7, #8
 802a348:	4619      	mov	r1, r3
 802a34a:	6878      	ldr	r0, [r7, #4]
 802a34c:	f7fe ff8d 	bl	802926a <fe_tobytes>
    s[31] ^= fe_isnegative(x) << 7;
 802a350:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802a354:	4618      	mov	r0, r3
 802a356:	f7f8 fe9c 	bl	8023092 <fe_isnegative>
 802a35a:	4603      	mov	r3, r0
 802a35c:	01d9      	lsls	r1, r3, #7
 802a35e:	687b      	ldr	r3, [r7, #4]
 802a360:	331f      	adds	r3, #31
 802a362:	781b      	ldrb	r3, [r3, #0]
 802a364:	b25a      	sxtb	r2, r3
 802a366:	b24b      	sxtb	r3, r1
 802a368:	4053      	eors	r3, r2
 802a36a:	b25a      	sxtb	r2, r3
 802a36c:	687b      	ldr	r3, [r7, #4]
 802a36e:	331f      	adds	r3, #31
 802a370:	b2d2      	uxtb	r2, r2
 802a372:	701a      	strb	r2, [r3, #0]
}
 802a374:	bf00      	nop
 802a376:	3780      	adds	r7, #128	; 0x80
 802a378:	46bd      	mov	sp, r7
 802a37a:	bd80      	pop	{r7, pc}

0802a37c <goto_application>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void goto_application(uint32_t slotadd)
{
 802a37c:	b580      	push	{r7, lr}
 802a37e:	b084      	sub	sp, #16
 802a380:	af00      	add	r7, sp, #0
 802a382:	6078      	str	r0, [r7, #4]
//  printf("Gonna Jump to Application\r\n");

  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (slotadd + 4U)));
 802a384:	687b      	ldr	r3, [r7, #4]
 802a386:	3304      	adds	r3, #4
 802a388:	681b      	ldr	r3, [r3, #0]
 802a38a:	60fb      	str	r3, [r7, #12]

//  __set_MSP(*(volatile uint32_t*) 0x08020000);

  // Turn OFF the Green Led to tell the user that Bootloader is not running
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
  app_reset_handler();    //call the app reset handler
 802a38c:	68fb      	ldr	r3, [r7, #12]
 802a38e:	4798      	blx	r3
}
 802a390:	bf00      	nop
 802a392:	3710      	adds	r7, #16
 802a394:	46bd      	mov	sp, r7
 802a396:	bd80      	pop	{r7, pc}

0802a398 <HAL_UART_RxCpltCallback>:
uint8_t rx = 0;
uint8_t rx_header[15] = {0,};
uint8_t buftest[] = "NGUYEN VAN NHI";
uint32_t crc = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 802a398:	b580      	push	{r7, lr}
 802a39a:	b082      	sub	sp, #8
 802a39c:	af00      	add	r7, sp, #0
 802a39e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart6.Instance){
 802a3a0:	687b      	ldr	r3, [r7, #4]
 802a3a2:	681a      	ldr	r2, [r3, #0]
 802a3a4:	4b0e      	ldr	r3, [pc, #56]	; (802a3e0 <HAL_UART_RxCpltCallback+0x48>)
 802a3a6:	681b      	ldr	r3, [r3, #0]
 802a3a8:	429a      	cmp	r2, r3
 802a3aa:	d115      	bne.n	802a3d8 <HAL_UART_RxCpltCallback+0x40>
			if(!strncmp("OTA",(char*)rx_buf, 3)){
 802a3ac:	2203      	movs	r2, #3
 802a3ae:	490d      	ldr	r1, [pc, #52]	; (802a3e4 <HAL_UART_RxCpltCallback+0x4c>)
 802a3b0:	480d      	ldr	r0, [pc, #52]	; (802a3e8 <HAL_UART_RxCpltCallback+0x50>)
 802a3b2:	f010 f842 	bl	803a43a <strncmp>
 802a3b6:	4603      	mov	r3, r0
 802a3b8:	2b00      	cmp	r3, #0
 802a3ba:	d103      	bne.n	802a3c4 <HAL_UART_RxCpltCallback+0x2c>
				flag = 1;
 802a3bc:	4b0b      	ldr	r3, [pc, #44]	; (802a3ec <HAL_UART_RxCpltCallback+0x54>)
 802a3be:	2201      	movs	r2, #1
 802a3c0:	701a      	strb	r2, [r3, #0]
 802a3c2:	e004      	b.n	802a3ce <HAL_UART_RxCpltCallback+0x36>
			}
			else{
				HAL_UART_Receive_IT(&huart6, rx_buf, 3);
 802a3c4:	2203      	movs	r2, #3
 802a3c6:	4907      	ldr	r1, [pc, #28]	; (802a3e4 <HAL_UART_RxCpltCallback+0x4c>)
 802a3c8:	4805      	ldr	r0, [pc, #20]	; (802a3e0 <HAL_UART_RxCpltCallback+0x48>)
 802a3ca:	f00a fda6 	bl	8034f1a <HAL_UART_Receive_IT>
			}
			memset(rx_buf, 0, 3);
 802a3ce:	2203      	movs	r2, #3
 802a3d0:	2100      	movs	r1, #0
 802a3d2:	4804      	ldr	r0, [pc, #16]	; (802a3e4 <HAL_UART_RxCpltCallback+0x4c>)
 802a3d4:	f00f f88c 	bl	80394f0 <memset>
	}
}
 802a3d8:	bf00      	nop
 802a3da:	3708      	adds	r7, #8
 802a3dc:	46bd      	mov	sp, r7
 802a3de:	bd80      	pop	{r7, pc}
 802a3e0:	20000464 	.word	0x20000464
 802a3e4:	200002ac 	.word	0x200002ac
 802a3e8:	0803d918 	.word	0x0803d918
 802a3ec:	200002af 	.word	0x200002af

0802a3f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802a3f0:	b580      	push	{r7, lr}
 802a3f2:	f5ad 6d9e 	sub.w	sp, sp, #1264	; 0x4f0
 802a3f6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 802a3f8:	f007 fe18 	bl	803202c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802a3fc:	f000 fba8 	bl	802ab50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 802a400:	f000 fcd6 	bl	802adb0 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 802a404:	f000 fcaa 	bl	802ad5c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 802a408:	f000 fc2c 	bl	802ac64 <MX_TIM1_Init>
  MX_SDIO_SD_Init();
 802a40c:	f000 fc0a 	bl	802ac24 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 802a410:	f00c f99e 	bl	8036750 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 802a414:	f000 fc78 	bl	802ad08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart6, rx_buf, 3);
 802a418:	2203      	movs	r2, #3
 802a41a:	4928      	ldr	r1, [pc, #160]	; (802a4bc <main+0xcc>)
 802a41c:	4828      	ldr	r0, [pc, #160]	; (802a4c0 <main+0xd0>)
 802a41e:	f00a fd7c 	bl	8034f1a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim1);
 802a422:	4828      	ldr	r0, [pc, #160]	; (802a4c4 <main+0xd4>)
 802a424:	f00a f912 	bl	803464c <HAL_TIM_Base_Start>
  uint16_t time = 0;
 802a428:	2300      	movs	r3, #0
 802a42a:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
  uint32_t total_time = 0;
 802a42e:	2300      	movs	r3, #0
 802a430:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
  uint8_t buffer[100] = {0,};
 802a434:	2300      	movs	r3, #0
 802a436:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 802a43a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 802a43e:	2260      	movs	r2, #96	; 0x60
 802a440:	2100      	movs	r1, #0
 802a442:	4618      	mov	r0, r3
 802a444:	f00f f854 	bl	80394f0 <memset>
//  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
//  HAL_Delay(500);
//  goto_application(FLASH_SLOT_1_ADD);
  FATFS fatfs;
  FIL myfile;
  const char *file_name = "APPLICATION_F407.bin";
 802a448:	4b1f      	ldr	r3, [pc, #124]	; (802a4c8 <main+0xd8>)
 802a44a:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
  uint8_t mode = FA_READ;
 802a44e:	2301      	movs	r3, #1
 802a450:	f887 34d3 	strb.w	r3, [r7, #1235]	; 0x4d3
  defFlashSlot slot = FLASH_SLOT_0;
 802a454:	2300      	movs	r3, #0
 802a456:	f887 34d2 	strb.w	r3, [r7, #1234]	; 0x4d2


  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 802a45a:	2201      	movs	r2, #1
 802a45c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802a460:	481a      	ldr	r0, [pc, #104]	; (802a4cc <main+0xdc>)
 802a462:	f008 fc91 	bl	8032d88 <HAL_GPIO_WritePin>
//	  HAL_Delay(1000);
//	  goto_application(FLASH_SLOT_1_ADD);
//
//	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==GPIO_PIN_RESET) goto_application(FLASH_SLOT_1_ADD);

	  HAL_UART_Transmit(&huart2, "\r*****THIS IS BOOTLOADER PROGRAM*****\n\r", 39, 1000);
 802a466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a46a:	2227      	movs	r2, #39	; 0x27
 802a46c:	4918      	ldr	r1, [pc, #96]	; (802a4d0 <main+0xe0>)
 802a46e:	4819      	ldr	r0, [pc, #100]	; (802a4d4 <main+0xe4>)
 802a470:	f00a fc1f 	bl	8034cb2 <HAL_UART_Transmit>
	  Frame_ReadCfg(&Flash_Cfg);
 802a474:	4818      	ldr	r0, [pc, #96]	; (802a4d8 <main+0xe8>)
 802a476:	f7f7 fb3f 	bl	8021af8 <Frame_ReadCfg>
	  if((defResetCause)Flash_Cfg.ResetCause == RESET_NORMAL){
 802a47a:	4b17      	ldr	r3, [pc, #92]	; (802a4d8 <main+0xe8>)
 802a47c:	785b      	ldrb	r3, [r3, #1]
 802a47e:	2b00      	cmp	r3, #0
 802a480:	d134      	bne.n	802a4ec <main+0xfc>
		  if(Flash_Cfg.FlashOnGoing == FLASH_SLOT_1){
 802a482:	4b15      	ldr	r3, [pc, #84]	; (802a4d8 <main+0xe8>)
 802a484:	781b      	ldrb	r3, [r3, #0]
 802a486:	2b01      	cmp	r3, #1
 802a488:	d109      	bne.n	802a49e <main+0xae>
			  HAL_UART_Transmit(&huart2, "\r*****APPLICATION1 IS RUNNING*****\n\r", 39, 1000);
 802a48a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a48e:	2227      	movs	r2, #39	; 0x27
 802a490:	4912      	ldr	r1, [pc, #72]	; (802a4dc <main+0xec>)
 802a492:	4810      	ldr	r0, [pc, #64]	; (802a4d4 <main+0xe4>)
 802a494:	f00a fc0d 	bl	8034cb2 <HAL_UART_Transmit>
			  goto_application(FLASH_SLOT_1_ADD);
 802a498:	4811      	ldr	r0, [pc, #68]	; (802a4e0 <main+0xf0>)
 802a49a:	f7ff ff6f 	bl	802a37c <goto_application>
		  }

		  if(Flash_Cfg.FlashOnGoing == FLASH_SLOT_2){
 802a49e:	4b0e      	ldr	r3, [pc, #56]	; (802a4d8 <main+0xe8>)
 802a4a0:	781b      	ldrb	r3, [r3, #0]
 802a4a2:	2b02      	cmp	r3, #2
 802a4a4:	d1df      	bne.n	802a466 <main+0x76>
			  HAL_UART_Transmit(&huart2, "\r*****APPLICATION2 IS RUNNING*****\n\r", 39, 1000);
 802a4a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a4aa:	2227      	movs	r2, #39	; 0x27
 802a4ac:	490d      	ldr	r1, [pc, #52]	; (802a4e4 <main+0xf4>)
 802a4ae:	4809      	ldr	r0, [pc, #36]	; (802a4d4 <main+0xe4>)
 802a4b0:	f00a fbff 	bl	8034cb2 <HAL_UART_Transmit>
			  goto_application(FLASH_SLOT_2_ADD);
 802a4b4:	480c      	ldr	r0, [pc, #48]	; (802a4e8 <main+0xf8>)
 802a4b6:	f7ff ff61 	bl	802a37c <goto_application>
 802a4ba:	e7d4      	b.n	802a466 <main+0x76>
 802a4bc:	200002ac 	.word	0x200002ac
 802a4c0:	20000464 	.word	0x20000464
 802a4c4:	20000398 	.word	0x20000398
 802a4c8:	0803d91c 	.word	0x0803d91c
 802a4cc:	40020c00 	.word	0x40020c00
 802a4d0:	0803d934 	.word	0x0803d934
 802a4d4:	200004e8 	.word	0x200004e8
 802a4d8:	200002a8 	.word	0x200002a8
 802a4dc:	0803d95c 	.word	0x0803d95c
 802a4e0:	08060000 	.word	0x08060000
 802a4e4:	0803d984 	.word	0x0803d984
 802a4e8:	080a0000 	.word	0x080a0000
		  }

	  }
	  else if((defResetCause)Flash_Cfg.ResetCause == RESET_OTA){
 802a4ec:	4bb8      	ldr	r3, [pc, #736]	; (802a7d0 <main+0x3e0>)
 802a4ee:	785b      	ldrb	r3, [r3, #1]
 802a4f0:	2b01      	cmp	r3, #1
 802a4f2:	f040 82fa 	bne.w	802aaea <main+0x6fa>
		  while(flag == 0);
 802a4f6:	bf00      	nop
 802a4f8:	4bb6      	ldr	r3, [pc, #728]	; (802a7d4 <main+0x3e4>)
 802a4fa:	781b      	ldrb	r3, [r3, #0]
 802a4fc:	2b00      	cmp	r3, #0
 802a4fe:	d0fb      	beq.n	802a4f8 <main+0x108>
		  if(flag == 1){
 802a500:	4bb4      	ldr	r3, [pc, #720]	; (802a7d4 <main+0x3e4>)
 802a502:	781b      	ldrb	r3, [r3, #0]
 802a504:	2b01      	cmp	r3, #1
 802a506:	d1ae      	bne.n	802a466 <main+0x76>
			  {
				  HAL_UART_Transmit(&huart2, "\r       UPDATING OTA...\n\r", 25, 1000);
 802a508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a50c:	2219      	movs	r2, #25
 802a50e:	49b2      	ldr	r1, [pc, #712]	; (802a7d8 <main+0x3e8>)
 802a510:	48b2      	ldr	r0, [pc, #712]	; (802a7dc <main+0x3ec>)
 802a512:	f00a fbce 	bl	8034cb2 <HAL_UART_Transmit>
				  Flash_Cfg.ResetCause = RESET_NORMAL;
 802a516:	4bae      	ldr	r3, [pc, #696]	; (802a7d0 <main+0x3e0>)
 802a518:	2200      	movs	r2, #0
 802a51a:	705a      	strb	r2, [r3, #1]
				  if(Flash_Cfg.FlashOnGoing == FLASH_SLOT_1){
 802a51c:	4bac      	ldr	r3, [pc, #688]	; (802a7d0 <main+0x3e0>)
 802a51e:	781b      	ldrb	r3, [r3, #0]
 802a520:	2b01      	cmp	r3, #1
 802a522:	f040 8185 	bne.w	802a830 <main+0x440>
					  TIM1->CNT = 0;
 802a526:	4bae      	ldr	r3, [pc, #696]	; (802a7e0 <main+0x3f0>)
 802a528:	2200      	movs	r2, #0
 802a52a:	625a      	str	r2, [r3, #36]	; 0x24
					  if(ota_and_write_to_sd_card(&fatfs, &myfile, "appb.bin", FA_WRITE|FA_CREATE_ALWAYS) == HAL_OK) {
 802a52c:	1d39      	adds	r1, r7, #4
 802a52e:	f507 700d 	add.w	r0, r7, #564	; 0x234
 802a532:	230a      	movs	r3, #10
 802a534:	4aab      	ldr	r2, [pc, #684]	; (802a7e4 <main+0x3f4>)
 802a536:	f7f7 fb03 	bl	8021b40 <ota_and_write_to_sd_card>
 802a53a:	4603      	mov	r3, r0
 802a53c:	2b00      	cmp	r3, #0
 802a53e:	f040 8140 	bne.w	802a7c2 <main+0x3d2>
						  time = TIM1->CNT;
 802a542:	4ba7      	ldr	r3, [pc, #668]	; (802a7e0 <main+0x3f0>)
 802a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a546:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
						  total_time += time;
 802a54a:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802a54e:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	; 0x4dc
 802a552:	4413      	add	r3, r2
 802a554:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
						  HAL_UART_Transmit(&huart2, "\r       OTA SUCCESSFULL !!!\n\r", 29, 1000);
 802a558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a55c:	221d      	movs	r2, #29
 802a55e:	49a2      	ldr	r1, [pc, #648]	; (802a7e8 <main+0x3f8>)
 802a560:	489e      	ldr	r0, [pc, #632]	; (802a7dc <main+0x3ec>)
 802a562:	f00a fba6 	bl	8034cb2 <HAL_UART_Transmit>
						  sprintf(buffer,"\r            -TIME: %.2f\n\r", (float)time/5.0);
 802a566:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802a56a:	ee07 3a90 	vmov	s15, r3
 802a56e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a572:	ee17 0a90 	vmov	r0, s15
 802a576:	f7f5 ffe7 	bl	8020548 <__aeabi_f2d>
 802a57a:	f04f 0200 	mov.w	r2, #0
 802a57e:	4b9b      	ldr	r3, [pc, #620]	; (802a7ec <main+0x3fc>)
 802a580:	f7f6 f964 	bl	802084c <__aeabi_ddiv>
 802a584:	4602      	mov	r2, r0
 802a586:	460b      	mov	r3, r1
 802a588:	f207 4064 	addw	r0, r7, #1124	; 0x464
 802a58c:	4998      	ldr	r1, [pc, #608]	; (802a7f0 <main+0x400>)
 802a58e:	f00f fef1 	bl	803a374 <siprintf>
						  HAL_UART_Transmit(&huart2, buffer, 25, 1000);
 802a592:	f207 4164 	addw	r1, r7, #1124	; 0x464
 802a596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a59a:	2219      	movs	r2, #25
 802a59c:	488f      	ldr	r0, [pc, #572]	; (802a7dc <main+0x3ec>)
 802a59e:	f00a fb88 	bl	8034cb2 <HAL_UART_Transmit>
						  memset(buffer, 0, 100);
 802a5a2:	f207 4364 	addw	r3, r7, #1124	; 0x464
 802a5a6:	2264      	movs	r2, #100	; 0x64
 802a5a8:	2100      	movs	r1, #0
 802a5aa:	4618      	mov	r0, r3
 802a5ac:	f00e ffa0 	bl	80394f0 <memset>

						  TIM1->CNT = 0;
 802a5b0:	4b8b      	ldr	r3, [pc, #556]	; (802a7e0 <main+0x3f0>)
 802a5b2:	2200      	movs	r2, #0
 802a5b4:	625a      	str	r2, [r3, #36]	; 0x24
						  int size_file = read_file_and_store_into_flash(&fatfs,&myfile,"appb.bin", FA_READ, FLASH_SLOT_2, signature, publickey, hashvalue);
 802a5b6:	1d39      	adds	r1, r7, #4
 802a5b8:	f507 700d 	add.w	r0, r7, #564	; 0x234
 802a5bc:	4b8d      	ldr	r3, [pc, #564]	; (802a7f4 <main+0x404>)
 802a5be:	9303      	str	r3, [sp, #12]
 802a5c0:	4b8d      	ldr	r3, [pc, #564]	; (802a7f8 <main+0x408>)
 802a5c2:	9302      	str	r3, [sp, #8]
 802a5c4:	4b8d      	ldr	r3, [pc, #564]	; (802a7fc <main+0x40c>)
 802a5c6:	9301      	str	r3, [sp, #4]
 802a5c8:	2302      	movs	r3, #2
 802a5ca:	9300      	str	r3, [sp, #0]
 802a5cc:	2301      	movs	r3, #1
 802a5ce:	4a85      	ldr	r2, [pc, #532]	; (802a7e4 <main+0x3f4>)
 802a5d0:	f7f7 fbbc 	bl	8021d4c <read_file_and_store_into_flash>
 802a5d4:	4603      	mov	r3, r0
 802a5d6:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
						  time = TIM1->CNT;
 802a5da:	4b81      	ldr	r3, [pc, #516]	; (802a7e0 <main+0x3f0>)
 802a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a5de:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
						  total_time += time;
 802a5e2:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802a5e6:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	; 0x4dc
 802a5ea:	4413      	add	r3, r2
 802a5ec:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
						  HAL_UART_Transmit(&huart2, "\r       -READ APPLICATION2 AND STORE IN FLASH\n\r", 50, 1000);
 802a5f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a5f4:	2232      	movs	r2, #50	; 0x32
 802a5f6:	4982      	ldr	r1, [pc, #520]	; (802a800 <main+0x410>)
 802a5f8:	4878      	ldr	r0, [pc, #480]	; (802a7dc <main+0x3ec>)
 802a5fa:	f00a fb5a 	bl	8034cb2 <HAL_UART_Transmit>
						  sprintf(buffer, "\r              +SIZE: %d BYTES\n\r              +TIME: %.2f(MS)\n\r", size_file, (float)time/5.0);
 802a5fe:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802a602:	ee07 3a90 	vmov	s15, r3
 802a606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a60a:	ee17 0a90 	vmov	r0, s15
 802a60e:	f7f5 ff9b 	bl	8020548 <__aeabi_f2d>
 802a612:	f04f 0200 	mov.w	r2, #0
 802a616:	4b75      	ldr	r3, [pc, #468]	; (802a7ec <main+0x3fc>)
 802a618:	f7f6 f918 	bl	802084c <__aeabi_ddiv>
 802a61c:	4602      	mov	r2, r0
 802a61e:	460b      	mov	r3, r1
 802a620:	f207 4064 	addw	r0, r7, #1124	; 0x464
 802a624:	e9cd 2300 	strd	r2, r3, [sp]
 802a628:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 802a62c:	4975      	ldr	r1, [pc, #468]	; (802a804 <main+0x414>)
 802a62e:	f00f fea1 	bl	803a374 <siprintf>
						  HAL_UART_Transmit(&huart2, buffer, 100, 1000);
 802a632:	f207 4164 	addw	r1, r7, #1124	; 0x464
 802a636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a63a:	2264      	movs	r2, #100	; 0x64
 802a63c:	4867      	ldr	r0, [pc, #412]	; (802a7dc <main+0x3ec>)
 802a63e:	f00a fb38 	bl	8034cb2 <HAL_UART_Transmit>
						  memset(buffer, 0, 100);
 802a642:	f207 4364 	addw	r3, r7, #1124	; 0x464
 802a646:	2264      	movs	r2, #100	; 0x64
 802a648:	2100      	movs	r1, #0
 802a64a:	4618      	mov	r0, r3
 802a64c:	f00e ff50 	bl	80394f0 <memset>

						  TIM1->CNT = 0;
 802a650:	4b63      	ldr	r3, [pc, #396]	; (802a7e0 <main+0x3f0>)
 802a652:	2200      	movs	r2, #0
 802a654:	625a      	str	r2, [r3, #36]	; 0x24
						  tree_hash_on_flash(FLASH_SLOT_2, md,size_file, &round);
 802a656:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	; 0x4c8
 802a65a:	4b6b      	ldr	r3, [pc, #428]	; (802a808 <main+0x418>)
 802a65c:	496b      	ldr	r1, [pc, #428]	; (802a80c <main+0x41c>)
 802a65e:	2002      	movs	r0, #2
 802a660:	f7f7 fcf8 	bl	8022054 <tree_hash_on_flash>
						  time = TIM1->CNT;
 802a664:	4b5e      	ldr	r3, [pc, #376]	; (802a7e0 <main+0x3f0>)
 802a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a668:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
						  total_time += time;
 802a66c:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802a670:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	; 0x4dc
 802a674:	4413      	add	r3, r2
 802a676:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
						  HAL_UART_Transmit(&huart2, "\r       -TREE HASH IN FLASH\n\r", 28, 1000);
 802a67a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a67e:	221c      	movs	r2, #28
 802a680:	4963      	ldr	r1, [pc, #396]	; (802a810 <main+0x420>)
 802a682:	4856      	ldr	r0, [pc, #344]	; (802a7dc <main+0x3ec>)
 802a684:	f00a fb15 	bl	8034cb2 <HAL_UART_Transmit>
						  sprintf(buffer, "\r              +TIME: %.2f(MS)\n\r", (float)time/5.0);
 802a688:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802a68c:	ee07 3a90 	vmov	s15, r3
 802a690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a694:	ee17 0a90 	vmov	r0, s15
 802a698:	f7f5 ff56 	bl	8020548 <__aeabi_f2d>
 802a69c:	f04f 0200 	mov.w	r2, #0
 802a6a0:	4b52      	ldr	r3, [pc, #328]	; (802a7ec <main+0x3fc>)
 802a6a2:	f7f6 f8d3 	bl	802084c <__aeabi_ddiv>
 802a6a6:	4602      	mov	r2, r0
 802a6a8:	460b      	mov	r3, r1
 802a6aa:	f207 4064 	addw	r0, r7, #1124	; 0x464
 802a6ae:	4959      	ldr	r1, [pc, #356]	; (802a814 <main+0x424>)
 802a6b0:	f00f fe60 	bl	803a374 <siprintf>
						  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 802a6b4:	f207 4164 	addw	r1, r7, #1124	; 0x464
 802a6b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a6bc:	2228      	movs	r2, #40	; 0x28
 802a6be:	4847      	ldr	r0, [pc, #284]	; (802a7dc <main+0x3ec>)
 802a6c0:	f00a faf7 	bl	8034cb2 <HAL_UART_Transmit>
						  memset(buffer, 0, 100);
 802a6c4:	f207 4364 	addw	r3, r7, #1124	; 0x464
 802a6c8:	2264      	movs	r2, #100	; 0x64
 802a6ca:	2100      	movs	r1, #0
 802a6cc:	4618      	mov	r0, r3
 802a6ce:	f00e ff0f 	bl	80394f0 <memset>

						  TIM1->CNT = 0;
 802a6d2:	4b43      	ldr	r3, [pc, #268]	; (802a7e0 <main+0x3f0>)
 802a6d4:	2200      	movs	r2, #0
 802a6d6:	625a      	str	r2, [r3, #36]	; 0x24
						  if (ed25519_verify(signature, md, 64, publickey)) {
 802a6d8:	4b47      	ldr	r3, [pc, #284]	; (802a7f8 <main+0x408>)
 802a6da:	2240      	movs	r2, #64	; 0x40
 802a6dc:	494b      	ldr	r1, [pc, #300]	; (802a80c <main+0x41c>)
 802a6de:	4847      	ldr	r0, [pc, #284]	; (802a7fc <main+0x40c>)
 802a6e0:	f007 fbfc 	bl	8031edc <ed25519_verify>
 802a6e4:	4603      	mov	r3, r0
 802a6e6:	2b00      	cmp	r3, #0
 802a6e8:	d064      	beq.n	802a7b4 <main+0x3c4>
							  time = TIM1->CNT;
 802a6ea:	4b3d      	ldr	r3, [pc, #244]	; (802a7e0 <main+0x3f0>)
 802a6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a6ee:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
							  total_time += time;
 802a6f2:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802a6f6:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	; 0x4dc
 802a6fa:	4413      	add	r3, r2
 802a6fc:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
							  HAL_UART_Transmit(&huart2, "\r       -VERIFY APPLICATION2 SUCCESSFULL\n\r", 60, 1000);
 802a700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a704:	223c      	movs	r2, #60	; 0x3c
 802a706:	4944      	ldr	r1, [pc, #272]	; (802a818 <main+0x428>)
 802a708:	4834      	ldr	r0, [pc, #208]	; (802a7dc <main+0x3ec>)
 802a70a:	f00a fad2 	bl	8034cb2 <HAL_UART_Transmit>
							  sprintf(buffer, "\r              +TIME: %.2f(MS)\n\r", (float)time/5.0);
 802a70e:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802a712:	ee07 3a90 	vmov	s15, r3
 802a716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a71a:	ee17 0a90 	vmov	r0, s15
 802a71e:	f7f5 ff13 	bl	8020548 <__aeabi_f2d>
 802a722:	f04f 0200 	mov.w	r2, #0
 802a726:	4b31      	ldr	r3, [pc, #196]	; (802a7ec <main+0x3fc>)
 802a728:	f7f6 f890 	bl	802084c <__aeabi_ddiv>
 802a72c:	4602      	mov	r2, r0
 802a72e:	460b      	mov	r3, r1
 802a730:	f207 4064 	addw	r0, r7, #1124	; 0x464
 802a734:	4937      	ldr	r1, [pc, #220]	; (802a814 <main+0x424>)
 802a736:	f00f fe1d 	bl	803a374 <siprintf>
							  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 802a73a:	f207 4164 	addw	r1, r7, #1124	; 0x464
 802a73e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a742:	2228      	movs	r2, #40	; 0x28
 802a744:	4825      	ldr	r0, [pc, #148]	; (802a7dc <main+0x3ec>)
 802a746:	f00a fab4 	bl	8034cb2 <HAL_UART_Transmit>
							  sprintf(buffer, "\r       -TOTAL TIME: %.2f(MS)\n\r", (float)total_time/5.0);
 802a74a:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 802a74e:	ee07 3a90 	vmov	s15, r3
 802a752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a756:	ee17 0a90 	vmov	r0, s15
 802a75a:	f7f5 fef5 	bl	8020548 <__aeabi_f2d>
 802a75e:	f04f 0200 	mov.w	r2, #0
 802a762:	4b22      	ldr	r3, [pc, #136]	; (802a7ec <main+0x3fc>)
 802a764:	f7f6 f872 	bl	802084c <__aeabi_ddiv>
 802a768:	4602      	mov	r2, r0
 802a76a:	460b      	mov	r3, r1
 802a76c:	f207 4064 	addw	r0, r7, #1124	; 0x464
 802a770:	492a      	ldr	r1, [pc, #168]	; (802a81c <main+0x42c>)
 802a772:	f00f fdff 	bl	803a374 <siprintf>
							  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 802a776:	f207 4164 	addw	r1, r7, #1124	; 0x464
 802a77a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a77e:	2228      	movs	r2, #40	; 0x28
 802a780:	4816      	ldr	r0, [pc, #88]	; (802a7dc <main+0x3ec>)
 802a782:	f00a fa96 	bl	8034cb2 <HAL_UART_Transmit>

							  HAL_UART_Transmit(&huart2, "\r*****APPLICATION2 IS RUNNING*****\n\r", 50, 1000);
 802a786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a78a:	2232      	movs	r2, #50	; 0x32
 802a78c:	4924      	ldr	r1, [pc, #144]	; (802a820 <main+0x430>)
 802a78e:	4813      	ldr	r0, [pc, #76]	; (802a7dc <main+0x3ec>)
 802a790:	f00a fa8f 	bl	8034cb2 <HAL_UART_Transmit>

							  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 802a794:	2201      	movs	r2, #1
 802a796:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802a79a:	4822      	ldr	r0, [pc, #136]	; (802a824 <main+0x434>)
 802a79c:	f008 faf4 	bl	8032d88 <HAL_GPIO_WritePin>
							  Flash_Cfg.FlashOnGoing = FLASH_SLOT_2;
 802a7a0:	4b0b      	ldr	r3, [pc, #44]	; (802a7d0 <main+0x3e0>)
 802a7a2:	2202      	movs	r2, #2
 802a7a4:	701a      	strb	r2, [r3, #0]
							  Frame_WriteCfg(&Flash_Cfg);
 802a7a6:	480a      	ldr	r0, [pc, #40]	; (802a7d0 <main+0x3e0>)
 802a7a8:	f7f7 f956 	bl	8021a58 <Frame_WriteCfg>
							  goto_application(FLASH_SLOT_2_ADD);
 802a7ac:	481e      	ldr	r0, [pc, #120]	; (802a828 <main+0x438>)
 802a7ae:	f7ff fde5 	bl	802a37c <goto_application>
 802a7b2:	e196      	b.n	802aae2 <main+0x6f2>
						  } else {
							  Frame_WriteCfg(&Flash_Cfg);
 802a7b4:	4806      	ldr	r0, [pc, #24]	; (802a7d0 <main+0x3e0>)
 802a7b6:	f7f7 f94f 	bl	8021a58 <Frame_WriteCfg>
							  goto_application(FLASH_SLOT_1_ADD);
 802a7ba:	481c      	ldr	r0, [pc, #112]	; (802a82c <main+0x43c>)
 802a7bc:	f7ff fdde 	bl	802a37c <goto_application>
 802a7c0:	e18f      	b.n	802aae2 <main+0x6f2>
						  }

					  }
					  else{
						  Frame_WriteCfg(&Flash_Cfg);
 802a7c2:	4803      	ldr	r0, [pc, #12]	; (802a7d0 <main+0x3e0>)
 802a7c4:	f7f7 f948 	bl	8021a58 <Frame_WriteCfg>
						  goto_application(FLASH_SLOT_1_ADD);
 802a7c8:	4818      	ldr	r0, [pc, #96]	; (802a82c <main+0x43c>)
 802a7ca:	f7ff fdd7 	bl	802a37c <goto_application>
 802a7ce:	e188      	b.n	802aae2 <main+0x6f2>
 802a7d0:	200002a8 	.word	0x200002a8
 802a7d4:	200002af 	.word	0x200002af
 802a7d8:	0803d9ac 	.word	0x0803d9ac
 802a7dc:	200004e8 	.word	0x200004e8
 802a7e0:	40010000 	.word	0x40010000
 802a7e4:	0803d9c8 	.word	0x0803d9c8
 802a7e8:	0803d9d4 	.word	0x0803d9d4
 802a7ec:	40140000 	.word	0x40140000
 802a7f0:	0803d9f4 	.word	0x0803d9f4
 802a7f4:	200004a8 	.word	0x200004a8
 802a7f8:	20000374 	.word	0x20000374
 802a7fc:	20000334 	.word	0x20000334
 802a800:	0803da10 	.word	0x0803da10
 802a804:	0803da40 	.word	0x0803da40
 802a808:	200002f0 	.word	0x200002f0
 802a80c:	200002b0 	.word	0x200002b0
 802a810:	0803da80 	.word	0x0803da80
 802a814:	0803daa0 	.word	0x0803daa0
 802a818:	0803dac4 	.word	0x0803dac4
 802a81c:	0803daf0 	.word	0x0803daf0
 802a820:	0803d984 	.word	0x0803d984
 802a824:	40020c00 	.word	0x40020c00
 802a828:	080a0000 	.word	0x080a0000
 802a82c:	08060000 	.word	0x08060000
					  }
				  }
				  else if(Flash_Cfg.FlashOnGoing == FLASH_SLOT_2){
 802a830:	4bb0      	ldr	r3, [pc, #704]	; (802aaf4 <main+0x704>)
 802a832:	781b      	ldrb	r3, [r3, #0]
 802a834:	2b02      	cmp	r3, #2
 802a836:	f040 8154 	bne.w	802aae2 <main+0x6f2>
					  TIM1->CNT = 0;
 802a83a:	4baf      	ldr	r3, [pc, #700]	; (802aaf8 <main+0x708>)
 802a83c:	2200      	movs	r2, #0
 802a83e:	625a      	str	r2, [r3, #36]	; 0x24
					  if(ota_and_write_to_sd_card(&fatfs, &myfile, "appa.bin", FA_WRITE|FA_CREATE_ALWAYS) == HAL_OK) {
 802a840:	1d39      	adds	r1, r7, #4
 802a842:	f507 700d 	add.w	r0, r7, #564	; 0x234
 802a846:	230a      	movs	r3, #10
 802a848:	4aac      	ldr	r2, [pc, #688]	; (802aafc <main+0x70c>)
 802a84a:	f7f7 f979 	bl	8021b40 <ota_and_write_to_sd_card>
 802a84e:	4603      	mov	r3, r0
 802a850:	2b00      	cmp	r3, #0
 802a852:	f040 8140 	bne.w	802aad6 <main+0x6e6>
						  time = TIM1->CNT;
 802a856:	4ba8      	ldr	r3, [pc, #672]	; (802aaf8 <main+0x708>)
 802a858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a85a:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
						  total_time += time;
 802a85e:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802a862:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	; 0x4dc
 802a866:	4413      	add	r3, r2
 802a868:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
						  HAL_UART_Transmit(&huart2, "\r       OTA SUCCESSFULL !!!\n\r", 29, 1000);
 802a86c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a870:	221d      	movs	r2, #29
 802a872:	49a3      	ldr	r1, [pc, #652]	; (802ab00 <main+0x710>)
 802a874:	48a3      	ldr	r0, [pc, #652]	; (802ab04 <main+0x714>)
 802a876:	f00a fa1c 	bl	8034cb2 <HAL_UART_Transmit>
						  sprintf(buffer,"\r            -TIME: %.2f\n\r", (float)time/5.0);
 802a87a:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802a87e:	ee07 3a90 	vmov	s15, r3
 802a882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a886:	ee17 0a90 	vmov	r0, s15
 802a88a:	f7f5 fe5d 	bl	8020548 <__aeabi_f2d>
 802a88e:	f04f 0200 	mov.w	r2, #0
 802a892:	4b9d      	ldr	r3, [pc, #628]	; (802ab08 <main+0x718>)
 802a894:	f7f5 ffda 	bl	802084c <__aeabi_ddiv>
 802a898:	4602      	mov	r2, r0
 802a89a:	460b      	mov	r3, r1
 802a89c:	f207 4064 	addw	r0, r7, #1124	; 0x464
 802a8a0:	499a      	ldr	r1, [pc, #616]	; (802ab0c <main+0x71c>)
 802a8a2:	f00f fd67 	bl	803a374 <siprintf>
						  HAL_UART_Transmit(&huart2, buffer, 30, 1000);
 802a8a6:	f207 4164 	addw	r1, r7, #1124	; 0x464
 802a8aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a8ae:	221e      	movs	r2, #30
 802a8b0:	4894      	ldr	r0, [pc, #592]	; (802ab04 <main+0x714>)
 802a8b2:	f00a f9fe 	bl	8034cb2 <HAL_UART_Transmit>
						  memset(buffer, 0, 100);
 802a8b6:	f207 4364 	addw	r3, r7, #1124	; 0x464
 802a8ba:	2264      	movs	r2, #100	; 0x64
 802a8bc:	2100      	movs	r1, #0
 802a8be:	4618      	mov	r0, r3
 802a8c0:	f00e fe16 	bl	80394f0 <memset>

						  TIM1->CNT = 0;
 802a8c4:	4b8c      	ldr	r3, [pc, #560]	; (802aaf8 <main+0x708>)
 802a8c6:	2200      	movs	r2, #0
 802a8c8:	625a      	str	r2, [r3, #36]	; 0x24
						  int size_file = read_file_and_store_into_flash(&fatfs,&myfile,"appa.bin", FA_READ, FLASH_SLOT_1, signature, publickey, hashvalue);
 802a8ca:	1d39      	adds	r1, r7, #4
 802a8cc:	f507 700d 	add.w	r0, r7, #564	; 0x234
 802a8d0:	4b8f      	ldr	r3, [pc, #572]	; (802ab10 <main+0x720>)
 802a8d2:	9303      	str	r3, [sp, #12]
 802a8d4:	4b8f      	ldr	r3, [pc, #572]	; (802ab14 <main+0x724>)
 802a8d6:	9302      	str	r3, [sp, #8]
 802a8d8:	4b8f      	ldr	r3, [pc, #572]	; (802ab18 <main+0x728>)
 802a8da:	9301      	str	r3, [sp, #4]
 802a8dc:	2301      	movs	r3, #1
 802a8de:	9300      	str	r3, [sp, #0]
 802a8e0:	2301      	movs	r3, #1
 802a8e2:	4a86      	ldr	r2, [pc, #536]	; (802aafc <main+0x70c>)
 802a8e4:	f7f7 fa32 	bl	8021d4c <read_file_and_store_into_flash>
 802a8e8:	4603      	mov	r3, r0
 802a8ea:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
						  time = TIM1->CNT;
 802a8ee:	4b82      	ldr	r3, [pc, #520]	; (802aaf8 <main+0x708>)
 802a8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a8f2:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
						  total_time += time;
 802a8f6:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802a8fa:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	; 0x4dc
 802a8fe:	4413      	add	r3, r2
 802a900:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
						  HAL_UART_Transmit(&huart2, "\r       -READ APPLICATION1 AND STORE IN FLASH\n\r", 50, 1000);
 802a904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a908:	2232      	movs	r2, #50	; 0x32
 802a90a:	4984      	ldr	r1, [pc, #528]	; (802ab1c <main+0x72c>)
 802a90c:	487d      	ldr	r0, [pc, #500]	; (802ab04 <main+0x714>)
 802a90e:	f00a f9d0 	bl	8034cb2 <HAL_UART_Transmit>
						  sprintf(buffer, "\r              +SIZE: %d BYTES\n\r              +TIME: %.2f(MS)\n\r", size_file, (float)time/5.0);
 802a912:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802a916:	ee07 3a90 	vmov	s15, r3
 802a91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a91e:	ee17 0a90 	vmov	r0, s15
 802a922:	f7f5 fe11 	bl	8020548 <__aeabi_f2d>
 802a926:	f04f 0200 	mov.w	r2, #0
 802a92a:	4b77      	ldr	r3, [pc, #476]	; (802ab08 <main+0x718>)
 802a92c:	f7f5 ff8e 	bl	802084c <__aeabi_ddiv>
 802a930:	4602      	mov	r2, r0
 802a932:	460b      	mov	r3, r1
 802a934:	f207 4064 	addw	r0, r7, #1124	; 0x464
 802a938:	e9cd 2300 	strd	r2, r3, [sp]
 802a93c:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 802a940:	4977      	ldr	r1, [pc, #476]	; (802ab20 <main+0x730>)
 802a942:	f00f fd17 	bl	803a374 <siprintf>
						  HAL_UART_Transmit(&huart2, buffer, 100, 1000);
 802a946:	f207 4164 	addw	r1, r7, #1124	; 0x464
 802a94a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a94e:	2264      	movs	r2, #100	; 0x64
 802a950:	486c      	ldr	r0, [pc, #432]	; (802ab04 <main+0x714>)
 802a952:	f00a f9ae 	bl	8034cb2 <HAL_UART_Transmit>
						  memset(buffer, 0, 100);
 802a956:	f207 4364 	addw	r3, r7, #1124	; 0x464
 802a95a:	2264      	movs	r2, #100	; 0x64
 802a95c:	2100      	movs	r1, #0
 802a95e:	4618      	mov	r0, r3
 802a960:	f00e fdc6 	bl	80394f0 <memset>


						  TIM1->CNT = 0;
 802a964:	4b64      	ldr	r3, [pc, #400]	; (802aaf8 <main+0x708>)
 802a966:	2200      	movs	r2, #0
 802a968:	625a      	str	r2, [r3, #36]	; 0x24
						  tree_hash_on_flash(FLASH_SLOT_1, md,size_file, &round);
 802a96a:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 802a96e:	4b6d      	ldr	r3, [pc, #436]	; (802ab24 <main+0x734>)
 802a970:	496d      	ldr	r1, [pc, #436]	; (802ab28 <main+0x738>)
 802a972:	2001      	movs	r0, #1
 802a974:	f7f7 fb6e 	bl	8022054 <tree_hash_on_flash>
						  time = TIM1->CNT;
 802a978:	4b5f      	ldr	r3, [pc, #380]	; (802aaf8 <main+0x708>)
 802a97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802a97c:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
						  total_time += time;
 802a980:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802a984:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	; 0x4dc
 802a988:	4413      	add	r3, r2
 802a98a:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
						  HAL_UART_Transmit(&huart2, "\r       -TREE HASH IN FLASH\n\r", 28, 1000);
 802a98e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a992:	221c      	movs	r2, #28
 802a994:	4965      	ldr	r1, [pc, #404]	; (802ab2c <main+0x73c>)
 802a996:	485b      	ldr	r0, [pc, #364]	; (802ab04 <main+0x714>)
 802a998:	f00a f98b 	bl	8034cb2 <HAL_UART_Transmit>
						  sprintf(buffer, "\r              +TIME: %.2f(MS)\n\r", (float)time/5.0);
 802a99c:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802a9a0:	ee07 3a90 	vmov	s15, r3
 802a9a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802a9a8:	ee17 0a90 	vmov	r0, s15
 802a9ac:	f7f5 fdcc 	bl	8020548 <__aeabi_f2d>
 802a9b0:	f04f 0200 	mov.w	r2, #0
 802a9b4:	4b54      	ldr	r3, [pc, #336]	; (802ab08 <main+0x718>)
 802a9b6:	f7f5 ff49 	bl	802084c <__aeabi_ddiv>
 802a9ba:	4602      	mov	r2, r0
 802a9bc:	460b      	mov	r3, r1
 802a9be:	f207 4064 	addw	r0, r7, #1124	; 0x464
 802a9c2:	495b      	ldr	r1, [pc, #364]	; (802ab30 <main+0x740>)
 802a9c4:	f00f fcd6 	bl	803a374 <siprintf>
						  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 802a9c8:	f207 4164 	addw	r1, r7, #1124	; 0x464
 802a9cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802a9d0:	2228      	movs	r2, #40	; 0x28
 802a9d2:	484c      	ldr	r0, [pc, #304]	; (802ab04 <main+0x714>)
 802a9d4:	f00a f96d 	bl	8034cb2 <HAL_UART_Transmit>
						  memset(buffer, 0, 100);
 802a9d8:	f207 4364 	addw	r3, r7, #1124	; 0x464
 802a9dc:	2264      	movs	r2, #100	; 0x64
 802a9de:	2100      	movs	r1, #0
 802a9e0:	4618      	mov	r0, r3
 802a9e2:	f00e fd85 	bl	80394f0 <memset>

						  TIM1->CNT = 0;
 802a9e6:	4b44      	ldr	r3, [pc, #272]	; (802aaf8 <main+0x708>)
 802a9e8:	2200      	movs	r2, #0
 802a9ea:	625a      	str	r2, [r3, #36]	; 0x24
						  if (ed25519_verify(signature, md, 64, publickey)) {
 802a9ec:	4b49      	ldr	r3, [pc, #292]	; (802ab14 <main+0x724>)
 802a9ee:	2240      	movs	r2, #64	; 0x40
 802a9f0:	494d      	ldr	r1, [pc, #308]	; (802ab28 <main+0x738>)
 802a9f2:	4849      	ldr	r0, [pc, #292]	; (802ab18 <main+0x728>)
 802a9f4:	f007 fa72 	bl	8031edc <ed25519_verify>
 802a9f8:	4603      	mov	r3, r0
 802a9fa:	2b00      	cmp	r3, #0
 802a9fc:	d064      	beq.n	802aac8 <main+0x6d8>
							  time = TIM1->CNT;
 802a9fe:	4b3e      	ldr	r3, [pc, #248]	; (802aaf8 <main+0x708>)
 802aa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802aa02:	f8a7 34da 	strh.w	r3, [r7, #1242]	; 0x4da
							  total_time += time;
 802aa06:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802aa0a:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	; 0x4dc
 802aa0e:	4413      	add	r3, r2
 802aa10:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
							  HAL_UART_Transmit(&huart2, "\r       -VERIFY APPLICATION2 SUCCESSFULL\n\r", 60, 1000);
 802aa14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802aa18:	223c      	movs	r2, #60	; 0x3c
 802aa1a:	4946      	ldr	r1, [pc, #280]	; (802ab34 <main+0x744>)
 802aa1c:	4839      	ldr	r0, [pc, #228]	; (802ab04 <main+0x714>)
 802aa1e:	f00a f948 	bl	8034cb2 <HAL_UART_Transmit>
							  sprintf(buffer, "\r              +TIME: %.2f(MS)\n\r", (float)time/5.0);
 802aa22:	f8b7 34da 	ldrh.w	r3, [r7, #1242]	; 0x4da
 802aa26:	ee07 3a90 	vmov	s15, r3
 802aa2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802aa2e:	ee17 0a90 	vmov	r0, s15
 802aa32:	f7f5 fd89 	bl	8020548 <__aeabi_f2d>
 802aa36:	f04f 0200 	mov.w	r2, #0
 802aa3a:	4b33      	ldr	r3, [pc, #204]	; (802ab08 <main+0x718>)
 802aa3c:	f7f5 ff06 	bl	802084c <__aeabi_ddiv>
 802aa40:	4602      	mov	r2, r0
 802aa42:	460b      	mov	r3, r1
 802aa44:	f207 4064 	addw	r0, r7, #1124	; 0x464
 802aa48:	4939      	ldr	r1, [pc, #228]	; (802ab30 <main+0x740>)
 802aa4a:	f00f fc93 	bl	803a374 <siprintf>
							  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 802aa4e:	f207 4164 	addw	r1, r7, #1124	; 0x464
 802aa52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802aa56:	2228      	movs	r2, #40	; 0x28
 802aa58:	482a      	ldr	r0, [pc, #168]	; (802ab04 <main+0x714>)
 802aa5a:	f00a f92a 	bl	8034cb2 <HAL_UART_Transmit>
							  sprintf(buffer, "\r       -TOTAL TIME: %.2f(MS)\n\r", (float)total_time/5.0);
 802aa5e:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 802aa62:	ee07 3a90 	vmov	s15, r3
 802aa66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802aa6a:	ee17 0a90 	vmov	r0, s15
 802aa6e:	f7f5 fd6b 	bl	8020548 <__aeabi_f2d>
 802aa72:	f04f 0200 	mov.w	r2, #0
 802aa76:	4b24      	ldr	r3, [pc, #144]	; (802ab08 <main+0x718>)
 802aa78:	f7f5 fee8 	bl	802084c <__aeabi_ddiv>
 802aa7c:	4602      	mov	r2, r0
 802aa7e:	460b      	mov	r3, r1
 802aa80:	f207 4064 	addw	r0, r7, #1124	; 0x464
 802aa84:	492c      	ldr	r1, [pc, #176]	; (802ab38 <main+0x748>)
 802aa86:	f00f fc75 	bl	803a374 <siprintf>
							  HAL_UART_Transmit(&huart2, buffer, 40, 1000);
 802aa8a:	f207 4164 	addw	r1, r7, #1124	; 0x464
 802aa8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802aa92:	2228      	movs	r2, #40	; 0x28
 802aa94:	481b      	ldr	r0, [pc, #108]	; (802ab04 <main+0x714>)
 802aa96:	f00a f90c 	bl	8034cb2 <HAL_UART_Transmit>

							  HAL_UART_Transmit(&huart2, "\r*****APPLICATION1 IS RUNNING*****\n\r", 50, 1000);
 802aa9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802aa9e:	2232      	movs	r2, #50	; 0x32
 802aaa0:	4926      	ldr	r1, [pc, #152]	; (802ab3c <main+0x74c>)
 802aaa2:	4818      	ldr	r0, [pc, #96]	; (802ab04 <main+0x714>)
 802aaa4:	f00a f905 	bl	8034cb2 <HAL_UART_Transmit>


							  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 802aaa8:	2201      	movs	r2, #1
 802aaaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802aaae:	4824      	ldr	r0, [pc, #144]	; (802ab40 <main+0x750>)
 802aab0:	f008 f96a 	bl	8032d88 <HAL_GPIO_WritePin>
							  Flash_Cfg.FlashOnGoing = FLASH_SLOT_1;
 802aab4:	4b0f      	ldr	r3, [pc, #60]	; (802aaf4 <main+0x704>)
 802aab6:	2201      	movs	r2, #1
 802aab8:	701a      	strb	r2, [r3, #0]
							  Frame_WriteCfg(&Flash_Cfg);
 802aaba:	480e      	ldr	r0, [pc, #56]	; (802aaf4 <main+0x704>)
 802aabc:	f7f6 ffcc 	bl	8021a58 <Frame_WriteCfg>
							  goto_application(FLASH_SLOT_1_ADD);
 802aac0:	4820      	ldr	r0, [pc, #128]	; (802ab44 <main+0x754>)
 802aac2:	f7ff fc5b 	bl	802a37c <goto_application>
 802aac6:	e00c      	b.n	802aae2 <main+0x6f2>
						  } else {
							  Frame_WriteCfg(&Flash_Cfg);
 802aac8:	480a      	ldr	r0, [pc, #40]	; (802aaf4 <main+0x704>)
 802aaca:	f7f6 ffc5 	bl	8021a58 <Frame_WriteCfg>
							  goto_application(FLASH_SLOT_2_ADD);
 802aace:	481e      	ldr	r0, [pc, #120]	; (802ab48 <main+0x758>)
 802aad0:	f7ff fc54 	bl	802a37c <goto_application>
 802aad4:	e005      	b.n	802aae2 <main+0x6f2>
						  }
					  }
					  else{
						  Frame_WriteCfg(&Flash_Cfg);
 802aad6:	4807      	ldr	r0, [pc, #28]	; (802aaf4 <main+0x704>)
 802aad8:	f7f6 ffbe 	bl	8021a58 <Frame_WriteCfg>
						  goto_application(FLASH_SLOT_2_ADD);
 802aadc:	481a      	ldr	r0, [pc, #104]	; (802ab48 <main+0x758>)
 802aade:	f7ff fc4d 	bl	802a37c <goto_application>
					  }
				  }
				flag = 0;
 802aae2:	4b1a      	ldr	r3, [pc, #104]	; (802ab4c <main+0x75c>)
 802aae4:	2200      	movs	r2, #0
 802aae6:	701a      	strb	r2, [r3, #0]
 802aae8:	e4bd      	b.n	802a466 <main+0x76>
			  }
		  }
	  }
	  else{
		  goto_application(FLASH_SLOT_1_ADD);
 802aaea:	4816      	ldr	r0, [pc, #88]	; (802ab44 <main+0x754>)
 802aaec:	f7ff fc46 	bl	802a37c <goto_application>
	  HAL_UART_Transmit(&huart2, "\r*****THIS IS BOOTLOADER PROGRAM*****\n\r", 39, 1000);
 802aaf0:	e4b9      	b.n	802a466 <main+0x76>
 802aaf2:	bf00      	nop
 802aaf4:	200002a8 	.word	0x200002a8
 802aaf8:	40010000 	.word	0x40010000
 802aafc:	0803db10 	.word	0x0803db10
 802ab00:	0803d9d4 	.word	0x0803d9d4
 802ab04:	200004e8 	.word	0x200004e8
 802ab08:	40140000 	.word	0x40140000
 802ab0c:	0803d9f4 	.word	0x0803d9f4
 802ab10:	200004a8 	.word	0x200004a8
 802ab14:	20000374 	.word	0x20000374
 802ab18:	20000334 	.word	0x20000334
 802ab1c:	0803db1c 	.word	0x0803db1c
 802ab20:	0803da40 	.word	0x0803da40
 802ab24:	200002f0 	.word	0x200002f0
 802ab28:	200002b0 	.word	0x200002b0
 802ab2c:	0803da80 	.word	0x0803da80
 802ab30:	0803daa0 	.word	0x0803daa0
 802ab34:	0803dac4 	.word	0x0803dac4
 802ab38:	0803daf0 	.word	0x0803daf0
 802ab3c:	0803d95c 	.word	0x0803d95c
 802ab40:	40020c00 	.word	0x40020c00
 802ab44:	08060000 	.word	0x08060000
 802ab48:	080a0000 	.word	0x080a0000
 802ab4c:	200002af 	.word	0x200002af

0802ab50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 802ab50:	b580      	push	{r7, lr}
 802ab52:	b094      	sub	sp, #80	; 0x50
 802ab54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802ab56:	f107 0320 	add.w	r3, r7, #32
 802ab5a:	2230      	movs	r2, #48	; 0x30
 802ab5c:	2100      	movs	r1, #0
 802ab5e:	4618      	mov	r0, r3
 802ab60:	f00e fcc6 	bl	80394f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802ab64:	f107 030c 	add.w	r3, r7, #12
 802ab68:	2200      	movs	r2, #0
 802ab6a:	601a      	str	r2, [r3, #0]
 802ab6c:	605a      	str	r2, [r3, #4]
 802ab6e:	609a      	str	r2, [r3, #8]
 802ab70:	60da      	str	r2, [r3, #12]
 802ab72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 802ab74:	2300      	movs	r3, #0
 802ab76:	60bb      	str	r3, [r7, #8]
 802ab78:	4b28      	ldr	r3, [pc, #160]	; (802ac1c <SystemClock_Config+0xcc>)
 802ab7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ab7c:	4a27      	ldr	r2, [pc, #156]	; (802ac1c <SystemClock_Config+0xcc>)
 802ab7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802ab82:	6413      	str	r3, [r2, #64]	; 0x40
 802ab84:	4b25      	ldr	r3, [pc, #148]	; (802ac1c <SystemClock_Config+0xcc>)
 802ab86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802ab88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802ab8c:	60bb      	str	r3, [r7, #8]
 802ab8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 802ab90:	2300      	movs	r3, #0
 802ab92:	607b      	str	r3, [r7, #4]
 802ab94:	4b22      	ldr	r3, [pc, #136]	; (802ac20 <SystemClock_Config+0xd0>)
 802ab96:	681b      	ldr	r3, [r3, #0]
 802ab98:	4a21      	ldr	r2, [pc, #132]	; (802ac20 <SystemClock_Config+0xd0>)
 802ab9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802ab9e:	6013      	str	r3, [r2, #0]
 802aba0:	4b1f      	ldr	r3, [pc, #124]	; (802ac20 <SystemClock_Config+0xd0>)
 802aba2:	681b      	ldr	r3, [r3, #0]
 802aba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802aba8:	607b      	str	r3, [r7, #4]
 802abaa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 802abac:	2302      	movs	r3, #2
 802abae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 802abb0:	2301      	movs	r3, #1
 802abb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 802abb4:	2310      	movs	r3, #16
 802abb6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802abb8:	2302      	movs	r3, #2
 802abba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 802abbc:	2300      	movs	r3, #0
 802abbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 802abc0:	2308      	movs	r3, #8
 802abc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 802abc4:	23a8      	movs	r3, #168	; 0xa8
 802abc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802abc8:	2302      	movs	r3, #2
 802abca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 802abcc:	2304      	movs	r3, #4
 802abce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 802abd0:	f107 0320 	add.w	r3, r7, #32
 802abd4:	4618      	mov	r0, r3
 802abd6:	f008 f8f1 	bl	8032dbc <HAL_RCC_OscConfig>
 802abda:	4603      	mov	r3, r0
 802abdc:	2b00      	cmp	r3, #0
 802abde:	d001      	beq.n	802abe4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 802abe0:	f000 f988 	bl	802aef4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802abe4:	230f      	movs	r3, #15
 802abe6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802abe8:	2302      	movs	r3, #2
 802abea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802abec:	2300      	movs	r3, #0
 802abee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 802abf0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802abf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 802abf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802abfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 802abfc:	f107 030c 	add.w	r3, r7, #12
 802ac00:	2105      	movs	r1, #5
 802ac02:	4618      	mov	r0, r3
 802ac04:	f008 fb52 	bl	80332ac <HAL_RCC_ClockConfig>
 802ac08:	4603      	mov	r3, r0
 802ac0a:	2b00      	cmp	r3, #0
 802ac0c:	d001      	beq.n	802ac12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 802ac0e:	f000 f971 	bl	802aef4 <Error_Handler>
  }
}
 802ac12:	bf00      	nop
 802ac14:	3750      	adds	r7, #80	; 0x50
 802ac16:	46bd      	mov	sp, r7
 802ac18:	bd80      	pop	{r7, pc}
 802ac1a:	bf00      	nop
 802ac1c:	40023800 	.word	0x40023800
 802ac20:	40007000 	.word	0x40007000

0802ac24 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 802ac24:	b480      	push	{r7}
 802ac26:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 802ac28:	4b0c      	ldr	r3, [pc, #48]	; (802ac5c <MX_SDIO_SD_Init+0x38>)
 802ac2a:	4a0d      	ldr	r2, [pc, #52]	; (802ac60 <MX_SDIO_SD_Init+0x3c>)
 802ac2c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 802ac2e:	4b0b      	ldr	r3, [pc, #44]	; (802ac5c <MX_SDIO_SD_Init+0x38>)
 802ac30:	2200      	movs	r2, #0
 802ac32:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 802ac34:	4b09      	ldr	r3, [pc, #36]	; (802ac5c <MX_SDIO_SD_Init+0x38>)
 802ac36:	2200      	movs	r2, #0
 802ac38:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 802ac3a:	4b08      	ldr	r3, [pc, #32]	; (802ac5c <MX_SDIO_SD_Init+0x38>)
 802ac3c:	2200      	movs	r2, #0
 802ac3e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 802ac40:	4b06      	ldr	r3, [pc, #24]	; (802ac5c <MX_SDIO_SD_Init+0x38>)
 802ac42:	2200      	movs	r2, #0
 802ac44:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 802ac46:	4b05      	ldr	r3, [pc, #20]	; (802ac5c <MX_SDIO_SD_Init+0x38>)
 802ac48:	2200      	movs	r2, #0
 802ac4a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 802ac4c:	4b03      	ldr	r3, [pc, #12]	; (802ac5c <MX_SDIO_SD_Init+0x38>)
 802ac4e:	2202      	movs	r2, #2
 802ac50:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 802ac52:	bf00      	nop
 802ac54:	46bd      	mov	sp, r7
 802ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ac5a:	4770      	bx	lr
 802ac5c:	200003e0 	.word	0x200003e0
 802ac60:	40012c00 	.word	0x40012c00

0802ac64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 802ac64:	b580      	push	{r7, lr}
 802ac66:	b086      	sub	sp, #24
 802ac68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802ac6a:	f107 0308 	add.w	r3, r7, #8
 802ac6e:	2200      	movs	r2, #0
 802ac70:	601a      	str	r2, [r3, #0]
 802ac72:	605a      	str	r2, [r3, #4]
 802ac74:	609a      	str	r2, [r3, #8]
 802ac76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802ac78:	463b      	mov	r3, r7
 802ac7a:	2200      	movs	r2, #0
 802ac7c:	601a      	str	r2, [r3, #0]
 802ac7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 802ac80:	4b1f      	ldr	r3, [pc, #124]	; (802ad00 <MX_TIM1_Init+0x9c>)
 802ac82:	4a20      	ldr	r2, [pc, #128]	; (802ad04 <MX_TIM1_Init+0xa0>)
 802ac84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 33600-1;
 802ac86:	4b1e      	ldr	r3, [pc, #120]	; (802ad00 <MX_TIM1_Init+0x9c>)
 802ac88:	f248 323f 	movw	r2, #33599	; 0x833f
 802ac8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 802ac8e:	4b1c      	ldr	r3, [pc, #112]	; (802ad00 <MX_TIM1_Init+0x9c>)
 802ac90:	2200      	movs	r2, #0
 802ac92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 802ac94:	4b1a      	ldr	r3, [pc, #104]	; (802ad00 <MX_TIM1_Init+0x9c>)
 802ac96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802ac9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802ac9c:	4b18      	ldr	r3, [pc, #96]	; (802ad00 <MX_TIM1_Init+0x9c>)
 802ac9e:	2200      	movs	r2, #0
 802aca0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 802aca2:	4b17      	ldr	r3, [pc, #92]	; (802ad00 <MX_TIM1_Init+0x9c>)
 802aca4:	2200      	movs	r2, #0
 802aca6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802aca8:	4b15      	ldr	r3, [pc, #84]	; (802ad00 <MX_TIM1_Init+0x9c>)
 802acaa:	2200      	movs	r2, #0
 802acac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 802acae:	4814      	ldr	r0, [pc, #80]	; (802ad00 <MX_TIM1_Init+0x9c>)
 802acb0:	f009 fc7c 	bl	80345ac <HAL_TIM_Base_Init>
 802acb4:	4603      	mov	r3, r0
 802acb6:	2b00      	cmp	r3, #0
 802acb8:	d001      	beq.n	802acbe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 802acba:	f000 f91b 	bl	802aef4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802acbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802acc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 802acc4:	f107 0308 	add.w	r3, r7, #8
 802acc8:	4619      	mov	r1, r3
 802acca:	480d      	ldr	r0, [pc, #52]	; (802ad00 <MX_TIM1_Init+0x9c>)
 802accc:	f009 fd26 	bl	803471c <HAL_TIM_ConfigClockSource>
 802acd0:	4603      	mov	r3, r0
 802acd2:	2b00      	cmp	r3, #0
 802acd4:	d001      	beq.n	802acda <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 802acd6:	f000 f90d 	bl	802aef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802acda:	2300      	movs	r3, #0
 802acdc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802acde:	2300      	movs	r3, #0
 802ace0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 802ace2:	463b      	mov	r3, r7
 802ace4:	4619      	mov	r1, r3
 802ace6:	4806      	ldr	r0, [pc, #24]	; (802ad00 <MX_TIM1_Init+0x9c>)
 802ace8:	f009 ff1a 	bl	8034b20 <HAL_TIMEx_MasterConfigSynchronization>
 802acec:	4603      	mov	r3, r0
 802acee:	2b00      	cmp	r3, #0
 802acf0:	d001      	beq.n	802acf6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 802acf2:	f000 f8ff 	bl	802aef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 802acf6:	bf00      	nop
 802acf8:	3718      	adds	r7, #24
 802acfa:	46bd      	mov	sp, r7
 802acfc:	bd80      	pop	{r7, pc}
 802acfe:	bf00      	nop
 802ad00:	20000398 	.word	0x20000398
 802ad04:	40010000 	.word	0x40010000

0802ad08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 802ad08:	b580      	push	{r7, lr}
 802ad0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 802ad0c:	4b11      	ldr	r3, [pc, #68]	; (802ad54 <MX_USART2_UART_Init+0x4c>)
 802ad0e:	4a12      	ldr	r2, [pc, #72]	; (802ad58 <MX_USART2_UART_Init+0x50>)
 802ad10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 802ad12:	4b10      	ldr	r3, [pc, #64]	; (802ad54 <MX_USART2_UART_Init+0x4c>)
 802ad14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 802ad18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802ad1a:	4b0e      	ldr	r3, [pc, #56]	; (802ad54 <MX_USART2_UART_Init+0x4c>)
 802ad1c:	2200      	movs	r2, #0
 802ad1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 802ad20:	4b0c      	ldr	r3, [pc, #48]	; (802ad54 <MX_USART2_UART_Init+0x4c>)
 802ad22:	2200      	movs	r2, #0
 802ad24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 802ad26:	4b0b      	ldr	r3, [pc, #44]	; (802ad54 <MX_USART2_UART_Init+0x4c>)
 802ad28:	2200      	movs	r2, #0
 802ad2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 802ad2c:	4b09      	ldr	r3, [pc, #36]	; (802ad54 <MX_USART2_UART_Init+0x4c>)
 802ad2e:	220c      	movs	r2, #12
 802ad30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802ad32:	4b08      	ldr	r3, [pc, #32]	; (802ad54 <MX_USART2_UART_Init+0x4c>)
 802ad34:	2200      	movs	r2, #0
 802ad36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 802ad38:	4b06      	ldr	r3, [pc, #24]	; (802ad54 <MX_USART2_UART_Init+0x4c>)
 802ad3a:	2200      	movs	r2, #0
 802ad3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 802ad3e:	4805      	ldr	r0, [pc, #20]	; (802ad54 <MX_USART2_UART_Init+0x4c>)
 802ad40:	f009 ff6a 	bl	8034c18 <HAL_UART_Init>
 802ad44:	4603      	mov	r3, r0
 802ad46:	2b00      	cmp	r3, #0
 802ad48:	d001      	beq.n	802ad4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 802ad4a:	f000 f8d3 	bl	802aef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802ad4e:	bf00      	nop
 802ad50:	bd80      	pop	{r7, pc}
 802ad52:	bf00      	nop
 802ad54:	200004e8 	.word	0x200004e8
 802ad58:	40004400 	.word	0x40004400

0802ad5c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 802ad5c:	b580      	push	{r7, lr}
 802ad5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 802ad60:	4b11      	ldr	r3, [pc, #68]	; (802ada8 <MX_USART6_UART_Init+0x4c>)
 802ad62:	4a12      	ldr	r2, [pc, #72]	; (802adac <MX_USART6_UART_Init+0x50>)
 802ad64:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 802ad66:	4b10      	ldr	r3, [pc, #64]	; (802ada8 <MX_USART6_UART_Init+0x4c>)
 802ad68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 802ad6c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 802ad6e:	4b0e      	ldr	r3, [pc, #56]	; (802ada8 <MX_USART6_UART_Init+0x4c>)
 802ad70:	2200      	movs	r2, #0
 802ad72:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 802ad74:	4b0c      	ldr	r3, [pc, #48]	; (802ada8 <MX_USART6_UART_Init+0x4c>)
 802ad76:	2200      	movs	r2, #0
 802ad78:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 802ad7a:	4b0b      	ldr	r3, [pc, #44]	; (802ada8 <MX_USART6_UART_Init+0x4c>)
 802ad7c:	2200      	movs	r2, #0
 802ad7e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 802ad80:	4b09      	ldr	r3, [pc, #36]	; (802ada8 <MX_USART6_UART_Init+0x4c>)
 802ad82:	220c      	movs	r2, #12
 802ad84:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802ad86:	4b08      	ldr	r3, [pc, #32]	; (802ada8 <MX_USART6_UART_Init+0x4c>)
 802ad88:	2200      	movs	r2, #0
 802ad8a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 802ad8c:	4b06      	ldr	r3, [pc, #24]	; (802ada8 <MX_USART6_UART_Init+0x4c>)
 802ad8e:	2200      	movs	r2, #0
 802ad90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 802ad92:	4805      	ldr	r0, [pc, #20]	; (802ada8 <MX_USART6_UART_Init+0x4c>)
 802ad94:	f009 ff40 	bl	8034c18 <HAL_UART_Init>
 802ad98:	4603      	mov	r3, r0
 802ad9a:	2b00      	cmp	r3, #0
 802ad9c:	d001      	beq.n	802ada2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 802ad9e:	f000 f8a9 	bl	802aef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 802ada2:	bf00      	nop
 802ada4:	bd80      	pop	{r7, pc}
 802ada6:	bf00      	nop
 802ada8:	20000464 	.word	0x20000464
 802adac:	40011400 	.word	0x40011400

0802adb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 802adb0:	b580      	push	{r7, lr}
 802adb2:	b08a      	sub	sp, #40	; 0x28
 802adb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802adb6:	f107 0314 	add.w	r3, r7, #20
 802adba:	2200      	movs	r2, #0
 802adbc:	601a      	str	r2, [r3, #0]
 802adbe:	605a      	str	r2, [r3, #4]
 802adc0:	609a      	str	r2, [r3, #8]
 802adc2:	60da      	str	r2, [r3, #12]
 802adc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 802adc6:	2300      	movs	r3, #0
 802adc8:	613b      	str	r3, [r7, #16]
 802adca:	4b45      	ldr	r3, [pc, #276]	; (802aee0 <MX_GPIO_Init+0x130>)
 802adcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802adce:	4a44      	ldr	r2, [pc, #272]	; (802aee0 <MX_GPIO_Init+0x130>)
 802add0:	f043 0310 	orr.w	r3, r3, #16
 802add4:	6313      	str	r3, [r2, #48]	; 0x30
 802add6:	4b42      	ldr	r3, [pc, #264]	; (802aee0 <MX_GPIO_Init+0x130>)
 802add8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802adda:	f003 0310 	and.w	r3, r3, #16
 802adde:	613b      	str	r3, [r7, #16]
 802ade0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802ade2:	2300      	movs	r3, #0
 802ade4:	60fb      	str	r3, [r7, #12]
 802ade6:	4b3e      	ldr	r3, [pc, #248]	; (802aee0 <MX_GPIO_Init+0x130>)
 802ade8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802adea:	4a3d      	ldr	r2, [pc, #244]	; (802aee0 <MX_GPIO_Init+0x130>)
 802adec:	f043 0304 	orr.w	r3, r3, #4
 802adf0:	6313      	str	r3, [r2, #48]	; 0x30
 802adf2:	4b3b      	ldr	r3, [pc, #236]	; (802aee0 <MX_GPIO_Init+0x130>)
 802adf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802adf6:	f003 0304 	and.w	r3, r3, #4
 802adfa:	60fb      	str	r3, [r7, #12]
 802adfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802adfe:	2300      	movs	r3, #0
 802ae00:	60bb      	str	r3, [r7, #8]
 802ae02:	4b37      	ldr	r3, [pc, #220]	; (802aee0 <MX_GPIO_Init+0x130>)
 802ae04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ae06:	4a36      	ldr	r2, [pc, #216]	; (802aee0 <MX_GPIO_Init+0x130>)
 802ae08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ae0c:	6313      	str	r3, [r2, #48]	; 0x30
 802ae0e:	4b34      	ldr	r3, [pc, #208]	; (802aee0 <MX_GPIO_Init+0x130>)
 802ae10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ae12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802ae16:	60bb      	str	r3, [r7, #8]
 802ae18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802ae1a:	2300      	movs	r3, #0
 802ae1c:	607b      	str	r3, [r7, #4]
 802ae1e:	4b30      	ldr	r3, [pc, #192]	; (802aee0 <MX_GPIO_Init+0x130>)
 802ae20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ae22:	4a2f      	ldr	r2, [pc, #188]	; (802aee0 <MX_GPIO_Init+0x130>)
 802ae24:	f043 0301 	orr.w	r3, r3, #1
 802ae28:	6313      	str	r3, [r2, #48]	; 0x30
 802ae2a:	4b2d      	ldr	r3, [pc, #180]	; (802aee0 <MX_GPIO_Init+0x130>)
 802ae2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ae2e:	f003 0301 	and.w	r3, r3, #1
 802ae32:	607b      	str	r3, [r7, #4]
 802ae34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802ae36:	2300      	movs	r3, #0
 802ae38:	603b      	str	r3, [r7, #0]
 802ae3a:	4b29      	ldr	r3, [pc, #164]	; (802aee0 <MX_GPIO_Init+0x130>)
 802ae3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ae3e:	4a28      	ldr	r2, [pc, #160]	; (802aee0 <MX_GPIO_Init+0x130>)
 802ae40:	f043 0308 	orr.w	r3, r3, #8
 802ae44:	6313      	str	r3, [r2, #48]	; 0x30
 802ae46:	4b26      	ldr	r3, [pc, #152]	; (802aee0 <MX_GPIO_Init+0x130>)
 802ae48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802ae4a:	f003 0308 	and.w	r3, r3, #8
 802ae4e:	603b      	str	r3, [r7, #0]
 802ae50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 802ae52:	2200      	movs	r2, #0
 802ae54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802ae58:	4822      	ldr	r0, [pc, #136]	; (802aee4 <MX_GPIO_Init+0x134>)
 802ae5a:	f007 ff95 	bl	8032d88 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 802ae5e:	2200      	movs	r2, #0
 802ae60:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 802ae64:	4820      	ldr	r0, [pc, #128]	; (802aee8 <MX_GPIO_Init+0x138>)
 802ae66:	f007 ff8f 	bl	8032d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 802ae6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802ae6e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802ae70:	2301      	movs	r3, #1
 802ae72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802ae74:	2300      	movs	r3, #0
 802ae76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802ae78:	2300      	movs	r3, #0
 802ae7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802ae7c:	f107 0314 	add.w	r3, r7, #20
 802ae80:	4619      	mov	r1, r3
 802ae82:	4818      	ldr	r0, [pc, #96]	; (802aee4 <MX_GPIO_Init+0x134>)
 802ae84:	f007 fde4 	bl	8032a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 802ae88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802ae8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802ae8e:	2300      	movs	r3, #0
 802ae90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802ae92:	2300      	movs	r3, #0
 802ae94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802ae96:	f107 0314 	add.w	r3, r7, #20
 802ae9a:	4619      	mov	r1, r3
 802ae9c:	4813      	ldr	r0, [pc, #76]	; (802aeec <MX_GPIO_Init+0x13c>)
 802ae9e:	f007 fdd7 	bl	8032a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 802aea2:	2301      	movs	r3, #1
 802aea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802aea6:	2300      	movs	r3, #0
 802aea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802aeaa:	2300      	movs	r3, #0
 802aeac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802aeae:	f107 0314 	add.w	r3, r7, #20
 802aeb2:	4619      	mov	r1, r3
 802aeb4:	480e      	ldr	r0, [pc, #56]	; (802aef0 <MX_GPIO_Init+0x140>)
 802aeb6:	f007 fdcb 	bl	8032a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 802aeba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 802aebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802aec0:	2301      	movs	r3, #1
 802aec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802aec4:	2300      	movs	r3, #0
 802aec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802aec8:	2300      	movs	r3, #0
 802aeca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 802aecc:	f107 0314 	add.w	r3, r7, #20
 802aed0:	4619      	mov	r1, r3
 802aed2:	4805      	ldr	r0, [pc, #20]	; (802aee8 <MX_GPIO_Init+0x138>)
 802aed4:	f007 fdbc 	bl	8032a50 <HAL_GPIO_Init>

}
 802aed8:	bf00      	nop
 802aeda:	3728      	adds	r7, #40	; 0x28
 802aedc:	46bd      	mov	sp, r7
 802aede:	bd80      	pop	{r7, pc}
 802aee0:	40023800 	.word	0x40023800
 802aee4:	40021000 	.word	0x40021000
 802aee8:	40020c00 	.word	0x40020c00
 802aeec:	40020800 	.word	0x40020800
 802aef0:	40020000 	.word	0x40020000

0802aef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802aef4:	b480      	push	{r7}
 802aef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802aef8:	b672      	cpsid	i
}
 802aefa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 802aefc:	e7fe      	b.n	802aefc <Error_Handler+0x8>

0802aefe <load_3>:
#include "fixedint.h"
#include "sc.h"

static uint64_t load_3(const unsigned char *in) {
 802aefe:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 802af02:	b085      	sub	sp, #20
 802af04:	af00      	add	r7, sp, #0
 802af06:	6078      	str	r0, [r7, #4]
    uint64_t result;

    result = (uint64_t) in[0];
 802af08:	687b      	ldr	r3, [r7, #4]
 802af0a:	781b      	ldrb	r3, [r3, #0]
 802af0c:	b2da      	uxtb	r2, r3
 802af0e:	f04f 0300 	mov.w	r3, #0
 802af12:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result |= ((uint64_t) in[1]) << 8;
 802af16:	687b      	ldr	r3, [r7, #4]
 802af18:	3301      	adds	r3, #1
 802af1a:	781b      	ldrb	r3, [r3, #0]
 802af1c:	b2d8      	uxtb	r0, r3
 802af1e:	f04f 0100 	mov.w	r1, #0
 802af22:	f04f 0200 	mov.w	r2, #0
 802af26:	f04f 0300 	mov.w	r3, #0
 802af2a:	020b      	lsls	r3, r1, #8
 802af2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 802af30:	0202      	lsls	r2, r0, #8
 802af32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802af36:	ea40 0802 	orr.w	r8, r0, r2
 802af3a:	ea41 0903 	orr.w	r9, r1, r3
 802af3e:	e9c7 8902 	strd	r8, r9, [r7, #8]
    result |= ((uint64_t) in[2]) << 16;
 802af42:	687b      	ldr	r3, [r7, #4]
 802af44:	3302      	adds	r3, #2
 802af46:	781b      	ldrb	r3, [r3, #0]
 802af48:	b2d8      	uxtb	r0, r3
 802af4a:	f04f 0100 	mov.w	r1, #0
 802af4e:	f04f 0200 	mov.w	r2, #0
 802af52:	f04f 0300 	mov.w	r3, #0
 802af56:	040b      	lsls	r3, r1, #16
 802af58:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 802af5c:	0402      	lsls	r2, r0, #16
 802af5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 802af62:	ea40 0402 	orr.w	r4, r0, r2
 802af66:	ea41 0503 	orr.w	r5, r1, r3
 802af6a:	e9c7 4502 	strd	r4, r5, [r7, #8]

    return result;
 802af6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 802af72:	4610      	mov	r0, r2
 802af74:	4619      	mov	r1, r3
 802af76:	3714      	adds	r7, #20
 802af78:	46bd      	mov	sp, r7
 802af7a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 802af7e:	4770      	bx	lr

0802af80 <load_4>:

static uint64_t load_4(const unsigned char *in) {
 802af80:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802af84:	b086      	sub	sp, #24
 802af86:	af00      	add	r7, sp, #0
 802af88:	60f8      	str	r0, [r7, #12]
    uint64_t result;

    result = (uint64_t) in[0];
 802af8a:	68fb      	ldr	r3, [r7, #12]
 802af8c:	781b      	ldrb	r3, [r3, #0]
 802af8e:	b2da      	uxtb	r2, r3
 802af90:	f04f 0300 	mov.w	r3, #0
 802af94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[1]) << 8;
 802af98:	68fb      	ldr	r3, [r7, #12]
 802af9a:	3301      	adds	r3, #1
 802af9c:	781b      	ldrb	r3, [r3, #0]
 802af9e:	b2d8      	uxtb	r0, r3
 802afa0:	f04f 0100 	mov.w	r1, #0
 802afa4:	f04f 0200 	mov.w	r2, #0
 802afa8:	f04f 0300 	mov.w	r3, #0
 802afac:	020b      	lsls	r3, r1, #8
 802afae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 802afb2:	0202      	lsls	r2, r0, #8
 802afb4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802afb8:	ea40 0602 	orr.w	r6, r0, r2
 802afbc:	603e      	str	r6, [r7, #0]
 802afbe:	430b      	orrs	r3, r1
 802afc0:	607b      	str	r3, [r7, #4]
 802afc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 802afc6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result |= ((uint64_t) in[2]) << 16;
 802afca:	68fb      	ldr	r3, [r7, #12]
 802afcc:	3302      	adds	r3, #2
 802afce:	781b      	ldrb	r3, [r3, #0]
 802afd0:	b2d8      	uxtb	r0, r3
 802afd2:	f04f 0100 	mov.w	r1, #0
 802afd6:	f04f 0200 	mov.w	r2, #0
 802afda:	f04f 0300 	mov.w	r3, #0
 802afde:	040b      	lsls	r3, r1, #16
 802afe0:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 802afe4:	0402      	lsls	r2, r0, #16
 802afe6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802afea:	ea40 0a02 	orr.w	sl, r0, r2
 802afee:	ea41 0b03 	orr.w	fp, r1, r3
 802aff2:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    result |= ((uint64_t) in[3]) << 24;
 802aff6:	68fb      	ldr	r3, [r7, #12]
 802aff8:	3303      	adds	r3, #3
 802affa:	781b      	ldrb	r3, [r3, #0]
 802affc:	b2da      	uxtb	r2, r3
 802affe:	f04f 0300 	mov.w	r3, #0
 802b002:	0a15      	lsrs	r5, r2, #8
 802b004:	0614      	lsls	r4, r2, #24
 802b006:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 802b00a:	ea42 0804 	orr.w	r8, r2, r4
 802b00e:	ea43 0905 	orr.w	r9, r3, r5
 802b012:	e9c7 8904 	strd	r8, r9, [r7, #16]
    
    return result;
 802b016:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 802b01a:	4610      	mov	r0, r2
 802b01c:	4619      	mov	r1, r3
 802b01e:	3718      	adds	r7, #24
 802b020:	46bd      	mov	sp, r7
 802b022:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802b026:	4770      	bx	lr

0802b028 <sc_reduce>:
  s[0]+256*s[1]+...+256^31*s[31] = s mod l
  where l = 2^252 + 27742317777372353535851937790883648493.
  Overwrites s in place.
*/

void sc_reduce(unsigned char *s) {
 802b028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802b02c:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 802b030:	af00      	add	r7, sp, #0
 802b032:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b036:	6018      	str	r0, [r3, #0]
    int64_t s0 = 2097151 & load_3(s);
 802b038:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b03c:	6818      	ldr	r0, [r3, #0]
 802b03e:	f7ff ff5e 	bl	802aefe <load_3>
 802b042:	4602      	mov	r2, r0
 802b044:	460b      	mov	r3, r1
 802b046:	4610      	mov	r0, r2
 802b048:	4619      	mov	r1, r3
 802b04a:	4af0      	ldr	r2, [pc, #960]	; (802b40c <sc_reduce+0x3e4>)
 802b04c:	f04f 0300 	mov.w	r3, #0
 802b050:	ea00 0402 	and.w	r4, r0, r2
 802b054:	ea01 0503 	and.w	r5, r1, r3
 802b058:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802b05c:	e9c3 4500 	strd	r4, r5, [r3]
    int64_t s1 = 2097151 & (load_4(s + 2) >> 5);
 802b060:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b064:	681b      	ldr	r3, [r3, #0]
 802b066:	3302      	adds	r3, #2
 802b068:	4618      	mov	r0, r3
 802b06a:	f7ff ff89 	bl	802af80 <load_4>
 802b06e:	4602      	mov	r2, r0
 802b070:	460b      	mov	r3, r1
 802b072:	f04f 0000 	mov.w	r0, #0
 802b076:	f04f 0100 	mov.w	r1, #0
 802b07a:	0950      	lsrs	r0, r2, #5
 802b07c:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 802b080:	0959      	lsrs	r1, r3, #5
 802b082:	4ae2      	ldr	r2, [pc, #904]	; (802b40c <sc_reduce+0x3e4>)
 802b084:	f04f 0300 	mov.w	r3, #0
 802b088:	ea00 0802 	and.w	r8, r0, r2
 802b08c:	ea01 0903 	and.w	r9, r1, r3
 802b090:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802b094:	e9c3 8900 	strd	r8, r9, [r3]
    int64_t s2 = 2097151 & (load_3(s + 5) >> 2);
 802b098:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b09c:	681b      	ldr	r3, [r3, #0]
 802b09e:	3305      	adds	r3, #5
 802b0a0:	4618      	mov	r0, r3
 802b0a2:	f7ff ff2c 	bl	802aefe <load_3>
 802b0a6:	4602      	mov	r2, r0
 802b0a8:	460b      	mov	r3, r1
 802b0aa:	f04f 0000 	mov.w	r0, #0
 802b0ae:	f04f 0100 	mov.w	r1, #0
 802b0b2:	0890      	lsrs	r0, r2, #2
 802b0b4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 802b0b8:	0899      	lsrs	r1, r3, #2
 802b0ba:	4ad4      	ldr	r2, [pc, #848]	; (802b40c <sc_reduce+0x3e4>)
 802b0bc:	f04f 0300 	mov.w	r3, #0
 802b0c0:	ea00 0a02 	and.w	sl, r0, r2
 802b0c4:	ea01 0b03 	and.w	fp, r1, r3
 802b0c8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802b0cc:	e9c3 ab00 	strd	sl, fp, [r3]
    int64_t s3 = 2097151 & (load_4(s + 7) >> 7);
 802b0d0:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b0d4:	681b      	ldr	r3, [r3, #0]
 802b0d6:	3307      	adds	r3, #7
 802b0d8:	4618      	mov	r0, r3
 802b0da:	f7ff ff51 	bl	802af80 <load_4>
 802b0de:	4602      	mov	r2, r0
 802b0e0:	460b      	mov	r3, r1
 802b0e2:	f04f 0000 	mov.w	r0, #0
 802b0e6:	f04f 0100 	mov.w	r1, #0
 802b0ea:	09d0      	lsrs	r0, r2, #7
 802b0ec:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 802b0f0:	09d9      	lsrs	r1, r3, #7
 802b0f2:	4ac6      	ldr	r2, [pc, #792]	; (802b40c <sc_reduce+0x3e4>)
 802b0f4:	f04f 0300 	mov.w	r3, #0
 802b0f8:	ea00 0402 	and.w	r4, r0, r2
 802b0fc:	f8c7 4620 	str.w	r4, [r7, #1568]	; 0x620
 802b100:	400b      	ands	r3, r1
 802b102:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 802b106:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 802b10a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b10e:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802b112:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s4 = 2097151 & (load_4(s + 10) >> 4);
 802b116:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b11a:	681b      	ldr	r3, [r3, #0]
 802b11c:	330a      	adds	r3, #10
 802b11e:	4618      	mov	r0, r3
 802b120:	f7ff ff2e 	bl	802af80 <load_4>
 802b124:	4602      	mov	r2, r0
 802b126:	460b      	mov	r3, r1
 802b128:	f04f 0000 	mov.w	r0, #0
 802b12c:	f04f 0100 	mov.w	r1, #0
 802b130:	0910      	lsrs	r0, r2, #4
 802b132:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 802b136:	0919      	lsrs	r1, r3, #4
 802b138:	4ab4      	ldr	r2, [pc, #720]	; (802b40c <sc_reduce+0x3e4>)
 802b13a:	f04f 0300 	mov.w	r3, #0
 802b13e:	ea00 0402 	and.w	r4, r0, r2
 802b142:	f8c7 4618 	str.w	r4, [r7, #1560]	; 0x618
 802b146:	400b      	ands	r3, r1
 802b148:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 802b14c:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 802b150:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b154:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802b158:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s5 = 2097151 & (load_3(s + 13) >> 1);
 802b15c:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b160:	681b      	ldr	r3, [r3, #0]
 802b162:	330d      	adds	r3, #13
 802b164:	4618      	mov	r0, r3
 802b166:	f7ff feca 	bl	802aefe <load_3>
 802b16a:	4602      	mov	r2, r0
 802b16c:	460b      	mov	r3, r1
 802b16e:	f04f 0000 	mov.w	r0, #0
 802b172:	f04f 0100 	mov.w	r1, #0
 802b176:	0850      	lsrs	r0, r2, #1
 802b178:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 802b17c:	0859      	lsrs	r1, r3, #1
 802b17e:	4aa3      	ldr	r2, [pc, #652]	; (802b40c <sc_reduce+0x3e4>)
 802b180:	f04f 0300 	mov.w	r3, #0
 802b184:	ea00 0402 	and.w	r4, r0, r2
 802b188:	f8c7 4610 	str.w	r4, [r7, #1552]	; 0x610
 802b18c:	400b      	ands	r3, r1
 802b18e:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 802b192:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 802b196:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b19a:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802b19e:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s6 = 2097151 & (load_4(s + 15) >> 6);
 802b1a2:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b1a6:	681b      	ldr	r3, [r3, #0]
 802b1a8:	330f      	adds	r3, #15
 802b1aa:	4618      	mov	r0, r3
 802b1ac:	f7ff fee8 	bl	802af80 <load_4>
 802b1b0:	4602      	mov	r2, r0
 802b1b2:	460b      	mov	r3, r1
 802b1b4:	f04f 0000 	mov.w	r0, #0
 802b1b8:	f04f 0100 	mov.w	r1, #0
 802b1bc:	0990      	lsrs	r0, r2, #6
 802b1be:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 802b1c2:	0999      	lsrs	r1, r3, #6
 802b1c4:	4a91      	ldr	r2, [pc, #580]	; (802b40c <sc_reduce+0x3e4>)
 802b1c6:	f04f 0300 	mov.w	r3, #0
 802b1ca:	ea00 0402 	and.w	r4, r0, r2
 802b1ce:	f8c7 4608 	str.w	r4, [r7, #1544]	; 0x608
 802b1d2:	400b      	ands	r3, r1
 802b1d4:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 802b1d8:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 802b1dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b1e0:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802b1e4:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s7 = 2097151 & (load_3(s + 18) >> 3);
 802b1e8:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b1ec:	681b      	ldr	r3, [r3, #0]
 802b1ee:	3312      	adds	r3, #18
 802b1f0:	4618      	mov	r0, r3
 802b1f2:	f7ff fe84 	bl	802aefe <load_3>
 802b1f6:	4602      	mov	r2, r0
 802b1f8:	460b      	mov	r3, r1
 802b1fa:	f04f 0000 	mov.w	r0, #0
 802b1fe:	f04f 0100 	mov.w	r1, #0
 802b202:	08d0      	lsrs	r0, r2, #3
 802b204:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 802b208:	08d9      	lsrs	r1, r3, #3
 802b20a:	4a80      	ldr	r2, [pc, #512]	; (802b40c <sc_reduce+0x3e4>)
 802b20c:	f04f 0300 	mov.w	r3, #0
 802b210:	ea00 0402 	and.w	r4, r0, r2
 802b214:	f8c7 4600 	str.w	r4, [r7, #1536]	; 0x600
 802b218:	400b      	ands	r3, r1
 802b21a:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 802b21e:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 802b222:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b226:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802b22a:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s8 = 2097151 & load_3(s + 21);
 802b22e:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b232:	681b      	ldr	r3, [r3, #0]
 802b234:	3315      	adds	r3, #21
 802b236:	4618      	mov	r0, r3
 802b238:	f7ff fe61 	bl	802aefe <load_3>
 802b23c:	4602      	mov	r2, r0
 802b23e:	460b      	mov	r3, r1
 802b240:	4610      	mov	r0, r2
 802b242:	4619      	mov	r1, r3
 802b244:	4a71      	ldr	r2, [pc, #452]	; (802b40c <sc_reduce+0x3e4>)
 802b246:	f04f 0300 	mov.w	r3, #0
 802b24a:	ea00 0402 	and.w	r4, r0, r2
 802b24e:	f8c7 45f8 	str.w	r4, [r7, #1528]	; 0x5f8
 802b252:	400b      	ands	r3, r1
 802b254:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 802b258:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 802b25c:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b260:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802b264:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s9 = 2097151 & (load_4(s + 23) >> 5);
 802b268:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b26c:	681b      	ldr	r3, [r3, #0]
 802b26e:	3317      	adds	r3, #23
 802b270:	4618      	mov	r0, r3
 802b272:	f7ff fe85 	bl	802af80 <load_4>
 802b276:	4602      	mov	r2, r0
 802b278:	460b      	mov	r3, r1
 802b27a:	f04f 0000 	mov.w	r0, #0
 802b27e:	f04f 0100 	mov.w	r1, #0
 802b282:	0950      	lsrs	r0, r2, #5
 802b284:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 802b288:	0959      	lsrs	r1, r3, #5
 802b28a:	4a60      	ldr	r2, [pc, #384]	; (802b40c <sc_reduce+0x3e4>)
 802b28c:	f04f 0300 	mov.w	r3, #0
 802b290:	ea00 0402 	and.w	r4, r0, r2
 802b294:	f8c7 45f0 	str.w	r4, [r7, #1520]	; 0x5f0
 802b298:	400b      	ands	r3, r1
 802b29a:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 802b29e:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 802b2a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b2a6:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802b2aa:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s10 = 2097151 & (load_3(s + 26) >> 2);
 802b2ae:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b2b2:	681b      	ldr	r3, [r3, #0]
 802b2b4:	331a      	adds	r3, #26
 802b2b6:	4618      	mov	r0, r3
 802b2b8:	f7ff fe21 	bl	802aefe <load_3>
 802b2bc:	4602      	mov	r2, r0
 802b2be:	460b      	mov	r3, r1
 802b2c0:	f04f 0000 	mov.w	r0, #0
 802b2c4:	f04f 0100 	mov.w	r1, #0
 802b2c8:	0890      	lsrs	r0, r2, #2
 802b2ca:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 802b2ce:	0899      	lsrs	r1, r3, #2
 802b2d0:	4a4e      	ldr	r2, [pc, #312]	; (802b40c <sc_reduce+0x3e4>)
 802b2d2:	f04f 0300 	mov.w	r3, #0
 802b2d6:	ea00 0402 	and.w	r4, r0, r2
 802b2da:	f8c7 45e8 	str.w	r4, [r7, #1512]	; 0x5e8
 802b2de:	400b      	ands	r3, r1
 802b2e0:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 802b2e4:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 802b2e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b2ec:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802b2f0:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s11 = 2097151 & (load_4(s + 28) >> 7);
 802b2f4:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b2f8:	681b      	ldr	r3, [r3, #0]
 802b2fa:	331c      	adds	r3, #28
 802b2fc:	4618      	mov	r0, r3
 802b2fe:	f7ff fe3f 	bl	802af80 <load_4>
 802b302:	4602      	mov	r2, r0
 802b304:	460b      	mov	r3, r1
 802b306:	f04f 0000 	mov.w	r0, #0
 802b30a:	f04f 0100 	mov.w	r1, #0
 802b30e:	09d0      	lsrs	r0, r2, #7
 802b310:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 802b314:	09d9      	lsrs	r1, r3, #7
 802b316:	4a3d      	ldr	r2, [pc, #244]	; (802b40c <sc_reduce+0x3e4>)
 802b318:	f04f 0300 	mov.w	r3, #0
 802b31c:	ea00 0402 	and.w	r4, r0, r2
 802b320:	f8c7 45e0 	str.w	r4, [r7, #1504]	; 0x5e0
 802b324:	400b      	ands	r3, r1
 802b326:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 802b32a:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 802b32e:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b332:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802b336:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s12 = 2097151 & (load_4(s + 31) >> 4);
 802b33a:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b33e:	681b      	ldr	r3, [r3, #0]
 802b340:	331f      	adds	r3, #31
 802b342:	4618      	mov	r0, r3
 802b344:	f7ff fe1c 	bl	802af80 <load_4>
 802b348:	4602      	mov	r2, r0
 802b34a:	460b      	mov	r3, r1
 802b34c:	f04f 0000 	mov.w	r0, #0
 802b350:	f04f 0100 	mov.w	r1, #0
 802b354:	0910      	lsrs	r0, r2, #4
 802b356:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 802b35a:	0919      	lsrs	r1, r3, #4
 802b35c:	4a2b      	ldr	r2, [pc, #172]	; (802b40c <sc_reduce+0x3e4>)
 802b35e:	f04f 0300 	mov.w	r3, #0
 802b362:	ea00 0402 	and.w	r4, r0, r2
 802b366:	f8c7 45d8 	str.w	r4, [r7, #1496]	; 0x5d8
 802b36a:	400b      	ands	r3, r1
 802b36c:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 802b370:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 802b374:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b378:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802b37c:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s13 = 2097151 & (load_3(s + 34) >> 1);
 802b380:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b384:	681b      	ldr	r3, [r3, #0]
 802b386:	3322      	adds	r3, #34	; 0x22
 802b388:	4618      	mov	r0, r3
 802b38a:	f7ff fdb8 	bl	802aefe <load_3>
 802b38e:	4602      	mov	r2, r0
 802b390:	460b      	mov	r3, r1
 802b392:	f04f 0000 	mov.w	r0, #0
 802b396:	f04f 0100 	mov.w	r1, #0
 802b39a:	0850      	lsrs	r0, r2, #1
 802b39c:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 802b3a0:	0859      	lsrs	r1, r3, #1
 802b3a2:	4a1a      	ldr	r2, [pc, #104]	; (802b40c <sc_reduce+0x3e4>)
 802b3a4:	f04f 0300 	mov.w	r3, #0
 802b3a8:	ea00 0402 	and.w	r4, r0, r2
 802b3ac:	f8c7 45d0 	str.w	r4, [r7, #1488]	; 0x5d0
 802b3b0:	400b      	ands	r3, r1
 802b3b2:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 802b3b6:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 802b3ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b3be:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 802b3c2:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s14 = 2097151 & (load_4(s + 36) >> 6);
 802b3c6:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b3ca:	681b      	ldr	r3, [r3, #0]
 802b3cc:	3324      	adds	r3, #36	; 0x24
 802b3ce:	4618      	mov	r0, r3
 802b3d0:	f7ff fdd6 	bl	802af80 <load_4>
 802b3d4:	4602      	mov	r2, r0
 802b3d6:	460b      	mov	r3, r1
 802b3d8:	f04f 0000 	mov.w	r0, #0
 802b3dc:	f04f 0100 	mov.w	r1, #0
 802b3e0:	0990      	lsrs	r0, r2, #6
 802b3e2:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 802b3e6:	0999      	lsrs	r1, r3, #6
 802b3e8:	4a08      	ldr	r2, [pc, #32]	; (802b40c <sc_reduce+0x3e4>)
 802b3ea:	f04f 0300 	mov.w	r3, #0
 802b3ee:	ea00 0402 	and.w	r4, r0, r2
 802b3f2:	f8c7 45c8 	str.w	r4, [r7, #1480]	; 0x5c8
 802b3f6:	400b      	ands	r3, r1
 802b3f8:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 802b3fc:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 802b400:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b404:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 802b408:	e002      	b.n	802b410 <sc_reduce+0x3e8>
 802b40a:	bf00      	nop
 802b40c:	001fffff 	.word	0x001fffff
 802b410:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s15 = 2097151 & (load_3(s + 39) >> 3);
 802b414:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b418:	681b      	ldr	r3, [r3, #0]
 802b41a:	3327      	adds	r3, #39	; 0x27
 802b41c:	4618      	mov	r0, r3
 802b41e:	f7ff fd6e 	bl	802aefe <load_3>
 802b422:	4602      	mov	r2, r0
 802b424:	460b      	mov	r3, r1
 802b426:	f04f 0000 	mov.w	r0, #0
 802b42a:	f04f 0100 	mov.w	r1, #0
 802b42e:	08d0      	lsrs	r0, r2, #3
 802b430:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 802b434:	08d9      	lsrs	r1, r3, #3
 802b436:	4aec      	ldr	r2, [pc, #944]	; (802b7e8 <sc_reduce+0x7c0>)
 802b438:	f04f 0300 	mov.w	r3, #0
 802b43c:	ea00 0402 	and.w	r4, r0, r2
 802b440:	f8c7 45c0 	str.w	r4, [r7, #1472]	; 0x5c0
 802b444:	400b      	ands	r3, r1
 802b446:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 802b44a:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 802b44e:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b452:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 802b456:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s16 = 2097151 & load_3(s + 42);
 802b45a:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b45e:	681b      	ldr	r3, [r3, #0]
 802b460:	332a      	adds	r3, #42	; 0x2a
 802b462:	4618      	mov	r0, r3
 802b464:	f7ff fd4b 	bl	802aefe <load_3>
 802b468:	4602      	mov	r2, r0
 802b46a:	460b      	mov	r3, r1
 802b46c:	4610      	mov	r0, r2
 802b46e:	4619      	mov	r1, r3
 802b470:	4add      	ldr	r2, [pc, #884]	; (802b7e8 <sc_reduce+0x7c0>)
 802b472:	f04f 0300 	mov.w	r3, #0
 802b476:	ea00 0402 	and.w	r4, r0, r2
 802b47a:	f8c7 45b8 	str.w	r4, [r7, #1464]	; 0x5b8
 802b47e:	400b      	ands	r3, r1
 802b480:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 802b484:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 802b488:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b48c:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 802b490:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s17 = 2097151 & (load_4(s + 44) >> 5);
 802b494:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b498:	681b      	ldr	r3, [r3, #0]
 802b49a:	332c      	adds	r3, #44	; 0x2c
 802b49c:	4618      	mov	r0, r3
 802b49e:	f7ff fd6f 	bl	802af80 <load_4>
 802b4a2:	4602      	mov	r2, r0
 802b4a4:	460b      	mov	r3, r1
 802b4a6:	f04f 0000 	mov.w	r0, #0
 802b4aa:	f04f 0100 	mov.w	r1, #0
 802b4ae:	0950      	lsrs	r0, r2, #5
 802b4b0:	ea40 60c3 	orr.w	r0, r0, r3, lsl #27
 802b4b4:	0959      	lsrs	r1, r3, #5
 802b4b6:	4acc      	ldr	r2, [pc, #816]	; (802b7e8 <sc_reduce+0x7c0>)
 802b4b8:	f04f 0300 	mov.w	r3, #0
 802b4bc:	ea00 0402 	and.w	r4, r0, r2
 802b4c0:	f8c7 45b0 	str.w	r4, [r7, #1456]	; 0x5b0
 802b4c4:	400b      	ands	r3, r1
 802b4c6:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 802b4ca:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 802b4ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b4d2:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 802b4d6:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s18 = 2097151 & (load_3(s + 47) >> 2);
 802b4da:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b4de:	681b      	ldr	r3, [r3, #0]
 802b4e0:	332f      	adds	r3, #47	; 0x2f
 802b4e2:	4618      	mov	r0, r3
 802b4e4:	f7ff fd0b 	bl	802aefe <load_3>
 802b4e8:	4602      	mov	r2, r0
 802b4ea:	460b      	mov	r3, r1
 802b4ec:	f04f 0000 	mov.w	r0, #0
 802b4f0:	f04f 0100 	mov.w	r1, #0
 802b4f4:	0890      	lsrs	r0, r2, #2
 802b4f6:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 802b4fa:	0899      	lsrs	r1, r3, #2
 802b4fc:	4aba      	ldr	r2, [pc, #744]	; (802b7e8 <sc_reduce+0x7c0>)
 802b4fe:	f04f 0300 	mov.w	r3, #0
 802b502:	ea00 0402 	and.w	r4, r0, r2
 802b506:	f8c7 45a8 	str.w	r4, [r7, #1448]	; 0x5a8
 802b50a:	400b      	ands	r3, r1
 802b50c:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 802b510:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 802b514:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b518:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 802b51c:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s19 = 2097151 & (load_4(s + 49) >> 7);
 802b520:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b524:	681b      	ldr	r3, [r3, #0]
 802b526:	3331      	adds	r3, #49	; 0x31
 802b528:	4618      	mov	r0, r3
 802b52a:	f7ff fd29 	bl	802af80 <load_4>
 802b52e:	4602      	mov	r2, r0
 802b530:	460b      	mov	r3, r1
 802b532:	f04f 0000 	mov.w	r0, #0
 802b536:	f04f 0100 	mov.w	r1, #0
 802b53a:	09d0      	lsrs	r0, r2, #7
 802b53c:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 802b540:	09d9      	lsrs	r1, r3, #7
 802b542:	4aa9      	ldr	r2, [pc, #676]	; (802b7e8 <sc_reduce+0x7c0>)
 802b544:	f04f 0300 	mov.w	r3, #0
 802b548:	ea00 0402 	and.w	r4, r0, r2
 802b54c:	f8c7 45a0 	str.w	r4, [r7, #1440]	; 0x5a0
 802b550:	400b      	ands	r3, r1
 802b552:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 802b556:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 802b55a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b55e:	f507 62f2 	add.w	r2, r7, #1936	; 0x790
 802b562:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s20 = 2097151 & (load_4(s + 52) >> 4);
 802b566:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b56a:	681b      	ldr	r3, [r3, #0]
 802b56c:	3334      	adds	r3, #52	; 0x34
 802b56e:	4618      	mov	r0, r3
 802b570:	f7ff fd06 	bl	802af80 <load_4>
 802b574:	4602      	mov	r2, r0
 802b576:	460b      	mov	r3, r1
 802b578:	f04f 0000 	mov.w	r0, #0
 802b57c:	f04f 0100 	mov.w	r1, #0
 802b580:	0910      	lsrs	r0, r2, #4
 802b582:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 802b586:	0919      	lsrs	r1, r3, #4
 802b588:	4a97      	ldr	r2, [pc, #604]	; (802b7e8 <sc_reduce+0x7c0>)
 802b58a:	f04f 0300 	mov.w	r3, #0
 802b58e:	ea00 0402 	and.w	r4, r0, r2
 802b592:	f8c7 4598 	str.w	r4, [r7, #1432]	; 0x598
 802b596:	400b      	ands	r3, r1
 802b598:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 802b59c:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 802b5a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b5a4:	f507 62f1 	add.w	r2, r7, #1928	; 0x788
 802b5a8:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s21 = 2097151 & (load_3(s + 55) >> 1);
 802b5ac:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b5b0:	681b      	ldr	r3, [r3, #0]
 802b5b2:	3337      	adds	r3, #55	; 0x37
 802b5b4:	4618      	mov	r0, r3
 802b5b6:	f7ff fca2 	bl	802aefe <load_3>
 802b5ba:	4602      	mov	r2, r0
 802b5bc:	460b      	mov	r3, r1
 802b5be:	f04f 0000 	mov.w	r0, #0
 802b5c2:	f04f 0100 	mov.w	r1, #0
 802b5c6:	0850      	lsrs	r0, r2, #1
 802b5c8:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 802b5cc:	0859      	lsrs	r1, r3, #1
 802b5ce:	4a86      	ldr	r2, [pc, #536]	; (802b7e8 <sc_reduce+0x7c0>)
 802b5d0:	f04f 0300 	mov.w	r3, #0
 802b5d4:	ea00 0402 	and.w	r4, r0, r2
 802b5d8:	f8c7 4590 	str.w	r4, [r7, #1424]	; 0x590
 802b5dc:	400b      	ands	r3, r1
 802b5de:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 802b5e2:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 802b5e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b5ea:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 802b5ee:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s22 = 2097151 & (load_4(s + 57) >> 6);
 802b5f2:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b5f6:	681b      	ldr	r3, [r3, #0]
 802b5f8:	3339      	adds	r3, #57	; 0x39
 802b5fa:	4618      	mov	r0, r3
 802b5fc:	f7ff fcc0 	bl	802af80 <load_4>
 802b600:	4602      	mov	r2, r0
 802b602:	460b      	mov	r3, r1
 802b604:	f04f 0000 	mov.w	r0, #0
 802b608:	f04f 0100 	mov.w	r1, #0
 802b60c:	0990      	lsrs	r0, r2, #6
 802b60e:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 802b612:	0999      	lsrs	r1, r3, #6
 802b614:	4a74      	ldr	r2, [pc, #464]	; (802b7e8 <sc_reduce+0x7c0>)
 802b616:	f04f 0300 	mov.w	r3, #0
 802b61a:	ea00 0402 	and.w	r4, r0, r2
 802b61e:	f8c7 4588 	str.w	r4, [r7, #1416]	; 0x588
 802b622:	400b      	ands	r3, r1
 802b624:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 802b628:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 802b62c:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b630:	f507 62ef 	add.w	r2, r7, #1912	; 0x778
 802b634:	e9c2 3400 	strd	r3, r4, [r2]
    int64_t s23 = (load_4(s + 60) >> 3);
 802b638:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802b63c:	681b      	ldr	r3, [r3, #0]
 802b63e:	333c      	adds	r3, #60	; 0x3c
 802b640:	4618      	mov	r0, r3
 802b642:	f7ff fc9d 	bl	802af80 <load_4>
 802b646:	4602      	mov	r2, r0
 802b648:	460b      	mov	r3, r1
 802b64a:	f04f 0000 	mov.w	r0, #0
 802b64e:	f04f 0100 	mov.w	r1, #0
 802b652:	08d0      	lsrs	r0, r2, #3
 802b654:	ea40 7043 	orr.w	r0, r0, r3, lsl #29
 802b658:	08d9      	lsrs	r1, r3, #3
 802b65a:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 802b65e:	e9c3 0100 	strd	r0, r1, [r3]
    int64_t carry13;
    int64_t carry14;
    int64_t carry15;
    int64_t carry16;

    s11 += s23 * 666643;
 802b662:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 802b666:	4b61      	ldr	r3, [pc, #388]	; (802b7ec <sc_reduce+0x7c4>)
 802b668:	fb03 f102 	mul.w	r1, r3, r2
 802b66c:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802b670:	2300      	movs	r3, #0
 802b672:	fb03 f302 	mul.w	r3, r3, r2
 802b676:	18cc      	adds	r4, r1, r3
 802b678:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802b67c:	4b5b      	ldr	r3, [pc, #364]	; (802b7ec <sc_reduce+0x7c4>)
 802b67e:	fba2 0103 	umull	r0, r1, r2, r3
 802b682:	1863      	adds	r3, r4, r1
 802b684:	4619      	mov	r1, r3
 802b686:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b68e:	1814      	adds	r4, r2, r0
 802b690:	f8c7 4580 	str.w	r4, [r7, #1408]	; 0x580
 802b694:	414b      	adcs	r3, r1
 802b696:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 802b69a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 802b69e:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b6a2:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802b6a6:	e9c2 3400 	strd	r3, r4, [r2]
    s12 += s23 * 470296;
 802b6aa:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 802b6ae:	4b50      	ldr	r3, [pc, #320]	; (802b7f0 <sc_reduce+0x7c8>)
 802b6b0:	fb03 f102 	mul.w	r1, r3, r2
 802b6b4:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802b6b8:	2300      	movs	r3, #0
 802b6ba:	fb03 f302 	mul.w	r3, r3, r2
 802b6be:	18cc      	adds	r4, r1, r3
 802b6c0:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802b6c4:	4b4a      	ldr	r3, [pc, #296]	; (802b7f0 <sc_reduce+0x7c8>)
 802b6c6:	fba2 0103 	umull	r0, r1, r2, r3
 802b6ca:	1863      	adds	r3, r4, r1
 802b6cc:	4619      	mov	r1, r3
 802b6ce:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b6d6:	1814      	adds	r4, r2, r0
 802b6d8:	f8c7 4578 	str.w	r4, [r7, #1400]	; 0x578
 802b6dc:	414b      	adcs	r3, r1
 802b6de:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 802b6e2:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 802b6e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b6ea:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802b6ee:	e9c2 3400 	strd	r3, r4, [r2]
    s13 += s23 * 654183;
 802b6f2:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 802b6f6:	4b3f      	ldr	r3, [pc, #252]	; (802b7f4 <sc_reduce+0x7cc>)
 802b6f8:	fb03 f102 	mul.w	r1, r3, r2
 802b6fc:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802b700:	2300      	movs	r3, #0
 802b702:	fb03 f302 	mul.w	r3, r3, r2
 802b706:	18cc      	adds	r4, r1, r3
 802b708:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802b70c:	4b39      	ldr	r3, [pc, #228]	; (802b7f4 <sc_reduce+0x7cc>)
 802b70e:	fba2 0103 	umull	r0, r1, r2, r3
 802b712:	1863      	adds	r3, r4, r1
 802b714:	4619      	mov	r1, r3
 802b716:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 802b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b71e:	1814      	adds	r4, r2, r0
 802b720:	f8c7 4570 	str.w	r4, [r7, #1392]	; 0x570
 802b724:	414b      	adcs	r3, r1
 802b726:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 802b72a:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 802b72e:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b732:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 802b736:	e9c2 3400 	strd	r3, r4, [r2]
    s14 -= s23 * 997805;
 802b73a:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 802b73e:	4b2e      	ldr	r3, [pc, #184]	; (802b7f8 <sc_reduce+0x7d0>)
 802b740:	fb03 f102 	mul.w	r1, r3, r2
 802b744:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802b748:	f04f 33ff 	mov.w	r3, #4294967295
 802b74c:	fb03 f302 	mul.w	r3, r3, r2
 802b750:	18cc      	adds	r4, r1, r3
 802b752:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802b756:	4b28      	ldr	r3, [pc, #160]	; (802b7f8 <sc_reduce+0x7d0>)
 802b758:	fba2 0103 	umull	r0, r1, r2, r3
 802b75c:	1863      	adds	r3, r4, r1
 802b75e:	4619      	mov	r1, r3
 802b760:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 802b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b768:	1814      	adds	r4, r2, r0
 802b76a:	f8c7 4568 	str.w	r4, [r7, #1384]	; 0x568
 802b76e:	414b      	adcs	r3, r1
 802b770:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 802b774:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 802b778:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b77c:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 802b780:	e9c2 3400 	strd	r3, r4, [r2]
    s15 += s23 * 136657;
 802b784:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 802b788:	4b1c      	ldr	r3, [pc, #112]	; (802b7fc <sc_reduce+0x7d4>)
 802b78a:	fb03 f102 	mul.w	r1, r3, r2
 802b78e:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802b792:	2300      	movs	r3, #0
 802b794:	fb03 f302 	mul.w	r3, r3, r2
 802b798:	18cc      	adds	r4, r1, r3
 802b79a:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802b79e:	4b17      	ldr	r3, [pc, #92]	; (802b7fc <sc_reduce+0x7d4>)
 802b7a0:	fba2 0103 	umull	r0, r1, r2, r3
 802b7a4:	1863      	adds	r3, r4, r1
 802b7a6:	4619      	mov	r1, r3
 802b7a8:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 802b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b7b0:	1814      	adds	r4, r2, r0
 802b7b2:	f8c7 4560 	str.w	r4, [r7, #1376]	; 0x560
 802b7b6:	414b      	adcs	r3, r1
 802b7b8:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 802b7bc:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 802b7c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b7c4:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 802b7c8:	e9c2 3400 	strd	r3, r4, [r2]
    s16 -= s23 * 683901;
 802b7cc:	f8d7 2774 	ldr.w	r2, [r7, #1908]	; 0x774
 802b7d0:	4b0b      	ldr	r3, [pc, #44]	; (802b800 <sc_reduce+0x7d8>)
 802b7d2:	fb03 f102 	mul.w	r1, r3, r2
 802b7d6:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802b7da:	f04f 33ff 	mov.w	r3, #4294967295
 802b7de:	fb03 f302 	mul.w	r3, r3, r2
 802b7e2:	18cc      	adds	r4, r1, r3
 802b7e4:	e00e      	b.n	802b804 <sc_reduce+0x7dc>
 802b7e6:	bf00      	nop
 802b7e8:	001fffff 	.word	0x001fffff
 802b7ec:	000a2c13 	.word	0x000a2c13
 802b7f0:	00072d18 	.word	0x00072d18
 802b7f4:	0009fb67 	.word	0x0009fb67
 802b7f8:	fff0c653 	.word	0xfff0c653
 802b7fc:	000215d1 	.word	0x000215d1
 802b800:	fff59083 	.word	0xfff59083
 802b804:	f8d7 2770 	ldr.w	r2, [r7, #1904]	; 0x770
 802b808:	4be5      	ldr	r3, [pc, #916]	; (802bba0 <sc_reduce+0xb78>)
 802b80a:	fba2 0103 	umull	r0, r1, r2, r3
 802b80e:	1863      	adds	r3, r4, r1
 802b810:	4619      	mov	r1, r3
 802b812:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 802b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b81a:	1814      	adds	r4, r2, r0
 802b81c:	f8c7 4558 	str.w	r4, [r7, #1368]	; 0x558
 802b820:	414b      	adcs	r3, r1
 802b822:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 802b826:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 802b82a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b82e:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 802b832:	e9c2 3400 	strd	r3, r4, [r2]
    s23 = 0;
 802b836:	f04f 0200 	mov.w	r2, #0
 802b83a:	f04f 0300 	mov.w	r3, #0
 802b83e:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 802b842:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += s22 * 666643;
 802b846:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 802b84a:	4bd6      	ldr	r3, [pc, #856]	; (802bba4 <sc_reduce+0xb7c>)
 802b84c:	fb03 f102 	mul.w	r1, r3, r2
 802b850:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802b854:	2300      	movs	r3, #0
 802b856:	fb03 f302 	mul.w	r3, r3, r2
 802b85a:	18cc      	adds	r4, r1, r3
 802b85c:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802b860:	4bd0      	ldr	r3, [pc, #832]	; (802bba4 <sc_reduce+0xb7c>)
 802b862:	fba2 0103 	umull	r0, r1, r2, r3
 802b866:	1863      	adds	r3, r4, r1
 802b868:	4619      	mov	r1, r3
 802b86a:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b872:	1814      	adds	r4, r2, r0
 802b874:	f8c7 4550 	str.w	r4, [r7, #1360]	; 0x550
 802b878:	414b      	adcs	r3, r1
 802b87a:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 802b87e:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 802b882:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b886:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802b88a:	e9c2 3400 	strd	r3, r4, [r2]
    s11 += s22 * 470296;
 802b88e:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 802b892:	4bc5      	ldr	r3, [pc, #788]	; (802bba8 <sc_reduce+0xb80>)
 802b894:	fb03 f102 	mul.w	r1, r3, r2
 802b898:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802b89c:	2300      	movs	r3, #0
 802b89e:	fb03 f302 	mul.w	r3, r3, r2
 802b8a2:	18cc      	adds	r4, r1, r3
 802b8a4:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802b8a8:	4bbf      	ldr	r3, [pc, #764]	; (802bba8 <sc_reduce+0xb80>)
 802b8aa:	fba2 0103 	umull	r0, r1, r2, r3
 802b8ae:	1863      	adds	r3, r4, r1
 802b8b0:	4619      	mov	r1, r3
 802b8b2:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802b8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b8ba:	1814      	adds	r4, r2, r0
 802b8bc:	f8c7 4548 	str.w	r4, [r7, #1352]	; 0x548
 802b8c0:	414b      	adcs	r3, r1
 802b8c2:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 802b8c6:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 802b8ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b8ce:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802b8d2:	e9c2 3400 	strd	r3, r4, [r2]
    s12 += s22 * 654183;
 802b8d6:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 802b8da:	4bb4      	ldr	r3, [pc, #720]	; (802bbac <sc_reduce+0xb84>)
 802b8dc:	fb03 f102 	mul.w	r1, r3, r2
 802b8e0:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802b8e4:	2300      	movs	r3, #0
 802b8e6:	fb03 f302 	mul.w	r3, r3, r2
 802b8ea:	18cc      	adds	r4, r1, r3
 802b8ec:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802b8f0:	4bae      	ldr	r3, [pc, #696]	; (802bbac <sc_reduce+0xb84>)
 802b8f2:	fba2 0103 	umull	r0, r1, r2, r3
 802b8f6:	1863      	adds	r3, r4, r1
 802b8f8:	4619      	mov	r1, r3
 802b8fa:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802b8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b902:	1814      	adds	r4, r2, r0
 802b904:	f8c7 4540 	str.w	r4, [r7, #1344]	; 0x540
 802b908:	414b      	adcs	r3, r1
 802b90a:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 802b90e:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 802b912:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b916:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802b91a:	e9c2 3400 	strd	r3, r4, [r2]
    s13 -= s22 * 997805;
 802b91e:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 802b922:	4ba3      	ldr	r3, [pc, #652]	; (802bbb0 <sc_reduce+0xb88>)
 802b924:	fb03 f102 	mul.w	r1, r3, r2
 802b928:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802b92c:	f04f 33ff 	mov.w	r3, #4294967295
 802b930:	fb03 f302 	mul.w	r3, r3, r2
 802b934:	18cc      	adds	r4, r1, r3
 802b936:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802b93a:	4b9d      	ldr	r3, [pc, #628]	; (802bbb0 <sc_reduce+0xb88>)
 802b93c:	fba2 0103 	umull	r0, r1, r2, r3
 802b940:	1863      	adds	r3, r4, r1
 802b942:	4619      	mov	r1, r3
 802b944:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 802b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b94c:	1814      	adds	r4, r2, r0
 802b94e:	f8c7 4538 	str.w	r4, [r7, #1336]	; 0x538
 802b952:	414b      	adcs	r3, r1
 802b954:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 802b958:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 802b95c:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b960:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 802b964:	e9c2 3400 	strd	r3, r4, [r2]
    s14 += s22 * 136657;
 802b968:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 802b96c:	4b91      	ldr	r3, [pc, #580]	; (802bbb4 <sc_reduce+0xb8c>)
 802b96e:	fb03 f102 	mul.w	r1, r3, r2
 802b972:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802b976:	2300      	movs	r3, #0
 802b978:	fb03 f302 	mul.w	r3, r3, r2
 802b97c:	18cc      	adds	r4, r1, r3
 802b97e:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802b982:	4b8c      	ldr	r3, [pc, #560]	; (802bbb4 <sc_reduce+0xb8c>)
 802b984:	fba2 0103 	umull	r0, r1, r2, r3
 802b988:	1863      	adds	r3, r4, r1
 802b98a:	4619      	mov	r1, r3
 802b98c:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 802b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b994:	1814      	adds	r4, r2, r0
 802b996:	f8c7 4530 	str.w	r4, [r7, #1328]	; 0x530
 802b99a:	414b      	adcs	r3, r1
 802b99c:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 802b9a0:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 802b9a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b9a8:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 802b9ac:	e9c2 3400 	strd	r3, r4, [r2]
    s15 -= s22 * 683901;
 802b9b0:	f8d7 277c 	ldr.w	r2, [r7, #1916]	; 0x77c
 802b9b4:	4b7a      	ldr	r3, [pc, #488]	; (802bba0 <sc_reduce+0xb78>)
 802b9b6:	fb03 f102 	mul.w	r1, r3, r2
 802b9ba:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802b9be:	f04f 33ff 	mov.w	r3, #4294967295
 802b9c2:	fb03 f302 	mul.w	r3, r3, r2
 802b9c6:	18cc      	adds	r4, r1, r3
 802b9c8:	f8d7 2778 	ldr.w	r2, [r7, #1912]	; 0x778
 802b9cc:	4b74      	ldr	r3, [pc, #464]	; (802bba0 <sc_reduce+0xb78>)
 802b9ce:	fba2 0103 	umull	r0, r1, r2, r3
 802b9d2:	1863      	adds	r3, r4, r1
 802b9d4:	4619      	mov	r1, r3
 802b9d6:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 802b9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b9de:	1814      	adds	r4, r2, r0
 802b9e0:	f8c7 4528 	str.w	r4, [r7, #1320]	; 0x528
 802b9e4:	414b      	adcs	r3, r1
 802b9e6:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 802b9ea:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 802b9ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 802b9f2:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 802b9f6:	e9c2 3400 	strd	r3, r4, [r2]
    s22 = 0;
 802b9fa:	f04f 0200 	mov.w	r2, #0
 802b9fe:	f04f 0300 	mov.w	r3, #0
 802ba02:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 802ba06:	e9c1 2300 	strd	r2, r3, [r1]
    s9 += s21 * 666643;
 802ba0a:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 802ba0e:	4b65      	ldr	r3, [pc, #404]	; (802bba4 <sc_reduce+0xb7c>)
 802ba10:	fb03 f102 	mul.w	r1, r3, r2
 802ba14:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802ba18:	2300      	movs	r3, #0
 802ba1a:	fb03 f302 	mul.w	r3, r3, r2
 802ba1e:	18cc      	adds	r4, r1, r3
 802ba20:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802ba24:	4b5f      	ldr	r3, [pc, #380]	; (802bba4 <sc_reduce+0xb7c>)
 802ba26:	fba2 0103 	umull	r0, r1, r2, r3
 802ba2a:	1863      	adds	r3, r4, r1
 802ba2c:	4619      	mov	r1, r3
 802ba2e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ba36:	1814      	adds	r4, r2, r0
 802ba38:	f8c7 4520 	str.w	r4, [r7, #1312]	; 0x520
 802ba3c:	414b      	adcs	r3, r1
 802ba3e:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 802ba42:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 802ba46:	e9d3 3400 	ldrd	r3, r4, [r3]
 802ba4a:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802ba4e:	e9c2 3400 	strd	r3, r4, [r2]
    s10 += s21 * 470296;
 802ba52:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 802ba56:	4b54      	ldr	r3, [pc, #336]	; (802bba8 <sc_reduce+0xb80>)
 802ba58:	fb03 f102 	mul.w	r1, r3, r2
 802ba5c:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802ba60:	2300      	movs	r3, #0
 802ba62:	fb03 f302 	mul.w	r3, r3, r2
 802ba66:	18cc      	adds	r4, r1, r3
 802ba68:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802ba6c:	4b4e      	ldr	r3, [pc, #312]	; (802bba8 <sc_reduce+0xb80>)
 802ba6e:	fba2 0103 	umull	r0, r1, r2, r3
 802ba72:	1863      	adds	r3, r4, r1
 802ba74:	4619      	mov	r1, r3
 802ba76:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ba7e:	1814      	adds	r4, r2, r0
 802ba80:	f8c7 4518 	str.w	r4, [r7, #1304]	; 0x518
 802ba84:	414b      	adcs	r3, r1
 802ba86:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 802ba8a:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 802ba8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 802ba92:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802ba96:	e9c2 3400 	strd	r3, r4, [r2]
    s11 += s21 * 654183;
 802ba9a:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 802ba9e:	4b43      	ldr	r3, [pc, #268]	; (802bbac <sc_reduce+0xb84>)
 802baa0:	fb03 f102 	mul.w	r1, r3, r2
 802baa4:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802baa8:	2300      	movs	r3, #0
 802baaa:	fb03 f302 	mul.w	r3, r3, r2
 802baae:	18cc      	adds	r4, r1, r3
 802bab0:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802bab4:	4b3d      	ldr	r3, [pc, #244]	; (802bbac <sc_reduce+0xb84>)
 802bab6:	fba2 0103 	umull	r0, r1, r2, r3
 802baba:	1863      	adds	r3, r4, r1
 802babc:	4619      	mov	r1, r3
 802babe:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802bac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bac6:	1814      	adds	r4, r2, r0
 802bac8:	f8c7 4510 	str.w	r4, [r7, #1296]	; 0x510
 802bacc:	414b      	adcs	r3, r1
 802bace:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 802bad2:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 802bad6:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bada:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802bade:	e9c2 3400 	strd	r3, r4, [r2]
    s12 -= s21 * 997805;
 802bae2:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 802bae6:	4b32      	ldr	r3, [pc, #200]	; (802bbb0 <sc_reduce+0xb88>)
 802bae8:	fb03 f102 	mul.w	r1, r3, r2
 802baec:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802baf0:	f04f 33ff 	mov.w	r3, #4294967295
 802baf4:	fb03 f302 	mul.w	r3, r3, r2
 802baf8:	18cc      	adds	r4, r1, r3
 802bafa:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802bafe:	4b2c      	ldr	r3, [pc, #176]	; (802bbb0 <sc_reduce+0xb88>)
 802bb00:	fba2 0103 	umull	r0, r1, r2, r3
 802bb04:	1863      	adds	r3, r4, r1
 802bb06:	4619      	mov	r1, r3
 802bb08:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bb10:	1814      	adds	r4, r2, r0
 802bb12:	f8c7 4508 	str.w	r4, [r7, #1288]	; 0x508
 802bb16:	414b      	adcs	r3, r1
 802bb18:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 802bb1c:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 802bb20:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bb24:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802bb28:	e9c2 3400 	strd	r3, r4, [r2]
    s13 += s21 * 136657;
 802bb2c:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 802bb30:	4b20      	ldr	r3, [pc, #128]	; (802bbb4 <sc_reduce+0xb8c>)
 802bb32:	fb03 f102 	mul.w	r1, r3, r2
 802bb36:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802bb3a:	2300      	movs	r3, #0
 802bb3c:	fb03 f302 	mul.w	r3, r3, r2
 802bb40:	18cc      	adds	r4, r1, r3
 802bb42:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802bb46:	4b1b      	ldr	r3, [pc, #108]	; (802bbb4 <sc_reduce+0xb8c>)
 802bb48:	fba2 0103 	umull	r0, r1, r2, r3
 802bb4c:	1863      	adds	r3, r4, r1
 802bb4e:	4619      	mov	r1, r3
 802bb50:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 802bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bb58:	1814      	adds	r4, r2, r0
 802bb5a:	f8c7 4500 	str.w	r4, [r7, #1280]	; 0x500
 802bb5e:	414b      	adcs	r3, r1
 802bb60:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 802bb64:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 802bb68:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bb6c:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 802bb70:	e9c2 3400 	strd	r3, r4, [r2]
    s14 -= s21 * 683901;
 802bb74:	f8d7 2784 	ldr.w	r2, [r7, #1924]	; 0x784
 802bb78:	4b09      	ldr	r3, [pc, #36]	; (802bba0 <sc_reduce+0xb78>)
 802bb7a:	fb03 f102 	mul.w	r1, r3, r2
 802bb7e:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802bb82:	f04f 33ff 	mov.w	r3, #4294967295
 802bb86:	fb03 f302 	mul.w	r3, r3, r2
 802bb8a:	18cc      	adds	r4, r1, r3
 802bb8c:	f8d7 2780 	ldr.w	r2, [r7, #1920]	; 0x780
 802bb90:	4b03      	ldr	r3, [pc, #12]	; (802bba0 <sc_reduce+0xb78>)
 802bb92:	fba2 0103 	umull	r0, r1, r2, r3
 802bb96:	1863      	adds	r3, r4, r1
 802bb98:	4619      	mov	r1, r3
 802bb9a:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 802bb9e:	e00b      	b.n	802bbb8 <sc_reduce+0xb90>
 802bba0:	fff59083 	.word	0xfff59083
 802bba4:	000a2c13 	.word	0x000a2c13
 802bba8:	00072d18 	.word	0x00072d18
 802bbac:	0009fb67 	.word	0x0009fb67
 802bbb0:	fff0c653 	.word	0xfff0c653
 802bbb4:	000215d1 	.word	0x000215d1
 802bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bbbc:	1814      	adds	r4, r2, r0
 802bbbe:	f8c7 44f8 	str.w	r4, [r7, #1272]	; 0x4f8
 802bbc2:	414b      	adcs	r3, r1
 802bbc4:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 802bbc8:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 802bbcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bbd0:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 802bbd4:	e9c2 3400 	strd	r3, r4, [r2]
    s21 = 0;
 802bbd8:	f04f 0200 	mov.w	r2, #0
 802bbdc:	f04f 0300 	mov.w	r3, #0
 802bbe0:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 802bbe4:	e9c1 2300 	strd	r2, r3, [r1]
    s8 += s20 * 666643;
 802bbe8:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 802bbec:	4be5      	ldr	r3, [pc, #916]	; (802bf84 <sc_reduce+0xf5c>)
 802bbee:	fb03 f102 	mul.w	r1, r3, r2
 802bbf2:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802bbf6:	2300      	movs	r3, #0
 802bbf8:	fb03 f302 	mul.w	r3, r3, r2
 802bbfc:	18cc      	adds	r4, r1, r3
 802bbfe:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802bc02:	4be0      	ldr	r3, [pc, #896]	; (802bf84 <sc_reduce+0xf5c>)
 802bc04:	fba2 0103 	umull	r0, r1, r2, r3
 802bc08:	1863      	adds	r3, r4, r1
 802bc0a:	4619      	mov	r1, r3
 802bc0c:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802bc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bc14:	1814      	adds	r4, r2, r0
 802bc16:	f8c7 44f0 	str.w	r4, [r7, #1264]	; 0x4f0
 802bc1a:	414b      	adcs	r3, r1
 802bc1c:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 802bc20:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 802bc24:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bc28:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802bc2c:	e9c2 3400 	strd	r3, r4, [r2]
    s9 += s20 * 470296;
 802bc30:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 802bc34:	4bd4      	ldr	r3, [pc, #848]	; (802bf88 <sc_reduce+0xf60>)
 802bc36:	fb03 f102 	mul.w	r1, r3, r2
 802bc3a:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802bc3e:	2300      	movs	r3, #0
 802bc40:	fb03 f302 	mul.w	r3, r3, r2
 802bc44:	18cc      	adds	r4, r1, r3
 802bc46:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802bc4a:	4bcf      	ldr	r3, [pc, #828]	; (802bf88 <sc_reduce+0xf60>)
 802bc4c:	fba2 0103 	umull	r0, r1, r2, r3
 802bc50:	1863      	adds	r3, r4, r1
 802bc52:	4619      	mov	r1, r3
 802bc54:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802bc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bc5c:	1814      	adds	r4, r2, r0
 802bc5e:	f8c7 44e8 	str.w	r4, [r7, #1256]	; 0x4e8
 802bc62:	414b      	adcs	r3, r1
 802bc64:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 802bc68:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 802bc6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bc70:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802bc74:	e9c2 3400 	strd	r3, r4, [r2]
    s10 += s20 * 654183;
 802bc78:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 802bc7c:	4bc3      	ldr	r3, [pc, #780]	; (802bf8c <sc_reduce+0xf64>)
 802bc7e:	fb03 f102 	mul.w	r1, r3, r2
 802bc82:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802bc86:	2300      	movs	r3, #0
 802bc88:	fb03 f302 	mul.w	r3, r3, r2
 802bc8c:	18cc      	adds	r4, r1, r3
 802bc8e:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802bc92:	4bbe      	ldr	r3, [pc, #760]	; (802bf8c <sc_reduce+0xf64>)
 802bc94:	fba2 0103 	umull	r0, r1, r2, r3
 802bc98:	1863      	adds	r3, r4, r1
 802bc9a:	4619      	mov	r1, r3
 802bc9c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bca4:	1814      	adds	r4, r2, r0
 802bca6:	f8c7 44e0 	str.w	r4, [r7, #1248]	; 0x4e0
 802bcaa:	414b      	adcs	r3, r1
 802bcac:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 802bcb0:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 802bcb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bcb8:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802bcbc:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= s20 * 997805;
 802bcc0:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 802bcc4:	4bb2      	ldr	r3, [pc, #712]	; (802bf90 <sc_reduce+0xf68>)
 802bcc6:	fb03 f102 	mul.w	r1, r3, r2
 802bcca:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802bcce:	f04f 33ff 	mov.w	r3, #4294967295
 802bcd2:	fb03 f302 	mul.w	r3, r3, r2
 802bcd6:	18cc      	adds	r4, r1, r3
 802bcd8:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802bcdc:	4bac      	ldr	r3, [pc, #688]	; (802bf90 <sc_reduce+0xf68>)
 802bcde:	fba2 0103 	umull	r0, r1, r2, r3
 802bce2:	1863      	adds	r3, r4, r1
 802bce4:	4619      	mov	r1, r3
 802bce6:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802bcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bcee:	1814      	adds	r4, r2, r0
 802bcf0:	f8c7 44d8 	str.w	r4, [r7, #1240]	; 0x4d8
 802bcf4:	414b      	adcs	r3, r1
 802bcf6:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 802bcfa:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 802bcfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bd02:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802bd06:	e9c2 3400 	strd	r3, r4, [r2]
    s12 += s20 * 136657;
 802bd0a:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 802bd0e:	4ba1      	ldr	r3, [pc, #644]	; (802bf94 <sc_reduce+0xf6c>)
 802bd10:	fb03 f102 	mul.w	r1, r3, r2
 802bd14:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802bd18:	2300      	movs	r3, #0
 802bd1a:	fb03 f302 	mul.w	r3, r3, r2
 802bd1e:	18cc      	adds	r4, r1, r3
 802bd20:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802bd24:	4b9b      	ldr	r3, [pc, #620]	; (802bf94 <sc_reduce+0xf6c>)
 802bd26:	fba2 0103 	umull	r0, r1, r2, r3
 802bd2a:	1863      	adds	r3, r4, r1
 802bd2c:	4619      	mov	r1, r3
 802bd2e:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bd36:	1814      	adds	r4, r2, r0
 802bd38:	f8c7 44d0 	str.w	r4, [r7, #1232]	; 0x4d0
 802bd3c:	414b      	adcs	r3, r1
 802bd3e:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 802bd42:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 802bd46:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bd4a:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802bd4e:	e9c2 3400 	strd	r3, r4, [r2]
    s13 -= s20 * 683901;
 802bd52:	f8d7 278c 	ldr.w	r2, [r7, #1932]	; 0x78c
 802bd56:	4b90      	ldr	r3, [pc, #576]	; (802bf98 <sc_reduce+0xf70>)
 802bd58:	fb03 f102 	mul.w	r1, r3, r2
 802bd5c:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802bd60:	f04f 33ff 	mov.w	r3, #4294967295
 802bd64:	fb03 f302 	mul.w	r3, r3, r2
 802bd68:	18cc      	adds	r4, r1, r3
 802bd6a:	f8d7 2788 	ldr.w	r2, [r7, #1928]	; 0x788
 802bd6e:	4b8a      	ldr	r3, [pc, #552]	; (802bf98 <sc_reduce+0xf70>)
 802bd70:	fba2 0103 	umull	r0, r1, r2, r3
 802bd74:	1863      	adds	r3, r4, r1
 802bd76:	4619      	mov	r1, r3
 802bd78:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 802bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bd80:	1814      	adds	r4, r2, r0
 802bd82:	f8c7 44c8 	str.w	r4, [r7, #1224]	; 0x4c8
 802bd86:	414b      	adcs	r3, r1
 802bd88:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 802bd8c:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 802bd90:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bd94:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 802bd98:	e9c2 3400 	strd	r3, r4, [r2]
    s20 = 0;
 802bd9c:	f04f 0200 	mov.w	r2, #0
 802bda0:	f04f 0300 	mov.w	r3, #0
 802bda4:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 802bda8:	e9c1 2300 	strd	r2, r3, [r1]
    s7 += s19 * 666643;
 802bdac:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 802bdb0:	4b74      	ldr	r3, [pc, #464]	; (802bf84 <sc_reduce+0xf5c>)
 802bdb2:	fb03 f102 	mul.w	r1, r3, r2
 802bdb6:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802bdba:	2300      	movs	r3, #0
 802bdbc:	fb03 f302 	mul.w	r3, r3, r2
 802bdc0:	18cc      	adds	r4, r1, r3
 802bdc2:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802bdc6:	4b6f      	ldr	r3, [pc, #444]	; (802bf84 <sc_reduce+0xf5c>)
 802bdc8:	fba2 0103 	umull	r0, r1, r2, r3
 802bdcc:	1863      	adds	r3, r4, r1
 802bdce:	4619      	mov	r1, r3
 802bdd0:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bdd8:	1814      	adds	r4, r2, r0
 802bdda:	f8c7 44c0 	str.w	r4, [r7, #1216]	; 0x4c0
 802bdde:	414b      	adcs	r3, r1
 802bde0:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 802bde4:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 802bde8:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bdec:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802bdf0:	e9c2 3400 	strd	r3, r4, [r2]
    s8 += s19 * 470296;
 802bdf4:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 802bdf8:	4b63      	ldr	r3, [pc, #396]	; (802bf88 <sc_reduce+0xf60>)
 802bdfa:	fb03 f102 	mul.w	r1, r3, r2
 802bdfe:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802be02:	2300      	movs	r3, #0
 802be04:	fb03 f302 	mul.w	r3, r3, r2
 802be08:	18cc      	adds	r4, r1, r3
 802be0a:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802be0e:	4b5e      	ldr	r3, [pc, #376]	; (802bf88 <sc_reduce+0xf60>)
 802be10:	fba2 0103 	umull	r0, r1, r2, r3
 802be14:	1863      	adds	r3, r4, r1
 802be16:	4619      	mov	r1, r3
 802be18:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802be20:	1814      	adds	r4, r2, r0
 802be22:	f8c7 44b8 	str.w	r4, [r7, #1208]	; 0x4b8
 802be26:	414b      	adcs	r3, r1
 802be28:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 802be2c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 802be30:	e9d3 3400 	ldrd	r3, r4, [r3]
 802be34:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802be38:	e9c2 3400 	strd	r3, r4, [r2]
    s9 += s19 * 654183;
 802be3c:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 802be40:	4b52      	ldr	r3, [pc, #328]	; (802bf8c <sc_reduce+0xf64>)
 802be42:	fb03 f102 	mul.w	r1, r3, r2
 802be46:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802be4a:	2300      	movs	r3, #0
 802be4c:	fb03 f302 	mul.w	r3, r3, r2
 802be50:	18cc      	adds	r4, r1, r3
 802be52:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802be56:	4b4d      	ldr	r3, [pc, #308]	; (802bf8c <sc_reduce+0xf64>)
 802be58:	fba2 0103 	umull	r0, r1, r2, r3
 802be5c:	1863      	adds	r3, r4, r1
 802be5e:	4619      	mov	r1, r3
 802be60:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802be64:	e9d3 2300 	ldrd	r2, r3, [r3]
 802be68:	1814      	adds	r4, r2, r0
 802be6a:	f8c7 44b0 	str.w	r4, [r7, #1200]	; 0x4b0
 802be6e:	414b      	adcs	r3, r1
 802be70:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 802be74:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 802be78:	e9d3 3400 	ldrd	r3, r4, [r3]
 802be7c:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802be80:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= s19 * 997805;
 802be84:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 802be88:	4b41      	ldr	r3, [pc, #260]	; (802bf90 <sc_reduce+0xf68>)
 802be8a:	fb03 f102 	mul.w	r1, r3, r2
 802be8e:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802be92:	f04f 33ff 	mov.w	r3, #4294967295
 802be96:	fb03 f302 	mul.w	r3, r3, r2
 802be9a:	18cc      	adds	r4, r1, r3
 802be9c:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802bea0:	4b3b      	ldr	r3, [pc, #236]	; (802bf90 <sc_reduce+0xf68>)
 802bea2:	fba2 0103 	umull	r0, r1, r2, r3
 802bea6:	1863      	adds	r3, r4, r1
 802bea8:	4619      	mov	r1, r3
 802beaa:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802beae:	e9d3 2300 	ldrd	r2, r3, [r3]
 802beb2:	1814      	adds	r4, r2, r0
 802beb4:	f8c7 44a8 	str.w	r4, [r7, #1192]	; 0x4a8
 802beb8:	414b      	adcs	r3, r1
 802beba:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 802bebe:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 802bec2:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bec6:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802beca:	e9c2 3400 	strd	r3, r4, [r2]
    s11 += s19 * 136657;
 802bece:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 802bed2:	4b30      	ldr	r3, [pc, #192]	; (802bf94 <sc_reduce+0xf6c>)
 802bed4:	fb03 f102 	mul.w	r1, r3, r2
 802bed8:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802bedc:	2300      	movs	r3, #0
 802bede:	fb03 f302 	mul.w	r3, r3, r2
 802bee2:	18cc      	adds	r4, r1, r3
 802bee4:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802bee8:	4b2a      	ldr	r3, [pc, #168]	; (802bf94 <sc_reduce+0xf6c>)
 802beea:	fba2 0103 	umull	r0, r1, r2, r3
 802beee:	1863      	adds	r3, r4, r1
 802bef0:	4619      	mov	r1, r3
 802bef2:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802befa:	1814      	adds	r4, r2, r0
 802befc:	f8c7 44a0 	str.w	r4, [r7, #1184]	; 0x4a0
 802bf00:	414b      	adcs	r3, r1
 802bf02:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 802bf06:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 802bf0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bf0e:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802bf12:	e9c2 3400 	strd	r3, r4, [r2]
    s12 -= s19 * 683901;
 802bf16:	f8d7 2794 	ldr.w	r2, [r7, #1940]	; 0x794
 802bf1a:	4b1f      	ldr	r3, [pc, #124]	; (802bf98 <sc_reduce+0xf70>)
 802bf1c:	fb03 f102 	mul.w	r1, r3, r2
 802bf20:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802bf24:	f04f 33ff 	mov.w	r3, #4294967295
 802bf28:	fb03 f302 	mul.w	r3, r3, r2
 802bf2c:	18cc      	adds	r4, r1, r3
 802bf2e:	f8d7 2790 	ldr.w	r2, [r7, #1936]	; 0x790
 802bf32:	4b19      	ldr	r3, [pc, #100]	; (802bf98 <sc_reduce+0xf70>)
 802bf34:	fba2 0103 	umull	r0, r1, r2, r3
 802bf38:	1863      	adds	r3, r4, r1
 802bf3a:	4619      	mov	r1, r3
 802bf3c:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bf44:	1814      	adds	r4, r2, r0
 802bf46:	f8c7 4498 	str.w	r4, [r7, #1176]	; 0x498
 802bf4a:	414b      	adcs	r3, r1
 802bf4c:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 802bf50:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 802bf54:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bf58:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802bf5c:	e9c2 3400 	strd	r3, r4, [r2]
    s19 = 0;
 802bf60:	f04f 0200 	mov.w	r2, #0
 802bf64:	f04f 0300 	mov.w	r3, #0
 802bf68:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 802bf6c:	e9c1 2300 	strd	r2, r3, [r1]
    s6 += s18 * 666643;
 802bf70:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 802bf74:	4b03      	ldr	r3, [pc, #12]	; (802bf84 <sc_reduce+0xf5c>)
 802bf76:	fb03 f102 	mul.w	r1, r3, r2
 802bf7a:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802bf7e:	2300      	movs	r3, #0
 802bf80:	e00c      	b.n	802bf9c <sc_reduce+0xf74>
 802bf82:	bf00      	nop
 802bf84:	000a2c13 	.word	0x000a2c13
 802bf88:	00072d18 	.word	0x00072d18
 802bf8c:	0009fb67 	.word	0x0009fb67
 802bf90:	fff0c653 	.word	0xfff0c653
 802bf94:	000215d1 	.word	0x000215d1
 802bf98:	fff59083 	.word	0xfff59083
 802bf9c:	fb03 f302 	mul.w	r3, r3, r2
 802bfa0:	18cc      	adds	r4, r1, r3
 802bfa2:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802bfa6:	4bef      	ldr	r3, [pc, #956]	; (802c364 <sc_reduce+0x133c>)
 802bfa8:	fba2 0103 	umull	r0, r1, r2, r3
 802bfac:	1863      	adds	r3, r4, r1
 802bfae:	4619      	mov	r1, r3
 802bfb0:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802bfb8:	1814      	adds	r4, r2, r0
 802bfba:	f8c7 4490 	str.w	r4, [r7, #1168]	; 0x490
 802bfbe:	414b      	adcs	r3, r1
 802bfc0:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 802bfc4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 802bfc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 802bfcc:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802bfd0:	e9c2 3400 	strd	r3, r4, [r2]
    s7 += s18 * 470296;
 802bfd4:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 802bfd8:	4be3      	ldr	r3, [pc, #908]	; (802c368 <sc_reduce+0x1340>)
 802bfda:	fb03 f102 	mul.w	r1, r3, r2
 802bfde:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802bfe2:	2300      	movs	r3, #0
 802bfe4:	fb03 f302 	mul.w	r3, r3, r2
 802bfe8:	18cc      	adds	r4, r1, r3
 802bfea:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802bfee:	4bde      	ldr	r3, [pc, #888]	; (802c368 <sc_reduce+0x1340>)
 802bff0:	fba2 0103 	umull	r0, r1, r2, r3
 802bff4:	1863      	adds	r3, r4, r1
 802bff6:	4619      	mov	r1, r3
 802bff8:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802bffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c000:	1814      	adds	r4, r2, r0
 802c002:	f8c7 4488 	str.w	r4, [r7, #1160]	; 0x488
 802c006:	414b      	adcs	r3, r1
 802c008:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 802c00c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 802c010:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c014:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802c018:	e9c2 3400 	strd	r3, r4, [r2]
    s8 += s18 * 654183;
 802c01c:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 802c020:	4bd2      	ldr	r3, [pc, #840]	; (802c36c <sc_reduce+0x1344>)
 802c022:	fb03 f102 	mul.w	r1, r3, r2
 802c026:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802c02a:	2300      	movs	r3, #0
 802c02c:	fb03 f302 	mul.w	r3, r3, r2
 802c030:	18cc      	adds	r4, r1, r3
 802c032:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802c036:	4bcd      	ldr	r3, [pc, #820]	; (802c36c <sc_reduce+0x1344>)
 802c038:	fba2 0103 	umull	r0, r1, r2, r3
 802c03c:	1863      	adds	r3, r4, r1
 802c03e:	4619      	mov	r1, r3
 802c040:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802c044:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c048:	1814      	adds	r4, r2, r0
 802c04a:	f8c7 4480 	str.w	r4, [r7, #1152]	; 0x480
 802c04e:	414b      	adcs	r3, r1
 802c050:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 802c054:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 802c058:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c05c:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802c060:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= s18 * 997805;
 802c064:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 802c068:	4bc1      	ldr	r3, [pc, #772]	; (802c370 <sc_reduce+0x1348>)
 802c06a:	fb03 f102 	mul.w	r1, r3, r2
 802c06e:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802c072:	f04f 33ff 	mov.w	r3, #4294967295
 802c076:	fb03 f302 	mul.w	r3, r3, r2
 802c07a:	18cc      	adds	r4, r1, r3
 802c07c:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802c080:	4bbb      	ldr	r3, [pc, #748]	; (802c370 <sc_reduce+0x1348>)
 802c082:	fba2 0103 	umull	r0, r1, r2, r3
 802c086:	1863      	adds	r3, r4, r1
 802c088:	4619      	mov	r1, r3
 802c08a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c092:	1814      	adds	r4, r2, r0
 802c094:	f8c7 4478 	str.w	r4, [r7, #1144]	; 0x478
 802c098:	414b      	adcs	r3, r1
 802c09a:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 802c09e:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 802c0a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c0a6:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802c0aa:	e9c2 3400 	strd	r3, r4, [r2]
    s10 += s18 * 136657;
 802c0ae:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 802c0b2:	4bb0      	ldr	r3, [pc, #704]	; (802c374 <sc_reduce+0x134c>)
 802c0b4:	fb03 f102 	mul.w	r1, r3, r2
 802c0b8:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802c0bc:	2300      	movs	r3, #0
 802c0be:	fb03 f302 	mul.w	r3, r3, r2
 802c0c2:	18cc      	adds	r4, r1, r3
 802c0c4:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802c0c8:	4baa      	ldr	r3, [pc, #680]	; (802c374 <sc_reduce+0x134c>)
 802c0ca:	fba2 0103 	umull	r0, r1, r2, r3
 802c0ce:	1863      	adds	r3, r4, r1
 802c0d0:	4619      	mov	r1, r3
 802c0d2:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802c0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c0da:	1814      	adds	r4, r2, r0
 802c0dc:	f8c7 4470 	str.w	r4, [r7, #1136]	; 0x470
 802c0e0:	414b      	adcs	r3, r1
 802c0e2:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 802c0e6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 802c0ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c0ee:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802c0f2:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= s18 * 683901;
 802c0f6:	f8d7 279c 	ldr.w	r2, [r7, #1948]	; 0x79c
 802c0fa:	4b9f      	ldr	r3, [pc, #636]	; (802c378 <sc_reduce+0x1350>)
 802c0fc:	fb03 f102 	mul.w	r1, r3, r2
 802c100:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802c104:	f04f 33ff 	mov.w	r3, #4294967295
 802c108:	fb03 f302 	mul.w	r3, r3, r2
 802c10c:	18cc      	adds	r4, r1, r3
 802c10e:	f8d7 2798 	ldr.w	r2, [r7, #1944]	; 0x798
 802c112:	4b99      	ldr	r3, [pc, #612]	; (802c378 <sc_reduce+0x1350>)
 802c114:	fba2 0103 	umull	r0, r1, r2, r3
 802c118:	1863      	adds	r3, r4, r1
 802c11a:	4619      	mov	r1, r3
 802c11c:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802c120:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c124:	1814      	adds	r4, r2, r0
 802c126:	f8c7 4468 	str.w	r4, [r7, #1128]	; 0x468
 802c12a:	414b      	adcs	r3, r1
 802c12c:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 802c130:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 802c134:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c138:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802c13c:	e9c2 3400 	strd	r3, r4, [r2]
    s18 = 0;
 802c140:	f04f 0200 	mov.w	r2, #0
 802c144:	f04f 0300 	mov.w	r3, #0
 802c148:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 802c14c:	e9c1 2300 	strd	r2, r3, [r1]
    carry6 = (s6 + (1 << 20)) >> 21;
 802c150:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802c154:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c158:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802c15c:	f8c7 16d8 	str.w	r1, [r7, #1752]	; 0x6d8
 802c160:	f143 0300 	adc.w	r3, r3, #0
 802c164:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 802c168:	f04f 0200 	mov.w	r2, #0
 802c16c:	f04f 0300 	mov.w	r3, #0
 802c170:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 802c174:	e9d1 4500 	ldrd	r4, r5, [r1]
 802c178:	4621      	mov	r1, r4
 802c17a:	0d4a      	lsrs	r2, r1, #21
 802c17c:	4629      	mov	r1, r5
 802c17e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802c182:	4629      	mov	r1, r5
 802c184:	154b      	asrs	r3, r1, #21
 802c186:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 802c18a:	e9c1 2300 	strd	r2, r3, [r1]
    s7 += carry6;
 802c18e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802c192:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c196:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c19e:	1884      	adds	r4, r0, r2
 802c1a0:	f8c7 4460 	str.w	r4, [r7, #1120]	; 0x460
 802c1a4:	eb41 0303 	adc.w	r3, r1, r3
 802c1a8:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 802c1ac:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 802c1b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c1b4:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802c1b8:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 802c1bc:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802c1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c1c4:	f04f 0000 	mov.w	r0, #0
 802c1c8:	f04f 0100 	mov.w	r1, #0
 802c1cc:	0559      	lsls	r1, r3, #21
 802c1ce:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802c1d2:	0550      	lsls	r0, r2, #21
 802c1d4:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802c1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c1dc:	1a14      	subs	r4, r2, r0
 802c1de:	f8c7 4458 	str.w	r4, [r7, #1112]	; 0x458
 802c1e2:	eb63 0301 	sbc.w	r3, r3, r1
 802c1e6:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 802c1ea:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 802c1ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c1f2:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802c1f6:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = (s8 + (1 << 20)) >> 21;
 802c1fa:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802c1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c202:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802c206:	f8c7 16d0 	str.w	r1, [r7, #1744]	; 0x6d0
 802c20a:	f143 0300 	adc.w	r3, r3, #0
 802c20e:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 802c212:	f04f 0200 	mov.w	r2, #0
 802c216:	f04f 0300 	mov.w	r3, #0
 802c21a:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 802c21e:	e9d1 4500 	ldrd	r4, r5, [r1]
 802c222:	4621      	mov	r1, r4
 802c224:	0d4a      	lsrs	r2, r1, #21
 802c226:	4629      	mov	r1, r5
 802c228:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802c22c:	4629      	mov	r1, r5
 802c22e:	154b      	asrs	r3, r1, #21
 802c230:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 802c234:	e9c1 2300 	strd	r2, r3, [r1]
    s9 += carry8;
 802c238:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802c23c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c240:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802c244:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c248:	1884      	adds	r4, r0, r2
 802c24a:	f8c7 4450 	str.w	r4, [r7, #1104]	; 0x450
 802c24e:	eb41 0303 	adc.w	r3, r1, r3
 802c252:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 802c256:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 802c25a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c25e:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802c262:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 802c266:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802c26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c26e:	f04f 0000 	mov.w	r0, #0
 802c272:	f04f 0100 	mov.w	r1, #0
 802c276:	0559      	lsls	r1, r3, #21
 802c278:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802c27c:	0550      	lsls	r0, r2, #21
 802c27e:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c286:	1a14      	subs	r4, r2, r0
 802c288:	f8c7 4448 	str.w	r4, [r7, #1096]	; 0x448
 802c28c:	eb63 0301 	sbc.w	r3, r3, r1
 802c290:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 802c294:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 802c298:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c29c:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802c2a0:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = (s10 + (1 << 20)) >> 21;
 802c2a4:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c2ac:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802c2b0:	f8c7 16c8 	str.w	r1, [r7, #1736]	; 0x6c8
 802c2b4:	f143 0300 	adc.w	r3, r3, #0
 802c2b8:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 802c2bc:	f04f 0200 	mov.w	r2, #0
 802c2c0:	f04f 0300 	mov.w	r3, #0
 802c2c4:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 802c2c8:	e9d1 4500 	ldrd	r4, r5, [r1]
 802c2cc:	4621      	mov	r1, r4
 802c2ce:	0d4a      	lsrs	r2, r1, #21
 802c2d0:	4629      	mov	r1, r5
 802c2d2:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802c2d6:	4629      	mov	r1, r5
 802c2d8:	154b      	asrs	r3, r1, #21
 802c2da:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 802c2de:	e9c1 2300 	strd	r2, r3, [r1]
    s11 += carry10;
 802c2e2:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802c2e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c2ea:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802c2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c2f2:	1884      	adds	r4, r0, r2
 802c2f4:	f8c7 4440 	str.w	r4, [r7, #1088]	; 0x440
 802c2f8:	eb41 0303 	adc.w	r3, r1, r3
 802c2fc:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 802c300:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 802c304:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c308:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802c30c:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 802c310:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802c314:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c318:	f04f 0000 	mov.w	r0, #0
 802c31c:	f04f 0100 	mov.w	r1, #0
 802c320:	0559      	lsls	r1, r3, #21
 802c322:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802c326:	0550      	lsls	r0, r2, #21
 802c328:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c330:	1a14      	subs	r4, r2, r0
 802c332:	f8c7 4438 	str.w	r4, [r7, #1080]	; 0x438
 802c336:	eb63 0301 	sbc.w	r3, r3, r1
 802c33a:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 802c33e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 802c342:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c346:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802c34a:	e9c2 3400 	strd	r3, r4, [r2]
    carry12 = (s12 + (1 << 20)) >> 21;
 802c34e:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c356:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802c35a:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 802c35e:	f143 0300 	adc.w	r3, r3, #0
 802c362:	e00b      	b.n	802c37c <sc_reduce+0x1354>
 802c364:	000a2c13 	.word	0x000a2c13
 802c368:	00072d18 	.word	0x00072d18
 802c36c:	0009fb67 	.word	0x0009fb67
 802c370:	fff0c653 	.word	0xfff0c653
 802c374:	000215d1 	.word	0x000215d1
 802c378:	fff59083 	.word	0xfff59083
 802c37c:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 802c380:	f04f 0200 	mov.w	r2, #0
 802c384:	f04f 0300 	mov.w	r3, #0
 802c388:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 802c38c:	e9d1 4500 	ldrd	r4, r5, [r1]
 802c390:	4621      	mov	r1, r4
 802c392:	0d4a      	lsrs	r2, r1, #21
 802c394:	4629      	mov	r1, r5
 802c396:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802c39a:	4629      	mov	r1, r5
 802c39c:	154b      	asrs	r3, r1, #21
 802c39e:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 802c3a2:	e9c1 2300 	strd	r2, r3, [r1]
    s13 += carry12;
 802c3a6:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 802c3aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c3ae:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 802c3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c3b6:	1884      	adds	r4, r0, r2
 802c3b8:	f8c7 4430 	str.w	r4, [r7, #1072]	; 0x430
 802c3bc:	eb41 0303 	adc.w	r3, r1, r3
 802c3c0:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 802c3c4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 802c3c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c3cc:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 802c3d0:	e9c2 3400 	strd	r3, r4, [r2]
    s12 -= carry12 << 21;
 802c3d4:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 802c3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c3dc:	f04f 0000 	mov.w	r0, #0
 802c3e0:	f04f 0100 	mov.w	r1, #0
 802c3e4:	0559      	lsls	r1, r3, #21
 802c3e6:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802c3ea:	0550      	lsls	r0, r2, #21
 802c3ec:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802c3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c3f4:	1a14      	subs	r4, r2, r0
 802c3f6:	f8c7 4428 	str.w	r4, [r7, #1064]	; 0x428
 802c3fa:	eb63 0301 	sbc.w	r3, r3, r1
 802c3fe:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 802c402:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 802c406:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c40a:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802c40e:	e9c2 3400 	strd	r3, r4, [r2]
    carry14 = (s14 + (1 << 20)) >> 21;
 802c412:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 802c416:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c41a:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802c41e:	f8c7 16b8 	str.w	r1, [r7, #1720]	; 0x6b8
 802c422:	f143 0300 	adc.w	r3, r3, #0
 802c426:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 802c42a:	f04f 0200 	mov.w	r2, #0
 802c42e:	f04f 0300 	mov.w	r3, #0
 802c432:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 802c436:	e9d1 4500 	ldrd	r4, r5, [r1]
 802c43a:	4621      	mov	r1, r4
 802c43c:	0d4a      	lsrs	r2, r1, #21
 802c43e:	4629      	mov	r1, r5
 802c440:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802c444:	4629      	mov	r1, r5
 802c446:	154b      	asrs	r3, r1, #21
 802c448:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 802c44c:	e9c1 2300 	strd	r2, r3, [r1]
    s15 += carry14;
 802c450:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 802c454:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c458:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 802c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c460:	1884      	adds	r4, r0, r2
 802c462:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
 802c466:	eb41 0303 	adc.w	r3, r1, r3
 802c46a:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 802c46e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 802c472:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c476:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 802c47a:	e9c2 3400 	strd	r3, r4, [r2]
    s14 -= carry14 << 21;
 802c47e:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 802c482:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c486:	f04f 0000 	mov.w	r0, #0
 802c48a:	f04f 0100 	mov.w	r1, #0
 802c48e:	0559      	lsls	r1, r3, #21
 802c490:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802c494:	0550      	lsls	r0, r2, #21
 802c496:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 802c49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c49e:	1a14      	subs	r4, r2, r0
 802c4a0:	f8c7 4418 	str.w	r4, [r7, #1048]	; 0x418
 802c4a4:	eb63 0301 	sbc.w	r3, r3, r1
 802c4a8:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 802c4ac:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 802c4b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c4b4:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 802c4b8:	e9c2 3400 	strd	r3, r4, [r2]
    carry16 = (s16 + (1 << 20)) >> 21;
 802c4bc:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 802c4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c4c4:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802c4c8:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 802c4cc:	f143 0300 	adc.w	r3, r3, #0
 802c4d0:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 802c4d4:	f04f 0200 	mov.w	r2, #0
 802c4d8:	f04f 0300 	mov.w	r3, #0
 802c4dc:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 802c4e0:	e9d1 4500 	ldrd	r4, r5, [r1]
 802c4e4:	4621      	mov	r1, r4
 802c4e6:	0d4a      	lsrs	r2, r1, #21
 802c4e8:	4629      	mov	r1, r5
 802c4ea:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802c4ee:	4629      	mov	r1, r5
 802c4f0:	154b      	asrs	r3, r1, #21
 802c4f2:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 802c4f6:	e9c1 2300 	strd	r2, r3, [r1]
    s17 += carry16;
 802c4fa:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 802c4fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c502:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 802c506:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c50a:	1884      	adds	r4, r0, r2
 802c50c:	f8c7 4410 	str.w	r4, [r7, #1040]	; 0x410
 802c510:	eb41 0303 	adc.w	r3, r1, r3
 802c514:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 802c518:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 802c51c:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c520:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 802c524:	e9c2 3400 	strd	r3, r4, [r2]
    s16 -= carry16 << 21;
 802c528:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 802c52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c530:	f04f 0000 	mov.w	r0, #0
 802c534:	f04f 0100 	mov.w	r1, #0
 802c538:	0559      	lsls	r1, r3, #21
 802c53a:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802c53e:	0550      	lsls	r0, r2, #21
 802c540:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 802c544:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c548:	1a14      	subs	r4, r2, r0
 802c54a:	f8c7 4408 	str.w	r4, [r7, #1032]	; 0x408
 802c54e:	eb63 0301 	sbc.w	r3, r3, r1
 802c552:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 802c556:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 802c55a:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c55e:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 802c562:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = (s7 + (1 << 20)) >> 21;
 802c566:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802c56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c56e:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802c572:	f8c7 16a8 	str.w	r1, [r7, #1704]	; 0x6a8
 802c576:	f143 0300 	adc.w	r3, r3, #0
 802c57a:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 802c57e:	f04f 0200 	mov.w	r2, #0
 802c582:	f04f 0300 	mov.w	r3, #0
 802c586:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 802c58a:	e9d1 4500 	ldrd	r4, r5, [r1]
 802c58e:	4621      	mov	r1, r4
 802c590:	0d4a      	lsrs	r2, r1, #21
 802c592:	4629      	mov	r1, r5
 802c594:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802c598:	4629      	mov	r1, r5
 802c59a:	154b      	asrs	r3, r1, #21
 802c59c:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 802c5a0:	e9c1 2300 	strd	r2, r3, [r1]
    s8 += carry7;
 802c5a4:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802c5a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c5ac:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c5b4:	1884      	adds	r4, r0, r2
 802c5b6:	f8c7 4400 	str.w	r4, [r7, #1024]	; 0x400
 802c5ba:	eb41 0303 	adc.w	r3, r1, r3
 802c5be:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 802c5c2:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 802c5c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 802c5ca:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802c5ce:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 802c5d2:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802c5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c5da:	f04f 0000 	mov.w	r0, #0
 802c5de:	f04f 0100 	mov.w	r1, #0
 802c5e2:	0559      	lsls	r1, r3, #21
 802c5e4:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802c5e8:	0550      	lsls	r0, r2, #21
 802c5ea:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c5f2:	1a14      	subs	r4, r2, r0
 802c5f4:	f8c7 43f8 	str.w	r4, [r7, #1016]	; 0x3f8
 802c5f8:	eb63 0301 	sbc.w	r3, r3, r1
 802c5fc:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 802c600:	e9d7 34fe 	ldrd	r3, r4, [r7, #1016]	; 0x3f8
 802c604:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802c608:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = (s9 + (1 << 20)) >> 21;
 802c60c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802c610:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c614:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802c618:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 802c61c:	f143 0300 	adc.w	r3, r3, #0
 802c620:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 802c624:	f04f 0200 	mov.w	r2, #0
 802c628:	f04f 0300 	mov.w	r3, #0
 802c62c:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 802c630:	e9d1 4500 	ldrd	r4, r5, [r1]
 802c634:	4621      	mov	r1, r4
 802c636:	0d4a      	lsrs	r2, r1, #21
 802c638:	4629      	mov	r1, r5
 802c63a:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802c63e:	4629      	mov	r1, r5
 802c640:	154b      	asrs	r3, r1, #21
 802c642:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 802c646:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += carry9;
 802c64a:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802c64e:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c652:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802c656:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c65a:	1884      	adds	r4, r0, r2
 802c65c:	f8c7 43f0 	str.w	r4, [r7, #1008]	; 0x3f0
 802c660:	eb41 0303 	adc.w	r3, r1, r3
 802c664:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 802c668:	e9d7 34fc 	ldrd	r3, r4, [r7, #1008]	; 0x3f0
 802c66c:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802c670:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 802c674:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802c678:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c67c:	f04f 0000 	mov.w	r0, #0
 802c680:	f04f 0100 	mov.w	r1, #0
 802c684:	0559      	lsls	r1, r3, #21
 802c686:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802c68a:	0550      	lsls	r0, r2, #21
 802c68c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802c690:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c694:	1a14      	subs	r4, r2, r0
 802c696:	f8c7 43e8 	str.w	r4, [r7, #1000]	; 0x3e8
 802c69a:	eb63 0301 	sbc.w	r3, r3, r1
 802c69e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 802c6a2:	e9d7 34fa 	ldrd	r3, r4, [r7, #1000]	; 0x3e8
 802c6a6:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802c6aa:	e9c2 3400 	strd	r3, r4, [r2]
    carry11 = (s11 + (1 << 20)) >> 21;
 802c6ae:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802c6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c6b6:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802c6ba:	f8c7 1698 	str.w	r1, [r7, #1688]	; 0x698
 802c6be:	f143 0300 	adc.w	r3, r3, #0
 802c6c2:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 802c6c6:	f04f 0200 	mov.w	r2, #0
 802c6ca:	f04f 0300 	mov.w	r3, #0
 802c6ce:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 802c6d2:	e9d1 4500 	ldrd	r4, r5, [r1]
 802c6d6:	4621      	mov	r1, r4
 802c6d8:	0d4a      	lsrs	r2, r1, #21
 802c6da:	4629      	mov	r1, r5
 802c6dc:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802c6e0:	4629      	mov	r1, r5
 802c6e2:	154b      	asrs	r3, r1, #21
 802c6e4:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 802c6e8:	e9c1 2300 	strd	r2, r3, [r1]
    s12 += carry11;
 802c6ec:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802c6f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c6f4:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 802c6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c6fc:	1884      	adds	r4, r0, r2
 802c6fe:	f8c7 43e0 	str.w	r4, [r7, #992]	; 0x3e0
 802c702:	eb41 0303 	adc.w	r3, r1, r3
 802c706:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 802c70a:	e9d7 34f8 	ldrd	r3, r4, [r7, #992]	; 0x3e0
 802c70e:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802c712:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= carry11 << 21;
 802c716:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 802c71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c71e:	f04f 0000 	mov.w	r0, #0
 802c722:	f04f 0100 	mov.w	r1, #0
 802c726:	0559      	lsls	r1, r3, #21
 802c728:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802c72c:	0550      	lsls	r0, r2, #21
 802c72e:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802c732:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c736:	1a14      	subs	r4, r2, r0
 802c738:	f8c7 43d8 	str.w	r4, [r7, #984]	; 0x3d8
 802c73c:	eb63 0301 	sbc.w	r3, r3, r1
 802c740:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 802c744:	e9d7 34f6 	ldrd	r3, r4, [r7, #984]	; 0x3d8
 802c748:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802c74c:	e9c2 3400 	strd	r3, r4, [r2]
    carry13 = (s13 + (1 << 20)) >> 21;
 802c750:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 802c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c758:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802c75c:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 802c760:	f143 0300 	adc.w	r3, r3, #0
 802c764:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 802c768:	f04f 0200 	mov.w	r2, #0
 802c76c:	f04f 0300 	mov.w	r3, #0
 802c770:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 802c774:	e9d1 4500 	ldrd	r4, r5, [r1]
 802c778:	4621      	mov	r1, r4
 802c77a:	0d4a      	lsrs	r2, r1, #21
 802c77c:	4629      	mov	r1, r5
 802c77e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802c782:	4629      	mov	r1, r5
 802c784:	154b      	asrs	r3, r1, #21
 802c786:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 802c78a:	e9c1 2300 	strd	r2, r3, [r1]
    s14 += carry13;
 802c78e:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 802c792:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c796:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 802c79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c79e:	1884      	adds	r4, r0, r2
 802c7a0:	f8c7 43d0 	str.w	r4, [r7, #976]	; 0x3d0
 802c7a4:	eb41 0303 	adc.w	r3, r1, r3
 802c7a8:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 802c7ac:	e9d7 34f4 	ldrd	r3, r4, [r7, #976]	; 0x3d0
 802c7b0:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 802c7b4:	e9c2 3400 	strd	r3, r4, [r2]
    s13 -= carry13 << 21;
 802c7b8:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 802c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c7c0:	f04f 0000 	mov.w	r0, #0
 802c7c4:	f04f 0100 	mov.w	r1, #0
 802c7c8:	0559      	lsls	r1, r3, #21
 802c7ca:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802c7ce:	0550      	lsls	r0, r2, #21
 802c7d0:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 802c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c7d8:	1a14      	subs	r4, r2, r0
 802c7da:	f8c7 43c8 	str.w	r4, [r7, #968]	; 0x3c8
 802c7de:	eb63 0301 	sbc.w	r3, r3, r1
 802c7e2:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 802c7e6:	e9d7 34f2 	ldrd	r3, r4, [r7, #968]	; 0x3c8
 802c7ea:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 802c7ee:	e9c2 3400 	strd	r3, r4, [r2]
    carry15 = (s15 + (1 << 20)) >> 21;
 802c7f2:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 802c7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c7fa:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802c7fe:	f8c7 1688 	str.w	r1, [r7, #1672]	; 0x688
 802c802:	f143 0300 	adc.w	r3, r3, #0
 802c806:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 802c80a:	f04f 0200 	mov.w	r2, #0
 802c80e:	f04f 0300 	mov.w	r3, #0
 802c812:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 802c816:	e9d1 4500 	ldrd	r4, r5, [r1]
 802c81a:	4621      	mov	r1, r4
 802c81c:	0d4a      	lsrs	r2, r1, #21
 802c81e:	4629      	mov	r1, r5
 802c820:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802c824:	4629      	mov	r1, r5
 802c826:	154b      	asrs	r3, r1, #21
 802c828:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 802c82c:	e9c1 2300 	strd	r2, r3, [r1]
    s16 += carry15;
 802c830:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 802c834:	e9d3 0100 	ldrd	r0, r1, [r3]
 802c838:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 802c83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c840:	1884      	adds	r4, r0, r2
 802c842:	f8c7 43c0 	str.w	r4, [r7, #960]	; 0x3c0
 802c846:	eb41 0303 	adc.w	r3, r1, r3
 802c84a:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 802c84e:	e9d7 34f0 	ldrd	r3, r4, [r7, #960]	; 0x3c0
 802c852:	f507 62f5 	add.w	r2, r7, #1960	; 0x7a8
 802c856:	e9c2 3400 	strd	r3, r4, [r2]
    s15 -= carry15 << 21;
 802c85a:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 802c85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c862:	f04f 0000 	mov.w	r0, #0
 802c866:	f04f 0100 	mov.w	r1, #0
 802c86a:	0559      	lsls	r1, r3, #21
 802c86c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802c870:	0550      	lsls	r0, r2, #21
 802c872:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 802c876:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c87a:	1a14      	subs	r4, r2, r0
 802c87c:	f8c7 43b8 	str.w	r4, [r7, #952]	; 0x3b8
 802c880:	eb63 0301 	sbc.w	r3, r3, r1
 802c884:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 802c888:	e9d7 34ee 	ldrd	r3, r4, [r7, #952]	; 0x3b8
 802c88c:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 802c890:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s17 * 666643;
 802c894:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 802c898:	4be4      	ldr	r3, [pc, #912]	; (802cc2c <sc_reduce+0x1c04>)
 802c89a:	fb03 f102 	mul.w	r1, r3, r2
 802c89e:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802c8a2:	2300      	movs	r3, #0
 802c8a4:	fb03 f302 	mul.w	r3, r3, r2
 802c8a8:	18cc      	adds	r4, r1, r3
 802c8aa:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802c8ae:	4bdf      	ldr	r3, [pc, #892]	; (802cc2c <sc_reduce+0x1c04>)
 802c8b0:	fba2 0103 	umull	r0, r1, r2, r3
 802c8b4:	1863      	adds	r3, r4, r1
 802c8b6:	4619      	mov	r1, r3
 802c8b8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802c8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c8c0:	1814      	adds	r4, r2, r0
 802c8c2:	f8c7 43b0 	str.w	r4, [r7, #944]	; 0x3b0
 802c8c6:	414b      	adcs	r3, r1
 802c8c8:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 802c8cc:	e9d7 34ec 	ldrd	r3, r4, [r7, #944]	; 0x3b0
 802c8d0:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802c8d4:	e9c2 3400 	strd	r3, r4, [r2]
    s6 += s17 * 470296;
 802c8d8:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 802c8dc:	4bd4      	ldr	r3, [pc, #848]	; (802cc30 <sc_reduce+0x1c08>)
 802c8de:	fb03 f102 	mul.w	r1, r3, r2
 802c8e2:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802c8e6:	2300      	movs	r3, #0
 802c8e8:	fb03 f302 	mul.w	r3, r3, r2
 802c8ec:	18cc      	adds	r4, r1, r3
 802c8ee:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802c8f2:	4bcf      	ldr	r3, [pc, #828]	; (802cc30 <sc_reduce+0x1c08>)
 802c8f4:	fba2 0103 	umull	r0, r1, r2, r3
 802c8f8:	1863      	adds	r3, r4, r1
 802c8fa:	4619      	mov	r1, r3
 802c8fc:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802c900:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c904:	1814      	adds	r4, r2, r0
 802c906:	f8c7 43a8 	str.w	r4, [r7, #936]	; 0x3a8
 802c90a:	414b      	adcs	r3, r1
 802c90c:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 802c910:	e9d7 34ea 	ldrd	r3, r4, [r7, #936]	; 0x3a8
 802c914:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802c918:	e9c2 3400 	strd	r3, r4, [r2]
    s7 += s17 * 654183;
 802c91c:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 802c920:	4bc4      	ldr	r3, [pc, #784]	; (802cc34 <sc_reduce+0x1c0c>)
 802c922:	fb03 f102 	mul.w	r1, r3, r2
 802c926:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802c92a:	2300      	movs	r3, #0
 802c92c:	fb03 f302 	mul.w	r3, r3, r2
 802c930:	18cc      	adds	r4, r1, r3
 802c932:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802c936:	4bbf      	ldr	r3, [pc, #764]	; (802cc34 <sc_reduce+0x1c0c>)
 802c938:	fba2 0103 	umull	r0, r1, r2, r3
 802c93c:	1863      	adds	r3, r4, r1
 802c93e:	4619      	mov	r1, r3
 802c940:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c948:	1814      	adds	r4, r2, r0
 802c94a:	f8c7 43a0 	str.w	r4, [r7, #928]	; 0x3a0
 802c94e:	414b      	adcs	r3, r1
 802c950:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 802c954:	e9d7 34e8 	ldrd	r3, r4, [r7, #928]	; 0x3a0
 802c958:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802c95c:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= s17 * 997805;
 802c960:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 802c964:	4bb4      	ldr	r3, [pc, #720]	; (802cc38 <sc_reduce+0x1c10>)
 802c966:	fb03 f102 	mul.w	r1, r3, r2
 802c96a:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802c96e:	f04f 33ff 	mov.w	r3, #4294967295
 802c972:	fb03 f302 	mul.w	r3, r3, r2
 802c976:	18cc      	adds	r4, r1, r3
 802c978:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802c97c:	4bae      	ldr	r3, [pc, #696]	; (802cc38 <sc_reduce+0x1c10>)
 802c97e:	fba2 0103 	umull	r0, r1, r2, r3
 802c982:	1863      	adds	r3, r4, r1
 802c984:	4619      	mov	r1, r3
 802c986:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802c98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c98e:	1814      	adds	r4, r2, r0
 802c990:	f8c7 4398 	str.w	r4, [r7, #920]	; 0x398
 802c994:	414b      	adcs	r3, r1
 802c996:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 802c99a:	e9d7 34e6 	ldrd	r3, r4, [r7, #920]	; 0x398
 802c99e:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802c9a2:	e9c2 3400 	strd	r3, r4, [r2]
    s9 += s17 * 136657;
 802c9a6:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 802c9aa:	4ba4      	ldr	r3, [pc, #656]	; (802cc3c <sc_reduce+0x1c14>)
 802c9ac:	fb03 f102 	mul.w	r1, r3, r2
 802c9b0:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802c9b4:	2300      	movs	r3, #0
 802c9b6:	fb03 f302 	mul.w	r3, r3, r2
 802c9ba:	18cc      	adds	r4, r1, r3
 802c9bc:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802c9c0:	4b9e      	ldr	r3, [pc, #632]	; (802cc3c <sc_reduce+0x1c14>)
 802c9c2:	fba2 0103 	umull	r0, r1, r2, r3
 802c9c6:	1863      	adds	r3, r4, r1
 802c9c8:	4619      	mov	r1, r3
 802c9ca:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802c9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c9d2:	1814      	adds	r4, r2, r0
 802c9d4:	f8c7 4390 	str.w	r4, [r7, #912]	; 0x390
 802c9d8:	414b      	adcs	r3, r1
 802c9da:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 802c9de:	e9d7 34e4 	ldrd	r3, r4, [r7, #912]	; 0x390
 802c9e2:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802c9e6:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= s17 * 683901;
 802c9ea:	f8d7 27a4 	ldr.w	r2, [r7, #1956]	; 0x7a4
 802c9ee:	4b94      	ldr	r3, [pc, #592]	; (802cc40 <sc_reduce+0x1c18>)
 802c9f0:	fb03 f102 	mul.w	r1, r3, r2
 802c9f4:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802c9f8:	f04f 33ff 	mov.w	r3, #4294967295
 802c9fc:	fb03 f302 	mul.w	r3, r3, r2
 802ca00:	18cc      	adds	r4, r1, r3
 802ca02:	f8d7 27a0 	ldr.w	r2, [r7, #1952]	; 0x7a0
 802ca06:	4b8e      	ldr	r3, [pc, #568]	; (802cc40 <sc_reduce+0x1c18>)
 802ca08:	fba2 0103 	umull	r0, r1, r2, r3
 802ca0c:	1863      	adds	r3, r4, r1
 802ca0e:	4619      	mov	r1, r3
 802ca10:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802ca14:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ca18:	1814      	adds	r4, r2, r0
 802ca1a:	f8c7 4388 	str.w	r4, [r7, #904]	; 0x388
 802ca1e:	414b      	adcs	r3, r1
 802ca20:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 802ca24:	e9d7 34e2 	ldrd	r3, r4, [r7, #904]	; 0x388
 802ca28:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802ca2c:	e9c2 3400 	strd	r3, r4, [r2]
    s17 = 0;
 802ca30:	f04f 0200 	mov.w	r2, #0
 802ca34:	f04f 0300 	mov.w	r3, #0
 802ca38:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 802ca3c:	e9c1 2300 	strd	r2, r3, [r1]
    s4 += s16 * 666643;
 802ca40:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 802ca44:	4b79      	ldr	r3, [pc, #484]	; (802cc2c <sc_reduce+0x1c04>)
 802ca46:	fb03 f102 	mul.w	r1, r3, r2
 802ca4a:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802ca4e:	2300      	movs	r3, #0
 802ca50:	fb03 f302 	mul.w	r3, r3, r2
 802ca54:	18cc      	adds	r4, r1, r3
 802ca56:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802ca5a:	4b74      	ldr	r3, [pc, #464]	; (802cc2c <sc_reduce+0x1c04>)
 802ca5c:	fba2 0103 	umull	r0, r1, r2, r3
 802ca60:	1863      	adds	r3, r4, r1
 802ca62:	4619      	mov	r1, r3
 802ca64:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802ca68:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ca6c:	1814      	adds	r4, r2, r0
 802ca6e:	f8c7 4380 	str.w	r4, [r7, #896]	; 0x380
 802ca72:	414b      	adcs	r3, r1
 802ca74:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 802ca78:	e9d7 34e0 	ldrd	r3, r4, [r7, #896]	; 0x380
 802ca7c:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802ca80:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s16 * 470296;
 802ca84:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 802ca88:	4b69      	ldr	r3, [pc, #420]	; (802cc30 <sc_reduce+0x1c08>)
 802ca8a:	fb03 f102 	mul.w	r1, r3, r2
 802ca8e:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802ca92:	2300      	movs	r3, #0
 802ca94:	fb03 f302 	mul.w	r3, r3, r2
 802ca98:	18cc      	adds	r4, r1, r3
 802ca9a:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802ca9e:	4b64      	ldr	r3, [pc, #400]	; (802cc30 <sc_reduce+0x1c08>)
 802caa0:	fba2 0103 	umull	r0, r1, r2, r3
 802caa4:	1863      	adds	r3, r4, r1
 802caa6:	4619      	mov	r1, r3
 802caa8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802caac:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cab0:	1814      	adds	r4, r2, r0
 802cab2:	f8c7 4378 	str.w	r4, [r7, #888]	; 0x378
 802cab6:	414b      	adcs	r3, r1
 802cab8:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 802cabc:	e9d7 34de 	ldrd	r3, r4, [r7, #888]	; 0x378
 802cac0:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802cac4:	e9c2 3400 	strd	r3, r4, [r2]
    s6 += s16 * 654183;
 802cac8:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 802cacc:	4b59      	ldr	r3, [pc, #356]	; (802cc34 <sc_reduce+0x1c0c>)
 802cace:	fb03 f102 	mul.w	r1, r3, r2
 802cad2:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802cad6:	2300      	movs	r3, #0
 802cad8:	fb03 f302 	mul.w	r3, r3, r2
 802cadc:	18cc      	adds	r4, r1, r3
 802cade:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802cae2:	4b54      	ldr	r3, [pc, #336]	; (802cc34 <sc_reduce+0x1c0c>)
 802cae4:	fba2 0103 	umull	r0, r1, r2, r3
 802cae8:	1863      	adds	r3, r4, r1
 802caea:	4619      	mov	r1, r3
 802caec:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802caf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802caf4:	1814      	adds	r4, r2, r0
 802caf6:	f8c7 4370 	str.w	r4, [r7, #880]	; 0x370
 802cafa:	414b      	adcs	r3, r1
 802cafc:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 802cb00:	e9d7 34dc 	ldrd	r3, r4, [r7, #880]	; 0x370
 802cb04:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802cb08:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= s16 * 997805;
 802cb0c:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 802cb10:	4b49      	ldr	r3, [pc, #292]	; (802cc38 <sc_reduce+0x1c10>)
 802cb12:	fb03 f102 	mul.w	r1, r3, r2
 802cb16:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802cb1a:	f04f 33ff 	mov.w	r3, #4294967295
 802cb1e:	fb03 f302 	mul.w	r3, r3, r2
 802cb22:	18cc      	adds	r4, r1, r3
 802cb24:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802cb28:	4b43      	ldr	r3, [pc, #268]	; (802cc38 <sc_reduce+0x1c10>)
 802cb2a:	fba2 0103 	umull	r0, r1, r2, r3
 802cb2e:	1863      	adds	r3, r4, r1
 802cb30:	4619      	mov	r1, r3
 802cb32:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802cb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cb3a:	1814      	adds	r4, r2, r0
 802cb3c:	f8c7 4368 	str.w	r4, [r7, #872]	; 0x368
 802cb40:	414b      	adcs	r3, r1
 802cb42:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 802cb46:	e9d7 34da 	ldrd	r3, r4, [r7, #872]	; 0x368
 802cb4a:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802cb4e:	e9c2 3400 	strd	r3, r4, [r2]
    s8 += s16 * 136657;
 802cb52:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 802cb56:	4b39      	ldr	r3, [pc, #228]	; (802cc3c <sc_reduce+0x1c14>)
 802cb58:	fb03 f102 	mul.w	r1, r3, r2
 802cb5c:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802cb60:	2300      	movs	r3, #0
 802cb62:	fb03 f302 	mul.w	r3, r3, r2
 802cb66:	18cc      	adds	r4, r1, r3
 802cb68:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802cb6c:	4b33      	ldr	r3, [pc, #204]	; (802cc3c <sc_reduce+0x1c14>)
 802cb6e:	fba2 0103 	umull	r0, r1, r2, r3
 802cb72:	1863      	adds	r3, r4, r1
 802cb74:	4619      	mov	r1, r3
 802cb76:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802cb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cb7e:	1814      	adds	r4, r2, r0
 802cb80:	f8c7 4360 	str.w	r4, [r7, #864]	; 0x360
 802cb84:	414b      	adcs	r3, r1
 802cb86:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 802cb8a:	e9d7 34d8 	ldrd	r3, r4, [r7, #864]	; 0x360
 802cb8e:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802cb92:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= s16 * 683901;
 802cb96:	f8d7 27ac 	ldr.w	r2, [r7, #1964]	; 0x7ac
 802cb9a:	4b29      	ldr	r3, [pc, #164]	; (802cc40 <sc_reduce+0x1c18>)
 802cb9c:	fb03 f102 	mul.w	r1, r3, r2
 802cba0:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802cba4:	f04f 33ff 	mov.w	r3, #4294967295
 802cba8:	fb03 f302 	mul.w	r3, r3, r2
 802cbac:	18cc      	adds	r4, r1, r3
 802cbae:	f8d7 27a8 	ldr.w	r2, [r7, #1960]	; 0x7a8
 802cbb2:	4b23      	ldr	r3, [pc, #140]	; (802cc40 <sc_reduce+0x1c18>)
 802cbb4:	fba2 0103 	umull	r0, r1, r2, r3
 802cbb8:	1863      	adds	r3, r4, r1
 802cbba:	4619      	mov	r1, r3
 802cbbc:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cbc4:	1814      	adds	r4, r2, r0
 802cbc6:	f8c7 4358 	str.w	r4, [r7, #856]	; 0x358
 802cbca:	414b      	adcs	r3, r1
 802cbcc:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 802cbd0:	e9d7 34d6 	ldrd	r3, r4, [r7, #856]	; 0x358
 802cbd4:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802cbd8:	e9c2 3400 	strd	r3, r4, [r2]
    s16 = 0;
 802cbdc:	f04f 0200 	mov.w	r2, #0
 802cbe0:	f04f 0300 	mov.w	r3, #0
 802cbe4:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 802cbe8:	e9c1 2300 	strd	r2, r3, [r1]
    s3 += s15 * 666643;
 802cbec:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 802cbf0:	4b0e      	ldr	r3, [pc, #56]	; (802cc2c <sc_reduce+0x1c04>)
 802cbf2:	fb03 f102 	mul.w	r1, r3, r2
 802cbf6:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802cbfa:	2300      	movs	r3, #0
 802cbfc:	fb03 f302 	mul.w	r3, r3, r2
 802cc00:	18cc      	adds	r4, r1, r3
 802cc02:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802cc06:	4b09      	ldr	r3, [pc, #36]	; (802cc2c <sc_reduce+0x1c04>)
 802cc08:	fba2 0103 	umull	r0, r1, r2, r3
 802cc0c:	1863      	adds	r3, r4, r1
 802cc0e:	4619      	mov	r1, r3
 802cc10:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802cc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cc18:	1814      	adds	r4, r2, r0
 802cc1a:	f8c7 4350 	str.w	r4, [r7, #848]	; 0x350
 802cc1e:	414b      	adcs	r3, r1
 802cc20:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 802cc24:	e9d7 34d4 	ldrd	r3, r4, [r7, #848]	; 0x350
 802cc28:	e00c      	b.n	802cc44 <sc_reduce+0x1c1c>
 802cc2a:	bf00      	nop
 802cc2c:	000a2c13 	.word	0x000a2c13
 802cc30:	00072d18 	.word	0x00072d18
 802cc34:	0009fb67 	.word	0x0009fb67
 802cc38:	fff0c653 	.word	0xfff0c653
 802cc3c:	000215d1 	.word	0x000215d1
 802cc40:	fff59083 	.word	0xfff59083
 802cc44:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802cc48:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s15 * 470296;
 802cc4c:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 802cc50:	4be4      	ldr	r3, [pc, #912]	; (802cfe4 <sc_reduce+0x1fbc>)
 802cc52:	fb03 f102 	mul.w	r1, r3, r2
 802cc56:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802cc5a:	2300      	movs	r3, #0
 802cc5c:	fb03 f302 	mul.w	r3, r3, r2
 802cc60:	18cc      	adds	r4, r1, r3
 802cc62:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802cc66:	4bdf      	ldr	r3, [pc, #892]	; (802cfe4 <sc_reduce+0x1fbc>)
 802cc68:	fba2 0103 	umull	r0, r1, r2, r3
 802cc6c:	1863      	adds	r3, r4, r1
 802cc6e:	4619      	mov	r1, r3
 802cc70:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802cc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cc78:	1814      	adds	r4, r2, r0
 802cc7a:	f8c7 4348 	str.w	r4, [r7, #840]	; 0x348
 802cc7e:	414b      	adcs	r3, r1
 802cc80:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 802cc84:	e9d7 34d2 	ldrd	r3, r4, [r7, #840]	; 0x348
 802cc88:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802cc8c:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s15 * 654183;
 802cc90:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 802cc94:	4bd4      	ldr	r3, [pc, #848]	; (802cfe8 <sc_reduce+0x1fc0>)
 802cc96:	fb03 f102 	mul.w	r1, r3, r2
 802cc9a:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802cc9e:	2300      	movs	r3, #0
 802cca0:	fb03 f302 	mul.w	r3, r3, r2
 802cca4:	18cc      	adds	r4, r1, r3
 802cca6:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802ccaa:	4bcf      	ldr	r3, [pc, #828]	; (802cfe8 <sc_reduce+0x1fc0>)
 802ccac:	fba2 0103 	umull	r0, r1, r2, r3
 802ccb0:	1863      	adds	r3, r4, r1
 802ccb2:	4619      	mov	r1, r3
 802ccb4:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802ccb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ccbc:	1814      	adds	r4, r2, r0
 802ccbe:	f8c7 4340 	str.w	r4, [r7, #832]	; 0x340
 802ccc2:	414b      	adcs	r3, r1
 802ccc4:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 802ccc8:	e9d7 34d0 	ldrd	r3, r4, [r7, #832]	; 0x340
 802cccc:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802ccd0:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= s15 * 997805;
 802ccd4:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 802ccd8:	4bc4      	ldr	r3, [pc, #784]	; (802cfec <sc_reduce+0x1fc4>)
 802ccda:	fb03 f102 	mul.w	r1, r3, r2
 802ccde:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802cce2:	f04f 33ff 	mov.w	r3, #4294967295
 802cce6:	fb03 f302 	mul.w	r3, r3, r2
 802ccea:	18cc      	adds	r4, r1, r3
 802ccec:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802ccf0:	4bbe      	ldr	r3, [pc, #760]	; (802cfec <sc_reduce+0x1fc4>)
 802ccf2:	fba2 0103 	umull	r0, r1, r2, r3
 802ccf6:	1863      	adds	r3, r4, r1
 802ccf8:	4619      	mov	r1, r3
 802ccfa:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802ccfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cd02:	1814      	adds	r4, r2, r0
 802cd04:	f8c7 4338 	str.w	r4, [r7, #824]	; 0x338
 802cd08:	414b      	adcs	r3, r1
 802cd0a:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 802cd0e:	e9d7 34ce 	ldrd	r3, r4, [r7, #824]	; 0x338
 802cd12:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802cd16:	e9c2 3400 	strd	r3, r4, [r2]
    s7 += s15 * 136657;
 802cd1a:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 802cd1e:	4bb4      	ldr	r3, [pc, #720]	; (802cff0 <sc_reduce+0x1fc8>)
 802cd20:	fb03 f102 	mul.w	r1, r3, r2
 802cd24:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802cd28:	2300      	movs	r3, #0
 802cd2a:	fb03 f302 	mul.w	r3, r3, r2
 802cd2e:	18cc      	adds	r4, r1, r3
 802cd30:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802cd34:	4bae      	ldr	r3, [pc, #696]	; (802cff0 <sc_reduce+0x1fc8>)
 802cd36:	fba2 0103 	umull	r0, r1, r2, r3
 802cd3a:	1863      	adds	r3, r4, r1
 802cd3c:	4619      	mov	r1, r3
 802cd3e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802cd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cd46:	1814      	adds	r4, r2, r0
 802cd48:	f8c7 4330 	str.w	r4, [r7, #816]	; 0x330
 802cd4c:	414b      	adcs	r3, r1
 802cd4e:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 802cd52:	e9d7 34cc 	ldrd	r3, r4, [r7, #816]	; 0x330
 802cd56:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802cd5a:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= s15 * 683901;
 802cd5e:	f8d7 27b4 	ldr.w	r2, [r7, #1972]	; 0x7b4
 802cd62:	4ba4      	ldr	r3, [pc, #656]	; (802cff4 <sc_reduce+0x1fcc>)
 802cd64:	fb03 f102 	mul.w	r1, r3, r2
 802cd68:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802cd6c:	f04f 33ff 	mov.w	r3, #4294967295
 802cd70:	fb03 f302 	mul.w	r3, r3, r2
 802cd74:	18cc      	adds	r4, r1, r3
 802cd76:	f8d7 27b0 	ldr.w	r2, [r7, #1968]	; 0x7b0
 802cd7a:	4b9e      	ldr	r3, [pc, #632]	; (802cff4 <sc_reduce+0x1fcc>)
 802cd7c:	fba2 0103 	umull	r0, r1, r2, r3
 802cd80:	1863      	adds	r3, r4, r1
 802cd82:	4619      	mov	r1, r3
 802cd84:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802cd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cd8c:	1814      	adds	r4, r2, r0
 802cd8e:	f8c7 4328 	str.w	r4, [r7, #808]	; 0x328
 802cd92:	414b      	adcs	r3, r1
 802cd94:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 802cd98:	e9d7 34ca 	ldrd	r3, r4, [r7, #808]	; 0x328
 802cd9c:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802cda0:	e9c2 3400 	strd	r3, r4, [r2]
    s15 = 0;
 802cda4:	f04f 0200 	mov.w	r2, #0
 802cda8:	f04f 0300 	mov.w	r3, #0
 802cdac:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 802cdb0:	e9c1 2300 	strd	r2, r3, [r1]
    s2 += s14 * 666643;
 802cdb4:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 802cdb8:	4b8f      	ldr	r3, [pc, #572]	; (802cff8 <sc_reduce+0x1fd0>)
 802cdba:	fb03 f102 	mul.w	r1, r3, r2
 802cdbe:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802cdc2:	2300      	movs	r3, #0
 802cdc4:	fb03 f302 	mul.w	r3, r3, r2
 802cdc8:	18cc      	adds	r4, r1, r3
 802cdca:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802cdce:	4b8a      	ldr	r3, [pc, #552]	; (802cff8 <sc_reduce+0x1fd0>)
 802cdd0:	fba2 0103 	umull	r0, r1, r2, r3
 802cdd4:	1863      	adds	r3, r4, r1
 802cdd6:	4619      	mov	r1, r3
 802cdd8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802cddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cde0:	1814      	adds	r4, r2, r0
 802cde2:	f8c7 4320 	str.w	r4, [r7, #800]	; 0x320
 802cde6:	414b      	adcs	r3, r1
 802cde8:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 802cdec:	e9d7 34c8 	ldrd	r3, r4, [r7, #800]	; 0x320
 802cdf0:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802cdf4:	e9c2 3400 	strd	r3, r4, [r2]
    s3 += s14 * 470296;
 802cdf8:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 802cdfc:	4b79      	ldr	r3, [pc, #484]	; (802cfe4 <sc_reduce+0x1fbc>)
 802cdfe:	fb03 f102 	mul.w	r1, r3, r2
 802ce02:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802ce06:	2300      	movs	r3, #0
 802ce08:	fb03 f302 	mul.w	r3, r3, r2
 802ce0c:	18cc      	adds	r4, r1, r3
 802ce0e:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802ce12:	4b74      	ldr	r3, [pc, #464]	; (802cfe4 <sc_reduce+0x1fbc>)
 802ce14:	fba2 0103 	umull	r0, r1, r2, r3
 802ce18:	1863      	adds	r3, r4, r1
 802ce1a:	4619      	mov	r1, r3
 802ce1c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802ce20:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ce24:	1814      	adds	r4, r2, r0
 802ce26:	f8c7 4318 	str.w	r4, [r7, #792]	; 0x318
 802ce2a:	414b      	adcs	r3, r1
 802ce2c:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 802ce30:	e9d7 34c6 	ldrd	r3, r4, [r7, #792]	; 0x318
 802ce34:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802ce38:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s14 * 654183;
 802ce3c:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 802ce40:	4b69      	ldr	r3, [pc, #420]	; (802cfe8 <sc_reduce+0x1fc0>)
 802ce42:	fb03 f102 	mul.w	r1, r3, r2
 802ce46:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802ce4a:	2300      	movs	r3, #0
 802ce4c:	fb03 f302 	mul.w	r3, r3, r2
 802ce50:	18cc      	adds	r4, r1, r3
 802ce52:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802ce56:	4b64      	ldr	r3, [pc, #400]	; (802cfe8 <sc_reduce+0x1fc0>)
 802ce58:	fba2 0103 	umull	r0, r1, r2, r3
 802ce5c:	1863      	adds	r3, r4, r1
 802ce5e:	4619      	mov	r1, r3
 802ce60:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802ce64:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ce68:	1814      	adds	r4, r2, r0
 802ce6a:	f8c7 4310 	str.w	r4, [r7, #784]	; 0x310
 802ce6e:	414b      	adcs	r3, r1
 802ce70:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 802ce74:	e9d7 34c4 	ldrd	r3, r4, [r7, #784]	; 0x310
 802ce78:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802ce7c:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s14 * 997805;
 802ce80:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 802ce84:	4b59      	ldr	r3, [pc, #356]	; (802cfec <sc_reduce+0x1fc4>)
 802ce86:	fb03 f102 	mul.w	r1, r3, r2
 802ce8a:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802ce8e:	f04f 33ff 	mov.w	r3, #4294967295
 802ce92:	fb03 f302 	mul.w	r3, r3, r2
 802ce96:	18cc      	adds	r4, r1, r3
 802ce98:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802ce9c:	4b53      	ldr	r3, [pc, #332]	; (802cfec <sc_reduce+0x1fc4>)
 802ce9e:	fba2 0103 	umull	r0, r1, r2, r3
 802cea2:	1863      	adds	r3, r4, r1
 802cea4:	4619      	mov	r1, r3
 802cea6:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802ceaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ceae:	1814      	adds	r4, r2, r0
 802ceb0:	f8c7 4308 	str.w	r4, [r7, #776]	; 0x308
 802ceb4:	414b      	adcs	r3, r1
 802ceb6:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 802ceba:	e9d7 34c2 	ldrd	r3, r4, [r7, #776]	; 0x308
 802cebe:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802cec2:	e9c2 3400 	strd	r3, r4, [r2]
    s6 += s14 * 136657;
 802cec6:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 802ceca:	4b49      	ldr	r3, [pc, #292]	; (802cff0 <sc_reduce+0x1fc8>)
 802cecc:	fb03 f102 	mul.w	r1, r3, r2
 802ced0:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802ced4:	2300      	movs	r3, #0
 802ced6:	fb03 f302 	mul.w	r3, r3, r2
 802ceda:	18cc      	adds	r4, r1, r3
 802cedc:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802cee0:	4b43      	ldr	r3, [pc, #268]	; (802cff0 <sc_reduce+0x1fc8>)
 802cee2:	fba2 0103 	umull	r0, r1, r2, r3
 802cee6:	1863      	adds	r3, r4, r1
 802cee8:	4619      	mov	r1, r3
 802ceea:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cef2:	1814      	adds	r4, r2, r0
 802cef4:	f8c7 4300 	str.w	r4, [r7, #768]	; 0x300
 802cef8:	414b      	adcs	r3, r1
 802cefa:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 802cefe:	e9d7 34c0 	ldrd	r3, r4, [r7, #768]	; 0x300
 802cf02:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802cf06:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= s14 * 683901;
 802cf0a:	f8d7 27bc 	ldr.w	r2, [r7, #1980]	; 0x7bc
 802cf0e:	4b39      	ldr	r3, [pc, #228]	; (802cff4 <sc_reduce+0x1fcc>)
 802cf10:	fb03 f102 	mul.w	r1, r3, r2
 802cf14:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802cf18:	f04f 33ff 	mov.w	r3, #4294967295
 802cf1c:	fb03 f302 	mul.w	r3, r3, r2
 802cf20:	18cc      	adds	r4, r1, r3
 802cf22:	f8d7 27b8 	ldr.w	r2, [r7, #1976]	; 0x7b8
 802cf26:	4b33      	ldr	r3, [pc, #204]	; (802cff4 <sc_reduce+0x1fcc>)
 802cf28:	fba2 0103 	umull	r0, r1, r2, r3
 802cf2c:	1863      	adds	r3, r4, r1
 802cf2e:	4619      	mov	r1, r3
 802cf30:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802cf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cf38:	1814      	adds	r4, r2, r0
 802cf3a:	f8c7 42f8 	str.w	r4, [r7, #760]	; 0x2f8
 802cf3e:	414b      	adcs	r3, r1
 802cf40:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 802cf44:	e9d7 34be 	ldrd	r3, r4, [r7, #760]	; 0x2f8
 802cf48:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802cf4c:	e9c2 3400 	strd	r3, r4, [r2]
    s14 = 0;
 802cf50:	f04f 0200 	mov.w	r2, #0
 802cf54:	f04f 0300 	mov.w	r3, #0
 802cf58:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 802cf5c:	e9c1 2300 	strd	r2, r3, [r1]
    s1 += s13 * 666643;
 802cf60:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 802cf64:	4b24      	ldr	r3, [pc, #144]	; (802cff8 <sc_reduce+0x1fd0>)
 802cf66:	fb03 f102 	mul.w	r1, r3, r2
 802cf6a:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802cf6e:	2300      	movs	r3, #0
 802cf70:	fb03 f302 	mul.w	r3, r3, r2
 802cf74:	18cc      	adds	r4, r1, r3
 802cf76:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802cf7a:	4b1f      	ldr	r3, [pc, #124]	; (802cff8 <sc_reduce+0x1fd0>)
 802cf7c:	fba2 0103 	umull	r0, r1, r2, r3
 802cf80:	1863      	adds	r3, r4, r1
 802cf82:	4619      	mov	r1, r3
 802cf84:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cf8c:	1814      	adds	r4, r2, r0
 802cf8e:	f8c7 42f0 	str.w	r4, [r7, #752]	; 0x2f0
 802cf92:	414b      	adcs	r3, r1
 802cf94:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 802cf98:	e9d7 34bc 	ldrd	r3, r4, [r7, #752]	; 0x2f0
 802cf9c:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802cfa0:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s13 * 470296;
 802cfa4:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 802cfa8:	4b0e      	ldr	r3, [pc, #56]	; (802cfe4 <sc_reduce+0x1fbc>)
 802cfaa:	fb03 f102 	mul.w	r1, r3, r2
 802cfae:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802cfb2:	2300      	movs	r3, #0
 802cfb4:	fb03 f302 	mul.w	r3, r3, r2
 802cfb8:	18cc      	adds	r4, r1, r3
 802cfba:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802cfbe:	4b09      	ldr	r3, [pc, #36]	; (802cfe4 <sc_reduce+0x1fbc>)
 802cfc0:	fba2 0103 	umull	r0, r1, r2, r3
 802cfc4:	1863      	adds	r3, r4, r1
 802cfc6:	4619      	mov	r1, r3
 802cfc8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802cfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cfd0:	1814      	adds	r4, r2, r0
 802cfd2:	f8c7 42e8 	str.w	r4, [r7, #744]	; 0x2e8
 802cfd6:	414b      	adcs	r3, r1
 802cfd8:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 802cfdc:	e9d7 34ba 	ldrd	r3, r4, [r7, #744]	; 0x2e8
 802cfe0:	e00c      	b.n	802cffc <sc_reduce+0x1fd4>
 802cfe2:	bf00      	nop
 802cfe4:	00072d18 	.word	0x00072d18
 802cfe8:	0009fb67 	.word	0x0009fb67
 802cfec:	fff0c653 	.word	0xfff0c653
 802cff0:	000215d1 	.word	0x000215d1
 802cff4:	fff59083 	.word	0xfff59083
 802cff8:	000a2c13 	.word	0x000a2c13
 802cffc:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802d000:	e9c2 3400 	strd	r3, r4, [r2]
    s3 += s13 * 654183;
 802d004:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 802d008:	4be9      	ldr	r3, [pc, #932]	; (802d3b0 <sc_reduce+0x2388>)
 802d00a:	fb03 f102 	mul.w	r1, r3, r2
 802d00e:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802d012:	2300      	movs	r3, #0
 802d014:	fb03 f302 	mul.w	r3, r3, r2
 802d018:	18cc      	adds	r4, r1, r3
 802d01a:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802d01e:	4be4      	ldr	r3, [pc, #912]	; (802d3b0 <sc_reduce+0x2388>)
 802d020:	fba2 0103 	umull	r0, r1, r2, r3
 802d024:	1863      	adds	r3, r4, r1
 802d026:	4619      	mov	r1, r3
 802d028:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802d02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d030:	1814      	adds	r4, r2, r0
 802d032:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 802d036:	414b      	adcs	r3, r1
 802d038:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 802d03c:	e9d7 34b8 	ldrd	r3, r4, [r7, #736]	; 0x2e0
 802d040:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802d044:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= s13 * 997805;
 802d048:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 802d04c:	4bd9      	ldr	r3, [pc, #868]	; (802d3b4 <sc_reduce+0x238c>)
 802d04e:	fb03 f102 	mul.w	r1, r3, r2
 802d052:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802d056:	f04f 33ff 	mov.w	r3, #4294967295
 802d05a:	fb03 f302 	mul.w	r3, r3, r2
 802d05e:	18cc      	adds	r4, r1, r3
 802d060:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802d064:	4bd3      	ldr	r3, [pc, #844]	; (802d3b4 <sc_reduce+0x238c>)
 802d066:	fba2 0103 	umull	r0, r1, r2, r3
 802d06a:	1863      	adds	r3, r4, r1
 802d06c:	4619      	mov	r1, r3
 802d06e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d076:	1814      	adds	r4, r2, r0
 802d078:	f8c7 42d8 	str.w	r4, [r7, #728]	; 0x2d8
 802d07c:	414b      	adcs	r3, r1
 802d07e:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 802d082:	e9d7 34b6 	ldrd	r3, r4, [r7, #728]	; 0x2d8
 802d086:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802d08a:	e9c2 3400 	strd	r3, r4, [r2]
    s5 += s13 * 136657;
 802d08e:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 802d092:	4bc9      	ldr	r3, [pc, #804]	; (802d3b8 <sc_reduce+0x2390>)
 802d094:	fb03 f102 	mul.w	r1, r3, r2
 802d098:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802d09c:	2300      	movs	r3, #0
 802d09e:	fb03 f302 	mul.w	r3, r3, r2
 802d0a2:	18cc      	adds	r4, r1, r3
 802d0a4:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802d0a8:	4bc3      	ldr	r3, [pc, #780]	; (802d3b8 <sc_reduce+0x2390>)
 802d0aa:	fba2 0103 	umull	r0, r1, r2, r3
 802d0ae:	1863      	adds	r3, r4, r1
 802d0b0:	4619      	mov	r1, r3
 802d0b2:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802d0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d0ba:	1814      	adds	r4, r2, r0
 802d0bc:	f8c7 42d0 	str.w	r4, [r7, #720]	; 0x2d0
 802d0c0:	414b      	adcs	r3, r1
 802d0c2:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 802d0c6:	e9d7 34b4 	ldrd	r3, r4, [r7, #720]	; 0x2d0
 802d0ca:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802d0ce:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= s13 * 683901;
 802d0d2:	f8d7 27c4 	ldr.w	r2, [r7, #1988]	; 0x7c4
 802d0d6:	4bb9      	ldr	r3, [pc, #740]	; (802d3bc <sc_reduce+0x2394>)
 802d0d8:	fb03 f102 	mul.w	r1, r3, r2
 802d0dc:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802d0e0:	f04f 33ff 	mov.w	r3, #4294967295
 802d0e4:	fb03 f302 	mul.w	r3, r3, r2
 802d0e8:	18cc      	adds	r4, r1, r3
 802d0ea:	f8d7 27c0 	ldr.w	r2, [r7, #1984]	; 0x7c0
 802d0ee:	4bb3      	ldr	r3, [pc, #716]	; (802d3bc <sc_reduce+0x2394>)
 802d0f0:	fba2 0103 	umull	r0, r1, r2, r3
 802d0f4:	1863      	adds	r3, r4, r1
 802d0f6:	4619      	mov	r1, r3
 802d0f8:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802d0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d100:	1814      	adds	r4, r2, r0
 802d102:	f8c7 42c8 	str.w	r4, [r7, #712]	; 0x2c8
 802d106:	414b      	adcs	r3, r1
 802d108:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 802d10c:	e9d7 34b2 	ldrd	r3, r4, [r7, #712]	; 0x2c8
 802d110:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802d114:	e9c2 3400 	strd	r3, r4, [r2]
    s13 = 0;
 802d118:	f04f 0200 	mov.w	r2, #0
 802d11c:	f04f 0300 	mov.w	r3, #0
 802d120:	f507 61f8 	add.w	r1, r7, #1984	; 0x7c0
 802d124:	e9c1 2300 	strd	r2, r3, [r1]
    s0 += s12 * 666643;
 802d128:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802d12c:	4ba4      	ldr	r3, [pc, #656]	; (802d3c0 <sc_reduce+0x2398>)
 802d12e:	fb03 f102 	mul.w	r1, r3, r2
 802d132:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802d136:	2300      	movs	r3, #0
 802d138:	fb03 f302 	mul.w	r3, r3, r2
 802d13c:	18cc      	adds	r4, r1, r3
 802d13e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802d142:	4b9f      	ldr	r3, [pc, #636]	; (802d3c0 <sc_reduce+0x2398>)
 802d144:	fba2 0103 	umull	r0, r1, r2, r3
 802d148:	1863      	adds	r3, r4, r1
 802d14a:	4619      	mov	r1, r3
 802d14c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802d150:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d154:	1814      	adds	r4, r2, r0
 802d156:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 802d15a:	414b      	adcs	r3, r1
 802d15c:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 802d160:	e9d7 34b0 	ldrd	r3, r4, [r7, #704]	; 0x2c0
 802d164:	f607 0228 	addw	r2, r7, #2088	; 0x828
 802d168:	e9c2 3400 	strd	r3, r4, [r2]
    s1 += s12 * 470296;
 802d16c:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802d170:	4b94      	ldr	r3, [pc, #592]	; (802d3c4 <sc_reduce+0x239c>)
 802d172:	fb03 f102 	mul.w	r1, r3, r2
 802d176:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802d17a:	2300      	movs	r3, #0
 802d17c:	fb03 f302 	mul.w	r3, r3, r2
 802d180:	18cc      	adds	r4, r1, r3
 802d182:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802d186:	4b8f      	ldr	r3, [pc, #572]	; (802d3c4 <sc_reduce+0x239c>)
 802d188:	fba2 0103 	umull	r0, r1, r2, r3
 802d18c:	1863      	adds	r3, r4, r1
 802d18e:	4619      	mov	r1, r3
 802d190:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802d194:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d198:	1814      	adds	r4, r2, r0
 802d19a:	f8c7 42b8 	str.w	r4, [r7, #696]	; 0x2b8
 802d19e:	414b      	adcs	r3, r1
 802d1a0:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 802d1a4:	e9d7 34ae 	ldrd	r3, r4, [r7, #696]	; 0x2b8
 802d1a8:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802d1ac:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s12 * 654183;
 802d1b0:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802d1b4:	4b7e      	ldr	r3, [pc, #504]	; (802d3b0 <sc_reduce+0x2388>)
 802d1b6:	fb03 f102 	mul.w	r1, r3, r2
 802d1ba:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802d1be:	2300      	movs	r3, #0
 802d1c0:	fb03 f302 	mul.w	r3, r3, r2
 802d1c4:	18cc      	adds	r4, r1, r3
 802d1c6:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802d1ca:	4b79      	ldr	r3, [pc, #484]	; (802d3b0 <sc_reduce+0x2388>)
 802d1cc:	fba2 0103 	umull	r0, r1, r2, r3
 802d1d0:	1863      	adds	r3, r4, r1
 802d1d2:	4619      	mov	r1, r3
 802d1d4:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802d1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d1dc:	1814      	adds	r4, r2, r0
 802d1de:	f8c7 42b0 	str.w	r4, [r7, #688]	; 0x2b0
 802d1e2:	414b      	adcs	r3, r1
 802d1e4:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 802d1e8:	e9d7 34ac 	ldrd	r3, r4, [r7, #688]	; 0x2b0
 802d1ec:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802d1f0:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= s12 * 997805;
 802d1f4:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802d1f8:	4b6e      	ldr	r3, [pc, #440]	; (802d3b4 <sc_reduce+0x238c>)
 802d1fa:	fb03 f102 	mul.w	r1, r3, r2
 802d1fe:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802d202:	f04f 33ff 	mov.w	r3, #4294967295
 802d206:	fb03 f302 	mul.w	r3, r3, r2
 802d20a:	18cc      	adds	r4, r1, r3
 802d20c:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802d210:	4b68      	ldr	r3, [pc, #416]	; (802d3b4 <sc_reduce+0x238c>)
 802d212:	fba2 0103 	umull	r0, r1, r2, r3
 802d216:	1863      	adds	r3, r4, r1
 802d218:	4619      	mov	r1, r3
 802d21a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802d21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d222:	1814      	adds	r4, r2, r0
 802d224:	f8c7 42a8 	str.w	r4, [r7, #680]	; 0x2a8
 802d228:	414b      	adcs	r3, r1
 802d22a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 802d22e:	e9d7 34aa 	ldrd	r3, r4, [r7, #680]	; 0x2a8
 802d232:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802d236:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s12 * 136657;
 802d23a:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802d23e:	4b5e      	ldr	r3, [pc, #376]	; (802d3b8 <sc_reduce+0x2390>)
 802d240:	fb03 f102 	mul.w	r1, r3, r2
 802d244:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802d248:	2300      	movs	r3, #0
 802d24a:	fb03 f302 	mul.w	r3, r3, r2
 802d24e:	18cc      	adds	r4, r1, r3
 802d250:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802d254:	4b58      	ldr	r3, [pc, #352]	; (802d3b8 <sc_reduce+0x2390>)
 802d256:	fba2 0103 	umull	r0, r1, r2, r3
 802d25a:	1863      	adds	r3, r4, r1
 802d25c:	4619      	mov	r1, r3
 802d25e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d266:	1814      	adds	r4, r2, r0
 802d268:	f8c7 42a0 	str.w	r4, [r7, #672]	; 0x2a0
 802d26c:	414b      	adcs	r3, r1
 802d26e:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 802d272:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 802d276:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802d27a:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s12 * 683901;
 802d27e:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802d282:	4b4e      	ldr	r3, [pc, #312]	; (802d3bc <sc_reduce+0x2394>)
 802d284:	fb03 f102 	mul.w	r1, r3, r2
 802d288:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802d28c:	f04f 33ff 	mov.w	r3, #4294967295
 802d290:	fb03 f302 	mul.w	r3, r3, r2
 802d294:	18cc      	adds	r4, r1, r3
 802d296:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802d29a:	4b48      	ldr	r3, [pc, #288]	; (802d3bc <sc_reduce+0x2394>)
 802d29c:	fba2 0103 	umull	r0, r1, r2, r3
 802d2a0:	1863      	adds	r3, r4, r1
 802d2a2:	4619      	mov	r1, r3
 802d2a4:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802d2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d2ac:	1814      	adds	r4, r2, r0
 802d2ae:	f8c7 4298 	str.w	r4, [r7, #664]	; 0x298
 802d2b2:	414b      	adcs	r3, r1
 802d2b4:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 802d2b8:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 802d2bc:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802d2c0:	e9c2 3400 	strd	r3, r4, [r2]
    s12 = 0;
 802d2c4:	f04f 0200 	mov.w	r2, #0
 802d2c8:	f04f 0300 	mov.w	r3, #0
 802d2cc:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 802d2d0:	e9c1 2300 	strd	r2, r3, [r1]
    carry0 = (s0 + (1 << 20)) >> 21;
 802d2d4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802d2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d2dc:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d2e0:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 802d2e4:	f143 0300 	adc.w	r3, r3, #0
 802d2e8:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 802d2ec:	f04f 0200 	mov.w	r2, #0
 802d2f0:	f04f 0300 	mov.w	r3, #0
 802d2f4:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 802d2f8:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d2fc:	4621      	mov	r1, r4
 802d2fe:	0d4a      	lsrs	r2, r1, #21
 802d300:	4629      	mov	r1, r5
 802d302:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d306:	4629      	mov	r1, r5
 802d308:	154b      	asrs	r3, r1, #21
 802d30a:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 802d30e:	e9c1 2300 	strd	r2, r3, [r1]
    s1 += carry0;
 802d312:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802d316:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d31a:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802d31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d322:	1884      	adds	r4, r0, r2
 802d324:	f8c7 4290 	str.w	r4, [r7, #656]	; 0x290
 802d328:	eb41 0303 	adc.w	r3, r1, r3
 802d32c:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 802d330:	e9d7 34a4 	ldrd	r3, r4, [r7, #656]	; 0x290
 802d334:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802d338:	e9c2 3400 	strd	r3, r4, [r2]
    s0 -= carry0 << 21;
 802d33c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802d340:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d344:	f04f 0000 	mov.w	r0, #0
 802d348:	f04f 0100 	mov.w	r1, #0
 802d34c:	0559      	lsls	r1, r3, #21
 802d34e:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d352:	0550      	lsls	r0, r2, #21
 802d354:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802d358:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d35c:	1a14      	subs	r4, r2, r0
 802d35e:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 802d362:	eb63 0301 	sbc.w	r3, r3, r1
 802d366:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 802d36a:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 802d36e:	f607 0228 	addw	r2, r7, #2088	; 0x828
 802d372:	e9c2 3400 	strd	r3, r4, [r2]
    carry2 = (s2 + (1 << 20)) >> 21;
 802d376:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802d37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d37e:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d382:	f8c7 1678 	str.w	r1, [r7, #1656]	; 0x678
 802d386:	f143 0300 	adc.w	r3, r3, #0
 802d38a:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 802d38e:	f04f 0200 	mov.w	r2, #0
 802d392:	f04f 0300 	mov.w	r3, #0
 802d396:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 802d39a:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d39e:	4621      	mov	r1, r4
 802d3a0:	0d4a      	lsrs	r2, r1, #21
 802d3a2:	4629      	mov	r1, r5
 802d3a4:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d3a8:	4629      	mov	r1, r5
 802d3aa:	154b      	asrs	r3, r1, #21
 802d3ac:	e00c      	b.n	802d3c8 <sc_reduce+0x23a0>
 802d3ae:	bf00      	nop
 802d3b0:	0009fb67 	.word	0x0009fb67
 802d3b4:	fff0c653 	.word	0xfff0c653
 802d3b8:	000215d1 	.word	0x000215d1
 802d3bc:	fff59083 	.word	0xfff59083
 802d3c0:	000a2c13 	.word	0x000a2c13
 802d3c4:	00072d18 	.word	0x00072d18
 802d3c8:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 802d3cc:	e9c1 2300 	strd	r2, r3, [r1]
    s3 += carry2;
 802d3d0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802d3d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d3d8:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802d3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d3e0:	1884      	adds	r4, r0, r2
 802d3e2:	f8c7 4280 	str.w	r4, [r7, #640]	; 0x280
 802d3e6:	eb41 0303 	adc.w	r3, r1, r3
 802d3ea:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 802d3ee:	e9d7 34a0 	ldrd	r3, r4, [r7, #640]	; 0x280
 802d3f2:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802d3f6:	e9c2 3400 	strd	r3, r4, [r2]
    s2 -= carry2 << 21;
 802d3fa:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802d3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d402:	f04f 0000 	mov.w	r0, #0
 802d406:	f04f 0100 	mov.w	r1, #0
 802d40a:	0559      	lsls	r1, r3, #21
 802d40c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d410:	0550      	lsls	r0, r2, #21
 802d412:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802d416:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d41a:	1a14      	subs	r4, r2, r0
 802d41c:	f8c7 4278 	str.w	r4, [r7, #632]	; 0x278
 802d420:	eb63 0301 	sbc.w	r3, r3, r1
 802d424:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 802d428:	e9d7 349e 	ldrd	r3, r4, [r7, #632]	; 0x278
 802d42c:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802d430:	e9c2 3400 	strd	r3, r4, [r2]
    carry4 = (s4 + (1 << 20)) >> 21;
 802d434:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802d438:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d43c:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d440:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 802d444:	f143 0300 	adc.w	r3, r3, #0
 802d448:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 802d44c:	f04f 0200 	mov.w	r2, #0
 802d450:	f04f 0300 	mov.w	r3, #0
 802d454:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 802d458:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d45c:	4621      	mov	r1, r4
 802d45e:	0d4a      	lsrs	r2, r1, #21
 802d460:	4629      	mov	r1, r5
 802d462:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d466:	4629      	mov	r1, r5
 802d468:	154b      	asrs	r3, r1, #21
 802d46a:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 802d46e:	e9c1 2300 	strd	r2, r3, [r1]
    s5 += carry4;
 802d472:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802d476:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d47a:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802d47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d482:	1884      	adds	r4, r0, r2
 802d484:	f8c7 4270 	str.w	r4, [r7, #624]	; 0x270
 802d488:	eb41 0303 	adc.w	r3, r1, r3
 802d48c:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 802d490:	e9d7 349c 	ldrd	r3, r4, [r7, #624]	; 0x270
 802d494:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802d498:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= carry4 << 21;
 802d49c:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802d4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d4a4:	f04f 0000 	mov.w	r0, #0
 802d4a8:	f04f 0100 	mov.w	r1, #0
 802d4ac:	0559      	lsls	r1, r3, #21
 802d4ae:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d4b2:	0550      	lsls	r0, r2, #21
 802d4b4:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802d4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d4bc:	1a14      	subs	r4, r2, r0
 802d4be:	f8c7 4268 	str.w	r4, [r7, #616]	; 0x268
 802d4c2:	eb63 0301 	sbc.w	r3, r3, r1
 802d4c6:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 802d4ca:	e9d7 349a 	ldrd	r3, r4, [r7, #616]	; 0x268
 802d4ce:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802d4d2:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = (s6 + (1 << 20)) >> 21;
 802d4d6:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802d4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d4de:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d4e2:	f8c7 1668 	str.w	r1, [r7, #1640]	; 0x668
 802d4e6:	f143 0300 	adc.w	r3, r3, #0
 802d4ea:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 802d4ee:	f04f 0200 	mov.w	r2, #0
 802d4f2:	f04f 0300 	mov.w	r3, #0
 802d4f6:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 802d4fa:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d4fe:	4621      	mov	r1, r4
 802d500:	0d4a      	lsrs	r2, r1, #21
 802d502:	4629      	mov	r1, r5
 802d504:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d508:	4629      	mov	r1, r5
 802d50a:	154b      	asrs	r3, r1, #21
 802d50c:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 802d510:	e9c1 2300 	strd	r2, r3, [r1]
    s7 += carry6;
 802d514:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802d518:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d51c:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d524:	1884      	adds	r4, r0, r2
 802d526:	f8c7 4260 	str.w	r4, [r7, #608]	; 0x260
 802d52a:	eb41 0303 	adc.w	r3, r1, r3
 802d52e:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 802d532:	e9d7 3498 	ldrd	r3, r4, [r7, #608]	; 0x260
 802d536:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802d53a:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 802d53e:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802d542:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d546:	f04f 0000 	mov.w	r0, #0
 802d54a:	f04f 0100 	mov.w	r1, #0
 802d54e:	0559      	lsls	r1, r3, #21
 802d550:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d554:	0550      	lsls	r0, r2, #21
 802d556:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802d55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d55e:	1a14      	subs	r4, r2, r0
 802d560:	f8c7 4258 	str.w	r4, [r7, #600]	; 0x258
 802d564:	eb63 0301 	sbc.w	r3, r3, r1
 802d568:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 802d56c:	e9d7 3496 	ldrd	r3, r4, [r7, #600]	; 0x258
 802d570:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802d574:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = (s8 + (1 << 20)) >> 21;
 802d578:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802d57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d580:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d584:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 802d588:	f143 0300 	adc.w	r3, r3, #0
 802d58c:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 802d590:	f04f 0200 	mov.w	r2, #0
 802d594:	f04f 0300 	mov.w	r3, #0
 802d598:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 802d59c:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d5a0:	4621      	mov	r1, r4
 802d5a2:	0d4a      	lsrs	r2, r1, #21
 802d5a4:	4629      	mov	r1, r5
 802d5a6:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d5aa:	4629      	mov	r1, r5
 802d5ac:	154b      	asrs	r3, r1, #21
 802d5ae:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 802d5b2:	e9c1 2300 	strd	r2, r3, [r1]
    s9 += carry8;
 802d5b6:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802d5ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d5be:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802d5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d5c6:	1884      	adds	r4, r0, r2
 802d5c8:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 802d5cc:	eb41 0303 	adc.w	r3, r1, r3
 802d5d0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 802d5d4:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 802d5d8:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802d5dc:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 802d5e0:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802d5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d5e8:	f04f 0000 	mov.w	r0, #0
 802d5ec:	f04f 0100 	mov.w	r1, #0
 802d5f0:	0559      	lsls	r1, r3, #21
 802d5f2:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d5f6:	0550      	lsls	r0, r2, #21
 802d5f8:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802d5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d600:	1a14      	subs	r4, r2, r0
 802d602:	f8c7 4248 	str.w	r4, [r7, #584]	; 0x248
 802d606:	eb63 0301 	sbc.w	r3, r3, r1
 802d60a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 802d60e:	e9d7 3492 	ldrd	r3, r4, [r7, #584]	; 0x248
 802d612:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802d616:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = (s10 + (1 << 20)) >> 21;
 802d61a:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802d61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d622:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d626:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 802d62a:	f143 0300 	adc.w	r3, r3, #0
 802d62e:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 802d632:	f04f 0200 	mov.w	r2, #0
 802d636:	f04f 0300 	mov.w	r3, #0
 802d63a:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 802d63e:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d642:	4621      	mov	r1, r4
 802d644:	0d4a      	lsrs	r2, r1, #21
 802d646:	4629      	mov	r1, r5
 802d648:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d64c:	4629      	mov	r1, r5
 802d64e:	154b      	asrs	r3, r1, #21
 802d650:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 802d654:	e9c1 2300 	strd	r2, r3, [r1]
    s11 += carry10;
 802d658:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802d65c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d660:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802d664:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d668:	1884      	adds	r4, r0, r2
 802d66a:	f8c7 4240 	str.w	r4, [r7, #576]	; 0x240
 802d66e:	eb41 0303 	adc.w	r3, r1, r3
 802d672:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 802d676:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 802d67a:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802d67e:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 802d682:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802d686:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d68a:	f04f 0000 	mov.w	r0, #0
 802d68e:	f04f 0100 	mov.w	r1, #0
 802d692:	0559      	lsls	r1, r3, #21
 802d694:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d698:	0550      	lsls	r0, r2, #21
 802d69a:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802d69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d6a2:	1a14      	subs	r4, r2, r0
 802d6a4:	f8c7 4238 	str.w	r4, [r7, #568]	; 0x238
 802d6a8:	eb63 0301 	sbc.w	r3, r3, r1
 802d6ac:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 802d6b0:	e9d7 348e 	ldrd	r3, r4, [r7, #568]	; 0x238
 802d6b4:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802d6b8:	e9c2 3400 	strd	r3, r4, [r2]
    carry1 = (s1 + (1 << 20)) >> 21;
 802d6bc:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d6c4:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d6c8:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 802d6cc:	f143 0300 	adc.w	r3, r3, #0
 802d6d0:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 802d6d4:	f04f 0200 	mov.w	r2, #0
 802d6d8:	f04f 0300 	mov.w	r3, #0
 802d6dc:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 802d6e0:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d6e4:	4621      	mov	r1, r4
 802d6e6:	0d4a      	lsrs	r2, r1, #21
 802d6e8:	4629      	mov	r1, r5
 802d6ea:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d6ee:	4629      	mov	r1, r5
 802d6f0:	154b      	asrs	r3, r1, #21
 802d6f2:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 802d6f6:	e9c1 2300 	strd	r2, r3, [r1]
    s2 += carry1;
 802d6fa:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802d6fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d702:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802d706:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d70a:	1884      	adds	r4, r0, r2
 802d70c:	f8c7 4230 	str.w	r4, [r7, #560]	; 0x230
 802d710:	eb41 0303 	adc.w	r3, r1, r3
 802d714:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 802d718:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 802d71c:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802d720:	e9c2 3400 	strd	r3, r4, [r2]
    s1 -= carry1 << 21;
 802d724:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802d728:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d72c:	f04f 0000 	mov.w	r0, #0
 802d730:	f04f 0100 	mov.w	r1, #0
 802d734:	0559      	lsls	r1, r3, #21
 802d736:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d73a:	0550      	lsls	r0, r2, #21
 802d73c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802d740:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d744:	1a14      	subs	r4, r2, r0
 802d746:	f8c7 4228 	str.w	r4, [r7, #552]	; 0x228
 802d74a:	eb63 0301 	sbc.w	r3, r3, r1
 802d74e:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 802d752:	e9d7 348a 	ldrd	r3, r4, [r7, #552]	; 0x228
 802d756:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802d75a:	e9c2 3400 	strd	r3, r4, [r2]
    carry3 = (s3 + (1 << 20)) >> 21;
 802d75e:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802d762:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d766:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d76a:	f8c7 1648 	str.w	r1, [r7, #1608]	; 0x648
 802d76e:	f143 0300 	adc.w	r3, r3, #0
 802d772:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 802d776:	f04f 0200 	mov.w	r2, #0
 802d77a:	f04f 0300 	mov.w	r3, #0
 802d77e:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 802d782:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d786:	4621      	mov	r1, r4
 802d788:	0d4a      	lsrs	r2, r1, #21
 802d78a:	4629      	mov	r1, r5
 802d78c:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d790:	4629      	mov	r1, r5
 802d792:	154b      	asrs	r3, r1, #21
 802d794:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 802d798:	e9c1 2300 	strd	r2, r3, [r1]
    s4 += carry3;
 802d79c:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802d7a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d7a4:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802d7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d7ac:	1884      	adds	r4, r0, r2
 802d7ae:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 802d7b2:	eb41 0303 	adc.w	r3, r1, r3
 802d7b6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802d7ba:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 802d7be:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802d7c2:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= carry3 << 21;
 802d7c6:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802d7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d7ce:	f04f 0000 	mov.w	r0, #0
 802d7d2:	f04f 0100 	mov.w	r1, #0
 802d7d6:	0559      	lsls	r1, r3, #21
 802d7d8:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d7dc:	0550      	lsls	r0, r2, #21
 802d7de:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802d7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d7e6:	1a14      	subs	r4, r2, r0
 802d7e8:	f8c7 4218 	str.w	r4, [r7, #536]	; 0x218
 802d7ec:	eb63 0301 	sbc.w	r3, r3, r1
 802d7f0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 802d7f4:	e9d7 3486 	ldrd	r3, r4, [r7, #536]	; 0x218
 802d7f8:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802d7fc:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = (s5 + (1 << 20)) >> 21;
 802d800:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802d804:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d808:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d80c:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 802d810:	f143 0300 	adc.w	r3, r3, #0
 802d814:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 802d818:	f04f 0200 	mov.w	r2, #0
 802d81c:	f04f 0300 	mov.w	r3, #0
 802d820:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 802d824:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d828:	4621      	mov	r1, r4
 802d82a:	0d4a      	lsrs	r2, r1, #21
 802d82c:	4629      	mov	r1, r5
 802d82e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d832:	4629      	mov	r1, r5
 802d834:	154b      	asrs	r3, r1, #21
 802d836:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 802d83a:	e9c1 2300 	strd	r2, r3, [r1]
    s6 += carry5;
 802d83e:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802d842:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d846:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802d84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d84e:	1884      	adds	r4, r0, r2
 802d850:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 802d854:	eb41 0303 	adc.w	r3, r1, r3
 802d858:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 802d85c:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 802d860:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802d864:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= carry5 << 21;
 802d868:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802d86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d870:	f04f 0000 	mov.w	r0, #0
 802d874:	f04f 0100 	mov.w	r1, #0
 802d878:	0559      	lsls	r1, r3, #21
 802d87a:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d87e:	0550      	lsls	r0, r2, #21
 802d880:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802d884:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d888:	1a14      	subs	r4, r2, r0
 802d88a:	f8c7 4208 	str.w	r4, [r7, #520]	; 0x208
 802d88e:	eb63 0301 	sbc.w	r3, r3, r1
 802d892:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 802d896:	e9d7 3482 	ldrd	r3, r4, [r7, #520]	; 0x208
 802d89a:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802d89e:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = (s7 + (1 << 20)) >> 21;
 802d8a2:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802d8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d8aa:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d8ae:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 802d8b2:	f143 0300 	adc.w	r3, r3, #0
 802d8b6:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 802d8ba:	f04f 0200 	mov.w	r2, #0
 802d8be:	f04f 0300 	mov.w	r3, #0
 802d8c2:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 802d8c6:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d8ca:	4621      	mov	r1, r4
 802d8cc:	0d4a      	lsrs	r2, r1, #21
 802d8ce:	4629      	mov	r1, r5
 802d8d0:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d8d4:	4629      	mov	r1, r5
 802d8d6:	154b      	asrs	r3, r1, #21
 802d8d8:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 802d8dc:	e9c1 2300 	strd	r2, r3, [r1]
    s8 += carry7;
 802d8e0:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802d8e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d8e8:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d8f0:	1884      	adds	r4, r0, r2
 802d8f2:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 802d8f6:	eb41 0303 	adc.w	r3, r1, r3
 802d8fa:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 802d8fe:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 802d902:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802d906:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 802d90a:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802d90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d912:	f04f 0000 	mov.w	r0, #0
 802d916:	f04f 0100 	mov.w	r1, #0
 802d91a:	0559      	lsls	r1, r3, #21
 802d91c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d920:	0550      	lsls	r0, r2, #21
 802d922:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802d926:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d92a:	1a14      	subs	r4, r2, r0
 802d92c:	f8c7 41f8 	str.w	r4, [r7, #504]	; 0x1f8
 802d930:	eb63 0301 	sbc.w	r3, r3, r1
 802d934:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 802d938:	e9d7 347e 	ldrd	r3, r4, [r7, #504]	; 0x1f8
 802d93c:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802d940:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = (s9 + (1 << 20)) >> 21;
 802d944:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802d948:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d94c:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d950:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 802d954:	f143 0300 	adc.w	r3, r3, #0
 802d958:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 802d95c:	f04f 0200 	mov.w	r2, #0
 802d960:	f04f 0300 	mov.w	r3, #0
 802d964:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 802d968:	e9d1 4500 	ldrd	r4, r5, [r1]
 802d96c:	4621      	mov	r1, r4
 802d96e:	0d4a      	lsrs	r2, r1, #21
 802d970:	4629      	mov	r1, r5
 802d972:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802d976:	4629      	mov	r1, r5
 802d978:	154b      	asrs	r3, r1, #21
 802d97a:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 802d97e:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += carry9;
 802d982:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802d986:	e9d3 0100 	ldrd	r0, r1, [r3]
 802d98a:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802d98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d992:	1884      	adds	r4, r0, r2
 802d994:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 802d998:	eb41 0303 	adc.w	r3, r1, r3
 802d99c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 802d9a0:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 802d9a4:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802d9a8:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 802d9ac:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802d9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d9b4:	f04f 0000 	mov.w	r0, #0
 802d9b8:	f04f 0100 	mov.w	r1, #0
 802d9bc:	0559      	lsls	r1, r3, #21
 802d9be:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802d9c2:	0550      	lsls	r0, r2, #21
 802d9c4:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802d9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d9cc:	1a14      	subs	r4, r2, r0
 802d9ce:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 802d9d2:	eb63 0301 	sbc.w	r3, r3, r1
 802d9d6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 802d9da:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 802d9de:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802d9e2:	e9c2 3400 	strd	r3, r4, [r2]
    carry11 = (s11 + (1 << 20)) >> 21;
 802d9e6:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802d9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 802d9ee:	f512 1180 	adds.w	r1, r2, #1048576	; 0x100000
 802d9f2:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 802d9f6:	f143 0300 	adc.w	r3, r3, #0
 802d9fa:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 802d9fe:	f04f 0200 	mov.w	r2, #0
 802da02:	f04f 0300 	mov.w	r3, #0
 802da06:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 802da0a:	e9d1 4500 	ldrd	r4, r5, [r1]
 802da0e:	4621      	mov	r1, r4
 802da10:	0d4a      	lsrs	r2, r1, #21
 802da12:	4629      	mov	r1, r5
 802da14:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802da18:	4629      	mov	r1, r5
 802da1a:	154b      	asrs	r3, r1, #21
 802da1c:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 802da20:	e9c1 2300 	strd	r2, r3, [r1]
    s12 += carry11;
 802da24:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802da28:	e9d3 0100 	ldrd	r0, r1, [r3]
 802da2c:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 802da30:	e9d3 2300 	ldrd	r2, r3, [r3]
 802da34:	1884      	adds	r4, r0, r2
 802da36:	f8c7 41e0 	str.w	r4, [r7, #480]	; 0x1e0
 802da3a:	eb41 0303 	adc.w	r3, r1, r3
 802da3e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 802da42:	e9d7 3478 	ldrd	r3, r4, [r7, #480]	; 0x1e0
 802da46:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802da4a:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= carry11 << 21;
 802da4e:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 802da52:	e9d3 2300 	ldrd	r2, r3, [r3]
 802da56:	f04f 0000 	mov.w	r0, #0
 802da5a:	f04f 0100 	mov.w	r1, #0
 802da5e:	0559      	lsls	r1, r3, #21
 802da60:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802da64:	0550      	lsls	r0, r2, #21
 802da66:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802da6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802da6e:	1a14      	subs	r4, r2, r0
 802da70:	f8c7 41d8 	str.w	r4, [r7, #472]	; 0x1d8
 802da74:	eb63 0301 	sbc.w	r3, r3, r1
 802da78:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 802da7c:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 802da80:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802da84:	e9c2 3400 	strd	r3, r4, [r2]
    s0 += s12 * 666643;
 802da88:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802da8c:	4bee      	ldr	r3, [pc, #952]	; (802de48 <sc_reduce+0x2e20>)
 802da8e:	fb03 f102 	mul.w	r1, r3, r2
 802da92:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802da96:	2300      	movs	r3, #0
 802da98:	fb03 f302 	mul.w	r3, r3, r2
 802da9c:	18cc      	adds	r4, r1, r3
 802da9e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802daa2:	4be9      	ldr	r3, [pc, #932]	; (802de48 <sc_reduce+0x2e20>)
 802daa4:	fba2 0103 	umull	r0, r1, r2, r3
 802daa8:	1863      	adds	r3, r4, r1
 802daaa:	4619      	mov	r1, r3
 802daac:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802dab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dab4:	1814      	adds	r4, r2, r0
 802dab6:	f8c7 41d0 	str.w	r4, [r7, #464]	; 0x1d0
 802daba:	414b      	adcs	r3, r1
 802dabc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 802dac0:	e9d7 3474 	ldrd	r3, r4, [r7, #464]	; 0x1d0
 802dac4:	f607 0228 	addw	r2, r7, #2088	; 0x828
 802dac8:	e9c2 3400 	strd	r3, r4, [r2]
    s1 += s12 * 470296;
 802dacc:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802dad0:	4bde      	ldr	r3, [pc, #888]	; (802de4c <sc_reduce+0x2e24>)
 802dad2:	fb03 f102 	mul.w	r1, r3, r2
 802dad6:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802dada:	2300      	movs	r3, #0
 802dadc:	fb03 f302 	mul.w	r3, r3, r2
 802dae0:	18cc      	adds	r4, r1, r3
 802dae2:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802dae6:	4bd9      	ldr	r3, [pc, #868]	; (802de4c <sc_reduce+0x2e24>)
 802dae8:	fba2 0103 	umull	r0, r1, r2, r3
 802daec:	1863      	adds	r3, r4, r1
 802daee:	4619      	mov	r1, r3
 802daf0:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802daf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802daf8:	1814      	adds	r4, r2, r0
 802dafa:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 802dafe:	414b      	adcs	r3, r1
 802db00:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 802db04:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 802db08:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802db0c:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s12 * 654183;
 802db10:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802db14:	4bce      	ldr	r3, [pc, #824]	; (802de50 <sc_reduce+0x2e28>)
 802db16:	fb03 f102 	mul.w	r1, r3, r2
 802db1a:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802db1e:	2300      	movs	r3, #0
 802db20:	fb03 f302 	mul.w	r3, r3, r2
 802db24:	18cc      	adds	r4, r1, r3
 802db26:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802db2a:	4bc9      	ldr	r3, [pc, #804]	; (802de50 <sc_reduce+0x2e28>)
 802db2c:	fba2 0103 	umull	r0, r1, r2, r3
 802db30:	1863      	adds	r3, r4, r1
 802db32:	4619      	mov	r1, r3
 802db34:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802db38:	e9d3 2300 	ldrd	r2, r3, [r3]
 802db3c:	1814      	adds	r4, r2, r0
 802db3e:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
 802db42:	414b      	adcs	r3, r1
 802db44:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 802db48:	e9d7 3470 	ldrd	r3, r4, [r7, #448]	; 0x1c0
 802db4c:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802db50:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= s12 * 997805;
 802db54:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802db58:	4bbe      	ldr	r3, [pc, #760]	; (802de54 <sc_reduce+0x2e2c>)
 802db5a:	fb03 f102 	mul.w	r1, r3, r2
 802db5e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802db62:	f04f 33ff 	mov.w	r3, #4294967295
 802db66:	fb03 f302 	mul.w	r3, r3, r2
 802db6a:	18cc      	adds	r4, r1, r3
 802db6c:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802db70:	4bb8      	ldr	r3, [pc, #736]	; (802de54 <sc_reduce+0x2e2c>)
 802db72:	fba2 0103 	umull	r0, r1, r2, r3
 802db76:	1863      	adds	r3, r4, r1
 802db78:	4619      	mov	r1, r3
 802db7a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802db7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802db82:	1814      	adds	r4, r2, r0
 802db84:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 802db88:	414b      	adcs	r3, r1
 802db8a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 802db8e:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 802db92:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802db96:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s12 * 136657;
 802db9a:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802db9e:	4bae      	ldr	r3, [pc, #696]	; (802de58 <sc_reduce+0x2e30>)
 802dba0:	fb03 f102 	mul.w	r1, r3, r2
 802dba4:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802dba8:	2300      	movs	r3, #0
 802dbaa:	fb03 f302 	mul.w	r3, r3, r2
 802dbae:	18cc      	adds	r4, r1, r3
 802dbb0:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802dbb4:	4ba8      	ldr	r3, [pc, #672]	; (802de58 <sc_reduce+0x2e30>)
 802dbb6:	fba2 0103 	umull	r0, r1, r2, r3
 802dbba:	1863      	adds	r3, r4, r1
 802dbbc:	4619      	mov	r1, r3
 802dbbe:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802dbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dbc6:	1814      	adds	r4, r2, r0
 802dbc8:	f8c7 41b0 	str.w	r4, [r7, #432]	; 0x1b0
 802dbcc:	414b      	adcs	r3, r1
 802dbce:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 802dbd2:	e9d7 346c 	ldrd	r3, r4, [r7, #432]	; 0x1b0
 802dbd6:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802dbda:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s12 * 683901;
 802dbde:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802dbe2:	4b9e      	ldr	r3, [pc, #632]	; (802de5c <sc_reduce+0x2e34>)
 802dbe4:	fb03 f102 	mul.w	r1, r3, r2
 802dbe8:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802dbec:	f04f 33ff 	mov.w	r3, #4294967295
 802dbf0:	fb03 f302 	mul.w	r3, r3, r2
 802dbf4:	18cc      	adds	r4, r1, r3
 802dbf6:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802dbfa:	4b98      	ldr	r3, [pc, #608]	; (802de5c <sc_reduce+0x2e34>)
 802dbfc:	fba2 0103 	umull	r0, r1, r2, r3
 802dc00:	1863      	adds	r3, r4, r1
 802dc02:	4619      	mov	r1, r3
 802dc04:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802dc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dc0c:	1814      	adds	r4, r2, r0
 802dc0e:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 802dc12:	414b      	adcs	r3, r1
 802dc14:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 802dc18:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 802dc1c:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802dc20:	e9c2 3400 	strd	r3, r4, [r2]
    s12 = 0;
 802dc24:	f04f 0200 	mov.w	r2, #0
 802dc28:	f04f 0300 	mov.w	r3, #0
 802dc2c:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 802dc30:	e9c1 2300 	strd	r2, r3, [r1]
    carry0 = s0 >> 21;
 802dc34:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802dc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dc3c:	f04f 0000 	mov.w	r0, #0
 802dc40:	f04f 0100 	mov.w	r1, #0
 802dc44:	0d50      	lsrs	r0, r2, #21
 802dc46:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802dc4a:	1559      	asrs	r1, r3, #21
 802dc4c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802dc50:	e9c3 0100 	strd	r0, r1, [r3]
    s1 += carry0;
 802dc54:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802dc58:	e9d3 0100 	ldrd	r0, r1, [r3]
 802dc5c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802dc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dc64:	1884      	adds	r4, r0, r2
 802dc66:	f8c7 41a0 	str.w	r4, [r7, #416]	; 0x1a0
 802dc6a:	eb41 0303 	adc.w	r3, r1, r3
 802dc6e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 802dc72:	e9d7 3468 	ldrd	r3, r4, [r7, #416]	; 0x1a0
 802dc76:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802dc7a:	e9c2 3400 	strd	r3, r4, [r2]
    s0 -= carry0 << 21;
 802dc7e:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802dc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dc86:	f04f 0000 	mov.w	r0, #0
 802dc8a:	f04f 0100 	mov.w	r1, #0
 802dc8e:	0559      	lsls	r1, r3, #21
 802dc90:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802dc94:	0550      	lsls	r0, r2, #21
 802dc96:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802dc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dc9e:	1a14      	subs	r4, r2, r0
 802dca0:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 802dca4:	eb63 0301 	sbc.w	r3, r3, r1
 802dca8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 802dcac:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 802dcb0:	f607 0228 	addw	r2, r7, #2088	; 0x828
 802dcb4:	e9c2 3400 	strd	r3, r4, [r2]
    carry1 = s1 >> 21;
 802dcb8:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802dcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dcc0:	f04f 0000 	mov.w	r0, #0
 802dcc4:	f04f 0100 	mov.w	r1, #0
 802dcc8:	0d50      	lsrs	r0, r2, #21
 802dcca:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802dcce:	1559      	asrs	r1, r3, #21
 802dcd0:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802dcd4:	e9c3 0100 	strd	r0, r1, [r3]
    s2 += carry1;
 802dcd8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802dcdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 802dce0:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802dce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dce8:	1884      	adds	r4, r0, r2
 802dcea:	f8c7 4190 	str.w	r4, [r7, #400]	; 0x190
 802dcee:	eb41 0303 	adc.w	r3, r1, r3
 802dcf2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 802dcf6:	e9d7 3464 	ldrd	r3, r4, [r7, #400]	; 0x190
 802dcfa:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802dcfe:	e9c2 3400 	strd	r3, r4, [r2]
    s1 -= carry1 << 21;
 802dd02:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802dd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd0a:	f04f 0000 	mov.w	r0, #0
 802dd0e:	f04f 0100 	mov.w	r1, #0
 802dd12:	0559      	lsls	r1, r3, #21
 802dd14:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802dd18:	0550      	lsls	r0, r2, #21
 802dd1a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802dd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd22:	1a14      	subs	r4, r2, r0
 802dd24:	f8c7 4188 	str.w	r4, [r7, #392]	; 0x188
 802dd28:	eb63 0301 	sbc.w	r3, r3, r1
 802dd2c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 802dd30:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 802dd34:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802dd38:	e9c2 3400 	strd	r3, r4, [r2]
    carry2 = s2 >> 21;
 802dd3c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802dd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd44:	f04f 0000 	mov.w	r0, #0
 802dd48:	f04f 0100 	mov.w	r1, #0
 802dd4c:	0d50      	lsrs	r0, r2, #21
 802dd4e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802dd52:	1559      	asrs	r1, r3, #21
 802dd54:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802dd58:	e9c3 0100 	strd	r0, r1, [r3]
    s3 += carry2;
 802dd5c:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802dd60:	e9d3 0100 	ldrd	r0, r1, [r3]
 802dd64:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802dd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd6c:	1884      	adds	r4, r0, r2
 802dd6e:	f8c7 4180 	str.w	r4, [r7, #384]	; 0x180
 802dd72:	eb41 0303 	adc.w	r3, r1, r3
 802dd76:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 802dd7a:	e9d7 3460 	ldrd	r3, r4, [r7, #384]	; 0x180
 802dd7e:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802dd82:	e9c2 3400 	strd	r3, r4, [r2]
    s2 -= carry2 << 21;
 802dd86:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802dd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd8e:	f04f 0000 	mov.w	r0, #0
 802dd92:	f04f 0100 	mov.w	r1, #0
 802dd96:	0559      	lsls	r1, r3, #21
 802dd98:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802dd9c:	0550      	lsls	r0, r2, #21
 802dd9e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802dda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dda6:	1a14      	subs	r4, r2, r0
 802dda8:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 802ddac:	eb63 0301 	sbc.w	r3, r3, r1
 802ddb0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 802ddb4:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 802ddb8:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802ddbc:	e9c2 3400 	strd	r3, r4, [r2]
    carry3 = s3 >> 21;
 802ddc0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802ddc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ddc8:	f04f 0000 	mov.w	r0, #0
 802ddcc:	f04f 0100 	mov.w	r1, #0
 802ddd0:	0d50      	lsrs	r0, r2, #21
 802ddd2:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802ddd6:	1559      	asrs	r1, r3, #21
 802ddd8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802dddc:	e9c3 0100 	strd	r0, r1, [r3]
    s4 += carry3;
 802dde0:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802dde4:	e9d3 0100 	ldrd	r0, r1, [r3]
 802dde8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802ddec:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ddf0:	1884      	adds	r4, r0, r2
 802ddf2:	f8c7 4170 	str.w	r4, [r7, #368]	; 0x170
 802ddf6:	eb41 0303 	adc.w	r3, r1, r3
 802ddfa:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 802ddfe:	e9d7 345c 	ldrd	r3, r4, [r7, #368]	; 0x170
 802de02:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802de06:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= carry3 << 21;
 802de0a:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802de0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802de12:	f04f 0000 	mov.w	r0, #0
 802de16:	f04f 0100 	mov.w	r1, #0
 802de1a:	0559      	lsls	r1, r3, #21
 802de1c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802de20:	0550      	lsls	r0, r2, #21
 802de22:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802de26:	e9d3 2300 	ldrd	r2, r3, [r3]
 802de2a:	1a14      	subs	r4, r2, r0
 802de2c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 802de30:	eb63 0301 	sbc.w	r3, r3, r1
 802de34:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 802de38:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 802de3c:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802de40:	e9c2 3400 	strd	r3, r4, [r2]
 802de44:	e00c      	b.n	802de60 <sc_reduce+0x2e38>
 802de46:	bf00      	nop
 802de48:	000a2c13 	.word	0x000a2c13
 802de4c:	00072d18 	.word	0x00072d18
 802de50:	0009fb67 	.word	0x0009fb67
 802de54:	fff0c653 	.word	0xfff0c653
 802de58:	000215d1 	.word	0x000215d1
 802de5c:	fff59083 	.word	0xfff59083
    carry4 = s4 >> 21;
 802de60:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802de64:	e9d3 2300 	ldrd	r2, r3, [r3]
 802de68:	f04f 0000 	mov.w	r0, #0
 802de6c:	f04f 0100 	mov.w	r1, #0
 802de70:	0d50      	lsrs	r0, r2, #21
 802de72:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802de76:	1559      	asrs	r1, r3, #21
 802de78:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802de7c:	e9c3 0100 	strd	r0, r1, [r3]
    s5 += carry4;
 802de80:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802de84:	e9d3 0100 	ldrd	r0, r1, [r3]
 802de88:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802de8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802de90:	1884      	adds	r4, r0, r2
 802de92:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 802de96:	eb41 0303 	adc.w	r3, r1, r3
 802de9a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 802de9e:	e9d7 3458 	ldrd	r3, r4, [r7, #352]	; 0x160
 802dea2:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802dea6:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= carry4 << 21;
 802deaa:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802deae:	e9d3 2300 	ldrd	r2, r3, [r3]
 802deb2:	f04f 0000 	mov.w	r0, #0
 802deb6:	f04f 0100 	mov.w	r1, #0
 802deba:	0559      	lsls	r1, r3, #21
 802debc:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802dec0:	0550      	lsls	r0, r2, #21
 802dec2:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802dec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802deca:	1a14      	subs	r4, r2, r0
 802decc:	f8c7 4158 	str.w	r4, [r7, #344]	; 0x158
 802ded0:	eb63 0301 	sbc.w	r3, r3, r1
 802ded4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 802ded8:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 802dedc:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802dee0:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = s5 >> 21;
 802dee4:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802dee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802deec:	f04f 0000 	mov.w	r0, #0
 802def0:	f04f 0100 	mov.w	r1, #0
 802def4:	0d50      	lsrs	r0, r2, #21
 802def6:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802defa:	1559      	asrs	r1, r3, #21
 802defc:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802df00:	e9c3 0100 	strd	r0, r1, [r3]
    s6 += carry5;
 802df04:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802df08:	e9d3 0100 	ldrd	r0, r1, [r3]
 802df0c:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802df10:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df14:	1884      	adds	r4, r0, r2
 802df16:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 802df1a:	eb41 0303 	adc.w	r3, r1, r3
 802df1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 802df22:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 802df26:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802df2a:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= carry5 << 21;
 802df2e:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802df32:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df36:	f04f 0000 	mov.w	r0, #0
 802df3a:	f04f 0100 	mov.w	r1, #0
 802df3e:	0559      	lsls	r1, r3, #21
 802df40:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802df44:	0550      	lsls	r0, r2, #21
 802df46:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802df4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df4e:	1a14      	subs	r4, r2, r0
 802df50:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 802df54:	eb63 0301 	sbc.w	r3, r3, r1
 802df58:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 802df5c:	e9d7 3452 	ldrd	r3, r4, [r7, #328]	; 0x148
 802df60:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802df64:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = s6 >> 21;
 802df68:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802df6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df70:	f04f 0000 	mov.w	r0, #0
 802df74:	f04f 0100 	mov.w	r1, #0
 802df78:	0d50      	lsrs	r0, r2, #21
 802df7a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802df7e:	1559      	asrs	r1, r3, #21
 802df80:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802df84:	e9c3 0100 	strd	r0, r1, [r3]
    s7 += carry6;
 802df88:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802df8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802df90:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802df94:	e9d3 2300 	ldrd	r2, r3, [r3]
 802df98:	1884      	adds	r4, r0, r2
 802df9a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 802df9e:	eb41 0303 	adc.w	r3, r1, r3
 802dfa2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 802dfa6:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 802dfaa:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802dfae:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 802dfb2:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802dfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dfba:	f04f 0000 	mov.w	r0, #0
 802dfbe:	f04f 0100 	mov.w	r1, #0
 802dfc2:	0559      	lsls	r1, r3, #21
 802dfc4:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802dfc8:	0550      	lsls	r0, r2, #21
 802dfca:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802dfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dfd2:	1a14      	subs	r4, r2, r0
 802dfd4:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 802dfd8:	eb63 0301 	sbc.w	r3, r3, r1
 802dfdc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 802dfe0:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 802dfe4:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802dfe8:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = s7 >> 21;
 802dfec:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802dff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dff4:	f04f 0000 	mov.w	r0, #0
 802dff8:	f04f 0100 	mov.w	r1, #0
 802dffc:	0d50      	lsrs	r0, r2, #21
 802dffe:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e002:	1559      	asrs	r1, r3, #21
 802e004:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802e008:	e9c3 0100 	strd	r0, r1, [r3]
    s8 += carry7;
 802e00c:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802e010:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e014:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802e018:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e01c:	1884      	adds	r4, r0, r2
 802e01e:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 802e022:	eb41 0303 	adc.w	r3, r1, r3
 802e026:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 802e02a:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 802e02e:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802e032:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 802e036:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e03e:	f04f 0000 	mov.w	r0, #0
 802e042:	f04f 0100 	mov.w	r1, #0
 802e046:	0559      	lsls	r1, r3, #21
 802e048:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e04c:	0550      	lsls	r0, r2, #21
 802e04e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802e052:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e056:	1a14      	subs	r4, r2, r0
 802e058:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 802e05c:	eb63 0301 	sbc.w	r3, r3, r1
 802e060:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 802e064:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 802e068:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802e06c:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = s8 >> 21;
 802e070:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802e074:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e078:	f04f 0000 	mov.w	r0, #0
 802e07c:	f04f 0100 	mov.w	r1, #0
 802e080:	0d50      	lsrs	r0, r2, #21
 802e082:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e086:	1559      	asrs	r1, r3, #21
 802e088:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802e08c:	e9c3 0100 	strd	r0, r1, [r3]
    s9 += carry8;
 802e090:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802e094:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e098:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802e09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e0a0:	1884      	adds	r4, r0, r2
 802e0a2:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 802e0a6:	eb41 0303 	adc.w	r3, r1, r3
 802e0aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 802e0ae:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 802e0b2:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802e0b6:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 802e0ba:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802e0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e0c2:	f04f 0000 	mov.w	r0, #0
 802e0c6:	f04f 0100 	mov.w	r1, #0
 802e0ca:	0559      	lsls	r1, r3, #21
 802e0cc:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e0d0:	0550      	lsls	r0, r2, #21
 802e0d2:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802e0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e0da:	1a14      	subs	r4, r2, r0
 802e0dc:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 802e0e0:	eb63 0301 	sbc.w	r3, r3, r1
 802e0e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 802e0e8:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 802e0ec:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802e0f0:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = s9 >> 21;
 802e0f4:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802e0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e0fc:	f04f 0000 	mov.w	r0, #0
 802e100:	f04f 0100 	mov.w	r1, #0
 802e104:	0d50      	lsrs	r0, r2, #21
 802e106:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e10a:	1559      	asrs	r1, r3, #21
 802e10c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802e110:	e9c3 0100 	strd	r0, r1, [r3]
    s10 += carry9;
 802e114:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802e118:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e11c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802e120:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e124:	1884      	adds	r4, r0, r2
 802e126:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 802e12a:	eb41 0303 	adc.w	r3, r1, r3
 802e12e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 802e132:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 802e136:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802e13a:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 802e13e:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802e142:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e146:	f04f 0000 	mov.w	r0, #0
 802e14a:	f04f 0100 	mov.w	r1, #0
 802e14e:	0559      	lsls	r1, r3, #21
 802e150:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e154:	0550      	lsls	r0, r2, #21
 802e156:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802e15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e15e:	1a14      	subs	r4, r2, r0
 802e160:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 802e164:	eb63 0301 	sbc.w	r3, r3, r1
 802e168:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 802e16c:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 802e170:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802e174:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = s10 >> 21;
 802e178:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802e17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e180:	f04f 0000 	mov.w	r0, #0
 802e184:	f04f 0100 	mov.w	r1, #0
 802e188:	0d50      	lsrs	r0, r2, #21
 802e18a:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e18e:	1559      	asrs	r1, r3, #21
 802e190:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802e194:	e9c3 0100 	strd	r0, r1, [r3]
    s11 += carry10;
 802e198:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802e19c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e1a0:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802e1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e1a8:	1884      	adds	r4, r0, r2
 802e1aa:	f8c7 4100 	str.w	r4, [r7, #256]	; 0x100
 802e1ae:	eb41 0303 	adc.w	r3, r1, r3
 802e1b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 802e1b6:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 802e1ba:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802e1be:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 802e1c2:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802e1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e1ca:	f04f 0000 	mov.w	r0, #0
 802e1ce:	f04f 0100 	mov.w	r1, #0
 802e1d2:	0559      	lsls	r1, r3, #21
 802e1d4:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e1d8:	0550      	lsls	r0, r2, #21
 802e1da:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802e1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e1e2:	1a14      	subs	r4, r2, r0
 802e1e4:	f8c7 40f8 	str.w	r4, [r7, #248]	; 0xf8
 802e1e8:	eb63 0301 	sbc.w	r3, r3, r1
 802e1ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 802e1f0:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 802e1f4:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802e1f8:	e9c2 3400 	strd	r3, r4, [r2]
    carry11 = s11 >> 21;
 802e1fc:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802e200:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e204:	f04f 0000 	mov.w	r0, #0
 802e208:	f04f 0100 	mov.w	r1, #0
 802e20c:	0d50      	lsrs	r0, r2, #21
 802e20e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e212:	1559      	asrs	r1, r3, #21
 802e214:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 802e218:	e9c3 0100 	strd	r0, r1, [r3]
    s12 += carry11;
 802e21c:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 802e220:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e224:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 802e228:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e22c:	1884      	adds	r4, r0, r2
 802e22e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 802e232:	eb41 0303 	adc.w	r3, r1, r3
 802e236:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 802e23a:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 802e23e:	f507 62f9 	add.w	r2, r7, #1992	; 0x7c8
 802e242:	e9c2 3400 	strd	r3, r4, [r2]
    s11 -= carry11 << 21;
 802e246:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 802e24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e24e:	f04f 0000 	mov.w	r0, #0
 802e252:	f04f 0100 	mov.w	r1, #0
 802e256:	0559      	lsls	r1, r3, #21
 802e258:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e25c:	0550      	lsls	r0, r2, #21
 802e25e:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802e262:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e266:	1a14      	subs	r4, r2, r0
 802e268:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 802e26c:	eb63 0301 	sbc.w	r3, r3, r1
 802e270:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 802e274:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 802e278:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802e27c:	e9c2 3400 	strd	r3, r4, [r2]
    s0 += s12 * 666643;
 802e280:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802e284:	4bed      	ldr	r3, [pc, #948]	; (802e63c <sc_reduce+0x3614>)
 802e286:	fb03 f102 	mul.w	r1, r3, r2
 802e28a:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e28e:	2300      	movs	r3, #0
 802e290:	fb03 f302 	mul.w	r3, r3, r2
 802e294:	18cc      	adds	r4, r1, r3
 802e296:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e29a:	4be8      	ldr	r3, [pc, #928]	; (802e63c <sc_reduce+0x3614>)
 802e29c:	fba2 0103 	umull	r0, r1, r2, r3
 802e2a0:	1863      	adds	r3, r4, r1
 802e2a2:	4619      	mov	r1, r3
 802e2a4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802e2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e2ac:	1814      	adds	r4, r2, r0
 802e2ae:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 802e2b2:	414b      	adcs	r3, r1
 802e2b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 802e2b8:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 802e2bc:	f607 0228 	addw	r2, r7, #2088	; 0x828
 802e2c0:	e9c2 3400 	strd	r3, r4, [r2]
    s1 += s12 * 470296;
 802e2c4:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802e2c8:	4bdd      	ldr	r3, [pc, #884]	; (802e640 <sc_reduce+0x3618>)
 802e2ca:	fb03 f102 	mul.w	r1, r3, r2
 802e2ce:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e2d2:	2300      	movs	r3, #0
 802e2d4:	fb03 f302 	mul.w	r3, r3, r2
 802e2d8:	18cc      	adds	r4, r1, r3
 802e2da:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e2de:	4bd8      	ldr	r3, [pc, #864]	; (802e640 <sc_reduce+0x3618>)
 802e2e0:	fba2 0103 	umull	r0, r1, r2, r3
 802e2e4:	1863      	adds	r3, r4, r1
 802e2e6:	4619      	mov	r1, r3
 802e2e8:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802e2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e2f0:	1814      	adds	r4, r2, r0
 802e2f2:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 802e2f6:	414b      	adcs	r3, r1
 802e2f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 802e2fc:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 802e300:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802e304:	e9c2 3400 	strd	r3, r4, [r2]
    s2 += s12 * 654183;
 802e308:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802e30c:	4bcd      	ldr	r3, [pc, #820]	; (802e644 <sc_reduce+0x361c>)
 802e30e:	fb03 f102 	mul.w	r1, r3, r2
 802e312:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e316:	2300      	movs	r3, #0
 802e318:	fb03 f302 	mul.w	r3, r3, r2
 802e31c:	18cc      	adds	r4, r1, r3
 802e31e:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e322:	4bc8      	ldr	r3, [pc, #800]	; (802e644 <sc_reduce+0x361c>)
 802e324:	fba2 0103 	umull	r0, r1, r2, r3
 802e328:	1863      	adds	r3, r4, r1
 802e32a:	4619      	mov	r1, r3
 802e32c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802e330:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e334:	1814      	adds	r4, r2, r0
 802e336:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 802e33a:	414b      	adcs	r3, r1
 802e33c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 802e340:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 802e344:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802e348:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= s12 * 997805;
 802e34c:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802e350:	4bbd      	ldr	r3, [pc, #756]	; (802e648 <sc_reduce+0x3620>)
 802e352:	fb03 f102 	mul.w	r1, r3, r2
 802e356:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e35a:	f04f 33ff 	mov.w	r3, #4294967295
 802e35e:	fb03 f302 	mul.w	r3, r3, r2
 802e362:	18cc      	adds	r4, r1, r3
 802e364:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e368:	4bb7      	ldr	r3, [pc, #732]	; (802e648 <sc_reduce+0x3620>)
 802e36a:	fba2 0103 	umull	r0, r1, r2, r3
 802e36e:	1863      	adds	r3, r4, r1
 802e370:	4619      	mov	r1, r3
 802e372:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802e376:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e37a:	1814      	adds	r4, r2, r0
 802e37c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 802e380:	414b      	adcs	r3, r1
 802e382:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 802e386:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 802e38a:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802e38e:	e9c2 3400 	strd	r3, r4, [r2]
    s4 += s12 * 136657;
 802e392:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802e396:	4bad      	ldr	r3, [pc, #692]	; (802e64c <sc_reduce+0x3624>)
 802e398:	fb03 f102 	mul.w	r1, r3, r2
 802e39c:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e3a0:	2300      	movs	r3, #0
 802e3a2:	fb03 f302 	mul.w	r3, r3, r2
 802e3a6:	18cc      	adds	r4, r1, r3
 802e3a8:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e3ac:	4ba7      	ldr	r3, [pc, #668]	; (802e64c <sc_reduce+0x3624>)
 802e3ae:	fba2 0103 	umull	r0, r1, r2, r3
 802e3b2:	1863      	adds	r3, r4, r1
 802e3b4:	4619      	mov	r1, r3
 802e3b6:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802e3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e3be:	1814      	adds	r4, r2, r0
 802e3c0:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 802e3c4:	414b      	adcs	r3, r1
 802e3c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 802e3ca:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 802e3ce:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802e3d2:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= s12 * 683901;
 802e3d6:	f8d7 27cc 	ldr.w	r2, [r7, #1996]	; 0x7cc
 802e3da:	4b9d      	ldr	r3, [pc, #628]	; (802e650 <sc_reduce+0x3628>)
 802e3dc:	fb03 f102 	mul.w	r1, r3, r2
 802e3e0:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e3e4:	f04f 33ff 	mov.w	r3, #4294967295
 802e3e8:	fb03 f302 	mul.w	r3, r3, r2
 802e3ec:	18cc      	adds	r4, r1, r3
 802e3ee:	f8d7 27c8 	ldr.w	r2, [r7, #1992]	; 0x7c8
 802e3f2:	4b97      	ldr	r3, [pc, #604]	; (802e650 <sc_reduce+0x3628>)
 802e3f4:	fba2 0103 	umull	r0, r1, r2, r3
 802e3f8:	1863      	adds	r3, r4, r1
 802e3fa:	4619      	mov	r1, r3
 802e3fc:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802e400:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e404:	1814      	adds	r4, r2, r0
 802e406:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 802e40a:	414b      	adcs	r3, r1
 802e40c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 802e410:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 802e414:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802e418:	e9c2 3400 	strd	r3, r4, [r2]
    s12 = 0;
 802e41c:	f04f 0200 	mov.w	r2, #0
 802e420:	f04f 0300 	mov.w	r3, #0
 802e424:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 802e428:	e9c1 2300 	strd	r2, r3, [r1]
    carry0 = s0 >> 21;
 802e42c:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802e430:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e434:	f04f 0000 	mov.w	r0, #0
 802e438:	f04f 0100 	mov.w	r1, #0
 802e43c:	0d50      	lsrs	r0, r2, #21
 802e43e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e442:	1559      	asrs	r1, r3, #21
 802e444:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802e448:	e9c3 0100 	strd	r0, r1, [r3]
    s1 += carry0;
 802e44c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802e450:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e454:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802e458:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e45c:	1884      	adds	r4, r0, r2
 802e45e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 802e462:	eb41 0303 	adc.w	r3, r1, r3
 802e466:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 802e46a:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 802e46e:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802e472:	e9c2 3400 	strd	r3, r4, [r2]
    s0 -= carry0 << 21;
 802e476:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 802e47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e47e:	f04f 0000 	mov.w	r0, #0
 802e482:	f04f 0100 	mov.w	r1, #0
 802e486:	0559      	lsls	r1, r3, #21
 802e488:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e48c:	0550      	lsls	r0, r2, #21
 802e48e:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802e492:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e496:	1a14      	subs	r4, r2, r0
 802e498:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 802e49c:	eb63 0301 	sbc.w	r3, r3, r1
 802e4a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 802e4a4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 802e4a8:	f607 0228 	addw	r2, r7, #2088	; 0x828
 802e4ac:	e9c2 3400 	strd	r3, r4, [r2]
    carry1 = s1 >> 21;
 802e4b0:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802e4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e4b8:	f04f 0000 	mov.w	r0, #0
 802e4bc:	f04f 0100 	mov.w	r1, #0
 802e4c0:	0d50      	lsrs	r0, r2, #21
 802e4c2:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e4c6:	1559      	asrs	r1, r3, #21
 802e4c8:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802e4cc:	e9c3 0100 	strd	r0, r1, [r3]
    s2 += carry1;
 802e4d0:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802e4d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e4d8:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802e4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e4e0:	1884      	adds	r4, r0, r2
 802e4e2:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 802e4e6:	eb41 0303 	adc.w	r3, r1, r3
 802e4ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 802e4ee:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 802e4f2:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802e4f6:	e9c2 3400 	strd	r3, r4, [r2]
    s1 -= carry1 << 21;
 802e4fa:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 802e4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e502:	f04f 0000 	mov.w	r0, #0
 802e506:	f04f 0100 	mov.w	r1, #0
 802e50a:	0559      	lsls	r1, r3, #21
 802e50c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e510:	0550      	lsls	r0, r2, #21
 802e512:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802e516:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e51a:	1a14      	subs	r4, r2, r0
 802e51c:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 802e520:	eb63 0301 	sbc.w	r3, r3, r1
 802e524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802e528:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 802e52c:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 802e530:	e9c2 3400 	strd	r3, r4, [r2]
    carry2 = s2 >> 21;
 802e534:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e53c:	f04f 0000 	mov.w	r0, #0
 802e540:	f04f 0100 	mov.w	r1, #0
 802e544:	0d50      	lsrs	r0, r2, #21
 802e546:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e54a:	1559      	asrs	r1, r3, #21
 802e54c:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802e550:	e9c3 0100 	strd	r0, r1, [r3]
    s3 += carry2;
 802e554:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802e558:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e55c:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802e560:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e564:	1884      	adds	r4, r0, r2
 802e566:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 802e56a:	eb41 0303 	adc.w	r3, r1, r3
 802e56e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 802e572:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 802e576:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802e57a:	e9c2 3400 	strd	r3, r4, [r2]
    s2 -= carry2 << 21;
 802e57e:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 802e582:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e586:	f04f 0000 	mov.w	r0, #0
 802e58a:	f04f 0100 	mov.w	r1, #0
 802e58e:	0559      	lsls	r1, r3, #21
 802e590:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e594:	0550      	lsls	r0, r2, #21
 802e596:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802e59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e59e:	1a14      	subs	r4, r2, r0
 802e5a0:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 802e5a4:	eb63 0301 	sbc.w	r3, r3, r1
 802e5a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 802e5ac:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 802e5b0:	f607 0218 	addw	r2, r7, #2072	; 0x818
 802e5b4:	e9c2 3400 	strd	r3, r4, [r2]
    carry3 = s3 >> 21;
 802e5b8:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802e5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e5c0:	f04f 0000 	mov.w	r0, #0
 802e5c4:	f04f 0100 	mov.w	r1, #0
 802e5c8:	0d50      	lsrs	r0, r2, #21
 802e5ca:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e5ce:	1559      	asrs	r1, r3, #21
 802e5d0:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802e5d4:	e9c3 0100 	strd	r0, r1, [r3]
    s4 += carry3;
 802e5d8:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802e5dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e5e0:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802e5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e5e8:	1884      	adds	r4, r0, r2
 802e5ea:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 802e5ee:	eb41 0303 	adc.w	r3, r1, r3
 802e5f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802e5f6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 802e5fa:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802e5fe:	e9c2 3400 	strd	r3, r4, [r2]
    s3 -= carry3 << 21;
 802e602:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 802e606:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e60a:	f04f 0000 	mov.w	r0, #0
 802e60e:	f04f 0100 	mov.w	r1, #0
 802e612:	0559      	lsls	r1, r3, #21
 802e614:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e618:	0550      	lsls	r0, r2, #21
 802e61a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802e61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e622:	1a14      	subs	r4, r2, r0
 802e624:	67bc      	str	r4, [r7, #120]	; 0x78
 802e626:	eb63 0301 	sbc.w	r3, r3, r1
 802e62a:	67fb      	str	r3, [r7, #124]	; 0x7c
 802e62c:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 802e630:	f507 6201 	add.w	r2, r7, #2064	; 0x810
 802e634:	e9c2 3400 	strd	r3, r4, [r2]
 802e638:	e00c      	b.n	802e654 <sc_reduce+0x362c>
 802e63a:	bf00      	nop
 802e63c:	000a2c13 	.word	0x000a2c13
 802e640:	00072d18 	.word	0x00072d18
 802e644:	0009fb67 	.word	0x0009fb67
 802e648:	fff0c653 	.word	0xfff0c653
 802e64c:	000215d1 	.word	0x000215d1
 802e650:	fff59083 	.word	0xfff59083
    carry4 = s4 >> 21;
 802e654:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802e658:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e65c:	f04f 0000 	mov.w	r0, #0
 802e660:	f04f 0100 	mov.w	r1, #0
 802e664:	0d50      	lsrs	r0, r2, #21
 802e666:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e66a:	1559      	asrs	r1, r3, #21
 802e66c:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802e670:	e9c3 0100 	strd	r0, r1, [r3]
    s5 += carry4;
 802e674:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802e678:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e67c:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802e680:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e684:	1884      	adds	r4, r0, r2
 802e686:	673c      	str	r4, [r7, #112]	; 0x70
 802e688:	eb41 0303 	adc.w	r3, r1, r3
 802e68c:	677b      	str	r3, [r7, #116]	; 0x74
 802e68e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 802e692:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802e696:	e9c2 3400 	strd	r3, r4, [r2]
    s4 -= carry4 << 21;
 802e69a:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 802e69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e6a2:	f04f 0000 	mov.w	r0, #0
 802e6a6:	f04f 0100 	mov.w	r1, #0
 802e6aa:	0559      	lsls	r1, r3, #21
 802e6ac:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e6b0:	0550      	lsls	r0, r2, #21
 802e6b2:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802e6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e6ba:	1a14      	subs	r4, r2, r0
 802e6bc:	66bc      	str	r4, [r7, #104]	; 0x68
 802e6be:	eb63 0301 	sbc.w	r3, r3, r1
 802e6c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 802e6c4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 802e6c8:	f607 0208 	addw	r2, r7, #2056	; 0x808
 802e6cc:	e9c2 3400 	strd	r3, r4, [r2]
    carry5 = s5 >> 21;
 802e6d0:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802e6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e6d8:	f04f 0000 	mov.w	r0, #0
 802e6dc:	f04f 0100 	mov.w	r1, #0
 802e6e0:	0d50      	lsrs	r0, r2, #21
 802e6e2:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e6e6:	1559      	asrs	r1, r3, #21
 802e6e8:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802e6ec:	e9c3 0100 	strd	r0, r1, [r3]
    s6 += carry5;
 802e6f0:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802e6f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e6f8:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802e6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e700:	1884      	adds	r4, r0, r2
 802e702:	663c      	str	r4, [r7, #96]	; 0x60
 802e704:	eb41 0303 	adc.w	r3, r1, r3
 802e708:	667b      	str	r3, [r7, #100]	; 0x64
 802e70a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 802e70e:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802e712:	e9c2 3400 	strd	r3, r4, [r2]
    s5 -= carry5 << 21;
 802e716:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 802e71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e71e:	f04f 0000 	mov.w	r0, #0
 802e722:	f04f 0100 	mov.w	r1, #0
 802e726:	0559      	lsls	r1, r3, #21
 802e728:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e72c:	0550      	lsls	r0, r2, #21
 802e72e:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802e732:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e736:	1a14      	subs	r4, r2, r0
 802e738:	65bc      	str	r4, [r7, #88]	; 0x58
 802e73a:	eb63 0301 	sbc.w	r3, r3, r1
 802e73e:	65fb      	str	r3, [r7, #92]	; 0x5c
 802e740:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 802e744:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 802e748:	e9c2 3400 	strd	r3, r4, [r2]
    carry6 = s6 >> 21;
 802e74c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802e750:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e754:	f04f 0000 	mov.w	r0, #0
 802e758:	f04f 0100 	mov.w	r1, #0
 802e75c:	0d50      	lsrs	r0, r2, #21
 802e75e:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e762:	1559      	asrs	r1, r3, #21
 802e764:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802e768:	e9c3 0100 	strd	r0, r1, [r3]
    s7 += carry6;
 802e76c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802e770:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e774:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802e778:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e77c:	1884      	adds	r4, r0, r2
 802e77e:	653c      	str	r4, [r7, #80]	; 0x50
 802e780:	eb41 0303 	adc.w	r3, r1, r3
 802e784:	657b      	str	r3, [r7, #84]	; 0x54
 802e786:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 802e78a:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802e78e:	e9c2 3400 	strd	r3, r4, [r2]
    s6 -= carry6 << 21;
 802e792:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 802e796:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e79a:	f04f 0000 	mov.w	r0, #0
 802e79e:	f04f 0100 	mov.w	r1, #0
 802e7a2:	0559      	lsls	r1, r3, #21
 802e7a4:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e7a8:	0550      	lsls	r0, r2, #21
 802e7aa:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802e7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e7b2:	1a14      	subs	r4, r2, r0
 802e7b4:	64bc      	str	r4, [r7, #72]	; 0x48
 802e7b6:	eb63 0301 	sbc.w	r3, r3, r1
 802e7ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 802e7bc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 802e7c0:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 802e7c4:	e9c2 3400 	strd	r3, r4, [r2]
    carry7 = s7 >> 21;
 802e7c8:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802e7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e7d0:	f04f 0000 	mov.w	r0, #0
 802e7d4:	f04f 0100 	mov.w	r1, #0
 802e7d8:	0d50      	lsrs	r0, r2, #21
 802e7da:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e7de:	1559      	asrs	r1, r3, #21
 802e7e0:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802e7e4:	e9c3 0100 	strd	r0, r1, [r3]
    s8 += carry7;
 802e7e8:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802e7ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e7f0:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802e7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e7f8:	1884      	adds	r4, r0, r2
 802e7fa:	643c      	str	r4, [r7, #64]	; 0x40
 802e7fc:	eb41 0303 	adc.w	r3, r1, r3
 802e800:	647b      	str	r3, [r7, #68]	; 0x44
 802e802:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 802e806:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802e80a:	e9c2 3400 	strd	r3, r4, [r2]
    s7 -= carry7 << 21;
 802e80e:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 802e812:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e816:	f04f 0000 	mov.w	r0, #0
 802e81a:	f04f 0100 	mov.w	r1, #0
 802e81e:	0559      	lsls	r1, r3, #21
 802e820:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e824:	0550      	lsls	r0, r2, #21
 802e826:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802e82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e82e:	1a14      	subs	r4, r2, r0
 802e830:	63bc      	str	r4, [r7, #56]	; 0x38
 802e832:	eb63 0301 	sbc.w	r3, r3, r1
 802e836:	63fb      	str	r3, [r7, #60]	; 0x3c
 802e838:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 802e83c:	f507 62fe 	add.w	r2, r7, #2032	; 0x7f0
 802e840:	e9c2 3400 	strd	r3, r4, [r2]
    carry8 = s8 >> 21;
 802e844:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802e848:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e84c:	f04f 0000 	mov.w	r0, #0
 802e850:	f04f 0100 	mov.w	r1, #0
 802e854:	0d50      	lsrs	r0, r2, #21
 802e856:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 802e85a:	1559      	asrs	r1, r3, #21
 802e85c:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802e860:	e9c3 0100 	strd	r0, r1, [r3]
    s9 += carry8;
 802e864:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802e868:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e86c:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802e870:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e874:	1884      	adds	r4, r0, r2
 802e876:	633c      	str	r4, [r7, #48]	; 0x30
 802e878:	eb41 0303 	adc.w	r3, r1, r3
 802e87c:	637b      	str	r3, [r7, #52]	; 0x34
 802e87e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 802e882:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802e886:	e9c2 3400 	strd	r3, r4, [r2]
    s8 -= carry8 << 21;
 802e88a:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 802e88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e892:	f04f 0000 	mov.w	r0, #0
 802e896:	f04f 0100 	mov.w	r1, #0
 802e89a:	0559      	lsls	r1, r3, #21
 802e89c:	ea41 21d2 	orr.w	r1, r1, r2, lsr #11
 802e8a0:	0550      	lsls	r0, r2, #21
 802e8a2:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802e8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e8aa:	1a14      	subs	r4, r2, r0
 802e8ac:	62bc      	str	r4, [r7, #40]	; 0x28
 802e8ae:	eb63 0301 	sbc.w	r3, r3, r1
 802e8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 802e8b4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 802e8b8:	f507 62fd 	add.w	r2, r7, #2024	; 0x7e8
 802e8bc:	e9c2 3400 	strd	r3, r4, [r2]
    carry9 = s9 >> 21;
 802e8c0:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802e8c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e8c8:	f04f 0200 	mov.w	r2, #0
 802e8cc:	f04f 0300 	mov.w	r3, #0
 802e8d0:	0d42      	lsrs	r2, r0, #21
 802e8d2:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802e8d6:	154b      	asrs	r3, r1, #21
 802e8d8:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 802e8dc:	e9c1 2300 	strd	r2, r3, [r1]
    s10 += carry9;
 802e8e0:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802e8e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e8e8:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802e8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e8f0:	1884      	adds	r4, r0, r2
 802e8f2:	623c      	str	r4, [r7, #32]
 802e8f4:	eb41 0303 	adc.w	r3, r1, r3
 802e8f8:	627b      	str	r3, [r7, #36]	; 0x24
 802e8fa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 802e8fe:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802e902:	e9c2 3400 	strd	r3, r4, [r2]
    s9 -= carry9 << 21;
 802e906:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 802e90a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e90e:	f04f 0200 	mov.w	r2, #0
 802e912:	f04f 0300 	mov.w	r3, #0
 802e916:	054b      	lsls	r3, r1, #21
 802e918:	ea43 23d0 	orr.w	r3, r3, r0, lsr #11
 802e91c:	0542      	lsls	r2, r0, #21
 802e91e:	f507 61fc 	add.w	r1, r7, #2016	; 0x7e0
 802e922:	e9d1 0100 	ldrd	r0, r1, [r1]
 802e926:	1a84      	subs	r4, r0, r2
 802e928:	61bc      	str	r4, [r7, #24]
 802e92a:	eb61 0303 	sbc.w	r3, r1, r3
 802e92e:	61fb      	str	r3, [r7, #28]
 802e930:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 802e934:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 802e938:	e9c2 3400 	strd	r3, r4, [r2]
    carry10 = s10 >> 21;
 802e93c:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802e940:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e944:	f04f 0200 	mov.w	r2, #0
 802e948:	f04f 0300 	mov.w	r3, #0
 802e94c:	0d42      	lsrs	r2, r0, #21
 802e94e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 802e952:	154b      	asrs	r3, r1, #21
 802e954:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 802e958:	e9c1 2300 	strd	r2, r3, [r1]
    s11 += carry10;
 802e95c:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802e960:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e964:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802e968:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e96c:	1884      	adds	r4, r0, r2
 802e96e:	613c      	str	r4, [r7, #16]
 802e970:	eb41 0303 	adc.w	r3, r1, r3
 802e974:	617b      	str	r3, [r7, #20]
 802e976:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 802e97a:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 802e97e:	e9c2 3400 	strd	r3, r4, [r2]
    s10 -= carry10 << 21;
 802e982:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 802e986:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e98a:	f04f 0200 	mov.w	r2, #0
 802e98e:	f04f 0300 	mov.w	r3, #0
 802e992:	054b      	lsls	r3, r1, #21
 802e994:	ea43 23d0 	orr.w	r3, r3, r0, lsr #11
 802e998:	0542      	lsls	r2, r0, #21
 802e99a:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 802e99e:	e9d1 0100 	ldrd	r0, r1, [r1]
 802e9a2:	1a84      	subs	r4, r0, r2
 802e9a4:	60bc      	str	r4, [r7, #8]
 802e9a6:	eb61 0303 	sbc.w	r3, r1, r3
 802e9aa:	60fb      	str	r3, [r7, #12]
 802e9ac:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 802e9b0:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 802e9b4:	e9c2 3400 	strd	r3, r4, [r2]

    s[0] = (unsigned char) (s0 >> 0);
 802e9b8:	f897 2828 	ldrb.w	r2, [r7, #2088]	; 0x828
 802e9bc:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802e9c0:	681b      	ldr	r3, [r3, #0]
 802e9c2:	701a      	strb	r2, [r3, #0]
    s[1] = (unsigned char) (s0 >> 8);
 802e9c4:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802e9c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e9cc:	f04f 0200 	mov.w	r2, #0
 802e9d0:	f04f 0300 	mov.w	r3, #0
 802e9d4:	0a02      	lsrs	r2, r0, #8
 802e9d6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 802e9da:	120b      	asrs	r3, r1, #8
 802e9dc:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802e9e0:	6809      	ldr	r1, [r1, #0]
 802e9e2:	3101      	adds	r1, #1
 802e9e4:	b2d3      	uxtb	r3, r2
 802e9e6:	700b      	strb	r3, [r1, #0]
    s[2] = (unsigned char) ((s0 >> 16) | (s1 << 5));
 802e9e8:	f607 0328 	addw	r3, r7, #2088	; 0x828
 802e9ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 802e9f0:	f04f 0200 	mov.w	r2, #0
 802e9f4:	f04f 0300 	mov.w	r3, #0
 802e9f8:	0c02      	lsrs	r2, r0, #16
 802e9fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 802e9fe:	140b      	asrs	r3, r1, #16
 802ea00:	b254      	sxtb	r4, r2
 802ea02:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802ea06:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ea0a:	f04f 0200 	mov.w	r2, #0
 802ea0e:	f04f 0300 	mov.w	r3, #0
 802ea12:	014b      	lsls	r3, r1, #5
 802ea14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 802ea18:	0142      	lsls	r2, r0, #5
 802ea1a:	b253      	sxtb	r3, r2
 802ea1c:	4323      	orrs	r3, r4
 802ea1e:	b25a      	sxtb	r2, r3
 802ea20:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802ea24:	681b      	ldr	r3, [r3, #0]
 802ea26:	3302      	adds	r3, #2
 802ea28:	b2d2      	uxtb	r2, r2
 802ea2a:	701a      	strb	r2, [r3, #0]
    s[3] = (unsigned char) (s1 >> 3);
 802ea2c:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802ea30:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ea34:	f04f 0200 	mov.w	r2, #0
 802ea38:	f04f 0300 	mov.w	r3, #0
 802ea3c:	08c2      	lsrs	r2, r0, #3
 802ea3e:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 802ea42:	10cb      	asrs	r3, r1, #3
 802ea44:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ea48:	6809      	ldr	r1, [r1, #0]
 802ea4a:	3103      	adds	r1, #3
 802ea4c:	b2d3      	uxtb	r3, r2
 802ea4e:	700b      	strb	r3, [r1, #0]
    s[4] = (unsigned char) (s1 >> 11);
 802ea50:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802ea54:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ea58:	f04f 0200 	mov.w	r2, #0
 802ea5c:	f04f 0300 	mov.w	r3, #0
 802ea60:	0ac2      	lsrs	r2, r0, #11
 802ea62:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 802ea66:	12cb      	asrs	r3, r1, #11
 802ea68:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ea6c:	6809      	ldr	r1, [r1, #0]
 802ea6e:	3104      	adds	r1, #4
 802ea70:	b2d3      	uxtb	r3, r2
 802ea72:	700b      	strb	r3, [r1, #0]
    s[5] = (unsigned char) ((s1 >> 19) | (s2 << 2));
 802ea74:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 802ea78:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ea7c:	f04f 0200 	mov.w	r2, #0
 802ea80:	f04f 0300 	mov.w	r3, #0
 802ea84:	0cc2      	lsrs	r2, r0, #19
 802ea86:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 802ea8a:	14cb      	asrs	r3, r1, #19
 802ea8c:	b254      	sxtb	r4, r2
 802ea8e:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802ea92:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ea96:	f04f 0200 	mov.w	r2, #0
 802ea9a:	f04f 0300 	mov.w	r3, #0
 802ea9e:	008b      	lsls	r3, r1, #2
 802eaa0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 802eaa4:	0082      	lsls	r2, r0, #2
 802eaa6:	b253      	sxtb	r3, r2
 802eaa8:	4323      	orrs	r3, r4
 802eaaa:	b25a      	sxtb	r2, r3
 802eaac:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802eab0:	681b      	ldr	r3, [r3, #0]
 802eab2:	3305      	adds	r3, #5
 802eab4:	b2d2      	uxtb	r2, r2
 802eab6:	701a      	strb	r2, [r3, #0]
    s[6] = (unsigned char) (s2 >> 6);
 802eab8:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802eabc:	e9d3 0100 	ldrd	r0, r1, [r3]
 802eac0:	f04f 0200 	mov.w	r2, #0
 802eac4:	f04f 0300 	mov.w	r3, #0
 802eac8:	0982      	lsrs	r2, r0, #6
 802eaca:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 802eace:	118b      	asrs	r3, r1, #6
 802ead0:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ead4:	6809      	ldr	r1, [r1, #0]
 802ead6:	3106      	adds	r1, #6
 802ead8:	b2d3      	uxtb	r3, r2
 802eada:	700b      	strb	r3, [r1, #0]
    s[7] = (unsigned char) ((s2 >> 14) | (s3 << 7));
 802eadc:	f607 0318 	addw	r3, r7, #2072	; 0x818
 802eae0:	e9d3 0100 	ldrd	r0, r1, [r3]
 802eae4:	f04f 0200 	mov.w	r2, #0
 802eae8:	f04f 0300 	mov.w	r3, #0
 802eaec:	0b82      	lsrs	r2, r0, #14
 802eaee:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 802eaf2:	138b      	asrs	r3, r1, #14
 802eaf4:	b254      	sxtb	r4, r2
 802eaf6:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802eafa:	e9d3 0100 	ldrd	r0, r1, [r3]
 802eafe:	f04f 0200 	mov.w	r2, #0
 802eb02:	f04f 0300 	mov.w	r3, #0
 802eb06:	01cb      	lsls	r3, r1, #7
 802eb08:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 802eb0c:	01c2      	lsls	r2, r0, #7
 802eb0e:	b253      	sxtb	r3, r2
 802eb10:	4323      	orrs	r3, r4
 802eb12:	b25a      	sxtb	r2, r3
 802eb14:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802eb18:	681b      	ldr	r3, [r3, #0]
 802eb1a:	3307      	adds	r3, #7
 802eb1c:	b2d2      	uxtb	r2, r2
 802eb1e:	701a      	strb	r2, [r3, #0]
    s[8] = (unsigned char) (s3 >> 1);
 802eb20:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802eb24:	e9d3 0100 	ldrd	r0, r1, [r3]
 802eb28:	f04f 0200 	mov.w	r2, #0
 802eb2c:	f04f 0300 	mov.w	r3, #0
 802eb30:	0842      	lsrs	r2, r0, #1
 802eb32:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 802eb36:	104b      	asrs	r3, r1, #1
 802eb38:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802eb3c:	6809      	ldr	r1, [r1, #0]
 802eb3e:	3108      	adds	r1, #8
 802eb40:	b2d3      	uxtb	r3, r2
 802eb42:	700b      	strb	r3, [r1, #0]
    s[9] = (unsigned char) (s3 >> 9);
 802eb44:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802eb48:	e9d3 0100 	ldrd	r0, r1, [r3]
 802eb4c:	f04f 0200 	mov.w	r2, #0
 802eb50:	f04f 0300 	mov.w	r3, #0
 802eb54:	0a42      	lsrs	r2, r0, #9
 802eb56:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 802eb5a:	124b      	asrs	r3, r1, #9
 802eb5c:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802eb60:	6809      	ldr	r1, [r1, #0]
 802eb62:	3109      	adds	r1, #9
 802eb64:	b2d3      	uxtb	r3, r2
 802eb66:	700b      	strb	r3, [r1, #0]
    s[10] = (unsigned char) ((s3 >> 17) | (s4 << 4));
 802eb68:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 802eb6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802eb70:	f04f 0200 	mov.w	r2, #0
 802eb74:	f04f 0300 	mov.w	r3, #0
 802eb78:	0c42      	lsrs	r2, r0, #17
 802eb7a:	ea42 32c1 	orr.w	r2, r2, r1, lsl #15
 802eb7e:	144b      	asrs	r3, r1, #17
 802eb80:	b254      	sxtb	r4, r2
 802eb82:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802eb86:	e9d3 0100 	ldrd	r0, r1, [r3]
 802eb8a:	f04f 0200 	mov.w	r2, #0
 802eb8e:	f04f 0300 	mov.w	r3, #0
 802eb92:	010b      	lsls	r3, r1, #4
 802eb94:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 802eb98:	0102      	lsls	r2, r0, #4
 802eb9a:	b253      	sxtb	r3, r2
 802eb9c:	4323      	orrs	r3, r4
 802eb9e:	b25a      	sxtb	r2, r3
 802eba0:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802eba4:	681b      	ldr	r3, [r3, #0]
 802eba6:	330a      	adds	r3, #10
 802eba8:	b2d2      	uxtb	r2, r2
 802ebaa:	701a      	strb	r2, [r3, #0]
    s[11] = (unsigned char) (s4 >> 4);
 802ebac:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802ebb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ebb4:	f04f 0200 	mov.w	r2, #0
 802ebb8:	f04f 0300 	mov.w	r3, #0
 802ebbc:	0902      	lsrs	r2, r0, #4
 802ebbe:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 802ebc2:	110b      	asrs	r3, r1, #4
 802ebc4:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ebc8:	6809      	ldr	r1, [r1, #0]
 802ebca:	310b      	adds	r1, #11
 802ebcc:	b2d3      	uxtb	r3, r2
 802ebce:	700b      	strb	r3, [r1, #0]
    s[12] = (unsigned char) (s4 >> 12);
 802ebd0:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802ebd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ebd8:	f04f 0200 	mov.w	r2, #0
 802ebdc:	f04f 0300 	mov.w	r3, #0
 802ebe0:	0b02      	lsrs	r2, r0, #12
 802ebe2:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 802ebe6:	130b      	asrs	r3, r1, #12
 802ebe8:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ebec:	6809      	ldr	r1, [r1, #0]
 802ebee:	310c      	adds	r1, #12
 802ebf0:	b2d3      	uxtb	r3, r2
 802ebf2:	700b      	strb	r3, [r1, #0]
    s[13] = (unsigned char) ((s4 >> 20) | (s5 << 1));
 802ebf4:	f607 0308 	addw	r3, r7, #2056	; 0x808
 802ebf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ebfc:	f04f 0200 	mov.w	r2, #0
 802ec00:	f04f 0300 	mov.w	r3, #0
 802ec04:	0d02      	lsrs	r2, r0, #20
 802ec06:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 802ec0a:	150b      	asrs	r3, r1, #20
 802ec0c:	b251      	sxtb	r1, r2
 802ec0e:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802ec12:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec16:	1890      	adds	r0, r2, r2
 802ec18:	6038      	str	r0, [r7, #0]
 802ec1a:	415b      	adcs	r3, r3
 802ec1c:	607b      	str	r3, [r7, #4]
 802ec1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 802ec22:	b253      	sxtb	r3, r2
 802ec24:	430b      	orrs	r3, r1
 802ec26:	b25a      	sxtb	r2, r3
 802ec28:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802ec2c:	681b      	ldr	r3, [r3, #0]
 802ec2e:	330d      	adds	r3, #13
 802ec30:	b2d2      	uxtb	r2, r2
 802ec32:	701a      	strb	r2, [r3, #0]
    s[14] = (unsigned char) (s5 >> 7);
 802ec34:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802ec38:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ec3c:	f04f 0200 	mov.w	r2, #0
 802ec40:	f04f 0300 	mov.w	r3, #0
 802ec44:	09c2      	lsrs	r2, r0, #7
 802ec46:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 802ec4a:	11cb      	asrs	r3, r1, #7
 802ec4c:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ec50:	6809      	ldr	r1, [r1, #0]
 802ec52:	310e      	adds	r1, #14
 802ec54:	b2d3      	uxtb	r3, r2
 802ec56:	700b      	strb	r3, [r1, #0]
    s[15] = (unsigned char) ((s5 >> 15) | (s6 << 6));
 802ec58:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 802ec5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ec60:	f04f 0200 	mov.w	r2, #0
 802ec64:	f04f 0300 	mov.w	r3, #0
 802ec68:	0bc2      	lsrs	r2, r0, #15
 802ec6a:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 802ec6e:	13cb      	asrs	r3, r1, #15
 802ec70:	b254      	sxtb	r4, r2
 802ec72:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802ec76:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ec7a:	f04f 0200 	mov.w	r2, #0
 802ec7e:	f04f 0300 	mov.w	r3, #0
 802ec82:	018b      	lsls	r3, r1, #6
 802ec84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 802ec88:	0182      	lsls	r2, r0, #6
 802ec8a:	b253      	sxtb	r3, r2
 802ec8c:	4323      	orrs	r3, r4
 802ec8e:	b25a      	sxtb	r2, r3
 802ec90:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802ec94:	681b      	ldr	r3, [r3, #0]
 802ec96:	330f      	adds	r3, #15
 802ec98:	b2d2      	uxtb	r2, r2
 802ec9a:	701a      	strb	r2, [r3, #0]
    s[16] = (unsigned char) (s6 >> 2);
 802ec9c:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802eca0:	e9d3 0100 	ldrd	r0, r1, [r3]
 802eca4:	f04f 0200 	mov.w	r2, #0
 802eca8:	f04f 0300 	mov.w	r3, #0
 802ecac:	0882      	lsrs	r2, r0, #2
 802ecae:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 802ecb2:	108b      	asrs	r3, r1, #2
 802ecb4:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ecb8:	6809      	ldr	r1, [r1, #0]
 802ecba:	3110      	adds	r1, #16
 802ecbc:	b2d3      	uxtb	r3, r2
 802ecbe:	700b      	strb	r3, [r1, #0]
    s[17] = (unsigned char) (s6 >> 10);
 802ecc0:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802ecc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ecc8:	f04f 0200 	mov.w	r2, #0
 802eccc:	f04f 0300 	mov.w	r3, #0
 802ecd0:	0a82      	lsrs	r2, r0, #10
 802ecd2:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 802ecd6:	128b      	asrs	r3, r1, #10
 802ecd8:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ecdc:	6809      	ldr	r1, [r1, #0]
 802ecde:	3111      	adds	r1, #17
 802ece0:	b2d3      	uxtb	r3, r2
 802ece2:	700b      	strb	r3, [r1, #0]
    s[18] = (unsigned char) ((s6 >> 18) | (s7 << 3));
 802ece4:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 802ece8:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ecec:	f04f 0200 	mov.w	r2, #0
 802ecf0:	f04f 0300 	mov.w	r3, #0
 802ecf4:	0c82      	lsrs	r2, r0, #18
 802ecf6:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 802ecfa:	148b      	asrs	r3, r1, #18
 802ecfc:	b254      	sxtb	r4, r2
 802ecfe:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802ed02:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ed06:	f04f 0200 	mov.w	r2, #0
 802ed0a:	f04f 0300 	mov.w	r3, #0
 802ed0e:	00cb      	lsls	r3, r1, #3
 802ed10:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 802ed14:	00c2      	lsls	r2, r0, #3
 802ed16:	b253      	sxtb	r3, r2
 802ed18:	4323      	orrs	r3, r4
 802ed1a:	b25a      	sxtb	r2, r3
 802ed1c:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802ed20:	681b      	ldr	r3, [r3, #0]
 802ed22:	3312      	adds	r3, #18
 802ed24:	b2d2      	uxtb	r2, r2
 802ed26:	701a      	strb	r2, [r3, #0]
    s[19] = (unsigned char) (s7 >> 5);
 802ed28:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802ed2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ed30:	f04f 0200 	mov.w	r2, #0
 802ed34:	f04f 0300 	mov.w	r3, #0
 802ed38:	0942      	lsrs	r2, r0, #5
 802ed3a:	ea42 62c1 	orr.w	r2, r2, r1, lsl #27
 802ed3e:	114b      	asrs	r3, r1, #5
 802ed40:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ed44:	6809      	ldr	r1, [r1, #0]
 802ed46:	3113      	adds	r1, #19
 802ed48:	b2d3      	uxtb	r3, r2
 802ed4a:	700b      	strb	r3, [r1, #0]
    s[20] = (unsigned char) (s7 >> 13);
 802ed4c:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 802ed50:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ed54:	f04f 0200 	mov.w	r2, #0
 802ed58:	f04f 0300 	mov.w	r3, #0
 802ed5c:	0b42      	lsrs	r2, r0, #13
 802ed5e:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 802ed62:	134b      	asrs	r3, r1, #13
 802ed64:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ed68:	6809      	ldr	r1, [r1, #0]
 802ed6a:	3114      	adds	r1, #20
 802ed6c:	b2d3      	uxtb	r3, r2
 802ed6e:	700b      	strb	r3, [r1, #0]
    s[21] = (unsigned char) (s8 >> 0);
 802ed70:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802ed74:	681b      	ldr	r3, [r3, #0]
 802ed76:	3315      	adds	r3, #21
 802ed78:	f897 27e8 	ldrb.w	r2, [r7, #2024]	; 0x7e8
 802ed7c:	701a      	strb	r2, [r3, #0]
    s[22] = (unsigned char) (s8 >> 8);
 802ed7e:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802ed82:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ed86:	f04f 0200 	mov.w	r2, #0
 802ed8a:	f04f 0300 	mov.w	r3, #0
 802ed8e:	0a02      	lsrs	r2, r0, #8
 802ed90:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 802ed94:	120b      	asrs	r3, r1, #8
 802ed96:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ed9a:	6809      	ldr	r1, [r1, #0]
 802ed9c:	3116      	adds	r1, #22
 802ed9e:	b2d3      	uxtb	r3, r2
 802eda0:	700b      	strb	r3, [r1, #0]
    s[23] = (unsigned char) ((s8 >> 16) | (s9 << 5));
 802eda2:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 802eda6:	e9d3 0100 	ldrd	r0, r1, [r3]
 802edaa:	f04f 0200 	mov.w	r2, #0
 802edae:	f04f 0300 	mov.w	r3, #0
 802edb2:	0c02      	lsrs	r2, r0, #16
 802edb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 802edb8:	140b      	asrs	r3, r1, #16
 802edba:	b254      	sxtb	r4, r2
 802edbc:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802edc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 802edc4:	f04f 0200 	mov.w	r2, #0
 802edc8:	f04f 0300 	mov.w	r3, #0
 802edcc:	014b      	lsls	r3, r1, #5
 802edce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 802edd2:	0142      	lsls	r2, r0, #5
 802edd4:	b253      	sxtb	r3, r2
 802edd6:	4323      	orrs	r3, r4
 802edd8:	b25a      	sxtb	r2, r3
 802edda:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802edde:	681b      	ldr	r3, [r3, #0]
 802ede0:	3317      	adds	r3, #23
 802ede2:	b2d2      	uxtb	r2, r2
 802ede4:	701a      	strb	r2, [r3, #0]
    s[24] = (unsigned char) (s9 >> 3);
 802ede6:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802edea:	e9d3 0100 	ldrd	r0, r1, [r3]
 802edee:	f04f 0200 	mov.w	r2, #0
 802edf2:	f04f 0300 	mov.w	r3, #0
 802edf6:	08c2      	lsrs	r2, r0, #3
 802edf8:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
 802edfc:	10cb      	asrs	r3, r1, #3
 802edfe:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ee02:	6809      	ldr	r1, [r1, #0]
 802ee04:	3118      	adds	r1, #24
 802ee06:	b2d3      	uxtb	r3, r2
 802ee08:	700b      	strb	r3, [r1, #0]
    s[25] = (unsigned char) (s9 >> 11);
 802ee0a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802ee0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ee12:	f04f 0200 	mov.w	r2, #0
 802ee16:	f04f 0300 	mov.w	r3, #0
 802ee1a:	0ac2      	lsrs	r2, r0, #11
 802ee1c:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 802ee20:	12cb      	asrs	r3, r1, #11
 802ee22:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ee26:	6809      	ldr	r1, [r1, #0]
 802ee28:	3119      	adds	r1, #25
 802ee2a:	b2d3      	uxtb	r3, r2
 802ee2c:	700b      	strb	r3, [r1, #0]
    s[26] = (unsigned char) ((s9 >> 19) | (s10 << 2));
 802ee2e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 802ee32:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ee36:	f04f 0200 	mov.w	r2, #0
 802ee3a:	f04f 0300 	mov.w	r3, #0
 802ee3e:	0cc2      	lsrs	r2, r0, #19
 802ee40:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 802ee44:	14cb      	asrs	r3, r1, #19
 802ee46:	b254      	sxtb	r4, r2
 802ee48:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802ee4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ee50:	f04f 0200 	mov.w	r2, #0
 802ee54:	f04f 0300 	mov.w	r3, #0
 802ee58:	008b      	lsls	r3, r1, #2
 802ee5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 802ee5e:	0082      	lsls	r2, r0, #2
 802ee60:	b253      	sxtb	r3, r2
 802ee62:	4323      	orrs	r3, r4
 802ee64:	b25a      	sxtb	r2, r3
 802ee66:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802ee6a:	681b      	ldr	r3, [r3, #0]
 802ee6c:	331a      	adds	r3, #26
 802ee6e:	b2d2      	uxtb	r2, r2
 802ee70:	701a      	strb	r2, [r3, #0]
    s[27] = (unsigned char) (s10 >> 6);
 802ee72:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802ee76:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ee7a:	f04f 0200 	mov.w	r2, #0
 802ee7e:	f04f 0300 	mov.w	r3, #0
 802ee82:	0982      	lsrs	r2, r0, #6
 802ee84:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 802ee88:	118b      	asrs	r3, r1, #6
 802ee8a:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ee8e:	6809      	ldr	r1, [r1, #0]
 802ee90:	311b      	adds	r1, #27
 802ee92:	b2d3      	uxtb	r3, r2
 802ee94:	700b      	strb	r3, [r1, #0]
    s[28] = (unsigned char) ((s10 >> 14) | (s11 << 7));
 802ee96:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 802ee9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ee9e:	f04f 0200 	mov.w	r2, #0
 802eea2:	f04f 0300 	mov.w	r3, #0
 802eea6:	0b82      	lsrs	r2, r0, #14
 802eea8:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 802eeac:	138b      	asrs	r3, r1, #14
 802eeae:	b254      	sxtb	r4, r2
 802eeb0:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802eeb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 802eeb8:	f04f 0200 	mov.w	r2, #0
 802eebc:	f04f 0300 	mov.w	r3, #0
 802eec0:	01cb      	lsls	r3, r1, #7
 802eec2:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
 802eec6:	01c2      	lsls	r2, r0, #7
 802eec8:	b253      	sxtb	r3, r2
 802eeca:	4323      	orrs	r3, r4
 802eecc:	b25a      	sxtb	r2, r3
 802eece:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 802eed2:	681b      	ldr	r3, [r3, #0]
 802eed4:	331c      	adds	r3, #28
 802eed6:	b2d2      	uxtb	r2, r2
 802eed8:	701a      	strb	r2, [r3, #0]
    s[29] = (unsigned char) (s11 >> 1);
 802eeda:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802eede:	e9d3 0100 	ldrd	r0, r1, [r3]
 802eee2:	f04f 0200 	mov.w	r2, #0
 802eee6:	f04f 0300 	mov.w	r3, #0
 802eeea:	0842      	lsrs	r2, r0, #1
 802eeec:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 802eef0:	104b      	asrs	r3, r1, #1
 802eef2:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802eef6:	6809      	ldr	r1, [r1, #0]
 802eef8:	311d      	adds	r1, #29
 802eefa:	b2d3      	uxtb	r3, r2
 802eefc:	700b      	strb	r3, [r1, #0]
    s[30] = (unsigned char) (s11 >> 9);
 802eefe:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802ef02:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ef06:	f04f 0200 	mov.w	r2, #0
 802ef0a:	f04f 0300 	mov.w	r3, #0
 802ef0e:	0a42      	lsrs	r2, r0, #9
 802ef10:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 802ef14:	124b      	asrs	r3, r1, #9
 802ef16:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ef1a:	6809      	ldr	r1, [r1, #0]
 802ef1c:	311e      	adds	r1, #30
 802ef1e:	b2d3      	uxtb	r3, r2
 802ef20:	700b      	strb	r3, [r1, #0]
    s[31] = (unsigned char) (s11 >> 17);
 802ef22:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 802ef26:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ef2a:	f04f 0200 	mov.w	r2, #0
 802ef2e:	f04f 0300 	mov.w	r3, #0
 802ef32:	0c42      	lsrs	r2, r0, #17
 802ef34:	ea42 32c1 	orr.w	r2, r2, r1, lsl #15
 802ef38:	144b      	asrs	r3, r1, #17
 802ef3a:	f207 61e4 	addw	r1, r7, #1764	; 0x6e4
 802ef3e:	6809      	ldr	r1, [r1, #0]
 802ef40:	311f      	adds	r1, #31
 802ef42:	b2d3      	uxtb	r3, r2
 802ef44:	700b      	strb	r3, [r1, #0]
}
 802ef46:	bf00      	nop
 802ef48:	f507 6703 	add.w	r7, r7, #2096	; 0x830
 802ef4c:	46bd      	mov	sp, r7
 802ef4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802ef52:	bf00      	nop

0802ef54 <sha3_keccakf>:
#include "sha3.h"

// update the state with given number of rounds

void sha3_keccakf(uint64_t st[25])
{
 802ef54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802ef58:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 802ef5c:	af00      	add	r7, sp, #0
 802ef5e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802ef62:	6018      	str	r0, [r3, #0]
    // constants
    const uint64_t keccakf_rndc[24] = {
 802ef64:	4bc5      	ldr	r3, [pc, #788]	; (802f27c <sha3_keccakf+0x328>)
 802ef66:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 802ef6a:	4619      	mov	r1, r3
 802ef6c:	23c0      	movs	r3, #192	; 0xc0
 802ef6e:	461a      	mov	r2, r3
 802ef70:	f00a fab0 	bl	80394d4 <memcpy>
        0x000000008000808b, 0x800000000000008b, 0x8000000000008089,
        0x8000000000008003, 0x8000000000008002, 0x8000000000000080,
        0x000000000000800a, 0x800000008000000a, 0x8000000080008081,
        0x8000000000008080, 0x0000000080000001, 0x8000000080008008
    };
    const int keccakf_rotc[24] = {
 802ef74:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 802ef78:	4ac1      	ldr	r2, [pc, #772]	; (802f280 <sha3_keccakf+0x32c>)
 802ef7a:	4618      	mov	r0, r3
 802ef7c:	4611      	mov	r1, r2
 802ef7e:	2360      	movs	r3, #96	; 0x60
 802ef80:	461a      	mov	r2, r3
 802ef82:	f00a faa7 	bl	80394d4 <memcpy>
        1,  3,  6,  10, 15, 21, 28, 36, 45, 55, 2,  14,
        27, 41, 56, 8,  25, 43, 62, 18, 39, 61, 20, 44
    };
    const int keccakf_piln[24] = {
 802ef86:	f107 0390 	add.w	r3, r7, #144	; 0x90
 802ef8a:	4abe      	ldr	r2, [pc, #760]	; (802f284 <sha3_keccakf+0x330>)
 802ef8c:	4618      	mov	r0, r3
 802ef8e:	4611      	mov	r1, r2
 802ef90:	2360      	movs	r3, #96	; 0x60
 802ef92:	461a      	mov	r2, r3
 802ef94:	f00a fa9e 	bl	80394d4 <memcpy>
            (((uint64_t) v[6]) << 48) | (((uint64_t) v[7]) << 56);
    }
#endif

    // actual iteration
    for (r = 0; r < KECCAKF_ROUNDS; r++) {
 802ef98:	2300      	movs	r3, #0
 802ef9a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 802ef9e:	e1f9      	b.n	802f394 <sha3_keccakf+0x440>

        // Theta
        for (i = 0; i < 5; i++)
 802efa0:	2300      	movs	r3, #0
 802efa2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802efa6:	e05c      	b.n	802f062 <sha3_keccakf+0x10e>
            bc[i] = st[i] ^ st[i + 5] ^ st[i + 10] ^ st[i + 15] ^ st[i + 20];
 802efa8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802efac:	00da      	lsls	r2, r3, #3
 802efae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802efb2:	681b      	ldr	r3, [r3, #0]
 802efb4:	4413      	add	r3, r2
 802efb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 802efba:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802efbe:	3305      	adds	r3, #5
 802efc0:	00da      	lsls	r2, r3, #3
 802efc2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802efc6:	681b      	ldr	r3, [r3, #0]
 802efc8:	4413      	add	r3, r2
 802efca:	e9d3 2300 	ldrd	r2, r3, [r3]
 802efce:	ea80 0402 	eor.w	r4, r0, r2
 802efd2:	653c      	str	r4, [r7, #80]	; 0x50
 802efd4:	404b      	eors	r3, r1
 802efd6:	657b      	str	r3, [r7, #84]	; 0x54
 802efd8:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802efdc:	330a      	adds	r3, #10
 802efde:	00da      	lsls	r2, r3, #3
 802efe0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802efe4:	681b      	ldr	r3, [r3, #0]
 802efe6:	4413      	add	r3, r2
 802efe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802efec:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 802eff0:	4621      	mov	r1, r4
 802eff2:	4051      	eors	r1, r2
 802eff4:	64b9      	str	r1, [r7, #72]	; 0x48
 802eff6:	4629      	mov	r1, r5
 802eff8:	404b      	eors	r3, r1
 802effa:	64fb      	str	r3, [r7, #76]	; 0x4c
 802effc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f000:	330f      	adds	r3, #15
 802f002:	00da      	lsls	r2, r3, #3
 802f004:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802f008:	681b      	ldr	r3, [r3, #0]
 802f00a:	4413      	add	r3, r2
 802f00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f010:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 802f014:	4621      	mov	r1, r4
 802f016:	4051      	eors	r1, r2
 802f018:	6439      	str	r1, [r7, #64]	; 0x40
 802f01a:	4629      	mov	r1, r5
 802f01c:	404b      	eors	r3, r1
 802f01e:	647b      	str	r3, [r7, #68]	; 0x44
 802f020:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f024:	3314      	adds	r3, #20
 802f026:	00da      	lsls	r2, r3, #3
 802f028:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802f02c:	681b      	ldr	r3, [r3, #0]
 802f02e:	4413      	add	r3, r2
 802f030:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f034:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 802f038:	4621      	mov	r1, r4
 802f03a:	4051      	eors	r1, r2
 802f03c:	63b9      	str	r1, [r7, #56]	; 0x38
 802f03e:	4629      	mov	r1, r5
 802f040:	404b      	eors	r3, r1
 802f042:	63fb      	str	r3, [r7, #60]	; 0x3c
 802f044:	f107 0268 	add.w	r2, r7, #104	; 0x68
 802f048:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f04c:	00db      	lsls	r3, r3, #3
 802f04e:	4413      	add	r3, r2
 802f050:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 802f054:	e9c3 1200 	strd	r1, r2, [r3]
        for (i = 0; i < 5; i++)
 802f058:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f05c:	3301      	adds	r3, #1
 802f05e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802f062:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f066:	2b04      	cmp	r3, #4
 802f068:	dd9e      	ble.n	802efa8 <sha3_keccakf+0x54>

        for (i = 0; i < 5; i++) {
 802f06a:	2300      	movs	r3, #0
 802f06c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802f070:	e06c      	b.n	802f14c <sha3_keccakf+0x1f8>
            t = bc[(i + 4) % 5] ^ ROTL64(bc[(i + 1) % 5], 1);
 802f072:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f076:	1d19      	adds	r1, r3, #4
 802f078:	4b83      	ldr	r3, [pc, #524]	; (802f288 <sha3_keccakf+0x334>)
 802f07a:	fb83 2301 	smull	r2, r3, r3, r1
 802f07e:	105a      	asrs	r2, r3, #1
 802f080:	17cb      	asrs	r3, r1, #31
 802f082:	1ad2      	subs	r2, r2, r3
 802f084:	4613      	mov	r3, r2
 802f086:	009b      	lsls	r3, r3, #2
 802f088:	4413      	add	r3, r2
 802f08a:	1aca      	subs	r2, r1, r3
 802f08c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 802f090:	00d3      	lsls	r3, r2, #3
 802f092:	440b      	add	r3, r1
 802f094:	e9d3 4500 	ldrd	r4, r5, [r3]
 802f098:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f09c:	1c59      	adds	r1, r3, #1
 802f09e:	4b7a      	ldr	r3, [pc, #488]	; (802f288 <sha3_keccakf+0x334>)
 802f0a0:	fb83 2301 	smull	r2, r3, r3, r1
 802f0a4:	105a      	asrs	r2, r3, #1
 802f0a6:	17cb      	asrs	r3, r1, #31
 802f0a8:	1ad2      	subs	r2, r2, r3
 802f0aa:	4613      	mov	r3, r2
 802f0ac:	009b      	lsls	r3, r3, #2
 802f0ae:	4413      	add	r3, r2
 802f0b0:	1aca      	subs	r2, r1, r3
 802f0b2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 802f0b6:	00d3      	lsls	r3, r2, #3
 802f0b8:	440b      	add	r3, r1
 802f0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f0be:	0fd0      	lsrs	r0, r2, #31
 802f0c0:	0059      	lsls	r1, r3, #1
 802f0c2:	4301      	orrs	r1, r0
 802f0c4:	6379      	str	r1, [r7, #52]	; 0x34
 802f0c6:	0fd9      	lsrs	r1, r3, #31
 802f0c8:	0053      	lsls	r3, r2, #1
 802f0ca:	430b      	orrs	r3, r1
 802f0cc:	633b      	str	r3, [r7, #48]	; 0x30
 802f0ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 802f0d2:	460b      	mov	r3, r1
 802f0d4:	4063      	eors	r3, r4
 802f0d6:	60bb      	str	r3, [r7, #8]
 802f0d8:	4613      	mov	r3, r2
 802f0da:	406b      	eors	r3, r5
 802f0dc:	60fb      	str	r3, [r7, #12]
 802f0de:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 802f0e2:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
            for (j = 0; j < 25; j += 5)
 802f0e6:	2300      	movs	r3, #0
 802f0e8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 802f0ec:	e025      	b.n	802f13a <sha3_keccakf+0x1e6>
                st[j + i] ^= t;
 802f0ee:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 802f0f2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f0f6:	4413      	add	r3, r2
 802f0f8:	00da      	lsls	r2, r3, #3
 802f0fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802f0fe:	681b      	ldr	r3, [r3, #0]
 802f100:	4413      	add	r3, r2
 802f102:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f106:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 802f10a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f10e:	4413      	add	r3, r2
 802f110:	00da      	lsls	r2, r3, #3
 802f112:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802f116:	681b      	ldr	r3, [r3, #0]
 802f118:	189c      	adds	r4, r3, r2
 802f11a:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 802f11e:	ea80 0502 	eor.w	r5, r0, r2
 802f122:	62bd      	str	r5, [r7, #40]	; 0x28
 802f124:	404b      	eors	r3, r1
 802f126:	62fb      	str	r3, [r7, #44]	; 0x2c
 802f128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802f12c:	e9c4 2300 	strd	r2, r3, [r4]
            for (j = 0; j < 25; j += 5)
 802f130:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 802f134:	3305      	adds	r3, #5
 802f136:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 802f13a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 802f13e:	2b18      	cmp	r3, #24
 802f140:	ddd5      	ble.n	802f0ee <sha3_keccakf+0x19a>
        for (i = 0; i < 5; i++) {
 802f142:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f146:	3301      	adds	r3, #1
 802f148:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802f14c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f150:	2b04      	cmp	r3, #4
 802f152:	dd8e      	ble.n	802f072 <sha3_keccakf+0x11e>
        }

        // Rho Pi
        t = st[1];
 802f154:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802f158:	681b      	ldr	r3, [r3, #0]
 802f15a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802f15e:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
        for (i = 0; i < 24; i++) {
 802f162:	2300      	movs	r3, #0
 802f164:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802f168:	e05b      	b.n	802f222 <sha3_keccakf+0x2ce>
            j = keccakf_piln[i];
 802f16a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 802f16e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802f176:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
            bc[0] = st[j];
 802f17a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 802f17e:	00da      	lsls	r2, r3, #3
 802f180:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802f184:	681b      	ldr	r3, [r3, #0]
 802f186:	4413      	add	r3, r2
 802f188:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f18c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802f190:	e9c3 0100 	strd	r0, r1, [r3]
            st[j] = ROTL64(t, keccakf_rotc[i]);
 802f194:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 802f198:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f19c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802f1a0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 802f1a4:	00da      	lsls	r2, r3, #3
 802f1a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802f1aa:	681b      	ldr	r3, [r3, #0]
 802f1ac:	189d      	adds	r5, r3, r2
 802f1ae:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 802f1b2:	f1a4 0120 	sub.w	r1, r4, #32
 802f1b6:	f1c4 0020 	rsb	r0, r4, #32
 802f1ba:	fa03 fb04 	lsl.w	fp, r3, r4
 802f1be:	fa02 f101 	lsl.w	r1, r2, r1
 802f1c2:	ea4b 0b01 	orr.w	fp, fp, r1
 802f1c6:	fa22 f000 	lsr.w	r0, r2, r0
 802f1ca:	ea4b 0b00 	orr.w	fp, fp, r0
 802f1ce:	fa02 fa04 	lsl.w	sl, r2, r4
 802f1d2:	4264      	negs	r4, r4
 802f1d4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 802f1d8:	f1c4 0120 	rsb	r1, r4, #32
 802f1dc:	f1a4 0020 	sub.w	r0, r4, #32
 802f1e0:	fa22 f804 	lsr.w	r8, r2, r4
 802f1e4:	fa03 f101 	lsl.w	r1, r3, r1
 802f1e8:	ea48 0801 	orr.w	r8, r8, r1
 802f1ec:	fa23 f000 	lsr.w	r0, r3, r0
 802f1f0:	ea48 0800 	orr.w	r8, r8, r0
 802f1f4:	fa23 f904 	lsr.w	r9, r3, r4
 802f1f8:	ea4a 0308 	orr.w	r3, sl, r8
 802f1fc:	603b      	str	r3, [r7, #0]
 802f1fe:	ea4b 0309 	orr.w	r3, fp, r9
 802f202:	607b      	str	r3, [r7, #4]
 802f204:	e9d7 8900 	ldrd	r8, r9, [r7]
 802f208:	e9c5 8900 	strd	r8, r9, [r5]
            t = bc[0];
 802f20c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 802f210:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f214:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
        for (i = 0; i < 24; i++) {
 802f218:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f21c:	3301      	adds	r3, #1
 802f21e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802f222:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f226:	2b17      	cmp	r3, #23
 802f228:	dd9f      	ble.n	802f16a <sha3_keccakf+0x216>
        }

        //  Chi
        for (j = 0; j < 25; j += 5) {
 802f22a:	2300      	movs	r3, #0
 802f22c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 802f230:	e08c      	b.n	802f34c <sha3_keccakf+0x3f8>
            for (i = 0; i < 5; i++)
 802f232:	2300      	movs	r3, #0
 802f234:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802f238:	e018      	b.n	802f26c <sha3_keccakf+0x318>
                bc[i] = st[j + i];
 802f23a:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 802f23e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f242:	4413      	add	r3, r2
 802f244:	00da      	lsls	r2, r3, #3
 802f246:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802f24a:	681b      	ldr	r3, [r3, #0]
 802f24c:	4413      	add	r3, r2
 802f24e:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f252:	f107 0268 	add.w	r2, r7, #104	; 0x68
 802f256:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f25a:	00db      	lsls	r3, r3, #3
 802f25c:	4413      	add	r3, r2
 802f25e:	e9c3 0100 	strd	r0, r1, [r3]
            for (i = 0; i < 5; i++)
 802f262:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f266:	3301      	adds	r3, #1
 802f268:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802f26c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f270:	2b04      	cmp	r3, #4
 802f272:	dde2      	ble.n	802f23a <sha3_keccakf+0x2e6>
            for (i = 0; i < 5; i++)
 802f274:	2300      	movs	r3, #0
 802f276:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802f27a:	e05e      	b.n	802f33a <sha3_keccakf+0x3e6>
 802f27c:	0803db50 	.word	0x0803db50
 802f280:	0803dc10 	.word	0x0803dc10
 802f284:	0803dc70 	.word	0x0803dc70
 802f288:	66666667 	.word	0x66666667
                st[j + i] ^= (~bc[(i + 1) % 5]) & bc[(i + 2) % 5];
 802f28c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 802f290:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f294:	4413      	add	r3, r2
 802f296:	00da      	lsls	r2, r3, #3
 802f298:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802f29c:	681b      	ldr	r3, [r3, #0]
 802f29e:	4413      	add	r3, r2
 802f2a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 802f2a4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f2a8:	1c59      	adds	r1, r3, #1
 802f2aa:	4b40      	ldr	r3, [pc, #256]	; (802f3ac <sha3_keccakf+0x458>)
 802f2ac:	fb83 2301 	smull	r2, r3, r3, r1
 802f2b0:	105a      	asrs	r2, r3, #1
 802f2b2:	17cb      	asrs	r3, r1, #31
 802f2b4:	1ad2      	subs	r2, r2, r3
 802f2b6:	4613      	mov	r3, r2
 802f2b8:	009b      	lsls	r3, r3, #2
 802f2ba:	4413      	add	r3, r2
 802f2bc:	1aca      	subs	r2, r1, r3
 802f2be:	f107 0168 	add.w	r1, r7, #104	; 0x68
 802f2c2:	00d3      	lsls	r3, r2, #3
 802f2c4:	440b      	add	r3, r1
 802f2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f2ca:	43d1      	mvns	r1, r2
 802f2cc:	65b9      	str	r1, [r7, #88]	; 0x58
 802f2ce:	43db      	mvns	r3, r3
 802f2d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 802f2d2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f2d6:	1c99      	adds	r1, r3, #2
 802f2d8:	4b34      	ldr	r3, [pc, #208]	; (802f3ac <sha3_keccakf+0x458>)
 802f2da:	fb83 2301 	smull	r2, r3, r3, r1
 802f2de:	105a      	asrs	r2, r3, #1
 802f2e0:	17cb      	asrs	r3, r1, #31
 802f2e2:	1ad2      	subs	r2, r2, r3
 802f2e4:	4613      	mov	r3, r2
 802f2e6:	009b      	lsls	r3, r3, #2
 802f2e8:	4413      	add	r3, r2
 802f2ea:	1aca      	subs	r2, r1, r3
 802f2ec:	f107 0168 	add.w	r1, r7, #104	; 0x68
 802f2f0:	00d3      	lsls	r3, r2, #3
 802f2f2:	440b      	add	r3, r1
 802f2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f2f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 802f2fa:	4011      	ands	r1, r2
 802f2fc:	6239      	str	r1, [r7, #32]
 802f2fe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 802f300:	400b      	ands	r3, r1
 802f302:	627b      	str	r3, [r7, #36]	; 0x24
 802f304:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 802f308:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f30c:	4413      	add	r3, r2
 802f30e:	00da      	lsls	r2, r3, #3
 802f310:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802f314:	681b      	ldr	r3, [r3, #0]
 802f316:	4413      	add	r3, r2
 802f318:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802f31c:	4602      	mov	r2, r0
 802f31e:	4062      	eors	r2, r4
 802f320:	61ba      	str	r2, [r7, #24]
 802f322:	460a      	mov	r2, r1
 802f324:	406a      	eors	r2, r5
 802f326:	61fa      	str	r2, [r7, #28]
 802f328:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 802f32c:	e9c3 1200 	strd	r1, r2, [r3]
            for (i = 0; i < 5; i++)
 802f330:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f334:	3301      	adds	r3, #1
 802f336:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 802f33a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 802f33e:	2b04      	cmp	r3, #4
 802f340:	dda4      	ble.n	802f28c <sha3_keccakf+0x338>
        for (j = 0; j < 25; j += 5) {
 802f342:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 802f346:	3305      	adds	r3, #5
 802f348:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 802f34c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 802f350:	2b18      	cmp	r3, #24
 802f352:	f77f af6e 	ble.w	802f232 <sha3_keccakf+0x2de>
        }

        //  Iota
        st[0] ^= keccakf_rndc[r];
 802f356:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802f35a:	681b      	ldr	r3, [r3, #0]
 802f35c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f360:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 802f364:	00db      	lsls	r3, r3, #3
 802f366:	f507 720a 	add.w	r2, r7, #552	; 0x228
 802f36a:	4413      	add	r3, r2
 802f36c:	3bd8      	subs	r3, #216	; 0xd8
 802f36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f372:	ea80 0402 	eor.w	r4, r0, r2
 802f376:	613c      	str	r4, [r7, #16]
 802f378:	404b      	eors	r3, r1
 802f37a:	617b      	str	r3, [r7, #20]
 802f37c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802f380:	681b      	ldr	r3, [r3, #0]
 802f382:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 802f386:	e9c3 1200 	strd	r1, r2, [r3]
    for (r = 0; r < KECCAKF_ROUNDS; r++) {
 802f38a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 802f38e:	3301      	adds	r3, #1
 802f390:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 802f394:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 802f398:	2b17      	cmp	r3, #23
 802f39a:	f77f ae01 	ble.w	802efa0 <sha3_keccakf+0x4c>
        v[5] = (t >> 40) & 0xFF;
        v[6] = (t >> 48) & 0xFF;
        v[7] = (t >> 56) & 0xFF;
    }
#endif
}
 802f39e:	bf00      	nop
 802f3a0:	bf00      	nop
 802f3a2:	f507 770a 	add.w	r7, r7, #552	; 0x228
 802f3a6:	46bd      	mov	sp, r7
 802f3a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802f3ac:	66666667 	.word	0x66666667

0802f3b0 <sha3_init>:

// Initialize the context for SHA3

int sha3_init(sha3_ctx_t *c, int mdlen)
{
 802f3b0:	b480      	push	{r7}
 802f3b2:	b085      	sub	sp, #20
 802f3b4:	af00      	add	r7, sp, #0
 802f3b6:	6078      	str	r0, [r7, #4]
 802f3b8:	6039      	str	r1, [r7, #0]
    int i;

    for (i = 0; i < 25; i++)
 802f3ba:	2300      	movs	r3, #0
 802f3bc:	60fb      	str	r3, [r7, #12]
 802f3be:	e00c      	b.n	802f3da <sha3_init+0x2a>
        c->st.q[i] = 0;
 802f3c0:	687a      	ldr	r2, [r7, #4]
 802f3c2:	68fb      	ldr	r3, [r7, #12]
 802f3c4:	00db      	lsls	r3, r3, #3
 802f3c6:	18d1      	adds	r1, r2, r3
 802f3c8:	f04f 0200 	mov.w	r2, #0
 802f3cc:	f04f 0300 	mov.w	r3, #0
 802f3d0:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 25; i++)
 802f3d4:	68fb      	ldr	r3, [r7, #12]
 802f3d6:	3301      	adds	r3, #1
 802f3d8:	60fb      	str	r3, [r7, #12]
 802f3da:	68fb      	ldr	r3, [r7, #12]
 802f3dc:	2b18      	cmp	r3, #24
 802f3de:	ddef      	ble.n	802f3c0 <sha3_init+0x10>
    c->mdlen = mdlen;
 802f3e0:	687b      	ldr	r3, [r7, #4]
 802f3e2:	683a      	ldr	r2, [r7, #0]
 802f3e4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    c->rsiz = 200 - 2 * mdlen;
 802f3e8:	683b      	ldr	r3, [r7, #0]
 802f3ea:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 802f3ee:	005a      	lsls	r2, r3, #1
 802f3f0:	687b      	ldr	r3, [r7, #4]
 802f3f2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    c->pt = 0;
 802f3f6:	687b      	ldr	r3, [r7, #4]
 802f3f8:	2200      	movs	r2, #0
 802f3fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    return 1;
 802f3fe:	2301      	movs	r3, #1
}
 802f400:	4618      	mov	r0, r3
 802f402:	3714      	adds	r7, #20
 802f404:	46bd      	mov	sp, r7
 802f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 802f40a:	4770      	bx	lr

0802f40c <sha3_update>:

// update state with more data

int sha3_update(sha3_ctx_t *c, const void *data, size_t len)
{
 802f40c:	b580      	push	{r7, lr}
 802f40e:	b086      	sub	sp, #24
 802f410:	af00      	add	r7, sp, #0
 802f412:	60f8      	str	r0, [r7, #12]
 802f414:	60b9      	str	r1, [r7, #8]
 802f416:	607a      	str	r2, [r7, #4]
    size_t i;
    int j;

    j = c->pt;
 802f418:	68fb      	ldr	r3, [r7, #12]
 802f41a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 802f41e:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len; i++) {
 802f420:	2300      	movs	r3, #0
 802f422:	617b      	str	r3, [r7, #20]
 802f424:	e01b      	b.n	802f45e <sha3_update+0x52>
        c->st.b[j++] ^= ((const uint8_t *) data)[i];
 802f426:	693b      	ldr	r3, [r7, #16]
 802f428:	1c5a      	adds	r2, r3, #1
 802f42a:	613a      	str	r2, [r7, #16]
 802f42c:	68fa      	ldr	r2, [r7, #12]
 802f42e:	5cd1      	ldrb	r1, [r2, r3]
 802f430:	68b8      	ldr	r0, [r7, #8]
 802f432:	697a      	ldr	r2, [r7, #20]
 802f434:	4402      	add	r2, r0
 802f436:	7812      	ldrb	r2, [r2, #0]
 802f438:	404a      	eors	r2, r1
 802f43a:	b2d1      	uxtb	r1, r2
 802f43c:	68fa      	ldr	r2, [r7, #12]
 802f43e:	54d1      	strb	r1, [r2, r3]
        if (j >= c->rsiz) {
 802f440:	68fb      	ldr	r3, [r7, #12]
 802f442:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 802f446:	693a      	ldr	r2, [r7, #16]
 802f448:	429a      	cmp	r2, r3
 802f44a:	db05      	blt.n	802f458 <sha3_update+0x4c>
            sha3_keccakf(c->st.q);
 802f44c:	68fb      	ldr	r3, [r7, #12]
 802f44e:	4618      	mov	r0, r3
 802f450:	f7ff fd80 	bl	802ef54 <sha3_keccakf>
            j = 0;
 802f454:	2300      	movs	r3, #0
 802f456:	613b      	str	r3, [r7, #16]
    for (i = 0; i < len; i++) {
 802f458:	697b      	ldr	r3, [r7, #20]
 802f45a:	3301      	adds	r3, #1
 802f45c:	617b      	str	r3, [r7, #20]
 802f45e:	697a      	ldr	r2, [r7, #20]
 802f460:	687b      	ldr	r3, [r7, #4]
 802f462:	429a      	cmp	r2, r3
 802f464:	d3df      	bcc.n	802f426 <sha3_update+0x1a>
        }
    }
    c->pt = j;
 802f466:	68fb      	ldr	r3, [r7, #12]
 802f468:	693a      	ldr	r2, [r7, #16]
 802f46a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

    return 1;
 802f46e:	2301      	movs	r3, #1
}
 802f470:	4618      	mov	r0, r3
 802f472:	3718      	adds	r7, #24
 802f474:	46bd      	mov	sp, r7
 802f476:	bd80      	pop	{r7, pc}

0802f478 <sha3_final>:

// finalize and output a hash

int sha3_final(void *md, sha3_ctx_t *c)
{
 802f478:	b580      	push	{r7, lr}
 802f47a:	b084      	sub	sp, #16
 802f47c:	af00      	add	r7, sp, #0
 802f47e:	6078      	str	r0, [r7, #4]
 802f480:	6039      	str	r1, [r7, #0]
    int i;

    c->st.b[c->pt] ^= 0x06;
 802f482:	683b      	ldr	r3, [r7, #0]
 802f484:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 802f488:	683a      	ldr	r2, [r7, #0]
 802f48a:	5cd2      	ldrb	r2, [r2, r3]
 802f48c:	683b      	ldr	r3, [r7, #0]
 802f48e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 802f492:	f082 0206 	eor.w	r2, r2, #6
 802f496:	b2d1      	uxtb	r1, r2
 802f498:	683a      	ldr	r2, [r7, #0]
 802f49a:	54d1      	strb	r1, [r2, r3]
    c->st.b[c->rsiz - 1] ^= 0x80;
 802f49c:	683b      	ldr	r3, [r7, #0]
 802f49e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 802f4a2:	3b01      	subs	r3, #1
 802f4a4:	683a      	ldr	r2, [r7, #0]
 802f4a6:	5cd3      	ldrb	r3, [r2, r3]
 802f4a8:	683a      	ldr	r2, [r7, #0]
 802f4aa:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 802f4ae:	3a01      	subs	r2, #1
 802f4b0:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 802f4b4:	43db      	mvns	r3, r3
 802f4b6:	b2d9      	uxtb	r1, r3
 802f4b8:	683b      	ldr	r3, [r7, #0]
 802f4ba:	5499      	strb	r1, [r3, r2]
    sha3_keccakf(c->st.q);
 802f4bc:	683b      	ldr	r3, [r7, #0]
 802f4be:	4618      	mov	r0, r3
 802f4c0:	f7ff fd48 	bl	802ef54 <sha3_keccakf>

    for (i = 0; i < c->mdlen; i++) {
 802f4c4:	2300      	movs	r3, #0
 802f4c6:	60fb      	str	r3, [r7, #12]
 802f4c8:	e00a      	b.n	802f4e0 <sha3_final+0x68>
        ((uint8_t *) md)[i] = c->st.b[i];
 802f4ca:	68fb      	ldr	r3, [r7, #12]
 802f4cc:	687a      	ldr	r2, [r7, #4]
 802f4ce:	4413      	add	r3, r2
 802f4d0:	6839      	ldr	r1, [r7, #0]
 802f4d2:	68fa      	ldr	r2, [r7, #12]
 802f4d4:	440a      	add	r2, r1
 802f4d6:	7812      	ldrb	r2, [r2, #0]
 802f4d8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < c->mdlen; i++) {
 802f4da:	68fb      	ldr	r3, [r7, #12]
 802f4dc:	3301      	adds	r3, #1
 802f4de:	60fb      	str	r3, [r7, #12]
 802f4e0:	683b      	ldr	r3, [r7, #0]
 802f4e2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 802f4e6:	68fa      	ldr	r2, [r7, #12]
 802f4e8:	429a      	cmp	r2, r3
 802f4ea:	dbee      	blt.n	802f4ca <sha3_final+0x52>
    }

    return 1;
 802f4ec:	2301      	movs	r3, #1
}
 802f4ee:	4618      	mov	r0, r3
 802f4f0:	3710      	adds	r7, #16
 802f4f2:	46bd      	mov	sp, r7
 802f4f4:	bd80      	pop	{r7, pc}

0802f4f6 <sha3>:

// compute a SHA-3 hash (md) of given byte length from "in"

void *sha3(const void *in, size_t inlen, void *md, int mdlen)
{
 802f4f6:	b580      	push	{r7, lr}
 802f4f8:	b0ba      	sub	sp, #232	; 0xe8
 802f4fa:	af00      	add	r7, sp, #0
 802f4fc:	60f8      	str	r0, [r7, #12]
 802f4fe:	60b9      	str	r1, [r7, #8]
 802f500:	607a      	str	r2, [r7, #4]
 802f502:	603b      	str	r3, [r7, #0]
    sha3_ctx_t sha3;

    sha3_init(&sha3, mdlen);
 802f504:	f107 0310 	add.w	r3, r7, #16
 802f508:	6839      	ldr	r1, [r7, #0]
 802f50a:	4618      	mov	r0, r3
 802f50c:	f7ff ff50 	bl	802f3b0 <sha3_init>
    sha3_update(&sha3, in, inlen);
 802f510:	f107 0310 	add.w	r3, r7, #16
 802f514:	68ba      	ldr	r2, [r7, #8]
 802f516:	68f9      	ldr	r1, [r7, #12]
 802f518:	4618      	mov	r0, r3
 802f51a:	f7ff ff77 	bl	802f40c <sha3_update>
    sha3_final(md, &sha3);
 802f51e:	f107 0310 	add.w	r3, r7, #16
 802f522:	4619      	mov	r1, r3
 802f524:	6878      	ldr	r0, [r7, #4]
 802f526:	f7ff ffa7 	bl	802f478 <sha3_final>

    return md;
 802f52a:	687b      	ldr	r3, [r7, #4]
}
 802f52c:	4618      	mov	r0, r3
 802f52e:	37e8      	adds	r7, #232	; 0xe8
 802f530:	46bd      	mov	sp, r7
 802f532:	bd80      	pop	{r7, pc}

0802f534 <sha512_compress>:
   #define MIN(x, y) ( ((x)<(y))?(x):(y) )
#endif

/* compress 1024-bits */
static int sha512_compress(sha512_context *md, unsigned char *buf)
{
 802f534:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 802f538:	f5ad 6d17 	sub.w	sp, sp, #2416	; 0x970
 802f53c:	af00      	add	r7, sp, #0
 802f53e:	f207 6394 	addw	r3, r7, #1684	; 0x694
 802f542:	6018      	str	r0, [r3, #0]
 802f544:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 802f548:	6019      	str	r1, [r3, #0]
    uint64_t S[8], W[80], t0, t1;
    int i;

    /* copy state into S */
    for (i = 0; i < 8; i++) {
 802f54a:	2300      	movs	r3, #0
 802f54c:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 802f550:	e017      	b.n	802f582 <sha512_compress+0x4e>
        S[i] = md->state[i];
 802f552:	f207 6394 	addw	r3, r7, #1684	; 0x694
 802f556:	681a      	ldr	r2, [r3, #0]
 802f558:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f55c:	3301      	adds	r3, #1
 802f55e:	00db      	lsls	r3, r3, #3
 802f560:	4413      	add	r3, r2
 802f562:	e9d3 0100 	ldrd	r0, r1, [r3]
 802f566:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f56a:	00db      	lsls	r3, r3, #3
 802f56c:	f507 6217 	add.w	r2, r7, #2416	; 0x970
 802f570:	4413      	add	r3, r2
 802f572:	3b58      	subs	r3, #88	; 0x58
 802f574:	e9c3 0100 	strd	r0, r1, [r3]
    for (i = 0; i < 8; i++) {
 802f578:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f57c:	3301      	adds	r3, #1
 802f57e:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 802f582:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f586:	2b07      	cmp	r3, #7
 802f588:	dde3      	ble.n	802f552 <sha512_compress+0x1e>
    }

    /* copy the state into 1024-bits into W[0..15] */
    for (i = 0; i < 16; i++) {
 802f58a:	2300      	movs	r3, #0
 802f58c:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 802f590:	e0e6      	b.n	802f760 <sha512_compress+0x22c>
        LOAD64H(W[i], buf + (8*i));
 802f592:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f596:	00db      	lsls	r3, r3, #3
 802f598:	461a      	mov	r2, r3
 802f59a:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 802f59e:	681b      	ldr	r3, [r3, #0]
 802f5a0:	4413      	add	r3, r2
 802f5a2:	781b      	ldrb	r3, [r3, #0]
 802f5a4:	b2da      	uxtb	r2, r3
 802f5a6:	f04f 0300 	mov.w	r3, #0
 802f5aa:	f04f 0400 	mov.w	r4, #0
 802f5ae:	f04f 0500 	mov.w	r5, #0
 802f5b2:	0615      	lsls	r5, r2, #24
 802f5b4:	2400      	movs	r4, #0
 802f5b6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f5ba:	00db      	lsls	r3, r3, #3
 802f5bc:	1c5a      	adds	r2, r3, #1
 802f5be:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 802f5c2:	681b      	ldr	r3, [r3, #0]
 802f5c4:	4413      	add	r3, r2
 802f5c6:	781b      	ldrb	r3, [r3, #0]
 802f5c8:	b2da      	uxtb	r2, r3
 802f5ca:	f04f 0300 	mov.w	r3, #0
 802f5ce:	f04f 0000 	mov.w	r0, #0
 802f5d2:	f04f 0100 	mov.w	r1, #0
 802f5d6:	0411      	lsls	r1, r2, #16
 802f5d8:	2000      	movs	r0, #0
 802f5da:	ea44 0300 	orr.w	r3, r4, r0
 802f5de:	f8c7 3688 	str.w	r3, [r7, #1672]	; 0x688
 802f5e2:	ea45 0301 	orr.w	r3, r5, r1
 802f5e6:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 802f5ea:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f5ee:	00db      	lsls	r3, r3, #3
 802f5f0:	1c9a      	adds	r2, r3, #2
 802f5f2:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 802f5f6:	681b      	ldr	r3, [r3, #0]
 802f5f8:	4413      	add	r3, r2
 802f5fa:	781b      	ldrb	r3, [r3, #0]
 802f5fc:	b2da      	uxtb	r2, r3
 802f5fe:	f04f 0300 	mov.w	r3, #0
 802f602:	f04f 0000 	mov.w	r0, #0
 802f606:	f04f 0100 	mov.w	r1, #0
 802f60a:	0211      	lsls	r1, r2, #8
 802f60c:	2000      	movs	r0, #0
 802f60e:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 802f612:	e9d3 4500 	ldrd	r4, r5, [r3]
 802f616:	4623      	mov	r3, r4
 802f618:	4303      	orrs	r3, r0
 802f61a:	f8c7 3680 	str.w	r3, [r7, #1664]	; 0x680
 802f61e:	462b      	mov	r3, r5
 802f620:	430b      	orrs	r3, r1
 802f622:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 802f626:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f62a:	00db      	lsls	r3, r3, #3
 802f62c:	1cda      	adds	r2, r3, #3
 802f62e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 802f632:	681b      	ldr	r3, [r3, #0]
 802f634:	4413      	add	r3, r2
 802f636:	781b      	ldrb	r3, [r3, #0]
 802f638:	b2da      	uxtb	r2, r3
 802f63a:	f04f 0300 	mov.w	r3, #0
 802f63e:	f04f 0000 	mov.w	r0, #0
 802f642:	f04f 0100 	mov.w	r1, #0
 802f646:	0011      	movs	r1, r2
 802f648:	2000      	movs	r0, #0
 802f64a:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 802f64e:	e9d3 4500 	ldrd	r4, r5, [r3]
 802f652:	4623      	mov	r3, r4
 802f654:	4303      	orrs	r3, r0
 802f656:	f8c7 3678 	str.w	r3, [r7, #1656]	; 0x678
 802f65a:	462b      	mov	r3, r5
 802f65c:	430b      	orrs	r3, r1
 802f65e:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 802f662:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f666:	00db      	lsls	r3, r3, #3
 802f668:	1d1a      	adds	r2, r3, #4
 802f66a:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 802f66e:	681b      	ldr	r3, [r3, #0]
 802f670:	4413      	add	r3, r2
 802f672:	781b      	ldrb	r3, [r3, #0]
 802f674:	b2da      	uxtb	r2, r3
 802f676:	f04f 0300 	mov.w	r3, #0
 802f67a:	0a11      	lsrs	r1, r2, #8
 802f67c:	f8c7 1674 	str.w	r1, [r7, #1652]	; 0x674
 802f680:	0613      	lsls	r3, r2, #24
 802f682:	f8c7 3670 	str.w	r3, [r7, #1648]	; 0x670
 802f686:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 802f68a:	e9d3 4500 	ldrd	r4, r5, [r3]
 802f68e:	4623      	mov	r3, r4
 802f690:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 802f694:	e9d2 0100 	ldrd	r0, r1, [r2]
 802f698:	4602      	mov	r2, r0
 802f69a:	4313      	orrs	r3, r2
 802f69c:	f8c7 3668 	str.w	r3, [r7, #1640]	; 0x668
 802f6a0:	462b      	mov	r3, r5
 802f6a2:	460a      	mov	r2, r1
 802f6a4:	4313      	orrs	r3, r2
 802f6a6:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 802f6aa:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f6ae:	00db      	lsls	r3, r3, #3
 802f6b0:	1d5a      	adds	r2, r3, #5
 802f6b2:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 802f6b6:	681b      	ldr	r3, [r3, #0]
 802f6b8:	4413      	add	r3, r2
 802f6ba:	781b      	ldrb	r3, [r3, #0]
 802f6bc:	b2da      	uxtb	r2, r3
 802f6be:	f04f 0300 	mov.w	r3, #0
 802f6c2:	f04f 0000 	mov.w	r0, #0
 802f6c6:	f04f 0100 	mov.w	r1, #0
 802f6ca:	0419      	lsls	r1, r3, #16
 802f6cc:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 802f6d0:	0410      	lsls	r0, r2, #16
 802f6d2:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 802f6d6:	e9d3 4500 	ldrd	r4, r5, [r3]
 802f6da:	4623      	mov	r3, r4
 802f6dc:	ea43 0a00 	orr.w	sl, r3, r0
 802f6e0:	462b      	mov	r3, r5
 802f6e2:	ea43 0b01 	orr.w	fp, r3, r1
 802f6e6:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f6ea:	00db      	lsls	r3, r3, #3
 802f6ec:	1d9a      	adds	r2, r3, #6
 802f6ee:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 802f6f2:	681b      	ldr	r3, [r3, #0]
 802f6f4:	4413      	add	r3, r2
 802f6f6:	781b      	ldrb	r3, [r3, #0]
 802f6f8:	b2da      	uxtb	r2, r3
 802f6fa:	f04f 0300 	mov.w	r3, #0
 802f6fe:	f04f 0000 	mov.w	r0, #0
 802f702:	f04f 0100 	mov.w	r1, #0
 802f706:	0219      	lsls	r1, r3, #8
 802f708:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 802f70c:	0210      	lsls	r0, r2, #8
 802f70e:	ea4a 0800 	orr.w	r8, sl, r0
 802f712:	ea4b 0901 	orr.w	r9, fp, r1
 802f716:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f71a:	00db      	lsls	r3, r3, #3
 802f71c:	1dda      	adds	r2, r3, #7
 802f71e:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 802f722:	681b      	ldr	r3, [r3, #0]
 802f724:	4413      	add	r3, r2
 802f726:	781b      	ldrb	r3, [r3, #0]
 802f728:	b2da      	uxtb	r2, r3
 802f72a:	f04f 0300 	mov.w	r3, #0
 802f72e:	ea48 0102 	orr.w	r1, r8, r2
 802f732:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 802f736:	ea49 0303 	orr.w	r3, r9, r3
 802f73a:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 802f73e:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 802f742:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f746:	00db      	lsls	r3, r3, #3
 802f748:	4413      	add	r3, r2
 802f74a:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 802f74e:	e9d2 1200 	ldrd	r1, r2, [r2]
 802f752:	e9c3 1200 	strd	r1, r2, [r3]
    for (i = 0; i < 16; i++) {
 802f756:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f75a:	3301      	adds	r3, #1
 802f75c:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 802f760:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f764:	2b0f      	cmp	r3, #15
 802f766:	f77f af14 	ble.w	802f592 <sha512_compress+0x5e>
    }

    /* fill W[16..79] */
    for (i = 16; i < 80; i++) {
 802f76a:	2310      	movs	r3, #16
 802f76c:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 802f770:	e0f8      	b.n	802f964 <sha512_compress+0x430>
        W[i] = Gamma1(W[i - 2]) + W[i - 7] + Gamma0(W[i - 15]) + W[i - 16];
 802f772:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f776:	3b02      	subs	r3, #2
 802f778:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 802f77c:	00db      	lsls	r3, r3, #3
 802f77e:	4413      	add	r3, r2
 802f780:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f784:	0358      	lsls	r0, r3, #13
 802f786:	0cd1      	lsrs	r1, r2, #19
 802f788:	4301      	orrs	r1, r0
 802f78a:	f8c7 1658 	str.w	r1, [r7, #1624]	; 0x658
 802f78e:	0351      	lsls	r1, r2, #13
 802f790:	0cdb      	lsrs	r3, r3, #19
 802f792:	430b      	orrs	r3, r1
 802f794:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 802f798:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f79c:	3b02      	subs	r3, #2
 802f79e:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 802f7a2:	00db      	lsls	r3, r3, #3
 802f7a4:	4413      	add	r3, r2
 802f7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f7aa:	0f50      	lsrs	r0, r2, #29
 802f7ac:	00d9      	lsls	r1, r3, #3
 802f7ae:	4301      	orrs	r1, r0
 802f7b0:	f8c7 1654 	str.w	r1, [r7, #1620]	; 0x654
 802f7b4:	0f59      	lsrs	r1, r3, #29
 802f7b6:	00d3      	lsls	r3, r2, #3
 802f7b8:	430b      	orrs	r3, r1
 802f7ba:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650
 802f7be:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 802f7c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 802f7c6:	4623      	mov	r3, r4
 802f7c8:	f507 62ca 	add.w	r2, r7, #1616	; 0x650
 802f7cc:	e9d2 0100 	ldrd	r0, r1, [r2]
 802f7d0:	4602      	mov	r2, r0
 802f7d2:	4053      	eors	r3, r2
 802f7d4:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 802f7d8:	462b      	mov	r3, r5
 802f7da:	460a      	mov	r2, r1
 802f7dc:	4053      	eors	r3, r2
 802f7de:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 802f7e2:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f7e6:	3b02      	subs	r3, #2
 802f7e8:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 802f7ec:	00db      	lsls	r3, r3, #3
 802f7ee:	4413      	add	r3, r2
 802f7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f7f4:	f04f 0000 	mov.w	r0, #0
 802f7f8:	f04f 0100 	mov.w	r1, #0
 802f7fc:	0990      	lsrs	r0, r2, #6
 802f7fe:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 802f802:	0999      	lsrs	r1, r3, #6
 802f804:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 802f808:	e9d3 4500 	ldrd	r4, r5, [r3]
 802f80c:	4623      	mov	r3, r4
 802f80e:	4043      	eors	r3, r0
 802f810:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
 802f814:	462b      	mov	r3, r5
 802f816:	404b      	eors	r3, r1
 802f818:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 802f81c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f820:	3b07      	subs	r3, #7
 802f822:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 802f826:	00db      	lsls	r3, r3, #3
 802f828:	4413      	add	r3, r2
 802f82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f82e:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 802f832:	e9d1 4500 	ldrd	r4, r5, [r1]
 802f836:	4621      	mov	r1, r4
 802f838:	1889      	adds	r1, r1, r2
 802f83a:	f8c7 1638 	str.w	r1, [r7, #1592]	; 0x638
 802f83e:	4629      	mov	r1, r5
 802f840:	eb41 0303 	adc.w	r3, r1, r3
 802f844:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 802f848:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f84c:	3b0f      	subs	r3, #15
 802f84e:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 802f852:	00db      	lsls	r3, r3, #3
 802f854:	4413      	add	r3, r2
 802f856:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f85a:	07d8      	lsls	r0, r3, #31
 802f85c:	0851      	lsrs	r1, r2, #1
 802f85e:	4301      	orrs	r1, r0
 802f860:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 802f864:	07d1      	lsls	r1, r2, #31
 802f866:	085b      	lsrs	r3, r3, #1
 802f868:	430b      	orrs	r3, r1
 802f86a:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 802f86e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f872:	3b0f      	subs	r3, #15
 802f874:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 802f878:	00db      	lsls	r3, r3, #3
 802f87a:	4413      	add	r3, r2
 802f87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f880:	0618      	lsls	r0, r3, #24
 802f882:	0a11      	lsrs	r1, r2, #8
 802f884:	4301      	orrs	r1, r0
 802f886:	f8c7 1628 	str.w	r1, [r7, #1576]	; 0x628
 802f88a:	0611      	lsls	r1, r2, #24
 802f88c:	0a1b      	lsrs	r3, r3, #8
 802f88e:	430b      	orrs	r3, r1
 802f890:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 802f894:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 802f898:	e9d3 4500 	ldrd	r4, r5, [r3]
 802f89c:	4623      	mov	r3, r4
 802f89e:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 802f8a2:	e9d2 0100 	ldrd	r0, r1, [r2]
 802f8a6:	4602      	mov	r2, r0
 802f8a8:	4053      	eors	r3, r2
 802f8aa:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 802f8ae:	462b      	mov	r3, r5
 802f8b0:	460a      	mov	r2, r1
 802f8b2:	4053      	eors	r3, r2
 802f8b4:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 802f8b8:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f8bc:	3b0f      	subs	r3, #15
 802f8be:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 802f8c2:	00db      	lsls	r3, r3, #3
 802f8c4:	4413      	add	r3, r2
 802f8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f8ca:	f04f 0000 	mov.w	r0, #0
 802f8ce:	f04f 0100 	mov.w	r1, #0
 802f8d2:	09d0      	lsrs	r0, r2, #7
 802f8d4:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 802f8d8:	09d9      	lsrs	r1, r3, #7
 802f8da:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 802f8de:	e9d3 4500 	ldrd	r4, r5, [r3]
 802f8e2:	4623      	mov	r3, r4
 802f8e4:	4043      	eors	r3, r0
 802f8e6:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 802f8ea:	462b      	mov	r3, r5
 802f8ec:	404b      	eors	r3, r1
 802f8ee:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 802f8f2:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 802f8f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 802f8fa:	4623      	mov	r3, r4
 802f8fc:	f507 62c3 	add.w	r2, r7, #1560	; 0x618
 802f900:	e9d2 0100 	ldrd	r0, r1, [r2]
 802f904:	4602      	mov	r2, r0
 802f906:	189b      	adds	r3, r3, r2
 802f908:	f8c7 3610 	str.w	r3, [r7, #1552]	; 0x610
 802f90c:	462b      	mov	r3, r5
 802f90e:	460a      	mov	r2, r1
 802f910:	4153      	adcs	r3, r2
 802f912:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 802f916:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f91a:	3b10      	subs	r3, #16
 802f91c:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 802f920:	00db      	lsls	r3, r3, #3
 802f922:	4413      	add	r3, r2
 802f924:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f928:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 802f92c:	e9d1 4500 	ldrd	r4, r5, [r1]
 802f930:	4621      	mov	r1, r4
 802f932:	1889      	adds	r1, r1, r2
 802f934:	f8c7 1608 	str.w	r1, [r7, #1544]	; 0x608
 802f938:	4629      	mov	r1, r5
 802f93a:	eb41 0303 	adc.w	r3, r1, r3
 802f93e:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 802f942:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 802f946:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f94a:	00db      	lsls	r3, r3, #3
 802f94c:	4413      	add	r3, r2
 802f94e:	f507 62c1 	add.w	r2, r7, #1544	; 0x608
 802f952:	e9d2 1200 	ldrd	r1, r2, [r2]
 802f956:	e9c3 1200 	strd	r1, r2, [r3]
    for (i = 16; i < 80; i++) {
 802f95a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f95e:	3301      	adds	r3, #1
 802f960:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 802f964:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802f968:	2b4f      	cmp	r3, #79	; 0x4f
 802f96a:	f77f af02 	ble.w	802f772 <sha512_compress+0x23e>
    t0 = h + Sigma1(e) + Ch(e, f, g) + K[i] + W[i]; \
    t1 = Sigma0(a) + Maj(a, b, c);\
    d += t0; \
    h  = t0 + t1;

    for (i = 0; i < 80; i += 8) {
 802f96e:	2300      	movs	r3, #0
 802f970:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 802f974:	f001 bc4b 	b.w	803120e <sha512_compress+0x1cda>
       RND(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],i+0);
 802f978:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 802f97c:	e9d3 4500 	ldrd	r4, r5, [r3]
 802f980:	f607 1338 	addw	r3, r7, #2360	; 0x938
 802f984:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f988:	0498      	lsls	r0, r3, #18
 802f98a:	0b91      	lsrs	r1, r2, #14
 802f98c:	4301      	orrs	r1, r0
 802f98e:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 802f992:	0491      	lsls	r1, r2, #18
 802f994:	0b9b      	lsrs	r3, r3, #14
 802f996:	430b      	orrs	r3, r1
 802f998:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 802f99c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 802f9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f9a4:	0398      	lsls	r0, r3, #14
 802f9a6:	0c91      	lsrs	r1, r2, #18
 802f9a8:	4301      	orrs	r1, r0
 802f9aa:	f8c7 15f8 	str.w	r1, [r7, #1528]	; 0x5f8
 802f9ae:	0391      	lsls	r1, r2, #14
 802f9b0:	0c9b      	lsrs	r3, r3, #18
 802f9b2:	430b      	orrs	r3, r1
 802f9b4:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 802f9b8:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 802f9bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 802f9c0:	4643      	mov	r3, r8
 802f9c2:	f507 62bf 	add.w	r2, r7, #1528	; 0x5f8
 802f9c6:	e9d2 0100 	ldrd	r0, r1, [r2]
 802f9ca:	4602      	mov	r2, r0
 802f9cc:	4053      	eors	r3, r2
 802f9ce:	f8c7 35f0 	str.w	r3, [r7, #1520]	; 0x5f0
 802f9d2:	464b      	mov	r3, r9
 802f9d4:	460a      	mov	r2, r1
 802f9d6:	4053      	eors	r3, r2
 802f9d8:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 802f9dc:	f607 1338 	addw	r3, r7, #2360	; 0x938
 802f9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f9e4:	0a50      	lsrs	r0, r2, #9
 802f9e6:	05d9      	lsls	r1, r3, #23
 802f9e8:	4301      	orrs	r1, r0
 802f9ea:	f8c7 15ec 	str.w	r1, [r7, #1516]	; 0x5ec
 802f9ee:	0a59      	lsrs	r1, r3, #9
 802f9f0:	05d3      	lsls	r3, r2, #23
 802f9f2:	430b      	orrs	r3, r1
 802f9f4:	f8c7 35e8 	str.w	r3, [r7, #1512]	; 0x5e8
 802f9f8:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 802f9fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 802fa00:	4643      	mov	r3, r8
 802fa02:	f507 62bd 	add.w	r2, r7, #1512	; 0x5e8
 802fa06:	e9d2 0100 	ldrd	r0, r1, [r2]
 802fa0a:	4602      	mov	r2, r0
 802fa0c:	4053      	eors	r3, r2
 802fa0e:	f8c7 35e0 	str.w	r3, [r7, #1504]	; 0x5e0
 802fa12:	464b      	mov	r3, r9
 802fa14:	460a      	mov	r2, r1
 802fa16:	4053      	eors	r3, r2
 802fa18:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 802fa1c:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 802fa20:	e9d3 1200 	ldrd	r1, r2, [r3]
 802fa24:	460b      	mov	r3, r1
 802fa26:	18e3      	adds	r3, r4, r3
 802fa28:	f8c7 35d8 	str.w	r3, [r7, #1496]	; 0x5d8
 802fa2c:	4613      	mov	r3, r2
 802fa2e:	eb45 0303 	adc.w	r3, r5, r3
 802fa32:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 802fa36:	f607 1348 	addw	r3, r7, #2376	; 0x948
 802fa3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 802fa3e:	f607 1338 	addw	r3, r7, #2360	; 0x938
 802fa42:	e9d3 4500 	ldrd	r4, r5, [r3]
 802fa46:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 802fa4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 802fa4e:	f607 1348 	addw	r3, r7, #2376	; 0x948
 802fa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fa56:	ea80 0602 	eor.w	r6, r0, r2
 802fa5a:	f8c7 65d0 	str.w	r6, [r7, #1488]	; 0x5d0
 802fa5e:	404b      	eors	r3, r1
 802fa60:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 802fa64:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 802fa68:	e9d3 1200 	ldrd	r1, r2, [r3]
 802fa6c:	460b      	mov	r3, r1
 802fa6e:	4023      	ands	r3, r4
 802fa70:	f8c7 35c8 	str.w	r3, [r7, #1480]	; 0x5c8
 802fa74:	4613      	mov	r3, r2
 802fa76:	402b      	ands	r3, r5
 802fa78:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 802fa7c:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 802fa80:	e9d3 1200 	ldrd	r1, r2, [r3]
 802fa84:	460b      	mov	r3, r1
 802fa86:	ea88 0303 	eor.w	r3, r8, r3
 802fa8a:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
 802fa8e:	4613      	mov	r3, r2
 802fa90:	ea89 0303 	eor.w	r3, r9, r3
 802fa94:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 802fa98:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 802fa9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 802faa0:	4623      	mov	r3, r4
 802faa2:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 802faa6:	e9d2 0100 	ldrd	r0, r1, [r2]
 802faaa:	4602      	mov	r2, r0
 802faac:	189b      	adds	r3, r3, r2
 802faae:	f8c7 35b8 	str.w	r3, [r7, #1464]	; 0x5b8
 802fab2:	462b      	mov	r3, r5
 802fab4:	460a      	mov	r2, r1
 802fab6:	4153      	adcs	r3, r2
 802fab8:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 802fabc:	4af4      	ldr	r2, [pc, #976]	; (802fe90 <sha512_compress+0x95c>)
 802fabe:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802fac2:	00db      	lsls	r3, r3, #3
 802fac4:	4413      	add	r3, r2
 802fac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802faca:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 802face:	e9d1 4500 	ldrd	r4, r5, [r1]
 802fad2:	4621      	mov	r1, r4
 802fad4:	1889      	adds	r1, r1, r2
 802fad6:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 802fada:	4629      	mov	r1, r5
 802fadc:	eb41 0303 	adc.w	r3, r1, r3
 802fae0:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 802fae4:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 802fae8:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802faec:	00db      	lsls	r3, r3, #3
 802faee:	4413      	add	r3, r2
 802faf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802faf4:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 802faf8:	e9d1 4500 	ldrd	r4, r5, [r1]
 802fafc:	4621      	mov	r1, r4
 802fafe:	1889      	adds	r1, r1, r2
 802fb00:	67b9      	str	r1, [r7, #120]	; 0x78
 802fb02:	4629      	mov	r1, r5
 802fb04:	eb41 0303 	adc.w	r3, r1, r3
 802fb08:	67fb      	str	r3, [r7, #124]	; 0x7c
 802fb0a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 802fb0e:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 802fb12:	e9c2 3400 	strd	r3, r4, [r2]
 802fb16:	f607 1318 	addw	r3, r7, #2328	; 0x918
 802fb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fb1e:	0118      	lsls	r0, r3, #4
 802fb20:	0f11      	lsrs	r1, r2, #28
 802fb22:	4301      	orrs	r1, r0
 802fb24:	f8c7 15a8 	str.w	r1, [r7, #1448]	; 0x5a8
 802fb28:	0111      	lsls	r1, r2, #4
 802fb2a:	0f1b      	lsrs	r3, r3, #28
 802fb2c:	430b      	orrs	r3, r1
 802fb2e:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 802fb32:	f607 1318 	addw	r3, r7, #2328	; 0x918
 802fb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fb3a:	0890      	lsrs	r0, r2, #2
 802fb3c:	0799      	lsls	r1, r3, #30
 802fb3e:	4301      	orrs	r1, r0
 802fb40:	f8c7 15a4 	str.w	r1, [r7, #1444]	; 0x5a4
 802fb44:	0899      	lsrs	r1, r3, #2
 802fb46:	0793      	lsls	r3, r2, #30
 802fb48:	430b      	orrs	r3, r1
 802fb4a:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
 802fb4e:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 802fb52:	e9d3 4500 	ldrd	r4, r5, [r3]
 802fb56:	4623      	mov	r3, r4
 802fb58:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 802fb5c:	e9d2 0100 	ldrd	r0, r1, [r2]
 802fb60:	4602      	mov	r2, r0
 802fb62:	4053      	eors	r3, r2
 802fb64:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598
 802fb68:	462b      	mov	r3, r5
 802fb6a:	460a      	mov	r2, r1
 802fb6c:	4053      	eors	r3, r2
 802fb6e:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 802fb72:	f607 1318 	addw	r3, r7, #2328	; 0x918
 802fb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fb7a:	09d0      	lsrs	r0, r2, #7
 802fb7c:	0659      	lsls	r1, r3, #25
 802fb7e:	4301      	orrs	r1, r0
 802fb80:	f8c7 1594 	str.w	r1, [r7, #1428]	; 0x594
 802fb84:	09d9      	lsrs	r1, r3, #7
 802fb86:	0653      	lsls	r3, r2, #25
 802fb88:	430b      	orrs	r3, r1
 802fb8a:	f8c7 3590 	str.w	r3, [r7, #1424]	; 0x590
 802fb8e:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 802fb92:	e9d3 4500 	ldrd	r4, r5, [r3]
 802fb96:	4623      	mov	r3, r4
 802fb98:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 802fb9c:	e9d2 0100 	ldrd	r0, r1, [r2]
 802fba0:	4602      	mov	r2, r0
 802fba2:	4053      	eors	r3, r2
 802fba4:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 802fba8:	462b      	mov	r3, r5
 802fbaa:	460a      	mov	r2, r1
 802fbac:	4053      	eors	r3, r2
 802fbae:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 802fbb2:	f607 1318 	addw	r3, r7, #2328	; 0x918
 802fbb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 802fbba:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 802fbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fbc2:	ea40 0402 	orr.w	r4, r0, r2
 802fbc6:	f8c7 4580 	str.w	r4, [r7, #1408]	; 0x580
 802fbca:	430b      	orrs	r3, r1
 802fbcc:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 802fbd0:	f607 1328 	addw	r3, r7, #2344	; 0x928
 802fbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fbd8:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 802fbdc:	e9d1 4500 	ldrd	r4, r5, [r1]
 802fbe0:	4621      	mov	r1, r4
 802fbe2:	4011      	ands	r1, r2
 802fbe4:	f8c7 1578 	str.w	r1, [r7, #1400]	; 0x578
 802fbe8:	4629      	mov	r1, r5
 802fbea:	400b      	ands	r3, r1
 802fbec:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 802fbf0:	f607 1318 	addw	r3, r7, #2328	; 0x918
 802fbf4:	e9d3 0100 	ldrd	r0, r1, [r3]
 802fbf8:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 802fbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fc00:	ea00 0402 	and.w	r4, r0, r2
 802fc04:	f8c7 4570 	str.w	r4, [r7, #1392]	; 0x570
 802fc08:	400b      	ands	r3, r1
 802fc0a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 802fc0e:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 802fc12:	e9d3 4500 	ldrd	r4, r5, [r3]
 802fc16:	4623      	mov	r3, r4
 802fc18:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 802fc1c:	e9d2 0100 	ldrd	r0, r1, [r2]
 802fc20:	4602      	mov	r2, r0
 802fc22:	4313      	orrs	r3, r2
 802fc24:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
 802fc28:	462b      	mov	r3, r5
 802fc2a:	460a      	mov	r2, r1
 802fc2c:	4313      	orrs	r3, r2
 802fc2e:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 802fc32:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 802fc36:	e9d3 4500 	ldrd	r4, r5, [r3]
 802fc3a:	4623      	mov	r3, r4
 802fc3c:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 802fc40:	e9d2 0100 	ldrd	r0, r1, [r2]
 802fc44:	4602      	mov	r2, r0
 802fc46:	189b      	adds	r3, r3, r2
 802fc48:	673b      	str	r3, [r7, #112]	; 0x70
 802fc4a:	462b      	mov	r3, r5
 802fc4c:	460a      	mov	r2, r1
 802fc4e:	4153      	adcs	r3, r2
 802fc50:	677b      	str	r3, [r7, #116]	; 0x74
 802fc52:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 802fc56:	f607 1258 	addw	r2, r7, #2392	; 0x958
 802fc5a:	e9c2 3400 	strd	r3, r4, [r2]
 802fc5e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 802fc62:	e9d3 0100 	ldrd	r0, r1, [r3]
 802fc66:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 802fc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fc6e:	1884      	adds	r4, r0, r2
 802fc70:	f8c7 4560 	str.w	r4, [r7, #1376]	; 0x560
 802fc74:	eb41 0303 	adc.w	r3, r1, r3
 802fc78:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 802fc7c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 802fc80:	e9d3 3400 	ldrd	r3, r4, [r3]
 802fc84:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 802fc88:	e9c2 3400 	strd	r3, r4, [r2]
 802fc8c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 802fc90:	e9d3 0100 	ldrd	r0, r1, [r3]
 802fc94:	f607 1358 	addw	r3, r7, #2392	; 0x958
 802fc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fc9c:	1884      	adds	r4, r0, r2
 802fc9e:	f8c7 4558 	str.w	r4, [r7, #1368]	; 0x558
 802fca2:	eb41 0303 	adc.w	r3, r1, r3
 802fca6:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 802fcaa:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 802fcae:	e9d3 3400 	ldrd	r3, r4, [r3]
 802fcb2:	f507 6215 	add.w	r2, r7, #2384	; 0x950
 802fcb6:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[7],S[0],S[1],S[2],S[3],S[4],S[5],S[6],i+1);
 802fcba:	f607 1348 	addw	r3, r7, #2376	; 0x948
 802fcbe:	e9d3 4500 	ldrd	r4, r5, [r3]
 802fcc2:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 802fcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fcca:	0498      	lsls	r0, r3, #18
 802fccc:	0b91      	lsrs	r1, r2, #14
 802fcce:	4301      	orrs	r1, r0
 802fcd0:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 802fcd4:	0491      	lsls	r1, r2, #18
 802fcd6:	0b9b      	lsrs	r3, r3, #14
 802fcd8:	430b      	orrs	r3, r1
 802fcda:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 802fcde:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 802fce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fce6:	0398      	lsls	r0, r3, #14
 802fce8:	0c91      	lsrs	r1, r2, #18
 802fcea:	4301      	orrs	r1, r0
 802fcec:	f8c7 1548 	str.w	r1, [r7, #1352]	; 0x548
 802fcf0:	0391      	lsls	r1, r2, #14
 802fcf2:	0c9b      	lsrs	r3, r3, #18
 802fcf4:	430b      	orrs	r3, r1
 802fcf6:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 802fcfa:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 802fcfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 802fd02:	4643      	mov	r3, r8
 802fd04:	f507 62a9 	add.w	r2, r7, #1352	; 0x548
 802fd08:	e9d2 0100 	ldrd	r0, r1, [r2]
 802fd0c:	4602      	mov	r2, r0
 802fd0e:	4053      	eors	r3, r2
 802fd10:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 802fd14:	464b      	mov	r3, r9
 802fd16:	460a      	mov	r2, r1
 802fd18:	4053      	eors	r3, r2
 802fd1a:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 802fd1e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 802fd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fd26:	0a50      	lsrs	r0, r2, #9
 802fd28:	05d9      	lsls	r1, r3, #23
 802fd2a:	4301      	orrs	r1, r0
 802fd2c:	f8c7 153c 	str.w	r1, [r7, #1340]	; 0x53c
 802fd30:	0a59      	lsrs	r1, r3, #9
 802fd32:	05d3      	lsls	r3, r2, #23
 802fd34:	430b      	orrs	r3, r1
 802fd36:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
 802fd3a:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 802fd3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 802fd42:	4643      	mov	r3, r8
 802fd44:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 802fd48:	e9d2 0100 	ldrd	r0, r1, [r2]
 802fd4c:	4602      	mov	r2, r0
 802fd4e:	4053      	eors	r3, r2
 802fd50:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 802fd54:	464b      	mov	r3, r9
 802fd56:	460a      	mov	r2, r1
 802fd58:	4053      	eors	r3, r2
 802fd5a:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 802fd5e:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 802fd62:	e9d3 1200 	ldrd	r1, r2, [r3]
 802fd66:	460b      	mov	r3, r1
 802fd68:	18e3      	adds	r3, r4, r3
 802fd6a:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 802fd6e:	4613      	mov	r3, r2
 802fd70:	eb45 0303 	adc.w	r3, r5, r3
 802fd74:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 802fd78:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 802fd7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 802fd80:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 802fd84:	e9d3 4500 	ldrd	r4, r5, [r3]
 802fd88:	f607 1338 	addw	r3, r7, #2360	; 0x938
 802fd8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 802fd90:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 802fd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fd98:	ea80 0602 	eor.w	r6, r0, r2
 802fd9c:	f8c7 6520 	str.w	r6, [r7, #1312]	; 0x520
 802fda0:	404b      	eors	r3, r1
 802fda2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 802fda6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 802fdaa:	e9d3 1200 	ldrd	r1, r2, [r3]
 802fdae:	460b      	mov	r3, r1
 802fdb0:	4023      	ands	r3, r4
 802fdb2:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 802fdb6:	4613      	mov	r3, r2
 802fdb8:	402b      	ands	r3, r5
 802fdba:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 802fdbe:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 802fdc2:	e9d3 1200 	ldrd	r1, r2, [r3]
 802fdc6:	460b      	mov	r3, r1
 802fdc8:	ea88 0303 	eor.w	r3, r8, r3
 802fdcc:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 802fdd0:	4613      	mov	r3, r2
 802fdd2:	ea89 0303 	eor.w	r3, r9, r3
 802fdd6:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 802fdda:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 802fdde:	e9d3 4500 	ldrd	r4, r5, [r3]
 802fde2:	4623      	mov	r3, r4
 802fde4:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 802fde8:	e9d2 0100 	ldrd	r0, r1, [r2]
 802fdec:	4602      	mov	r2, r0
 802fdee:	189b      	adds	r3, r3, r2
 802fdf0:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
 802fdf4:	462b      	mov	r3, r5
 802fdf6:	460a      	mov	r2, r1
 802fdf8:	4153      	adcs	r3, r2
 802fdfa:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 802fdfe:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802fe02:	3301      	adds	r3, #1
 802fe04:	4a22      	ldr	r2, [pc, #136]	; (802fe90 <sha512_compress+0x95c>)
 802fe06:	00db      	lsls	r3, r3, #3
 802fe08:	4413      	add	r3, r2
 802fe0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fe0e:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 802fe12:	e9d1 4500 	ldrd	r4, r5, [r1]
 802fe16:	4621      	mov	r1, r4
 802fe18:	1889      	adds	r1, r1, r2
 802fe1a:	f8c7 1500 	str.w	r1, [r7, #1280]	; 0x500
 802fe1e:	4629      	mov	r1, r5
 802fe20:	eb41 0303 	adc.w	r3, r1, r3
 802fe24:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 802fe28:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 802fe2c:	3301      	adds	r3, #1
 802fe2e:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 802fe32:	00db      	lsls	r3, r3, #3
 802fe34:	4413      	add	r3, r2
 802fe36:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fe3a:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 802fe3e:	e9d1 4500 	ldrd	r4, r5, [r1]
 802fe42:	4621      	mov	r1, r4
 802fe44:	1889      	adds	r1, r1, r2
 802fe46:	66b9      	str	r1, [r7, #104]	; 0x68
 802fe48:	4629      	mov	r1, r5
 802fe4a:	eb41 0303 	adc.w	r3, r1, r3
 802fe4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 802fe50:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 802fe54:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 802fe58:	e9c2 3400 	strd	r3, r4, [r2]
 802fe5c:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 802fe60:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fe64:	0118      	lsls	r0, r3, #4
 802fe66:	0f11      	lsrs	r1, r2, #28
 802fe68:	4301      	orrs	r1, r0
 802fe6a:	f8c7 14f8 	str.w	r1, [r7, #1272]	; 0x4f8
 802fe6e:	0111      	lsls	r1, r2, #4
 802fe70:	0f1b      	lsrs	r3, r3, #28
 802fe72:	430b      	orrs	r3, r1
 802fe74:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 802fe78:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 802fe7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fe80:	0890      	lsrs	r0, r2, #2
 802fe82:	0799      	lsls	r1, r3, #30
 802fe84:	4301      	orrs	r1, r0
 802fe86:	f8c7 14f4 	str.w	r1, [r7, #1268]	; 0x4f4
 802fe8a:	0899      	lsrs	r1, r3, #2
 802fe8c:	0793      	lsls	r3, r2, #30
 802fe8e:	e001      	b.n	802fe94 <sha512_compress+0x960>
 802fe90:	0803e570 	.word	0x0803e570
 802fe94:	430b      	orrs	r3, r1
 802fe96:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 802fe9a:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 802fe9e:	e9d3 4500 	ldrd	r4, r5, [r3]
 802fea2:	4623      	mov	r3, r4
 802fea4:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 802fea8:	e9d2 0100 	ldrd	r0, r1, [r2]
 802feac:	4602      	mov	r2, r0
 802feae:	4053      	eors	r3, r2
 802feb0:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 802feb4:	462b      	mov	r3, r5
 802feb6:	460a      	mov	r2, r1
 802feb8:	4053      	eors	r3, r2
 802feba:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 802febe:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 802fec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fec6:	09d0      	lsrs	r0, r2, #7
 802fec8:	0659      	lsls	r1, r3, #25
 802feca:	4301      	orrs	r1, r0
 802fecc:	f8c7 14e4 	str.w	r1, [r7, #1252]	; 0x4e4
 802fed0:	09d9      	lsrs	r1, r3, #7
 802fed2:	0653      	lsls	r3, r2, #25
 802fed4:	430b      	orrs	r3, r1
 802fed6:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 802feda:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 802fede:	e9d3 4500 	ldrd	r4, r5, [r3]
 802fee2:	4623      	mov	r3, r4
 802fee4:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 802fee8:	e9d2 0100 	ldrd	r0, r1, [r2]
 802feec:	4602      	mov	r2, r0
 802feee:	4053      	eors	r3, r2
 802fef0:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 802fef4:	462b      	mov	r3, r5
 802fef6:	460a      	mov	r2, r1
 802fef8:	4053      	eors	r3, r2
 802fefa:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 802fefe:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 802ff02:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ff06:	f607 1318 	addw	r3, r7, #2328	; 0x918
 802ff0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ff0e:	ea40 0402 	orr.w	r4, r0, r2
 802ff12:	f8c7 44d0 	str.w	r4, [r7, #1232]	; 0x4d0
 802ff16:	430b      	orrs	r3, r1
 802ff18:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 802ff1c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 802ff20:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ff24:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 802ff28:	e9d1 4500 	ldrd	r4, r5, [r1]
 802ff2c:	4621      	mov	r1, r4
 802ff2e:	4011      	ands	r1, r2
 802ff30:	f8c7 14c8 	str.w	r1, [r7, #1224]	; 0x4c8
 802ff34:	4629      	mov	r1, r5
 802ff36:	400b      	ands	r3, r1
 802ff38:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 802ff3c:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 802ff40:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ff44:	f607 1318 	addw	r3, r7, #2328	; 0x918
 802ff48:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ff4c:	ea00 0402 	and.w	r4, r0, r2
 802ff50:	f8c7 44c0 	str.w	r4, [r7, #1216]	; 0x4c0
 802ff54:	400b      	ands	r3, r1
 802ff56:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 802ff5a:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 802ff5e:	e9d3 4500 	ldrd	r4, r5, [r3]
 802ff62:	4623      	mov	r3, r4
 802ff64:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 802ff68:	e9d2 0100 	ldrd	r0, r1, [r2]
 802ff6c:	4602      	mov	r2, r0
 802ff6e:	4313      	orrs	r3, r2
 802ff70:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 802ff74:	462b      	mov	r3, r5
 802ff76:	460a      	mov	r2, r1
 802ff78:	4313      	orrs	r3, r2
 802ff7a:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 802ff7e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 802ff82:	e9d3 4500 	ldrd	r4, r5, [r3]
 802ff86:	4623      	mov	r3, r4
 802ff88:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 802ff8c:	e9d2 0100 	ldrd	r0, r1, [r2]
 802ff90:	4602      	mov	r2, r0
 802ff92:	189b      	adds	r3, r3, r2
 802ff94:	663b      	str	r3, [r7, #96]	; 0x60
 802ff96:	462b      	mov	r3, r5
 802ff98:	460a      	mov	r2, r1
 802ff9a:	4153      	adcs	r3, r2
 802ff9c:	667b      	str	r3, [r7, #100]	; 0x64
 802ff9e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 802ffa2:	f607 1258 	addw	r2, r7, #2392	; 0x958
 802ffa6:	e9c2 3400 	strd	r3, r4, [r2]
 802ffaa:	f607 1328 	addw	r3, r7, #2344	; 0x928
 802ffae:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ffb2:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 802ffb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ffba:	1884      	adds	r4, r0, r2
 802ffbc:	f8c7 44b0 	str.w	r4, [r7, #1200]	; 0x4b0
 802ffc0:	eb41 0303 	adc.w	r3, r1, r3
 802ffc4:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 802ffc8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 802ffcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 802ffd0:	f607 1228 	addw	r2, r7, #2344	; 0x928
 802ffd4:	e9c2 3400 	strd	r3, r4, [r2]
 802ffd8:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 802ffdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 802ffe0:	f607 1358 	addw	r3, r7, #2392	; 0x958
 802ffe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ffe8:	1884      	adds	r4, r0, r2
 802ffea:	f8c7 44a8 	str.w	r4, [r7, #1192]	; 0x4a8
 802ffee:	eb41 0303 	adc.w	r3, r1, r3
 802fff2:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 802fff6:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 802fffa:	e9d3 3400 	ldrd	r3, r4, [r3]
 802fffe:	f607 1248 	addw	r2, r7, #2376	; 0x948
 8030002:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[6],S[7],S[0],S[1],S[2],S[3],S[4],S[5],i+2);
 8030006:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 803000a:	e9d3 4500 	ldrd	r4, r5, [r3]
 803000e:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030016:	0498      	lsls	r0, r3, #18
 8030018:	0b91      	lsrs	r1, r2, #14
 803001a:	4301      	orrs	r1, r0
 803001c:	f8c7 14a0 	str.w	r1, [r7, #1184]	; 0x4a0
 8030020:	0491      	lsls	r1, r2, #18
 8030022:	0b9b      	lsrs	r3, r3, #14
 8030024:	430b      	orrs	r3, r1
 8030026:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 803002a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 803002e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030032:	0398      	lsls	r0, r3, #14
 8030034:	0c91      	lsrs	r1, r2, #18
 8030036:	4301      	orrs	r1, r0
 8030038:	f8c7 1498 	str.w	r1, [r7, #1176]	; 0x498
 803003c:	0391      	lsls	r1, r2, #14
 803003e:	0c9b      	lsrs	r3, r3, #18
 8030040:	430b      	orrs	r3, r1
 8030042:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 8030046:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 803004a:	e9d3 8900 	ldrd	r8, r9, [r3]
 803004e:	4643      	mov	r3, r8
 8030050:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8030054:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030058:	4602      	mov	r2, r0
 803005a:	4053      	eors	r3, r2
 803005c:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
 8030060:	464b      	mov	r3, r9
 8030062:	460a      	mov	r2, r1
 8030064:	4053      	eors	r3, r2
 8030066:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 803006a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 803006e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030072:	0a50      	lsrs	r0, r2, #9
 8030074:	05d9      	lsls	r1, r3, #23
 8030076:	4301      	orrs	r1, r0
 8030078:	f8c7 148c 	str.w	r1, [r7, #1164]	; 0x48c
 803007c:	0a59      	lsrs	r1, r3, #9
 803007e:	05d3      	lsls	r3, r2, #23
 8030080:	430b      	orrs	r3, r1
 8030082:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
 8030086:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 803008a:	e9d3 8900 	ldrd	r8, r9, [r3]
 803008e:	4643      	mov	r3, r8
 8030090:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 8030094:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030098:	4602      	mov	r2, r0
 803009a:	4053      	eors	r3, r2
 803009c:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 80300a0:	464b      	mov	r3, r9
 80300a2:	460a      	mov	r2, r1
 80300a4:	4053      	eors	r3, r2
 80300a6:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 80300aa:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80300ae:	e9d3 1200 	ldrd	r1, r2, [r3]
 80300b2:	460b      	mov	r3, r1
 80300b4:	18e3      	adds	r3, r4, r3
 80300b6:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 80300ba:	4613      	mov	r3, r2
 80300bc:	eb45 0303 	adc.w	r3, r5, r3
 80300c0:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 80300c4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80300c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80300cc:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80300d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80300d4:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80300d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80300dc:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80300e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80300e4:	ea80 0602 	eor.w	r6, r0, r2
 80300e8:	f8c7 6470 	str.w	r6, [r7, #1136]	; 0x470
 80300ec:	404b      	eors	r3, r1
 80300ee:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 80300f2:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80300f6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80300fa:	460b      	mov	r3, r1
 80300fc:	4023      	ands	r3, r4
 80300fe:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8030102:	4613      	mov	r3, r2
 8030104:	402b      	ands	r3, r5
 8030106:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 803010a:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 803010e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8030112:	460b      	mov	r3, r1
 8030114:	ea88 0303 	eor.w	r3, r8, r3
 8030118:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 803011c:	4613      	mov	r3, r2
 803011e:	ea89 0303 	eor.w	r3, r9, r3
 8030122:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 8030126:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 803012a:	e9d3 4500 	ldrd	r4, r5, [r3]
 803012e:	4623      	mov	r3, r4
 8030130:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8030134:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030138:	4602      	mov	r2, r0
 803013a:	189b      	adds	r3, r3, r2
 803013c:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8030140:	462b      	mov	r3, r5
 8030142:	460a      	mov	r2, r1
 8030144:	4153      	adcs	r3, r2
 8030146:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 803014a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 803014e:	3302      	adds	r3, #2
 8030150:	4af4      	ldr	r2, [pc, #976]	; (8030524 <sha512_compress+0xff0>)
 8030152:	00db      	lsls	r3, r3, #3
 8030154:	4413      	add	r3, r2
 8030156:	e9d3 2300 	ldrd	r2, r3, [r3]
 803015a:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 803015e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8030162:	4621      	mov	r1, r4
 8030164:	1889      	adds	r1, r1, r2
 8030166:	f8c7 1450 	str.w	r1, [r7, #1104]	; 0x450
 803016a:	4629      	mov	r1, r5
 803016c:	eb41 0303 	adc.w	r3, r1, r3
 8030170:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8030174:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030178:	3302      	adds	r3, #2
 803017a:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 803017e:	00db      	lsls	r3, r3, #3
 8030180:	4413      	add	r3, r2
 8030182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030186:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 803018a:	e9d1 4500 	ldrd	r4, r5, [r1]
 803018e:	4621      	mov	r1, r4
 8030190:	1889      	adds	r1, r1, r2
 8030192:	65b9      	str	r1, [r7, #88]	; 0x58
 8030194:	4629      	mov	r1, r5
 8030196:	eb41 0303 	adc.w	r3, r1, r3
 803019a:	65fb      	str	r3, [r7, #92]	; 0x5c
 803019c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80301a0:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 80301a4:	e9c2 3400 	strd	r3, r4, [r2]
 80301a8:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80301ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80301b0:	0118      	lsls	r0, r3, #4
 80301b2:	0f11      	lsrs	r1, r2, #28
 80301b4:	4301      	orrs	r1, r0
 80301b6:	f8c7 1448 	str.w	r1, [r7, #1096]	; 0x448
 80301ba:	0111      	lsls	r1, r2, #4
 80301bc:	0f1b      	lsrs	r3, r3, #28
 80301be:	430b      	orrs	r3, r1
 80301c0:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 80301c4:	f607 1348 	addw	r3, r7, #2376	; 0x948
 80301c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80301cc:	0890      	lsrs	r0, r2, #2
 80301ce:	0799      	lsls	r1, r3, #30
 80301d0:	4301      	orrs	r1, r0
 80301d2:	f8c7 1444 	str.w	r1, [r7, #1092]	; 0x444
 80301d6:	0899      	lsrs	r1, r3, #2
 80301d8:	0793      	lsls	r3, r2, #30
 80301da:	430b      	orrs	r3, r1
 80301dc:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 80301e0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80301e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80301e8:	4623      	mov	r3, r4
 80301ea:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 80301ee:	e9d2 0100 	ldrd	r0, r1, [r2]
 80301f2:	4602      	mov	r2, r0
 80301f4:	4053      	eors	r3, r2
 80301f6:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 80301fa:	462b      	mov	r3, r5
 80301fc:	460a      	mov	r2, r1
 80301fe:	4053      	eors	r3, r2
 8030200:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8030204:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030208:	e9d3 2300 	ldrd	r2, r3, [r3]
 803020c:	09d0      	lsrs	r0, r2, #7
 803020e:	0659      	lsls	r1, r3, #25
 8030210:	4301      	orrs	r1, r0
 8030212:	f8c7 1434 	str.w	r1, [r7, #1076]	; 0x434
 8030216:	09d9      	lsrs	r1, r3, #7
 8030218:	0653      	lsls	r3, r2, #25
 803021a:	430b      	orrs	r3, r1
 803021c:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8030220:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8030224:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030228:	4623      	mov	r3, r4
 803022a:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 803022e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8030232:	4602      	mov	r2, r0
 8030234:	4053      	eors	r3, r2
 8030236:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 803023a:	462b      	mov	r3, r5
 803023c:	460a      	mov	r2, r1
 803023e:	4053      	eors	r3, r2
 8030240:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8030244:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030248:	e9d3 0100 	ldrd	r0, r1, [r3]
 803024c:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8030250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030254:	ea40 0402 	orr.w	r4, r0, r2
 8030258:	f8c7 4420 	str.w	r4, [r7, #1056]	; 0x420
 803025c:	430b      	orrs	r3, r1
 803025e:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8030262:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8030266:	e9d3 2300 	ldrd	r2, r3, [r3]
 803026a:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 803026e:	e9d1 4500 	ldrd	r4, r5, [r1]
 8030272:	4621      	mov	r1, r4
 8030274:	4011      	ands	r1, r2
 8030276:	f8c7 1418 	str.w	r1, [r7, #1048]	; 0x418
 803027a:	4629      	mov	r1, r5
 803027c:	400b      	ands	r3, r1
 803027e:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8030282:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030286:	e9d3 0100 	ldrd	r0, r1, [r3]
 803028a:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 803028e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030292:	ea00 0402 	and.w	r4, r0, r2
 8030296:	f8c7 4410 	str.w	r4, [r7, #1040]	; 0x410
 803029a:	400b      	ands	r3, r1
 803029c:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80302a0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80302a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80302a8:	4623      	mov	r3, r4
 80302aa:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80302ae:	e9d2 0100 	ldrd	r0, r1, [r2]
 80302b2:	4602      	mov	r2, r0
 80302b4:	4313      	orrs	r3, r2
 80302b6:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80302ba:	462b      	mov	r3, r5
 80302bc:	460a      	mov	r2, r1
 80302be:	4313      	orrs	r3, r2
 80302c0:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 80302c4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80302c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80302cc:	4623      	mov	r3, r4
 80302ce:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 80302d2:	e9d2 0100 	ldrd	r0, r1, [r2]
 80302d6:	4602      	mov	r2, r0
 80302d8:	189b      	adds	r3, r3, r2
 80302da:	653b      	str	r3, [r7, #80]	; 0x50
 80302dc:	462b      	mov	r3, r5
 80302de:	460a      	mov	r2, r1
 80302e0:	4153      	adcs	r3, r2
 80302e2:	657b      	str	r3, [r7, #84]	; 0x54
 80302e4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80302e8:	f607 1258 	addw	r2, r7, #2392	; 0x958
 80302ec:	e9c2 3400 	strd	r3, r4, [r2]
 80302f0:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80302f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80302f8:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80302fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030300:	1884      	adds	r4, r0, r2
 8030302:	f8c7 4400 	str.w	r4, [r7, #1024]	; 0x400
 8030306:	eb41 0303 	adc.w	r3, r1, r3
 803030a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 803030e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8030312:	e9d3 3400 	ldrd	r3, r4, [r3]
 8030316:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 803031a:	e9c2 3400 	strd	r3, r4, [r2]
 803031e:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8030322:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030326:	f607 1358 	addw	r3, r7, #2392	; 0x958
 803032a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803032e:	1884      	adds	r4, r0, r2
 8030330:	f8c7 43f8 	str.w	r4, [r7, #1016]	; 0x3f8
 8030334:	eb41 0303 	adc.w	r3, r1, r3
 8030338:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 803033c:	e9d7 34fe 	ldrd	r3, r4, [r7, #1016]	; 0x3f8
 8030340:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8030344:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[5],S[6],S[7],S[0],S[1],S[2],S[3],S[4],i+3);
 8030348:	f607 1338 	addw	r3, r7, #2360	; 0x938
 803034c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030350:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8030354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030358:	0498      	lsls	r0, r3, #18
 803035a:	0b91      	lsrs	r1, r2, #14
 803035c:	4301      	orrs	r1, r0
 803035e:	f8c7 13f0 	str.w	r1, [r7, #1008]	; 0x3f0
 8030362:	0491      	lsls	r1, r2, #18
 8030364:	0b9b      	lsrs	r3, r3, #14
 8030366:	430b      	orrs	r3, r1
 8030368:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 803036c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8030370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030374:	0398      	lsls	r0, r3, #14
 8030376:	0c91      	lsrs	r1, r2, #18
 8030378:	4301      	orrs	r1, r0
 803037a:	f8c7 13e8 	str.w	r1, [r7, #1000]	; 0x3e8
 803037e:	0391      	lsls	r1, r2, #14
 8030380:	0c9b      	lsrs	r3, r3, #18
 8030382:	430b      	orrs	r3, r1
 8030384:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8030388:	e9d7 89fc 	ldrd	r8, r9, [r7, #1008]	; 0x3f0
 803038c:	4643      	mov	r3, r8
 803038e:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	; 0x3e8
 8030392:	4602      	mov	r2, r0
 8030394:	4053      	eors	r3, r2
 8030396:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 803039a:	464b      	mov	r3, r9
 803039c:	460a      	mov	r2, r1
 803039e:	4053      	eors	r3, r2
 80303a0:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 80303a4:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80303a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80303ac:	0a50      	lsrs	r0, r2, #9
 80303ae:	05d9      	lsls	r1, r3, #23
 80303b0:	4301      	orrs	r1, r0
 80303b2:	f8c7 13dc 	str.w	r1, [r7, #988]	; 0x3dc
 80303b6:	0a59      	lsrs	r1, r3, #9
 80303b8:	05d3      	lsls	r3, r2, #23
 80303ba:	430b      	orrs	r3, r1
 80303bc:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 80303c0:	e9d7 89f8 	ldrd	r8, r9, [r7, #992]	; 0x3e0
 80303c4:	4643      	mov	r3, r8
 80303c6:	e9d7 01f6 	ldrd	r0, r1, [r7, #984]	; 0x3d8
 80303ca:	4602      	mov	r2, r0
 80303cc:	4053      	eors	r3, r2
 80303ce:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 80303d2:	464b      	mov	r3, r9
 80303d4:	460a      	mov	r2, r1
 80303d6:	4053      	eors	r3, r2
 80303d8:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 80303dc:	e9d7 12f4 	ldrd	r1, r2, [r7, #976]	; 0x3d0
 80303e0:	460b      	mov	r3, r1
 80303e2:	18e3      	adds	r3, r4, r3
 80303e4:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
 80303e8:	4613      	mov	r3, r2
 80303ea:	eb45 0303 	adc.w	r3, r5, r3
 80303ee:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 80303f2:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80303f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80303fa:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80303fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030402:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030406:	e9d3 0100 	ldrd	r0, r1, [r3]
 803040a:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 803040e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030412:	ea80 0602 	eor.w	r6, r0, r2
 8030416:	f8c7 63c0 	str.w	r6, [r7, #960]	; 0x3c0
 803041a:	404b      	eors	r3, r1
 803041c:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8030420:	e9d7 12f0 	ldrd	r1, r2, [r7, #960]	; 0x3c0
 8030424:	460b      	mov	r3, r1
 8030426:	4023      	ands	r3, r4
 8030428:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 803042c:	4613      	mov	r3, r2
 803042e:	402b      	ands	r3, r5
 8030430:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8030434:	e9d7 12ee 	ldrd	r1, r2, [r7, #952]	; 0x3b8
 8030438:	460b      	mov	r3, r1
 803043a:	ea88 0303 	eor.w	r3, r8, r3
 803043e:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8030442:	4613      	mov	r3, r2
 8030444:	ea89 0303 	eor.w	r3, r9, r3
 8030448:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 803044c:	e9d7 45f2 	ldrd	r4, r5, [r7, #968]	; 0x3c8
 8030450:	4623      	mov	r3, r4
 8030452:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	; 0x3b0
 8030456:	4602      	mov	r2, r0
 8030458:	189b      	adds	r3, r3, r2
 803045a:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 803045e:	462b      	mov	r3, r5
 8030460:	460a      	mov	r2, r1
 8030462:	4153      	adcs	r3, r2
 8030464:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8030468:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 803046c:	3303      	adds	r3, #3
 803046e:	4a2d      	ldr	r2, [pc, #180]	; (8030524 <sha512_compress+0xff0>)
 8030470:	00db      	lsls	r3, r3, #3
 8030472:	4413      	add	r3, r2
 8030474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030478:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 803047c:	4621      	mov	r1, r4
 803047e:	1889      	adds	r1, r1, r2
 8030480:	f8c7 13a0 	str.w	r1, [r7, #928]	; 0x3a0
 8030484:	4629      	mov	r1, r5
 8030486:	eb41 0303 	adc.w	r3, r1, r3
 803048a:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 803048e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030492:	3303      	adds	r3, #3
 8030494:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8030498:	00db      	lsls	r3, r3, #3
 803049a:	4413      	add	r3, r2
 803049c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80304a0:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 80304a4:	4621      	mov	r1, r4
 80304a6:	1889      	adds	r1, r1, r2
 80304a8:	64b9      	str	r1, [r7, #72]	; 0x48
 80304aa:	4629      	mov	r1, r5
 80304ac:	eb41 0303 	adc.w	r3, r1, r3
 80304b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80304b2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80304b6:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 80304ba:	e9c2 3400 	strd	r3, r4, [r2]
 80304be:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80304c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80304c6:	0118      	lsls	r0, r3, #4
 80304c8:	0f11      	lsrs	r1, r2, #28
 80304ca:	4301      	orrs	r1, r0
 80304cc:	f8c7 1398 	str.w	r1, [r7, #920]	; 0x398
 80304d0:	0111      	lsls	r1, r2, #4
 80304d2:	0f1b      	lsrs	r3, r3, #28
 80304d4:	430b      	orrs	r3, r1
 80304d6:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 80304da:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80304de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80304e2:	0890      	lsrs	r0, r2, #2
 80304e4:	0799      	lsls	r1, r3, #30
 80304e6:	4301      	orrs	r1, r0
 80304e8:	f8c7 1394 	str.w	r1, [r7, #916]	; 0x394
 80304ec:	0899      	lsrs	r1, r3, #2
 80304ee:	0793      	lsls	r3, r2, #30
 80304f0:	430b      	orrs	r3, r1
 80304f2:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 80304f6:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 80304fa:	4623      	mov	r3, r4
 80304fc:	e9d7 01e4 	ldrd	r0, r1, [r7, #912]	; 0x390
 8030500:	4602      	mov	r2, r0
 8030502:	4053      	eors	r3, r2
 8030504:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8030508:	462b      	mov	r3, r5
 803050a:	460a      	mov	r2, r1
 803050c:	4053      	eors	r3, r2
 803050e:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8030512:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8030516:	e9d3 2300 	ldrd	r2, r3, [r3]
 803051a:	09d0      	lsrs	r0, r2, #7
 803051c:	0659      	lsls	r1, r3, #25
 803051e:	4301      	orrs	r1, r0
 8030520:	e002      	b.n	8030528 <sha512_compress+0xff4>
 8030522:	bf00      	nop
 8030524:	0803e570 	.word	0x0803e570
 8030528:	f8c7 1384 	str.w	r1, [r7, #900]	; 0x384
 803052c:	09d9      	lsrs	r1, r3, #7
 803052e:	0653      	lsls	r3, r2, #25
 8030530:	430b      	orrs	r3, r1
 8030532:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
 8030536:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 803053a:	4623      	mov	r3, r4
 803053c:	e9d7 01e0 	ldrd	r0, r1, [r7, #896]	; 0x380
 8030540:	4602      	mov	r2, r0
 8030542:	4053      	eors	r3, r2
 8030544:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8030548:	462b      	mov	r3, r5
 803054a:	460a      	mov	r2, r1
 803054c:	4053      	eors	r3, r2
 803054e:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8030552:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8030556:	e9d3 0100 	ldrd	r0, r1, [r3]
 803055a:	f607 1348 	addw	r3, r7, #2376	; 0x948
 803055e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030562:	ea40 0402 	orr.w	r4, r0, r2
 8030566:	f8c7 4370 	str.w	r4, [r7, #880]	; 0x370
 803056a:	430b      	orrs	r3, r1
 803056c:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8030570:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8030574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030578:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	; 0x370
 803057c:	4621      	mov	r1, r4
 803057e:	4011      	ands	r1, r2
 8030580:	f8c7 1368 	str.w	r1, [r7, #872]	; 0x368
 8030584:	4629      	mov	r1, r5
 8030586:	400b      	ands	r3, r1
 8030588:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 803058c:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8030590:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030594:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030598:	e9d3 2300 	ldrd	r2, r3, [r3]
 803059c:	ea00 0402 	and.w	r4, r0, r2
 80305a0:	f8c7 4360 	str.w	r4, [r7, #864]	; 0x360
 80305a4:	400b      	ands	r3, r1
 80305a6:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 80305aa:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 80305ae:	4623      	mov	r3, r4
 80305b0:	e9d7 01d8 	ldrd	r0, r1, [r7, #864]	; 0x360
 80305b4:	4602      	mov	r2, r0
 80305b6:	4313      	orrs	r3, r2
 80305b8:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 80305bc:	462b      	mov	r3, r5
 80305be:	460a      	mov	r2, r1
 80305c0:	4313      	orrs	r3, r2
 80305c2:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80305c6:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 80305ca:	4623      	mov	r3, r4
 80305cc:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	; 0x358
 80305d0:	4602      	mov	r2, r0
 80305d2:	189b      	adds	r3, r3, r2
 80305d4:	643b      	str	r3, [r7, #64]	; 0x40
 80305d6:	462b      	mov	r3, r5
 80305d8:	460a      	mov	r2, r1
 80305da:	4153      	adcs	r3, r2
 80305dc:	647b      	str	r3, [r7, #68]	; 0x44
 80305de:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80305e2:	f607 1258 	addw	r2, r7, #2392	; 0x958
 80305e6:	e9c2 3400 	strd	r3, r4, [r2]
 80305ea:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80305ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80305f2:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80305f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80305fa:	1884      	adds	r4, r0, r2
 80305fc:	f8c7 4350 	str.w	r4, [r7, #848]	; 0x350
 8030600:	eb41 0303 	adc.w	r3, r1, r3
 8030604:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8030608:	e9d7 34d4 	ldrd	r3, r4, [r7, #848]	; 0x350
 803060c:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8030610:	e9c2 3400 	strd	r3, r4, [r2]
 8030614:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8030618:	e9d3 0100 	ldrd	r0, r1, [r3]
 803061c:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8030620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030624:	1884      	adds	r4, r0, r2
 8030626:	f8c7 4348 	str.w	r4, [r7, #840]	; 0x348
 803062a:	eb41 0303 	adc.w	r3, r1, r3
 803062e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8030632:	e9d7 34d2 	ldrd	r3, r4, [r7, #840]	; 0x348
 8030636:	f607 1238 	addw	r2, r7, #2360	; 0x938
 803063a:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[4],S[5],S[6],S[7],S[0],S[1],S[2],S[3],i+4);
 803063e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8030642:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030646:	f607 1318 	addw	r3, r7, #2328	; 0x918
 803064a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803064e:	0498      	lsls	r0, r3, #18
 8030650:	0b91      	lsrs	r1, r2, #14
 8030652:	4301      	orrs	r1, r0
 8030654:	f8c7 1340 	str.w	r1, [r7, #832]	; 0x340
 8030658:	0491      	lsls	r1, r2, #18
 803065a:	0b9b      	lsrs	r3, r3, #14
 803065c:	430b      	orrs	r3, r1
 803065e:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8030662:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8030666:	e9d3 2300 	ldrd	r2, r3, [r3]
 803066a:	0398      	lsls	r0, r3, #14
 803066c:	0c91      	lsrs	r1, r2, #18
 803066e:	4301      	orrs	r1, r0
 8030670:	f8c7 1338 	str.w	r1, [r7, #824]	; 0x338
 8030674:	0391      	lsls	r1, r2, #14
 8030676:	0c9b      	lsrs	r3, r3, #18
 8030678:	430b      	orrs	r3, r1
 803067a:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 803067e:	e9d7 89d0 	ldrd	r8, r9, [r7, #832]	; 0x340
 8030682:	4643      	mov	r3, r8
 8030684:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 8030688:	4602      	mov	r2, r0
 803068a:	4053      	eors	r3, r2
 803068c:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
 8030690:	464b      	mov	r3, r9
 8030692:	460a      	mov	r2, r1
 8030694:	4053      	eors	r3, r2
 8030696:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 803069a:	f607 1318 	addw	r3, r7, #2328	; 0x918
 803069e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80306a2:	0a50      	lsrs	r0, r2, #9
 80306a4:	05d9      	lsls	r1, r3, #23
 80306a6:	4301      	orrs	r1, r0
 80306a8:	f8c7 132c 	str.w	r1, [r7, #812]	; 0x32c
 80306ac:	0a59      	lsrs	r1, r3, #9
 80306ae:	05d3      	lsls	r3, r2, #23
 80306b0:	430b      	orrs	r3, r1
 80306b2:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80306b6:	e9d7 89cc 	ldrd	r8, r9, [r7, #816]	; 0x330
 80306ba:	4643      	mov	r3, r8
 80306bc:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 80306c0:	4602      	mov	r2, r0
 80306c2:	4053      	eors	r3, r2
 80306c4:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 80306c8:	464b      	mov	r3, r9
 80306ca:	460a      	mov	r2, r1
 80306cc:	4053      	eors	r3, r2
 80306ce:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80306d2:	e9d7 12c8 	ldrd	r1, r2, [r7, #800]	; 0x320
 80306d6:	460b      	mov	r3, r1
 80306d8:	18e3      	adds	r3, r4, r3
 80306da:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 80306de:	4613      	mov	r3, r2
 80306e0:	eb45 0303 	adc.w	r3, r5, r3
 80306e4:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 80306e8:	f607 1328 	addw	r3, r7, #2344	; 0x928
 80306ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80306f0:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80306f4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80306f8:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80306fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030700:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030708:	ea80 0602 	eor.w	r6, r0, r2
 803070c:	f8c7 6310 	str.w	r6, [r7, #784]	; 0x310
 8030710:	404b      	eors	r3, r1
 8030712:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8030716:	e9d7 12c4 	ldrd	r1, r2, [r7, #784]	; 0x310
 803071a:	460b      	mov	r3, r1
 803071c:	4023      	ands	r3, r4
 803071e:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8030722:	4613      	mov	r3, r2
 8030724:	402b      	ands	r3, r5
 8030726:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 803072a:	e9d7 12c2 	ldrd	r1, r2, [r7, #776]	; 0x308
 803072e:	460b      	mov	r3, r1
 8030730:	ea88 0303 	eor.w	r3, r8, r3
 8030734:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8030738:	4613      	mov	r3, r2
 803073a:	ea89 0303 	eor.w	r3, r9, r3
 803073e:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8030742:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	; 0x318
 8030746:	4623      	mov	r3, r4
 8030748:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 803074c:	4602      	mov	r2, r0
 803074e:	189b      	adds	r3, r3, r2
 8030750:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8030754:	462b      	mov	r3, r5
 8030756:	460a      	mov	r2, r1
 8030758:	4153      	adcs	r3, r2
 803075a:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 803075e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030762:	3304      	adds	r3, #4
 8030764:	4af4      	ldr	r2, [pc, #976]	; (8030b38 <sha512_compress+0x1604>)
 8030766:	00db      	lsls	r3, r3, #3
 8030768:	4413      	add	r3, r2
 803076a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803076e:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 8030772:	4621      	mov	r1, r4
 8030774:	1889      	adds	r1, r1, r2
 8030776:	f8c7 12f0 	str.w	r1, [r7, #752]	; 0x2f0
 803077a:	4629      	mov	r1, r5
 803077c:	eb41 0303 	adc.w	r3, r1, r3
 8030780:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8030784:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030788:	3304      	adds	r3, #4
 803078a:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 803078e:	00db      	lsls	r3, r3, #3
 8030790:	4413      	add	r3, r2
 8030792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030796:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	; 0x2f0
 803079a:	4621      	mov	r1, r4
 803079c:	1889      	adds	r1, r1, r2
 803079e:	63b9      	str	r1, [r7, #56]	; 0x38
 80307a0:	4629      	mov	r1, r5
 80307a2:	eb41 0303 	adc.w	r3, r1, r3
 80307a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80307a8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80307ac:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 80307b0:	e9c2 3400 	strd	r3, r4, [r2]
 80307b4:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80307b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80307bc:	0118      	lsls	r0, r3, #4
 80307be:	0f11      	lsrs	r1, r2, #28
 80307c0:	4301      	orrs	r1, r0
 80307c2:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 80307c6:	0111      	lsls	r1, r2, #4
 80307c8:	0f1b      	lsrs	r3, r3, #28
 80307ca:	430b      	orrs	r3, r1
 80307cc:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80307d0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80307d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80307d8:	0890      	lsrs	r0, r2, #2
 80307da:	0799      	lsls	r1, r3, #30
 80307dc:	4301      	orrs	r1, r0
 80307de:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
 80307e2:	0899      	lsrs	r1, r3, #2
 80307e4:	0793      	lsls	r3, r2, #30
 80307e6:	430b      	orrs	r3, r1
 80307e8:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80307ec:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	; 0x2e8
 80307f0:	4623      	mov	r3, r4
 80307f2:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	; 0x2e0
 80307f6:	4602      	mov	r2, r0
 80307f8:	4053      	eors	r3, r2
 80307fa:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 80307fe:	462b      	mov	r3, r5
 8030800:	460a      	mov	r2, r1
 8030802:	4053      	eors	r3, r2
 8030804:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8030808:	f607 1338 	addw	r3, r7, #2360	; 0x938
 803080c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030810:	09d0      	lsrs	r0, r2, #7
 8030812:	0659      	lsls	r1, r3, #25
 8030814:	4301      	orrs	r1, r0
 8030816:	f8c7 12d4 	str.w	r1, [r7, #724]	; 0x2d4
 803081a:	09d9      	lsrs	r1, r3, #7
 803081c:	0653      	lsls	r3, r2, #25
 803081e:	430b      	orrs	r3, r1
 8030820:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8030824:	e9d7 45b6 	ldrd	r4, r5, [r7, #728]	; 0x2d8
 8030828:	4623      	mov	r3, r4
 803082a:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	; 0x2d0
 803082e:	4602      	mov	r2, r0
 8030830:	4053      	eors	r3, r2
 8030832:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8030836:	462b      	mov	r3, r5
 8030838:	460a      	mov	r2, r1
 803083a:	4053      	eors	r3, r2
 803083c:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8030840:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8030844:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030848:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 803084c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030850:	ea40 0402 	orr.w	r4, r0, r2
 8030854:	f8c7 42c0 	str.w	r4, [r7, #704]	; 0x2c0
 8030858:	430b      	orrs	r3, r1
 803085a:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 803085e:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030866:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 803086a:	4621      	mov	r1, r4
 803086c:	4011      	ands	r1, r2
 803086e:	f8c7 12b8 	str.w	r1, [r7, #696]	; 0x2b8
 8030872:	4629      	mov	r1, r5
 8030874:	400b      	ands	r3, r1
 8030876:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 803087a:	f607 1338 	addw	r3, r7, #2360	; 0x938
 803087e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030882:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8030886:	e9d3 2300 	ldrd	r2, r3, [r3]
 803088a:	ea00 0402 	and.w	r4, r0, r2
 803088e:	f8c7 42b0 	str.w	r4, [r7, #688]	; 0x2b0
 8030892:	400b      	ands	r3, r1
 8030894:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8030898:	e9d7 45ae 	ldrd	r4, r5, [r7, #696]	; 0x2b8
 803089c:	4623      	mov	r3, r4
 803089e:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	; 0x2b0
 80308a2:	4602      	mov	r2, r0
 80308a4:	4313      	orrs	r3, r2
 80308a6:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 80308aa:	462b      	mov	r3, r5
 80308ac:	460a      	mov	r2, r1
 80308ae:	4313      	orrs	r3, r2
 80308b0:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80308b4:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	; 0x2c8
 80308b8:	4623      	mov	r3, r4
 80308ba:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	; 0x2a8
 80308be:	4602      	mov	r2, r0
 80308c0:	189b      	adds	r3, r3, r2
 80308c2:	633b      	str	r3, [r7, #48]	; 0x30
 80308c4:	462b      	mov	r3, r5
 80308c6:	460a      	mov	r2, r1
 80308c8:	4153      	adcs	r3, r2
 80308ca:	637b      	str	r3, [r7, #52]	; 0x34
 80308cc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80308d0:	f607 1258 	addw	r2, r7, #2392	; 0x958
 80308d4:	e9c2 3400 	strd	r3, r4, [r2]
 80308d8:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80308dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80308e0:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80308e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80308e8:	1884      	adds	r4, r0, r2
 80308ea:	f8c7 42a0 	str.w	r4, [r7, #672]	; 0x2a0
 80308ee:	eb41 0303 	adc.w	r3, r1, r3
 80308f2:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 80308f6:	e9d7 34a8 	ldrd	r3, r4, [r7, #672]	; 0x2a0
 80308fa:	f507 6215 	add.w	r2, r7, #2384	; 0x950
 80308fe:	e9c2 3400 	strd	r3, r4, [r2]
 8030902:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8030906:	e9d3 0100 	ldrd	r0, r1, [r3]
 803090a:	f607 1358 	addw	r3, r7, #2392	; 0x958
 803090e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030912:	1884      	adds	r4, r0, r2
 8030914:	f8c7 4298 	str.w	r4, [r7, #664]	; 0x298
 8030918:	eb41 0303 	adc.w	r3, r1, r3
 803091c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8030920:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 8030924:	f507 6213 	add.w	r2, r7, #2352	; 0x930
 8030928:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[3],S[4],S[5],S[6],S[7],S[0],S[1],S[2],i+5);
 803092c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030930:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030934:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8030938:	e9d3 2300 	ldrd	r2, r3, [r3]
 803093c:	0498      	lsls	r0, r3, #18
 803093e:	0b91      	lsrs	r1, r2, #14
 8030940:	4301      	orrs	r1, r0
 8030942:	f8c7 1290 	str.w	r1, [r7, #656]	; 0x290
 8030946:	0491      	lsls	r1, r2, #18
 8030948:	0b9b      	lsrs	r3, r3, #14
 803094a:	430b      	orrs	r3, r1
 803094c:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8030950:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8030954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030958:	0398      	lsls	r0, r3, #14
 803095a:	0c91      	lsrs	r1, r2, #18
 803095c:	4301      	orrs	r1, r0
 803095e:	f8c7 1288 	str.w	r1, [r7, #648]	; 0x288
 8030962:	0391      	lsls	r1, r2, #14
 8030964:	0c9b      	lsrs	r3, r3, #18
 8030966:	430b      	orrs	r3, r1
 8030968:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 803096c:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	; 0x290
 8030970:	4643      	mov	r3, r8
 8030972:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	; 0x288
 8030976:	4602      	mov	r2, r0
 8030978:	4053      	eors	r3, r2
 803097a:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 803097e:	464b      	mov	r3, r9
 8030980:	460a      	mov	r2, r1
 8030982:	4053      	eors	r3, r2
 8030984:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 8030988:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 803098c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030990:	0a50      	lsrs	r0, r2, #9
 8030992:	05d9      	lsls	r1, r3, #23
 8030994:	4301      	orrs	r1, r0
 8030996:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 803099a:	0a59      	lsrs	r1, r3, #9
 803099c:	05d3      	lsls	r3, r2, #23
 803099e:	430b      	orrs	r3, r1
 80309a0:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
 80309a4:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	; 0x280
 80309a8:	4643      	mov	r3, r8
 80309aa:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80309ae:	4602      	mov	r2, r0
 80309b0:	4053      	eors	r3, r2
 80309b2:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 80309b6:	464b      	mov	r3, r9
 80309b8:	460a      	mov	r2, r1
 80309ba:	4053      	eors	r3, r2
 80309bc:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80309c0:	e9d7 129c 	ldrd	r1, r2, [r7, #624]	; 0x270
 80309c4:	460b      	mov	r3, r1
 80309c6:	18e3      	adds	r3, r4, r3
 80309c8:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80309cc:	4613      	mov	r3, r2
 80309ce:	eb45 0303 	adc.w	r3, r5, r3
 80309d2:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80309d6:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80309da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80309de:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80309e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80309e6:	f607 1318 	addw	r3, r7, #2328	; 0x918
 80309ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80309ee:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80309f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80309f6:	ea80 0602 	eor.w	r6, r0, r2
 80309fa:	f8c7 6260 	str.w	r6, [r7, #608]	; 0x260
 80309fe:	404b      	eors	r3, r1
 8030a00:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8030a04:	e9d7 1298 	ldrd	r1, r2, [r7, #608]	; 0x260
 8030a08:	460b      	mov	r3, r1
 8030a0a:	4023      	ands	r3, r4
 8030a0c:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8030a10:	4613      	mov	r3, r2
 8030a12:	402b      	ands	r3, r5
 8030a14:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8030a18:	e9d7 1296 	ldrd	r1, r2, [r7, #600]	; 0x258
 8030a1c:	460b      	mov	r3, r1
 8030a1e:	ea88 0303 	eor.w	r3, r8, r3
 8030a22:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8030a26:	4613      	mov	r3, r2
 8030a28:	ea89 0303 	eor.w	r3, r9, r3
 8030a2c:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8030a30:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 8030a34:	4623      	mov	r3, r4
 8030a36:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	; 0x250
 8030a3a:	4602      	mov	r2, r0
 8030a3c:	189b      	adds	r3, r3, r2
 8030a3e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8030a42:	462b      	mov	r3, r5
 8030a44:	460a      	mov	r2, r1
 8030a46:	4153      	adcs	r3, r2
 8030a48:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8030a4c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030a50:	3305      	adds	r3, #5
 8030a52:	4a39      	ldr	r2, [pc, #228]	; (8030b38 <sha512_compress+0x1604>)
 8030a54:	00db      	lsls	r3, r3, #3
 8030a56:	4413      	add	r3, r2
 8030a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030a5c:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	; 0x248
 8030a60:	4621      	mov	r1, r4
 8030a62:	1889      	adds	r1, r1, r2
 8030a64:	f8c7 1240 	str.w	r1, [r7, #576]	; 0x240
 8030a68:	4629      	mov	r1, r5
 8030a6a:	eb41 0303 	adc.w	r3, r1, r3
 8030a6e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8030a72:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030a76:	3305      	adds	r3, #5
 8030a78:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8030a7c:	00db      	lsls	r3, r3, #3
 8030a7e:	4413      	add	r3, r2
 8030a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030a84:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 8030a88:	4621      	mov	r1, r4
 8030a8a:	1889      	adds	r1, r1, r2
 8030a8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8030a8e:	4629      	mov	r1, r5
 8030a90:	eb41 0303 	adc.w	r3, r1, r3
 8030a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8030a96:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8030a9a:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8030a9e:	e9c2 3400 	strd	r3, r4, [r2]
 8030aa2:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8030aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030aaa:	0118      	lsls	r0, r3, #4
 8030aac:	0f11      	lsrs	r1, r2, #28
 8030aae:	4301      	orrs	r1, r0
 8030ab0:	f8c7 1238 	str.w	r1, [r7, #568]	; 0x238
 8030ab4:	0111      	lsls	r1, r2, #4
 8030ab6:	0f1b      	lsrs	r3, r3, #28
 8030ab8:	430b      	orrs	r3, r1
 8030aba:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8030abe:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8030ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030ac6:	0890      	lsrs	r0, r2, #2
 8030ac8:	0799      	lsls	r1, r3, #30
 8030aca:	4301      	orrs	r1, r0
 8030acc:	f8c7 1234 	str.w	r1, [r7, #564]	; 0x234
 8030ad0:	0899      	lsrs	r1, r3, #2
 8030ad2:	0793      	lsls	r3, r2, #30
 8030ad4:	430b      	orrs	r3, r1
 8030ad6:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8030ada:	e9d7 458e 	ldrd	r4, r5, [r7, #568]	; 0x238
 8030ade:	4623      	mov	r3, r4
 8030ae0:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 8030ae4:	4602      	mov	r2, r0
 8030ae6:	4053      	eors	r3, r2
 8030ae8:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8030aec:	462b      	mov	r3, r5
 8030aee:	460a      	mov	r2, r1
 8030af0:	4053      	eors	r3, r2
 8030af2:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8030af6:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8030afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030afe:	09d0      	lsrs	r0, r2, #7
 8030b00:	0659      	lsls	r1, r3, #25
 8030b02:	4301      	orrs	r1, r0
 8030b04:	f8c7 1224 	str.w	r1, [r7, #548]	; 0x224
 8030b08:	09d9      	lsrs	r1, r3, #7
 8030b0a:	0653      	lsls	r3, r2, #25
 8030b0c:	430b      	orrs	r3, r1
 8030b0e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8030b12:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	; 0x228
 8030b16:	4623      	mov	r3, r4
 8030b18:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8030b1c:	4602      	mov	r2, r0
 8030b1e:	4053      	eors	r3, r2
 8030b20:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8030b24:	462b      	mov	r3, r5
 8030b26:	460a      	mov	r2, r1
 8030b28:	4053      	eors	r3, r2
 8030b2a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8030b2e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8030b32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030b36:	e001      	b.n	8030b3c <sha512_compress+0x1608>
 8030b38:	0803e570 	.word	0x0803e570
 8030b3c:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8030b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030b44:	ea40 0402 	orr.w	r4, r0, r2
 8030b48:	f8c7 4210 	str.w	r4, [r7, #528]	; 0x210
 8030b4c:	430b      	orrs	r3, r1
 8030b4e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8030b52:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8030b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030b5a:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	; 0x210
 8030b5e:	4621      	mov	r1, r4
 8030b60:	4011      	ands	r1, r2
 8030b62:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8030b66:	4629      	mov	r1, r5
 8030b68:	400b      	ands	r3, r1
 8030b6a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8030b6e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8030b72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030b76:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8030b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030b7e:	ea00 0402 	and.w	r4, r0, r2
 8030b82:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8030b86:	400b      	ands	r3, r1
 8030b88:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8030b8c:	e9d7 4582 	ldrd	r4, r5, [r7, #520]	; 0x208
 8030b90:	4623      	mov	r3, r4
 8030b92:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	; 0x200
 8030b96:	4602      	mov	r2, r0
 8030b98:	4313      	orrs	r3, r2
 8030b9a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8030b9e:	462b      	mov	r3, r5
 8030ba0:	460a      	mov	r2, r1
 8030ba2:	4313      	orrs	r3, r2
 8030ba4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8030ba8:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8030bac:	4623      	mov	r3, r4
 8030bae:	e9d7 017e 	ldrd	r0, r1, [r7, #504]	; 0x1f8
 8030bb2:	4602      	mov	r2, r0
 8030bb4:	189b      	adds	r3, r3, r2
 8030bb6:	623b      	str	r3, [r7, #32]
 8030bb8:	462b      	mov	r3, r5
 8030bba:	460a      	mov	r2, r1
 8030bbc:	4153      	adcs	r3, r2
 8030bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8030bc0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8030bc4:	f607 1258 	addw	r2, r7, #2392	; 0x958
 8030bc8:	e9c2 3400 	strd	r3, r4, [r2]
 8030bcc:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030bd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030bd4:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8030bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030bdc:	1884      	adds	r4, r0, r2
 8030bde:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8030be2:	eb41 0303 	adc.w	r3, r1, r3
 8030be6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8030bea:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8030bee:	f607 1248 	addw	r2, r7, #2376	; 0x948
 8030bf2:	e9c2 3400 	strd	r3, r4, [r2]
 8030bf6:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8030bfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030bfe:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8030c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030c06:	1884      	adds	r4, r0, r2
 8030c08:	f8c7 41e8 	str.w	r4, [r7, #488]	; 0x1e8
 8030c0c:	eb41 0303 	adc.w	r3, r1, r3
 8030c10:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8030c14:	e9d7 347a 	ldrd	r3, r4, [r7, #488]	; 0x1e8
 8030c18:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8030c1c:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[2],S[3],S[4],S[5],S[6],S[7],S[0],S[1],i+6);
 8030c20:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8030c24:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030c28:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030c30:	0498      	lsls	r0, r3, #18
 8030c32:	0b91      	lsrs	r1, r2, #14
 8030c34:	4301      	orrs	r1, r0
 8030c36:	f8c7 11e0 	str.w	r1, [r7, #480]	; 0x1e0
 8030c3a:	0491      	lsls	r1, r2, #18
 8030c3c:	0b9b      	lsrs	r3, r3, #14
 8030c3e:	430b      	orrs	r3, r1
 8030c40:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8030c44:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030c4c:	0398      	lsls	r0, r3, #14
 8030c4e:	0c91      	lsrs	r1, r2, #18
 8030c50:	4301      	orrs	r1, r0
 8030c52:	f8c7 11d8 	str.w	r1, [r7, #472]	; 0x1d8
 8030c56:	0391      	lsls	r1, r2, #14
 8030c58:	0c9b      	lsrs	r3, r3, #18
 8030c5a:	430b      	orrs	r3, r1
 8030c5c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8030c60:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	; 0x1e0
 8030c64:	4643      	mov	r3, r8
 8030c66:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	; 0x1d8
 8030c6a:	4602      	mov	r2, r0
 8030c6c:	4053      	eors	r3, r2
 8030c6e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8030c72:	464b      	mov	r3, r9
 8030c74:	460a      	mov	r2, r1
 8030c76:	4053      	eors	r3, r2
 8030c78:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8030c7c:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030c84:	0a50      	lsrs	r0, r2, #9
 8030c86:	05d9      	lsls	r1, r3, #23
 8030c88:	4301      	orrs	r1, r0
 8030c8a:	f8c7 11cc 	str.w	r1, [r7, #460]	; 0x1cc
 8030c8e:	0a59      	lsrs	r1, r3, #9
 8030c90:	05d3      	lsls	r3, r2, #23
 8030c92:	430b      	orrs	r3, r1
 8030c94:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8030c98:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	; 0x1d0
 8030c9c:	4643      	mov	r3, r8
 8030c9e:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	; 0x1c8
 8030ca2:	4602      	mov	r2, r0
 8030ca4:	4053      	eors	r3, r2
 8030ca6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8030caa:	464b      	mov	r3, r9
 8030cac:	460a      	mov	r2, r1
 8030cae:	4053      	eors	r3, r2
 8030cb0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8030cb4:	e9d7 1270 	ldrd	r1, r2, [r7, #448]	; 0x1c0
 8030cb8:	460b      	mov	r3, r1
 8030cba:	18e3      	adds	r3, r4, r3
 8030cbc:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8030cc0:	4613      	mov	r3, r2
 8030cc2:	eb45 0303 	adc.w	r3, r5, r3
 8030cc6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8030cca:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8030cce:	e9d3 8900 	ldrd	r8, r9, [r3]
 8030cd2:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030cd6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030cda:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8030cde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030ce2:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8030ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030cea:	ea80 0602 	eor.w	r6, r0, r2
 8030cee:	f8c7 61b0 	str.w	r6, [r7, #432]	; 0x1b0
 8030cf2:	404b      	eors	r3, r1
 8030cf4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8030cf8:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8030cfc:	460b      	mov	r3, r1
 8030cfe:	4023      	ands	r3, r4
 8030d00:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8030d04:	4613      	mov	r3, r2
 8030d06:	402b      	ands	r3, r5
 8030d08:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8030d0c:	e9d7 126a 	ldrd	r1, r2, [r7, #424]	; 0x1a8
 8030d10:	460b      	mov	r3, r1
 8030d12:	ea88 0303 	eor.w	r3, r8, r3
 8030d16:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8030d1a:	4613      	mov	r3, r2
 8030d1c:	ea89 0303 	eor.w	r3, r9, r3
 8030d20:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8030d24:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8030d28:	4623      	mov	r3, r4
 8030d2a:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8030d2e:	4602      	mov	r2, r0
 8030d30:	189b      	adds	r3, r3, r2
 8030d32:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8030d36:	462b      	mov	r3, r5
 8030d38:	460a      	mov	r2, r1
 8030d3a:	4153      	adcs	r3, r2
 8030d3c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8030d40:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030d44:	3306      	adds	r3, #6
 8030d46:	4af5      	ldr	r2, [pc, #980]	; (803111c <sha512_compress+0x1be8>)
 8030d48:	00db      	lsls	r3, r3, #3
 8030d4a:	4413      	add	r3, r2
 8030d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030d50:	e9d7 4566 	ldrd	r4, r5, [r7, #408]	; 0x198
 8030d54:	4621      	mov	r1, r4
 8030d56:	1889      	adds	r1, r1, r2
 8030d58:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8030d5c:	4629      	mov	r1, r5
 8030d5e:	eb41 0303 	adc.w	r3, r1, r3
 8030d62:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8030d66:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8030d6a:	3306      	adds	r3, #6
 8030d6c:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8030d70:	00db      	lsls	r3, r3, #3
 8030d72:	4413      	add	r3, r2
 8030d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030d78:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8030d7c:	4621      	mov	r1, r4
 8030d7e:	1889      	adds	r1, r1, r2
 8030d80:	61b9      	str	r1, [r7, #24]
 8030d82:	4629      	mov	r1, r5
 8030d84:	eb41 0303 	adc.w	r3, r1, r3
 8030d88:	61fb      	str	r3, [r7, #28]
 8030d8a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8030d8e:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8030d92:	e9c2 3400 	strd	r3, r4, [r2]
 8030d96:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030d9e:	0118      	lsls	r0, r3, #4
 8030da0:	0f11      	lsrs	r1, r2, #28
 8030da2:	4301      	orrs	r1, r0
 8030da4:	f8c7 1188 	str.w	r1, [r7, #392]	; 0x188
 8030da8:	0111      	lsls	r1, r2, #4
 8030daa:	0f1b      	lsrs	r3, r3, #28
 8030dac:	430b      	orrs	r3, r1
 8030dae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8030db2:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030dba:	0890      	lsrs	r0, r2, #2
 8030dbc:	0799      	lsls	r1, r3, #30
 8030dbe:	4301      	orrs	r1, r0
 8030dc0:	f8c7 1184 	str.w	r1, [r7, #388]	; 0x184
 8030dc4:	0899      	lsrs	r1, r3, #2
 8030dc6:	0793      	lsls	r3, r2, #30
 8030dc8:	430b      	orrs	r3, r1
 8030dca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8030dce:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8030dd2:	4623      	mov	r3, r4
 8030dd4:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8030dd8:	4602      	mov	r2, r0
 8030dda:	4053      	eors	r3, r2
 8030ddc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8030de0:	462b      	mov	r3, r5
 8030de2:	460a      	mov	r2, r1
 8030de4:	4053      	eors	r3, r2
 8030de6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8030dea:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030df2:	09d0      	lsrs	r0, r2, #7
 8030df4:	0659      	lsls	r1, r3, #25
 8030df6:	4301      	orrs	r1, r0
 8030df8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
 8030dfc:	09d9      	lsrs	r1, r3, #7
 8030dfe:	0653      	lsls	r3, r2, #25
 8030e00:	430b      	orrs	r3, r1
 8030e02:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8030e06:	e9d7 455e 	ldrd	r4, r5, [r7, #376]	; 0x178
 8030e0a:	4623      	mov	r3, r4
 8030e0c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8030e10:	4602      	mov	r2, r0
 8030e12:	4053      	eors	r3, r2
 8030e14:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8030e18:	462b      	mov	r3, r5
 8030e1a:	460a      	mov	r2, r1
 8030e1c:	4053      	eors	r3, r2
 8030e1e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8030e22:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030e26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030e2a:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8030e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030e32:	ea40 0402 	orr.w	r4, r0, r2
 8030e36:	f8c7 4160 	str.w	r4, [r7, #352]	; 0x160
 8030e3a:	430b      	orrs	r3, r1
 8030e3c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8030e40:	f607 1338 	addw	r3, r7, #2360	; 0x938
 8030e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030e48:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8030e4c:	4621      	mov	r1, r4
 8030e4e:	4011      	ands	r1, r2
 8030e50:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
 8030e54:	4629      	mov	r1, r5
 8030e56:	400b      	ands	r3, r1
 8030e58:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8030e5c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8030e60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030e64:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8030e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030e6c:	ea00 0402 	and.w	r4, r0, r2
 8030e70:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8030e74:	400b      	ands	r3, r1
 8030e76:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8030e7a:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8030e7e:	4623      	mov	r3, r4
 8030e80:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8030e84:	4602      	mov	r2, r0
 8030e86:	4313      	orrs	r3, r2
 8030e88:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8030e8c:	462b      	mov	r3, r5
 8030e8e:	460a      	mov	r2, r1
 8030e90:	4313      	orrs	r3, r2
 8030e92:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8030e96:	e9d7 455a 	ldrd	r4, r5, [r7, #360]	; 0x168
 8030e9a:	4623      	mov	r3, r4
 8030e9c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8030ea0:	4602      	mov	r2, r0
 8030ea2:	189b      	adds	r3, r3, r2
 8030ea4:	613b      	str	r3, [r7, #16]
 8030ea6:	462b      	mov	r3, r5
 8030ea8:	460a      	mov	r2, r1
 8030eaa:	4153      	adcs	r3, r2
 8030eac:	617b      	str	r3, [r7, #20]
 8030eae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8030eb2:	f607 1258 	addw	r2, r7, #2392	; 0x958
 8030eb6:	e9c2 3400 	strd	r3, r4, [r2]
 8030eba:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8030ebe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030ec2:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8030ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030eca:	1884      	adds	r4, r0, r2
 8030ecc:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8030ed0:	eb41 0303 	adc.w	r3, r1, r3
 8030ed4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8030ed8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8030edc:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8030ee0:	e9c2 3400 	strd	r3, r4, [r2]
 8030ee4:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8030ee8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030eec:	f607 1358 	addw	r3, r7, #2392	; 0x958
 8030ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030ef4:	1884      	adds	r4, r0, r2
 8030ef6:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8030efa:	eb41 0303 	adc.w	r3, r1, r3
 8030efe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8030f02:	e9d7 344e 	ldrd	r3, r4, [r7, #312]	; 0x138
 8030f06:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8030f0a:	e9c2 3400 	strd	r3, r4, [r2]
       RND(S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[0],i+7);
 8030f0e:	f607 1318 	addw	r3, r7, #2328	; 0x918
 8030f12:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030f16:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8030f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030f1e:	0498      	lsls	r0, r3, #18
 8030f20:	0b91      	lsrs	r1, r2, #14
 8030f22:	4301      	orrs	r1, r0
 8030f24:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8030f28:	0491      	lsls	r1, r2, #18
 8030f2a:	0b9b      	lsrs	r3, r3, #14
 8030f2c:	430b      	orrs	r3, r1
 8030f2e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8030f32:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8030f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030f3a:	0398      	lsls	r0, r3, #14
 8030f3c:	0c91      	lsrs	r1, r2, #18
 8030f3e:	4301      	orrs	r1, r0
 8030f40:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8030f44:	0391      	lsls	r1, r2, #14
 8030f46:	0c9b      	lsrs	r3, r3, #18
 8030f48:	430b      	orrs	r3, r1
 8030f4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8030f4e:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8030f52:	4643      	mov	r3, r8
 8030f54:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8030f58:	4602      	mov	r2, r0
 8030f5a:	4053      	eors	r3, r2
 8030f5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8030f60:	464b      	mov	r3, r9
 8030f62:	460a      	mov	r2, r1
 8030f64:	4053      	eors	r3, r2
 8030f66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8030f6a:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8030f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030f72:	0a50      	lsrs	r0, r2, #9
 8030f74:	05d9      	lsls	r1, r3, #23
 8030f76:	4301      	orrs	r1, r0
 8030f78:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8030f7c:	0a59      	lsrs	r1, r3, #9
 8030f7e:	05d3      	lsls	r3, r2, #23
 8030f80:	430b      	orrs	r3, r1
 8030f82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8030f86:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8030f8a:	4643      	mov	r3, r8
 8030f8c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8030f90:	4602      	mov	r2, r0
 8030f92:	4053      	eors	r3, r2
 8030f94:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8030f98:	464b      	mov	r3, r9
 8030f9a:	460a      	mov	r2, r1
 8030f9c:	4053      	eors	r3, r2
 8030f9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8030fa2:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8030fa6:	460b      	mov	r3, r1
 8030fa8:	18e3      	adds	r3, r4, r3
 8030faa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8030fae:	4613      	mov	r3, r2
 8030fb0:	eb45 0303 	adc.w	r3, r5, r3
 8030fb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8030fb8:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8030fbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8030fc0:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8030fc4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8030fc8:	f607 1348 	addw	r3, r7, #2376	; 0x948
 8030fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8030fd0:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8030fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030fd8:	ea80 0602 	eor.w	r6, r0, r2
 8030fdc:	f8c7 6100 	str.w	r6, [r7, #256]	; 0x100
 8030fe0:	404b      	eors	r3, r1
 8030fe2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8030fe6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8030fea:	460b      	mov	r3, r1
 8030fec:	4023      	ands	r3, r4
 8030fee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8030ff2:	4613      	mov	r3, r2
 8030ff4:	402b      	ands	r3, r5
 8030ff6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8030ffa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8030ffe:	460b      	mov	r3, r1
 8031000:	ea88 0303 	eor.w	r3, r8, r3
 8031004:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8031008:	4613      	mov	r3, r2
 803100a:	ea89 0303 	eor.w	r3, r9, r3
 803100e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8031012:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8031016:	4623      	mov	r3, r4
 8031018:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 803101c:	4602      	mov	r2, r0
 803101e:	189b      	adds	r3, r3, r2
 8031020:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8031024:	462b      	mov	r3, r5
 8031026:	460a      	mov	r2, r1
 8031028:	4153      	adcs	r3, r2
 803102a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 803102e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8031032:	3307      	adds	r3, #7
 8031034:	4a39      	ldr	r2, [pc, #228]	; (803111c <sha512_compress+0x1be8>)
 8031036:	00db      	lsls	r3, r3, #3
 8031038:	4413      	add	r3, r2
 803103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803103e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8031042:	4621      	mov	r1, r4
 8031044:	1889      	adds	r1, r1, r2
 8031046:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 803104a:	4629      	mov	r1, r5
 803104c:	eb41 0303 	adc.w	r3, r1, r3
 8031050:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8031054:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8031058:	3307      	adds	r3, #7
 803105a:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 803105e:	00db      	lsls	r3, r3, #3
 8031060:	4413      	add	r3, r2
 8031062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031066:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 803106a:	4621      	mov	r1, r4
 803106c:	1889      	adds	r1, r1, r2
 803106e:	60b9      	str	r1, [r7, #8]
 8031070:	4629      	mov	r1, r5
 8031072:	eb41 0303 	adc.w	r3, r1, r3
 8031076:	60fb      	str	r3, [r7, #12]
 8031078:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 803107c:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8031080:	e9c2 3400 	strd	r3, r4, [r2]
 8031084:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8031088:	e9d3 2300 	ldrd	r2, r3, [r3]
 803108c:	0118      	lsls	r0, r3, #4
 803108e:	0f11      	lsrs	r1, r2, #28
 8031090:	4301      	orrs	r1, r0
 8031092:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8031096:	0111      	lsls	r1, r2, #4
 8031098:	0f1b      	lsrs	r3, r3, #28
 803109a:	430b      	orrs	r3, r1
 803109c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80310a0:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80310a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80310a8:	0890      	lsrs	r0, r2, #2
 80310aa:	0799      	lsls	r1, r3, #30
 80310ac:	4301      	orrs	r1, r0
 80310ae:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 80310b2:	0899      	lsrs	r1, r3, #2
 80310b4:	0793      	lsls	r3, r2, #30
 80310b6:	430b      	orrs	r3, r1
 80310b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80310bc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80310c0:	4623      	mov	r3, r4
 80310c2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80310c6:	4602      	mov	r2, r0
 80310c8:	4053      	eors	r3, r2
 80310ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80310ce:	462b      	mov	r3, r5
 80310d0:	460a      	mov	r2, r1
 80310d2:	4053      	eors	r3, r2
 80310d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80310d8:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80310dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80310e0:	09d0      	lsrs	r0, r2, #7
 80310e2:	0659      	lsls	r1, r3, #25
 80310e4:	4301      	orrs	r1, r0
 80310e6:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 80310ea:	09d9      	lsrs	r1, r3, #7
 80310ec:	0653      	lsls	r3, r2, #25
 80310ee:	430b      	orrs	r3, r1
 80310f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80310f4:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80310f8:	4623      	mov	r3, r4
 80310fa:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80310fe:	4602      	mov	r2, r0
 8031100:	4053      	eors	r3, r2
 8031102:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8031106:	462b      	mov	r3, r5
 8031108:	460a      	mov	r2, r1
 803110a:	4053      	eors	r3, r2
 803110c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8031110:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8031114:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031118:	e002      	b.n	8031120 <sha512_compress+0x1bec>
 803111a:	bf00      	nop
 803111c:	0803e570 	.word	0x0803e570
 8031120:	f607 1328 	addw	r3, r7, #2344	; 0x928
 8031124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031128:	ea40 0402 	orr.w	r4, r0, r2
 803112c:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8031130:	430b      	orrs	r3, r1
 8031132:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8031136:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 803113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803113e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8031142:	4621      	mov	r1, r4
 8031144:	4011      	ands	r1, r2
 8031146:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 803114a:	4629      	mov	r1, r5
 803114c:	400b      	ands	r3, r1
 803114e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8031152:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8031156:	e9d3 0100 	ldrd	r0, r1, [r3]
 803115a:	f607 1328 	addw	r3, r7, #2344	; 0x928
 803115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031162:	ea00 0402 	and.w	r4, r0, r2
 8031166:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 803116a:	400b      	ands	r3, r1
 803116c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8031170:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8031174:	4623      	mov	r3, r4
 8031176:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 803117a:	4602      	mov	r2, r0
 803117c:	4313      	orrs	r3, r2
 803117e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8031182:	462b      	mov	r3, r5
 8031184:	460a      	mov	r2, r1
 8031186:	4313      	orrs	r3, r2
 8031188:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 803118c:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8031190:	4623      	mov	r3, r4
 8031192:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8031196:	4602      	mov	r2, r0
 8031198:	189b      	adds	r3, r3, r2
 803119a:	603b      	str	r3, [r7, #0]
 803119c:	462b      	mov	r3, r5
 803119e:	460a      	mov	r2, r1
 80311a0:	4153      	adcs	r3, r2
 80311a2:	607b      	str	r3, [r7, #4]
 80311a4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80311a8:	f607 1258 	addw	r2, r7, #2392	; 0x958
 80311ac:	e9c2 3400 	strd	r3, r4, [r2]
 80311b0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 80311b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80311b8:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80311bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80311c0:	1884      	adds	r4, r0, r2
 80311c2:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80311c6:	eb41 0303 	adc.w	r3, r1, r3
 80311ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80311ce:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80311d2:	f607 1238 	addw	r2, r7, #2360	; 0x938
 80311d6:	e9c2 3400 	strd	r3, r4, [r2]
 80311da:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80311de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80311e2:	f607 1358 	addw	r3, r7, #2392	; 0x958
 80311e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80311ea:	1884      	adds	r4, r0, r2
 80311ec:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80311f0:	eb41 0303 	adc.w	r3, r1, r3
 80311f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80311f8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80311fc:	f607 1218 	addw	r2, r7, #2328	; 0x918
 8031200:	e9c2 3400 	strd	r3, r4, [r2]
    for (i = 0; i < 80; i += 8) {
 8031204:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8031208:	3308      	adds	r3, #8
 803120a:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 803120e:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8031212:	2b4f      	cmp	r3, #79	; 0x4f
 8031214:	f77e abb0 	ble.w	802f978 <sha512_compress+0x444>
   #undef RND



    /* feedback */
   for (i = 0; i < 8; i++) {
 8031218:	2300      	movs	r3, #0
 803121a:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 803121e:	e02a      	b.n	8031276 <sha512_compress+0x1d42>
        md->state[i] = md->state[i] + S[i];
 8031220:	f207 6394 	addw	r3, r7, #1684	; 0x694
 8031224:	681a      	ldr	r2, [r3, #0]
 8031226:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 803122a:	3301      	adds	r3, #1
 803122c:	00db      	lsls	r3, r3, #3
 803122e:	4413      	add	r3, r2
 8031230:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031234:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8031238:	00db      	lsls	r3, r3, #3
 803123a:	f507 6217 	add.w	r2, r7, #2416	; 0x970
 803123e:	4413      	add	r3, r2
 8031240:	3b58      	subs	r3, #88	; 0x58
 8031242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031246:	1884      	adds	r4, r0, r2
 8031248:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 803124c:	eb41 0303 	adc.w	r3, r1, r3
 8031250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8031254:	f207 6394 	addw	r3, r7, #1684	; 0x694
 8031258:	681a      	ldr	r2, [r3, #0]
 803125a:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 803125e:	3301      	adds	r3, #1
 8031260:	00db      	lsls	r3, r3, #3
 8031262:	4413      	add	r3, r2
 8031264:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8031268:	e9c3 1200 	strd	r1, r2, [r3]
   for (i = 0; i < 8; i++) {
 803126c:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 8031270:	3301      	adds	r3, #1
 8031272:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8031276:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 803127a:	2b07      	cmp	r3, #7
 803127c:	ddd0      	ble.n	8031220 <sha512_compress+0x1cec>
    }

    return 0;
 803127e:	2300      	movs	r3, #0
}
 8031280:	4618      	mov	r0, r3
 8031282:	f507 6717 	add.w	r7, r7, #2416	; 0x970
 8031286:	46bd      	mov	sp, r7
 8031288:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 803128c:	4770      	bx	lr
 803128e:	bf00      	nop

08031290 <sha512_init>:
/**
   Initialize the hash state
   @param md   The hash state you wish to initialize
   @return 0 if successful
*/
int sha512_init(sha512_context * md) {
 8031290:	b480      	push	{r7}
 8031292:	b083      	sub	sp, #12
 8031294:	af00      	add	r7, sp, #0
 8031296:	6078      	str	r0, [r7, #4]
    if (md == NULL) return 1;
 8031298:	687b      	ldr	r3, [r7, #4]
 803129a:	2b00      	cmp	r3, #0
 803129c:	d101      	bne.n	80312a2 <sha512_init+0x12>
 803129e:	2301      	movs	r3, #1
 80312a0:	e03a      	b.n	8031318 <sha512_init+0x88>

    md->curlen = 0;
 80312a2:	687b      	ldr	r3, [r7, #4]
 80312a4:	2200      	movs	r2, #0
 80312a6:	649a      	str	r2, [r3, #72]	; 0x48
    md->length = 0;
 80312a8:	6879      	ldr	r1, [r7, #4]
 80312aa:	f04f 0200 	mov.w	r2, #0
 80312ae:	f04f 0300 	mov.w	r3, #0
 80312b2:	e9c1 2300 	strd	r2, r3, [r1]
    md->state[0] = (0x6a09e667f3bcc908);
 80312b6:	6879      	ldr	r1, [r7, #4]
 80312b8:	a31b      	add	r3, pc, #108	; (adr r3, 8031328 <sha512_init+0x98>)
 80312ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80312be:	e9c1 2302 	strd	r2, r3, [r1, #8]
    md->state[1] = (0xbb67ae8584caa73b);
 80312c2:	6879      	ldr	r1, [r7, #4]
 80312c4:	a31a      	add	r3, pc, #104	; (adr r3, 8031330 <sha512_init+0xa0>)
 80312c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80312ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
    md->state[2] = (0x3c6ef372fe94f82b);
 80312ce:	6879      	ldr	r1, [r7, #4]
 80312d0:	a319      	add	r3, pc, #100	; (adr r3, 8031338 <sha512_init+0xa8>)
 80312d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80312d6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    md->state[3] = (0xa54ff53a5f1d36f1);
 80312da:	6879      	ldr	r1, [r7, #4]
 80312dc:	a318      	add	r3, pc, #96	; (adr r3, 8031340 <sha512_init+0xb0>)
 80312de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80312e2:	e9c1 2308 	strd	r2, r3, [r1, #32]
    md->state[4] = (0x510e527fade682d1);
 80312e6:	6879      	ldr	r1, [r7, #4]
 80312e8:	a317      	add	r3, pc, #92	; (adr r3, 8031348 <sha512_init+0xb8>)
 80312ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80312ee:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    md->state[5] = (0x9b05688c2b3e6c1f);
 80312f2:	6879      	ldr	r1, [r7, #4]
 80312f4:	a316      	add	r3, pc, #88	; (adr r3, 8031350 <sha512_init+0xc0>)
 80312f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80312fa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    md->state[6] = (0x1f83d9abfb41bd6b);
 80312fe:	6879      	ldr	r1, [r7, #4]
 8031300:	a315      	add	r3, pc, #84	; (adr r3, 8031358 <sha512_init+0xc8>)
 8031302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031306:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    md->state[7] = (0x5be0cd19137e2179);
 803130a:	6879      	ldr	r1, [r7, #4]
 803130c:	a314      	add	r3, pc, #80	; (adr r3, 8031360 <sha512_init+0xd0>)
 803130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031312:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return 0;
 8031316:	2300      	movs	r3, #0
}
 8031318:	4618      	mov	r0, r3
 803131a:	370c      	adds	r7, #12
 803131c:	46bd      	mov	sp, r7
 803131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031322:	4770      	bx	lr
 8031324:	f3af 8000 	nop.w
 8031328:	f3bcc908 	.word	0xf3bcc908
 803132c:	6a09e667 	.word	0x6a09e667
 8031330:	84caa73b 	.word	0x84caa73b
 8031334:	bb67ae85 	.word	0xbb67ae85
 8031338:	fe94f82b 	.word	0xfe94f82b
 803133c:	3c6ef372 	.word	0x3c6ef372
 8031340:	5f1d36f1 	.word	0x5f1d36f1
 8031344:	a54ff53a 	.word	0xa54ff53a
 8031348:	ade682d1 	.word	0xade682d1
 803134c:	510e527f 	.word	0x510e527f
 8031350:	2b3e6c1f 	.word	0x2b3e6c1f
 8031354:	9b05688c 	.word	0x9b05688c
 8031358:	fb41bd6b 	.word	0xfb41bd6b
 803135c:	1f83d9ab 	.word	0x1f83d9ab
 8031360:	137e2179 	.word	0x137e2179
 8031364:	5be0cd19 	.word	0x5be0cd19

08031368 <sha512_update>:
   @param in     The data to hash
   @param inlen  The length of the data (octets)
   @return 0 if successful
*/
int sha512_update (sha512_context * md, const unsigned char *in, size_t inlen)               
{                                                                                           
 8031368:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 803136c:	b088      	sub	sp, #32
 803136e:	af00      	add	r7, sp, #0
 8031370:	60f8      	str	r0, [r7, #12]
 8031372:	60b9      	str	r1, [r7, #8]
 8031374:	607a      	str	r2, [r7, #4]
    size_t n;
    size_t i;                                                                        
    int           err;     
    if (md == NULL) return 1;  
 8031376:	68fb      	ldr	r3, [r7, #12]
 8031378:	2b00      	cmp	r3, #0
 803137a:	d101      	bne.n	8031380 <sha512_update+0x18>
 803137c:	2301      	movs	r3, #1
 803137e:	e07b      	b.n	8031478 <sha512_update+0x110>
    if (in == NULL) return 1;                                                              
 8031380:	68bb      	ldr	r3, [r7, #8]
 8031382:	2b00      	cmp	r3, #0
 8031384:	d101      	bne.n	803138a <sha512_update+0x22>
 8031386:	2301      	movs	r3, #1
 8031388:	e076      	b.n	8031478 <sha512_update+0x110>
    if (md->curlen > sizeof(md->buf)) {                             
 803138a:	68fb      	ldr	r3, [r7, #12]
 803138c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803138e:	2b80      	cmp	r3, #128	; 0x80
 8031390:	d96e      	bls.n	8031470 <sha512_update+0x108>
       return 1;                                                            
 8031392:	2301      	movs	r3, #1
 8031394:	e070      	b.n	8031478 <sha512_update+0x110>
    }                                                                                       
    while (inlen > 0) {                                                                     
        if (md->curlen == 0 && inlen >= 128) {                           
 8031396:	68fb      	ldr	r3, [r7, #12]
 8031398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803139a:	2b00      	cmp	r3, #0
 803139c:	d11d      	bne.n	80313da <sha512_update+0x72>
 803139e:	687b      	ldr	r3, [r7, #4]
 80313a0:	2b7f      	cmp	r3, #127	; 0x7f
 80313a2:	d91a      	bls.n	80313da <sha512_update+0x72>
           if ((err = sha512_compress (md, (unsigned char *)in)) != 0) {               
 80313a4:	68b9      	ldr	r1, [r7, #8]
 80313a6:	68f8      	ldr	r0, [r7, #12]
 80313a8:	f7fe f8c4 	bl	802f534 <sha512_compress>
 80313ac:	61b8      	str	r0, [r7, #24]
 80313ae:	69bb      	ldr	r3, [r7, #24]
 80313b0:	2b00      	cmp	r3, #0
 80313b2:	d001      	beq.n	80313b8 <sha512_update+0x50>
              return err;                                                                   
 80313b4:	69bb      	ldr	r3, [r7, #24]
 80313b6:	e05f      	b.n	8031478 <sha512_update+0x110>
           }                                                                                
           md->length += 128 * 8;                                        
 80313b8:	68fb      	ldr	r3, [r7, #12]
 80313ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80313be:	f512 6480 	adds.w	r4, r2, #1024	; 0x400
 80313c2:	f143 0500 	adc.w	r5, r3, #0
 80313c6:	68fb      	ldr	r3, [r7, #12]
 80313c8:	e9c3 4500 	strd	r4, r5, [r3]
           in             += 128;                                                    
 80313cc:	68bb      	ldr	r3, [r7, #8]
 80313ce:	3380      	adds	r3, #128	; 0x80
 80313d0:	60bb      	str	r3, [r7, #8]
           inlen          -= 128;                                                    
 80313d2:	687b      	ldr	r3, [r7, #4]
 80313d4:	3b80      	subs	r3, #128	; 0x80
 80313d6:	607b      	str	r3, [r7, #4]
 80313d8:	e04a      	b.n	8031470 <sha512_update+0x108>
        } else {                                                                            
           n = MIN(inlen, (128 - md->curlen));
 80313da:	68fb      	ldr	r3, [r7, #12]
 80313dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80313de:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80313e2:	687a      	ldr	r2, [r7, #4]
 80313e4:	4293      	cmp	r3, r2
 80313e6:	bf28      	it	cs
 80313e8:	4613      	movcs	r3, r2
 80313ea:	617b      	str	r3, [r7, #20]

           for (i = 0; i < n; i++) {
 80313ec:	2300      	movs	r3, #0
 80313ee:	61fb      	str	r3, [r7, #28]
 80313f0:	e00f      	b.n	8031412 <sha512_update+0xaa>
            md->buf[i + md->curlen] = in[i];
 80313f2:	68ba      	ldr	r2, [r7, #8]
 80313f4:	69fb      	ldr	r3, [r7, #28]
 80313f6:	441a      	add	r2, r3
 80313f8:	68fb      	ldr	r3, [r7, #12]
 80313fa:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80313fc:	69fb      	ldr	r3, [r7, #28]
 80313fe:	440b      	add	r3, r1
 8031400:	7811      	ldrb	r1, [r2, #0]
 8031402:	68fa      	ldr	r2, [r7, #12]
 8031404:	4413      	add	r3, r2
 8031406:	460a      	mov	r2, r1
 8031408:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
           for (i = 0; i < n; i++) {
 803140c:	69fb      	ldr	r3, [r7, #28]
 803140e:	3301      	adds	r3, #1
 8031410:	61fb      	str	r3, [r7, #28]
 8031412:	69fa      	ldr	r2, [r7, #28]
 8031414:	697b      	ldr	r3, [r7, #20]
 8031416:	429a      	cmp	r2, r3
 8031418:	d3eb      	bcc.n	80313f2 <sha512_update+0x8a>
           }


           md->curlen += n;                                                     
 803141a:	68fb      	ldr	r3, [r7, #12]
 803141c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 803141e:	697b      	ldr	r3, [r7, #20]
 8031420:	441a      	add	r2, r3
 8031422:	68fb      	ldr	r3, [r7, #12]
 8031424:	649a      	str	r2, [r3, #72]	; 0x48
           in             += n;                                                             
 8031426:	68ba      	ldr	r2, [r7, #8]
 8031428:	697b      	ldr	r3, [r7, #20]
 803142a:	4413      	add	r3, r2
 803142c:	60bb      	str	r3, [r7, #8]
           inlen          -= n;                                                             
 803142e:	687a      	ldr	r2, [r7, #4]
 8031430:	697b      	ldr	r3, [r7, #20]
 8031432:	1ad3      	subs	r3, r2, r3
 8031434:	607b      	str	r3, [r7, #4]
           if (md->curlen == 128) {                                      
 8031436:	68fb      	ldr	r3, [r7, #12]
 8031438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803143a:	2b80      	cmp	r3, #128	; 0x80
 803143c:	d118      	bne.n	8031470 <sha512_update+0x108>
              if ((err = sha512_compress (md, md->buf)) != 0) {            
 803143e:	68fb      	ldr	r3, [r7, #12]
 8031440:	334c      	adds	r3, #76	; 0x4c
 8031442:	4619      	mov	r1, r3
 8031444:	68f8      	ldr	r0, [r7, #12]
 8031446:	f7fe f875 	bl	802f534 <sha512_compress>
 803144a:	61b8      	str	r0, [r7, #24]
 803144c:	69bb      	ldr	r3, [r7, #24]
 803144e:	2b00      	cmp	r3, #0
 8031450:	d001      	beq.n	8031456 <sha512_update+0xee>
                 return err;                                                                
 8031452:	69bb      	ldr	r3, [r7, #24]
 8031454:	e010      	b.n	8031478 <sha512_update+0x110>
              }                                                                             
              md->length += 8*128;                                       
 8031456:	68fb      	ldr	r3, [r7, #12]
 8031458:	e9d3 2300 	ldrd	r2, r3, [r3]
 803145c:	f512 6880 	adds.w	r8, r2, #1024	; 0x400
 8031460:	f143 0900 	adc.w	r9, r3, #0
 8031464:	68fb      	ldr	r3, [r7, #12]
 8031466:	e9c3 8900 	strd	r8, r9, [r3]
              md->curlen = 0;                                                   
 803146a:	68fb      	ldr	r3, [r7, #12]
 803146c:	2200      	movs	r2, #0
 803146e:	649a      	str	r2, [r3, #72]	; 0x48
    while (inlen > 0) {                                                                     
 8031470:	687b      	ldr	r3, [r7, #4]
 8031472:	2b00      	cmp	r3, #0
 8031474:	d18f      	bne.n	8031396 <sha512_update+0x2e>
           }                                                                                
       }                                                                                    
    }                                                                                       
    return 0;                                                                        
 8031476:	2300      	movs	r3, #0
}
 8031478:	4618      	mov	r0, r3
 803147a:	3720      	adds	r7, #32
 803147c:	46bd      	mov	sp, r7
 803147e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08031482 <sha512_final>:
   @param md  The hash state
   @param out [out] The destination of the hash (64 bytes)
   @return 0 if successful
*/
   int sha512_final(sha512_context * md, unsigned char *out)
   {
 8031482:	b5b0      	push	{r4, r5, r7, lr}
 8031484:	b084      	sub	sp, #16
 8031486:	af00      	add	r7, sp, #0
 8031488:	6078      	str	r0, [r7, #4]
 803148a:	6039      	str	r1, [r7, #0]
    int i;

    if (md == NULL) return 1;
 803148c:	687b      	ldr	r3, [r7, #4]
 803148e:	2b00      	cmp	r3, #0
 8031490:	d101      	bne.n	8031496 <sha512_final+0x14>
 8031492:	2301      	movs	r3, #1
 8031494:	e167      	b.n	8031766 <sha512_final+0x2e4>
    if (out == NULL) return 1;
 8031496:	683b      	ldr	r3, [r7, #0]
 8031498:	2b00      	cmp	r3, #0
 803149a:	d101      	bne.n	80314a0 <sha512_final+0x1e>
 803149c:	2301      	movs	r3, #1
 803149e:	e162      	b.n	8031766 <sha512_final+0x2e4>

    if (md->curlen >= sizeof(md->buf)) {
 80314a0:	687b      	ldr	r3, [r7, #4]
 80314a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80314a4:	2b7f      	cmp	r3, #127	; 0x7f
 80314a6:	d901      	bls.n	80314ac <sha512_final+0x2a>
     return 1;
 80314a8:	2301      	movs	r3, #1
 80314aa:	e15c      	b.n	8031766 <sha512_final+0x2e4>
 }

    /* increase the length of the message */
 md->length += md->curlen * (8);
 80314ac:	687b      	ldr	r3, [r7, #4]
 80314ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80314b2:	687b      	ldr	r3, [r7, #4]
 80314b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80314b6:	00db      	lsls	r3, r3, #3
 80314b8:	461a      	mov	r2, r3
 80314ba:	f04f 0300 	mov.w	r3, #0
 80314be:	1884      	adds	r4, r0, r2
 80314c0:	eb41 0503 	adc.w	r5, r1, r3
 80314c4:	687b      	ldr	r3, [r7, #4]
 80314c6:	e9c3 4500 	strd	r4, r5, [r3]

    /* append the '1' bit */
 md->buf[md->curlen++] = (unsigned char)0x80;
 80314ca:	687b      	ldr	r3, [r7, #4]
 80314cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80314ce:	1c59      	adds	r1, r3, #1
 80314d0:	687a      	ldr	r2, [r7, #4]
 80314d2:	6491      	str	r1, [r2, #72]	; 0x48
 80314d4:	687a      	ldr	r2, [r7, #4]
 80314d6:	4413      	add	r3, r2
 80314d8:	2280      	movs	r2, #128	; 0x80
 80314da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* if the length is currently above 112 bytes we append zeros
     * then compress.  Then we can fall back to padding zeros and length
     * encoding like normal.
     */
     if (md->curlen > 112) {
 80314de:	687b      	ldr	r3, [r7, #4]
 80314e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80314e2:	2b70      	cmp	r3, #112	; 0x70
 80314e4:	d922      	bls.n	803152c <sha512_final+0xaa>
        while (md->curlen < 128) {
 80314e6:	e009      	b.n	80314fc <sha512_final+0x7a>
            md->buf[md->curlen++] = (unsigned char)0;
 80314e8:	687b      	ldr	r3, [r7, #4]
 80314ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80314ec:	1c59      	adds	r1, r3, #1
 80314ee:	687a      	ldr	r2, [r7, #4]
 80314f0:	6491      	str	r1, [r2, #72]	; 0x48
 80314f2:	687a      	ldr	r2, [r7, #4]
 80314f4:	4413      	add	r3, r2
 80314f6:	2200      	movs	r2, #0
 80314f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        while (md->curlen < 128) {
 80314fc:	687b      	ldr	r3, [r7, #4]
 80314fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031500:	2b7f      	cmp	r3, #127	; 0x7f
 8031502:	d9f1      	bls.n	80314e8 <sha512_final+0x66>
        }
        sha512_compress(md, md->buf);
 8031504:	687b      	ldr	r3, [r7, #4]
 8031506:	334c      	adds	r3, #76	; 0x4c
 8031508:	4619      	mov	r1, r3
 803150a:	6878      	ldr	r0, [r7, #4]
 803150c:	f7fe f812 	bl	802f534 <sha512_compress>
        md->curlen = 0;
 8031510:	687b      	ldr	r3, [r7, #4]
 8031512:	2200      	movs	r2, #0
 8031514:	649a      	str	r2, [r3, #72]	; 0x48

    /* pad upto 120 bytes of zeroes 
     * note: that from 112 to 120 is the 64 MSB of the length.  We assume that you won't hash
     * > 2^64 bits of data... :-)
     */
while (md->curlen < 120) {
 8031516:	e009      	b.n	803152c <sha512_final+0xaa>
    md->buf[md->curlen++] = (unsigned char)0;
 8031518:	687b      	ldr	r3, [r7, #4]
 803151a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 803151c:	1c59      	adds	r1, r3, #1
 803151e:	687a      	ldr	r2, [r7, #4]
 8031520:	6491      	str	r1, [r2, #72]	; 0x48
 8031522:	687a      	ldr	r2, [r7, #4]
 8031524:	4413      	add	r3, r2
 8031526:	2200      	movs	r2, #0
 8031528:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
while (md->curlen < 120) {
 803152c:	687b      	ldr	r3, [r7, #4]
 803152e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8031530:	2b77      	cmp	r3, #119	; 0x77
 8031532:	d9f1      	bls.n	8031518 <sha512_final+0x96>
}

    /* store length */
STORE64H(md->length, md->buf+120);
 8031534:	687b      	ldr	r3, [r7, #4]
 8031536:	e9d3 0100 	ldrd	r0, r1, [r3]
 803153a:	f04f 0200 	mov.w	r2, #0
 803153e:	f04f 0300 	mov.w	r3, #0
 8031542:	0e0a      	lsrs	r2, r1, #24
 8031544:	2300      	movs	r3, #0
 8031546:	b2d2      	uxtb	r2, r2
 8031548:	687b      	ldr	r3, [r7, #4]
 803154a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 803154e:	687b      	ldr	r3, [r7, #4]
 8031550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031554:	f04f 0200 	mov.w	r2, #0
 8031558:	f04f 0300 	mov.w	r3, #0
 803155c:	0c0a      	lsrs	r2, r1, #16
 803155e:	2300      	movs	r3, #0
 8031560:	b2d2      	uxtb	r2, r2
 8031562:	687b      	ldr	r3, [r7, #4]
 8031564:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 8031568:	687b      	ldr	r3, [r7, #4]
 803156a:	e9d3 0100 	ldrd	r0, r1, [r3]
 803156e:	f04f 0200 	mov.w	r2, #0
 8031572:	f04f 0300 	mov.w	r3, #0
 8031576:	0a0a      	lsrs	r2, r1, #8
 8031578:	2300      	movs	r3, #0
 803157a:	b2d2      	uxtb	r2, r2
 803157c:	687b      	ldr	r3, [r7, #4]
 803157e:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
 8031582:	687b      	ldr	r3, [r7, #4]
 8031584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031588:	f04f 0200 	mov.w	r2, #0
 803158c:	f04f 0300 	mov.w	r3, #0
 8031590:	000a      	movs	r2, r1
 8031592:	2300      	movs	r3, #0
 8031594:	b2d2      	uxtb	r2, r2
 8031596:	687b      	ldr	r3, [r7, #4]
 8031598:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 803159c:	687b      	ldr	r3, [r7, #4]
 803159e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80315a2:	f04f 0200 	mov.w	r2, #0
 80315a6:	f04f 0300 	mov.w	r3, #0
 80315aa:	0e02      	lsrs	r2, r0, #24
 80315ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80315b0:	0e0b      	lsrs	r3, r1, #24
 80315b2:	b2d2      	uxtb	r2, r2
 80315b4:	687b      	ldr	r3, [r7, #4]
 80315b6:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 80315ba:	687b      	ldr	r3, [r7, #4]
 80315bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80315c0:	f04f 0200 	mov.w	r2, #0
 80315c4:	f04f 0300 	mov.w	r3, #0
 80315c8:	0c02      	lsrs	r2, r0, #16
 80315ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80315ce:	0c0b      	lsrs	r3, r1, #16
 80315d0:	b2d2      	uxtb	r2, r2
 80315d2:	687b      	ldr	r3, [r7, #4]
 80315d4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
 80315d8:	687b      	ldr	r3, [r7, #4]
 80315da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80315de:	f04f 0200 	mov.w	r2, #0
 80315e2:	f04f 0300 	mov.w	r3, #0
 80315e6:	0a02      	lsrs	r2, r0, #8
 80315e8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80315ec:	0a0b      	lsrs	r3, r1, #8
 80315ee:	b2d2      	uxtb	r2, r2
 80315f0:	687b      	ldr	r3, [r7, #4]
 80315f2:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
 80315f6:	687b      	ldr	r3, [r7, #4]
 80315f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80315fc:	b2d2      	uxtb	r2, r2
 80315fe:	687b      	ldr	r3, [r7, #4]
 8031600:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
sha512_compress(md, md->buf);
 8031604:	687b      	ldr	r3, [r7, #4]
 8031606:	334c      	adds	r3, #76	; 0x4c
 8031608:	4619      	mov	r1, r3
 803160a:	6878      	ldr	r0, [r7, #4]
 803160c:	f7fd ff92 	bl	802f534 <sha512_compress>

    /* copy output */
for (i = 0; i < 8; i++) {
 8031610:	2300      	movs	r3, #0
 8031612:	60fb      	str	r3, [r7, #12]
 8031614:	e0a2      	b.n	803175c <sha512_final+0x2da>
    STORE64H(md->state[i], out+(8*i));
 8031616:	687a      	ldr	r2, [r7, #4]
 8031618:	68fb      	ldr	r3, [r7, #12]
 803161a:	3301      	adds	r3, #1
 803161c:	00db      	lsls	r3, r3, #3
 803161e:	4413      	add	r3, r2
 8031620:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031624:	f04f 0200 	mov.w	r2, #0
 8031628:	f04f 0300 	mov.w	r3, #0
 803162c:	0e0a      	lsrs	r2, r1, #24
 803162e:	2300      	movs	r3, #0
 8031630:	68f9      	ldr	r1, [r7, #12]
 8031632:	00c9      	lsls	r1, r1, #3
 8031634:	4608      	mov	r0, r1
 8031636:	6839      	ldr	r1, [r7, #0]
 8031638:	4401      	add	r1, r0
 803163a:	b2d3      	uxtb	r3, r2
 803163c:	700b      	strb	r3, [r1, #0]
 803163e:	687a      	ldr	r2, [r7, #4]
 8031640:	68fb      	ldr	r3, [r7, #12]
 8031642:	3301      	adds	r3, #1
 8031644:	00db      	lsls	r3, r3, #3
 8031646:	4413      	add	r3, r2
 8031648:	e9d3 0100 	ldrd	r0, r1, [r3]
 803164c:	f04f 0200 	mov.w	r2, #0
 8031650:	f04f 0300 	mov.w	r3, #0
 8031654:	0c0a      	lsrs	r2, r1, #16
 8031656:	2300      	movs	r3, #0
 8031658:	68f9      	ldr	r1, [r7, #12]
 803165a:	00c9      	lsls	r1, r1, #3
 803165c:	3101      	adds	r1, #1
 803165e:	6838      	ldr	r0, [r7, #0]
 8031660:	4401      	add	r1, r0
 8031662:	b2d3      	uxtb	r3, r2
 8031664:	700b      	strb	r3, [r1, #0]
 8031666:	687a      	ldr	r2, [r7, #4]
 8031668:	68fb      	ldr	r3, [r7, #12]
 803166a:	3301      	adds	r3, #1
 803166c:	00db      	lsls	r3, r3, #3
 803166e:	4413      	add	r3, r2
 8031670:	e9d3 0100 	ldrd	r0, r1, [r3]
 8031674:	f04f 0200 	mov.w	r2, #0
 8031678:	f04f 0300 	mov.w	r3, #0
 803167c:	0a0a      	lsrs	r2, r1, #8
 803167e:	2300      	movs	r3, #0
 8031680:	68f9      	ldr	r1, [r7, #12]
 8031682:	00c9      	lsls	r1, r1, #3
 8031684:	3102      	adds	r1, #2
 8031686:	6838      	ldr	r0, [r7, #0]
 8031688:	4401      	add	r1, r0
 803168a:	b2d3      	uxtb	r3, r2
 803168c:	700b      	strb	r3, [r1, #0]
 803168e:	687a      	ldr	r2, [r7, #4]
 8031690:	68fb      	ldr	r3, [r7, #12]
 8031692:	3301      	adds	r3, #1
 8031694:	00db      	lsls	r3, r3, #3
 8031696:	4413      	add	r3, r2
 8031698:	e9d3 0100 	ldrd	r0, r1, [r3]
 803169c:	f04f 0200 	mov.w	r2, #0
 80316a0:	f04f 0300 	mov.w	r3, #0
 80316a4:	000a      	movs	r2, r1
 80316a6:	2300      	movs	r3, #0
 80316a8:	68f9      	ldr	r1, [r7, #12]
 80316aa:	00c9      	lsls	r1, r1, #3
 80316ac:	3103      	adds	r1, #3
 80316ae:	6838      	ldr	r0, [r7, #0]
 80316b0:	4401      	add	r1, r0
 80316b2:	b2d3      	uxtb	r3, r2
 80316b4:	700b      	strb	r3, [r1, #0]
 80316b6:	687a      	ldr	r2, [r7, #4]
 80316b8:	68fb      	ldr	r3, [r7, #12]
 80316ba:	3301      	adds	r3, #1
 80316bc:	00db      	lsls	r3, r3, #3
 80316be:	4413      	add	r3, r2
 80316c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80316c4:	f04f 0200 	mov.w	r2, #0
 80316c8:	f04f 0300 	mov.w	r3, #0
 80316cc:	0e02      	lsrs	r2, r0, #24
 80316ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80316d2:	0e0b      	lsrs	r3, r1, #24
 80316d4:	68f9      	ldr	r1, [r7, #12]
 80316d6:	00c9      	lsls	r1, r1, #3
 80316d8:	3104      	adds	r1, #4
 80316da:	6838      	ldr	r0, [r7, #0]
 80316dc:	4401      	add	r1, r0
 80316de:	b2d3      	uxtb	r3, r2
 80316e0:	700b      	strb	r3, [r1, #0]
 80316e2:	687a      	ldr	r2, [r7, #4]
 80316e4:	68fb      	ldr	r3, [r7, #12]
 80316e6:	3301      	adds	r3, #1
 80316e8:	00db      	lsls	r3, r3, #3
 80316ea:	4413      	add	r3, r2
 80316ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80316f0:	f04f 0200 	mov.w	r2, #0
 80316f4:	f04f 0300 	mov.w	r3, #0
 80316f8:	0c02      	lsrs	r2, r0, #16
 80316fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80316fe:	0c0b      	lsrs	r3, r1, #16
 8031700:	68f9      	ldr	r1, [r7, #12]
 8031702:	00c9      	lsls	r1, r1, #3
 8031704:	3105      	adds	r1, #5
 8031706:	6838      	ldr	r0, [r7, #0]
 8031708:	4401      	add	r1, r0
 803170a:	b2d3      	uxtb	r3, r2
 803170c:	700b      	strb	r3, [r1, #0]
 803170e:	687a      	ldr	r2, [r7, #4]
 8031710:	68fb      	ldr	r3, [r7, #12]
 8031712:	3301      	adds	r3, #1
 8031714:	00db      	lsls	r3, r3, #3
 8031716:	4413      	add	r3, r2
 8031718:	e9d3 0100 	ldrd	r0, r1, [r3]
 803171c:	f04f 0200 	mov.w	r2, #0
 8031720:	f04f 0300 	mov.w	r3, #0
 8031724:	0a02      	lsrs	r2, r0, #8
 8031726:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 803172a:	0a0b      	lsrs	r3, r1, #8
 803172c:	68f9      	ldr	r1, [r7, #12]
 803172e:	00c9      	lsls	r1, r1, #3
 8031730:	3106      	adds	r1, #6
 8031732:	6838      	ldr	r0, [r7, #0]
 8031734:	4401      	add	r1, r0
 8031736:	b2d3      	uxtb	r3, r2
 8031738:	700b      	strb	r3, [r1, #0]
 803173a:	687a      	ldr	r2, [r7, #4]
 803173c:	68fb      	ldr	r3, [r7, #12]
 803173e:	3301      	adds	r3, #1
 8031740:	00db      	lsls	r3, r3, #3
 8031742:	4413      	add	r3, r2
 8031744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8031748:	68f9      	ldr	r1, [r7, #12]
 803174a:	00c9      	lsls	r1, r1, #3
 803174c:	3107      	adds	r1, #7
 803174e:	6838      	ldr	r0, [r7, #0]
 8031750:	4401      	add	r1, r0
 8031752:	b2d3      	uxtb	r3, r2
 8031754:	700b      	strb	r3, [r1, #0]
for (i = 0; i < 8; i++) {
 8031756:	68fb      	ldr	r3, [r7, #12]
 8031758:	3301      	adds	r3, #1
 803175a:	60fb      	str	r3, [r7, #12]
 803175c:	68fb      	ldr	r3, [r7, #12]
 803175e:	2b07      	cmp	r3, #7
 8031760:	f77f af59 	ble.w	8031616 <sha512_final+0x194>
}

return 0;
 8031764:	2300      	movs	r3, #0
}
 8031766:	4618      	mov	r0, r3
 8031768:	3710      	adds	r7, #16
 803176a:	46bd      	mov	sp, r7
 803176c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08031770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8031770:	b480      	push	{r7}
 8031772:	b083      	sub	sp, #12
 8031774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8031776:	2300      	movs	r3, #0
 8031778:	607b      	str	r3, [r7, #4]
 803177a:	4b10      	ldr	r3, [pc, #64]	; (80317bc <HAL_MspInit+0x4c>)
 803177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803177e:	4a0f      	ldr	r2, [pc, #60]	; (80317bc <HAL_MspInit+0x4c>)
 8031780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8031784:	6453      	str	r3, [r2, #68]	; 0x44
 8031786:	4b0d      	ldr	r3, [pc, #52]	; (80317bc <HAL_MspInit+0x4c>)
 8031788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803178a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 803178e:	607b      	str	r3, [r7, #4]
 8031790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8031792:	2300      	movs	r3, #0
 8031794:	603b      	str	r3, [r7, #0]
 8031796:	4b09      	ldr	r3, [pc, #36]	; (80317bc <HAL_MspInit+0x4c>)
 8031798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803179a:	4a08      	ldr	r2, [pc, #32]	; (80317bc <HAL_MspInit+0x4c>)
 803179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80317a0:	6413      	str	r3, [r2, #64]	; 0x40
 80317a2:	4b06      	ldr	r3, [pc, #24]	; (80317bc <HAL_MspInit+0x4c>)
 80317a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80317a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80317aa:	603b      	str	r3, [r7, #0]
 80317ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80317ae:	bf00      	nop
 80317b0:	370c      	adds	r7, #12
 80317b2:	46bd      	mov	sp, r7
 80317b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80317b8:	4770      	bx	lr
 80317ba:	bf00      	nop
 80317bc:	40023800 	.word	0x40023800

080317c0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80317c0:	b580      	push	{r7, lr}
 80317c2:	b08a      	sub	sp, #40	; 0x28
 80317c4:	af00      	add	r7, sp, #0
 80317c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80317c8:	f107 0314 	add.w	r3, r7, #20
 80317cc:	2200      	movs	r2, #0
 80317ce:	601a      	str	r2, [r3, #0]
 80317d0:	605a      	str	r2, [r3, #4]
 80317d2:	609a      	str	r2, [r3, #8]
 80317d4:	60da      	str	r2, [r3, #12]
 80317d6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80317d8:	687b      	ldr	r3, [r7, #4]
 80317da:	681b      	ldr	r3, [r3, #0]
 80317dc:	4a28      	ldr	r2, [pc, #160]	; (8031880 <HAL_SD_MspInit+0xc0>)
 80317de:	4293      	cmp	r3, r2
 80317e0:	d14a      	bne.n	8031878 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80317e2:	2300      	movs	r3, #0
 80317e4:	613b      	str	r3, [r7, #16]
 80317e6:	4b27      	ldr	r3, [pc, #156]	; (8031884 <HAL_SD_MspInit+0xc4>)
 80317e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80317ea:	4a26      	ldr	r2, [pc, #152]	; (8031884 <HAL_SD_MspInit+0xc4>)
 80317ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80317f0:	6453      	str	r3, [r2, #68]	; 0x44
 80317f2:	4b24      	ldr	r3, [pc, #144]	; (8031884 <HAL_SD_MspInit+0xc4>)
 80317f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80317f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80317fa:	613b      	str	r3, [r7, #16]
 80317fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80317fe:	2300      	movs	r3, #0
 8031800:	60fb      	str	r3, [r7, #12]
 8031802:	4b20      	ldr	r3, [pc, #128]	; (8031884 <HAL_SD_MspInit+0xc4>)
 8031804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031806:	4a1f      	ldr	r2, [pc, #124]	; (8031884 <HAL_SD_MspInit+0xc4>)
 8031808:	f043 0304 	orr.w	r3, r3, #4
 803180c:	6313      	str	r3, [r2, #48]	; 0x30
 803180e:	4b1d      	ldr	r3, [pc, #116]	; (8031884 <HAL_SD_MspInit+0xc4>)
 8031810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031812:	f003 0304 	and.w	r3, r3, #4
 8031816:	60fb      	str	r3, [r7, #12]
 8031818:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 803181a:	2300      	movs	r3, #0
 803181c:	60bb      	str	r3, [r7, #8]
 803181e:	4b19      	ldr	r3, [pc, #100]	; (8031884 <HAL_SD_MspInit+0xc4>)
 8031820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031822:	4a18      	ldr	r2, [pc, #96]	; (8031884 <HAL_SD_MspInit+0xc4>)
 8031824:	f043 0308 	orr.w	r3, r3, #8
 8031828:	6313      	str	r3, [r2, #48]	; 0x30
 803182a:	4b16      	ldr	r3, [pc, #88]	; (8031884 <HAL_SD_MspInit+0xc4>)
 803182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803182e:	f003 0308 	and.w	r3, r3, #8
 8031832:	60bb      	str	r3, [r7, #8]
 8031834:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8031836:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 803183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803183c:	2302      	movs	r3, #2
 803183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8031840:	2300      	movs	r3, #0
 8031842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8031844:	2303      	movs	r3, #3
 8031846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8031848:	230c      	movs	r3, #12
 803184a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 803184c:	f107 0314 	add.w	r3, r7, #20
 8031850:	4619      	mov	r1, r3
 8031852:	480d      	ldr	r0, [pc, #52]	; (8031888 <HAL_SD_MspInit+0xc8>)
 8031854:	f001 f8fc 	bl	8032a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8031858:	2304      	movs	r3, #4
 803185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803185c:	2302      	movs	r3, #2
 803185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8031860:	2300      	movs	r3, #0
 8031862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8031864:	2303      	movs	r3, #3
 8031866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8031868:	230c      	movs	r3, #12
 803186a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 803186c:	f107 0314 	add.w	r3, r7, #20
 8031870:	4619      	mov	r1, r3
 8031872:	4806      	ldr	r0, [pc, #24]	; (803188c <HAL_SD_MspInit+0xcc>)
 8031874:	f001 f8ec 	bl	8032a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8031878:	bf00      	nop
 803187a:	3728      	adds	r7, #40	; 0x28
 803187c:	46bd      	mov	sp, r7
 803187e:	bd80      	pop	{r7, pc}
 8031880:	40012c00 	.word	0x40012c00
 8031884:	40023800 	.word	0x40023800
 8031888:	40020800 	.word	0x40020800
 803188c:	40020c00 	.word	0x40020c00

08031890 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8031890:	b480      	push	{r7}
 8031892:	b085      	sub	sp, #20
 8031894:	af00      	add	r7, sp, #0
 8031896:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8031898:	687b      	ldr	r3, [r7, #4]
 803189a:	681b      	ldr	r3, [r3, #0]
 803189c:	4a0b      	ldr	r2, [pc, #44]	; (80318cc <HAL_TIM_Base_MspInit+0x3c>)
 803189e:	4293      	cmp	r3, r2
 80318a0:	d10d      	bne.n	80318be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80318a2:	2300      	movs	r3, #0
 80318a4:	60fb      	str	r3, [r7, #12]
 80318a6:	4b0a      	ldr	r3, [pc, #40]	; (80318d0 <HAL_TIM_Base_MspInit+0x40>)
 80318a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80318aa:	4a09      	ldr	r2, [pc, #36]	; (80318d0 <HAL_TIM_Base_MspInit+0x40>)
 80318ac:	f043 0301 	orr.w	r3, r3, #1
 80318b0:	6453      	str	r3, [r2, #68]	; 0x44
 80318b2:	4b07      	ldr	r3, [pc, #28]	; (80318d0 <HAL_TIM_Base_MspInit+0x40>)
 80318b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80318b6:	f003 0301 	and.w	r3, r3, #1
 80318ba:	60fb      	str	r3, [r7, #12]
 80318bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80318be:	bf00      	nop
 80318c0:	3714      	adds	r7, #20
 80318c2:	46bd      	mov	sp, r7
 80318c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80318c8:	4770      	bx	lr
 80318ca:	bf00      	nop
 80318cc:	40010000 	.word	0x40010000
 80318d0:	40023800 	.word	0x40023800

080318d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80318d4:	b580      	push	{r7, lr}
 80318d6:	b08c      	sub	sp, #48	; 0x30
 80318d8:	af00      	add	r7, sp, #0
 80318da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80318dc:	f107 031c 	add.w	r3, r7, #28
 80318e0:	2200      	movs	r2, #0
 80318e2:	601a      	str	r2, [r3, #0]
 80318e4:	605a      	str	r2, [r3, #4]
 80318e6:	609a      	str	r2, [r3, #8]
 80318e8:	60da      	str	r2, [r3, #12]
 80318ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80318ec:	687b      	ldr	r3, [r7, #4]
 80318ee:	681b      	ldr	r3, [r3, #0]
 80318f0:	4a36      	ldr	r2, [pc, #216]	; (80319cc <HAL_UART_MspInit+0xf8>)
 80318f2:	4293      	cmp	r3, r2
 80318f4:	d12c      	bne.n	8031950 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80318f6:	2300      	movs	r3, #0
 80318f8:	61bb      	str	r3, [r7, #24]
 80318fa:	4b35      	ldr	r3, [pc, #212]	; (80319d0 <HAL_UART_MspInit+0xfc>)
 80318fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80318fe:	4a34      	ldr	r2, [pc, #208]	; (80319d0 <HAL_UART_MspInit+0xfc>)
 8031900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8031904:	6413      	str	r3, [r2, #64]	; 0x40
 8031906:	4b32      	ldr	r3, [pc, #200]	; (80319d0 <HAL_UART_MspInit+0xfc>)
 8031908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 803190e:	61bb      	str	r3, [r7, #24]
 8031910:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8031912:	2300      	movs	r3, #0
 8031914:	617b      	str	r3, [r7, #20]
 8031916:	4b2e      	ldr	r3, [pc, #184]	; (80319d0 <HAL_UART_MspInit+0xfc>)
 8031918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803191a:	4a2d      	ldr	r2, [pc, #180]	; (80319d0 <HAL_UART_MspInit+0xfc>)
 803191c:	f043 0301 	orr.w	r3, r3, #1
 8031920:	6313      	str	r3, [r2, #48]	; 0x30
 8031922:	4b2b      	ldr	r3, [pc, #172]	; (80319d0 <HAL_UART_MspInit+0xfc>)
 8031924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8031926:	f003 0301 	and.w	r3, r3, #1
 803192a:	617b      	str	r3, [r7, #20]
 803192c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 803192e:	230c      	movs	r3, #12
 8031930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8031932:	2302      	movs	r3, #2
 8031934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8031936:	2300      	movs	r3, #0
 8031938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803193a:	2303      	movs	r3, #3
 803193c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 803193e:	2307      	movs	r3, #7
 8031940:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8031942:	f107 031c 	add.w	r3, r7, #28
 8031946:	4619      	mov	r1, r3
 8031948:	4822      	ldr	r0, [pc, #136]	; (80319d4 <HAL_UART_MspInit+0x100>)
 803194a:	f001 f881 	bl	8032a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 803194e:	e038      	b.n	80319c2 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8031950:	687b      	ldr	r3, [r7, #4]
 8031952:	681b      	ldr	r3, [r3, #0]
 8031954:	4a20      	ldr	r2, [pc, #128]	; (80319d8 <HAL_UART_MspInit+0x104>)
 8031956:	4293      	cmp	r3, r2
 8031958:	d133      	bne.n	80319c2 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 803195a:	2300      	movs	r3, #0
 803195c:	613b      	str	r3, [r7, #16]
 803195e:	4b1c      	ldr	r3, [pc, #112]	; (80319d0 <HAL_UART_MspInit+0xfc>)
 8031960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8031962:	4a1b      	ldr	r2, [pc, #108]	; (80319d0 <HAL_UART_MspInit+0xfc>)
 8031964:	f043 0320 	orr.w	r3, r3, #32
 8031968:	6453      	str	r3, [r2, #68]	; 0x44
 803196a:	4b19      	ldr	r3, [pc, #100]	; (80319d0 <HAL_UART_MspInit+0xfc>)
 803196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803196e:	f003 0320 	and.w	r3, r3, #32
 8031972:	613b      	str	r3, [r7, #16]
 8031974:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8031976:	2300      	movs	r3, #0
 8031978:	60fb      	str	r3, [r7, #12]
 803197a:	4b15      	ldr	r3, [pc, #84]	; (80319d0 <HAL_UART_MspInit+0xfc>)
 803197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803197e:	4a14      	ldr	r2, [pc, #80]	; (80319d0 <HAL_UART_MspInit+0xfc>)
 8031980:	f043 0304 	orr.w	r3, r3, #4
 8031984:	6313      	str	r3, [r2, #48]	; 0x30
 8031986:	4b12      	ldr	r3, [pc, #72]	; (80319d0 <HAL_UART_MspInit+0xfc>)
 8031988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803198a:	f003 0304 	and.w	r3, r3, #4
 803198e:	60fb      	str	r3, [r7, #12]
 8031990:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8031992:	23c0      	movs	r3, #192	; 0xc0
 8031994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8031996:	2302      	movs	r3, #2
 8031998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803199a:	2300      	movs	r3, #0
 803199c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803199e:	2303      	movs	r3, #3
 80319a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80319a2:	2308      	movs	r3, #8
 80319a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80319a6:	f107 031c 	add.w	r3, r7, #28
 80319aa:	4619      	mov	r1, r3
 80319ac:	480b      	ldr	r0, [pc, #44]	; (80319dc <HAL_UART_MspInit+0x108>)
 80319ae:	f001 f84f 	bl	8032a50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80319b2:	2200      	movs	r2, #0
 80319b4:	2100      	movs	r1, #0
 80319b6:	2047      	movs	r0, #71	; 0x47
 80319b8:	f000 fca9 	bl	803230e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80319bc:	2047      	movs	r0, #71	; 0x47
 80319be:	f000 fcc2 	bl	8032346 <HAL_NVIC_EnableIRQ>
}
 80319c2:	bf00      	nop
 80319c4:	3730      	adds	r7, #48	; 0x30
 80319c6:	46bd      	mov	sp, r7
 80319c8:	bd80      	pop	{r7, pc}
 80319ca:	bf00      	nop
 80319cc:	40004400 	.word	0x40004400
 80319d0:	40023800 	.word	0x40023800
 80319d4:	40020000 	.word	0x40020000
 80319d8:	40011400 	.word	0x40011400
 80319dc:	40020800 	.word	0x40020800

080319e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80319e0:	b480      	push	{r7}
 80319e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80319e4:	e7fe      	b.n	80319e4 <NMI_Handler+0x4>

080319e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80319e6:	b480      	push	{r7}
 80319e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80319ea:	e7fe      	b.n	80319ea <HardFault_Handler+0x4>

080319ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80319ec:	b480      	push	{r7}
 80319ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80319f0:	e7fe      	b.n	80319f0 <MemManage_Handler+0x4>

080319f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80319f2:	b480      	push	{r7}
 80319f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80319f6:	e7fe      	b.n	80319f6 <BusFault_Handler+0x4>

080319f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80319f8:	b480      	push	{r7}
 80319fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80319fc:	e7fe      	b.n	80319fc <UsageFault_Handler+0x4>

080319fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80319fe:	b480      	push	{r7}
 8031a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8031a02:	bf00      	nop
 8031a04:	46bd      	mov	sp, r7
 8031a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031a0a:	4770      	bx	lr

08031a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8031a0c:	b480      	push	{r7}
 8031a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8031a10:	bf00      	nop
 8031a12:	46bd      	mov	sp, r7
 8031a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031a18:	4770      	bx	lr

08031a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8031a1a:	b480      	push	{r7}
 8031a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8031a1e:	bf00      	nop
 8031a20:	46bd      	mov	sp, r7
 8031a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031a26:	4770      	bx	lr

08031a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8031a28:	b580      	push	{r7, lr}
 8031a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8031a2c:	f000 fb50 	bl	80320d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8031a30:	bf00      	nop
 8031a32:	bd80      	pop	{r7, pc}

08031a34 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8031a34:	b580      	push	{r7, lr}
 8031a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8031a38:	4802      	ldr	r0, [pc, #8]	; (8031a44 <USART6_IRQHandler+0x10>)
 8031a3a:	f003 fa9f 	bl	8034f7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8031a3e:	bf00      	nop
 8031a40:	bd80      	pop	{r7, pc}
 8031a42:	bf00      	nop
 8031a44:	20000464 	.word	0x20000464

08031a48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8031a48:	b480      	push	{r7}
 8031a4a:	af00      	add	r7, sp, #0
	return 1;
 8031a4c:	2301      	movs	r3, #1
}
 8031a4e:	4618      	mov	r0, r3
 8031a50:	46bd      	mov	sp, r7
 8031a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031a56:	4770      	bx	lr

08031a58 <_kill>:

int _kill(int pid, int sig)
{
 8031a58:	b580      	push	{r7, lr}
 8031a5a:	b082      	sub	sp, #8
 8031a5c:	af00      	add	r7, sp, #0
 8031a5e:	6078      	str	r0, [r7, #4]
 8031a60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8031a62:	f007 faed 	bl	8039040 <__errno>
 8031a66:	4603      	mov	r3, r0
 8031a68:	2216      	movs	r2, #22
 8031a6a:	601a      	str	r2, [r3, #0]
	return -1;
 8031a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8031a70:	4618      	mov	r0, r3
 8031a72:	3708      	adds	r7, #8
 8031a74:	46bd      	mov	sp, r7
 8031a76:	bd80      	pop	{r7, pc}

08031a78 <_exit>:

void _exit (int status)
{
 8031a78:	b580      	push	{r7, lr}
 8031a7a:	b082      	sub	sp, #8
 8031a7c:	af00      	add	r7, sp, #0
 8031a7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8031a80:	f04f 31ff 	mov.w	r1, #4294967295
 8031a84:	6878      	ldr	r0, [r7, #4]
 8031a86:	f7ff ffe7 	bl	8031a58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8031a8a:	e7fe      	b.n	8031a8a <_exit+0x12>

08031a8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8031a8c:	b580      	push	{r7, lr}
 8031a8e:	b086      	sub	sp, #24
 8031a90:	af00      	add	r7, sp, #0
 8031a92:	60f8      	str	r0, [r7, #12]
 8031a94:	60b9      	str	r1, [r7, #8]
 8031a96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8031a98:	2300      	movs	r3, #0
 8031a9a:	617b      	str	r3, [r7, #20]
 8031a9c:	e00a      	b.n	8031ab4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8031a9e:	f3af 8000 	nop.w
 8031aa2:	4601      	mov	r1, r0
 8031aa4:	68bb      	ldr	r3, [r7, #8]
 8031aa6:	1c5a      	adds	r2, r3, #1
 8031aa8:	60ba      	str	r2, [r7, #8]
 8031aaa:	b2ca      	uxtb	r2, r1
 8031aac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8031aae:	697b      	ldr	r3, [r7, #20]
 8031ab0:	3301      	adds	r3, #1
 8031ab2:	617b      	str	r3, [r7, #20]
 8031ab4:	697a      	ldr	r2, [r7, #20]
 8031ab6:	687b      	ldr	r3, [r7, #4]
 8031ab8:	429a      	cmp	r2, r3
 8031aba:	dbf0      	blt.n	8031a9e <_read+0x12>
	}

return len;
 8031abc:	687b      	ldr	r3, [r7, #4]
}
 8031abe:	4618      	mov	r0, r3
 8031ac0:	3718      	adds	r7, #24
 8031ac2:	46bd      	mov	sp, r7
 8031ac4:	bd80      	pop	{r7, pc}

08031ac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8031ac6:	b580      	push	{r7, lr}
 8031ac8:	b086      	sub	sp, #24
 8031aca:	af00      	add	r7, sp, #0
 8031acc:	60f8      	str	r0, [r7, #12]
 8031ace:	60b9      	str	r1, [r7, #8]
 8031ad0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8031ad2:	2300      	movs	r3, #0
 8031ad4:	617b      	str	r3, [r7, #20]
 8031ad6:	e009      	b.n	8031aec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8031ad8:	68bb      	ldr	r3, [r7, #8]
 8031ada:	1c5a      	adds	r2, r3, #1
 8031adc:	60ba      	str	r2, [r7, #8]
 8031ade:	781b      	ldrb	r3, [r3, #0]
 8031ae0:	4618      	mov	r0, r3
 8031ae2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8031ae6:	697b      	ldr	r3, [r7, #20]
 8031ae8:	3301      	adds	r3, #1
 8031aea:	617b      	str	r3, [r7, #20]
 8031aec:	697a      	ldr	r2, [r7, #20]
 8031aee:	687b      	ldr	r3, [r7, #4]
 8031af0:	429a      	cmp	r2, r3
 8031af2:	dbf1      	blt.n	8031ad8 <_write+0x12>
	}
	return len;
 8031af4:	687b      	ldr	r3, [r7, #4]
}
 8031af6:	4618      	mov	r0, r3
 8031af8:	3718      	adds	r7, #24
 8031afa:	46bd      	mov	sp, r7
 8031afc:	bd80      	pop	{r7, pc}

08031afe <_close>:

int _close(int file)
{
 8031afe:	b480      	push	{r7}
 8031b00:	b083      	sub	sp, #12
 8031b02:	af00      	add	r7, sp, #0
 8031b04:	6078      	str	r0, [r7, #4]
	return -1;
 8031b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8031b0a:	4618      	mov	r0, r3
 8031b0c:	370c      	adds	r7, #12
 8031b0e:	46bd      	mov	sp, r7
 8031b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031b14:	4770      	bx	lr

08031b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8031b16:	b480      	push	{r7}
 8031b18:	b083      	sub	sp, #12
 8031b1a:	af00      	add	r7, sp, #0
 8031b1c:	6078      	str	r0, [r7, #4]
 8031b1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8031b20:	683b      	ldr	r3, [r7, #0]
 8031b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8031b26:	605a      	str	r2, [r3, #4]
	return 0;
 8031b28:	2300      	movs	r3, #0
}
 8031b2a:	4618      	mov	r0, r3
 8031b2c:	370c      	adds	r7, #12
 8031b2e:	46bd      	mov	sp, r7
 8031b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031b34:	4770      	bx	lr

08031b36 <_isatty>:

int _isatty(int file)
{
 8031b36:	b480      	push	{r7}
 8031b38:	b083      	sub	sp, #12
 8031b3a:	af00      	add	r7, sp, #0
 8031b3c:	6078      	str	r0, [r7, #4]
	return 1;
 8031b3e:	2301      	movs	r3, #1
}
 8031b40:	4618      	mov	r0, r3
 8031b42:	370c      	adds	r7, #12
 8031b44:	46bd      	mov	sp, r7
 8031b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031b4a:	4770      	bx	lr

08031b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8031b4c:	b480      	push	{r7}
 8031b4e:	b085      	sub	sp, #20
 8031b50:	af00      	add	r7, sp, #0
 8031b52:	60f8      	str	r0, [r7, #12]
 8031b54:	60b9      	str	r1, [r7, #8]
 8031b56:	607a      	str	r2, [r7, #4]
	return 0;
 8031b58:	2300      	movs	r3, #0
}
 8031b5a:	4618      	mov	r0, r3
 8031b5c:	3714      	adds	r7, #20
 8031b5e:	46bd      	mov	sp, r7
 8031b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031b64:	4770      	bx	lr
	...

08031b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8031b68:	b580      	push	{r7, lr}
 8031b6a:	b086      	sub	sp, #24
 8031b6c:	af00      	add	r7, sp, #0
 8031b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8031b70:	4a14      	ldr	r2, [pc, #80]	; (8031bc4 <_sbrk+0x5c>)
 8031b72:	4b15      	ldr	r3, [pc, #84]	; (8031bc8 <_sbrk+0x60>)
 8031b74:	1ad3      	subs	r3, r2, r3
 8031b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8031b78:	697b      	ldr	r3, [r7, #20]
 8031b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8031b7c:	4b13      	ldr	r3, [pc, #76]	; (8031bcc <_sbrk+0x64>)
 8031b7e:	681b      	ldr	r3, [r3, #0]
 8031b80:	2b00      	cmp	r3, #0
 8031b82:	d102      	bne.n	8031b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8031b84:	4b11      	ldr	r3, [pc, #68]	; (8031bcc <_sbrk+0x64>)
 8031b86:	4a12      	ldr	r2, [pc, #72]	; (8031bd0 <_sbrk+0x68>)
 8031b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8031b8a:	4b10      	ldr	r3, [pc, #64]	; (8031bcc <_sbrk+0x64>)
 8031b8c:	681a      	ldr	r2, [r3, #0]
 8031b8e:	687b      	ldr	r3, [r7, #4]
 8031b90:	4413      	add	r3, r2
 8031b92:	693a      	ldr	r2, [r7, #16]
 8031b94:	429a      	cmp	r2, r3
 8031b96:	d207      	bcs.n	8031ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8031b98:	f007 fa52 	bl	8039040 <__errno>
 8031b9c:	4603      	mov	r3, r0
 8031b9e:	220c      	movs	r2, #12
 8031ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8031ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8031ba6:	e009      	b.n	8031bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8031ba8:	4b08      	ldr	r3, [pc, #32]	; (8031bcc <_sbrk+0x64>)
 8031baa:	681b      	ldr	r3, [r3, #0]
 8031bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8031bae:	4b07      	ldr	r3, [pc, #28]	; (8031bcc <_sbrk+0x64>)
 8031bb0:	681a      	ldr	r2, [r3, #0]
 8031bb2:	687b      	ldr	r3, [r7, #4]
 8031bb4:	4413      	add	r3, r2
 8031bb6:	4a05      	ldr	r2, [pc, #20]	; (8031bcc <_sbrk+0x64>)
 8031bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8031bba:	68fb      	ldr	r3, [r7, #12]
}
 8031bbc:	4618      	mov	r0, r3
 8031bbe:	3718      	adds	r7, #24
 8031bc0:	46bd      	mov	sp, r7
 8031bc2:	bd80      	pop	{r7, pc}
 8031bc4:	20020000 	.word	0x20020000
 8031bc8:	00000400 	.word	0x00000400
 8031bcc:	200002f4 	.word	0x200002f4
 8031bd0:	200009c8 	.word	0x200009c8

08031bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8031bd4:	b480      	push	{r7}
 8031bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8031bd8:	4b07      	ldr	r3, [pc, #28]	; (8031bf8 <SystemInit+0x24>)
 8031bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8031bde:	4a06      	ldr	r2, [pc, #24]	; (8031bf8 <SystemInit+0x24>)
 8031be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8031be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8031be8:	4b03      	ldr	r3, [pc, #12]	; (8031bf8 <SystemInit+0x24>)
 8031bea:	4a04      	ldr	r2, [pc, #16]	; (8031bfc <SystemInit+0x28>)
 8031bec:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8031bee:	bf00      	nop
 8031bf0:	46bd      	mov	sp, r7
 8031bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031bf6:	4770      	bx	lr
 8031bf8:	e000ed00 	.word	0xe000ed00
 8031bfc:	08020000 	.word	0x08020000

08031c00 <consttime_equal>:
#include "sha3.h"
#include "sha512.h"
#include "ge.h"
#include "sc.h"
#include "main.h"
static int consttime_equal(const unsigned char *x, const unsigned char *y) {
 8031c00:	b480      	push	{r7}
 8031c02:	b085      	sub	sp, #20
 8031c04:	af00      	add	r7, sp, #0
 8031c06:	6078      	str	r0, [r7, #4]
 8031c08:	6039      	str	r1, [r7, #0]
    unsigned char r = 0;
 8031c0a:	2300      	movs	r3, #0
 8031c0c:	73fb      	strb	r3, [r7, #15]

    r = x[0] ^ y[0];
 8031c0e:	687b      	ldr	r3, [r7, #4]
 8031c10:	781a      	ldrb	r2, [r3, #0]
 8031c12:	683b      	ldr	r3, [r7, #0]
 8031c14:	781b      	ldrb	r3, [r3, #0]
 8031c16:	4053      	eors	r3, r2
 8031c18:	73fb      	strb	r3, [r7, #15]
    #define F(i) r |= x[i] ^ y[i]
    F(1);
 8031c1a:	687b      	ldr	r3, [r7, #4]
 8031c1c:	3301      	adds	r3, #1
 8031c1e:	781a      	ldrb	r2, [r3, #0]
 8031c20:	683b      	ldr	r3, [r7, #0]
 8031c22:	3301      	adds	r3, #1
 8031c24:	781b      	ldrb	r3, [r3, #0]
 8031c26:	4053      	eors	r3, r2
 8031c28:	b2da      	uxtb	r2, r3
 8031c2a:	7bfb      	ldrb	r3, [r7, #15]
 8031c2c:	4313      	orrs	r3, r2
 8031c2e:	73fb      	strb	r3, [r7, #15]
    F(2);
 8031c30:	687b      	ldr	r3, [r7, #4]
 8031c32:	3302      	adds	r3, #2
 8031c34:	781a      	ldrb	r2, [r3, #0]
 8031c36:	683b      	ldr	r3, [r7, #0]
 8031c38:	3302      	adds	r3, #2
 8031c3a:	781b      	ldrb	r3, [r3, #0]
 8031c3c:	4053      	eors	r3, r2
 8031c3e:	b2da      	uxtb	r2, r3
 8031c40:	7bfb      	ldrb	r3, [r7, #15]
 8031c42:	4313      	orrs	r3, r2
 8031c44:	73fb      	strb	r3, [r7, #15]
    F(3);
 8031c46:	687b      	ldr	r3, [r7, #4]
 8031c48:	3303      	adds	r3, #3
 8031c4a:	781a      	ldrb	r2, [r3, #0]
 8031c4c:	683b      	ldr	r3, [r7, #0]
 8031c4e:	3303      	adds	r3, #3
 8031c50:	781b      	ldrb	r3, [r3, #0]
 8031c52:	4053      	eors	r3, r2
 8031c54:	b2da      	uxtb	r2, r3
 8031c56:	7bfb      	ldrb	r3, [r7, #15]
 8031c58:	4313      	orrs	r3, r2
 8031c5a:	73fb      	strb	r3, [r7, #15]
    F(4);
 8031c5c:	687b      	ldr	r3, [r7, #4]
 8031c5e:	3304      	adds	r3, #4
 8031c60:	781a      	ldrb	r2, [r3, #0]
 8031c62:	683b      	ldr	r3, [r7, #0]
 8031c64:	3304      	adds	r3, #4
 8031c66:	781b      	ldrb	r3, [r3, #0]
 8031c68:	4053      	eors	r3, r2
 8031c6a:	b2da      	uxtb	r2, r3
 8031c6c:	7bfb      	ldrb	r3, [r7, #15]
 8031c6e:	4313      	orrs	r3, r2
 8031c70:	73fb      	strb	r3, [r7, #15]
    F(5);
 8031c72:	687b      	ldr	r3, [r7, #4]
 8031c74:	3305      	adds	r3, #5
 8031c76:	781a      	ldrb	r2, [r3, #0]
 8031c78:	683b      	ldr	r3, [r7, #0]
 8031c7a:	3305      	adds	r3, #5
 8031c7c:	781b      	ldrb	r3, [r3, #0]
 8031c7e:	4053      	eors	r3, r2
 8031c80:	b2da      	uxtb	r2, r3
 8031c82:	7bfb      	ldrb	r3, [r7, #15]
 8031c84:	4313      	orrs	r3, r2
 8031c86:	73fb      	strb	r3, [r7, #15]
    F(6);
 8031c88:	687b      	ldr	r3, [r7, #4]
 8031c8a:	3306      	adds	r3, #6
 8031c8c:	781a      	ldrb	r2, [r3, #0]
 8031c8e:	683b      	ldr	r3, [r7, #0]
 8031c90:	3306      	adds	r3, #6
 8031c92:	781b      	ldrb	r3, [r3, #0]
 8031c94:	4053      	eors	r3, r2
 8031c96:	b2da      	uxtb	r2, r3
 8031c98:	7bfb      	ldrb	r3, [r7, #15]
 8031c9a:	4313      	orrs	r3, r2
 8031c9c:	73fb      	strb	r3, [r7, #15]
    F(7);
 8031c9e:	687b      	ldr	r3, [r7, #4]
 8031ca0:	3307      	adds	r3, #7
 8031ca2:	781a      	ldrb	r2, [r3, #0]
 8031ca4:	683b      	ldr	r3, [r7, #0]
 8031ca6:	3307      	adds	r3, #7
 8031ca8:	781b      	ldrb	r3, [r3, #0]
 8031caa:	4053      	eors	r3, r2
 8031cac:	b2da      	uxtb	r2, r3
 8031cae:	7bfb      	ldrb	r3, [r7, #15]
 8031cb0:	4313      	orrs	r3, r2
 8031cb2:	73fb      	strb	r3, [r7, #15]
    F(8);
 8031cb4:	687b      	ldr	r3, [r7, #4]
 8031cb6:	3308      	adds	r3, #8
 8031cb8:	781a      	ldrb	r2, [r3, #0]
 8031cba:	683b      	ldr	r3, [r7, #0]
 8031cbc:	3308      	adds	r3, #8
 8031cbe:	781b      	ldrb	r3, [r3, #0]
 8031cc0:	4053      	eors	r3, r2
 8031cc2:	b2da      	uxtb	r2, r3
 8031cc4:	7bfb      	ldrb	r3, [r7, #15]
 8031cc6:	4313      	orrs	r3, r2
 8031cc8:	73fb      	strb	r3, [r7, #15]
    F(9);
 8031cca:	687b      	ldr	r3, [r7, #4]
 8031ccc:	3309      	adds	r3, #9
 8031cce:	781a      	ldrb	r2, [r3, #0]
 8031cd0:	683b      	ldr	r3, [r7, #0]
 8031cd2:	3309      	adds	r3, #9
 8031cd4:	781b      	ldrb	r3, [r3, #0]
 8031cd6:	4053      	eors	r3, r2
 8031cd8:	b2da      	uxtb	r2, r3
 8031cda:	7bfb      	ldrb	r3, [r7, #15]
 8031cdc:	4313      	orrs	r3, r2
 8031cde:	73fb      	strb	r3, [r7, #15]
    F(10);
 8031ce0:	687b      	ldr	r3, [r7, #4]
 8031ce2:	330a      	adds	r3, #10
 8031ce4:	781a      	ldrb	r2, [r3, #0]
 8031ce6:	683b      	ldr	r3, [r7, #0]
 8031ce8:	330a      	adds	r3, #10
 8031cea:	781b      	ldrb	r3, [r3, #0]
 8031cec:	4053      	eors	r3, r2
 8031cee:	b2da      	uxtb	r2, r3
 8031cf0:	7bfb      	ldrb	r3, [r7, #15]
 8031cf2:	4313      	orrs	r3, r2
 8031cf4:	73fb      	strb	r3, [r7, #15]
    F(11);
 8031cf6:	687b      	ldr	r3, [r7, #4]
 8031cf8:	330b      	adds	r3, #11
 8031cfa:	781a      	ldrb	r2, [r3, #0]
 8031cfc:	683b      	ldr	r3, [r7, #0]
 8031cfe:	330b      	adds	r3, #11
 8031d00:	781b      	ldrb	r3, [r3, #0]
 8031d02:	4053      	eors	r3, r2
 8031d04:	b2da      	uxtb	r2, r3
 8031d06:	7bfb      	ldrb	r3, [r7, #15]
 8031d08:	4313      	orrs	r3, r2
 8031d0a:	73fb      	strb	r3, [r7, #15]
    F(12);
 8031d0c:	687b      	ldr	r3, [r7, #4]
 8031d0e:	330c      	adds	r3, #12
 8031d10:	781a      	ldrb	r2, [r3, #0]
 8031d12:	683b      	ldr	r3, [r7, #0]
 8031d14:	330c      	adds	r3, #12
 8031d16:	781b      	ldrb	r3, [r3, #0]
 8031d18:	4053      	eors	r3, r2
 8031d1a:	b2da      	uxtb	r2, r3
 8031d1c:	7bfb      	ldrb	r3, [r7, #15]
 8031d1e:	4313      	orrs	r3, r2
 8031d20:	73fb      	strb	r3, [r7, #15]
    F(13);
 8031d22:	687b      	ldr	r3, [r7, #4]
 8031d24:	330d      	adds	r3, #13
 8031d26:	781a      	ldrb	r2, [r3, #0]
 8031d28:	683b      	ldr	r3, [r7, #0]
 8031d2a:	330d      	adds	r3, #13
 8031d2c:	781b      	ldrb	r3, [r3, #0]
 8031d2e:	4053      	eors	r3, r2
 8031d30:	b2da      	uxtb	r2, r3
 8031d32:	7bfb      	ldrb	r3, [r7, #15]
 8031d34:	4313      	orrs	r3, r2
 8031d36:	73fb      	strb	r3, [r7, #15]
    F(14);
 8031d38:	687b      	ldr	r3, [r7, #4]
 8031d3a:	330e      	adds	r3, #14
 8031d3c:	781a      	ldrb	r2, [r3, #0]
 8031d3e:	683b      	ldr	r3, [r7, #0]
 8031d40:	330e      	adds	r3, #14
 8031d42:	781b      	ldrb	r3, [r3, #0]
 8031d44:	4053      	eors	r3, r2
 8031d46:	b2da      	uxtb	r2, r3
 8031d48:	7bfb      	ldrb	r3, [r7, #15]
 8031d4a:	4313      	orrs	r3, r2
 8031d4c:	73fb      	strb	r3, [r7, #15]
    F(15);
 8031d4e:	687b      	ldr	r3, [r7, #4]
 8031d50:	330f      	adds	r3, #15
 8031d52:	781a      	ldrb	r2, [r3, #0]
 8031d54:	683b      	ldr	r3, [r7, #0]
 8031d56:	330f      	adds	r3, #15
 8031d58:	781b      	ldrb	r3, [r3, #0]
 8031d5a:	4053      	eors	r3, r2
 8031d5c:	b2da      	uxtb	r2, r3
 8031d5e:	7bfb      	ldrb	r3, [r7, #15]
 8031d60:	4313      	orrs	r3, r2
 8031d62:	73fb      	strb	r3, [r7, #15]
    F(16);
 8031d64:	687b      	ldr	r3, [r7, #4]
 8031d66:	3310      	adds	r3, #16
 8031d68:	781a      	ldrb	r2, [r3, #0]
 8031d6a:	683b      	ldr	r3, [r7, #0]
 8031d6c:	3310      	adds	r3, #16
 8031d6e:	781b      	ldrb	r3, [r3, #0]
 8031d70:	4053      	eors	r3, r2
 8031d72:	b2da      	uxtb	r2, r3
 8031d74:	7bfb      	ldrb	r3, [r7, #15]
 8031d76:	4313      	orrs	r3, r2
 8031d78:	73fb      	strb	r3, [r7, #15]
    F(17);
 8031d7a:	687b      	ldr	r3, [r7, #4]
 8031d7c:	3311      	adds	r3, #17
 8031d7e:	781a      	ldrb	r2, [r3, #0]
 8031d80:	683b      	ldr	r3, [r7, #0]
 8031d82:	3311      	adds	r3, #17
 8031d84:	781b      	ldrb	r3, [r3, #0]
 8031d86:	4053      	eors	r3, r2
 8031d88:	b2da      	uxtb	r2, r3
 8031d8a:	7bfb      	ldrb	r3, [r7, #15]
 8031d8c:	4313      	orrs	r3, r2
 8031d8e:	73fb      	strb	r3, [r7, #15]
    F(18);
 8031d90:	687b      	ldr	r3, [r7, #4]
 8031d92:	3312      	adds	r3, #18
 8031d94:	781a      	ldrb	r2, [r3, #0]
 8031d96:	683b      	ldr	r3, [r7, #0]
 8031d98:	3312      	adds	r3, #18
 8031d9a:	781b      	ldrb	r3, [r3, #0]
 8031d9c:	4053      	eors	r3, r2
 8031d9e:	b2da      	uxtb	r2, r3
 8031da0:	7bfb      	ldrb	r3, [r7, #15]
 8031da2:	4313      	orrs	r3, r2
 8031da4:	73fb      	strb	r3, [r7, #15]
    F(19);
 8031da6:	687b      	ldr	r3, [r7, #4]
 8031da8:	3313      	adds	r3, #19
 8031daa:	781a      	ldrb	r2, [r3, #0]
 8031dac:	683b      	ldr	r3, [r7, #0]
 8031dae:	3313      	adds	r3, #19
 8031db0:	781b      	ldrb	r3, [r3, #0]
 8031db2:	4053      	eors	r3, r2
 8031db4:	b2da      	uxtb	r2, r3
 8031db6:	7bfb      	ldrb	r3, [r7, #15]
 8031db8:	4313      	orrs	r3, r2
 8031dba:	73fb      	strb	r3, [r7, #15]
    F(20);
 8031dbc:	687b      	ldr	r3, [r7, #4]
 8031dbe:	3314      	adds	r3, #20
 8031dc0:	781a      	ldrb	r2, [r3, #0]
 8031dc2:	683b      	ldr	r3, [r7, #0]
 8031dc4:	3314      	adds	r3, #20
 8031dc6:	781b      	ldrb	r3, [r3, #0]
 8031dc8:	4053      	eors	r3, r2
 8031dca:	b2da      	uxtb	r2, r3
 8031dcc:	7bfb      	ldrb	r3, [r7, #15]
 8031dce:	4313      	orrs	r3, r2
 8031dd0:	73fb      	strb	r3, [r7, #15]
    F(21);
 8031dd2:	687b      	ldr	r3, [r7, #4]
 8031dd4:	3315      	adds	r3, #21
 8031dd6:	781a      	ldrb	r2, [r3, #0]
 8031dd8:	683b      	ldr	r3, [r7, #0]
 8031dda:	3315      	adds	r3, #21
 8031ddc:	781b      	ldrb	r3, [r3, #0]
 8031dde:	4053      	eors	r3, r2
 8031de0:	b2da      	uxtb	r2, r3
 8031de2:	7bfb      	ldrb	r3, [r7, #15]
 8031de4:	4313      	orrs	r3, r2
 8031de6:	73fb      	strb	r3, [r7, #15]
    F(22);
 8031de8:	687b      	ldr	r3, [r7, #4]
 8031dea:	3316      	adds	r3, #22
 8031dec:	781a      	ldrb	r2, [r3, #0]
 8031dee:	683b      	ldr	r3, [r7, #0]
 8031df0:	3316      	adds	r3, #22
 8031df2:	781b      	ldrb	r3, [r3, #0]
 8031df4:	4053      	eors	r3, r2
 8031df6:	b2da      	uxtb	r2, r3
 8031df8:	7bfb      	ldrb	r3, [r7, #15]
 8031dfa:	4313      	orrs	r3, r2
 8031dfc:	73fb      	strb	r3, [r7, #15]
    F(23);
 8031dfe:	687b      	ldr	r3, [r7, #4]
 8031e00:	3317      	adds	r3, #23
 8031e02:	781a      	ldrb	r2, [r3, #0]
 8031e04:	683b      	ldr	r3, [r7, #0]
 8031e06:	3317      	adds	r3, #23
 8031e08:	781b      	ldrb	r3, [r3, #0]
 8031e0a:	4053      	eors	r3, r2
 8031e0c:	b2da      	uxtb	r2, r3
 8031e0e:	7bfb      	ldrb	r3, [r7, #15]
 8031e10:	4313      	orrs	r3, r2
 8031e12:	73fb      	strb	r3, [r7, #15]
    F(24);
 8031e14:	687b      	ldr	r3, [r7, #4]
 8031e16:	3318      	adds	r3, #24
 8031e18:	781a      	ldrb	r2, [r3, #0]
 8031e1a:	683b      	ldr	r3, [r7, #0]
 8031e1c:	3318      	adds	r3, #24
 8031e1e:	781b      	ldrb	r3, [r3, #0]
 8031e20:	4053      	eors	r3, r2
 8031e22:	b2da      	uxtb	r2, r3
 8031e24:	7bfb      	ldrb	r3, [r7, #15]
 8031e26:	4313      	orrs	r3, r2
 8031e28:	73fb      	strb	r3, [r7, #15]
    F(25);
 8031e2a:	687b      	ldr	r3, [r7, #4]
 8031e2c:	3319      	adds	r3, #25
 8031e2e:	781a      	ldrb	r2, [r3, #0]
 8031e30:	683b      	ldr	r3, [r7, #0]
 8031e32:	3319      	adds	r3, #25
 8031e34:	781b      	ldrb	r3, [r3, #0]
 8031e36:	4053      	eors	r3, r2
 8031e38:	b2da      	uxtb	r2, r3
 8031e3a:	7bfb      	ldrb	r3, [r7, #15]
 8031e3c:	4313      	orrs	r3, r2
 8031e3e:	73fb      	strb	r3, [r7, #15]
    F(26);
 8031e40:	687b      	ldr	r3, [r7, #4]
 8031e42:	331a      	adds	r3, #26
 8031e44:	781a      	ldrb	r2, [r3, #0]
 8031e46:	683b      	ldr	r3, [r7, #0]
 8031e48:	331a      	adds	r3, #26
 8031e4a:	781b      	ldrb	r3, [r3, #0]
 8031e4c:	4053      	eors	r3, r2
 8031e4e:	b2da      	uxtb	r2, r3
 8031e50:	7bfb      	ldrb	r3, [r7, #15]
 8031e52:	4313      	orrs	r3, r2
 8031e54:	73fb      	strb	r3, [r7, #15]
    F(27);
 8031e56:	687b      	ldr	r3, [r7, #4]
 8031e58:	331b      	adds	r3, #27
 8031e5a:	781a      	ldrb	r2, [r3, #0]
 8031e5c:	683b      	ldr	r3, [r7, #0]
 8031e5e:	331b      	adds	r3, #27
 8031e60:	781b      	ldrb	r3, [r3, #0]
 8031e62:	4053      	eors	r3, r2
 8031e64:	b2da      	uxtb	r2, r3
 8031e66:	7bfb      	ldrb	r3, [r7, #15]
 8031e68:	4313      	orrs	r3, r2
 8031e6a:	73fb      	strb	r3, [r7, #15]
    F(28);
 8031e6c:	687b      	ldr	r3, [r7, #4]
 8031e6e:	331c      	adds	r3, #28
 8031e70:	781a      	ldrb	r2, [r3, #0]
 8031e72:	683b      	ldr	r3, [r7, #0]
 8031e74:	331c      	adds	r3, #28
 8031e76:	781b      	ldrb	r3, [r3, #0]
 8031e78:	4053      	eors	r3, r2
 8031e7a:	b2da      	uxtb	r2, r3
 8031e7c:	7bfb      	ldrb	r3, [r7, #15]
 8031e7e:	4313      	orrs	r3, r2
 8031e80:	73fb      	strb	r3, [r7, #15]
    F(29);
 8031e82:	687b      	ldr	r3, [r7, #4]
 8031e84:	331d      	adds	r3, #29
 8031e86:	781a      	ldrb	r2, [r3, #0]
 8031e88:	683b      	ldr	r3, [r7, #0]
 8031e8a:	331d      	adds	r3, #29
 8031e8c:	781b      	ldrb	r3, [r3, #0]
 8031e8e:	4053      	eors	r3, r2
 8031e90:	b2da      	uxtb	r2, r3
 8031e92:	7bfb      	ldrb	r3, [r7, #15]
 8031e94:	4313      	orrs	r3, r2
 8031e96:	73fb      	strb	r3, [r7, #15]
    F(30);
 8031e98:	687b      	ldr	r3, [r7, #4]
 8031e9a:	331e      	adds	r3, #30
 8031e9c:	781a      	ldrb	r2, [r3, #0]
 8031e9e:	683b      	ldr	r3, [r7, #0]
 8031ea0:	331e      	adds	r3, #30
 8031ea2:	781b      	ldrb	r3, [r3, #0]
 8031ea4:	4053      	eors	r3, r2
 8031ea6:	b2da      	uxtb	r2, r3
 8031ea8:	7bfb      	ldrb	r3, [r7, #15]
 8031eaa:	4313      	orrs	r3, r2
 8031eac:	73fb      	strb	r3, [r7, #15]
    F(31);
 8031eae:	687b      	ldr	r3, [r7, #4]
 8031eb0:	331f      	adds	r3, #31
 8031eb2:	781a      	ldrb	r2, [r3, #0]
 8031eb4:	683b      	ldr	r3, [r7, #0]
 8031eb6:	331f      	adds	r3, #31
 8031eb8:	781b      	ldrb	r3, [r3, #0]
 8031eba:	4053      	eors	r3, r2
 8031ebc:	b2da      	uxtb	r2, r3
 8031ebe:	7bfb      	ldrb	r3, [r7, #15]
 8031ec0:	4313      	orrs	r3, r2
 8031ec2:	73fb      	strb	r3, [r7, #15]
    #undef F

    return !r;
 8031ec4:	7bfb      	ldrb	r3, [r7, #15]
 8031ec6:	2b00      	cmp	r3, #0
 8031ec8:	bf0c      	ite	eq
 8031eca:	2301      	moveq	r3, #1
 8031ecc:	2300      	movne	r3, #0
 8031ece:	b2db      	uxtb	r3, r3
}
 8031ed0:	4618      	mov	r0, r3
 8031ed2:	3714      	adds	r7, #20
 8031ed4:	46bd      	mov	sp, r7
 8031ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8031eda:	4770      	bx	lr

08031edc <ed25519_verify>:

int ed25519_verify(const unsigned char *signature, const unsigned char *message, size_t message_len, const unsigned char *public_key) {
 8031edc:	b590      	push	{r4, r7, lr}
 8031ede:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8031ee2:	af00      	add	r7, sp, #0
 8031ee4:	f107 040c 	add.w	r4, r7, #12
 8031ee8:	6020      	str	r0, [r4, #0]
 8031eea:	f107 0008 	add.w	r0, r7, #8
 8031eee:	6001      	str	r1, [r0, #0]
 8031ef0:	1d39      	adds	r1, r7, #4
 8031ef2:	600a      	str	r2, [r1, #0]
 8031ef4:	463a      	mov	r2, r7
 8031ef6:	6013      	str	r3, [r2, #0]
    unsigned char checker[32];

    ge_p3 A;
    ge_p2 R;

    if (signature[63] & 224) {
 8031ef8:	f107 030c 	add.w	r3, r7, #12
 8031efc:	681b      	ldr	r3, [r3, #0]
 8031efe:	333f      	adds	r3, #63	; 0x3f
 8031f00:	781b      	ldrb	r3, [r3, #0]
 8031f02:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8031f06:	2b00      	cmp	r3, #0
 8031f08:	d001      	beq.n	8031f0e <ed25519_verify+0x32>
        return 0;
 8031f0a:	2300      	movs	r3, #0
 8031f0c:	e05d      	b.n	8031fca <ed25519_verify+0xee>
    }

    if (ge_frombytes_negate_vartime(&A, public_key) != 0) {
 8031f0e:	463b      	mov	r3, r7
 8031f10:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8031f14:	6819      	ldr	r1, [r3, #0]
 8031f16:	4610      	mov	r0, r2
 8031f18:	f7f7 feb4 	bl	8029c84 <ge_frombytes_negate_vartime>
 8031f1c:	4603      	mov	r3, r0
 8031f1e:	2b00      	cmp	r3, #0
 8031f20:	d001      	beq.n	8031f26 <ed25519_verify+0x4a>
        return 0;
 8031f22:	2300      	movs	r3, #0
 8031f24:	e051      	b.n	8031fca <ed25519_verify+0xee>
    }

#ifdef USE_SHA512
    sha512_context hash;
    sha512_init(&hash);
 8031f26:	f107 0310 	add.w	r3, r7, #16
 8031f2a:	4618      	mov	r0, r3
 8031f2c:	f7ff f9b0 	bl	8031290 <sha512_init>
    sha512_update(&hash, signature, 32);
 8031f30:	f107 030c 	add.w	r3, r7, #12
 8031f34:	f107 0010 	add.w	r0, r7, #16
 8031f38:	2220      	movs	r2, #32
 8031f3a:	6819      	ldr	r1, [r3, #0]
 8031f3c:	f7ff fa14 	bl	8031368 <sha512_update>
    sha512_update(&hash, public_key, 32);
 8031f40:	463b      	mov	r3, r7
 8031f42:	f107 0010 	add.w	r0, r7, #16
 8031f46:	2220      	movs	r2, #32
 8031f48:	6819      	ldr	r1, [r3, #0]
 8031f4a:	f7ff fa0d 	bl	8031368 <sha512_update>
    sha512_update(&hash, message, message_len);
 8031f4e:	1d3a      	adds	r2, r7, #4
 8031f50:	f107 0308 	add.w	r3, r7, #8
 8031f54:	f107 0010 	add.w	r0, r7, #16
 8031f58:	6812      	ldr	r2, [r2, #0]
 8031f5a:	6819      	ldr	r1, [r3, #0]
 8031f5c:	f7ff fa04 	bl	8031368 <sha512_update>
    sha512_final(&hash, h);
 8031f60:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8031f64:	f107 0310 	add.w	r3, r7, #16
 8031f68:	4611      	mov	r1, r2
 8031f6a:	4618      	mov	r0, r3
 8031f6c:	f7ff fa89 	bl	8031482 <sha512_final>
    sha3_update(&sha3, public_key, 32);
    sha3_update(&sha3, message, message_len);
    sha3_final(h, &sha3);
#endif

    sc_reduce(h);
 8031f70:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8031f74:	4618      	mov	r0, r3
 8031f76:	f7f9 f857 	bl	802b028 <sc_reduce>
    ge_double_scalarmult_vartime(&R, h, &A, signature + 32);
 8031f7a:	f107 030c 	add.w	r3, r7, #12
 8031f7e:	681b      	ldr	r3, [r3, #0]
 8031f80:	3320      	adds	r3, #32
 8031f82:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8031f86:	f507 7106 	add.w	r1, r7, #536	; 0x218
 8031f8a:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8031f8e:	f7f7 fc89 	bl	80298a4 <ge_double_scalarmult_vartime>
    ge_tobytes(checker, &R);
 8031f92:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8031f96:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8031f9a:	4611      	mov	r1, r2
 8031f9c:	4618      	mov	r0, r3
 8031f9e:	f7f8 f9b1 	bl	802a304 <ge_tobytes>

    if (!consttime_equal(checker, signature)) {
 8031fa2:	f107 030c 	add.w	r3, r7, #12
 8031fa6:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8031faa:	6819      	ldr	r1, [r3, #0]
 8031fac:	4610      	mov	r0, r2
 8031fae:	f7ff fe27 	bl	8031c00 <consttime_equal>
 8031fb2:	4603      	mov	r3, r0
 8031fb4:	2b00      	cmp	r3, #0
 8031fb6:	d107      	bne.n	8031fc8 <ed25519_verify+0xec>
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8031fb8:	2201      	movs	r2, #1
 8031fba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8031fbe:	4805      	ldr	r0, [pc, #20]	; (8031fd4 <ed25519_verify+0xf8>)
 8031fc0:	f000 fee2 	bl	8032d88 <HAL_GPIO_WritePin>
        return 0;
 8031fc4:	2300      	movs	r3, #0
 8031fc6:	e000      	b.n	8031fca <ed25519_verify+0xee>
    }

    return 1;
 8031fc8:	2301      	movs	r3, #1
}
 8031fca:	4618      	mov	r0, r3
 8031fcc:	f507 7717 	add.w	r7, r7, #604	; 0x25c
 8031fd0:	46bd      	mov	sp, r7
 8031fd2:	bd90      	pop	{r4, r7, pc}
 8031fd4:	40020c00 	.word	0x40020c00

08031fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8031fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8032010 <LoopFillZerobss+0x12>


/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8031fdc:	480d      	ldr	r0, [pc, #52]	; (8032014 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8031fde:	490e      	ldr	r1, [pc, #56]	; (8032018 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8031fe0:	4a0e      	ldr	r2, [pc, #56]	; (803201c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8031fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8031fe4:	e002      	b.n	8031fec <LoopCopyDataInit>

08031fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8031fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8031fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8031fea:	3304      	adds	r3, #4

08031fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8031fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8031fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8031ff0:	d3f9      	bcc.n	8031fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8031ff2:	4a0b      	ldr	r2, [pc, #44]	; (8032020 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8031ff4:	4c0b      	ldr	r4, [pc, #44]	; (8032024 <LoopFillZerobss+0x26>)
  movs r3, #0
 8031ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8031ff8:	e001      	b.n	8031ffe <LoopFillZerobss>

08031ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8031ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8031ffc:	3204      	adds	r2, #4

08031ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8031ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8032000:	d3fb      	bcc.n	8031ffa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8032002:	f7ff fde7 	bl	8031bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8032006:	f007 f9d9 	bl	80393bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 803200a:	f7f8 f9f1 	bl	802a3f0 <main>
  bx  lr    
 803200e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8032010:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8032014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8032018:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 803201c:	0803ed64 	.word	0x0803ed64
  ldr r2, =_sbss
 8032020:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8032024:	200009c8 	.word	0x200009c8

08032028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8032028:	e7fe      	b.n	8032028 <ADC_IRQHandler>
	...

0803202c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 803202c:	b580      	push	{r7, lr}
 803202e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8032030:	4b0e      	ldr	r3, [pc, #56]	; (803206c <HAL_Init+0x40>)
 8032032:	681b      	ldr	r3, [r3, #0]
 8032034:	4a0d      	ldr	r2, [pc, #52]	; (803206c <HAL_Init+0x40>)
 8032036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 803203a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 803203c:	4b0b      	ldr	r3, [pc, #44]	; (803206c <HAL_Init+0x40>)
 803203e:	681b      	ldr	r3, [r3, #0]
 8032040:	4a0a      	ldr	r2, [pc, #40]	; (803206c <HAL_Init+0x40>)
 8032042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8032046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8032048:	4b08      	ldr	r3, [pc, #32]	; (803206c <HAL_Init+0x40>)
 803204a:	681b      	ldr	r3, [r3, #0]
 803204c:	4a07      	ldr	r2, [pc, #28]	; (803206c <HAL_Init+0x40>)
 803204e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8032052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8032054:	2003      	movs	r0, #3
 8032056:	f000 f94f 	bl	80322f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 803205a:	200f      	movs	r0, #15
 803205c:	f000 f808 	bl	8032070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8032060:	f7ff fb86 	bl	8031770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8032064:	2300      	movs	r3, #0
}
 8032066:	4618      	mov	r0, r3
 8032068:	bd80      	pop	{r7, pc}
 803206a:	bf00      	nop
 803206c:	40023c00 	.word	0x40023c00

08032070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8032070:	b580      	push	{r7, lr}
 8032072:	b082      	sub	sp, #8
 8032074:	af00      	add	r7, sp, #0
 8032076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8032078:	4b12      	ldr	r3, [pc, #72]	; (80320c4 <HAL_InitTick+0x54>)
 803207a:	681a      	ldr	r2, [r3, #0]
 803207c:	4b12      	ldr	r3, [pc, #72]	; (80320c8 <HAL_InitTick+0x58>)
 803207e:	781b      	ldrb	r3, [r3, #0]
 8032080:	4619      	mov	r1, r3
 8032082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8032086:	fbb3 f3f1 	udiv	r3, r3, r1
 803208a:	fbb2 f3f3 	udiv	r3, r2, r3
 803208e:	4618      	mov	r0, r3
 8032090:	f000 f967 	bl	8032362 <HAL_SYSTICK_Config>
 8032094:	4603      	mov	r3, r0
 8032096:	2b00      	cmp	r3, #0
 8032098:	d001      	beq.n	803209e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 803209a:	2301      	movs	r3, #1
 803209c:	e00e      	b.n	80320bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 803209e:	687b      	ldr	r3, [r7, #4]
 80320a0:	2b0f      	cmp	r3, #15
 80320a2:	d80a      	bhi.n	80320ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80320a4:	2200      	movs	r2, #0
 80320a6:	6879      	ldr	r1, [r7, #4]
 80320a8:	f04f 30ff 	mov.w	r0, #4294967295
 80320ac:	f000 f92f 	bl	803230e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80320b0:	4a06      	ldr	r2, [pc, #24]	; (80320cc <HAL_InitTick+0x5c>)
 80320b2:	687b      	ldr	r3, [r7, #4]
 80320b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80320b6:	2300      	movs	r3, #0
 80320b8:	e000      	b.n	80320bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80320ba:	2301      	movs	r3, #1
}
 80320bc:	4618      	mov	r0, r3
 80320be:	3708      	adds	r7, #8
 80320c0:	46bd      	mov	sp, r7
 80320c2:	bd80      	pop	{r7, pc}
 80320c4:	20000020 	.word	0x20000020
 80320c8:	20000028 	.word	0x20000028
 80320cc:	20000024 	.word	0x20000024

080320d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80320d0:	b480      	push	{r7}
 80320d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80320d4:	4b06      	ldr	r3, [pc, #24]	; (80320f0 <HAL_IncTick+0x20>)
 80320d6:	781b      	ldrb	r3, [r3, #0]
 80320d8:	461a      	mov	r2, r3
 80320da:	4b06      	ldr	r3, [pc, #24]	; (80320f4 <HAL_IncTick+0x24>)
 80320dc:	681b      	ldr	r3, [r3, #0]
 80320de:	4413      	add	r3, r2
 80320e0:	4a04      	ldr	r2, [pc, #16]	; (80320f4 <HAL_IncTick+0x24>)
 80320e2:	6013      	str	r3, [r2, #0]
}
 80320e4:	bf00      	nop
 80320e6:	46bd      	mov	sp, r7
 80320e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80320ec:	4770      	bx	lr
 80320ee:	bf00      	nop
 80320f0:	20000028 	.word	0x20000028
 80320f4:	2000052c 	.word	0x2000052c

080320f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80320f8:	b480      	push	{r7}
 80320fa:	af00      	add	r7, sp, #0
  return uwTick;
 80320fc:	4b03      	ldr	r3, [pc, #12]	; (803210c <HAL_GetTick+0x14>)
 80320fe:	681b      	ldr	r3, [r3, #0]
}
 8032100:	4618      	mov	r0, r3
 8032102:	46bd      	mov	sp, r7
 8032104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032108:	4770      	bx	lr
 803210a:	bf00      	nop
 803210c:	2000052c 	.word	0x2000052c

08032110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8032110:	b580      	push	{r7, lr}
 8032112:	b084      	sub	sp, #16
 8032114:	af00      	add	r7, sp, #0
 8032116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8032118:	f7ff ffee 	bl	80320f8 <HAL_GetTick>
 803211c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 803211e:	687b      	ldr	r3, [r7, #4]
 8032120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8032122:	68fb      	ldr	r3, [r7, #12]
 8032124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8032128:	d005      	beq.n	8032136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 803212a:	4b0a      	ldr	r3, [pc, #40]	; (8032154 <HAL_Delay+0x44>)
 803212c:	781b      	ldrb	r3, [r3, #0]
 803212e:	461a      	mov	r2, r3
 8032130:	68fb      	ldr	r3, [r7, #12]
 8032132:	4413      	add	r3, r2
 8032134:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8032136:	bf00      	nop
 8032138:	f7ff ffde 	bl	80320f8 <HAL_GetTick>
 803213c:	4602      	mov	r2, r0
 803213e:	68bb      	ldr	r3, [r7, #8]
 8032140:	1ad3      	subs	r3, r2, r3
 8032142:	68fa      	ldr	r2, [r7, #12]
 8032144:	429a      	cmp	r2, r3
 8032146:	d8f7      	bhi.n	8032138 <HAL_Delay+0x28>
  {
  }
}
 8032148:	bf00      	nop
 803214a:	bf00      	nop
 803214c:	3710      	adds	r7, #16
 803214e:	46bd      	mov	sp, r7
 8032150:	bd80      	pop	{r7, pc}
 8032152:	bf00      	nop
 8032154:	20000028 	.word	0x20000028

08032158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8032158:	b480      	push	{r7}
 803215a:	b085      	sub	sp, #20
 803215c:	af00      	add	r7, sp, #0
 803215e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8032160:	687b      	ldr	r3, [r7, #4]
 8032162:	f003 0307 	and.w	r3, r3, #7
 8032166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8032168:	4b0c      	ldr	r3, [pc, #48]	; (803219c <__NVIC_SetPriorityGrouping+0x44>)
 803216a:	68db      	ldr	r3, [r3, #12]
 803216c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 803216e:	68ba      	ldr	r2, [r7, #8]
 8032170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8032174:	4013      	ands	r3, r2
 8032176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8032178:	68fb      	ldr	r3, [r7, #12]
 803217a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 803217c:	68bb      	ldr	r3, [r7, #8]
 803217e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8032180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8032184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8032188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 803218a:	4a04      	ldr	r2, [pc, #16]	; (803219c <__NVIC_SetPriorityGrouping+0x44>)
 803218c:	68bb      	ldr	r3, [r7, #8]
 803218e:	60d3      	str	r3, [r2, #12]
}
 8032190:	bf00      	nop
 8032192:	3714      	adds	r7, #20
 8032194:	46bd      	mov	sp, r7
 8032196:	f85d 7b04 	ldr.w	r7, [sp], #4
 803219a:	4770      	bx	lr
 803219c:	e000ed00 	.word	0xe000ed00

080321a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80321a0:	b480      	push	{r7}
 80321a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80321a4:	4b04      	ldr	r3, [pc, #16]	; (80321b8 <__NVIC_GetPriorityGrouping+0x18>)
 80321a6:	68db      	ldr	r3, [r3, #12]
 80321a8:	0a1b      	lsrs	r3, r3, #8
 80321aa:	f003 0307 	and.w	r3, r3, #7
}
 80321ae:	4618      	mov	r0, r3
 80321b0:	46bd      	mov	sp, r7
 80321b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80321b6:	4770      	bx	lr
 80321b8:	e000ed00 	.word	0xe000ed00

080321bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80321bc:	b480      	push	{r7}
 80321be:	b083      	sub	sp, #12
 80321c0:	af00      	add	r7, sp, #0
 80321c2:	4603      	mov	r3, r0
 80321c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80321c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80321ca:	2b00      	cmp	r3, #0
 80321cc:	db0b      	blt.n	80321e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80321ce:	79fb      	ldrb	r3, [r7, #7]
 80321d0:	f003 021f 	and.w	r2, r3, #31
 80321d4:	4907      	ldr	r1, [pc, #28]	; (80321f4 <__NVIC_EnableIRQ+0x38>)
 80321d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80321da:	095b      	lsrs	r3, r3, #5
 80321dc:	2001      	movs	r0, #1
 80321de:	fa00 f202 	lsl.w	r2, r0, r2
 80321e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80321e6:	bf00      	nop
 80321e8:	370c      	adds	r7, #12
 80321ea:	46bd      	mov	sp, r7
 80321ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80321f0:	4770      	bx	lr
 80321f2:	bf00      	nop
 80321f4:	e000e100 	.word	0xe000e100

080321f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80321f8:	b480      	push	{r7}
 80321fa:	b083      	sub	sp, #12
 80321fc:	af00      	add	r7, sp, #0
 80321fe:	4603      	mov	r3, r0
 8032200:	6039      	str	r1, [r7, #0]
 8032202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8032204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8032208:	2b00      	cmp	r3, #0
 803220a:	db0a      	blt.n	8032222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 803220c:	683b      	ldr	r3, [r7, #0]
 803220e:	b2da      	uxtb	r2, r3
 8032210:	490c      	ldr	r1, [pc, #48]	; (8032244 <__NVIC_SetPriority+0x4c>)
 8032212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8032216:	0112      	lsls	r2, r2, #4
 8032218:	b2d2      	uxtb	r2, r2
 803221a:	440b      	add	r3, r1
 803221c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8032220:	e00a      	b.n	8032238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8032222:	683b      	ldr	r3, [r7, #0]
 8032224:	b2da      	uxtb	r2, r3
 8032226:	4908      	ldr	r1, [pc, #32]	; (8032248 <__NVIC_SetPriority+0x50>)
 8032228:	79fb      	ldrb	r3, [r7, #7]
 803222a:	f003 030f 	and.w	r3, r3, #15
 803222e:	3b04      	subs	r3, #4
 8032230:	0112      	lsls	r2, r2, #4
 8032232:	b2d2      	uxtb	r2, r2
 8032234:	440b      	add	r3, r1
 8032236:	761a      	strb	r2, [r3, #24]
}
 8032238:	bf00      	nop
 803223a:	370c      	adds	r7, #12
 803223c:	46bd      	mov	sp, r7
 803223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032242:	4770      	bx	lr
 8032244:	e000e100 	.word	0xe000e100
 8032248:	e000ed00 	.word	0xe000ed00

0803224c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 803224c:	b480      	push	{r7}
 803224e:	b089      	sub	sp, #36	; 0x24
 8032250:	af00      	add	r7, sp, #0
 8032252:	60f8      	str	r0, [r7, #12]
 8032254:	60b9      	str	r1, [r7, #8]
 8032256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8032258:	68fb      	ldr	r3, [r7, #12]
 803225a:	f003 0307 	and.w	r3, r3, #7
 803225e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8032260:	69fb      	ldr	r3, [r7, #28]
 8032262:	f1c3 0307 	rsb	r3, r3, #7
 8032266:	2b04      	cmp	r3, #4
 8032268:	bf28      	it	cs
 803226a:	2304      	movcs	r3, #4
 803226c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 803226e:	69fb      	ldr	r3, [r7, #28]
 8032270:	3304      	adds	r3, #4
 8032272:	2b06      	cmp	r3, #6
 8032274:	d902      	bls.n	803227c <NVIC_EncodePriority+0x30>
 8032276:	69fb      	ldr	r3, [r7, #28]
 8032278:	3b03      	subs	r3, #3
 803227a:	e000      	b.n	803227e <NVIC_EncodePriority+0x32>
 803227c:	2300      	movs	r3, #0
 803227e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8032280:	f04f 32ff 	mov.w	r2, #4294967295
 8032284:	69bb      	ldr	r3, [r7, #24]
 8032286:	fa02 f303 	lsl.w	r3, r2, r3
 803228a:	43da      	mvns	r2, r3
 803228c:	68bb      	ldr	r3, [r7, #8]
 803228e:	401a      	ands	r2, r3
 8032290:	697b      	ldr	r3, [r7, #20]
 8032292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8032294:	f04f 31ff 	mov.w	r1, #4294967295
 8032298:	697b      	ldr	r3, [r7, #20]
 803229a:	fa01 f303 	lsl.w	r3, r1, r3
 803229e:	43d9      	mvns	r1, r3
 80322a0:	687b      	ldr	r3, [r7, #4]
 80322a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80322a4:	4313      	orrs	r3, r2
         );
}
 80322a6:	4618      	mov	r0, r3
 80322a8:	3724      	adds	r7, #36	; 0x24
 80322aa:	46bd      	mov	sp, r7
 80322ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80322b0:	4770      	bx	lr
	...

080322b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80322b4:	b580      	push	{r7, lr}
 80322b6:	b082      	sub	sp, #8
 80322b8:	af00      	add	r7, sp, #0
 80322ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80322bc:	687b      	ldr	r3, [r7, #4]
 80322be:	3b01      	subs	r3, #1
 80322c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80322c4:	d301      	bcc.n	80322ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80322c6:	2301      	movs	r3, #1
 80322c8:	e00f      	b.n	80322ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80322ca:	4a0a      	ldr	r2, [pc, #40]	; (80322f4 <SysTick_Config+0x40>)
 80322cc:	687b      	ldr	r3, [r7, #4]
 80322ce:	3b01      	subs	r3, #1
 80322d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80322d2:	210f      	movs	r1, #15
 80322d4:	f04f 30ff 	mov.w	r0, #4294967295
 80322d8:	f7ff ff8e 	bl	80321f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80322dc:	4b05      	ldr	r3, [pc, #20]	; (80322f4 <SysTick_Config+0x40>)
 80322de:	2200      	movs	r2, #0
 80322e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80322e2:	4b04      	ldr	r3, [pc, #16]	; (80322f4 <SysTick_Config+0x40>)
 80322e4:	2207      	movs	r2, #7
 80322e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80322e8:	2300      	movs	r3, #0
}
 80322ea:	4618      	mov	r0, r3
 80322ec:	3708      	adds	r7, #8
 80322ee:	46bd      	mov	sp, r7
 80322f0:	bd80      	pop	{r7, pc}
 80322f2:	bf00      	nop
 80322f4:	e000e010 	.word	0xe000e010

080322f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80322f8:	b580      	push	{r7, lr}
 80322fa:	b082      	sub	sp, #8
 80322fc:	af00      	add	r7, sp, #0
 80322fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8032300:	6878      	ldr	r0, [r7, #4]
 8032302:	f7ff ff29 	bl	8032158 <__NVIC_SetPriorityGrouping>
}
 8032306:	bf00      	nop
 8032308:	3708      	adds	r7, #8
 803230a:	46bd      	mov	sp, r7
 803230c:	bd80      	pop	{r7, pc}

0803230e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 803230e:	b580      	push	{r7, lr}
 8032310:	b086      	sub	sp, #24
 8032312:	af00      	add	r7, sp, #0
 8032314:	4603      	mov	r3, r0
 8032316:	60b9      	str	r1, [r7, #8]
 8032318:	607a      	str	r2, [r7, #4]
 803231a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 803231c:	2300      	movs	r3, #0
 803231e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8032320:	f7ff ff3e 	bl	80321a0 <__NVIC_GetPriorityGrouping>
 8032324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8032326:	687a      	ldr	r2, [r7, #4]
 8032328:	68b9      	ldr	r1, [r7, #8]
 803232a:	6978      	ldr	r0, [r7, #20]
 803232c:	f7ff ff8e 	bl	803224c <NVIC_EncodePriority>
 8032330:	4602      	mov	r2, r0
 8032332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8032336:	4611      	mov	r1, r2
 8032338:	4618      	mov	r0, r3
 803233a:	f7ff ff5d 	bl	80321f8 <__NVIC_SetPriority>
}
 803233e:	bf00      	nop
 8032340:	3718      	adds	r7, #24
 8032342:	46bd      	mov	sp, r7
 8032344:	bd80      	pop	{r7, pc}

08032346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8032346:	b580      	push	{r7, lr}
 8032348:	b082      	sub	sp, #8
 803234a:	af00      	add	r7, sp, #0
 803234c:	4603      	mov	r3, r0
 803234e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8032350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8032354:	4618      	mov	r0, r3
 8032356:	f7ff ff31 	bl	80321bc <__NVIC_EnableIRQ>
}
 803235a:	bf00      	nop
 803235c:	3708      	adds	r7, #8
 803235e:	46bd      	mov	sp, r7
 8032360:	bd80      	pop	{r7, pc}

08032362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8032362:	b580      	push	{r7, lr}
 8032364:	b082      	sub	sp, #8
 8032366:	af00      	add	r7, sp, #0
 8032368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 803236a:	6878      	ldr	r0, [r7, #4]
 803236c:	f7ff ffa2 	bl	80322b4 <SysTick_Config>
 8032370:	4603      	mov	r3, r0
}
 8032372:	4618      	mov	r0, r3
 8032374:	3708      	adds	r7, #8
 8032376:	46bd      	mov	sp, r7
 8032378:	bd80      	pop	{r7, pc}

0803237a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 803237a:	b580      	push	{r7, lr}
 803237c:	b084      	sub	sp, #16
 803237e:	af00      	add	r7, sp, #0
 8032380:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8032382:	687b      	ldr	r3, [r7, #4]
 8032384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8032386:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8032388:	f7ff feb6 	bl	80320f8 <HAL_GetTick>
 803238c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 803238e:	687b      	ldr	r3, [r7, #4]
 8032390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8032394:	b2db      	uxtb	r3, r3
 8032396:	2b02      	cmp	r3, #2
 8032398:	d008      	beq.n	80323ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 803239a:	687b      	ldr	r3, [r7, #4]
 803239c:	2280      	movs	r2, #128	; 0x80
 803239e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80323a0:	687b      	ldr	r3, [r7, #4]
 80323a2:	2200      	movs	r2, #0
 80323a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80323a8:	2301      	movs	r3, #1
 80323aa:	e052      	b.n	8032452 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80323ac:	687b      	ldr	r3, [r7, #4]
 80323ae:	681b      	ldr	r3, [r3, #0]
 80323b0:	681a      	ldr	r2, [r3, #0]
 80323b2:	687b      	ldr	r3, [r7, #4]
 80323b4:	681b      	ldr	r3, [r3, #0]
 80323b6:	f022 0216 	bic.w	r2, r2, #22
 80323ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80323bc:	687b      	ldr	r3, [r7, #4]
 80323be:	681b      	ldr	r3, [r3, #0]
 80323c0:	695a      	ldr	r2, [r3, #20]
 80323c2:	687b      	ldr	r3, [r7, #4]
 80323c4:	681b      	ldr	r3, [r3, #0]
 80323c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80323ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80323cc:	687b      	ldr	r3, [r7, #4]
 80323ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80323d0:	2b00      	cmp	r3, #0
 80323d2:	d103      	bne.n	80323dc <HAL_DMA_Abort+0x62>
 80323d4:	687b      	ldr	r3, [r7, #4]
 80323d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80323d8:	2b00      	cmp	r3, #0
 80323da:	d007      	beq.n	80323ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80323dc:	687b      	ldr	r3, [r7, #4]
 80323de:	681b      	ldr	r3, [r3, #0]
 80323e0:	681a      	ldr	r2, [r3, #0]
 80323e2:	687b      	ldr	r3, [r7, #4]
 80323e4:	681b      	ldr	r3, [r3, #0]
 80323e6:	f022 0208 	bic.w	r2, r2, #8
 80323ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80323ec:	687b      	ldr	r3, [r7, #4]
 80323ee:	681b      	ldr	r3, [r3, #0]
 80323f0:	681a      	ldr	r2, [r3, #0]
 80323f2:	687b      	ldr	r3, [r7, #4]
 80323f4:	681b      	ldr	r3, [r3, #0]
 80323f6:	f022 0201 	bic.w	r2, r2, #1
 80323fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80323fc:	e013      	b.n	8032426 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80323fe:	f7ff fe7b 	bl	80320f8 <HAL_GetTick>
 8032402:	4602      	mov	r2, r0
 8032404:	68bb      	ldr	r3, [r7, #8]
 8032406:	1ad3      	subs	r3, r2, r3
 8032408:	2b05      	cmp	r3, #5
 803240a:	d90c      	bls.n	8032426 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 803240c:	687b      	ldr	r3, [r7, #4]
 803240e:	2220      	movs	r2, #32
 8032410:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8032412:	687b      	ldr	r3, [r7, #4]
 8032414:	2203      	movs	r2, #3
 8032416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 803241a:	687b      	ldr	r3, [r7, #4]
 803241c:	2200      	movs	r2, #0
 803241e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8032422:	2303      	movs	r3, #3
 8032424:	e015      	b.n	8032452 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8032426:	687b      	ldr	r3, [r7, #4]
 8032428:	681b      	ldr	r3, [r3, #0]
 803242a:	681b      	ldr	r3, [r3, #0]
 803242c:	f003 0301 	and.w	r3, r3, #1
 8032430:	2b00      	cmp	r3, #0
 8032432:	d1e4      	bne.n	80323fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8032434:	687b      	ldr	r3, [r7, #4]
 8032436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8032438:	223f      	movs	r2, #63	; 0x3f
 803243a:	409a      	lsls	r2, r3
 803243c:	68fb      	ldr	r3, [r7, #12]
 803243e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8032440:	687b      	ldr	r3, [r7, #4]
 8032442:	2201      	movs	r2, #1
 8032444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8032448:	687b      	ldr	r3, [r7, #4]
 803244a:	2200      	movs	r2, #0
 803244c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8032450:	2300      	movs	r3, #0
}
 8032452:	4618      	mov	r0, r3
 8032454:	3710      	adds	r7, #16
 8032456:	46bd      	mov	sp, r7
 8032458:	bd80      	pop	{r7, pc}

0803245a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 803245a:	b480      	push	{r7}
 803245c:	b083      	sub	sp, #12
 803245e:	af00      	add	r7, sp, #0
 8032460:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8032462:	687b      	ldr	r3, [r7, #4]
 8032464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8032468:	b2db      	uxtb	r3, r3
 803246a:	2b02      	cmp	r3, #2
 803246c:	d004      	beq.n	8032478 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 803246e:	687b      	ldr	r3, [r7, #4]
 8032470:	2280      	movs	r2, #128	; 0x80
 8032472:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8032474:	2301      	movs	r3, #1
 8032476:	e00c      	b.n	8032492 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8032478:	687b      	ldr	r3, [r7, #4]
 803247a:	2205      	movs	r2, #5
 803247c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8032480:	687b      	ldr	r3, [r7, #4]
 8032482:	681b      	ldr	r3, [r3, #0]
 8032484:	681a      	ldr	r2, [r3, #0]
 8032486:	687b      	ldr	r3, [r7, #4]
 8032488:	681b      	ldr	r3, [r3, #0]
 803248a:	f022 0201 	bic.w	r2, r2, #1
 803248e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8032490:	2300      	movs	r3, #0
}
 8032492:	4618      	mov	r0, r3
 8032494:	370c      	adds	r7, #12
 8032496:	46bd      	mov	sp, r7
 8032498:	f85d 7b04 	ldr.w	r7, [sp], #4
 803249c:	4770      	bx	lr
	...

080324a0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80324a0:	b580      	push	{r7, lr}
 80324a2:	b086      	sub	sp, #24
 80324a4:	af00      	add	r7, sp, #0
 80324a6:	60f8      	str	r0, [r7, #12]
 80324a8:	60b9      	str	r1, [r7, #8]
 80324aa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80324ae:	2301      	movs	r3, #1
 80324b0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80324b2:	4b23      	ldr	r3, [pc, #140]	; (8032540 <HAL_FLASH_Program+0xa0>)
 80324b4:	7e1b      	ldrb	r3, [r3, #24]
 80324b6:	2b01      	cmp	r3, #1
 80324b8:	d101      	bne.n	80324be <HAL_FLASH_Program+0x1e>
 80324ba:	2302      	movs	r3, #2
 80324bc:	e03b      	b.n	8032536 <HAL_FLASH_Program+0x96>
 80324be:	4b20      	ldr	r3, [pc, #128]	; (8032540 <HAL_FLASH_Program+0xa0>)
 80324c0:	2201      	movs	r2, #1
 80324c2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80324c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80324c8:	f000 f870 	bl	80325ac <FLASH_WaitForLastOperation>
 80324cc:	4603      	mov	r3, r0
 80324ce:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80324d0:	7dfb      	ldrb	r3, [r7, #23]
 80324d2:	2b00      	cmp	r3, #0
 80324d4:	d12b      	bne.n	803252e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80324d6:	68fb      	ldr	r3, [r7, #12]
 80324d8:	2b00      	cmp	r3, #0
 80324da:	d105      	bne.n	80324e8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80324dc:	783b      	ldrb	r3, [r7, #0]
 80324de:	4619      	mov	r1, r3
 80324e0:	68b8      	ldr	r0, [r7, #8]
 80324e2:	f000 f91b 	bl	803271c <FLASH_Program_Byte>
 80324e6:	e016      	b.n	8032516 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80324e8:	68fb      	ldr	r3, [r7, #12]
 80324ea:	2b01      	cmp	r3, #1
 80324ec:	d105      	bne.n	80324fa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80324ee:	883b      	ldrh	r3, [r7, #0]
 80324f0:	4619      	mov	r1, r3
 80324f2:	68b8      	ldr	r0, [r7, #8]
 80324f4:	f000 f8ee 	bl	80326d4 <FLASH_Program_HalfWord>
 80324f8:	e00d      	b.n	8032516 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80324fa:	68fb      	ldr	r3, [r7, #12]
 80324fc:	2b02      	cmp	r3, #2
 80324fe:	d105      	bne.n	803250c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8032500:	683b      	ldr	r3, [r7, #0]
 8032502:	4619      	mov	r1, r3
 8032504:	68b8      	ldr	r0, [r7, #8]
 8032506:	f000 f8c3 	bl	8032690 <FLASH_Program_Word>
 803250a:	e004      	b.n	8032516 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 803250c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8032510:	68b8      	ldr	r0, [r7, #8]
 8032512:	f000 f88b 	bl	803262c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8032516:	f24c 3050 	movw	r0, #50000	; 0xc350
 803251a:	f000 f847 	bl	80325ac <FLASH_WaitForLastOperation>
 803251e:	4603      	mov	r3, r0
 8032520:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8032522:	4b08      	ldr	r3, [pc, #32]	; (8032544 <HAL_FLASH_Program+0xa4>)
 8032524:	691b      	ldr	r3, [r3, #16]
 8032526:	4a07      	ldr	r2, [pc, #28]	; (8032544 <HAL_FLASH_Program+0xa4>)
 8032528:	f023 0301 	bic.w	r3, r3, #1
 803252c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 803252e:	4b04      	ldr	r3, [pc, #16]	; (8032540 <HAL_FLASH_Program+0xa0>)
 8032530:	2200      	movs	r2, #0
 8032532:	761a      	strb	r2, [r3, #24]
  
  return status;
 8032534:	7dfb      	ldrb	r3, [r7, #23]
}
 8032536:	4618      	mov	r0, r3
 8032538:	3718      	adds	r7, #24
 803253a:	46bd      	mov	sp, r7
 803253c:	bd80      	pop	{r7, pc}
 803253e:	bf00      	nop
 8032540:	20000530 	.word	0x20000530
 8032544:	40023c00 	.word	0x40023c00

08032548 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8032548:	b480      	push	{r7}
 803254a:	b083      	sub	sp, #12
 803254c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 803254e:	2300      	movs	r3, #0
 8032550:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8032552:	4b0b      	ldr	r3, [pc, #44]	; (8032580 <HAL_FLASH_Unlock+0x38>)
 8032554:	691b      	ldr	r3, [r3, #16]
 8032556:	2b00      	cmp	r3, #0
 8032558:	da0b      	bge.n	8032572 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 803255a:	4b09      	ldr	r3, [pc, #36]	; (8032580 <HAL_FLASH_Unlock+0x38>)
 803255c:	4a09      	ldr	r2, [pc, #36]	; (8032584 <HAL_FLASH_Unlock+0x3c>)
 803255e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8032560:	4b07      	ldr	r3, [pc, #28]	; (8032580 <HAL_FLASH_Unlock+0x38>)
 8032562:	4a09      	ldr	r2, [pc, #36]	; (8032588 <HAL_FLASH_Unlock+0x40>)
 8032564:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8032566:	4b06      	ldr	r3, [pc, #24]	; (8032580 <HAL_FLASH_Unlock+0x38>)
 8032568:	691b      	ldr	r3, [r3, #16]
 803256a:	2b00      	cmp	r3, #0
 803256c:	da01      	bge.n	8032572 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 803256e:	2301      	movs	r3, #1
 8032570:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8032572:	79fb      	ldrb	r3, [r7, #7]
}
 8032574:	4618      	mov	r0, r3
 8032576:	370c      	adds	r7, #12
 8032578:	46bd      	mov	sp, r7
 803257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803257e:	4770      	bx	lr
 8032580:	40023c00 	.word	0x40023c00
 8032584:	45670123 	.word	0x45670123
 8032588:	cdef89ab 	.word	0xcdef89ab

0803258c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 803258c:	b480      	push	{r7}
 803258e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8032590:	4b05      	ldr	r3, [pc, #20]	; (80325a8 <HAL_FLASH_Lock+0x1c>)
 8032592:	691b      	ldr	r3, [r3, #16]
 8032594:	4a04      	ldr	r2, [pc, #16]	; (80325a8 <HAL_FLASH_Lock+0x1c>)
 8032596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 803259a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 803259c:	2300      	movs	r3, #0
}
 803259e:	4618      	mov	r0, r3
 80325a0:	46bd      	mov	sp, r7
 80325a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80325a6:	4770      	bx	lr
 80325a8:	40023c00 	.word	0x40023c00

080325ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80325ac:	b580      	push	{r7, lr}
 80325ae:	b084      	sub	sp, #16
 80325b0:	af00      	add	r7, sp, #0
 80325b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80325b4:	2300      	movs	r3, #0
 80325b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80325b8:	4b1a      	ldr	r3, [pc, #104]	; (8032624 <FLASH_WaitForLastOperation+0x78>)
 80325ba:	2200      	movs	r2, #0
 80325bc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80325be:	f7ff fd9b 	bl	80320f8 <HAL_GetTick>
 80325c2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80325c4:	e010      	b.n	80325e8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80325c6:	687b      	ldr	r3, [r7, #4]
 80325c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80325cc:	d00c      	beq.n	80325e8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80325ce:	687b      	ldr	r3, [r7, #4]
 80325d0:	2b00      	cmp	r3, #0
 80325d2:	d007      	beq.n	80325e4 <FLASH_WaitForLastOperation+0x38>
 80325d4:	f7ff fd90 	bl	80320f8 <HAL_GetTick>
 80325d8:	4602      	mov	r2, r0
 80325da:	68fb      	ldr	r3, [r7, #12]
 80325dc:	1ad3      	subs	r3, r2, r3
 80325de:	687a      	ldr	r2, [r7, #4]
 80325e0:	429a      	cmp	r2, r3
 80325e2:	d201      	bcs.n	80325e8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80325e4:	2303      	movs	r3, #3
 80325e6:	e019      	b.n	803261c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80325e8:	4b0f      	ldr	r3, [pc, #60]	; (8032628 <FLASH_WaitForLastOperation+0x7c>)
 80325ea:	68db      	ldr	r3, [r3, #12]
 80325ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80325f0:	2b00      	cmp	r3, #0
 80325f2:	d1e8      	bne.n	80325c6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80325f4:	4b0c      	ldr	r3, [pc, #48]	; (8032628 <FLASH_WaitForLastOperation+0x7c>)
 80325f6:	68db      	ldr	r3, [r3, #12]
 80325f8:	f003 0301 	and.w	r3, r3, #1
 80325fc:	2b00      	cmp	r3, #0
 80325fe:	d002      	beq.n	8032606 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8032600:	4b09      	ldr	r3, [pc, #36]	; (8032628 <FLASH_WaitForLastOperation+0x7c>)
 8032602:	2201      	movs	r2, #1
 8032604:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8032606:	4b08      	ldr	r3, [pc, #32]	; (8032628 <FLASH_WaitForLastOperation+0x7c>)
 8032608:	68db      	ldr	r3, [r3, #12]
 803260a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 803260e:	2b00      	cmp	r3, #0
 8032610:	d003      	beq.n	803261a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8032612:	f000 f8a5 	bl	8032760 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8032616:	2301      	movs	r3, #1
 8032618:	e000      	b.n	803261c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 803261a:	2300      	movs	r3, #0
  
}  
 803261c:	4618      	mov	r0, r3
 803261e:	3710      	adds	r7, #16
 8032620:	46bd      	mov	sp, r7
 8032622:	bd80      	pop	{r7, pc}
 8032624:	20000530 	.word	0x20000530
 8032628:	40023c00 	.word	0x40023c00

0803262c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 803262c:	b480      	push	{r7}
 803262e:	b085      	sub	sp, #20
 8032630:	af00      	add	r7, sp, #0
 8032632:	60f8      	str	r0, [r7, #12]
 8032634:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8032638:	4b14      	ldr	r3, [pc, #80]	; (803268c <FLASH_Program_DoubleWord+0x60>)
 803263a:	691b      	ldr	r3, [r3, #16]
 803263c:	4a13      	ldr	r2, [pc, #76]	; (803268c <FLASH_Program_DoubleWord+0x60>)
 803263e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8032642:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8032644:	4b11      	ldr	r3, [pc, #68]	; (803268c <FLASH_Program_DoubleWord+0x60>)
 8032646:	691b      	ldr	r3, [r3, #16]
 8032648:	4a10      	ldr	r2, [pc, #64]	; (803268c <FLASH_Program_DoubleWord+0x60>)
 803264a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 803264e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8032650:	4b0e      	ldr	r3, [pc, #56]	; (803268c <FLASH_Program_DoubleWord+0x60>)
 8032652:	691b      	ldr	r3, [r3, #16]
 8032654:	4a0d      	ldr	r2, [pc, #52]	; (803268c <FLASH_Program_DoubleWord+0x60>)
 8032656:	f043 0301 	orr.w	r3, r3, #1
 803265a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 803265c:	68fb      	ldr	r3, [r7, #12]
 803265e:	683a      	ldr	r2, [r7, #0]
 8032660:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8032662:	f3bf 8f6f 	isb	sy
}
 8032666:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8032668:	e9d7 0100 	ldrd	r0, r1, [r7]
 803266c:	f04f 0200 	mov.w	r2, #0
 8032670:	f04f 0300 	mov.w	r3, #0
 8032674:	000a      	movs	r2, r1
 8032676:	2300      	movs	r3, #0
 8032678:	68f9      	ldr	r1, [r7, #12]
 803267a:	3104      	adds	r1, #4
 803267c:	4613      	mov	r3, r2
 803267e:	600b      	str	r3, [r1, #0]
}
 8032680:	bf00      	nop
 8032682:	3714      	adds	r7, #20
 8032684:	46bd      	mov	sp, r7
 8032686:	f85d 7b04 	ldr.w	r7, [sp], #4
 803268a:	4770      	bx	lr
 803268c:	40023c00 	.word	0x40023c00

08032690 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8032690:	b480      	push	{r7}
 8032692:	b083      	sub	sp, #12
 8032694:	af00      	add	r7, sp, #0
 8032696:	6078      	str	r0, [r7, #4]
 8032698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 803269a:	4b0d      	ldr	r3, [pc, #52]	; (80326d0 <FLASH_Program_Word+0x40>)
 803269c:	691b      	ldr	r3, [r3, #16]
 803269e:	4a0c      	ldr	r2, [pc, #48]	; (80326d0 <FLASH_Program_Word+0x40>)
 80326a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80326a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80326a6:	4b0a      	ldr	r3, [pc, #40]	; (80326d0 <FLASH_Program_Word+0x40>)
 80326a8:	691b      	ldr	r3, [r3, #16]
 80326aa:	4a09      	ldr	r2, [pc, #36]	; (80326d0 <FLASH_Program_Word+0x40>)
 80326ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80326b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80326b2:	4b07      	ldr	r3, [pc, #28]	; (80326d0 <FLASH_Program_Word+0x40>)
 80326b4:	691b      	ldr	r3, [r3, #16]
 80326b6:	4a06      	ldr	r2, [pc, #24]	; (80326d0 <FLASH_Program_Word+0x40>)
 80326b8:	f043 0301 	orr.w	r3, r3, #1
 80326bc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80326be:	687b      	ldr	r3, [r7, #4]
 80326c0:	683a      	ldr	r2, [r7, #0]
 80326c2:	601a      	str	r2, [r3, #0]
}
 80326c4:	bf00      	nop
 80326c6:	370c      	adds	r7, #12
 80326c8:	46bd      	mov	sp, r7
 80326ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80326ce:	4770      	bx	lr
 80326d0:	40023c00 	.word	0x40023c00

080326d4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80326d4:	b480      	push	{r7}
 80326d6:	b083      	sub	sp, #12
 80326d8:	af00      	add	r7, sp, #0
 80326da:	6078      	str	r0, [r7, #4]
 80326dc:	460b      	mov	r3, r1
 80326de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80326e0:	4b0d      	ldr	r3, [pc, #52]	; (8032718 <FLASH_Program_HalfWord+0x44>)
 80326e2:	691b      	ldr	r3, [r3, #16]
 80326e4:	4a0c      	ldr	r2, [pc, #48]	; (8032718 <FLASH_Program_HalfWord+0x44>)
 80326e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80326ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80326ec:	4b0a      	ldr	r3, [pc, #40]	; (8032718 <FLASH_Program_HalfWord+0x44>)
 80326ee:	691b      	ldr	r3, [r3, #16]
 80326f0:	4a09      	ldr	r2, [pc, #36]	; (8032718 <FLASH_Program_HalfWord+0x44>)
 80326f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80326f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80326f8:	4b07      	ldr	r3, [pc, #28]	; (8032718 <FLASH_Program_HalfWord+0x44>)
 80326fa:	691b      	ldr	r3, [r3, #16]
 80326fc:	4a06      	ldr	r2, [pc, #24]	; (8032718 <FLASH_Program_HalfWord+0x44>)
 80326fe:	f043 0301 	orr.w	r3, r3, #1
 8032702:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8032704:	687b      	ldr	r3, [r7, #4]
 8032706:	887a      	ldrh	r2, [r7, #2]
 8032708:	801a      	strh	r2, [r3, #0]
}
 803270a:	bf00      	nop
 803270c:	370c      	adds	r7, #12
 803270e:	46bd      	mov	sp, r7
 8032710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032714:	4770      	bx	lr
 8032716:	bf00      	nop
 8032718:	40023c00 	.word	0x40023c00

0803271c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 803271c:	b480      	push	{r7}
 803271e:	b083      	sub	sp, #12
 8032720:	af00      	add	r7, sp, #0
 8032722:	6078      	str	r0, [r7, #4]
 8032724:	460b      	mov	r3, r1
 8032726:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8032728:	4b0c      	ldr	r3, [pc, #48]	; (803275c <FLASH_Program_Byte+0x40>)
 803272a:	691b      	ldr	r3, [r3, #16]
 803272c:	4a0b      	ldr	r2, [pc, #44]	; (803275c <FLASH_Program_Byte+0x40>)
 803272e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8032732:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8032734:	4b09      	ldr	r3, [pc, #36]	; (803275c <FLASH_Program_Byte+0x40>)
 8032736:	4a09      	ldr	r2, [pc, #36]	; (803275c <FLASH_Program_Byte+0x40>)
 8032738:	691b      	ldr	r3, [r3, #16]
 803273a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 803273c:	4b07      	ldr	r3, [pc, #28]	; (803275c <FLASH_Program_Byte+0x40>)
 803273e:	691b      	ldr	r3, [r3, #16]
 8032740:	4a06      	ldr	r2, [pc, #24]	; (803275c <FLASH_Program_Byte+0x40>)
 8032742:	f043 0301 	orr.w	r3, r3, #1
 8032746:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8032748:	687b      	ldr	r3, [r7, #4]
 803274a:	78fa      	ldrb	r2, [r7, #3]
 803274c:	701a      	strb	r2, [r3, #0]
}
 803274e:	bf00      	nop
 8032750:	370c      	adds	r7, #12
 8032752:	46bd      	mov	sp, r7
 8032754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032758:	4770      	bx	lr
 803275a:	bf00      	nop
 803275c:	40023c00 	.word	0x40023c00

08032760 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8032760:	b480      	push	{r7}
 8032762:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8032764:	4b27      	ldr	r3, [pc, #156]	; (8032804 <FLASH_SetErrorCode+0xa4>)
 8032766:	68db      	ldr	r3, [r3, #12]
 8032768:	f003 0310 	and.w	r3, r3, #16
 803276c:	2b00      	cmp	r3, #0
 803276e:	d008      	beq.n	8032782 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8032770:	4b25      	ldr	r3, [pc, #148]	; (8032808 <FLASH_SetErrorCode+0xa8>)
 8032772:	69db      	ldr	r3, [r3, #28]
 8032774:	f043 0310 	orr.w	r3, r3, #16
 8032778:	4a23      	ldr	r2, [pc, #140]	; (8032808 <FLASH_SetErrorCode+0xa8>)
 803277a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 803277c:	4b21      	ldr	r3, [pc, #132]	; (8032804 <FLASH_SetErrorCode+0xa4>)
 803277e:	2210      	movs	r2, #16
 8032780:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8032782:	4b20      	ldr	r3, [pc, #128]	; (8032804 <FLASH_SetErrorCode+0xa4>)
 8032784:	68db      	ldr	r3, [r3, #12]
 8032786:	f003 0320 	and.w	r3, r3, #32
 803278a:	2b00      	cmp	r3, #0
 803278c:	d008      	beq.n	80327a0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 803278e:	4b1e      	ldr	r3, [pc, #120]	; (8032808 <FLASH_SetErrorCode+0xa8>)
 8032790:	69db      	ldr	r3, [r3, #28]
 8032792:	f043 0308 	orr.w	r3, r3, #8
 8032796:	4a1c      	ldr	r2, [pc, #112]	; (8032808 <FLASH_SetErrorCode+0xa8>)
 8032798:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 803279a:	4b1a      	ldr	r3, [pc, #104]	; (8032804 <FLASH_SetErrorCode+0xa4>)
 803279c:	2220      	movs	r2, #32
 803279e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80327a0:	4b18      	ldr	r3, [pc, #96]	; (8032804 <FLASH_SetErrorCode+0xa4>)
 80327a2:	68db      	ldr	r3, [r3, #12]
 80327a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80327a8:	2b00      	cmp	r3, #0
 80327aa:	d008      	beq.n	80327be <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80327ac:	4b16      	ldr	r3, [pc, #88]	; (8032808 <FLASH_SetErrorCode+0xa8>)
 80327ae:	69db      	ldr	r3, [r3, #28]
 80327b0:	f043 0304 	orr.w	r3, r3, #4
 80327b4:	4a14      	ldr	r2, [pc, #80]	; (8032808 <FLASH_SetErrorCode+0xa8>)
 80327b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80327b8:	4b12      	ldr	r3, [pc, #72]	; (8032804 <FLASH_SetErrorCode+0xa4>)
 80327ba:	2240      	movs	r2, #64	; 0x40
 80327bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80327be:	4b11      	ldr	r3, [pc, #68]	; (8032804 <FLASH_SetErrorCode+0xa4>)
 80327c0:	68db      	ldr	r3, [r3, #12]
 80327c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80327c6:	2b00      	cmp	r3, #0
 80327c8:	d008      	beq.n	80327dc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80327ca:	4b0f      	ldr	r3, [pc, #60]	; (8032808 <FLASH_SetErrorCode+0xa8>)
 80327cc:	69db      	ldr	r3, [r3, #28]
 80327ce:	f043 0302 	orr.w	r3, r3, #2
 80327d2:	4a0d      	ldr	r2, [pc, #52]	; (8032808 <FLASH_SetErrorCode+0xa8>)
 80327d4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80327d6:	4b0b      	ldr	r3, [pc, #44]	; (8032804 <FLASH_SetErrorCode+0xa4>)
 80327d8:	2280      	movs	r2, #128	; 0x80
 80327da:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80327dc:	4b09      	ldr	r3, [pc, #36]	; (8032804 <FLASH_SetErrorCode+0xa4>)
 80327de:	68db      	ldr	r3, [r3, #12]
 80327e0:	f003 0302 	and.w	r3, r3, #2
 80327e4:	2b00      	cmp	r3, #0
 80327e6:	d008      	beq.n	80327fa <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80327e8:	4b07      	ldr	r3, [pc, #28]	; (8032808 <FLASH_SetErrorCode+0xa8>)
 80327ea:	69db      	ldr	r3, [r3, #28]
 80327ec:	f043 0320 	orr.w	r3, r3, #32
 80327f0:	4a05      	ldr	r2, [pc, #20]	; (8032808 <FLASH_SetErrorCode+0xa8>)
 80327f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80327f4:	4b03      	ldr	r3, [pc, #12]	; (8032804 <FLASH_SetErrorCode+0xa4>)
 80327f6:	2202      	movs	r2, #2
 80327f8:	60da      	str	r2, [r3, #12]
  }
}
 80327fa:	bf00      	nop
 80327fc:	46bd      	mov	sp, r7
 80327fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032802:	4770      	bx	lr
 8032804:	40023c00 	.word	0x40023c00
 8032808:	20000530 	.word	0x20000530

0803280c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 803280c:	b580      	push	{r7, lr}
 803280e:	b084      	sub	sp, #16
 8032810:	af00      	add	r7, sp, #0
 8032812:	6078      	str	r0, [r7, #4]
 8032814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8032816:	2301      	movs	r3, #1
 8032818:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 803281a:	2300      	movs	r3, #0
 803281c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 803281e:	4b31      	ldr	r3, [pc, #196]	; (80328e4 <HAL_FLASHEx_Erase+0xd8>)
 8032820:	7e1b      	ldrb	r3, [r3, #24]
 8032822:	2b01      	cmp	r3, #1
 8032824:	d101      	bne.n	803282a <HAL_FLASHEx_Erase+0x1e>
 8032826:	2302      	movs	r3, #2
 8032828:	e058      	b.n	80328dc <HAL_FLASHEx_Erase+0xd0>
 803282a:	4b2e      	ldr	r3, [pc, #184]	; (80328e4 <HAL_FLASHEx_Erase+0xd8>)
 803282c:	2201      	movs	r2, #1
 803282e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8032830:	f24c 3050 	movw	r0, #50000	; 0xc350
 8032834:	f7ff feba 	bl	80325ac <FLASH_WaitForLastOperation>
 8032838:	4603      	mov	r3, r0
 803283a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 803283c:	7bfb      	ldrb	r3, [r7, #15]
 803283e:	2b00      	cmp	r3, #0
 8032840:	d148      	bne.n	80328d4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8032842:	683b      	ldr	r3, [r7, #0]
 8032844:	f04f 32ff 	mov.w	r2, #4294967295
 8032848:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 803284a:	687b      	ldr	r3, [r7, #4]
 803284c:	681b      	ldr	r3, [r3, #0]
 803284e:	2b01      	cmp	r3, #1
 8032850:	d115      	bne.n	803287e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8032852:	687b      	ldr	r3, [r7, #4]
 8032854:	691b      	ldr	r3, [r3, #16]
 8032856:	b2da      	uxtb	r2, r3
 8032858:	687b      	ldr	r3, [r7, #4]
 803285a:	685b      	ldr	r3, [r3, #4]
 803285c:	4619      	mov	r1, r3
 803285e:	4610      	mov	r0, r2
 8032860:	f000 f844 	bl	80328ec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8032864:	f24c 3050 	movw	r0, #50000	; 0xc350
 8032868:	f7ff fea0 	bl	80325ac <FLASH_WaitForLastOperation>
 803286c:	4603      	mov	r3, r0
 803286e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8032870:	4b1d      	ldr	r3, [pc, #116]	; (80328e8 <HAL_FLASHEx_Erase+0xdc>)
 8032872:	691b      	ldr	r3, [r3, #16]
 8032874:	4a1c      	ldr	r2, [pc, #112]	; (80328e8 <HAL_FLASHEx_Erase+0xdc>)
 8032876:	f023 0304 	bic.w	r3, r3, #4
 803287a:	6113      	str	r3, [r2, #16]
 803287c:	e028      	b.n	80328d0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 803287e:	687b      	ldr	r3, [r7, #4]
 8032880:	689b      	ldr	r3, [r3, #8]
 8032882:	60bb      	str	r3, [r7, #8]
 8032884:	e01c      	b.n	80328c0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8032886:	687b      	ldr	r3, [r7, #4]
 8032888:	691b      	ldr	r3, [r3, #16]
 803288a:	b2db      	uxtb	r3, r3
 803288c:	4619      	mov	r1, r3
 803288e:	68b8      	ldr	r0, [r7, #8]
 8032890:	f000 f850 	bl	8032934 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8032894:	f24c 3050 	movw	r0, #50000	; 0xc350
 8032898:	f7ff fe88 	bl	80325ac <FLASH_WaitForLastOperation>
 803289c:	4603      	mov	r3, r0
 803289e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80328a0:	4b11      	ldr	r3, [pc, #68]	; (80328e8 <HAL_FLASHEx_Erase+0xdc>)
 80328a2:	691b      	ldr	r3, [r3, #16]
 80328a4:	4a10      	ldr	r2, [pc, #64]	; (80328e8 <HAL_FLASHEx_Erase+0xdc>)
 80328a6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80328aa:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80328ac:	7bfb      	ldrb	r3, [r7, #15]
 80328ae:	2b00      	cmp	r3, #0
 80328b0:	d003      	beq.n	80328ba <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80328b2:	683b      	ldr	r3, [r7, #0]
 80328b4:	68ba      	ldr	r2, [r7, #8]
 80328b6:	601a      	str	r2, [r3, #0]
          break;
 80328b8:	e00a      	b.n	80328d0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80328ba:	68bb      	ldr	r3, [r7, #8]
 80328bc:	3301      	adds	r3, #1
 80328be:	60bb      	str	r3, [r7, #8]
 80328c0:	687b      	ldr	r3, [r7, #4]
 80328c2:	68da      	ldr	r2, [r3, #12]
 80328c4:	687b      	ldr	r3, [r7, #4]
 80328c6:	689b      	ldr	r3, [r3, #8]
 80328c8:	4413      	add	r3, r2
 80328ca:	68ba      	ldr	r2, [r7, #8]
 80328cc:	429a      	cmp	r2, r3
 80328ce:	d3da      	bcc.n	8032886 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80328d0:	f000 f878 	bl	80329c4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80328d4:	4b03      	ldr	r3, [pc, #12]	; (80328e4 <HAL_FLASHEx_Erase+0xd8>)
 80328d6:	2200      	movs	r2, #0
 80328d8:	761a      	strb	r2, [r3, #24]

  return status;
 80328da:	7bfb      	ldrb	r3, [r7, #15]
}
 80328dc:	4618      	mov	r0, r3
 80328de:	3710      	adds	r7, #16
 80328e0:	46bd      	mov	sp, r7
 80328e2:	bd80      	pop	{r7, pc}
 80328e4:	20000530 	.word	0x20000530
 80328e8:	40023c00 	.word	0x40023c00

080328ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80328ec:	b480      	push	{r7}
 80328ee:	b083      	sub	sp, #12
 80328f0:	af00      	add	r7, sp, #0
 80328f2:	4603      	mov	r3, r0
 80328f4:	6039      	str	r1, [r7, #0]
 80328f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80328f8:	4b0d      	ldr	r3, [pc, #52]	; (8032930 <FLASH_MassErase+0x44>)
 80328fa:	691b      	ldr	r3, [r3, #16]
 80328fc:	4a0c      	ldr	r2, [pc, #48]	; (8032930 <FLASH_MassErase+0x44>)
 80328fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8032902:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8032904:	4b0a      	ldr	r3, [pc, #40]	; (8032930 <FLASH_MassErase+0x44>)
 8032906:	691b      	ldr	r3, [r3, #16]
 8032908:	4a09      	ldr	r2, [pc, #36]	; (8032930 <FLASH_MassErase+0x44>)
 803290a:	f043 0304 	orr.w	r3, r3, #4
 803290e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8032910:	4b07      	ldr	r3, [pc, #28]	; (8032930 <FLASH_MassErase+0x44>)
 8032912:	691a      	ldr	r2, [r3, #16]
 8032914:	79fb      	ldrb	r3, [r7, #7]
 8032916:	021b      	lsls	r3, r3, #8
 8032918:	4313      	orrs	r3, r2
 803291a:	4a05      	ldr	r2, [pc, #20]	; (8032930 <FLASH_MassErase+0x44>)
 803291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8032920:	6113      	str	r3, [r2, #16]
}
 8032922:	bf00      	nop
 8032924:	370c      	adds	r7, #12
 8032926:	46bd      	mov	sp, r7
 8032928:	f85d 7b04 	ldr.w	r7, [sp], #4
 803292c:	4770      	bx	lr
 803292e:	bf00      	nop
 8032930:	40023c00 	.word	0x40023c00

08032934 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8032934:	b480      	push	{r7}
 8032936:	b085      	sub	sp, #20
 8032938:	af00      	add	r7, sp, #0
 803293a:	6078      	str	r0, [r7, #4]
 803293c:	460b      	mov	r3, r1
 803293e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8032940:	2300      	movs	r3, #0
 8032942:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8032944:	78fb      	ldrb	r3, [r7, #3]
 8032946:	2b00      	cmp	r3, #0
 8032948:	d102      	bne.n	8032950 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 803294a:	2300      	movs	r3, #0
 803294c:	60fb      	str	r3, [r7, #12]
 803294e:	e010      	b.n	8032972 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8032950:	78fb      	ldrb	r3, [r7, #3]
 8032952:	2b01      	cmp	r3, #1
 8032954:	d103      	bne.n	803295e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8032956:	f44f 7380 	mov.w	r3, #256	; 0x100
 803295a:	60fb      	str	r3, [r7, #12]
 803295c:	e009      	b.n	8032972 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 803295e:	78fb      	ldrb	r3, [r7, #3]
 8032960:	2b02      	cmp	r3, #2
 8032962:	d103      	bne.n	803296c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8032964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8032968:	60fb      	str	r3, [r7, #12]
 803296a:	e002      	b.n	8032972 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 803296c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8032970:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8032972:	4b13      	ldr	r3, [pc, #76]	; (80329c0 <FLASH_Erase_Sector+0x8c>)
 8032974:	691b      	ldr	r3, [r3, #16]
 8032976:	4a12      	ldr	r2, [pc, #72]	; (80329c0 <FLASH_Erase_Sector+0x8c>)
 8032978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 803297c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 803297e:	4b10      	ldr	r3, [pc, #64]	; (80329c0 <FLASH_Erase_Sector+0x8c>)
 8032980:	691a      	ldr	r2, [r3, #16]
 8032982:	490f      	ldr	r1, [pc, #60]	; (80329c0 <FLASH_Erase_Sector+0x8c>)
 8032984:	68fb      	ldr	r3, [r7, #12]
 8032986:	4313      	orrs	r3, r2
 8032988:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 803298a:	4b0d      	ldr	r3, [pc, #52]	; (80329c0 <FLASH_Erase_Sector+0x8c>)
 803298c:	691b      	ldr	r3, [r3, #16]
 803298e:	4a0c      	ldr	r2, [pc, #48]	; (80329c0 <FLASH_Erase_Sector+0x8c>)
 8032990:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8032994:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8032996:	4b0a      	ldr	r3, [pc, #40]	; (80329c0 <FLASH_Erase_Sector+0x8c>)
 8032998:	691a      	ldr	r2, [r3, #16]
 803299a:	687b      	ldr	r3, [r7, #4]
 803299c:	00db      	lsls	r3, r3, #3
 803299e:	4313      	orrs	r3, r2
 80329a0:	4a07      	ldr	r2, [pc, #28]	; (80329c0 <FLASH_Erase_Sector+0x8c>)
 80329a2:	f043 0302 	orr.w	r3, r3, #2
 80329a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80329a8:	4b05      	ldr	r3, [pc, #20]	; (80329c0 <FLASH_Erase_Sector+0x8c>)
 80329aa:	691b      	ldr	r3, [r3, #16]
 80329ac:	4a04      	ldr	r2, [pc, #16]	; (80329c0 <FLASH_Erase_Sector+0x8c>)
 80329ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80329b2:	6113      	str	r3, [r2, #16]
}
 80329b4:	bf00      	nop
 80329b6:	3714      	adds	r7, #20
 80329b8:	46bd      	mov	sp, r7
 80329ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80329be:	4770      	bx	lr
 80329c0:	40023c00 	.word	0x40023c00

080329c4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80329c4:	b480      	push	{r7}
 80329c6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80329c8:	4b20      	ldr	r3, [pc, #128]	; (8032a4c <FLASH_FlushCaches+0x88>)
 80329ca:	681b      	ldr	r3, [r3, #0]
 80329cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80329d0:	2b00      	cmp	r3, #0
 80329d2:	d017      	beq.n	8032a04 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80329d4:	4b1d      	ldr	r3, [pc, #116]	; (8032a4c <FLASH_FlushCaches+0x88>)
 80329d6:	681b      	ldr	r3, [r3, #0]
 80329d8:	4a1c      	ldr	r2, [pc, #112]	; (8032a4c <FLASH_FlushCaches+0x88>)
 80329da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80329de:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80329e0:	4b1a      	ldr	r3, [pc, #104]	; (8032a4c <FLASH_FlushCaches+0x88>)
 80329e2:	681b      	ldr	r3, [r3, #0]
 80329e4:	4a19      	ldr	r2, [pc, #100]	; (8032a4c <FLASH_FlushCaches+0x88>)
 80329e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80329ea:	6013      	str	r3, [r2, #0]
 80329ec:	4b17      	ldr	r3, [pc, #92]	; (8032a4c <FLASH_FlushCaches+0x88>)
 80329ee:	681b      	ldr	r3, [r3, #0]
 80329f0:	4a16      	ldr	r2, [pc, #88]	; (8032a4c <FLASH_FlushCaches+0x88>)
 80329f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80329f6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80329f8:	4b14      	ldr	r3, [pc, #80]	; (8032a4c <FLASH_FlushCaches+0x88>)
 80329fa:	681b      	ldr	r3, [r3, #0]
 80329fc:	4a13      	ldr	r2, [pc, #76]	; (8032a4c <FLASH_FlushCaches+0x88>)
 80329fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8032a02:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8032a04:	4b11      	ldr	r3, [pc, #68]	; (8032a4c <FLASH_FlushCaches+0x88>)
 8032a06:	681b      	ldr	r3, [r3, #0]
 8032a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8032a0c:	2b00      	cmp	r3, #0
 8032a0e:	d017      	beq.n	8032a40 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8032a10:	4b0e      	ldr	r3, [pc, #56]	; (8032a4c <FLASH_FlushCaches+0x88>)
 8032a12:	681b      	ldr	r3, [r3, #0]
 8032a14:	4a0d      	ldr	r2, [pc, #52]	; (8032a4c <FLASH_FlushCaches+0x88>)
 8032a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8032a1a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8032a1c:	4b0b      	ldr	r3, [pc, #44]	; (8032a4c <FLASH_FlushCaches+0x88>)
 8032a1e:	681b      	ldr	r3, [r3, #0]
 8032a20:	4a0a      	ldr	r2, [pc, #40]	; (8032a4c <FLASH_FlushCaches+0x88>)
 8032a22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8032a26:	6013      	str	r3, [r2, #0]
 8032a28:	4b08      	ldr	r3, [pc, #32]	; (8032a4c <FLASH_FlushCaches+0x88>)
 8032a2a:	681b      	ldr	r3, [r3, #0]
 8032a2c:	4a07      	ldr	r2, [pc, #28]	; (8032a4c <FLASH_FlushCaches+0x88>)
 8032a2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8032a32:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8032a34:	4b05      	ldr	r3, [pc, #20]	; (8032a4c <FLASH_FlushCaches+0x88>)
 8032a36:	681b      	ldr	r3, [r3, #0]
 8032a38:	4a04      	ldr	r2, [pc, #16]	; (8032a4c <FLASH_FlushCaches+0x88>)
 8032a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8032a3e:	6013      	str	r3, [r2, #0]
  }
}
 8032a40:	bf00      	nop
 8032a42:	46bd      	mov	sp, r7
 8032a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032a48:	4770      	bx	lr
 8032a4a:	bf00      	nop
 8032a4c:	40023c00 	.word	0x40023c00

08032a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8032a50:	b480      	push	{r7}
 8032a52:	b089      	sub	sp, #36	; 0x24
 8032a54:	af00      	add	r7, sp, #0
 8032a56:	6078      	str	r0, [r7, #4]
 8032a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8032a5a:	2300      	movs	r3, #0
 8032a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8032a5e:	2300      	movs	r3, #0
 8032a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8032a62:	2300      	movs	r3, #0
 8032a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8032a66:	2300      	movs	r3, #0
 8032a68:	61fb      	str	r3, [r7, #28]
 8032a6a:	e16b      	b.n	8032d44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8032a6c:	2201      	movs	r2, #1
 8032a6e:	69fb      	ldr	r3, [r7, #28]
 8032a70:	fa02 f303 	lsl.w	r3, r2, r3
 8032a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8032a76:	683b      	ldr	r3, [r7, #0]
 8032a78:	681b      	ldr	r3, [r3, #0]
 8032a7a:	697a      	ldr	r2, [r7, #20]
 8032a7c:	4013      	ands	r3, r2
 8032a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8032a80:	693a      	ldr	r2, [r7, #16]
 8032a82:	697b      	ldr	r3, [r7, #20]
 8032a84:	429a      	cmp	r2, r3
 8032a86:	f040 815a 	bne.w	8032d3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8032a8a:	683b      	ldr	r3, [r7, #0]
 8032a8c:	685b      	ldr	r3, [r3, #4]
 8032a8e:	f003 0303 	and.w	r3, r3, #3
 8032a92:	2b01      	cmp	r3, #1
 8032a94:	d005      	beq.n	8032aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8032a96:	683b      	ldr	r3, [r7, #0]
 8032a98:	685b      	ldr	r3, [r3, #4]
 8032a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8032a9e:	2b02      	cmp	r3, #2
 8032aa0:	d130      	bne.n	8032b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8032aa2:	687b      	ldr	r3, [r7, #4]
 8032aa4:	689b      	ldr	r3, [r3, #8]
 8032aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8032aa8:	69fb      	ldr	r3, [r7, #28]
 8032aaa:	005b      	lsls	r3, r3, #1
 8032aac:	2203      	movs	r2, #3
 8032aae:	fa02 f303 	lsl.w	r3, r2, r3
 8032ab2:	43db      	mvns	r3, r3
 8032ab4:	69ba      	ldr	r2, [r7, #24]
 8032ab6:	4013      	ands	r3, r2
 8032ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8032aba:	683b      	ldr	r3, [r7, #0]
 8032abc:	68da      	ldr	r2, [r3, #12]
 8032abe:	69fb      	ldr	r3, [r7, #28]
 8032ac0:	005b      	lsls	r3, r3, #1
 8032ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8032ac6:	69ba      	ldr	r2, [r7, #24]
 8032ac8:	4313      	orrs	r3, r2
 8032aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8032acc:	687b      	ldr	r3, [r7, #4]
 8032ace:	69ba      	ldr	r2, [r7, #24]
 8032ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8032ad2:	687b      	ldr	r3, [r7, #4]
 8032ad4:	685b      	ldr	r3, [r3, #4]
 8032ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8032ad8:	2201      	movs	r2, #1
 8032ada:	69fb      	ldr	r3, [r7, #28]
 8032adc:	fa02 f303 	lsl.w	r3, r2, r3
 8032ae0:	43db      	mvns	r3, r3
 8032ae2:	69ba      	ldr	r2, [r7, #24]
 8032ae4:	4013      	ands	r3, r2
 8032ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8032ae8:	683b      	ldr	r3, [r7, #0]
 8032aea:	685b      	ldr	r3, [r3, #4]
 8032aec:	091b      	lsrs	r3, r3, #4
 8032aee:	f003 0201 	and.w	r2, r3, #1
 8032af2:	69fb      	ldr	r3, [r7, #28]
 8032af4:	fa02 f303 	lsl.w	r3, r2, r3
 8032af8:	69ba      	ldr	r2, [r7, #24]
 8032afa:	4313      	orrs	r3, r2
 8032afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8032afe:	687b      	ldr	r3, [r7, #4]
 8032b00:	69ba      	ldr	r2, [r7, #24]
 8032b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8032b04:	683b      	ldr	r3, [r7, #0]
 8032b06:	685b      	ldr	r3, [r3, #4]
 8032b08:	f003 0303 	and.w	r3, r3, #3
 8032b0c:	2b03      	cmp	r3, #3
 8032b0e:	d017      	beq.n	8032b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8032b10:	687b      	ldr	r3, [r7, #4]
 8032b12:	68db      	ldr	r3, [r3, #12]
 8032b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8032b16:	69fb      	ldr	r3, [r7, #28]
 8032b18:	005b      	lsls	r3, r3, #1
 8032b1a:	2203      	movs	r2, #3
 8032b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8032b20:	43db      	mvns	r3, r3
 8032b22:	69ba      	ldr	r2, [r7, #24]
 8032b24:	4013      	ands	r3, r2
 8032b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8032b28:	683b      	ldr	r3, [r7, #0]
 8032b2a:	689a      	ldr	r2, [r3, #8]
 8032b2c:	69fb      	ldr	r3, [r7, #28]
 8032b2e:	005b      	lsls	r3, r3, #1
 8032b30:	fa02 f303 	lsl.w	r3, r2, r3
 8032b34:	69ba      	ldr	r2, [r7, #24]
 8032b36:	4313      	orrs	r3, r2
 8032b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8032b3a:	687b      	ldr	r3, [r7, #4]
 8032b3c:	69ba      	ldr	r2, [r7, #24]
 8032b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8032b40:	683b      	ldr	r3, [r7, #0]
 8032b42:	685b      	ldr	r3, [r3, #4]
 8032b44:	f003 0303 	and.w	r3, r3, #3
 8032b48:	2b02      	cmp	r3, #2
 8032b4a:	d123      	bne.n	8032b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8032b4c:	69fb      	ldr	r3, [r7, #28]
 8032b4e:	08da      	lsrs	r2, r3, #3
 8032b50:	687b      	ldr	r3, [r7, #4]
 8032b52:	3208      	adds	r2, #8
 8032b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8032b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8032b5a:	69fb      	ldr	r3, [r7, #28]
 8032b5c:	f003 0307 	and.w	r3, r3, #7
 8032b60:	009b      	lsls	r3, r3, #2
 8032b62:	220f      	movs	r2, #15
 8032b64:	fa02 f303 	lsl.w	r3, r2, r3
 8032b68:	43db      	mvns	r3, r3
 8032b6a:	69ba      	ldr	r2, [r7, #24]
 8032b6c:	4013      	ands	r3, r2
 8032b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8032b70:	683b      	ldr	r3, [r7, #0]
 8032b72:	691a      	ldr	r2, [r3, #16]
 8032b74:	69fb      	ldr	r3, [r7, #28]
 8032b76:	f003 0307 	and.w	r3, r3, #7
 8032b7a:	009b      	lsls	r3, r3, #2
 8032b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8032b80:	69ba      	ldr	r2, [r7, #24]
 8032b82:	4313      	orrs	r3, r2
 8032b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8032b86:	69fb      	ldr	r3, [r7, #28]
 8032b88:	08da      	lsrs	r2, r3, #3
 8032b8a:	687b      	ldr	r3, [r7, #4]
 8032b8c:	3208      	adds	r2, #8
 8032b8e:	69b9      	ldr	r1, [r7, #24]
 8032b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8032b94:	687b      	ldr	r3, [r7, #4]
 8032b96:	681b      	ldr	r3, [r3, #0]
 8032b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8032b9a:	69fb      	ldr	r3, [r7, #28]
 8032b9c:	005b      	lsls	r3, r3, #1
 8032b9e:	2203      	movs	r2, #3
 8032ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8032ba4:	43db      	mvns	r3, r3
 8032ba6:	69ba      	ldr	r2, [r7, #24]
 8032ba8:	4013      	ands	r3, r2
 8032baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8032bac:	683b      	ldr	r3, [r7, #0]
 8032bae:	685b      	ldr	r3, [r3, #4]
 8032bb0:	f003 0203 	and.w	r2, r3, #3
 8032bb4:	69fb      	ldr	r3, [r7, #28]
 8032bb6:	005b      	lsls	r3, r3, #1
 8032bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8032bbc:	69ba      	ldr	r2, [r7, #24]
 8032bbe:	4313      	orrs	r3, r2
 8032bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8032bc2:	687b      	ldr	r3, [r7, #4]
 8032bc4:	69ba      	ldr	r2, [r7, #24]
 8032bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8032bc8:	683b      	ldr	r3, [r7, #0]
 8032bca:	685b      	ldr	r3, [r3, #4]
 8032bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8032bd0:	2b00      	cmp	r3, #0
 8032bd2:	f000 80b4 	beq.w	8032d3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8032bd6:	2300      	movs	r3, #0
 8032bd8:	60fb      	str	r3, [r7, #12]
 8032bda:	4b60      	ldr	r3, [pc, #384]	; (8032d5c <HAL_GPIO_Init+0x30c>)
 8032bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032bde:	4a5f      	ldr	r2, [pc, #380]	; (8032d5c <HAL_GPIO_Init+0x30c>)
 8032be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8032be4:	6453      	str	r3, [r2, #68]	; 0x44
 8032be6:	4b5d      	ldr	r3, [pc, #372]	; (8032d5c <HAL_GPIO_Init+0x30c>)
 8032be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8032bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8032bee:	60fb      	str	r3, [r7, #12]
 8032bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8032bf2:	4a5b      	ldr	r2, [pc, #364]	; (8032d60 <HAL_GPIO_Init+0x310>)
 8032bf4:	69fb      	ldr	r3, [r7, #28]
 8032bf6:	089b      	lsrs	r3, r3, #2
 8032bf8:	3302      	adds	r3, #2
 8032bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8032bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8032c00:	69fb      	ldr	r3, [r7, #28]
 8032c02:	f003 0303 	and.w	r3, r3, #3
 8032c06:	009b      	lsls	r3, r3, #2
 8032c08:	220f      	movs	r2, #15
 8032c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8032c0e:	43db      	mvns	r3, r3
 8032c10:	69ba      	ldr	r2, [r7, #24]
 8032c12:	4013      	ands	r3, r2
 8032c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8032c16:	687b      	ldr	r3, [r7, #4]
 8032c18:	4a52      	ldr	r2, [pc, #328]	; (8032d64 <HAL_GPIO_Init+0x314>)
 8032c1a:	4293      	cmp	r3, r2
 8032c1c:	d02b      	beq.n	8032c76 <HAL_GPIO_Init+0x226>
 8032c1e:	687b      	ldr	r3, [r7, #4]
 8032c20:	4a51      	ldr	r2, [pc, #324]	; (8032d68 <HAL_GPIO_Init+0x318>)
 8032c22:	4293      	cmp	r3, r2
 8032c24:	d025      	beq.n	8032c72 <HAL_GPIO_Init+0x222>
 8032c26:	687b      	ldr	r3, [r7, #4]
 8032c28:	4a50      	ldr	r2, [pc, #320]	; (8032d6c <HAL_GPIO_Init+0x31c>)
 8032c2a:	4293      	cmp	r3, r2
 8032c2c:	d01f      	beq.n	8032c6e <HAL_GPIO_Init+0x21e>
 8032c2e:	687b      	ldr	r3, [r7, #4]
 8032c30:	4a4f      	ldr	r2, [pc, #316]	; (8032d70 <HAL_GPIO_Init+0x320>)
 8032c32:	4293      	cmp	r3, r2
 8032c34:	d019      	beq.n	8032c6a <HAL_GPIO_Init+0x21a>
 8032c36:	687b      	ldr	r3, [r7, #4]
 8032c38:	4a4e      	ldr	r2, [pc, #312]	; (8032d74 <HAL_GPIO_Init+0x324>)
 8032c3a:	4293      	cmp	r3, r2
 8032c3c:	d013      	beq.n	8032c66 <HAL_GPIO_Init+0x216>
 8032c3e:	687b      	ldr	r3, [r7, #4]
 8032c40:	4a4d      	ldr	r2, [pc, #308]	; (8032d78 <HAL_GPIO_Init+0x328>)
 8032c42:	4293      	cmp	r3, r2
 8032c44:	d00d      	beq.n	8032c62 <HAL_GPIO_Init+0x212>
 8032c46:	687b      	ldr	r3, [r7, #4]
 8032c48:	4a4c      	ldr	r2, [pc, #304]	; (8032d7c <HAL_GPIO_Init+0x32c>)
 8032c4a:	4293      	cmp	r3, r2
 8032c4c:	d007      	beq.n	8032c5e <HAL_GPIO_Init+0x20e>
 8032c4e:	687b      	ldr	r3, [r7, #4]
 8032c50:	4a4b      	ldr	r2, [pc, #300]	; (8032d80 <HAL_GPIO_Init+0x330>)
 8032c52:	4293      	cmp	r3, r2
 8032c54:	d101      	bne.n	8032c5a <HAL_GPIO_Init+0x20a>
 8032c56:	2307      	movs	r3, #7
 8032c58:	e00e      	b.n	8032c78 <HAL_GPIO_Init+0x228>
 8032c5a:	2308      	movs	r3, #8
 8032c5c:	e00c      	b.n	8032c78 <HAL_GPIO_Init+0x228>
 8032c5e:	2306      	movs	r3, #6
 8032c60:	e00a      	b.n	8032c78 <HAL_GPIO_Init+0x228>
 8032c62:	2305      	movs	r3, #5
 8032c64:	e008      	b.n	8032c78 <HAL_GPIO_Init+0x228>
 8032c66:	2304      	movs	r3, #4
 8032c68:	e006      	b.n	8032c78 <HAL_GPIO_Init+0x228>
 8032c6a:	2303      	movs	r3, #3
 8032c6c:	e004      	b.n	8032c78 <HAL_GPIO_Init+0x228>
 8032c6e:	2302      	movs	r3, #2
 8032c70:	e002      	b.n	8032c78 <HAL_GPIO_Init+0x228>
 8032c72:	2301      	movs	r3, #1
 8032c74:	e000      	b.n	8032c78 <HAL_GPIO_Init+0x228>
 8032c76:	2300      	movs	r3, #0
 8032c78:	69fa      	ldr	r2, [r7, #28]
 8032c7a:	f002 0203 	and.w	r2, r2, #3
 8032c7e:	0092      	lsls	r2, r2, #2
 8032c80:	4093      	lsls	r3, r2
 8032c82:	69ba      	ldr	r2, [r7, #24]
 8032c84:	4313      	orrs	r3, r2
 8032c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8032c88:	4935      	ldr	r1, [pc, #212]	; (8032d60 <HAL_GPIO_Init+0x310>)
 8032c8a:	69fb      	ldr	r3, [r7, #28]
 8032c8c:	089b      	lsrs	r3, r3, #2
 8032c8e:	3302      	adds	r3, #2
 8032c90:	69ba      	ldr	r2, [r7, #24]
 8032c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8032c96:	4b3b      	ldr	r3, [pc, #236]	; (8032d84 <HAL_GPIO_Init+0x334>)
 8032c98:	681b      	ldr	r3, [r3, #0]
 8032c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8032c9c:	693b      	ldr	r3, [r7, #16]
 8032c9e:	43db      	mvns	r3, r3
 8032ca0:	69ba      	ldr	r2, [r7, #24]
 8032ca2:	4013      	ands	r3, r2
 8032ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8032ca6:	683b      	ldr	r3, [r7, #0]
 8032ca8:	685b      	ldr	r3, [r3, #4]
 8032caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8032cae:	2b00      	cmp	r3, #0
 8032cb0:	d003      	beq.n	8032cba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8032cb2:	69ba      	ldr	r2, [r7, #24]
 8032cb4:	693b      	ldr	r3, [r7, #16]
 8032cb6:	4313      	orrs	r3, r2
 8032cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8032cba:	4a32      	ldr	r2, [pc, #200]	; (8032d84 <HAL_GPIO_Init+0x334>)
 8032cbc:	69bb      	ldr	r3, [r7, #24]
 8032cbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8032cc0:	4b30      	ldr	r3, [pc, #192]	; (8032d84 <HAL_GPIO_Init+0x334>)
 8032cc2:	685b      	ldr	r3, [r3, #4]
 8032cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8032cc6:	693b      	ldr	r3, [r7, #16]
 8032cc8:	43db      	mvns	r3, r3
 8032cca:	69ba      	ldr	r2, [r7, #24]
 8032ccc:	4013      	ands	r3, r2
 8032cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8032cd0:	683b      	ldr	r3, [r7, #0]
 8032cd2:	685b      	ldr	r3, [r3, #4]
 8032cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8032cd8:	2b00      	cmp	r3, #0
 8032cda:	d003      	beq.n	8032ce4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8032cdc:	69ba      	ldr	r2, [r7, #24]
 8032cde:	693b      	ldr	r3, [r7, #16]
 8032ce0:	4313      	orrs	r3, r2
 8032ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8032ce4:	4a27      	ldr	r2, [pc, #156]	; (8032d84 <HAL_GPIO_Init+0x334>)
 8032ce6:	69bb      	ldr	r3, [r7, #24]
 8032ce8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8032cea:	4b26      	ldr	r3, [pc, #152]	; (8032d84 <HAL_GPIO_Init+0x334>)
 8032cec:	689b      	ldr	r3, [r3, #8]
 8032cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8032cf0:	693b      	ldr	r3, [r7, #16]
 8032cf2:	43db      	mvns	r3, r3
 8032cf4:	69ba      	ldr	r2, [r7, #24]
 8032cf6:	4013      	ands	r3, r2
 8032cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8032cfa:	683b      	ldr	r3, [r7, #0]
 8032cfc:	685b      	ldr	r3, [r3, #4]
 8032cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8032d02:	2b00      	cmp	r3, #0
 8032d04:	d003      	beq.n	8032d0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8032d06:	69ba      	ldr	r2, [r7, #24]
 8032d08:	693b      	ldr	r3, [r7, #16]
 8032d0a:	4313      	orrs	r3, r2
 8032d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8032d0e:	4a1d      	ldr	r2, [pc, #116]	; (8032d84 <HAL_GPIO_Init+0x334>)
 8032d10:	69bb      	ldr	r3, [r7, #24]
 8032d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8032d14:	4b1b      	ldr	r3, [pc, #108]	; (8032d84 <HAL_GPIO_Init+0x334>)
 8032d16:	68db      	ldr	r3, [r3, #12]
 8032d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8032d1a:	693b      	ldr	r3, [r7, #16]
 8032d1c:	43db      	mvns	r3, r3
 8032d1e:	69ba      	ldr	r2, [r7, #24]
 8032d20:	4013      	ands	r3, r2
 8032d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8032d24:	683b      	ldr	r3, [r7, #0]
 8032d26:	685b      	ldr	r3, [r3, #4]
 8032d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8032d2c:	2b00      	cmp	r3, #0
 8032d2e:	d003      	beq.n	8032d38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8032d30:	69ba      	ldr	r2, [r7, #24]
 8032d32:	693b      	ldr	r3, [r7, #16]
 8032d34:	4313      	orrs	r3, r2
 8032d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8032d38:	4a12      	ldr	r2, [pc, #72]	; (8032d84 <HAL_GPIO_Init+0x334>)
 8032d3a:	69bb      	ldr	r3, [r7, #24]
 8032d3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8032d3e:	69fb      	ldr	r3, [r7, #28]
 8032d40:	3301      	adds	r3, #1
 8032d42:	61fb      	str	r3, [r7, #28]
 8032d44:	69fb      	ldr	r3, [r7, #28]
 8032d46:	2b0f      	cmp	r3, #15
 8032d48:	f67f ae90 	bls.w	8032a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8032d4c:	bf00      	nop
 8032d4e:	bf00      	nop
 8032d50:	3724      	adds	r7, #36	; 0x24
 8032d52:	46bd      	mov	sp, r7
 8032d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032d58:	4770      	bx	lr
 8032d5a:	bf00      	nop
 8032d5c:	40023800 	.word	0x40023800
 8032d60:	40013800 	.word	0x40013800
 8032d64:	40020000 	.word	0x40020000
 8032d68:	40020400 	.word	0x40020400
 8032d6c:	40020800 	.word	0x40020800
 8032d70:	40020c00 	.word	0x40020c00
 8032d74:	40021000 	.word	0x40021000
 8032d78:	40021400 	.word	0x40021400
 8032d7c:	40021800 	.word	0x40021800
 8032d80:	40021c00 	.word	0x40021c00
 8032d84:	40013c00 	.word	0x40013c00

08032d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8032d88:	b480      	push	{r7}
 8032d8a:	b083      	sub	sp, #12
 8032d8c:	af00      	add	r7, sp, #0
 8032d8e:	6078      	str	r0, [r7, #4]
 8032d90:	460b      	mov	r3, r1
 8032d92:	807b      	strh	r3, [r7, #2]
 8032d94:	4613      	mov	r3, r2
 8032d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8032d98:	787b      	ldrb	r3, [r7, #1]
 8032d9a:	2b00      	cmp	r3, #0
 8032d9c:	d003      	beq.n	8032da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8032d9e:	887a      	ldrh	r2, [r7, #2]
 8032da0:	687b      	ldr	r3, [r7, #4]
 8032da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8032da4:	e003      	b.n	8032dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8032da6:	887b      	ldrh	r3, [r7, #2]
 8032da8:	041a      	lsls	r2, r3, #16
 8032daa:	687b      	ldr	r3, [r7, #4]
 8032dac:	619a      	str	r2, [r3, #24]
}
 8032dae:	bf00      	nop
 8032db0:	370c      	adds	r7, #12
 8032db2:	46bd      	mov	sp, r7
 8032db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8032db8:	4770      	bx	lr
	...

08032dbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8032dbc:	b580      	push	{r7, lr}
 8032dbe:	b086      	sub	sp, #24
 8032dc0:	af00      	add	r7, sp, #0
 8032dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8032dc4:	687b      	ldr	r3, [r7, #4]
 8032dc6:	2b00      	cmp	r3, #0
 8032dc8:	d101      	bne.n	8032dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8032dca:	2301      	movs	r3, #1
 8032dcc:	e264      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8032dce:	687b      	ldr	r3, [r7, #4]
 8032dd0:	681b      	ldr	r3, [r3, #0]
 8032dd2:	f003 0301 	and.w	r3, r3, #1
 8032dd6:	2b00      	cmp	r3, #0
 8032dd8:	d075      	beq.n	8032ec6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8032dda:	4ba3      	ldr	r3, [pc, #652]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032ddc:	689b      	ldr	r3, [r3, #8]
 8032dde:	f003 030c 	and.w	r3, r3, #12
 8032de2:	2b04      	cmp	r3, #4
 8032de4:	d00c      	beq.n	8032e00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8032de6:	4ba0      	ldr	r3, [pc, #640]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032de8:	689b      	ldr	r3, [r3, #8]
 8032dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8032dee:	2b08      	cmp	r3, #8
 8032df0:	d112      	bne.n	8032e18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8032df2:	4b9d      	ldr	r3, [pc, #628]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032df4:	685b      	ldr	r3, [r3, #4]
 8032df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8032dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8032dfe:	d10b      	bne.n	8032e18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8032e00:	4b99      	ldr	r3, [pc, #612]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032e02:	681b      	ldr	r3, [r3, #0]
 8032e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8032e08:	2b00      	cmp	r3, #0
 8032e0a:	d05b      	beq.n	8032ec4 <HAL_RCC_OscConfig+0x108>
 8032e0c:	687b      	ldr	r3, [r7, #4]
 8032e0e:	685b      	ldr	r3, [r3, #4]
 8032e10:	2b00      	cmp	r3, #0
 8032e12:	d157      	bne.n	8032ec4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8032e14:	2301      	movs	r3, #1
 8032e16:	e23f      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8032e18:	687b      	ldr	r3, [r7, #4]
 8032e1a:	685b      	ldr	r3, [r3, #4]
 8032e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8032e20:	d106      	bne.n	8032e30 <HAL_RCC_OscConfig+0x74>
 8032e22:	4b91      	ldr	r3, [pc, #580]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032e24:	681b      	ldr	r3, [r3, #0]
 8032e26:	4a90      	ldr	r2, [pc, #576]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8032e2c:	6013      	str	r3, [r2, #0]
 8032e2e:	e01d      	b.n	8032e6c <HAL_RCC_OscConfig+0xb0>
 8032e30:	687b      	ldr	r3, [r7, #4]
 8032e32:	685b      	ldr	r3, [r3, #4]
 8032e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8032e38:	d10c      	bne.n	8032e54 <HAL_RCC_OscConfig+0x98>
 8032e3a:	4b8b      	ldr	r3, [pc, #556]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032e3c:	681b      	ldr	r3, [r3, #0]
 8032e3e:	4a8a      	ldr	r2, [pc, #552]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8032e44:	6013      	str	r3, [r2, #0]
 8032e46:	4b88      	ldr	r3, [pc, #544]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032e48:	681b      	ldr	r3, [r3, #0]
 8032e4a:	4a87      	ldr	r2, [pc, #540]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8032e50:	6013      	str	r3, [r2, #0]
 8032e52:	e00b      	b.n	8032e6c <HAL_RCC_OscConfig+0xb0>
 8032e54:	4b84      	ldr	r3, [pc, #528]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032e56:	681b      	ldr	r3, [r3, #0]
 8032e58:	4a83      	ldr	r2, [pc, #524]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8032e5e:	6013      	str	r3, [r2, #0]
 8032e60:	4b81      	ldr	r3, [pc, #516]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032e62:	681b      	ldr	r3, [r3, #0]
 8032e64:	4a80      	ldr	r2, [pc, #512]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8032e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8032e6c:	687b      	ldr	r3, [r7, #4]
 8032e6e:	685b      	ldr	r3, [r3, #4]
 8032e70:	2b00      	cmp	r3, #0
 8032e72:	d013      	beq.n	8032e9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8032e74:	f7ff f940 	bl	80320f8 <HAL_GetTick>
 8032e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8032e7a:	e008      	b.n	8032e8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8032e7c:	f7ff f93c 	bl	80320f8 <HAL_GetTick>
 8032e80:	4602      	mov	r2, r0
 8032e82:	693b      	ldr	r3, [r7, #16]
 8032e84:	1ad3      	subs	r3, r2, r3
 8032e86:	2b64      	cmp	r3, #100	; 0x64
 8032e88:	d901      	bls.n	8032e8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8032e8a:	2303      	movs	r3, #3
 8032e8c:	e204      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8032e8e:	4b76      	ldr	r3, [pc, #472]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032e90:	681b      	ldr	r3, [r3, #0]
 8032e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8032e96:	2b00      	cmp	r3, #0
 8032e98:	d0f0      	beq.n	8032e7c <HAL_RCC_OscConfig+0xc0>
 8032e9a:	e014      	b.n	8032ec6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8032e9c:	f7ff f92c 	bl	80320f8 <HAL_GetTick>
 8032ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8032ea2:	e008      	b.n	8032eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8032ea4:	f7ff f928 	bl	80320f8 <HAL_GetTick>
 8032ea8:	4602      	mov	r2, r0
 8032eaa:	693b      	ldr	r3, [r7, #16]
 8032eac:	1ad3      	subs	r3, r2, r3
 8032eae:	2b64      	cmp	r3, #100	; 0x64
 8032eb0:	d901      	bls.n	8032eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8032eb2:	2303      	movs	r3, #3
 8032eb4:	e1f0      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8032eb6:	4b6c      	ldr	r3, [pc, #432]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032eb8:	681b      	ldr	r3, [r3, #0]
 8032eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8032ebe:	2b00      	cmp	r3, #0
 8032ec0:	d1f0      	bne.n	8032ea4 <HAL_RCC_OscConfig+0xe8>
 8032ec2:	e000      	b.n	8032ec6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8032ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8032ec6:	687b      	ldr	r3, [r7, #4]
 8032ec8:	681b      	ldr	r3, [r3, #0]
 8032eca:	f003 0302 	and.w	r3, r3, #2
 8032ece:	2b00      	cmp	r3, #0
 8032ed0:	d063      	beq.n	8032f9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8032ed2:	4b65      	ldr	r3, [pc, #404]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032ed4:	689b      	ldr	r3, [r3, #8]
 8032ed6:	f003 030c 	and.w	r3, r3, #12
 8032eda:	2b00      	cmp	r3, #0
 8032edc:	d00b      	beq.n	8032ef6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8032ede:	4b62      	ldr	r3, [pc, #392]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032ee0:	689b      	ldr	r3, [r3, #8]
 8032ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8032ee6:	2b08      	cmp	r3, #8
 8032ee8:	d11c      	bne.n	8032f24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8032eea:	4b5f      	ldr	r3, [pc, #380]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032eec:	685b      	ldr	r3, [r3, #4]
 8032eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8032ef2:	2b00      	cmp	r3, #0
 8032ef4:	d116      	bne.n	8032f24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8032ef6:	4b5c      	ldr	r3, [pc, #368]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032ef8:	681b      	ldr	r3, [r3, #0]
 8032efa:	f003 0302 	and.w	r3, r3, #2
 8032efe:	2b00      	cmp	r3, #0
 8032f00:	d005      	beq.n	8032f0e <HAL_RCC_OscConfig+0x152>
 8032f02:	687b      	ldr	r3, [r7, #4]
 8032f04:	68db      	ldr	r3, [r3, #12]
 8032f06:	2b01      	cmp	r3, #1
 8032f08:	d001      	beq.n	8032f0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8032f0a:	2301      	movs	r3, #1
 8032f0c:	e1c4      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8032f0e:	4b56      	ldr	r3, [pc, #344]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032f10:	681b      	ldr	r3, [r3, #0]
 8032f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8032f16:	687b      	ldr	r3, [r7, #4]
 8032f18:	691b      	ldr	r3, [r3, #16]
 8032f1a:	00db      	lsls	r3, r3, #3
 8032f1c:	4952      	ldr	r1, [pc, #328]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032f1e:	4313      	orrs	r3, r2
 8032f20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8032f22:	e03a      	b.n	8032f9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8032f24:	687b      	ldr	r3, [r7, #4]
 8032f26:	68db      	ldr	r3, [r3, #12]
 8032f28:	2b00      	cmp	r3, #0
 8032f2a:	d020      	beq.n	8032f6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8032f2c:	4b4f      	ldr	r3, [pc, #316]	; (803306c <HAL_RCC_OscConfig+0x2b0>)
 8032f2e:	2201      	movs	r2, #1
 8032f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8032f32:	f7ff f8e1 	bl	80320f8 <HAL_GetTick>
 8032f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8032f38:	e008      	b.n	8032f4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8032f3a:	f7ff f8dd 	bl	80320f8 <HAL_GetTick>
 8032f3e:	4602      	mov	r2, r0
 8032f40:	693b      	ldr	r3, [r7, #16]
 8032f42:	1ad3      	subs	r3, r2, r3
 8032f44:	2b02      	cmp	r3, #2
 8032f46:	d901      	bls.n	8032f4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8032f48:	2303      	movs	r3, #3
 8032f4a:	e1a5      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8032f4c:	4b46      	ldr	r3, [pc, #280]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032f4e:	681b      	ldr	r3, [r3, #0]
 8032f50:	f003 0302 	and.w	r3, r3, #2
 8032f54:	2b00      	cmp	r3, #0
 8032f56:	d0f0      	beq.n	8032f3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8032f58:	4b43      	ldr	r3, [pc, #268]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032f5a:	681b      	ldr	r3, [r3, #0]
 8032f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8032f60:	687b      	ldr	r3, [r7, #4]
 8032f62:	691b      	ldr	r3, [r3, #16]
 8032f64:	00db      	lsls	r3, r3, #3
 8032f66:	4940      	ldr	r1, [pc, #256]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032f68:	4313      	orrs	r3, r2
 8032f6a:	600b      	str	r3, [r1, #0]
 8032f6c:	e015      	b.n	8032f9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8032f6e:	4b3f      	ldr	r3, [pc, #252]	; (803306c <HAL_RCC_OscConfig+0x2b0>)
 8032f70:	2200      	movs	r2, #0
 8032f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8032f74:	f7ff f8c0 	bl	80320f8 <HAL_GetTick>
 8032f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8032f7a:	e008      	b.n	8032f8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8032f7c:	f7ff f8bc 	bl	80320f8 <HAL_GetTick>
 8032f80:	4602      	mov	r2, r0
 8032f82:	693b      	ldr	r3, [r7, #16]
 8032f84:	1ad3      	subs	r3, r2, r3
 8032f86:	2b02      	cmp	r3, #2
 8032f88:	d901      	bls.n	8032f8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8032f8a:	2303      	movs	r3, #3
 8032f8c:	e184      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8032f8e:	4b36      	ldr	r3, [pc, #216]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032f90:	681b      	ldr	r3, [r3, #0]
 8032f92:	f003 0302 	and.w	r3, r3, #2
 8032f96:	2b00      	cmp	r3, #0
 8032f98:	d1f0      	bne.n	8032f7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8032f9a:	687b      	ldr	r3, [r7, #4]
 8032f9c:	681b      	ldr	r3, [r3, #0]
 8032f9e:	f003 0308 	and.w	r3, r3, #8
 8032fa2:	2b00      	cmp	r3, #0
 8032fa4:	d030      	beq.n	8033008 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8032fa6:	687b      	ldr	r3, [r7, #4]
 8032fa8:	695b      	ldr	r3, [r3, #20]
 8032faa:	2b00      	cmp	r3, #0
 8032fac:	d016      	beq.n	8032fdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8032fae:	4b30      	ldr	r3, [pc, #192]	; (8033070 <HAL_RCC_OscConfig+0x2b4>)
 8032fb0:	2201      	movs	r2, #1
 8032fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8032fb4:	f7ff f8a0 	bl	80320f8 <HAL_GetTick>
 8032fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8032fba:	e008      	b.n	8032fce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8032fbc:	f7ff f89c 	bl	80320f8 <HAL_GetTick>
 8032fc0:	4602      	mov	r2, r0
 8032fc2:	693b      	ldr	r3, [r7, #16]
 8032fc4:	1ad3      	subs	r3, r2, r3
 8032fc6:	2b02      	cmp	r3, #2
 8032fc8:	d901      	bls.n	8032fce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8032fca:	2303      	movs	r3, #3
 8032fcc:	e164      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8032fce:	4b26      	ldr	r3, [pc, #152]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8032fd2:	f003 0302 	and.w	r3, r3, #2
 8032fd6:	2b00      	cmp	r3, #0
 8032fd8:	d0f0      	beq.n	8032fbc <HAL_RCC_OscConfig+0x200>
 8032fda:	e015      	b.n	8033008 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8032fdc:	4b24      	ldr	r3, [pc, #144]	; (8033070 <HAL_RCC_OscConfig+0x2b4>)
 8032fde:	2200      	movs	r2, #0
 8032fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8032fe2:	f7ff f889 	bl	80320f8 <HAL_GetTick>
 8032fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8032fe8:	e008      	b.n	8032ffc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8032fea:	f7ff f885 	bl	80320f8 <HAL_GetTick>
 8032fee:	4602      	mov	r2, r0
 8032ff0:	693b      	ldr	r3, [r7, #16]
 8032ff2:	1ad3      	subs	r3, r2, r3
 8032ff4:	2b02      	cmp	r3, #2
 8032ff6:	d901      	bls.n	8032ffc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8032ff8:	2303      	movs	r3, #3
 8032ffa:	e14d      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8032ffc:	4b1a      	ldr	r3, [pc, #104]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8032ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8033000:	f003 0302 	and.w	r3, r3, #2
 8033004:	2b00      	cmp	r3, #0
 8033006:	d1f0      	bne.n	8032fea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8033008:	687b      	ldr	r3, [r7, #4]
 803300a:	681b      	ldr	r3, [r3, #0]
 803300c:	f003 0304 	and.w	r3, r3, #4
 8033010:	2b00      	cmp	r3, #0
 8033012:	f000 80a0 	beq.w	8033156 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8033016:	2300      	movs	r3, #0
 8033018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 803301a:	4b13      	ldr	r3, [pc, #76]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 803301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8033022:	2b00      	cmp	r3, #0
 8033024:	d10f      	bne.n	8033046 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8033026:	2300      	movs	r3, #0
 8033028:	60bb      	str	r3, [r7, #8]
 803302a:	4b0f      	ldr	r3, [pc, #60]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 803302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803302e:	4a0e      	ldr	r2, [pc, #56]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8033030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8033034:	6413      	str	r3, [r2, #64]	; 0x40
 8033036:	4b0c      	ldr	r3, [pc, #48]	; (8033068 <HAL_RCC_OscConfig+0x2ac>)
 8033038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 803303e:	60bb      	str	r3, [r7, #8]
 8033040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8033042:	2301      	movs	r3, #1
 8033044:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8033046:	4b0b      	ldr	r3, [pc, #44]	; (8033074 <HAL_RCC_OscConfig+0x2b8>)
 8033048:	681b      	ldr	r3, [r3, #0]
 803304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803304e:	2b00      	cmp	r3, #0
 8033050:	d121      	bne.n	8033096 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8033052:	4b08      	ldr	r3, [pc, #32]	; (8033074 <HAL_RCC_OscConfig+0x2b8>)
 8033054:	681b      	ldr	r3, [r3, #0]
 8033056:	4a07      	ldr	r2, [pc, #28]	; (8033074 <HAL_RCC_OscConfig+0x2b8>)
 8033058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 803305c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 803305e:	f7ff f84b 	bl	80320f8 <HAL_GetTick>
 8033062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8033064:	e011      	b.n	803308a <HAL_RCC_OscConfig+0x2ce>
 8033066:	bf00      	nop
 8033068:	40023800 	.word	0x40023800
 803306c:	42470000 	.word	0x42470000
 8033070:	42470e80 	.word	0x42470e80
 8033074:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8033078:	f7ff f83e 	bl	80320f8 <HAL_GetTick>
 803307c:	4602      	mov	r2, r0
 803307e:	693b      	ldr	r3, [r7, #16]
 8033080:	1ad3      	subs	r3, r2, r3
 8033082:	2b02      	cmp	r3, #2
 8033084:	d901      	bls.n	803308a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8033086:	2303      	movs	r3, #3
 8033088:	e106      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 803308a:	4b85      	ldr	r3, [pc, #532]	; (80332a0 <HAL_RCC_OscConfig+0x4e4>)
 803308c:	681b      	ldr	r3, [r3, #0]
 803308e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8033092:	2b00      	cmp	r3, #0
 8033094:	d0f0      	beq.n	8033078 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8033096:	687b      	ldr	r3, [r7, #4]
 8033098:	689b      	ldr	r3, [r3, #8]
 803309a:	2b01      	cmp	r3, #1
 803309c:	d106      	bne.n	80330ac <HAL_RCC_OscConfig+0x2f0>
 803309e:	4b81      	ldr	r3, [pc, #516]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 80330a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80330a2:	4a80      	ldr	r2, [pc, #512]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 80330a4:	f043 0301 	orr.w	r3, r3, #1
 80330a8:	6713      	str	r3, [r2, #112]	; 0x70
 80330aa:	e01c      	b.n	80330e6 <HAL_RCC_OscConfig+0x32a>
 80330ac:	687b      	ldr	r3, [r7, #4]
 80330ae:	689b      	ldr	r3, [r3, #8]
 80330b0:	2b05      	cmp	r3, #5
 80330b2:	d10c      	bne.n	80330ce <HAL_RCC_OscConfig+0x312>
 80330b4:	4b7b      	ldr	r3, [pc, #492]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 80330b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80330b8:	4a7a      	ldr	r2, [pc, #488]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 80330ba:	f043 0304 	orr.w	r3, r3, #4
 80330be:	6713      	str	r3, [r2, #112]	; 0x70
 80330c0:	4b78      	ldr	r3, [pc, #480]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 80330c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80330c4:	4a77      	ldr	r2, [pc, #476]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 80330c6:	f043 0301 	orr.w	r3, r3, #1
 80330ca:	6713      	str	r3, [r2, #112]	; 0x70
 80330cc:	e00b      	b.n	80330e6 <HAL_RCC_OscConfig+0x32a>
 80330ce:	4b75      	ldr	r3, [pc, #468]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 80330d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80330d2:	4a74      	ldr	r2, [pc, #464]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 80330d4:	f023 0301 	bic.w	r3, r3, #1
 80330d8:	6713      	str	r3, [r2, #112]	; 0x70
 80330da:	4b72      	ldr	r3, [pc, #456]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 80330dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80330de:	4a71      	ldr	r2, [pc, #452]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 80330e0:	f023 0304 	bic.w	r3, r3, #4
 80330e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80330e6:	687b      	ldr	r3, [r7, #4]
 80330e8:	689b      	ldr	r3, [r3, #8]
 80330ea:	2b00      	cmp	r3, #0
 80330ec:	d015      	beq.n	803311a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80330ee:	f7ff f803 	bl	80320f8 <HAL_GetTick>
 80330f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80330f4:	e00a      	b.n	803310c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80330f6:	f7fe ffff 	bl	80320f8 <HAL_GetTick>
 80330fa:	4602      	mov	r2, r0
 80330fc:	693b      	ldr	r3, [r7, #16]
 80330fe:	1ad3      	subs	r3, r2, r3
 8033100:	f241 3288 	movw	r2, #5000	; 0x1388
 8033104:	4293      	cmp	r3, r2
 8033106:	d901      	bls.n	803310c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8033108:	2303      	movs	r3, #3
 803310a:	e0c5      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 803310c:	4b65      	ldr	r3, [pc, #404]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 803310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8033110:	f003 0302 	and.w	r3, r3, #2
 8033114:	2b00      	cmp	r3, #0
 8033116:	d0ee      	beq.n	80330f6 <HAL_RCC_OscConfig+0x33a>
 8033118:	e014      	b.n	8033144 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 803311a:	f7fe ffed 	bl	80320f8 <HAL_GetTick>
 803311e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8033120:	e00a      	b.n	8033138 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8033122:	f7fe ffe9 	bl	80320f8 <HAL_GetTick>
 8033126:	4602      	mov	r2, r0
 8033128:	693b      	ldr	r3, [r7, #16]
 803312a:	1ad3      	subs	r3, r2, r3
 803312c:	f241 3288 	movw	r2, #5000	; 0x1388
 8033130:	4293      	cmp	r3, r2
 8033132:	d901      	bls.n	8033138 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8033134:	2303      	movs	r3, #3
 8033136:	e0af      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8033138:	4b5a      	ldr	r3, [pc, #360]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 803313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803313c:	f003 0302 	and.w	r3, r3, #2
 8033140:	2b00      	cmp	r3, #0
 8033142:	d1ee      	bne.n	8033122 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8033144:	7dfb      	ldrb	r3, [r7, #23]
 8033146:	2b01      	cmp	r3, #1
 8033148:	d105      	bne.n	8033156 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 803314a:	4b56      	ldr	r3, [pc, #344]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 803314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803314e:	4a55      	ldr	r2, [pc, #340]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 8033150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8033154:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8033156:	687b      	ldr	r3, [r7, #4]
 8033158:	699b      	ldr	r3, [r3, #24]
 803315a:	2b00      	cmp	r3, #0
 803315c:	f000 809b 	beq.w	8033296 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8033160:	4b50      	ldr	r3, [pc, #320]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 8033162:	689b      	ldr	r3, [r3, #8]
 8033164:	f003 030c 	and.w	r3, r3, #12
 8033168:	2b08      	cmp	r3, #8
 803316a:	d05c      	beq.n	8033226 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 803316c:	687b      	ldr	r3, [r7, #4]
 803316e:	699b      	ldr	r3, [r3, #24]
 8033170:	2b02      	cmp	r3, #2
 8033172:	d141      	bne.n	80331f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8033174:	4b4c      	ldr	r3, [pc, #304]	; (80332a8 <HAL_RCC_OscConfig+0x4ec>)
 8033176:	2200      	movs	r2, #0
 8033178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 803317a:	f7fe ffbd 	bl	80320f8 <HAL_GetTick>
 803317e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8033180:	e008      	b.n	8033194 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8033182:	f7fe ffb9 	bl	80320f8 <HAL_GetTick>
 8033186:	4602      	mov	r2, r0
 8033188:	693b      	ldr	r3, [r7, #16]
 803318a:	1ad3      	subs	r3, r2, r3
 803318c:	2b02      	cmp	r3, #2
 803318e:	d901      	bls.n	8033194 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8033190:	2303      	movs	r3, #3
 8033192:	e081      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8033194:	4b43      	ldr	r3, [pc, #268]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 8033196:	681b      	ldr	r3, [r3, #0]
 8033198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 803319c:	2b00      	cmp	r3, #0
 803319e:	d1f0      	bne.n	8033182 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80331a0:	687b      	ldr	r3, [r7, #4]
 80331a2:	69da      	ldr	r2, [r3, #28]
 80331a4:	687b      	ldr	r3, [r7, #4]
 80331a6:	6a1b      	ldr	r3, [r3, #32]
 80331a8:	431a      	orrs	r2, r3
 80331aa:	687b      	ldr	r3, [r7, #4]
 80331ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80331ae:	019b      	lsls	r3, r3, #6
 80331b0:	431a      	orrs	r2, r3
 80331b2:	687b      	ldr	r3, [r7, #4]
 80331b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80331b6:	085b      	lsrs	r3, r3, #1
 80331b8:	3b01      	subs	r3, #1
 80331ba:	041b      	lsls	r3, r3, #16
 80331bc:	431a      	orrs	r2, r3
 80331be:	687b      	ldr	r3, [r7, #4]
 80331c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80331c2:	061b      	lsls	r3, r3, #24
 80331c4:	4937      	ldr	r1, [pc, #220]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 80331c6:	4313      	orrs	r3, r2
 80331c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80331ca:	4b37      	ldr	r3, [pc, #220]	; (80332a8 <HAL_RCC_OscConfig+0x4ec>)
 80331cc:	2201      	movs	r2, #1
 80331ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80331d0:	f7fe ff92 	bl	80320f8 <HAL_GetTick>
 80331d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80331d6:	e008      	b.n	80331ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80331d8:	f7fe ff8e 	bl	80320f8 <HAL_GetTick>
 80331dc:	4602      	mov	r2, r0
 80331de:	693b      	ldr	r3, [r7, #16]
 80331e0:	1ad3      	subs	r3, r2, r3
 80331e2:	2b02      	cmp	r3, #2
 80331e4:	d901      	bls.n	80331ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80331e6:	2303      	movs	r3, #3
 80331e8:	e056      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80331ea:	4b2e      	ldr	r3, [pc, #184]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 80331ec:	681b      	ldr	r3, [r3, #0]
 80331ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80331f2:	2b00      	cmp	r3, #0
 80331f4:	d0f0      	beq.n	80331d8 <HAL_RCC_OscConfig+0x41c>
 80331f6:	e04e      	b.n	8033296 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80331f8:	4b2b      	ldr	r3, [pc, #172]	; (80332a8 <HAL_RCC_OscConfig+0x4ec>)
 80331fa:	2200      	movs	r2, #0
 80331fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80331fe:	f7fe ff7b 	bl	80320f8 <HAL_GetTick>
 8033202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8033204:	e008      	b.n	8033218 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8033206:	f7fe ff77 	bl	80320f8 <HAL_GetTick>
 803320a:	4602      	mov	r2, r0
 803320c:	693b      	ldr	r3, [r7, #16]
 803320e:	1ad3      	subs	r3, r2, r3
 8033210:	2b02      	cmp	r3, #2
 8033212:	d901      	bls.n	8033218 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8033214:	2303      	movs	r3, #3
 8033216:	e03f      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8033218:	4b22      	ldr	r3, [pc, #136]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 803321a:	681b      	ldr	r3, [r3, #0]
 803321c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8033220:	2b00      	cmp	r3, #0
 8033222:	d1f0      	bne.n	8033206 <HAL_RCC_OscConfig+0x44a>
 8033224:	e037      	b.n	8033296 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8033226:	687b      	ldr	r3, [r7, #4]
 8033228:	699b      	ldr	r3, [r3, #24]
 803322a:	2b01      	cmp	r3, #1
 803322c:	d101      	bne.n	8033232 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 803322e:	2301      	movs	r3, #1
 8033230:	e032      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8033232:	4b1c      	ldr	r3, [pc, #112]	; (80332a4 <HAL_RCC_OscConfig+0x4e8>)
 8033234:	685b      	ldr	r3, [r3, #4]
 8033236:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8033238:	687b      	ldr	r3, [r7, #4]
 803323a:	699b      	ldr	r3, [r3, #24]
 803323c:	2b01      	cmp	r3, #1
 803323e:	d028      	beq.n	8033292 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8033240:	68fb      	ldr	r3, [r7, #12]
 8033242:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8033246:	687b      	ldr	r3, [r7, #4]
 8033248:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 803324a:	429a      	cmp	r2, r3
 803324c:	d121      	bne.n	8033292 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 803324e:	68fb      	ldr	r3, [r7, #12]
 8033250:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8033254:	687b      	ldr	r3, [r7, #4]
 8033256:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8033258:	429a      	cmp	r2, r3
 803325a:	d11a      	bne.n	8033292 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 803325c:	68fa      	ldr	r2, [r7, #12]
 803325e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8033262:	4013      	ands	r3, r2
 8033264:	687a      	ldr	r2, [r7, #4]
 8033266:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8033268:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 803326a:	4293      	cmp	r3, r2
 803326c:	d111      	bne.n	8033292 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 803326e:	68fb      	ldr	r3, [r7, #12]
 8033270:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8033274:	687b      	ldr	r3, [r7, #4]
 8033276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8033278:	085b      	lsrs	r3, r3, #1
 803327a:	3b01      	subs	r3, #1
 803327c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 803327e:	429a      	cmp	r2, r3
 8033280:	d107      	bne.n	8033292 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8033282:	68fb      	ldr	r3, [r7, #12]
 8033284:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8033288:	687b      	ldr	r3, [r7, #4]
 803328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803328c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 803328e:	429a      	cmp	r2, r3
 8033290:	d001      	beq.n	8033296 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8033292:	2301      	movs	r3, #1
 8033294:	e000      	b.n	8033298 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8033296:	2300      	movs	r3, #0
}
 8033298:	4618      	mov	r0, r3
 803329a:	3718      	adds	r7, #24
 803329c:	46bd      	mov	sp, r7
 803329e:	bd80      	pop	{r7, pc}
 80332a0:	40007000 	.word	0x40007000
 80332a4:	40023800 	.word	0x40023800
 80332a8:	42470060 	.word	0x42470060

080332ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80332ac:	b580      	push	{r7, lr}
 80332ae:	b084      	sub	sp, #16
 80332b0:	af00      	add	r7, sp, #0
 80332b2:	6078      	str	r0, [r7, #4]
 80332b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80332b6:	687b      	ldr	r3, [r7, #4]
 80332b8:	2b00      	cmp	r3, #0
 80332ba:	d101      	bne.n	80332c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80332bc:	2301      	movs	r3, #1
 80332be:	e0cc      	b.n	803345a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80332c0:	4b68      	ldr	r3, [pc, #416]	; (8033464 <HAL_RCC_ClockConfig+0x1b8>)
 80332c2:	681b      	ldr	r3, [r3, #0]
 80332c4:	f003 0307 	and.w	r3, r3, #7
 80332c8:	683a      	ldr	r2, [r7, #0]
 80332ca:	429a      	cmp	r2, r3
 80332cc:	d90c      	bls.n	80332e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80332ce:	4b65      	ldr	r3, [pc, #404]	; (8033464 <HAL_RCC_ClockConfig+0x1b8>)
 80332d0:	683a      	ldr	r2, [r7, #0]
 80332d2:	b2d2      	uxtb	r2, r2
 80332d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80332d6:	4b63      	ldr	r3, [pc, #396]	; (8033464 <HAL_RCC_ClockConfig+0x1b8>)
 80332d8:	681b      	ldr	r3, [r3, #0]
 80332da:	f003 0307 	and.w	r3, r3, #7
 80332de:	683a      	ldr	r2, [r7, #0]
 80332e0:	429a      	cmp	r2, r3
 80332e2:	d001      	beq.n	80332e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80332e4:	2301      	movs	r3, #1
 80332e6:	e0b8      	b.n	803345a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80332e8:	687b      	ldr	r3, [r7, #4]
 80332ea:	681b      	ldr	r3, [r3, #0]
 80332ec:	f003 0302 	and.w	r3, r3, #2
 80332f0:	2b00      	cmp	r3, #0
 80332f2:	d020      	beq.n	8033336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80332f4:	687b      	ldr	r3, [r7, #4]
 80332f6:	681b      	ldr	r3, [r3, #0]
 80332f8:	f003 0304 	and.w	r3, r3, #4
 80332fc:	2b00      	cmp	r3, #0
 80332fe:	d005      	beq.n	803330c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8033300:	4b59      	ldr	r3, [pc, #356]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 8033302:	689b      	ldr	r3, [r3, #8]
 8033304:	4a58      	ldr	r2, [pc, #352]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 8033306:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 803330a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 803330c:	687b      	ldr	r3, [r7, #4]
 803330e:	681b      	ldr	r3, [r3, #0]
 8033310:	f003 0308 	and.w	r3, r3, #8
 8033314:	2b00      	cmp	r3, #0
 8033316:	d005      	beq.n	8033324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8033318:	4b53      	ldr	r3, [pc, #332]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 803331a:	689b      	ldr	r3, [r3, #8]
 803331c:	4a52      	ldr	r2, [pc, #328]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 803331e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8033322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8033324:	4b50      	ldr	r3, [pc, #320]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 8033326:	689b      	ldr	r3, [r3, #8]
 8033328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 803332c:	687b      	ldr	r3, [r7, #4]
 803332e:	689b      	ldr	r3, [r3, #8]
 8033330:	494d      	ldr	r1, [pc, #308]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 8033332:	4313      	orrs	r3, r2
 8033334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8033336:	687b      	ldr	r3, [r7, #4]
 8033338:	681b      	ldr	r3, [r3, #0]
 803333a:	f003 0301 	and.w	r3, r3, #1
 803333e:	2b00      	cmp	r3, #0
 8033340:	d044      	beq.n	80333cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8033342:	687b      	ldr	r3, [r7, #4]
 8033344:	685b      	ldr	r3, [r3, #4]
 8033346:	2b01      	cmp	r3, #1
 8033348:	d107      	bne.n	803335a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 803334a:	4b47      	ldr	r3, [pc, #284]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 803334c:	681b      	ldr	r3, [r3, #0]
 803334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8033352:	2b00      	cmp	r3, #0
 8033354:	d119      	bne.n	803338a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8033356:	2301      	movs	r3, #1
 8033358:	e07f      	b.n	803345a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 803335a:	687b      	ldr	r3, [r7, #4]
 803335c:	685b      	ldr	r3, [r3, #4]
 803335e:	2b02      	cmp	r3, #2
 8033360:	d003      	beq.n	803336a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8033362:	687b      	ldr	r3, [r7, #4]
 8033364:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8033366:	2b03      	cmp	r3, #3
 8033368:	d107      	bne.n	803337a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 803336a:	4b3f      	ldr	r3, [pc, #252]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 803336c:	681b      	ldr	r3, [r3, #0]
 803336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8033372:	2b00      	cmp	r3, #0
 8033374:	d109      	bne.n	803338a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8033376:	2301      	movs	r3, #1
 8033378:	e06f      	b.n	803345a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 803337a:	4b3b      	ldr	r3, [pc, #236]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 803337c:	681b      	ldr	r3, [r3, #0]
 803337e:	f003 0302 	and.w	r3, r3, #2
 8033382:	2b00      	cmp	r3, #0
 8033384:	d101      	bne.n	803338a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8033386:	2301      	movs	r3, #1
 8033388:	e067      	b.n	803345a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 803338a:	4b37      	ldr	r3, [pc, #220]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 803338c:	689b      	ldr	r3, [r3, #8]
 803338e:	f023 0203 	bic.w	r2, r3, #3
 8033392:	687b      	ldr	r3, [r7, #4]
 8033394:	685b      	ldr	r3, [r3, #4]
 8033396:	4934      	ldr	r1, [pc, #208]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 8033398:	4313      	orrs	r3, r2
 803339a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 803339c:	f7fe feac 	bl	80320f8 <HAL_GetTick>
 80333a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80333a2:	e00a      	b.n	80333ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80333a4:	f7fe fea8 	bl	80320f8 <HAL_GetTick>
 80333a8:	4602      	mov	r2, r0
 80333aa:	68fb      	ldr	r3, [r7, #12]
 80333ac:	1ad3      	subs	r3, r2, r3
 80333ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80333b2:	4293      	cmp	r3, r2
 80333b4:	d901      	bls.n	80333ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80333b6:	2303      	movs	r3, #3
 80333b8:	e04f      	b.n	803345a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80333ba:	4b2b      	ldr	r3, [pc, #172]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 80333bc:	689b      	ldr	r3, [r3, #8]
 80333be:	f003 020c 	and.w	r2, r3, #12
 80333c2:	687b      	ldr	r3, [r7, #4]
 80333c4:	685b      	ldr	r3, [r3, #4]
 80333c6:	009b      	lsls	r3, r3, #2
 80333c8:	429a      	cmp	r2, r3
 80333ca:	d1eb      	bne.n	80333a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80333cc:	4b25      	ldr	r3, [pc, #148]	; (8033464 <HAL_RCC_ClockConfig+0x1b8>)
 80333ce:	681b      	ldr	r3, [r3, #0]
 80333d0:	f003 0307 	and.w	r3, r3, #7
 80333d4:	683a      	ldr	r2, [r7, #0]
 80333d6:	429a      	cmp	r2, r3
 80333d8:	d20c      	bcs.n	80333f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80333da:	4b22      	ldr	r3, [pc, #136]	; (8033464 <HAL_RCC_ClockConfig+0x1b8>)
 80333dc:	683a      	ldr	r2, [r7, #0]
 80333de:	b2d2      	uxtb	r2, r2
 80333e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80333e2:	4b20      	ldr	r3, [pc, #128]	; (8033464 <HAL_RCC_ClockConfig+0x1b8>)
 80333e4:	681b      	ldr	r3, [r3, #0]
 80333e6:	f003 0307 	and.w	r3, r3, #7
 80333ea:	683a      	ldr	r2, [r7, #0]
 80333ec:	429a      	cmp	r2, r3
 80333ee:	d001      	beq.n	80333f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80333f0:	2301      	movs	r3, #1
 80333f2:	e032      	b.n	803345a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80333f4:	687b      	ldr	r3, [r7, #4]
 80333f6:	681b      	ldr	r3, [r3, #0]
 80333f8:	f003 0304 	and.w	r3, r3, #4
 80333fc:	2b00      	cmp	r3, #0
 80333fe:	d008      	beq.n	8033412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8033400:	4b19      	ldr	r3, [pc, #100]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 8033402:	689b      	ldr	r3, [r3, #8]
 8033404:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8033408:	687b      	ldr	r3, [r7, #4]
 803340a:	68db      	ldr	r3, [r3, #12]
 803340c:	4916      	ldr	r1, [pc, #88]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 803340e:	4313      	orrs	r3, r2
 8033410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8033412:	687b      	ldr	r3, [r7, #4]
 8033414:	681b      	ldr	r3, [r3, #0]
 8033416:	f003 0308 	and.w	r3, r3, #8
 803341a:	2b00      	cmp	r3, #0
 803341c:	d009      	beq.n	8033432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 803341e:	4b12      	ldr	r3, [pc, #72]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 8033420:	689b      	ldr	r3, [r3, #8]
 8033422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8033426:	687b      	ldr	r3, [r7, #4]
 8033428:	691b      	ldr	r3, [r3, #16]
 803342a:	00db      	lsls	r3, r3, #3
 803342c:	490e      	ldr	r1, [pc, #56]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 803342e:	4313      	orrs	r3, r2
 8033430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8033432:	f000 f821 	bl	8033478 <HAL_RCC_GetSysClockFreq>
 8033436:	4602      	mov	r2, r0
 8033438:	4b0b      	ldr	r3, [pc, #44]	; (8033468 <HAL_RCC_ClockConfig+0x1bc>)
 803343a:	689b      	ldr	r3, [r3, #8]
 803343c:	091b      	lsrs	r3, r3, #4
 803343e:	f003 030f 	and.w	r3, r3, #15
 8033442:	490a      	ldr	r1, [pc, #40]	; (803346c <HAL_RCC_ClockConfig+0x1c0>)
 8033444:	5ccb      	ldrb	r3, [r1, r3]
 8033446:	fa22 f303 	lsr.w	r3, r2, r3
 803344a:	4a09      	ldr	r2, [pc, #36]	; (8033470 <HAL_RCC_ClockConfig+0x1c4>)
 803344c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 803344e:	4b09      	ldr	r3, [pc, #36]	; (8033474 <HAL_RCC_ClockConfig+0x1c8>)
 8033450:	681b      	ldr	r3, [r3, #0]
 8033452:	4618      	mov	r0, r3
 8033454:	f7fe fe0c 	bl	8032070 <HAL_InitTick>

  return HAL_OK;
 8033458:	2300      	movs	r3, #0
}
 803345a:	4618      	mov	r0, r3
 803345c:	3710      	adds	r7, #16
 803345e:	46bd      	mov	sp, r7
 8033460:	bd80      	pop	{r7, pc}
 8033462:	bf00      	nop
 8033464:	40023c00 	.word	0x40023c00
 8033468:	40023800 	.word	0x40023800
 803346c:	0803e7f0 	.word	0x0803e7f0
 8033470:	20000020 	.word	0x20000020
 8033474:	20000024 	.word	0x20000024

08033478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8033478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 803347c:	b084      	sub	sp, #16
 803347e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8033480:	2300      	movs	r3, #0
 8033482:	607b      	str	r3, [r7, #4]
 8033484:	2300      	movs	r3, #0
 8033486:	60fb      	str	r3, [r7, #12]
 8033488:	2300      	movs	r3, #0
 803348a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 803348c:	2300      	movs	r3, #0
 803348e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8033490:	4b67      	ldr	r3, [pc, #412]	; (8033630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8033492:	689b      	ldr	r3, [r3, #8]
 8033494:	f003 030c 	and.w	r3, r3, #12
 8033498:	2b08      	cmp	r3, #8
 803349a:	d00d      	beq.n	80334b8 <HAL_RCC_GetSysClockFreq+0x40>
 803349c:	2b08      	cmp	r3, #8
 803349e:	f200 80bd 	bhi.w	803361c <HAL_RCC_GetSysClockFreq+0x1a4>
 80334a2:	2b00      	cmp	r3, #0
 80334a4:	d002      	beq.n	80334ac <HAL_RCC_GetSysClockFreq+0x34>
 80334a6:	2b04      	cmp	r3, #4
 80334a8:	d003      	beq.n	80334b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80334aa:	e0b7      	b.n	803361c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80334ac:	4b61      	ldr	r3, [pc, #388]	; (8033634 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80334ae:	60bb      	str	r3, [r7, #8]
       break;
 80334b0:	e0b7      	b.n	8033622 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80334b2:	4b61      	ldr	r3, [pc, #388]	; (8033638 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80334b4:	60bb      	str	r3, [r7, #8]
      break;
 80334b6:	e0b4      	b.n	8033622 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80334b8:	4b5d      	ldr	r3, [pc, #372]	; (8033630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80334ba:	685b      	ldr	r3, [r3, #4]
 80334bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80334c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80334c2:	4b5b      	ldr	r3, [pc, #364]	; (8033630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80334c4:	685b      	ldr	r3, [r3, #4]
 80334c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80334ca:	2b00      	cmp	r3, #0
 80334cc:	d04d      	beq.n	803356a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80334ce:	4b58      	ldr	r3, [pc, #352]	; (8033630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80334d0:	685b      	ldr	r3, [r3, #4]
 80334d2:	099b      	lsrs	r3, r3, #6
 80334d4:	461a      	mov	r2, r3
 80334d6:	f04f 0300 	mov.w	r3, #0
 80334da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80334de:	f04f 0100 	mov.w	r1, #0
 80334e2:	ea02 0800 	and.w	r8, r2, r0
 80334e6:	ea03 0901 	and.w	r9, r3, r1
 80334ea:	4640      	mov	r0, r8
 80334ec:	4649      	mov	r1, r9
 80334ee:	f04f 0200 	mov.w	r2, #0
 80334f2:	f04f 0300 	mov.w	r3, #0
 80334f6:	014b      	lsls	r3, r1, #5
 80334f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80334fc:	0142      	lsls	r2, r0, #5
 80334fe:	4610      	mov	r0, r2
 8033500:	4619      	mov	r1, r3
 8033502:	ebb0 0008 	subs.w	r0, r0, r8
 8033506:	eb61 0109 	sbc.w	r1, r1, r9
 803350a:	f04f 0200 	mov.w	r2, #0
 803350e:	f04f 0300 	mov.w	r3, #0
 8033512:	018b      	lsls	r3, r1, #6
 8033514:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8033518:	0182      	lsls	r2, r0, #6
 803351a:	1a12      	subs	r2, r2, r0
 803351c:	eb63 0301 	sbc.w	r3, r3, r1
 8033520:	f04f 0000 	mov.w	r0, #0
 8033524:	f04f 0100 	mov.w	r1, #0
 8033528:	00d9      	lsls	r1, r3, #3
 803352a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 803352e:	00d0      	lsls	r0, r2, #3
 8033530:	4602      	mov	r2, r0
 8033532:	460b      	mov	r3, r1
 8033534:	eb12 0208 	adds.w	r2, r2, r8
 8033538:	eb43 0309 	adc.w	r3, r3, r9
 803353c:	f04f 0000 	mov.w	r0, #0
 8033540:	f04f 0100 	mov.w	r1, #0
 8033544:	0259      	lsls	r1, r3, #9
 8033546:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 803354a:	0250      	lsls	r0, r2, #9
 803354c:	4602      	mov	r2, r0
 803354e:	460b      	mov	r3, r1
 8033550:	4610      	mov	r0, r2
 8033552:	4619      	mov	r1, r3
 8033554:	687b      	ldr	r3, [r7, #4]
 8033556:	461a      	mov	r2, r3
 8033558:	f04f 0300 	mov.w	r3, #0
 803355c:	f7ed fb94 	bl	8020c88 <__aeabi_uldivmod>
 8033560:	4602      	mov	r2, r0
 8033562:	460b      	mov	r3, r1
 8033564:	4613      	mov	r3, r2
 8033566:	60fb      	str	r3, [r7, #12]
 8033568:	e04a      	b.n	8033600 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 803356a:	4b31      	ldr	r3, [pc, #196]	; (8033630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 803356c:	685b      	ldr	r3, [r3, #4]
 803356e:	099b      	lsrs	r3, r3, #6
 8033570:	461a      	mov	r2, r3
 8033572:	f04f 0300 	mov.w	r3, #0
 8033576:	f240 10ff 	movw	r0, #511	; 0x1ff
 803357a:	f04f 0100 	mov.w	r1, #0
 803357e:	ea02 0400 	and.w	r4, r2, r0
 8033582:	ea03 0501 	and.w	r5, r3, r1
 8033586:	4620      	mov	r0, r4
 8033588:	4629      	mov	r1, r5
 803358a:	f04f 0200 	mov.w	r2, #0
 803358e:	f04f 0300 	mov.w	r3, #0
 8033592:	014b      	lsls	r3, r1, #5
 8033594:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8033598:	0142      	lsls	r2, r0, #5
 803359a:	4610      	mov	r0, r2
 803359c:	4619      	mov	r1, r3
 803359e:	1b00      	subs	r0, r0, r4
 80335a0:	eb61 0105 	sbc.w	r1, r1, r5
 80335a4:	f04f 0200 	mov.w	r2, #0
 80335a8:	f04f 0300 	mov.w	r3, #0
 80335ac:	018b      	lsls	r3, r1, #6
 80335ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80335b2:	0182      	lsls	r2, r0, #6
 80335b4:	1a12      	subs	r2, r2, r0
 80335b6:	eb63 0301 	sbc.w	r3, r3, r1
 80335ba:	f04f 0000 	mov.w	r0, #0
 80335be:	f04f 0100 	mov.w	r1, #0
 80335c2:	00d9      	lsls	r1, r3, #3
 80335c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80335c8:	00d0      	lsls	r0, r2, #3
 80335ca:	4602      	mov	r2, r0
 80335cc:	460b      	mov	r3, r1
 80335ce:	1912      	adds	r2, r2, r4
 80335d0:	eb45 0303 	adc.w	r3, r5, r3
 80335d4:	f04f 0000 	mov.w	r0, #0
 80335d8:	f04f 0100 	mov.w	r1, #0
 80335dc:	0299      	lsls	r1, r3, #10
 80335de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80335e2:	0290      	lsls	r0, r2, #10
 80335e4:	4602      	mov	r2, r0
 80335e6:	460b      	mov	r3, r1
 80335e8:	4610      	mov	r0, r2
 80335ea:	4619      	mov	r1, r3
 80335ec:	687b      	ldr	r3, [r7, #4]
 80335ee:	461a      	mov	r2, r3
 80335f0:	f04f 0300 	mov.w	r3, #0
 80335f4:	f7ed fb48 	bl	8020c88 <__aeabi_uldivmod>
 80335f8:	4602      	mov	r2, r0
 80335fa:	460b      	mov	r3, r1
 80335fc:	4613      	mov	r3, r2
 80335fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8033600:	4b0b      	ldr	r3, [pc, #44]	; (8033630 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8033602:	685b      	ldr	r3, [r3, #4]
 8033604:	0c1b      	lsrs	r3, r3, #16
 8033606:	f003 0303 	and.w	r3, r3, #3
 803360a:	3301      	adds	r3, #1
 803360c:	005b      	lsls	r3, r3, #1
 803360e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8033610:	68fa      	ldr	r2, [r7, #12]
 8033612:	683b      	ldr	r3, [r7, #0]
 8033614:	fbb2 f3f3 	udiv	r3, r2, r3
 8033618:	60bb      	str	r3, [r7, #8]
      break;
 803361a:	e002      	b.n	8033622 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 803361c:	4b05      	ldr	r3, [pc, #20]	; (8033634 <HAL_RCC_GetSysClockFreq+0x1bc>)
 803361e:	60bb      	str	r3, [r7, #8]
      break;
 8033620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8033622:	68bb      	ldr	r3, [r7, #8]
}
 8033624:	4618      	mov	r0, r3
 8033626:	3710      	adds	r7, #16
 8033628:	46bd      	mov	sp, r7
 803362a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 803362e:	bf00      	nop
 8033630:	40023800 	.word	0x40023800
 8033634:	00f42400 	.word	0x00f42400
 8033638:	007a1200 	.word	0x007a1200

0803363c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 803363c:	b480      	push	{r7}
 803363e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8033640:	4b03      	ldr	r3, [pc, #12]	; (8033650 <HAL_RCC_GetHCLKFreq+0x14>)
 8033642:	681b      	ldr	r3, [r3, #0]
}
 8033644:	4618      	mov	r0, r3
 8033646:	46bd      	mov	sp, r7
 8033648:	f85d 7b04 	ldr.w	r7, [sp], #4
 803364c:	4770      	bx	lr
 803364e:	bf00      	nop
 8033650:	20000020 	.word	0x20000020

08033654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8033654:	b580      	push	{r7, lr}
 8033656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8033658:	f7ff fff0 	bl	803363c <HAL_RCC_GetHCLKFreq>
 803365c:	4602      	mov	r2, r0
 803365e:	4b05      	ldr	r3, [pc, #20]	; (8033674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8033660:	689b      	ldr	r3, [r3, #8]
 8033662:	0a9b      	lsrs	r3, r3, #10
 8033664:	f003 0307 	and.w	r3, r3, #7
 8033668:	4903      	ldr	r1, [pc, #12]	; (8033678 <HAL_RCC_GetPCLK1Freq+0x24>)
 803366a:	5ccb      	ldrb	r3, [r1, r3]
 803366c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8033670:	4618      	mov	r0, r3
 8033672:	bd80      	pop	{r7, pc}
 8033674:	40023800 	.word	0x40023800
 8033678:	0803e800 	.word	0x0803e800

0803367c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 803367c:	b580      	push	{r7, lr}
 803367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8033680:	f7ff ffdc 	bl	803363c <HAL_RCC_GetHCLKFreq>
 8033684:	4602      	mov	r2, r0
 8033686:	4b05      	ldr	r3, [pc, #20]	; (803369c <HAL_RCC_GetPCLK2Freq+0x20>)
 8033688:	689b      	ldr	r3, [r3, #8]
 803368a:	0b5b      	lsrs	r3, r3, #13
 803368c:	f003 0307 	and.w	r3, r3, #7
 8033690:	4903      	ldr	r1, [pc, #12]	; (80336a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8033692:	5ccb      	ldrb	r3, [r1, r3]
 8033694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8033698:	4618      	mov	r0, r3
 803369a:	bd80      	pop	{r7, pc}
 803369c:	40023800 	.word	0x40023800
 80336a0:	0803e800 	.word	0x0803e800

080336a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80336a4:	b580      	push	{r7, lr}
 80336a6:	b082      	sub	sp, #8
 80336a8:	af00      	add	r7, sp, #0
 80336aa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80336ac:	687b      	ldr	r3, [r7, #4]
 80336ae:	2b00      	cmp	r3, #0
 80336b0:	d101      	bne.n	80336b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80336b2:	2301      	movs	r3, #1
 80336b4:	e022      	b.n	80336fc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80336b6:	687b      	ldr	r3, [r7, #4]
 80336b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80336bc:	b2db      	uxtb	r3, r3
 80336be:	2b00      	cmp	r3, #0
 80336c0:	d105      	bne.n	80336ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80336c2:	687b      	ldr	r3, [r7, #4]
 80336c4:	2200      	movs	r2, #0
 80336c6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80336c8:	6878      	ldr	r0, [r7, #4]
 80336ca:	f7fe f879 	bl	80317c0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80336ce:	687b      	ldr	r3, [r7, #4]
 80336d0:	2203      	movs	r2, #3
 80336d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80336d6:	6878      	ldr	r0, [r7, #4]
 80336d8:	f000 f814 	bl	8033704 <HAL_SD_InitCard>
 80336dc:	4603      	mov	r3, r0
 80336de:	2b00      	cmp	r3, #0
 80336e0:	d001      	beq.n	80336e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80336e2:	2301      	movs	r3, #1
 80336e4:	e00a      	b.n	80336fc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80336e6:	687b      	ldr	r3, [r7, #4]
 80336e8:	2200      	movs	r2, #0
 80336ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80336ec:	687b      	ldr	r3, [r7, #4]
 80336ee:	2200      	movs	r2, #0
 80336f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80336f2:	687b      	ldr	r3, [r7, #4]
 80336f4:	2201      	movs	r2, #1
 80336f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80336fa:	2300      	movs	r3, #0
}
 80336fc:	4618      	mov	r0, r3
 80336fe:	3708      	adds	r7, #8
 8033700:	46bd      	mov	sp, r7
 8033702:	bd80      	pop	{r7, pc}

08033704 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8033704:	b5b0      	push	{r4, r5, r7, lr}
 8033706:	b08e      	sub	sp, #56	; 0x38
 8033708:	af04      	add	r7, sp, #16
 803370a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 803370c:	2300      	movs	r3, #0
 803370e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8033710:	2300      	movs	r3, #0
 8033712:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8033714:	2300      	movs	r3, #0
 8033716:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8033718:	2300      	movs	r3, #0
 803371a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 803371c:	2300      	movs	r3, #0
 803371e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8033720:	2376      	movs	r3, #118	; 0x76
 8033722:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8033724:	687b      	ldr	r3, [r7, #4]
 8033726:	681d      	ldr	r5, [r3, #0]
 8033728:	466c      	mov	r4, sp
 803372a:	f107 0314 	add.w	r3, r7, #20
 803372e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8033732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8033736:	f107 0308 	add.w	r3, r7, #8
 803373a:	cb0e      	ldmia	r3, {r1, r2, r3}
 803373c:	4628      	mov	r0, r5
 803373e:	f002 fad5 	bl	8035cec <SDIO_Init>
 8033742:	4603      	mov	r3, r0
 8033744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8033748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 803374c:	2b00      	cmp	r3, #0
 803374e:	d001      	beq.n	8033754 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8033750:	2301      	movs	r3, #1
 8033752:	e04c      	b.n	80337ee <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8033754:	4b28      	ldr	r3, [pc, #160]	; (80337f8 <HAL_SD_InitCard+0xf4>)
 8033756:	2200      	movs	r2, #0
 8033758:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 803375a:	687b      	ldr	r3, [r7, #4]
 803375c:	681b      	ldr	r3, [r3, #0]
 803375e:	4618      	mov	r0, r3
 8033760:	f002 fb0d 	bl	8035d7e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8033764:	4b24      	ldr	r3, [pc, #144]	; (80337f8 <HAL_SD_InitCard+0xf4>)
 8033766:	2201      	movs	r2, #1
 8033768:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 803376a:	6878      	ldr	r0, [r7, #4]
 803376c:	f000 fe68 	bl	8034440 <SD_PowerON>
 8033770:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8033772:	6a3b      	ldr	r3, [r7, #32]
 8033774:	2b00      	cmp	r3, #0
 8033776:	d00b      	beq.n	8033790 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8033778:	687b      	ldr	r3, [r7, #4]
 803377a:	2201      	movs	r2, #1
 803377c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8033780:	687b      	ldr	r3, [r7, #4]
 8033782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8033784:	6a3b      	ldr	r3, [r7, #32]
 8033786:	431a      	orrs	r2, r3
 8033788:	687b      	ldr	r3, [r7, #4]
 803378a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 803378c:	2301      	movs	r3, #1
 803378e:	e02e      	b.n	80337ee <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8033790:	6878      	ldr	r0, [r7, #4]
 8033792:	f000 fd89 	bl	80342a8 <SD_InitCard>
 8033796:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8033798:	6a3b      	ldr	r3, [r7, #32]
 803379a:	2b00      	cmp	r3, #0
 803379c:	d00b      	beq.n	80337b6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 803379e:	687b      	ldr	r3, [r7, #4]
 80337a0:	2201      	movs	r2, #1
 80337a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80337a6:	687b      	ldr	r3, [r7, #4]
 80337a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80337aa:	6a3b      	ldr	r3, [r7, #32]
 80337ac:	431a      	orrs	r2, r3
 80337ae:	687b      	ldr	r3, [r7, #4]
 80337b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80337b2:	2301      	movs	r3, #1
 80337b4:	e01b      	b.n	80337ee <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80337b6:	687b      	ldr	r3, [r7, #4]
 80337b8:	681b      	ldr	r3, [r3, #0]
 80337ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80337be:	4618      	mov	r0, r3
 80337c0:	f002 fb70 	bl	8035ea4 <SDMMC_CmdBlockLength>
 80337c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80337c6:	6a3b      	ldr	r3, [r7, #32]
 80337c8:	2b00      	cmp	r3, #0
 80337ca:	d00f      	beq.n	80337ec <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80337cc:	687b      	ldr	r3, [r7, #4]
 80337ce:	681b      	ldr	r3, [r3, #0]
 80337d0:	4a0a      	ldr	r2, [pc, #40]	; (80337fc <HAL_SD_InitCard+0xf8>)
 80337d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80337d4:	687b      	ldr	r3, [r7, #4]
 80337d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80337d8:	6a3b      	ldr	r3, [r7, #32]
 80337da:	431a      	orrs	r2, r3
 80337dc:	687b      	ldr	r3, [r7, #4]
 80337de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80337e0:	687b      	ldr	r3, [r7, #4]
 80337e2:	2201      	movs	r2, #1
 80337e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80337e8:	2301      	movs	r3, #1
 80337ea:	e000      	b.n	80337ee <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80337ec:	2300      	movs	r3, #0
}
 80337ee:	4618      	mov	r0, r3
 80337f0:	3728      	adds	r7, #40	; 0x28
 80337f2:	46bd      	mov	sp, r7
 80337f4:	bdb0      	pop	{r4, r5, r7, pc}
 80337f6:	bf00      	nop
 80337f8:	422580a0 	.word	0x422580a0
 80337fc:	004005ff 	.word	0x004005ff

08033800 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8033800:	b580      	push	{r7, lr}
 8033802:	b092      	sub	sp, #72	; 0x48
 8033804:	af00      	add	r7, sp, #0
 8033806:	60f8      	str	r0, [r7, #12]
 8033808:	60b9      	str	r1, [r7, #8]
 803380a:	607a      	str	r2, [r7, #4]
 803380c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 803380e:	f7fe fc73 	bl	80320f8 <HAL_GetTick>
 8033812:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8033814:	687b      	ldr	r3, [r7, #4]
 8033816:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8033818:	68bb      	ldr	r3, [r7, #8]
 803381a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 803381c:	68bb      	ldr	r3, [r7, #8]
 803381e:	2b00      	cmp	r3, #0
 8033820:	d107      	bne.n	8033832 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8033822:	68fb      	ldr	r3, [r7, #12]
 8033824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033826:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 803382a:	68fb      	ldr	r3, [r7, #12]
 803382c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 803382e:	2301      	movs	r3, #1
 8033830:	e1bd      	b.n	8033bae <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8033832:	68fb      	ldr	r3, [r7, #12]
 8033834:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8033838:	b2db      	uxtb	r3, r3
 803383a:	2b01      	cmp	r3, #1
 803383c:	f040 81b0 	bne.w	8033ba0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8033840:	68fb      	ldr	r3, [r7, #12]
 8033842:	2200      	movs	r2, #0
 8033844:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8033846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8033848:	683b      	ldr	r3, [r7, #0]
 803384a:	441a      	add	r2, r3
 803384c:	68fb      	ldr	r3, [r7, #12]
 803384e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033850:	429a      	cmp	r2, r3
 8033852:	d907      	bls.n	8033864 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8033854:	68fb      	ldr	r3, [r7, #12]
 8033856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033858:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 803385c:	68fb      	ldr	r3, [r7, #12]
 803385e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8033860:	2301      	movs	r3, #1
 8033862:	e1a4      	b.n	8033bae <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8033864:	68fb      	ldr	r3, [r7, #12]
 8033866:	2203      	movs	r2, #3
 8033868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 803386c:	68fb      	ldr	r3, [r7, #12]
 803386e:	681b      	ldr	r3, [r3, #0]
 8033870:	2200      	movs	r2, #0
 8033872:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8033874:	68fb      	ldr	r3, [r7, #12]
 8033876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033878:	2b01      	cmp	r3, #1
 803387a:	d002      	beq.n	8033882 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 803387c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803387e:	025b      	lsls	r3, r3, #9
 8033880:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8033882:	f04f 33ff 	mov.w	r3, #4294967295
 8033886:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8033888:	683b      	ldr	r3, [r7, #0]
 803388a:	025b      	lsls	r3, r3, #9
 803388c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 803388e:	2390      	movs	r3, #144	; 0x90
 8033890:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8033892:	2302      	movs	r3, #2
 8033894:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8033896:	2300      	movs	r3, #0
 8033898:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 803389a:	2301      	movs	r3, #1
 803389c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 803389e:	68fb      	ldr	r3, [r7, #12]
 80338a0:	681b      	ldr	r3, [r3, #0]
 80338a2:	f107 0214 	add.w	r2, r7, #20
 80338a6:	4611      	mov	r1, r2
 80338a8:	4618      	mov	r0, r3
 80338aa:	f002 facf 	bl	8035e4c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80338ae:	683b      	ldr	r3, [r7, #0]
 80338b0:	2b01      	cmp	r3, #1
 80338b2:	d90a      	bls.n	80338ca <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80338b4:	68fb      	ldr	r3, [r7, #12]
 80338b6:	2202      	movs	r2, #2
 80338b8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80338ba:	68fb      	ldr	r3, [r7, #12]
 80338bc:	681b      	ldr	r3, [r3, #0]
 80338be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80338c0:	4618      	mov	r0, r3
 80338c2:	f002 fb33 	bl	8035f2c <SDMMC_CmdReadMultiBlock>
 80338c6:	6478      	str	r0, [r7, #68]	; 0x44
 80338c8:	e009      	b.n	80338de <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80338ca:	68fb      	ldr	r3, [r7, #12]
 80338cc:	2201      	movs	r2, #1
 80338ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80338d0:	68fb      	ldr	r3, [r7, #12]
 80338d2:	681b      	ldr	r3, [r3, #0]
 80338d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80338d6:	4618      	mov	r0, r3
 80338d8:	f002 fb06 	bl	8035ee8 <SDMMC_CmdReadSingleBlock>
 80338dc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80338de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80338e0:	2b00      	cmp	r3, #0
 80338e2:	d012      	beq.n	803390a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80338e4:	68fb      	ldr	r3, [r7, #12]
 80338e6:	681b      	ldr	r3, [r3, #0]
 80338e8:	4a7a      	ldr	r2, [pc, #488]	; (8033ad4 <HAL_SD_ReadBlocks+0x2d4>)
 80338ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80338ec:	68fb      	ldr	r3, [r7, #12]
 80338ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80338f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80338f2:	431a      	orrs	r2, r3
 80338f4:	68fb      	ldr	r3, [r7, #12]
 80338f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80338f8:	68fb      	ldr	r3, [r7, #12]
 80338fa:	2201      	movs	r2, #1
 80338fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8033900:	68fb      	ldr	r3, [r7, #12]
 8033902:	2200      	movs	r2, #0
 8033904:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8033906:	2301      	movs	r3, #1
 8033908:	e151      	b.n	8033bae <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 803390a:	69bb      	ldr	r3, [r7, #24]
 803390c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 803390e:	e061      	b.n	80339d4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8033910:	68fb      	ldr	r3, [r7, #12]
 8033912:	681b      	ldr	r3, [r3, #0]
 8033914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033916:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 803391a:	2b00      	cmp	r3, #0
 803391c:	d03c      	beq.n	8033998 <HAL_SD_ReadBlocks+0x198>
 803391e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033920:	2b00      	cmp	r3, #0
 8033922:	d039      	beq.n	8033998 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8033924:	2300      	movs	r3, #0
 8033926:	643b      	str	r3, [r7, #64]	; 0x40
 8033928:	e033      	b.n	8033992 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 803392a:	68fb      	ldr	r3, [r7, #12]
 803392c:	681b      	ldr	r3, [r3, #0]
 803392e:	4618      	mov	r0, r3
 8033930:	f002 fa07 	bl	8035d42 <SDIO_ReadFIFO>
 8033934:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8033936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033938:	b2da      	uxtb	r2, r3
 803393a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803393c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 803393e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033940:	3301      	adds	r3, #1
 8033942:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8033944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033946:	3b01      	subs	r3, #1
 8033948:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 803394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 803394c:	0a1b      	lsrs	r3, r3, #8
 803394e:	b2da      	uxtb	r2, r3
 8033950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033952:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8033954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033956:	3301      	adds	r3, #1
 8033958:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 803395a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803395c:	3b01      	subs	r3, #1
 803395e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8033960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033962:	0c1b      	lsrs	r3, r3, #16
 8033964:	b2da      	uxtb	r2, r3
 8033966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033968:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 803396a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803396c:	3301      	adds	r3, #1
 803396e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8033970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033972:	3b01      	subs	r3, #1
 8033974:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8033976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033978:	0e1b      	lsrs	r3, r3, #24
 803397a:	b2da      	uxtb	r2, r3
 803397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803397e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8033980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033982:	3301      	adds	r3, #1
 8033984:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8033986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033988:	3b01      	subs	r3, #1
 803398a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 803398c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803398e:	3301      	adds	r3, #1
 8033990:	643b      	str	r3, [r7, #64]	; 0x40
 8033992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8033994:	2b07      	cmp	r3, #7
 8033996:	d9c8      	bls.n	803392a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8033998:	f7fe fbae 	bl	80320f8 <HAL_GetTick>
 803399c:	4602      	mov	r2, r0
 803399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80339a0:	1ad3      	subs	r3, r2, r3
 80339a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80339a4:	429a      	cmp	r2, r3
 80339a6:	d902      	bls.n	80339ae <HAL_SD_ReadBlocks+0x1ae>
 80339a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80339aa:	2b00      	cmp	r3, #0
 80339ac:	d112      	bne.n	80339d4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80339ae:	68fb      	ldr	r3, [r7, #12]
 80339b0:	681b      	ldr	r3, [r3, #0]
 80339b2:	4a48      	ldr	r2, [pc, #288]	; (8033ad4 <HAL_SD_ReadBlocks+0x2d4>)
 80339b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80339b6:	68fb      	ldr	r3, [r7, #12]
 80339b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80339ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80339be:	68fb      	ldr	r3, [r7, #12]
 80339c0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80339c2:	68fb      	ldr	r3, [r7, #12]
 80339c4:	2201      	movs	r2, #1
 80339c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80339ca:	68fb      	ldr	r3, [r7, #12]
 80339cc:	2200      	movs	r2, #0
 80339ce:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80339d0:	2303      	movs	r3, #3
 80339d2:	e0ec      	b.n	8033bae <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80339d4:	68fb      	ldr	r3, [r7, #12]
 80339d6:	681b      	ldr	r3, [r3, #0]
 80339d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80339da:	f240 332a 	movw	r3, #810	; 0x32a
 80339de:	4013      	ands	r3, r2
 80339e0:	2b00      	cmp	r3, #0
 80339e2:	d095      	beq.n	8033910 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80339e4:	68fb      	ldr	r3, [r7, #12]
 80339e6:	681b      	ldr	r3, [r3, #0]
 80339e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80339ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80339ee:	2b00      	cmp	r3, #0
 80339f0:	d022      	beq.n	8033a38 <HAL_SD_ReadBlocks+0x238>
 80339f2:	683b      	ldr	r3, [r7, #0]
 80339f4:	2b01      	cmp	r3, #1
 80339f6:	d91f      	bls.n	8033a38 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80339f8:	68fb      	ldr	r3, [r7, #12]
 80339fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80339fc:	2b03      	cmp	r3, #3
 80339fe:	d01b      	beq.n	8033a38 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8033a00:	68fb      	ldr	r3, [r7, #12]
 8033a02:	681b      	ldr	r3, [r3, #0]
 8033a04:	4618      	mov	r0, r3
 8033a06:	f002 faf7 	bl	8035ff8 <SDMMC_CmdStopTransfer>
 8033a0a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8033a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8033a0e:	2b00      	cmp	r3, #0
 8033a10:	d012      	beq.n	8033a38 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8033a12:	68fb      	ldr	r3, [r7, #12]
 8033a14:	681b      	ldr	r3, [r3, #0]
 8033a16:	4a2f      	ldr	r2, [pc, #188]	; (8033ad4 <HAL_SD_ReadBlocks+0x2d4>)
 8033a18:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8033a1a:	68fb      	ldr	r3, [r7, #12]
 8033a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8033a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8033a20:	431a      	orrs	r2, r3
 8033a22:	68fb      	ldr	r3, [r7, #12]
 8033a24:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8033a26:	68fb      	ldr	r3, [r7, #12]
 8033a28:	2201      	movs	r2, #1
 8033a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8033a2e:	68fb      	ldr	r3, [r7, #12]
 8033a30:	2200      	movs	r2, #0
 8033a32:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8033a34:	2301      	movs	r3, #1
 8033a36:	e0ba      	b.n	8033bae <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8033a38:	68fb      	ldr	r3, [r7, #12]
 8033a3a:	681b      	ldr	r3, [r3, #0]
 8033a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033a3e:	f003 0308 	and.w	r3, r3, #8
 8033a42:	2b00      	cmp	r3, #0
 8033a44:	d012      	beq.n	8033a6c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8033a46:	68fb      	ldr	r3, [r7, #12]
 8033a48:	681b      	ldr	r3, [r3, #0]
 8033a4a:	4a22      	ldr	r2, [pc, #136]	; (8033ad4 <HAL_SD_ReadBlocks+0x2d4>)
 8033a4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8033a4e:	68fb      	ldr	r3, [r7, #12]
 8033a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033a52:	f043 0208 	orr.w	r2, r3, #8
 8033a56:	68fb      	ldr	r3, [r7, #12]
 8033a58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8033a5a:	68fb      	ldr	r3, [r7, #12]
 8033a5c:	2201      	movs	r2, #1
 8033a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8033a62:	68fb      	ldr	r3, [r7, #12]
 8033a64:	2200      	movs	r2, #0
 8033a66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8033a68:	2301      	movs	r3, #1
 8033a6a:	e0a0      	b.n	8033bae <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8033a6c:	68fb      	ldr	r3, [r7, #12]
 8033a6e:	681b      	ldr	r3, [r3, #0]
 8033a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033a72:	f003 0302 	and.w	r3, r3, #2
 8033a76:	2b00      	cmp	r3, #0
 8033a78:	d012      	beq.n	8033aa0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8033a7a:	68fb      	ldr	r3, [r7, #12]
 8033a7c:	681b      	ldr	r3, [r3, #0]
 8033a7e:	4a15      	ldr	r2, [pc, #84]	; (8033ad4 <HAL_SD_ReadBlocks+0x2d4>)
 8033a80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8033a82:	68fb      	ldr	r3, [r7, #12]
 8033a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033a86:	f043 0202 	orr.w	r2, r3, #2
 8033a8a:	68fb      	ldr	r3, [r7, #12]
 8033a8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8033a8e:	68fb      	ldr	r3, [r7, #12]
 8033a90:	2201      	movs	r2, #1
 8033a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8033a96:	68fb      	ldr	r3, [r7, #12]
 8033a98:	2200      	movs	r2, #0
 8033a9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8033a9c:	2301      	movs	r3, #1
 8033a9e:	e086      	b.n	8033bae <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8033aa0:	68fb      	ldr	r3, [r7, #12]
 8033aa2:	681b      	ldr	r3, [r3, #0]
 8033aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033aa6:	f003 0320 	and.w	r3, r3, #32
 8033aaa:	2b00      	cmp	r3, #0
 8033aac:	d063      	beq.n	8033b76 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8033aae:	68fb      	ldr	r3, [r7, #12]
 8033ab0:	681b      	ldr	r3, [r3, #0]
 8033ab2:	4a08      	ldr	r2, [pc, #32]	; (8033ad4 <HAL_SD_ReadBlocks+0x2d4>)
 8033ab4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8033ab6:	68fb      	ldr	r3, [r7, #12]
 8033ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033aba:	f043 0220 	orr.w	r2, r3, #32
 8033abe:	68fb      	ldr	r3, [r7, #12]
 8033ac0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8033ac2:	68fb      	ldr	r3, [r7, #12]
 8033ac4:	2201      	movs	r2, #1
 8033ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8033aca:	68fb      	ldr	r3, [r7, #12]
 8033acc:	2200      	movs	r2, #0
 8033ace:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8033ad0:	2301      	movs	r3, #1
 8033ad2:	e06c      	b.n	8033bae <HAL_SD_ReadBlocks+0x3ae>
 8033ad4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8033ad8:	68fb      	ldr	r3, [r7, #12]
 8033ada:	681b      	ldr	r3, [r3, #0]
 8033adc:	4618      	mov	r0, r3
 8033ade:	f002 f930 	bl	8035d42 <SDIO_ReadFIFO>
 8033ae2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8033ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033ae6:	b2da      	uxtb	r2, r3
 8033ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033aea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8033aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033aee:	3301      	adds	r3, #1
 8033af0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8033af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033af4:	3b01      	subs	r3, #1
 8033af6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8033af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033afa:	0a1b      	lsrs	r3, r3, #8
 8033afc:	b2da      	uxtb	r2, r3
 8033afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033b00:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8033b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033b04:	3301      	adds	r3, #1
 8033b06:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8033b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033b0a:	3b01      	subs	r3, #1
 8033b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8033b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033b10:	0c1b      	lsrs	r3, r3, #16
 8033b12:	b2da      	uxtb	r2, r3
 8033b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033b16:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8033b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033b1a:	3301      	adds	r3, #1
 8033b1c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8033b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033b20:	3b01      	subs	r3, #1
 8033b22:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8033b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8033b26:	0e1b      	lsrs	r3, r3, #24
 8033b28:	b2da      	uxtb	r2, r3
 8033b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033b2c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8033b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033b30:	3301      	adds	r3, #1
 8033b32:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8033b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033b36:	3b01      	subs	r3, #1
 8033b38:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8033b3a:	f7fe fadd 	bl	80320f8 <HAL_GetTick>
 8033b3e:	4602      	mov	r2, r0
 8033b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8033b42:	1ad3      	subs	r3, r2, r3
 8033b44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8033b46:	429a      	cmp	r2, r3
 8033b48:	d902      	bls.n	8033b50 <HAL_SD_ReadBlocks+0x350>
 8033b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033b4c:	2b00      	cmp	r3, #0
 8033b4e:	d112      	bne.n	8033b76 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8033b50:	68fb      	ldr	r3, [r7, #12]
 8033b52:	681b      	ldr	r3, [r3, #0]
 8033b54:	4a18      	ldr	r2, [pc, #96]	; (8033bb8 <HAL_SD_ReadBlocks+0x3b8>)
 8033b56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8033b58:	68fb      	ldr	r3, [r7, #12]
 8033b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033b5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8033b60:	68fb      	ldr	r3, [r7, #12]
 8033b62:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8033b64:	68fb      	ldr	r3, [r7, #12]
 8033b66:	2201      	movs	r2, #1
 8033b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8033b6c:	68fb      	ldr	r3, [r7, #12]
 8033b6e:	2200      	movs	r2, #0
 8033b70:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8033b72:	2301      	movs	r3, #1
 8033b74:	e01b      	b.n	8033bae <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8033b76:	68fb      	ldr	r3, [r7, #12]
 8033b78:	681b      	ldr	r3, [r3, #0]
 8033b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8033b80:	2b00      	cmp	r3, #0
 8033b82:	d002      	beq.n	8033b8a <HAL_SD_ReadBlocks+0x38a>
 8033b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033b86:	2b00      	cmp	r3, #0
 8033b88:	d1a6      	bne.n	8033ad8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8033b8a:	68fb      	ldr	r3, [r7, #12]
 8033b8c:	681b      	ldr	r3, [r3, #0]
 8033b8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8033b92:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8033b94:	68fb      	ldr	r3, [r7, #12]
 8033b96:	2201      	movs	r2, #1
 8033b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8033b9c:	2300      	movs	r3, #0
 8033b9e:	e006      	b.n	8033bae <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8033ba0:	68fb      	ldr	r3, [r7, #12]
 8033ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033ba4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8033ba8:	68fb      	ldr	r3, [r7, #12]
 8033baa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8033bac:	2301      	movs	r3, #1
  }
}
 8033bae:	4618      	mov	r0, r3
 8033bb0:	3748      	adds	r7, #72	; 0x48
 8033bb2:	46bd      	mov	sp, r7
 8033bb4:	bd80      	pop	{r7, pc}
 8033bb6:	bf00      	nop
 8033bb8:	004005ff 	.word	0x004005ff

08033bbc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8033bbc:	b580      	push	{r7, lr}
 8033bbe:	b092      	sub	sp, #72	; 0x48
 8033bc0:	af00      	add	r7, sp, #0
 8033bc2:	60f8      	str	r0, [r7, #12]
 8033bc4:	60b9      	str	r1, [r7, #8]
 8033bc6:	607a      	str	r2, [r7, #4]
 8033bc8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8033bca:	f7fe fa95 	bl	80320f8 <HAL_GetTick>
 8033bce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8033bd0:	687b      	ldr	r3, [r7, #4]
 8033bd2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8033bd4:	68bb      	ldr	r3, [r7, #8]
 8033bd6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8033bd8:	68bb      	ldr	r3, [r7, #8]
 8033bda:	2b00      	cmp	r3, #0
 8033bdc:	d107      	bne.n	8033bee <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8033bde:	68fb      	ldr	r3, [r7, #12]
 8033be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033be2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8033be6:	68fb      	ldr	r3, [r7, #12]
 8033be8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8033bea:	2301      	movs	r3, #1
 8033bec:	e166      	b.n	8033ebc <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8033bee:	68fb      	ldr	r3, [r7, #12]
 8033bf0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8033bf4:	b2db      	uxtb	r3, r3
 8033bf6:	2b01      	cmp	r3, #1
 8033bf8:	f040 8159 	bne.w	8033eae <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8033bfc:	68fb      	ldr	r3, [r7, #12]
 8033bfe:	2200      	movs	r2, #0
 8033c00:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8033c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8033c04:	683b      	ldr	r3, [r7, #0]
 8033c06:	441a      	add	r2, r3
 8033c08:	68fb      	ldr	r3, [r7, #12]
 8033c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8033c0c:	429a      	cmp	r2, r3
 8033c0e:	d907      	bls.n	8033c20 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8033c10:	68fb      	ldr	r3, [r7, #12]
 8033c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033c14:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8033c18:	68fb      	ldr	r3, [r7, #12]
 8033c1a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8033c1c:	2301      	movs	r3, #1
 8033c1e:	e14d      	b.n	8033ebc <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8033c20:	68fb      	ldr	r3, [r7, #12]
 8033c22:	2203      	movs	r2, #3
 8033c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8033c28:	68fb      	ldr	r3, [r7, #12]
 8033c2a:	681b      	ldr	r3, [r3, #0]
 8033c2c:	2200      	movs	r2, #0
 8033c2e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8033c30:	68fb      	ldr	r3, [r7, #12]
 8033c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033c34:	2b01      	cmp	r3, #1
 8033c36:	d002      	beq.n	8033c3e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8033c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8033c3a:	025b      	lsls	r3, r3, #9
 8033c3c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8033c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8033c42:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8033c44:	683b      	ldr	r3, [r7, #0]
 8033c46:	025b      	lsls	r3, r3, #9
 8033c48:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8033c4a:	2390      	movs	r3, #144	; 0x90
 8033c4c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8033c4e:	2300      	movs	r3, #0
 8033c50:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8033c52:	2300      	movs	r3, #0
 8033c54:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8033c56:	2301      	movs	r3, #1
 8033c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8033c5a:	68fb      	ldr	r3, [r7, #12]
 8033c5c:	681b      	ldr	r3, [r3, #0]
 8033c5e:	f107 0218 	add.w	r2, r7, #24
 8033c62:	4611      	mov	r1, r2
 8033c64:	4618      	mov	r0, r3
 8033c66:	f002 f8f1 	bl	8035e4c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8033c6a:	683b      	ldr	r3, [r7, #0]
 8033c6c:	2b01      	cmp	r3, #1
 8033c6e:	d90a      	bls.n	8033c86 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8033c70:	68fb      	ldr	r3, [r7, #12]
 8033c72:	2220      	movs	r2, #32
 8033c74:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8033c76:	68fb      	ldr	r3, [r7, #12]
 8033c78:	681b      	ldr	r3, [r3, #0]
 8033c7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8033c7c:	4618      	mov	r0, r3
 8033c7e:	f002 f999 	bl	8035fb4 <SDMMC_CmdWriteMultiBlock>
 8033c82:	6478      	str	r0, [r7, #68]	; 0x44
 8033c84:	e009      	b.n	8033c9a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8033c86:	68fb      	ldr	r3, [r7, #12]
 8033c88:	2210      	movs	r2, #16
 8033c8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8033c8c:	68fb      	ldr	r3, [r7, #12]
 8033c8e:	681b      	ldr	r3, [r3, #0]
 8033c90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8033c92:	4618      	mov	r0, r3
 8033c94:	f002 f96c 	bl	8035f70 <SDMMC_CmdWriteSingleBlock>
 8033c98:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8033c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8033c9c:	2b00      	cmp	r3, #0
 8033c9e:	d012      	beq.n	8033cc6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8033ca0:	68fb      	ldr	r3, [r7, #12]
 8033ca2:	681b      	ldr	r3, [r3, #0]
 8033ca4:	4a87      	ldr	r2, [pc, #540]	; (8033ec4 <HAL_SD_WriteBlocks+0x308>)
 8033ca6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8033ca8:	68fb      	ldr	r3, [r7, #12]
 8033caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8033cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8033cae:	431a      	orrs	r2, r3
 8033cb0:	68fb      	ldr	r3, [r7, #12]
 8033cb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8033cb4:	68fb      	ldr	r3, [r7, #12]
 8033cb6:	2201      	movs	r2, #1
 8033cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8033cbc:	68fb      	ldr	r3, [r7, #12]
 8033cbe:	2200      	movs	r2, #0
 8033cc0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8033cc2:	2301      	movs	r3, #1
 8033cc4:	e0fa      	b.n	8033ebc <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8033cc6:	69fb      	ldr	r3, [r7, #28]
 8033cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8033cca:	e065      	b.n	8033d98 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8033ccc:	68fb      	ldr	r3, [r7, #12]
 8033cce:	681b      	ldr	r3, [r3, #0]
 8033cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8033cd6:	2b00      	cmp	r3, #0
 8033cd8:	d040      	beq.n	8033d5c <HAL_SD_WriteBlocks+0x1a0>
 8033cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033cdc:	2b00      	cmp	r3, #0
 8033cde:	d03d      	beq.n	8033d5c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8033ce0:	2300      	movs	r3, #0
 8033ce2:	643b      	str	r3, [r7, #64]	; 0x40
 8033ce4:	e037      	b.n	8033d56 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8033ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033ce8:	781b      	ldrb	r3, [r3, #0]
 8033cea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8033cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033cee:	3301      	adds	r3, #1
 8033cf0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8033cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033cf4:	3b01      	subs	r3, #1
 8033cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8033cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033cfa:	781b      	ldrb	r3, [r3, #0]
 8033cfc:	021a      	lsls	r2, r3, #8
 8033cfe:	697b      	ldr	r3, [r7, #20]
 8033d00:	4313      	orrs	r3, r2
 8033d02:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8033d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033d06:	3301      	adds	r3, #1
 8033d08:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8033d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033d0c:	3b01      	subs	r3, #1
 8033d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8033d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033d12:	781b      	ldrb	r3, [r3, #0]
 8033d14:	041a      	lsls	r2, r3, #16
 8033d16:	697b      	ldr	r3, [r7, #20]
 8033d18:	4313      	orrs	r3, r2
 8033d1a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8033d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033d1e:	3301      	adds	r3, #1
 8033d20:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8033d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033d24:	3b01      	subs	r3, #1
 8033d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8033d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033d2a:	781b      	ldrb	r3, [r3, #0]
 8033d2c:	061a      	lsls	r2, r3, #24
 8033d2e:	697b      	ldr	r3, [r7, #20]
 8033d30:	4313      	orrs	r3, r2
 8033d32:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8033d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8033d36:	3301      	adds	r3, #1
 8033d38:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8033d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8033d3c:	3b01      	subs	r3, #1
 8033d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8033d40:	68fb      	ldr	r3, [r7, #12]
 8033d42:	681b      	ldr	r3, [r3, #0]
 8033d44:	f107 0214 	add.w	r2, r7, #20
 8033d48:	4611      	mov	r1, r2
 8033d4a:	4618      	mov	r0, r3
 8033d4c:	f002 f806 	bl	8035d5c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8033d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8033d52:	3301      	adds	r3, #1
 8033d54:	643b      	str	r3, [r7, #64]	; 0x40
 8033d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8033d58:	2b07      	cmp	r3, #7
 8033d5a:	d9c4      	bls.n	8033ce6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8033d5c:	f7fe f9cc 	bl	80320f8 <HAL_GetTick>
 8033d60:	4602      	mov	r2, r0
 8033d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8033d64:	1ad3      	subs	r3, r2, r3
 8033d66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8033d68:	429a      	cmp	r2, r3
 8033d6a:	d902      	bls.n	8033d72 <HAL_SD_WriteBlocks+0x1b6>
 8033d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8033d6e:	2b00      	cmp	r3, #0
 8033d70:	d112      	bne.n	8033d98 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8033d72:	68fb      	ldr	r3, [r7, #12]
 8033d74:	681b      	ldr	r3, [r3, #0]
 8033d76:	4a53      	ldr	r2, [pc, #332]	; (8033ec4 <HAL_SD_WriteBlocks+0x308>)
 8033d78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8033d7a:	68fb      	ldr	r3, [r7, #12]
 8033d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8033d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8033d80:	431a      	orrs	r2, r3
 8033d82:	68fb      	ldr	r3, [r7, #12]
 8033d84:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8033d86:	68fb      	ldr	r3, [r7, #12]
 8033d88:	2201      	movs	r2, #1
 8033d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8033d8e:	68fb      	ldr	r3, [r7, #12]
 8033d90:	2200      	movs	r2, #0
 8033d92:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8033d94:	2303      	movs	r3, #3
 8033d96:	e091      	b.n	8033ebc <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8033d98:	68fb      	ldr	r3, [r7, #12]
 8033d9a:	681b      	ldr	r3, [r3, #0]
 8033d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8033d9e:	f240 331a 	movw	r3, #794	; 0x31a
 8033da2:	4013      	ands	r3, r2
 8033da4:	2b00      	cmp	r3, #0
 8033da6:	d091      	beq.n	8033ccc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8033da8:	68fb      	ldr	r3, [r7, #12]
 8033daa:	681b      	ldr	r3, [r3, #0]
 8033dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8033db2:	2b00      	cmp	r3, #0
 8033db4:	d022      	beq.n	8033dfc <HAL_SD_WriteBlocks+0x240>
 8033db6:	683b      	ldr	r3, [r7, #0]
 8033db8:	2b01      	cmp	r3, #1
 8033dba:	d91f      	bls.n	8033dfc <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8033dbc:	68fb      	ldr	r3, [r7, #12]
 8033dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033dc0:	2b03      	cmp	r3, #3
 8033dc2:	d01b      	beq.n	8033dfc <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8033dc4:	68fb      	ldr	r3, [r7, #12]
 8033dc6:	681b      	ldr	r3, [r3, #0]
 8033dc8:	4618      	mov	r0, r3
 8033dca:	f002 f915 	bl	8035ff8 <SDMMC_CmdStopTransfer>
 8033dce:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8033dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8033dd2:	2b00      	cmp	r3, #0
 8033dd4:	d012      	beq.n	8033dfc <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8033dd6:	68fb      	ldr	r3, [r7, #12]
 8033dd8:	681b      	ldr	r3, [r3, #0]
 8033dda:	4a3a      	ldr	r2, [pc, #232]	; (8033ec4 <HAL_SD_WriteBlocks+0x308>)
 8033ddc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8033dde:	68fb      	ldr	r3, [r7, #12]
 8033de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8033de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8033de4:	431a      	orrs	r2, r3
 8033de6:	68fb      	ldr	r3, [r7, #12]
 8033de8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8033dea:	68fb      	ldr	r3, [r7, #12]
 8033dec:	2201      	movs	r2, #1
 8033dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8033df2:	68fb      	ldr	r3, [r7, #12]
 8033df4:	2200      	movs	r2, #0
 8033df6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8033df8:	2301      	movs	r3, #1
 8033dfa:	e05f      	b.n	8033ebc <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8033dfc:	68fb      	ldr	r3, [r7, #12]
 8033dfe:	681b      	ldr	r3, [r3, #0]
 8033e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033e02:	f003 0308 	and.w	r3, r3, #8
 8033e06:	2b00      	cmp	r3, #0
 8033e08:	d012      	beq.n	8033e30 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8033e0a:	68fb      	ldr	r3, [r7, #12]
 8033e0c:	681b      	ldr	r3, [r3, #0]
 8033e0e:	4a2d      	ldr	r2, [pc, #180]	; (8033ec4 <HAL_SD_WriteBlocks+0x308>)
 8033e10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8033e12:	68fb      	ldr	r3, [r7, #12]
 8033e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033e16:	f043 0208 	orr.w	r2, r3, #8
 8033e1a:	68fb      	ldr	r3, [r7, #12]
 8033e1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8033e1e:	68fb      	ldr	r3, [r7, #12]
 8033e20:	2201      	movs	r2, #1
 8033e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8033e26:	68fb      	ldr	r3, [r7, #12]
 8033e28:	2200      	movs	r2, #0
 8033e2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8033e2c:	2301      	movs	r3, #1
 8033e2e:	e045      	b.n	8033ebc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8033e30:	68fb      	ldr	r3, [r7, #12]
 8033e32:	681b      	ldr	r3, [r3, #0]
 8033e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033e36:	f003 0302 	and.w	r3, r3, #2
 8033e3a:	2b00      	cmp	r3, #0
 8033e3c:	d012      	beq.n	8033e64 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8033e3e:	68fb      	ldr	r3, [r7, #12]
 8033e40:	681b      	ldr	r3, [r3, #0]
 8033e42:	4a20      	ldr	r2, [pc, #128]	; (8033ec4 <HAL_SD_WriteBlocks+0x308>)
 8033e44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8033e46:	68fb      	ldr	r3, [r7, #12]
 8033e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033e4a:	f043 0202 	orr.w	r2, r3, #2
 8033e4e:	68fb      	ldr	r3, [r7, #12]
 8033e50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8033e52:	68fb      	ldr	r3, [r7, #12]
 8033e54:	2201      	movs	r2, #1
 8033e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8033e5a:	68fb      	ldr	r3, [r7, #12]
 8033e5c:	2200      	movs	r2, #0
 8033e5e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8033e60:	2301      	movs	r3, #1
 8033e62:	e02b      	b.n	8033ebc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8033e64:	68fb      	ldr	r3, [r7, #12]
 8033e66:	681b      	ldr	r3, [r3, #0]
 8033e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8033e6a:	f003 0310 	and.w	r3, r3, #16
 8033e6e:	2b00      	cmp	r3, #0
 8033e70:	d012      	beq.n	8033e98 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8033e72:	68fb      	ldr	r3, [r7, #12]
 8033e74:	681b      	ldr	r3, [r3, #0]
 8033e76:	4a13      	ldr	r2, [pc, #76]	; (8033ec4 <HAL_SD_WriteBlocks+0x308>)
 8033e78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8033e7a:	68fb      	ldr	r3, [r7, #12]
 8033e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033e7e:	f043 0210 	orr.w	r2, r3, #16
 8033e82:	68fb      	ldr	r3, [r7, #12]
 8033e84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8033e86:	68fb      	ldr	r3, [r7, #12]
 8033e88:	2201      	movs	r2, #1
 8033e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8033e8e:	68fb      	ldr	r3, [r7, #12]
 8033e90:	2200      	movs	r2, #0
 8033e92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8033e94:	2301      	movs	r3, #1
 8033e96:	e011      	b.n	8033ebc <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8033e98:	68fb      	ldr	r3, [r7, #12]
 8033e9a:	681b      	ldr	r3, [r3, #0]
 8033e9c:	f240 523a 	movw	r2, #1338	; 0x53a
 8033ea0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8033ea2:	68fb      	ldr	r3, [r7, #12]
 8033ea4:	2201      	movs	r2, #1
 8033ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8033eaa:	2300      	movs	r3, #0
 8033eac:	e006      	b.n	8033ebc <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8033eae:	68fb      	ldr	r3, [r7, #12]
 8033eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8033eb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8033eb6:	68fb      	ldr	r3, [r7, #12]
 8033eb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8033eba:	2301      	movs	r3, #1
  }
}
 8033ebc:	4618      	mov	r0, r3
 8033ebe:	3748      	adds	r7, #72	; 0x48
 8033ec0:	46bd      	mov	sp, r7
 8033ec2:	bd80      	pop	{r7, pc}
 8033ec4:	004005ff 	.word	0x004005ff

08033ec8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8033ec8:	b480      	push	{r7}
 8033eca:	b083      	sub	sp, #12
 8033ecc:	af00      	add	r7, sp, #0
 8033ece:	6078      	str	r0, [r7, #4]
 8033ed0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8033ed2:	687b      	ldr	r3, [r7, #4]
 8033ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033ed6:	0f9b      	lsrs	r3, r3, #30
 8033ed8:	b2da      	uxtb	r2, r3
 8033eda:	683b      	ldr	r3, [r7, #0]
 8033edc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8033ede:	687b      	ldr	r3, [r7, #4]
 8033ee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033ee2:	0e9b      	lsrs	r3, r3, #26
 8033ee4:	b2db      	uxtb	r3, r3
 8033ee6:	f003 030f 	and.w	r3, r3, #15
 8033eea:	b2da      	uxtb	r2, r3
 8033eec:	683b      	ldr	r3, [r7, #0]
 8033eee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8033ef0:	687b      	ldr	r3, [r7, #4]
 8033ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033ef4:	0e1b      	lsrs	r3, r3, #24
 8033ef6:	b2db      	uxtb	r3, r3
 8033ef8:	f003 0303 	and.w	r3, r3, #3
 8033efc:	b2da      	uxtb	r2, r3
 8033efe:	683b      	ldr	r3, [r7, #0]
 8033f00:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8033f02:	687b      	ldr	r3, [r7, #4]
 8033f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033f06:	0c1b      	lsrs	r3, r3, #16
 8033f08:	b2da      	uxtb	r2, r3
 8033f0a:	683b      	ldr	r3, [r7, #0]
 8033f0c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8033f0e:	687b      	ldr	r3, [r7, #4]
 8033f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033f12:	0a1b      	lsrs	r3, r3, #8
 8033f14:	b2da      	uxtb	r2, r3
 8033f16:	683b      	ldr	r3, [r7, #0]
 8033f18:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8033f1a:	687b      	ldr	r3, [r7, #4]
 8033f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8033f1e:	b2da      	uxtb	r2, r3
 8033f20:	683b      	ldr	r3, [r7, #0]
 8033f22:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8033f24:	687b      	ldr	r3, [r7, #4]
 8033f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8033f28:	0d1b      	lsrs	r3, r3, #20
 8033f2a:	b29a      	uxth	r2, r3
 8033f2c:	683b      	ldr	r3, [r7, #0]
 8033f2e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8033f30:	687b      	ldr	r3, [r7, #4]
 8033f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8033f34:	0c1b      	lsrs	r3, r3, #16
 8033f36:	b2db      	uxtb	r3, r3
 8033f38:	f003 030f 	and.w	r3, r3, #15
 8033f3c:	b2da      	uxtb	r2, r3
 8033f3e:	683b      	ldr	r3, [r7, #0]
 8033f40:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8033f42:	687b      	ldr	r3, [r7, #4]
 8033f44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8033f46:	0bdb      	lsrs	r3, r3, #15
 8033f48:	b2db      	uxtb	r3, r3
 8033f4a:	f003 0301 	and.w	r3, r3, #1
 8033f4e:	b2da      	uxtb	r2, r3
 8033f50:	683b      	ldr	r3, [r7, #0]
 8033f52:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8033f54:	687b      	ldr	r3, [r7, #4]
 8033f56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8033f58:	0b9b      	lsrs	r3, r3, #14
 8033f5a:	b2db      	uxtb	r3, r3
 8033f5c:	f003 0301 	and.w	r3, r3, #1
 8033f60:	b2da      	uxtb	r2, r3
 8033f62:	683b      	ldr	r3, [r7, #0]
 8033f64:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8033f66:	687b      	ldr	r3, [r7, #4]
 8033f68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8033f6a:	0b5b      	lsrs	r3, r3, #13
 8033f6c:	b2db      	uxtb	r3, r3
 8033f6e:	f003 0301 	and.w	r3, r3, #1
 8033f72:	b2da      	uxtb	r2, r3
 8033f74:	683b      	ldr	r3, [r7, #0]
 8033f76:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8033f78:	687b      	ldr	r3, [r7, #4]
 8033f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8033f7c:	0b1b      	lsrs	r3, r3, #12
 8033f7e:	b2db      	uxtb	r3, r3
 8033f80:	f003 0301 	and.w	r3, r3, #1
 8033f84:	b2da      	uxtb	r2, r3
 8033f86:	683b      	ldr	r3, [r7, #0]
 8033f88:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8033f8a:	683b      	ldr	r3, [r7, #0]
 8033f8c:	2200      	movs	r2, #0
 8033f8e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8033f90:	687b      	ldr	r3, [r7, #4]
 8033f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8033f94:	2b00      	cmp	r3, #0
 8033f96:	d163      	bne.n	8034060 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8033f98:	687b      	ldr	r3, [r7, #4]
 8033f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8033f9c:	009a      	lsls	r2, r3, #2
 8033f9e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8033fa2:	4013      	ands	r3, r2
 8033fa4:	687a      	ldr	r2, [r7, #4]
 8033fa6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8033fa8:	0f92      	lsrs	r2, r2, #30
 8033faa:	431a      	orrs	r2, r3
 8033fac:	683b      	ldr	r3, [r7, #0]
 8033fae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8033fb0:	687b      	ldr	r3, [r7, #4]
 8033fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033fb4:	0edb      	lsrs	r3, r3, #27
 8033fb6:	b2db      	uxtb	r3, r3
 8033fb8:	f003 0307 	and.w	r3, r3, #7
 8033fbc:	b2da      	uxtb	r2, r3
 8033fbe:	683b      	ldr	r3, [r7, #0]
 8033fc0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8033fc2:	687b      	ldr	r3, [r7, #4]
 8033fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033fc6:	0e1b      	lsrs	r3, r3, #24
 8033fc8:	b2db      	uxtb	r3, r3
 8033fca:	f003 0307 	and.w	r3, r3, #7
 8033fce:	b2da      	uxtb	r2, r3
 8033fd0:	683b      	ldr	r3, [r7, #0]
 8033fd2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8033fd4:	687b      	ldr	r3, [r7, #4]
 8033fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033fd8:	0d5b      	lsrs	r3, r3, #21
 8033fda:	b2db      	uxtb	r3, r3
 8033fdc:	f003 0307 	and.w	r3, r3, #7
 8033fe0:	b2da      	uxtb	r2, r3
 8033fe2:	683b      	ldr	r3, [r7, #0]
 8033fe4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8033fe6:	687b      	ldr	r3, [r7, #4]
 8033fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033fea:	0c9b      	lsrs	r3, r3, #18
 8033fec:	b2db      	uxtb	r3, r3
 8033fee:	f003 0307 	and.w	r3, r3, #7
 8033ff2:	b2da      	uxtb	r2, r3
 8033ff4:	683b      	ldr	r3, [r7, #0]
 8033ff6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8033ff8:	687b      	ldr	r3, [r7, #4]
 8033ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8033ffc:	0bdb      	lsrs	r3, r3, #15
 8033ffe:	b2db      	uxtb	r3, r3
 8034000:	f003 0307 	and.w	r3, r3, #7
 8034004:	b2da      	uxtb	r2, r3
 8034006:	683b      	ldr	r3, [r7, #0]
 8034008:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 803400a:	683b      	ldr	r3, [r7, #0]
 803400c:	691b      	ldr	r3, [r3, #16]
 803400e:	1c5a      	adds	r2, r3, #1
 8034010:	687b      	ldr	r3, [r7, #4]
 8034012:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8034014:	683b      	ldr	r3, [r7, #0]
 8034016:	7e1b      	ldrb	r3, [r3, #24]
 8034018:	b2db      	uxtb	r3, r3
 803401a:	f003 0307 	and.w	r3, r3, #7
 803401e:	3302      	adds	r3, #2
 8034020:	2201      	movs	r2, #1
 8034022:	fa02 f303 	lsl.w	r3, r2, r3
 8034026:	687a      	ldr	r2, [r7, #4]
 8034028:	6d52      	ldr	r2, [r2, #84]	; 0x54
 803402a:	fb02 f203 	mul.w	r2, r2, r3
 803402e:	687b      	ldr	r3, [r7, #4]
 8034030:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8034032:	683b      	ldr	r3, [r7, #0]
 8034034:	7a1b      	ldrb	r3, [r3, #8]
 8034036:	b2db      	uxtb	r3, r3
 8034038:	f003 030f 	and.w	r3, r3, #15
 803403c:	2201      	movs	r2, #1
 803403e:	409a      	lsls	r2, r3
 8034040:	687b      	ldr	r3, [r7, #4]
 8034042:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8034044:	687b      	ldr	r3, [r7, #4]
 8034046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8034048:	687a      	ldr	r2, [r7, #4]
 803404a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 803404c:	0a52      	lsrs	r2, r2, #9
 803404e:	fb02 f203 	mul.w	r2, r2, r3
 8034052:	687b      	ldr	r3, [r7, #4]
 8034054:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8034056:	687b      	ldr	r3, [r7, #4]
 8034058:	f44f 7200 	mov.w	r2, #512	; 0x200
 803405c:	661a      	str	r2, [r3, #96]	; 0x60
 803405e:	e031      	b.n	80340c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8034060:	687b      	ldr	r3, [r7, #4]
 8034062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034064:	2b01      	cmp	r3, #1
 8034066:	d11d      	bne.n	80340a4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8034068:	687b      	ldr	r3, [r7, #4]
 803406a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 803406c:	041b      	lsls	r3, r3, #16
 803406e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8034072:	687b      	ldr	r3, [r7, #4]
 8034074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8034076:	0c1b      	lsrs	r3, r3, #16
 8034078:	431a      	orrs	r2, r3
 803407a:	683b      	ldr	r3, [r7, #0]
 803407c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 803407e:	683b      	ldr	r3, [r7, #0]
 8034080:	691b      	ldr	r3, [r3, #16]
 8034082:	3301      	adds	r3, #1
 8034084:	029a      	lsls	r2, r3, #10
 8034086:	687b      	ldr	r3, [r7, #4]
 8034088:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 803408a:	687b      	ldr	r3, [r7, #4]
 803408c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 803408e:	687b      	ldr	r3, [r7, #4]
 8034090:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8034092:	687b      	ldr	r3, [r7, #4]
 8034094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8034098:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 803409a:	687b      	ldr	r3, [r7, #4]
 803409c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 803409e:	687b      	ldr	r3, [r7, #4]
 80340a0:	661a      	str	r2, [r3, #96]	; 0x60
 80340a2:	e00f      	b.n	80340c4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80340a4:	687b      	ldr	r3, [r7, #4]
 80340a6:	681b      	ldr	r3, [r3, #0]
 80340a8:	4a58      	ldr	r2, [pc, #352]	; (803420c <HAL_SD_GetCardCSD+0x344>)
 80340aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80340ac:	687b      	ldr	r3, [r7, #4]
 80340ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80340b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80340b4:	687b      	ldr	r3, [r7, #4]
 80340b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80340b8:	687b      	ldr	r3, [r7, #4]
 80340ba:	2201      	movs	r2, #1
 80340bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80340c0:	2301      	movs	r3, #1
 80340c2:	e09d      	b.n	8034200 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80340c4:	687b      	ldr	r3, [r7, #4]
 80340c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80340c8:	0b9b      	lsrs	r3, r3, #14
 80340ca:	b2db      	uxtb	r3, r3
 80340cc:	f003 0301 	and.w	r3, r3, #1
 80340d0:	b2da      	uxtb	r2, r3
 80340d2:	683b      	ldr	r3, [r7, #0]
 80340d4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80340d6:	687b      	ldr	r3, [r7, #4]
 80340d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80340da:	09db      	lsrs	r3, r3, #7
 80340dc:	b2db      	uxtb	r3, r3
 80340de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80340e2:	b2da      	uxtb	r2, r3
 80340e4:	683b      	ldr	r3, [r7, #0]
 80340e6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80340e8:	687b      	ldr	r3, [r7, #4]
 80340ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80340ec:	b2db      	uxtb	r3, r3
 80340ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80340f2:	b2da      	uxtb	r2, r3
 80340f4:	683b      	ldr	r3, [r7, #0]
 80340f6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80340f8:	687b      	ldr	r3, [r7, #4]
 80340fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80340fc:	0fdb      	lsrs	r3, r3, #31
 80340fe:	b2da      	uxtb	r2, r3
 8034100:	683b      	ldr	r3, [r7, #0]
 8034102:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8034104:	687b      	ldr	r3, [r7, #4]
 8034106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034108:	0f5b      	lsrs	r3, r3, #29
 803410a:	b2db      	uxtb	r3, r3
 803410c:	f003 0303 	and.w	r3, r3, #3
 8034110:	b2da      	uxtb	r2, r3
 8034112:	683b      	ldr	r3, [r7, #0]
 8034114:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8034116:	687b      	ldr	r3, [r7, #4]
 8034118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803411a:	0e9b      	lsrs	r3, r3, #26
 803411c:	b2db      	uxtb	r3, r3
 803411e:	f003 0307 	and.w	r3, r3, #7
 8034122:	b2da      	uxtb	r2, r3
 8034124:	683b      	ldr	r3, [r7, #0]
 8034126:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8034128:	687b      	ldr	r3, [r7, #4]
 803412a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803412c:	0d9b      	lsrs	r3, r3, #22
 803412e:	b2db      	uxtb	r3, r3
 8034130:	f003 030f 	and.w	r3, r3, #15
 8034134:	b2da      	uxtb	r2, r3
 8034136:	683b      	ldr	r3, [r7, #0]
 8034138:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 803413a:	687b      	ldr	r3, [r7, #4]
 803413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803413e:	0d5b      	lsrs	r3, r3, #21
 8034140:	b2db      	uxtb	r3, r3
 8034142:	f003 0301 	and.w	r3, r3, #1
 8034146:	b2da      	uxtb	r2, r3
 8034148:	683b      	ldr	r3, [r7, #0]
 803414a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 803414e:	683b      	ldr	r3, [r7, #0]
 8034150:	2200      	movs	r2, #0
 8034152:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8034156:	687b      	ldr	r3, [r7, #4]
 8034158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803415a:	0c1b      	lsrs	r3, r3, #16
 803415c:	b2db      	uxtb	r3, r3
 803415e:	f003 0301 	and.w	r3, r3, #1
 8034162:	b2da      	uxtb	r2, r3
 8034164:	683b      	ldr	r3, [r7, #0]
 8034166:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 803416a:	687b      	ldr	r3, [r7, #4]
 803416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 803416e:	0bdb      	lsrs	r3, r3, #15
 8034170:	b2db      	uxtb	r3, r3
 8034172:	f003 0301 	and.w	r3, r3, #1
 8034176:	b2da      	uxtb	r2, r3
 8034178:	683b      	ldr	r3, [r7, #0]
 803417a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 803417e:	687b      	ldr	r3, [r7, #4]
 8034180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034182:	0b9b      	lsrs	r3, r3, #14
 8034184:	b2db      	uxtb	r3, r3
 8034186:	f003 0301 	and.w	r3, r3, #1
 803418a:	b2da      	uxtb	r2, r3
 803418c:	683b      	ldr	r3, [r7, #0]
 803418e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8034192:	687b      	ldr	r3, [r7, #4]
 8034194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8034196:	0b5b      	lsrs	r3, r3, #13
 8034198:	b2db      	uxtb	r3, r3
 803419a:	f003 0301 	and.w	r3, r3, #1
 803419e:	b2da      	uxtb	r2, r3
 80341a0:	683b      	ldr	r3, [r7, #0]
 80341a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80341a6:	687b      	ldr	r3, [r7, #4]
 80341a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80341aa:	0b1b      	lsrs	r3, r3, #12
 80341ac:	b2db      	uxtb	r3, r3
 80341ae:	f003 0301 	and.w	r3, r3, #1
 80341b2:	b2da      	uxtb	r2, r3
 80341b4:	683b      	ldr	r3, [r7, #0]
 80341b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80341ba:	687b      	ldr	r3, [r7, #4]
 80341bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80341be:	0a9b      	lsrs	r3, r3, #10
 80341c0:	b2db      	uxtb	r3, r3
 80341c2:	f003 0303 	and.w	r3, r3, #3
 80341c6:	b2da      	uxtb	r2, r3
 80341c8:	683b      	ldr	r3, [r7, #0]
 80341ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80341ce:	687b      	ldr	r3, [r7, #4]
 80341d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80341d2:	0a1b      	lsrs	r3, r3, #8
 80341d4:	b2db      	uxtb	r3, r3
 80341d6:	f003 0303 	and.w	r3, r3, #3
 80341da:	b2da      	uxtb	r2, r3
 80341dc:	683b      	ldr	r3, [r7, #0]
 80341de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80341e2:	687b      	ldr	r3, [r7, #4]
 80341e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80341e6:	085b      	lsrs	r3, r3, #1
 80341e8:	b2db      	uxtb	r3, r3
 80341ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80341ee:	b2da      	uxtb	r2, r3
 80341f0:	683b      	ldr	r3, [r7, #0]
 80341f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80341f6:	683b      	ldr	r3, [r7, #0]
 80341f8:	2201      	movs	r2, #1
 80341fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80341fe:	2300      	movs	r3, #0
}
 8034200:	4618      	mov	r0, r3
 8034202:	370c      	adds	r7, #12
 8034204:	46bd      	mov	sp, r7
 8034206:	f85d 7b04 	ldr.w	r7, [sp], #4
 803420a:	4770      	bx	lr
 803420c:	004005ff 	.word	0x004005ff

08034210 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8034210:	b480      	push	{r7}
 8034212:	b083      	sub	sp, #12
 8034214:	af00      	add	r7, sp, #0
 8034216:	6078      	str	r0, [r7, #4]
 8034218:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 803421a:	687b      	ldr	r3, [r7, #4]
 803421c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 803421e:	683b      	ldr	r3, [r7, #0]
 8034220:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8034222:	687b      	ldr	r3, [r7, #4]
 8034224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8034226:	683b      	ldr	r3, [r7, #0]
 8034228:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 803422a:	687b      	ldr	r3, [r7, #4]
 803422c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 803422e:	683b      	ldr	r3, [r7, #0]
 8034230:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8034232:	687b      	ldr	r3, [r7, #4]
 8034234:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8034236:	683b      	ldr	r3, [r7, #0]
 8034238:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 803423a:	687b      	ldr	r3, [r7, #4]
 803423c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 803423e:	683b      	ldr	r3, [r7, #0]
 8034240:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8034242:	687b      	ldr	r3, [r7, #4]
 8034244:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8034246:	683b      	ldr	r3, [r7, #0]
 8034248:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 803424a:	687b      	ldr	r3, [r7, #4]
 803424c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 803424e:	683b      	ldr	r3, [r7, #0]
 8034250:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8034252:	687b      	ldr	r3, [r7, #4]
 8034254:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8034256:	683b      	ldr	r3, [r7, #0]
 8034258:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 803425a:	2300      	movs	r3, #0
}
 803425c:	4618      	mov	r0, r3
 803425e:	370c      	adds	r7, #12
 8034260:	46bd      	mov	sp, r7
 8034262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034266:	4770      	bx	lr

08034268 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8034268:	b580      	push	{r7, lr}
 803426a:	b086      	sub	sp, #24
 803426c:	af00      	add	r7, sp, #0
 803426e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8034270:	2300      	movs	r3, #0
 8034272:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8034274:	f107 030c 	add.w	r3, r7, #12
 8034278:	4619      	mov	r1, r3
 803427a:	6878      	ldr	r0, [r7, #4]
 803427c:	f000 f96e 	bl	803455c <SD_SendStatus>
 8034280:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8034282:	697b      	ldr	r3, [r7, #20]
 8034284:	2b00      	cmp	r3, #0
 8034286:	d005      	beq.n	8034294 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8034288:	687b      	ldr	r3, [r7, #4]
 803428a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 803428c:	697b      	ldr	r3, [r7, #20]
 803428e:	431a      	orrs	r2, r3
 8034290:	687b      	ldr	r3, [r7, #4]
 8034292:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8034294:	68fb      	ldr	r3, [r7, #12]
 8034296:	0a5b      	lsrs	r3, r3, #9
 8034298:	f003 030f 	and.w	r3, r3, #15
 803429c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 803429e:	693b      	ldr	r3, [r7, #16]
}
 80342a0:	4618      	mov	r0, r3
 80342a2:	3718      	adds	r7, #24
 80342a4:	46bd      	mov	sp, r7
 80342a6:	bd80      	pop	{r7, pc}

080342a8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80342a8:	b5b0      	push	{r4, r5, r7, lr}
 80342aa:	b094      	sub	sp, #80	; 0x50
 80342ac:	af04      	add	r7, sp, #16
 80342ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80342b0:	2301      	movs	r3, #1
 80342b2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80342b4:	687b      	ldr	r3, [r7, #4]
 80342b6:	681b      	ldr	r3, [r3, #0]
 80342b8:	4618      	mov	r0, r3
 80342ba:	f001 fd6f 	bl	8035d9c <SDIO_GetPowerState>
 80342be:	4603      	mov	r3, r0
 80342c0:	2b00      	cmp	r3, #0
 80342c2:	d102      	bne.n	80342ca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80342c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80342c8:	e0b6      	b.n	8034438 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80342ca:	687b      	ldr	r3, [r7, #4]
 80342cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80342ce:	2b03      	cmp	r3, #3
 80342d0:	d02f      	beq.n	8034332 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80342d2:	687b      	ldr	r3, [r7, #4]
 80342d4:	681b      	ldr	r3, [r3, #0]
 80342d6:	4618      	mov	r0, r3
 80342d8:	f001 ff55 	bl	8036186 <SDMMC_CmdSendCID>
 80342dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80342de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80342e0:	2b00      	cmp	r3, #0
 80342e2:	d001      	beq.n	80342e8 <SD_InitCard+0x40>
    {
      return errorstate;
 80342e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80342e6:	e0a7      	b.n	8034438 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80342e8:	687b      	ldr	r3, [r7, #4]
 80342ea:	681b      	ldr	r3, [r3, #0]
 80342ec:	2100      	movs	r1, #0
 80342ee:	4618      	mov	r0, r3
 80342f0:	f001 fd99 	bl	8035e26 <SDIO_GetResponse>
 80342f4:	4602      	mov	r2, r0
 80342f6:	687b      	ldr	r3, [r7, #4]
 80342f8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80342fa:	687b      	ldr	r3, [r7, #4]
 80342fc:	681b      	ldr	r3, [r3, #0]
 80342fe:	2104      	movs	r1, #4
 8034300:	4618      	mov	r0, r3
 8034302:	f001 fd90 	bl	8035e26 <SDIO_GetResponse>
 8034306:	4602      	mov	r2, r0
 8034308:	687b      	ldr	r3, [r7, #4]
 803430a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 803430c:	687b      	ldr	r3, [r7, #4]
 803430e:	681b      	ldr	r3, [r3, #0]
 8034310:	2108      	movs	r1, #8
 8034312:	4618      	mov	r0, r3
 8034314:	f001 fd87 	bl	8035e26 <SDIO_GetResponse>
 8034318:	4602      	mov	r2, r0
 803431a:	687b      	ldr	r3, [r7, #4]
 803431c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 803431e:	687b      	ldr	r3, [r7, #4]
 8034320:	681b      	ldr	r3, [r3, #0]
 8034322:	210c      	movs	r1, #12
 8034324:	4618      	mov	r0, r3
 8034326:	f001 fd7e 	bl	8035e26 <SDIO_GetResponse>
 803432a:	4602      	mov	r2, r0
 803432c:	687b      	ldr	r3, [r7, #4]
 803432e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8034332:	687b      	ldr	r3, [r7, #4]
 8034334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8034336:	2b03      	cmp	r3, #3
 8034338:	d00d      	beq.n	8034356 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 803433a:	687b      	ldr	r3, [r7, #4]
 803433c:	681b      	ldr	r3, [r3, #0]
 803433e:	f107 020e 	add.w	r2, r7, #14
 8034342:	4611      	mov	r1, r2
 8034344:	4618      	mov	r0, r3
 8034346:	f001 ff5b 	bl	8036200 <SDMMC_CmdSetRelAdd>
 803434a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 803434c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803434e:	2b00      	cmp	r3, #0
 8034350:	d001      	beq.n	8034356 <SD_InitCard+0xae>
    {
      return errorstate;
 8034352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034354:	e070      	b.n	8034438 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8034356:	687b      	ldr	r3, [r7, #4]
 8034358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 803435a:	2b03      	cmp	r3, #3
 803435c:	d036      	beq.n	80343cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 803435e:	89fb      	ldrh	r3, [r7, #14]
 8034360:	461a      	mov	r2, r3
 8034362:	687b      	ldr	r3, [r7, #4]
 8034364:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8034366:	687b      	ldr	r3, [r7, #4]
 8034368:	681a      	ldr	r2, [r3, #0]
 803436a:	687b      	ldr	r3, [r7, #4]
 803436c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803436e:	041b      	lsls	r3, r3, #16
 8034370:	4619      	mov	r1, r3
 8034372:	4610      	mov	r0, r2
 8034374:	f001 ff25 	bl	80361c2 <SDMMC_CmdSendCSD>
 8034378:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 803437a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 803437c:	2b00      	cmp	r3, #0
 803437e:	d001      	beq.n	8034384 <SD_InitCard+0xdc>
    {
      return errorstate;
 8034380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034382:	e059      	b.n	8034438 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8034384:	687b      	ldr	r3, [r7, #4]
 8034386:	681b      	ldr	r3, [r3, #0]
 8034388:	2100      	movs	r1, #0
 803438a:	4618      	mov	r0, r3
 803438c:	f001 fd4b 	bl	8035e26 <SDIO_GetResponse>
 8034390:	4602      	mov	r2, r0
 8034392:	687b      	ldr	r3, [r7, #4]
 8034394:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8034396:	687b      	ldr	r3, [r7, #4]
 8034398:	681b      	ldr	r3, [r3, #0]
 803439a:	2104      	movs	r1, #4
 803439c:	4618      	mov	r0, r3
 803439e:	f001 fd42 	bl	8035e26 <SDIO_GetResponse>
 80343a2:	4602      	mov	r2, r0
 80343a4:	687b      	ldr	r3, [r7, #4]
 80343a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80343a8:	687b      	ldr	r3, [r7, #4]
 80343aa:	681b      	ldr	r3, [r3, #0]
 80343ac:	2108      	movs	r1, #8
 80343ae:	4618      	mov	r0, r3
 80343b0:	f001 fd39 	bl	8035e26 <SDIO_GetResponse>
 80343b4:	4602      	mov	r2, r0
 80343b6:	687b      	ldr	r3, [r7, #4]
 80343b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80343ba:	687b      	ldr	r3, [r7, #4]
 80343bc:	681b      	ldr	r3, [r3, #0]
 80343be:	210c      	movs	r1, #12
 80343c0:	4618      	mov	r0, r3
 80343c2:	f001 fd30 	bl	8035e26 <SDIO_GetResponse>
 80343c6:	4602      	mov	r2, r0
 80343c8:	687b      	ldr	r3, [r7, #4]
 80343ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80343cc:	687b      	ldr	r3, [r7, #4]
 80343ce:	681b      	ldr	r3, [r3, #0]
 80343d0:	2104      	movs	r1, #4
 80343d2:	4618      	mov	r0, r3
 80343d4:	f001 fd27 	bl	8035e26 <SDIO_GetResponse>
 80343d8:	4603      	mov	r3, r0
 80343da:	0d1a      	lsrs	r2, r3, #20
 80343dc:	687b      	ldr	r3, [r7, #4]
 80343de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80343e0:	f107 0310 	add.w	r3, r7, #16
 80343e4:	4619      	mov	r1, r3
 80343e6:	6878      	ldr	r0, [r7, #4]
 80343e8:	f7ff fd6e 	bl	8033ec8 <HAL_SD_GetCardCSD>
 80343ec:	4603      	mov	r3, r0
 80343ee:	2b00      	cmp	r3, #0
 80343f0:	d002      	beq.n	80343f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80343f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80343f6:	e01f      	b.n	8034438 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80343f8:	687b      	ldr	r3, [r7, #4]
 80343fa:	6819      	ldr	r1, [r3, #0]
 80343fc:	687b      	ldr	r3, [r7, #4]
 80343fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8034400:	041b      	lsls	r3, r3, #16
 8034402:	461a      	mov	r2, r3
 8034404:	f04f 0300 	mov.w	r3, #0
 8034408:	4608      	mov	r0, r1
 803440a:	f001 fe17 	bl	803603c <SDMMC_CmdSelDesel>
 803440e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8034410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034412:	2b00      	cmp	r3, #0
 8034414:	d001      	beq.n	803441a <SD_InitCard+0x172>
  {
    return errorstate;
 8034416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8034418:	e00e      	b.n	8034438 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 803441a:	687b      	ldr	r3, [r7, #4]
 803441c:	681d      	ldr	r5, [r3, #0]
 803441e:	687b      	ldr	r3, [r7, #4]
 8034420:	466c      	mov	r4, sp
 8034422:	f103 0210 	add.w	r2, r3, #16
 8034426:	ca07      	ldmia	r2, {r0, r1, r2}
 8034428:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 803442c:	3304      	adds	r3, #4
 803442e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8034430:	4628      	mov	r0, r5
 8034432:	f001 fc5b 	bl	8035cec <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8034436:	2300      	movs	r3, #0
}
 8034438:	4618      	mov	r0, r3
 803443a:	3740      	adds	r7, #64	; 0x40
 803443c:	46bd      	mov	sp, r7
 803443e:	bdb0      	pop	{r4, r5, r7, pc}

08034440 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8034440:	b580      	push	{r7, lr}
 8034442:	b086      	sub	sp, #24
 8034444:	af00      	add	r7, sp, #0
 8034446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8034448:	2300      	movs	r3, #0
 803444a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 803444c:	2300      	movs	r3, #0
 803444e:	617b      	str	r3, [r7, #20]
 8034450:	2300      	movs	r3, #0
 8034452:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8034454:	687b      	ldr	r3, [r7, #4]
 8034456:	681b      	ldr	r3, [r3, #0]
 8034458:	4618      	mov	r0, r3
 803445a:	f001 fe12 	bl	8036082 <SDMMC_CmdGoIdleState>
 803445e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8034460:	68fb      	ldr	r3, [r7, #12]
 8034462:	2b00      	cmp	r3, #0
 8034464:	d001      	beq.n	803446a <SD_PowerON+0x2a>
  {
    return errorstate;
 8034466:	68fb      	ldr	r3, [r7, #12]
 8034468:	e072      	b.n	8034550 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 803446a:	687b      	ldr	r3, [r7, #4]
 803446c:	681b      	ldr	r3, [r3, #0]
 803446e:	4618      	mov	r0, r3
 8034470:	f001 fe25 	bl	80360be <SDMMC_CmdOperCond>
 8034474:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8034476:	68fb      	ldr	r3, [r7, #12]
 8034478:	2b00      	cmp	r3, #0
 803447a:	d00d      	beq.n	8034498 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 803447c:	687b      	ldr	r3, [r7, #4]
 803447e:	2200      	movs	r2, #0
 8034480:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8034482:	687b      	ldr	r3, [r7, #4]
 8034484:	681b      	ldr	r3, [r3, #0]
 8034486:	4618      	mov	r0, r3
 8034488:	f001 fdfb 	bl	8036082 <SDMMC_CmdGoIdleState>
 803448c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 803448e:	68fb      	ldr	r3, [r7, #12]
 8034490:	2b00      	cmp	r3, #0
 8034492:	d004      	beq.n	803449e <SD_PowerON+0x5e>
    {
      return errorstate;
 8034494:	68fb      	ldr	r3, [r7, #12]
 8034496:	e05b      	b.n	8034550 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8034498:	687b      	ldr	r3, [r7, #4]
 803449a:	2201      	movs	r2, #1
 803449c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 803449e:	687b      	ldr	r3, [r7, #4]
 80344a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80344a2:	2b01      	cmp	r3, #1
 80344a4:	d137      	bne.n	8034516 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80344a6:	687b      	ldr	r3, [r7, #4]
 80344a8:	681b      	ldr	r3, [r3, #0]
 80344aa:	2100      	movs	r1, #0
 80344ac:	4618      	mov	r0, r3
 80344ae:	f001 fe25 	bl	80360fc <SDMMC_CmdAppCommand>
 80344b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80344b4:	68fb      	ldr	r3, [r7, #12]
 80344b6:	2b00      	cmp	r3, #0
 80344b8:	d02d      	beq.n	8034516 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80344ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80344be:	e047      	b.n	8034550 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80344c0:	687b      	ldr	r3, [r7, #4]
 80344c2:	681b      	ldr	r3, [r3, #0]
 80344c4:	2100      	movs	r1, #0
 80344c6:	4618      	mov	r0, r3
 80344c8:	f001 fe18 	bl	80360fc <SDMMC_CmdAppCommand>
 80344cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80344ce:	68fb      	ldr	r3, [r7, #12]
 80344d0:	2b00      	cmp	r3, #0
 80344d2:	d001      	beq.n	80344d8 <SD_PowerON+0x98>
    {
      return errorstate;
 80344d4:	68fb      	ldr	r3, [r7, #12]
 80344d6:	e03b      	b.n	8034550 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80344d8:	687b      	ldr	r3, [r7, #4]
 80344da:	681b      	ldr	r3, [r3, #0]
 80344dc:	491e      	ldr	r1, [pc, #120]	; (8034558 <SD_PowerON+0x118>)
 80344de:	4618      	mov	r0, r3
 80344e0:	f001 fe2e 	bl	8036140 <SDMMC_CmdAppOperCommand>
 80344e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80344e6:	68fb      	ldr	r3, [r7, #12]
 80344e8:	2b00      	cmp	r3, #0
 80344ea:	d002      	beq.n	80344f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80344ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80344f0:	e02e      	b.n	8034550 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80344f2:	687b      	ldr	r3, [r7, #4]
 80344f4:	681b      	ldr	r3, [r3, #0]
 80344f6:	2100      	movs	r1, #0
 80344f8:	4618      	mov	r0, r3
 80344fa:	f001 fc94 	bl	8035e26 <SDIO_GetResponse>
 80344fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8034500:	697b      	ldr	r3, [r7, #20]
 8034502:	0fdb      	lsrs	r3, r3, #31
 8034504:	2b01      	cmp	r3, #1
 8034506:	d101      	bne.n	803450c <SD_PowerON+0xcc>
 8034508:	2301      	movs	r3, #1
 803450a:	e000      	b.n	803450e <SD_PowerON+0xce>
 803450c:	2300      	movs	r3, #0
 803450e:	613b      	str	r3, [r7, #16]

    count++;
 8034510:	68bb      	ldr	r3, [r7, #8]
 8034512:	3301      	adds	r3, #1
 8034514:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8034516:	68bb      	ldr	r3, [r7, #8]
 8034518:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 803451c:	4293      	cmp	r3, r2
 803451e:	d802      	bhi.n	8034526 <SD_PowerON+0xe6>
 8034520:	693b      	ldr	r3, [r7, #16]
 8034522:	2b00      	cmp	r3, #0
 8034524:	d0cc      	beq.n	80344c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8034526:	68bb      	ldr	r3, [r7, #8]
 8034528:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 803452c:	4293      	cmp	r3, r2
 803452e:	d902      	bls.n	8034536 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8034530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8034534:	e00c      	b.n	8034550 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8034536:	697b      	ldr	r3, [r7, #20]
 8034538:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 803453c:	2b00      	cmp	r3, #0
 803453e:	d003      	beq.n	8034548 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8034540:	687b      	ldr	r3, [r7, #4]
 8034542:	2201      	movs	r2, #1
 8034544:	645a      	str	r2, [r3, #68]	; 0x44
 8034546:	e002      	b.n	803454e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8034548:	687b      	ldr	r3, [r7, #4]
 803454a:	2200      	movs	r2, #0
 803454c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 803454e:	2300      	movs	r3, #0
}
 8034550:	4618      	mov	r0, r3
 8034552:	3718      	adds	r7, #24
 8034554:	46bd      	mov	sp, r7
 8034556:	bd80      	pop	{r7, pc}
 8034558:	c1100000 	.word	0xc1100000

0803455c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 803455c:	b580      	push	{r7, lr}
 803455e:	b084      	sub	sp, #16
 8034560:	af00      	add	r7, sp, #0
 8034562:	6078      	str	r0, [r7, #4]
 8034564:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8034566:	683b      	ldr	r3, [r7, #0]
 8034568:	2b00      	cmp	r3, #0
 803456a:	d102      	bne.n	8034572 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 803456c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8034570:	e018      	b.n	80345a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8034572:	687b      	ldr	r3, [r7, #4]
 8034574:	681a      	ldr	r2, [r3, #0]
 8034576:	687b      	ldr	r3, [r7, #4]
 8034578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803457a:	041b      	lsls	r3, r3, #16
 803457c:	4619      	mov	r1, r3
 803457e:	4610      	mov	r0, r2
 8034580:	f001 fe5f 	bl	8036242 <SDMMC_CmdSendStatus>
 8034584:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8034586:	68fb      	ldr	r3, [r7, #12]
 8034588:	2b00      	cmp	r3, #0
 803458a:	d001      	beq.n	8034590 <SD_SendStatus+0x34>
  {
    return errorstate;
 803458c:	68fb      	ldr	r3, [r7, #12]
 803458e:	e009      	b.n	80345a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8034590:	687b      	ldr	r3, [r7, #4]
 8034592:	681b      	ldr	r3, [r3, #0]
 8034594:	2100      	movs	r1, #0
 8034596:	4618      	mov	r0, r3
 8034598:	f001 fc45 	bl	8035e26 <SDIO_GetResponse>
 803459c:	4602      	mov	r2, r0
 803459e:	683b      	ldr	r3, [r7, #0]
 80345a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80345a2:	2300      	movs	r3, #0
}
 80345a4:	4618      	mov	r0, r3
 80345a6:	3710      	adds	r7, #16
 80345a8:	46bd      	mov	sp, r7
 80345aa:	bd80      	pop	{r7, pc}

080345ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80345ac:	b580      	push	{r7, lr}
 80345ae:	b082      	sub	sp, #8
 80345b0:	af00      	add	r7, sp, #0
 80345b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80345b4:	687b      	ldr	r3, [r7, #4]
 80345b6:	2b00      	cmp	r3, #0
 80345b8:	d101      	bne.n	80345be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80345ba:	2301      	movs	r3, #1
 80345bc:	e041      	b.n	8034642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80345be:	687b      	ldr	r3, [r7, #4]
 80345c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80345c4:	b2db      	uxtb	r3, r3
 80345c6:	2b00      	cmp	r3, #0
 80345c8:	d106      	bne.n	80345d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80345ca:	687b      	ldr	r3, [r7, #4]
 80345cc:	2200      	movs	r2, #0
 80345ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80345d2:	6878      	ldr	r0, [r7, #4]
 80345d4:	f7fd f95c 	bl	8031890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80345d8:	687b      	ldr	r3, [r7, #4]
 80345da:	2202      	movs	r2, #2
 80345dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80345e0:	687b      	ldr	r3, [r7, #4]
 80345e2:	681a      	ldr	r2, [r3, #0]
 80345e4:	687b      	ldr	r3, [r7, #4]
 80345e6:	3304      	adds	r3, #4
 80345e8:	4619      	mov	r1, r3
 80345ea:	4610      	mov	r0, r2
 80345ec:	f000 f95e 	bl	80348ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80345f0:	687b      	ldr	r3, [r7, #4]
 80345f2:	2201      	movs	r2, #1
 80345f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80345f8:	687b      	ldr	r3, [r7, #4]
 80345fa:	2201      	movs	r2, #1
 80345fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8034600:	687b      	ldr	r3, [r7, #4]
 8034602:	2201      	movs	r2, #1
 8034604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8034608:	687b      	ldr	r3, [r7, #4]
 803460a:	2201      	movs	r2, #1
 803460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8034610:	687b      	ldr	r3, [r7, #4]
 8034612:	2201      	movs	r2, #1
 8034614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8034618:	687b      	ldr	r3, [r7, #4]
 803461a:	2201      	movs	r2, #1
 803461c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8034620:	687b      	ldr	r3, [r7, #4]
 8034622:	2201      	movs	r2, #1
 8034624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8034628:	687b      	ldr	r3, [r7, #4]
 803462a:	2201      	movs	r2, #1
 803462c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8034630:	687b      	ldr	r3, [r7, #4]
 8034632:	2201      	movs	r2, #1
 8034634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8034638:	687b      	ldr	r3, [r7, #4]
 803463a:	2201      	movs	r2, #1
 803463c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8034640:	2300      	movs	r3, #0
}
 8034642:	4618      	mov	r0, r3
 8034644:	3708      	adds	r7, #8
 8034646:	46bd      	mov	sp, r7
 8034648:	bd80      	pop	{r7, pc}
	...

0803464c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 803464c:	b480      	push	{r7}
 803464e:	b085      	sub	sp, #20
 8034650:	af00      	add	r7, sp, #0
 8034652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8034654:	687b      	ldr	r3, [r7, #4]
 8034656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 803465a:	b2db      	uxtb	r3, r3
 803465c:	2b01      	cmp	r3, #1
 803465e:	d001      	beq.n	8034664 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8034660:	2301      	movs	r3, #1
 8034662:	e046      	b.n	80346f2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8034664:	687b      	ldr	r3, [r7, #4]
 8034666:	2202      	movs	r2, #2
 8034668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 803466c:	687b      	ldr	r3, [r7, #4]
 803466e:	681b      	ldr	r3, [r3, #0]
 8034670:	4a23      	ldr	r2, [pc, #140]	; (8034700 <HAL_TIM_Base_Start+0xb4>)
 8034672:	4293      	cmp	r3, r2
 8034674:	d022      	beq.n	80346bc <HAL_TIM_Base_Start+0x70>
 8034676:	687b      	ldr	r3, [r7, #4]
 8034678:	681b      	ldr	r3, [r3, #0]
 803467a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803467e:	d01d      	beq.n	80346bc <HAL_TIM_Base_Start+0x70>
 8034680:	687b      	ldr	r3, [r7, #4]
 8034682:	681b      	ldr	r3, [r3, #0]
 8034684:	4a1f      	ldr	r2, [pc, #124]	; (8034704 <HAL_TIM_Base_Start+0xb8>)
 8034686:	4293      	cmp	r3, r2
 8034688:	d018      	beq.n	80346bc <HAL_TIM_Base_Start+0x70>
 803468a:	687b      	ldr	r3, [r7, #4]
 803468c:	681b      	ldr	r3, [r3, #0]
 803468e:	4a1e      	ldr	r2, [pc, #120]	; (8034708 <HAL_TIM_Base_Start+0xbc>)
 8034690:	4293      	cmp	r3, r2
 8034692:	d013      	beq.n	80346bc <HAL_TIM_Base_Start+0x70>
 8034694:	687b      	ldr	r3, [r7, #4]
 8034696:	681b      	ldr	r3, [r3, #0]
 8034698:	4a1c      	ldr	r2, [pc, #112]	; (803470c <HAL_TIM_Base_Start+0xc0>)
 803469a:	4293      	cmp	r3, r2
 803469c:	d00e      	beq.n	80346bc <HAL_TIM_Base_Start+0x70>
 803469e:	687b      	ldr	r3, [r7, #4]
 80346a0:	681b      	ldr	r3, [r3, #0]
 80346a2:	4a1b      	ldr	r2, [pc, #108]	; (8034710 <HAL_TIM_Base_Start+0xc4>)
 80346a4:	4293      	cmp	r3, r2
 80346a6:	d009      	beq.n	80346bc <HAL_TIM_Base_Start+0x70>
 80346a8:	687b      	ldr	r3, [r7, #4]
 80346aa:	681b      	ldr	r3, [r3, #0]
 80346ac:	4a19      	ldr	r2, [pc, #100]	; (8034714 <HAL_TIM_Base_Start+0xc8>)
 80346ae:	4293      	cmp	r3, r2
 80346b0:	d004      	beq.n	80346bc <HAL_TIM_Base_Start+0x70>
 80346b2:	687b      	ldr	r3, [r7, #4]
 80346b4:	681b      	ldr	r3, [r3, #0]
 80346b6:	4a18      	ldr	r2, [pc, #96]	; (8034718 <HAL_TIM_Base_Start+0xcc>)
 80346b8:	4293      	cmp	r3, r2
 80346ba:	d111      	bne.n	80346e0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80346bc:	687b      	ldr	r3, [r7, #4]
 80346be:	681b      	ldr	r3, [r3, #0]
 80346c0:	689b      	ldr	r3, [r3, #8]
 80346c2:	f003 0307 	and.w	r3, r3, #7
 80346c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80346c8:	68fb      	ldr	r3, [r7, #12]
 80346ca:	2b06      	cmp	r3, #6
 80346cc:	d010      	beq.n	80346f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80346ce:	687b      	ldr	r3, [r7, #4]
 80346d0:	681b      	ldr	r3, [r3, #0]
 80346d2:	681a      	ldr	r2, [r3, #0]
 80346d4:	687b      	ldr	r3, [r7, #4]
 80346d6:	681b      	ldr	r3, [r3, #0]
 80346d8:	f042 0201 	orr.w	r2, r2, #1
 80346dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80346de:	e007      	b.n	80346f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80346e0:	687b      	ldr	r3, [r7, #4]
 80346e2:	681b      	ldr	r3, [r3, #0]
 80346e4:	681a      	ldr	r2, [r3, #0]
 80346e6:	687b      	ldr	r3, [r7, #4]
 80346e8:	681b      	ldr	r3, [r3, #0]
 80346ea:	f042 0201 	orr.w	r2, r2, #1
 80346ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80346f0:	2300      	movs	r3, #0
}
 80346f2:	4618      	mov	r0, r3
 80346f4:	3714      	adds	r7, #20
 80346f6:	46bd      	mov	sp, r7
 80346f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80346fc:	4770      	bx	lr
 80346fe:	bf00      	nop
 8034700:	40010000 	.word	0x40010000
 8034704:	40000400 	.word	0x40000400
 8034708:	40000800 	.word	0x40000800
 803470c:	40000c00 	.word	0x40000c00
 8034710:	40010400 	.word	0x40010400
 8034714:	40014000 	.word	0x40014000
 8034718:	40001800 	.word	0x40001800

0803471c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 803471c:	b580      	push	{r7, lr}
 803471e:	b084      	sub	sp, #16
 8034720:	af00      	add	r7, sp, #0
 8034722:	6078      	str	r0, [r7, #4]
 8034724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8034726:	2300      	movs	r3, #0
 8034728:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 803472a:	687b      	ldr	r3, [r7, #4]
 803472c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8034730:	2b01      	cmp	r3, #1
 8034732:	d101      	bne.n	8034738 <HAL_TIM_ConfigClockSource+0x1c>
 8034734:	2302      	movs	r3, #2
 8034736:	e0b4      	b.n	80348a2 <HAL_TIM_ConfigClockSource+0x186>
 8034738:	687b      	ldr	r3, [r7, #4]
 803473a:	2201      	movs	r2, #1
 803473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8034740:	687b      	ldr	r3, [r7, #4]
 8034742:	2202      	movs	r2, #2
 8034744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8034748:	687b      	ldr	r3, [r7, #4]
 803474a:	681b      	ldr	r3, [r3, #0]
 803474c:	689b      	ldr	r3, [r3, #8]
 803474e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8034750:	68bb      	ldr	r3, [r7, #8]
 8034752:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8034756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8034758:	68bb      	ldr	r3, [r7, #8]
 803475a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 803475e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8034760:	687b      	ldr	r3, [r7, #4]
 8034762:	681b      	ldr	r3, [r3, #0]
 8034764:	68ba      	ldr	r2, [r7, #8]
 8034766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8034768:	683b      	ldr	r3, [r7, #0]
 803476a:	681b      	ldr	r3, [r3, #0]
 803476c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034770:	d03e      	beq.n	80347f0 <HAL_TIM_ConfigClockSource+0xd4>
 8034772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8034776:	f200 8087 	bhi.w	8034888 <HAL_TIM_ConfigClockSource+0x16c>
 803477a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 803477e:	f000 8086 	beq.w	803488e <HAL_TIM_ConfigClockSource+0x172>
 8034782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8034786:	d87f      	bhi.n	8034888 <HAL_TIM_ConfigClockSource+0x16c>
 8034788:	2b70      	cmp	r3, #112	; 0x70
 803478a:	d01a      	beq.n	80347c2 <HAL_TIM_ConfigClockSource+0xa6>
 803478c:	2b70      	cmp	r3, #112	; 0x70
 803478e:	d87b      	bhi.n	8034888 <HAL_TIM_ConfigClockSource+0x16c>
 8034790:	2b60      	cmp	r3, #96	; 0x60
 8034792:	d050      	beq.n	8034836 <HAL_TIM_ConfigClockSource+0x11a>
 8034794:	2b60      	cmp	r3, #96	; 0x60
 8034796:	d877      	bhi.n	8034888 <HAL_TIM_ConfigClockSource+0x16c>
 8034798:	2b50      	cmp	r3, #80	; 0x50
 803479a:	d03c      	beq.n	8034816 <HAL_TIM_ConfigClockSource+0xfa>
 803479c:	2b50      	cmp	r3, #80	; 0x50
 803479e:	d873      	bhi.n	8034888 <HAL_TIM_ConfigClockSource+0x16c>
 80347a0:	2b40      	cmp	r3, #64	; 0x40
 80347a2:	d058      	beq.n	8034856 <HAL_TIM_ConfigClockSource+0x13a>
 80347a4:	2b40      	cmp	r3, #64	; 0x40
 80347a6:	d86f      	bhi.n	8034888 <HAL_TIM_ConfigClockSource+0x16c>
 80347a8:	2b30      	cmp	r3, #48	; 0x30
 80347aa:	d064      	beq.n	8034876 <HAL_TIM_ConfigClockSource+0x15a>
 80347ac:	2b30      	cmp	r3, #48	; 0x30
 80347ae:	d86b      	bhi.n	8034888 <HAL_TIM_ConfigClockSource+0x16c>
 80347b0:	2b20      	cmp	r3, #32
 80347b2:	d060      	beq.n	8034876 <HAL_TIM_ConfigClockSource+0x15a>
 80347b4:	2b20      	cmp	r3, #32
 80347b6:	d867      	bhi.n	8034888 <HAL_TIM_ConfigClockSource+0x16c>
 80347b8:	2b00      	cmp	r3, #0
 80347ba:	d05c      	beq.n	8034876 <HAL_TIM_ConfigClockSource+0x15a>
 80347bc:	2b10      	cmp	r3, #16
 80347be:	d05a      	beq.n	8034876 <HAL_TIM_ConfigClockSource+0x15a>
 80347c0:	e062      	b.n	8034888 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80347c2:	687b      	ldr	r3, [r7, #4]
 80347c4:	6818      	ldr	r0, [r3, #0]
 80347c6:	683b      	ldr	r3, [r7, #0]
 80347c8:	6899      	ldr	r1, [r3, #8]
 80347ca:	683b      	ldr	r3, [r7, #0]
 80347cc:	685a      	ldr	r2, [r3, #4]
 80347ce:	683b      	ldr	r3, [r7, #0]
 80347d0:	68db      	ldr	r3, [r3, #12]
 80347d2:	f000 f985 	bl	8034ae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80347d6:	687b      	ldr	r3, [r7, #4]
 80347d8:	681b      	ldr	r3, [r3, #0]
 80347da:	689b      	ldr	r3, [r3, #8]
 80347dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80347de:	68bb      	ldr	r3, [r7, #8]
 80347e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80347e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80347e6:	687b      	ldr	r3, [r7, #4]
 80347e8:	681b      	ldr	r3, [r3, #0]
 80347ea:	68ba      	ldr	r2, [r7, #8]
 80347ec:	609a      	str	r2, [r3, #8]
      break;
 80347ee:	e04f      	b.n	8034890 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80347f0:	687b      	ldr	r3, [r7, #4]
 80347f2:	6818      	ldr	r0, [r3, #0]
 80347f4:	683b      	ldr	r3, [r7, #0]
 80347f6:	6899      	ldr	r1, [r3, #8]
 80347f8:	683b      	ldr	r3, [r7, #0]
 80347fa:	685a      	ldr	r2, [r3, #4]
 80347fc:	683b      	ldr	r3, [r7, #0]
 80347fe:	68db      	ldr	r3, [r3, #12]
 8034800:	f000 f96e 	bl	8034ae0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8034804:	687b      	ldr	r3, [r7, #4]
 8034806:	681b      	ldr	r3, [r3, #0]
 8034808:	689a      	ldr	r2, [r3, #8]
 803480a:	687b      	ldr	r3, [r7, #4]
 803480c:	681b      	ldr	r3, [r3, #0]
 803480e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8034812:	609a      	str	r2, [r3, #8]
      break;
 8034814:	e03c      	b.n	8034890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8034816:	687b      	ldr	r3, [r7, #4]
 8034818:	6818      	ldr	r0, [r3, #0]
 803481a:	683b      	ldr	r3, [r7, #0]
 803481c:	6859      	ldr	r1, [r3, #4]
 803481e:	683b      	ldr	r3, [r7, #0]
 8034820:	68db      	ldr	r3, [r3, #12]
 8034822:	461a      	mov	r2, r3
 8034824:	f000 f8e2 	bl	80349ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8034828:	687b      	ldr	r3, [r7, #4]
 803482a:	681b      	ldr	r3, [r3, #0]
 803482c:	2150      	movs	r1, #80	; 0x50
 803482e:	4618      	mov	r0, r3
 8034830:	f000 f93b 	bl	8034aaa <TIM_ITRx_SetConfig>
      break;
 8034834:	e02c      	b.n	8034890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8034836:	687b      	ldr	r3, [r7, #4]
 8034838:	6818      	ldr	r0, [r3, #0]
 803483a:	683b      	ldr	r3, [r7, #0]
 803483c:	6859      	ldr	r1, [r3, #4]
 803483e:	683b      	ldr	r3, [r7, #0]
 8034840:	68db      	ldr	r3, [r3, #12]
 8034842:	461a      	mov	r2, r3
 8034844:	f000 f901 	bl	8034a4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8034848:	687b      	ldr	r3, [r7, #4]
 803484a:	681b      	ldr	r3, [r3, #0]
 803484c:	2160      	movs	r1, #96	; 0x60
 803484e:	4618      	mov	r0, r3
 8034850:	f000 f92b 	bl	8034aaa <TIM_ITRx_SetConfig>
      break;
 8034854:	e01c      	b.n	8034890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8034856:	687b      	ldr	r3, [r7, #4]
 8034858:	6818      	ldr	r0, [r3, #0]
 803485a:	683b      	ldr	r3, [r7, #0]
 803485c:	6859      	ldr	r1, [r3, #4]
 803485e:	683b      	ldr	r3, [r7, #0]
 8034860:	68db      	ldr	r3, [r3, #12]
 8034862:	461a      	mov	r2, r3
 8034864:	f000 f8c2 	bl	80349ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8034868:	687b      	ldr	r3, [r7, #4]
 803486a:	681b      	ldr	r3, [r3, #0]
 803486c:	2140      	movs	r1, #64	; 0x40
 803486e:	4618      	mov	r0, r3
 8034870:	f000 f91b 	bl	8034aaa <TIM_ITRx_SetConfig>
      break;
 8034874:	e00c      	b.n	8034890 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8034876:	687b      	ldr	r3, [r7, #4]
 8034878:	681a      	ldr	r2, [r3, #0]
 803487a:	683b      	ldr	r3, [r7, #0]
 803487c:	681b      	ldr	r3, [r3, #0]
 803487e:	4619      	mov	r1, r3
 8034880:	4610      	mov	r0, r2
 8034882:	f000 f912 	bl	8034aaa <TIM_ITRx_SetConfig>
      break;
 8034886:	e003      	b.n	8034890 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8034888:	2301      	movs	r3, #1
 803488a:	73fb      	strb	r3, [r7, #15]
      break;
 803488c:	e000      	b.n	8034890 <HAL_TIM_ConfigClockSource+0x174>
      break;
 803488e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8034890:	687b      	ldr	r3, [r7, #4]
 8034892:	2201      	movs	r2, #1
 8034894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8034898:	687b      	ldr	r3, [r7, #4]
 803489a:	2200      	movs	r2, #0
 803489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80348a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80348a2:	4618      	mov	r0, r3
 80348a4:	3710      	adds	r7, #16
 80348a6:	46bd      	mov	sp, r7
 80348a8:	bd80      	pop	{r7, pc}
	...

080348ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80348ac:	b480      	push	{r7}
 80348ae:	b085      	sub	sp, #20
 80348b0:	af00      	add	r7, sp, #0
 80348b2:	6078      	str	r0, [r7, #4]
 80348b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80348b6:	687b      	ldr	r3, [r7, #4]
 80348b8:	681b      	ldr	r3, [r3, #0]
 80348ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80348bc:	687b      	ldr	r3, [r7, #4]
 80348be:	4a40      	ldr	r2, [pc, #256]	; (80349c0 <TIM_Base_SetConfig+0x114>)
 80348c0:	4293      	cmp	r3, r2
 80348c2:	d013      	beq.n	80348ec <TIM_Base_SetConfig+0x40>
 80348c4:	687b      	ldr	r3, [r7, #4]
 80348c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80348ca:	d00f      	beq.n	80348ec <TIM_Base_SetConfig+0x40>
 80348cc:	687b      	ldr	r3, [r7, #4]
 80348ce:	4a3d      	ldr	r2, [pc, #244]	; (80349c4 <TIM_Base_SetConfig+0x118>)
 80348d0:	4293      	cmp	r3, r2
 80348d2:	d00b      	beq.n	80348ec <TIM_Base_SetConfig+0x40>
 80348d4:	687b      	ldr	r3, [r7, #4]
 80348d6:	4a3c      	ldr	r2, [pc, #240]	; (80349c8 <TIM_Base_SetConfig+0x11c>)
 80348d8:	4293      	cmp	r3, r2
 80348da:	d007      	beq.n	80348ec <TIM_Base_SetConfig+0x40>
 80348dc:	687b      	ldr	r3, [r7, #4]
 80348de:	4a3b      	ldr	r2, [pc, #236]	; (80349cc <TIM_Base_SetConfig+0x120>)
 80348e0:	4293      	cmp	r3, r2
 80348e2:	d003      	beq.n	80348ec <TIM_Base_SetConfig+0x40>
 80348e4:	687b      	ldr	r3, [r7, #4]
 80348e6:	4a3a      	ldr	r2, [pc, #232]	; (80349d0 <TIM_Base_SetConfig+0x124>)
 80348e8:	4293      	cmp	r3, r2
 80348ea:	d108      	bne.n	80348fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80348ec:	68fb      	ldr	r3, [r7, #12]
 80348ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80348f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80348f4:	683b      	ldr	r3, [r7, #0]
 80348f6:	685b      	ldr	r3, [r3, #4]
 80348f8:	68fa      	ldr	r2, [r7, #12]
 80348fa:	4313      	orrs	r3, r2
 80348fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80348fe:	687b      	ldr	r3, [r7, #4]
 8034900:	4a2f      	ldr	r2, [pc, #188]	; (80349c0 <TIM_Base_SetConfig+0x114>)
 8034902:	4293      	cmp	r3, r2
 8034904:	d02b      	beq.n	803495e <TIM_Base_SetConfig+0xb2>
 8034906:	687b      	ldr	r3, [r7, #4]
 8034908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 803490c:	d027      	beq.n	803495e <TIM_Base_SetConfig+0xb2>
 803490e:	687b      	ldr	r3, [r7, #4]
 8034910:	4a2c      	ldr	r2, [pc, #176]	; (80349c4 <TIM_Base_SetConfig+0x118>)
 8034912:	4293      	cmp	r3, r2
 8034914:	d023      	beq.n	803495e <TIM_Base_SetConfig+0xb2>
 8034916:	687b      	ldr	r3, [r7, #4]
 8034918:	4a2b      	ldr	r2, [pc, #172]	; (80349c8 <TIM_Base_SetConfig+0x11c>)
 803491a:	4293      	cmp	r3, r2
 803491c:	d01f      	beq.n	803495e <TIM_Base_SetConfig+0xb2>
 803491e:	687b      	ldr	r3, [r7, #4]
 8034920:	4a2a      	ldr	r2, [pc, #168]	; (80349cc <TIM_Base_SetConfig+0x120>)
 8034922:	4293      	cmp	r3, r2
 8034924:	d01b      	beq.n	803495e <TIM_Base_SetConfig+0xb2>
 8034926:	687b      	ldr	r3, [r7, #4]
 8034928:	4a29      	ldr	r2, [pc, #164]	; (80349d0 <TIM_Base_SetConfig+0x124>)
 803492a:	4293      	cmp	r3, r2
 803492c:	d017      	beq.n	803495e <TIM_Base_SetConfig+0xb2>
 803492e:	687b      	ldr	r3, [r7, #4]
 8034930:	4a28      	ldr	r2, [pc, #160]	; (80349d4 <TIM_Base_SetConfig+0x128>)
 8034932:	4293      	cmp	r3, r2
 8034934:	d013      	beq.n	803495e <TIM_Base_SetConfig+0xb2>
 8034936:	687b      	ldr	r3, [r7, #4]
 8034938:	4a27      	ldr	r2, [pc, #156]	; (80349d8 <TIM_Base_SetConfig+0x12c>)
 803493a:	4293      	cmp	r3, r2
 803493c:	d00f      	beq.n	803495e <TIM_Base_SetConfig+0xb2>
 803493e:	687b      	ldr	r3, [r7, #4]
 8034940:	4a26      	ldr	r2, [pc, #152]	; (80349dc <TIM_Base_SetConfig+0x130>)
 8034942:	4293      	cmp	r3, r2
 8034944:	d00b      	beq.n	803495e <TIM_Base_SetConfig+0xb2>
 8034946:	687b      	ldr	r3, [r7, #4]
 8034948:	4a25      	ldr	r2, [pc, #148]	; (80349e0 <TIM_Base_SetConfig+0x134>)
 803494a:	4293      	cmp	r3, r2
 803494c:	d007      	beq.n	803495e <TIM_Base_SetConfig+0xb2>
 803494e:	687b      	ldr	r3, [r7, #4]
 8034950:	4a24      	ldr	r2, [pc, #144]	; (80349e4 <TIM_Base_SetConfig+0x138>)
 8034952:	4293      	cmp	r3, r2
 8034954:	d003      	beq.n	803495e <TIM_Base_SetConfig+0xb2>
 8034956:	687b      	ldr	r3, [r7, #4]
 8034958:	4a23      	ldr	r2, [pc, #140]	; (80349e8 <TIM_Base_SetConfig+0x13c>)
 803495a:	4293      	cmp	r3, r2
 803495c:	d108      	bne.n	8034970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 803495e:	68fb      	ldr	r3, [r7, #12]
 8034960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8034964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8034966:	683b      	ldr	r3, [r7, #0]
 8034968:	68db      	ldr	r3, [r3, #12]
 803496a:	68fa      	ldr	r2, [r7, #12]
 803496c:	4313      	orrs	r3, r2
 803496e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8034970:	68fb      	ldr	r3, [r7, #12]
 8034972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8034976:	683b      	ldr	r3, [r7, #0]
 8034978:	695b      	ldr	r3, [r3, #20]
 803497a:	4313      	orrs	r3, r2
 803497c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 803497e:	687b      	ldr	r3, [r7, #4]
 8034980:	68fa      	ldr	r2, [r7, #12]
 8034982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8034984:	683b      	ldr	r3, [r7, #0]
 8034986:	689a      	ldr	r2, [r3, #8]
 8034988:	687b      	ldr	r3, [r7, #4]
 803498a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 803498c:	683b      	ldr	r3, [r7, #0]
 803498e:	681a      	ldr	r2, [r3, #0]
 8034990:	687b      	ldr	r3, [r7, #4]
 8034992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8034994:	687b      	ldr	r3, [r7, #4]
 8034996:	4a0a      	ldr	r2, [pc, #40]	; (80349c0 <TIM_Base_SetConfig+0x114>)
 8034998:	4293      	cmp	r3, r2
 803499a:	d003      	beq.n	80349a4 <TIM_Base_SetConfig+0xf8>
 803499c:	687b      	ldr	r3, [r7, #4]
 803499e:	4a0c      	ldr	r2, [pc, #48]	; (80349d0 <TIM_Base_SetConfig+0x124>)
 80349a0:	4293      	cmp	r3, r2
 80349a2:	d103      	bne.n	80349ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80349a4:	683b      	ldr	r3, [r7, #0]
 80349a6:	691a      	ldr	r2, [r3, #16]
 80349a8:	687b      	ldr	r3, [r7, #4]
 80349aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80349ac:	687b      	ldr	r3, [r7, #4]
 80349ae:	2201      	movs	r2, #1
 80349b0:	615a      	str	r2, [r3, #20]
}
 80349b2:	bf00      	nop
 80349b4:	3714      	adds	r7, #20
 80349b6:	46bd      	mov	sp, r7
 80349b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80349bc:	4770      	bx	lr
 80349be:	bf00      	nop
 80349c0:	40010000 	.word	0x40010000
 80349c4:	40000400 	.word	0x40000400
 80349c8:	40000800 	.word	0x40000800
 80349cc:	40000c00 	.word	0x40000c00
 80349d0:	40010400 	.word	0x40010400
 80349d4:	40014000 	.word	0x40014000
 80349d8:	40014400 	.word	0x40014400
 80349dc:	40014800 	.word	0x40014800
 80349e0:	40001800 	.word	0x40001800
 80349e4:	40001c00 	.word	0x40001c00
 80349e8:	40002000 	.word	0x40002000

080349ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80349ec:	b480      	push	{r7}
 80349ee:	b087      	sub	sp, #28
 80349f0:	af00      	add	r7, sp, #0
 80349f2:	60f8      	str	r0, [r7, #12]
 80349f4:	60b9      	str	r1, [r7, #8]
 80349f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80349f8:	68fb      	ldr	r3, [r7, #12]
 80349fa:	6a1b      	ldr	r3, [r3, #32]
 80349fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80349fe:	68fb      	ldr	r3, [r7, #12]
 8034a00:	6a1b      	ldr	r3, [r3, #32]
 8034a02:	f023 0201 	bic.w	r2, r3, #1
 8034a06:	68fb      	ldr	r3, [r7, #12]
 8034a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8034a0a:	68fb      	ldr	r3, [r7, #12]
 8034a0c:	699b      	ldr	r3, [r3, #24]
 8034a0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8034a10:	693b      	ldr	r3, [r7, #16]
 8034a12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8034a16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8034a18:	687b      	ldr	r3, [r7, #4]
 8034a1a:	011b      	lsls	r3, r3, #4
 8034a1c:	693a      	ldr	r2, [r7, #16]
 8034a1e:	4313      	orrs	r3, r2
 8034a20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8034a22:	697b      	ldr	r3, [r7, #20]
 8034a24:	f023 030a 	bic.w	r3, r3, #10
 8034a28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8034a2a:	697a      	ldr	r2, [r7, #20]
 8034a2c:	68bb      	ldr	r3, [r7, #8]
 8034a2e:	4313      	orrs	r3, r2
 8034a30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8034a32:	68fb      	ldr	r3, [r7, #12]
 8034a34:	693a      	ldr	r2, [r7, #16]
 8034a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8034a38:	68fb      	ldr	r3, [r7, #12]
 8034a3a:	697a      	ldr	r2, [r7, #20]
 8034a3c:	621a      	str	r2, [r3, #32]
}
 8034a3e:	bf00      	nop
 8034a40:	371c      	adds	r7, #28
 8034a42:	46bd      	mov	sp, r7
 8034a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034a48:	4770      	bx	lr

08034a4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8034a4a:	b480      	push	{r7}
 8034a4c:	b087      	sub	sp, #28
 8034a4e:	af00      	add	r7, sp, #0
 8034a50:	60f8      	str	r0, [r7, #12]
 8034a52:	60b9      	str	r1, [r7, #8]
 8034a54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8034a56:	68fb      	ldr	r3, [r7, #12]
 8034a58:	6a1b      	ldr	r3, [r3, #32]
 8034a5a:	f023 0210 	bic.w	r2, r3, #16
 8034a5e:	68fb      	ldr	r3, [r7, #12]
 8034a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8034a62:	68fb      	ldr	r3, [r7, #12]
 8034a64:	699b      	ldr	r3, [r3, #24]
 8034a66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8034a68:	68fb      	ldr	r3, [r7, #12]
 8034a6a:	6a1b      	ldr	r3, [r3, #32]
 8034a6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8034a6e:	697b      	ldr	r3, [r7, #20]
 8034a70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8034a74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8034a76:	687b      	ldr	r3, [r7, #4]
 8034a78:	031b      	lsls	r3, r3, #12
 8034a7a:	697a      	ldr	r2, [r7, #20]
 8034a7c:	4313      	orrs	r3, r2
 8034a7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8034a80:	693b      	ldr	r3, [r7, #16]
 8034a82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8034a86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8034a88:	68bb      	ldr	r3, [r7, #8]
 8034a8a:	011b      	lsls	r3, r3, #4
 8034a8c:	693a      	ldr	r2, [r7, #16]
 8034a8e:	4313      	orrs	r3, r2
 8034a90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8034a92:	68fb      	ldr	r3, [r7, #12]
 8034a94:	697a      	ldr	r2, [r7, #20]
 8034a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8034a98:	68fb      	ldr	r3, [r7, #12]
 8034a9a:	693a      	ldr	r2, [r7, #16]
 8034a9c:	621a      	str	r2, [r3, #32]
}
 8034a9e:	bf00      	nop
 8034aa0:	371c      	adds	r7, #28
 8034aa2:	46bd      	mov	sp, r7
 8034aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034aa8:	4770      	bx	lr

08034aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8034aaa:	b480      	push	{r7}
 8034aac:	b085      	sub	sp, #20
 8034aae:	af00      	add	r7, sp, #0
 8034ab0:	6078      	str	r0, [r7, #4]
 8034ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8034ab4:	687b      	ldr	r3, [r7, #4]
 8034ab6:	689b      	ldr	r3, [r3, #8]
 8034ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8034aba:	68fb      	ldr	r3, [r7, #12]
 8034abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8034ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8034ac2:	683a      	ldr	r2, [r7, #0]
 8034ac4:	68fb      	ldr	r3, [r7, #12]
 8034ac6:	4313      	orrs	r3, r2
 8034ac8:	f043 0307 	orr.w	r3, r3, #7
 8034acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8034ace:	687b      	ldr	r3, [r7, #4]
 8034ad0:	68fa      	ldr	r2, [r7, #12]
 8034ad2:	609a      	str	r2, [r3, #8]
}
 8034ad4:	bf00      	nop
 8034ad6:	3714      	adds	r7, #20
 8034ad8:	46bd      	mov	sp, r7
 8034ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034ade:	4770      	bx	lr

08034ae0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8034ae0:	b480      	push	{r7}
 8034ae2:	b087      	sub	sp, #28
 8034ae4:	af00      	add	r7, sp, #0
 8034ae6:	60f8      	str	r0, [r7, #12]
 8034ae8:	60b9      	str	r1, [r7, #8]
 8034aea:	607a      	str	r2, [r7, #4]
 8034aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8034aee:	68fb      	ldr	r3, [r7, #12]
 8034af0:	689b      	ldr	r3, [r3, #8]
 8034af2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8034af4:	697b      	ldr	r3, [r7, #20]
 8034af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8034afa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8034afc:	683b      	ldr	r3, [r7, #0]
 8034afe:	021a      	lsls	r2, r3, #8
 8034b00:	687b      	ldr	r3, [r7, #4]
 8034b02:	431a      	orrs	r2, r3
 8034b04:	68bb      	ldr	r3, [r7, #8]
 8034b06:	4313      	orrs	r3, r2
 8034b08:	697a      	ldr	r2, [r7, #20]
 8034b0a:	4313      	orrs	r3, r2
 8034b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8034b0e:	68fb      	ldr	r3, [r7, #12]
 8034b10:	697a      	ldr	r2, [r7, #20]
 8034b12:	609a      	str	r2, [r3, #8]
}
 8034b14:	bf00      	nop
 8034b16:	371c      	adds	r7, #28
 8034b18:	46bd      	mov	sp, r7
 8034b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034b1e:	4770      	bx	lr

08034b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8034b20:	b480      	push	{r7}
 8034b22:	b085      	sub	sp, #20
 8034b24:	af00      	add	r7, sp, #0
 8034b26:	6078      	str	r0, [r7, #4]
 8034b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8034b2a:	687b      	ldr	r3, [r7, #4]
 8034b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8034b30:	2b01      	cmp	r3, #1
 8034b32:	d101      	bne.n	8034b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8034b34:	2302      	movs	r3, #2
 8034b36:	e05a      	b.n	8034bee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8034b38:	687b      	ldr	r3, [r7, #4]
 8034b3a:	2201      	movs	r2, #1
 8034b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8034b40:	687b      	ldr	r3, [r7, #4]
 8034b42:	2202      	movs	r2, #2
 8034b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8034b48:	687b      	ldr	r3, [r7, #4]
 8034b4a:	681b      	ldr	r3, [r3, #0]
 8034b4c:	685b      	ldr	r3, [r3, #4]
 8034b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8034b50:	687b      	ldr	r3, [r7, #4]
 8034b52:	681b      	ldr	r3, [r3, #0]
 8034b54:	689b      	ldr	r3, [r3, #8]
 8034b56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8034b58:	68fb      	ldr	r3, [r7, #12]
 8034b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8034b5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8034b60:	683b      	ldr	r3, [r7, #0]
 8034b62:	681b      	ldr	r3, [r3, #0]
 8034b64:	68fa      	ldr	r2, [r7, #12]
 8034b66:	4313      	orrs	r3, r2
 8034b68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8034b6a:	687b      	ldr	r3, [r7, #4]
 8034b6c:	681b      	ldr	r3, [r3, #0]
 8034b6e:	68fa      	ldr	r2, [r7, #12]
 8034b70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8034b72:	687b      	ldr	r3, [r7, #4]
 8034b74:	681b      	ldr	r3, [r3, #0]
 8034b76:	4a21      	ldr	r2, [pc, #132]	; (8034bfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8034b78:	4293      	cmp	r3, r2
 8034b7a:	d022      	beq.n	8034bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8034b7c:	687b      	ldr	r3, [r7, #4]
 8034b7e:	681b      	ldr	r3, [r3, #0]
 8034b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8034b84:	d01d      	beq.n	8034bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8034b86:	687b      	ldr	r3, [r7, #4]
 8034b88:	681b      	ldr	r3, [r3, #0]
 8034b8a:	4a1d      	ldr	r2, [pc, #116]	; (8034c00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8034b8c:	4293      	cmp	r3, r2
 8034b8e:	d018      	beq.n	8034bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8034b90:	687b      	ldr	r3, [r7, #4]
 8034b92:	681b      	ldr	r3, [r3, #0]
 8034b94:	4a1b      	ldr	r2, [pc, #108]	; (8034c04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8034b96:	4293      	cmp	r3, r2
 8034b98:	d013      	beq.n	8034bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8034b9a:	687b      	ldr	r3, [r7, #4]
 8034b9c:	681b      	ldr	r3, [r3, #0]
 8034b9e:	4a1a      	ldr	r2, [pc, #104]	; (8034c08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8034ba0:	4293      	cmp	r3, r2
 8034ba2:	d00e      	beq.n	8034bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8034ba4:	687b      	ldr	r3, [r7, #4]
 8034ba6:	681b      	ldr	r3, [r3, #0]
 8034ba8:	4a18      	ldr	r2, [pc, #96]	; (8034c0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8034baa:	4293      	cmp	r3, r2
 8034bac:	d009      	beq.n	8034bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8034bae:	687b      	ldr	r3, [r7, #4]
 8034bb0:	681b      	ldr	r3, [r3, #0]
 8034bb2:	4a17      	ldr	r2, [pc, #92]	; (8034c10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8034bb4:	4293      	cmp	r3, r2
 8034bb6:	d004      	beq.n	8034bc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8034bb8:	687b      	ldr	r3, [r7, #4]
 8034bba:	681b      	ldr	r3, [r3, #0]
 8034bbc:	4a15      	ldr	r2, [pc, #84]	; (8034c14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8034bbe:	4293      	cmp	r3, r2
 8034bc0:	d10c      	bne.n	8034bdc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8034bc2:	68bb      	ldr	r3, [r7, #8]
 8034bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8034bc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8034bca:	683b      	ldr	r3, [r7, #0]
 8034bcc:	685b      	ldr	r3, [r3, #4]
 8034bce:	68ba      	ldr	r2, [r7, #8]
 8034bd0:	4313      	orrs	r3, r2
 8034bd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8034bd4:	687b      	ldr	r3, [r7, #4]
 8034bd6:	681b      	ldr	r3, [r3, #0]
 8034bd8:	68ba      	ldr	r2, [r7, #8]
 8034bda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8034bdc:	687b      	ldr	r3, [r7, #4]
 8034bde:	2201      	movs	r2, #1
 8034be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8034be4:	687b      	ldr	r3, [r7, #4]
 8034be6:	2200      	movs	r2, #0
 8034be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8034bec:	2300      	movs	r3, #0
}
 8034bee:	4618      	mov	r0, r3
 8034bf0:	3714      	adds	r7, #20
 8034bf2:	46bd      	mov	sp, r7
 8034bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8034bf8:	4770      	bx	lr
 8034bfa:	bf00      	nop
 8034bfc:	40010000 	.word	0x40010000
 8034c00:	40000400 	.word	0x40000400
 8034c04:	40000800 	.word	0x40000800
 8034c08:	40000c00 	.word	0x40000c00
 8034c0c:	40010400 	.word	0x40010400
 8034c10:	40014000 	.word	0x40014000
 8034c14:	40001800 	.word	0x40001800

08034c18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8034c18:	b580      	push	{r7, lr}
 8034c1a:	b082      	sub	sp, #8
 8034c1c:	af00      	add	r7, sp, #0
 8034c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8034c20:	687b      	ldr	r3, [r7, #4]
 8034c22:	2b00      	cmp	r3, #0
 8034c24:	d101      	bne.n	8034c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8034c26:	2301      	movs	r3, #1
 8034c28:	e03f      	b.n	8034caa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8034c2a:	687b      	ldr	r3, [r7, #4]
 8034c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8034c30:	b2db      	uxtb	r3, r3
 8034c32:	2b00      	cmp	r3, #0
 8034c34:	d106      	bne.n	8034c44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8034c36:	687b      	ldr	r3, [r7, #4]
 8034c38:	2200      	movs	r2, #0
 8034c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8034c3e:	6878      	ldr	r0, [r7, #4]
 8034c40:	f7fc fe48 	bl	80318d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8034c44:	687b      	ldr	r3, [r7, #4]
 8034c46:	2224      	movs	r2, #36	; 0x24
 8034c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8034c4c:	687b      	ldr	r3, [r7, #4]
 8034c4e:	681b      	ldr	r3, [r3, #0]
 8034c50:	68da      	ldr	r2, [r3, #12]
 8034c52:	687b      	ldr	r3, [r7, #4]
 8034c54:	681b      	ldr	r3, [r3, #0]
 8034c56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8034c5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8034c5c:	6878      	ldr	r0, [r7, #4]
 8034c5e:	f000 fe7d 	bl	803595c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8034c62:	687b      	ldr	r3, [r7, #4]
 8034c64:	681b      	ldr	r3, [r3, #0]
 8034c66:	691a      	ldr	r2, [r3, #16]
 8034c68:	687b      	ldr	r3, [r7, #4]
 8034c6a:	681b      	ldr	r3, [r3, #0]
 8034c6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8034c70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8034c72:	687b      	ldr	r3, [r7, #4]
 8034c74:	681b      	ldr	r3, [r3, #0]
 8034c76:	695a      	ldr	r2, [r3, #20]
 8034c78:	687b      	ldr	r3, [r7, #4]
 8034c7a:	681b      	ldr	r3, [r3, #0]
 8034c7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8034c80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8034c82:	687b      	ldr	r3, [r7, #4]
 8034c84:	681b      	ldr	r3, [r3, #0]
 8034c86:	68da      	ldr	r2, [r3, #12]
 8034c88:	687b      	ldr	r3, [r7, #4]
 8034c8a:	681b      	ldr	r3, [r3, #0]
 8034c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8034c90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8034c92:	687b      	ldr	r3, [r7, #4]
 8034c94:	2200      	movs	r2, #0
 8034c96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8034c98:	687b      	ldr	r3, [r7, #4]
 8034c9a:	2220      	movs	r2, #32
 8034c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8034ca0:	687b      	ldr	r3, [r7, #4]
 8034ca2:	2220      	movs	r2, #32
 8034ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8034ca8:	2300      	movs	r3, #0
}
 8034caa:	4618      	mov	r0, r3
 8034cac:	3708      	adds	r7, #8
 8034cae:	46bd      	mov	sp, r7
 8034cb0:	bd80      	pop	{r7, pc}

08034cb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8034cb2:	b580      	push	{r7, lr}
 8034cb4:	b08a      	sub	sp, #40	; 0x28
 8034cb6:	af02      	add	r7, sp, #8
 8034cb8:	60f8      	str	r0, [r7, #12]
 8034cba:	60b9      	str	r1, [r7, #8]
 8034cbc:	603b      	str	r3, [r7, #0]
 8034cbe:	4613      	mov	r3, r2
 8034cc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8034cc2:	2300      	movs	r3, #0
 8034cc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8034cc6:	68fb      	ldr	r3, [r7, #12]
 8034cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8034ccc:	b2db      	uxtb	r3, r3
 8034cce:	2b20      	cmp	r3, #32
 8034cd0:	d17c      	bne.n	8034dcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8034cd2:	68bb      	ldr	r3, [r7, #8]
 8034cd4:	2b00      	cmp	r3, #0
 8034cd6:	d002      	beq.n	8034cde <HAL_UART_Transmit+0x2c>
 8034cd8:	88fb      	ldrh	r3, [r7, #6]
 8034cda:	2b00      	cmp	r3, #0
 8034cdc:	d101      	bne.n	8034ce2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8034cde:	2301      	movs	r3, #1
 8034ce0:	e075      	b.n	8034dce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8034ce2:	68fb      	ldr	r3, [r7, #12]
 8034ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8034ce8:	2b01      	cmp	r3, #1
 8034cea:	d101      	bne.n	8034cf0 <HAL_UART_Transmit+0x3e>
 8034cec:	2302      	movs	r3, #2
 8034cee:	e06e      	b.n	8034dce <HAL_UART_Transmit+0x11c>
 8034cf0:	68fb      	ldr	r3, [r7, #12]
 8034cf2:	2201      	movs	r2, #1
 8034cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8034cf8:	68fb      	ldr	r3, [r7, #12]
 8034cfa:	2200      	movs	r2, #0
 8034cfc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8034cfe:	68fb      	ldr	r3, [r7, #12]
 8034d00:	2221      	movs	r2, #33	; 0x21
 8034d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8034d06:	f7fd f9f7 	bl	80320f8 <HAL_GetTick>
 8034d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8034d0c:	68fb      	ldr	r3, [r7, #12]
 8034d0e:	88fa      	ldrh	r2, [r7, #6]
 8034d10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8034d12:	68fb      	ldr	r3, [r7, #12]
 8034d14:	88fa      	ldrh	r2, [r7, #6]
 8034d16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8034d18:	68fb      	ldr	r3, [r7, #12]
 8034d1a:	689b      	ldr	r3, [r3, #8]
 8034d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8034d20:	d108      	bne.n	8034d34 <HAL_UART_Transmit+0x82>
 8034d22:	68fb      	ldr	r3, [r7, #12]
 8034d24:	691b      	ldr	r3, [r3, #16]
 8034d26:	2b00      	cmp	r3, #0
 8034d28:	d104      	bne.n	8034d34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8034d2a:	2300      	movs	r3, #0
 8034d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8034d2e:	68bb      	ldr	r3, [r7, #8]
 8034d30:	61bb      	str	r3, [r7, #24]
 8034d32:	e003      	b.n	8034d3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8034d34:	68bb      	ldr	r3, [r7, #8]
 8034d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8034d38:	2300      	movs	r3, #0
 8034d3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8034d3c:	68fb      	ldr	r3, [r7, #12]
 8034d3e:	2200      	movs	r2, #0
 8034d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8034d44:	e02a      	b.n	8034d9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8034d46:	683b      	ldr	r3, [r7, #0]
 8034d48:	9300      	str	r3, [sp, #0]
 8034d4a:	697b      	ldr	r3, [r7, #20]
 8034d4c:	2200      	movs	r2, #0
 8034d4e:	2180      	movs	r1, #128	; 0x80
 8034d50:	68f8      	ldr	r0, [r7, #12]
 8034d52:	f000 fbc1 	bl	80354d8 <UART_WaitOnFlagUntilTimeout>
 8034d56:	4603      	mov	r3, r0
 8034d58:	2b00      	cmp	r3, #0
 8034d5a:	d001      	beq.n	8034d60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8034d5c:	2303      	movs	r3, #3
 8034d5e:	e036      	b.n	8034dce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8034d60:	69fb      	ldr	r3, [r7, #28]
 8034d62:	2b00      	cmp	r3, #0
 8034d64:	d10b      	bne.n	8034d7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8034d66:	69bb      	ldr	r3, [r7, #24]
 8034d68:	881b      	ldrh	r3, [r3, #0]
 8034d6a:	461a      	mov	r2, r3
 8034d6c:	68fb      	ldr	r3, [r7, #12]
 8034d6e:	681b      	ldr	r3, [r3, #0]
 8034d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8034d74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8034d76:	69bb      	ldr	r3, [r7, #24]
 8034d78:	3302      	adds	r3, #2
 8034d7a:	61bb      	str	r3, [r7, #24]
 8034d7c:	e007      	b.n	8034d8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8034d7e:	69fb      	ldr	r3, [r7, #28]
 8034d80:	781a      	ldrb	r2, [r3, #0]
 8034d82:	68fb      	ldr	r3, [r7, #12]
 8034d84:	681b      	ldr	r3, [r3, #0]
 8034d86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8034d88:	69fb      	ldr	r3, [r7, #28]
 8034d8a:	3301      	adds	r3, #1
 8034d8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8034d8e:	68fb      	ldr	r3, [r7, #12]
 8034d90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8034d92:	b29b      	uxth	r3, r3
 8034d94:	3b01      	subs	r3, #1
 8034d96:	b29a      	uxth	r2, r3
 8034d98:	68fb      	ldr	r3, [r7, #12]
 8034d9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8034d9c:	68fb      	ldr	r3, [r7, #12]
 8034d9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8034da0:	b29b      	uxth	r3, r3
 8034da2:	2b00      	cmp	r3, #0
 8034da4:	d1cf      	bne.n	8034d46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8034da6:	683b      	ldr	r3, [r7, #0]
 8034da8:	9300      	str	r3, [sp, #0]
 8034daa:	697b      	ldr	r3, [r7, #20]
 8034dac:	2200      	movs	r2, #0
 8034dae:	2140      	movs	r1, #64	; 0x40
 8034db0:	68f8      	ldr	r0, [r7, #12]
 8034db2:	f000 fb91 	bl	80354d8 <UART_WaitOnFlagUntilTimeout>
 8034db6:	4603      	mov	r3, r0
 8034db8:	2b00      	cmp	r3, #0
 8034dba:	d001      	beq.n	8034dc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8034dbc:	2303      	movs	r3, #3
 8034dbe:	e006      	b.n	8034dce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8034dc0:	68fb      	ldr	r3, [r7, #12]
 8034dc2:	2220      	movs	r2, #32
 8034dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8034dc8:	2300      	movs	r3, #0
 8034dca:	e000      	b.n	8034dce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8034dcc:	2302      	movs	r3, #2
  }
}
 8034dce:	4618      	mov	r0, r3
 8034dd0:	3720      	adds	r7, #32
 8034dd2:	46bd      	mov	sp, r7
 8034dd4:	bd80      	pop	{r7, pc}

08034dd6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8034dd6:	b580      	push	{r7, lr}
 8034dd8:	b08a      	sub	sp, #40	; 0x28
 8034dda:	af02      	add	r7, sp, #8
 8034ddc:	60f8      	str	r0, [r7, #12]
 8034dde:	60b9      	str	r1, [r7, #8]
 8034de0:	603b      	str	r3, [r7, #0]
 8034de2:	4613      	mov	r3, r2
 8034de4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8034de6:	2300      	movs	r3, #0
 8034de8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8034dea:	68fb      	ldr	r3, [r7, #12]
 8034dec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8034df0:	b2db      	uxtb	r3, r3
 8034df2:	2b20      	cmp	r3, #32
 8034df4:	f040 808c 	bne.w	8034f10 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8034df8:	68bb      	ldr	r3, [r7, #8]
 8034dfa:	2b00      	cmp	r3, #0
 8034dfc:	d002      	beq.n	8034e04 <HAL_UART_Receive+0x2e>
 8034dfe:	88fb      	ldrh	r3, [r7, #6]
 8034e00:	2b00      	cmp	r3, #0
 8034e02:	d101      	bne.n	8034e08 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8034e04:	2301      	movs	r3, #1
 8034e06:	e084      	b.n	8034f12 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8034e08:	68fb      	ldr	r3, [r7, #12]
 8034e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8034e0e:	2b01      	cmp	r3, #1
 8034e10:	d101      	bne.n	8034e16 <HAL_UART_Receive+0x40>
 8034e12:	2302      	movs	r3, #2
 8034e14:	e07d      	b.n	8034f12 <HAL_UART_Receive+0x13c>
 8034e16:	68fb      	ldr	r3, [r7, #12]
 8034e18:	2201      	movs	r2, #1
 8034e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8034e1e:	68fb      	ldr	r3, [r7, #12]
 8034e20:	2200      	movs	r2, #0
 8034e22:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8034e24:	68fb      	ldr	r3, [r7, #12]
 8034e26:	2222      	movs	r2, #34	; 0x22
 8034e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8034e2c:	68fb      	ldr	r3, [r7, #12]
 8034e2e:	2200      	movs	r2, #0
 8034e30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8034e32:	f7fd f961 	bl	80320f8 <HAL_GetTick>
 8034e36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8034e38:	68fb      	ldr	r3, [r7, #12]
 8034e3a:	88fa      	ldrh	r2, [r7, #6]
 8034e3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8034e3e:	68fb      	ldr	r3, [r7, #12]
 8034e40:	88fa      	ldrh	r2, [r7, #6]
 8034e42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8034e44:	68fb      	ldr	r3, [r7, #12]
 8034e46:	689b      	ldr	r3, [r3, #8]
 8034e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8034e4c:	d108      	bne.n	8034e60 <HAL_UART_Receive+0x8a>
 8034e4e:	68fb      	ldr	r3, [r7, #12]
 8034e50:	691b      	ldr	r3, [r3, #16]
 8034e52:	2b00      	cmp	r3, #0
 8034e54:	d104      	bne.n	8034e60 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8034e56:	2300      	movs	r3, #0
 8034e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8034e5a:	68bb      	ldr	r3, [r7, #8]
 8034e5c:	61bb      	str	r3, [r7, #24]
 8034e5e:	e003      	b.n	8034e68 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8034e60:	68bb      	ldr	r3, [r7, #8]
 8034e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8034e64:	2300      	movs	r3, #0
 8034e66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8034e68:	68fb      	ldr	r3, [r7, #12]
 8034e6a:	2200      	movs	r2, #0
 8034e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8034e70:	e043      	b.n	8034efa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8034e72:	683b      	ldr	r3, [r7, #0]
 8034e74:	9300      	str	r3, [sp, #0]
 8034e76:	697b      	ldr	r3, [r7, #20]
 8034e78:	2200      	movs	r2, #0
 8034e7a:	2120      	movs	r1, #32
 8034e7c:	68f8      	ldr	r0, [r7, #12]
 8034e7e:	f000 fb2b 	bl	80354d8 <UART_WaitOnFlagUntilTimeout>
 8034e82:	4603      	mov	r3, r0
 8034e84:	2b00      	cmp	r3, #0
 8034e86:	d001      	beq.n	8034e8c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8034e88:	2303      	movs	r3, #3
 8034e8a:	e042      	b.n	8034f12 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8034e8c:	69fb      	ldr	r3, [r7, #28]
 8034e8e:	2b00      	cmp	r3, #0
 8034e90:	d10c      	bne.n	8034eac <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8034e92:	68fb      	ldr	r3, [r7, #12]
 8034e94:	681b      	ldr	r3, [r3, #0]
 8034e96:	685b      	ldr	r3, [r3, #4]
 8034e98:	b29b      	uxth	r3, r3
 8034e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8034e9e:	b29a      	uxth	r2, r3
 8034ea0:	69bb      	ldr	r3, [r7, #24]
 8034ea2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8034ea4:	69bb      	ldr	r3, [r7, #24]
 8034ea6:	3302      	adds	r3, #2
 8034ea8:	61bb      	str	r3, [r7, #24]
 8034eaa:	e01f      	b.n	8034eec <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8034eac:	68fb      	ldr	r3, [r7, #12]
 8034eae:	689b      	ldr	r3, [r3, #8]
 8034eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8034eb4:	d007      	beq.n	8034ec6 <HAL_UART_Receive+0xf0>
 8034eb6:	68fb      	ldr	r3, [r7, #12]
 8034eb8:	689b      	ldr	r3, [r3, #8]
 8034eba:	2b00      	cmp	r3, #0
 8034ebc:	d10a      	bne.n	8034ed4 <HAL_UART_Receive+0xfe>
 8034ebe:	68fb      	ldr	r3, [r7, #12]
 8034ec0:	691b      	ldr	r3, [r3, #16]
 8034ec2:	2b00      	cmp	r3, #0
 8034ec4:	d106      	bne.n	8034ed4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8034ec6:	68fb      	ldr	r3, [r7, #12]
 8034ec8:	681b      	ldr	r3, [r3, #0]
 8034eca:	685b      	ldr	r3, [r3, #4]
 8034ecc:	b2da      	uxtb	r2, r3
 8034ece:	69fb      	ldr	r3, [r7, #28]
 8034ed0:	701a      	strb	r2, [r3, #0]
 8034ed2:	e008      	b.n	8034ee6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8034ed4:	68fb      	ldr	r3, [r7, #12]
 8034ed6:	681b      	ldr	r3, [r3, #0]
 8034ed8:	685b      	ldr	r3, [r3, #4]
 8034eda:	b2db      	uxtb	r3, r3
 8034edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8034ee0:	b2da      	uxtb	r2, r3
 8034ee2:	69fb      	ldr	r3, [r7, #28]
 8034ee4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8034ee6:	69fb      	ldr	r3, [r7, #28]
 8034ee8:	3301      	adds	r3, #1
 8034eea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8034eec:	68fb      	ldr	r3, [r7, #12]
 8034eee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8034ef0:	b29b      	uxth	r3, r3
 8034ef2:	3b01      	subs	r3, #1
 8034ef4:	b29a      	uxth	r2, r3
 8034ef6:	68fb      	ldr	r3, [r7, #12]
 8034ef8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8034efa:	68fb      	ldr	r3, [r7, #12]
 8034efc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8034efe:	b29b      	uxth	r3, r3
 8034f00:	2b00      	cmp	r3, #0
 8034f02:	d1b6      	bne.n	8034e72 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8034f04:	68fb      	ldr	r3, [r7, #12]
 8034f06:	2220      	movs	r2, #32
 8034f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8034f0c:	2300      	movs	r3, #0
 8034f0e:	e000      	b.n	8034f12 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8034f10:	2302      	movs	r3, #2
  }
}
 8034f12:	4618      	mov	r0, r3
 8034f14:	3720      	adds	r7, #32
 8034f16:	46bd      	mov	sp, r7
 8034f18:	bd80      	pop	{r7, pc}

08034f1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8034f1a:	b580      	push	{r7, lr}
 8034f1c:	b084      	sub	sp, #16
 8034f1e:	af00      	add	r7, sp, #0
 8034f20:	60f8      	str	r0, [r7, #12]
 8034f22:	60b9      	str	r1, [r7, #8]
 8034f24:	4613      	mov	r3, r2
 8034f26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8034f28:	68fb      	ldr	r3, [r7, #12]
 8034f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8034f2e:	b2db      	uxtb	r3, r3
 8034f30:	2b20      	cmp	r3, #32
 8034f32:	d11d      	bne.n	8034f70 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8034f34:	68bb      	ldr	r3, [r7, #8]
 8034f36:	2b00      	cmp	r3, #0
 8034f38:	d002      	beq.n	8034f40 <HAL_UART_Receive_IT+0x26>
 8034f3a:	88fb      	ldrh	r3, [r7, #6]
 8034f3c:	2b00      	cmp	r3, #0
 8034f3e:	d101      	bne.n	8034f44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8034f40:	2301      	movs	r3, #1
 8034f42:	e016      	b.n	8034f72 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8034f44:	68fb      	ldr	r3, [r7, #12]
 8034f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8034f4a:	2b01      	cmp	r3, #1
 8034f4c:	d101      	bne.n	8034f52 <HAL_UART_Receive_IT+0x38>
 8034f4e:	2302      	movs	r3, #2
 8034f50:	e00f      	b.n	8034f72 <HAL_UART_Receive_IT+0x58>
 8034f52:	68fb      	ldr	r3, [r7, #12]
 8034f54:	2201      	movs	r2, #1
 8034f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8034f5a:	68fb      	ldr	r3, [r7, #12]
 8034f5c:	2200      	movs	r2, #0
 8034f5e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8034f60:	88fb      	ldrh	r3, [r7, #6]
 8034f62:	461a      	mov	r2, r3
 8034f64:	68b9      	ldr	r1, [r7, #8]
 8034f66:	68f8      	ldr	r0, [r7, #12]
 8034f68:	f000 fb24 	bl	80355b4 <UART_Start_Receive_IT>
 8034f6c:	4603      	mov	r3, r0
 8034f6e:	e000      	b.n	8034f72 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8034f70:	2302      	movs	r3, #2
  }
}
 8034f72:	4618      	mov	r0, r3
 8034f74:	3710      	adds	r7, #16
 8034f76:	46bd      	mov	sp, r7
 8034f78:	bd80      	pop	{r7, pc}
	...

08034f7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8034f7c:	b580      	push	{r7, lr}
 8034f7e:	b0ba      	sub	sp, #232	; 0xe8
 8034f80:	af00      	add	r7, sp, #0
 8034f82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8034f84:	687b      	ldr	r3, [r7, #4]
 8034f86:	681b      	ldr	r3, [r3, #0]
 8034f88:	681b      	ldr	r3, [r3, #0]
 8034f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8034f8e:	687b      	ldr	r3, [r7, #4]
 8034f90:	681b      	ldr	r3, [r3, #0]
 8034f92:	68db      	ldr	r3, [r3, #12]
 8034f94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8034f98:	687b      	ldr	r3, [r7, #4]
 8034f9a:	681b      	ldr	r3, [r3, #0]
 8034f9c:	695b      	ldr	r3, [r3, #20]
 8034f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8034fa2:	2300      	movs	r3, #0
 8034fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8034fa8:	2300      	movs	r3, #0
 8034faa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8034fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8034fb2:	f003 030f 	and.w	r3, r3, #15
 8034fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8034fba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8034fbe:	2b00      	cmp	r3, #0
 8034fc0:	d10f      	bne.n	8034fe2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8034fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8034fc6:	f003 0320 	and.w	r3, r3, #32
 8034fca:	2b00      	cmp	r3, #0
 8034fcc:	d009      	beq.n	8034fe2 <HAL_UART_IRQHandler+0x66>
 8034fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8034fd2:	f003 0320 	and.w	r3, r3, #32
 8034fd6:	2b00      	cmp	r3, #0
 8034fd8:	d003      	beq.n	8034fe2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8034fda:	6878      	ldr	r0, [r7, #4]
 8034fdc:	f000 fc03 	bl	80357e6 <UART_Receive_IT>
      return;
 8034fe0:	e256      	b.n	8035490 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8034fe2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8034fe6:	2b00      	cmp	r3, #0
 8034fe8:	f000 80de 	beq.w	80351a8 <HAL_UART_IRQHandler+0x22c>
 8034fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8034ff0:	f003 0301 	and.w	r3, r3, #1
 8034ff4:	2b00      	cmp	r3, #0
 8034ff6:	d106      	bne.n	8035006 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8034ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8034ffc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8035000:	2b00      	cmp	r3, #0
 8035002:	f000 80d1 	beq.w	80351a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8035006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803500a:	f003 0301 	and.w	r3, r3, #1
 803500e:	2b00      	cmp	r3, #0
 8035010:	d00b      	beq.n	803502a <HAL_UART_IRQHandler+0xae>
 8035012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 803501a:	2b00      	cmp	r3, #0
 803501c:	d005      	beq.n	803502a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 803501e:	687b      	ldr	r3, [r7, #4]
 8035020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8035022:	f043 0201 	orr.w	r2, r3, #1
 8035026:	687b      	ldr	r3, [r7, #4]
 8035028:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 803502a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803502e:	f003 0304 	and.w	r3, r3, #4
 8035032:	2b00      	cmp	r3, #0
 8035034:	d00b      	beq.n	803504e <HAL_UART_IRQHandler+0xd2>
 8035036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 803503a:	f003 0301 	and.w	r3, r3, #1
 803503e:	2b00      	cmp	r3, #0
 8035040:	d005      	beq.n	803504e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8035042:	687b      	ldr	r3, [r7, #4]
 8035044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8035046:	f043 0202 	orr.w	r2, r3, #2
 803504a:	687b      	ldr	r3, [r7, #4]
 803504c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 803504e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035052:	f003 0302 	and.w	r3, r3, #2
 8035056:	2b00      	cmp	r3, #0
 8035058:	d00b      	beq.n	8035072 <HAL_UART_IRQHandler+0xf6>
 803505a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 803505e:	f003 0301 	and.w	r3, r3, #1
 8035062:	2b00      	cmp	r3, #0
 8035064:	d005      	beq.n	8035072 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8035066:	687b      	ldr	r3, [r7, #4]
 8035068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803506a:	f043 0204 	orr.w	r2, r3, #4
 803506e:	687b      	ldr	r3, [r7, #4]
 8035070:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8035072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8035076:	f003 0308 	and.w	r3, r3, #8
 803507a:	2b00      	cmp	r3, #0
 803507c:	d011      	beq.n	80350a2 <HAL_UART_IRQHandler+0x126>
 803507e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035082:	f003 0320 	and.w	r3, r3, #32
 8035086:	2b00      	cmp	r3, #0
 8035088:	d105      	bne.n	8035096 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 803508a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 803508e:	f003 0301 	and.w	r3, r3, #1
 8035092:	2b00      	cmp	r3, #0
 8035094:	d005      	beq.n	80350a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8035096:	687b      	ldr	r3, [r7, #4]
 8035098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 803509a:	f043 0208 	orr.w	r2, r3, #8
 803509e:	687b      	ldr	r3, [r7, #4]
 80350a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80350a2:	687b      	ldr	r3, [r7, #4]
 80350a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80350a6:	2b00      	cmp	r3, #0
 80350a8:	f000 81ed 	beq.w	8035486 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80350ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80350b0:	f003 0320 	and.w	r3, r3, #32
 80350b4:	2b00      	cmp	r3, #0
 80350b6:	d008      	beq.n	80350ca <HAL_UART_IRQHandler+0x14e>
 80350b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80350bc:	f003 0320 	and.w	r3, r3, #32
 80350c0:	2b00      	cmp	r3, #0
 80350c2:	d002      	beq.n	80350ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80350c4:	6878      	ldr	r0, [r7, #4]
 80350c6:	f000 fb8e 	bl	80357e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80350ca:	687b      	ldr	r3, [r7, #4]
 80350cc:	681b      	ldr	r3, [r3, #0]
 80350ce:	695b      	ldr	r3, [r3, #20]
 80350d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80350d4:	2b40      	cmp	r3, #64	; 0x40
 80350d6:	bf0c      	ite	eq
 80350d8:	2301      	moveq	r3, #1
 80350da:	2300      	movne	r3, #0
 80350dc:	b2db      	uxtb	r3, r3
 80350de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80350e2:	687b      	ldr	r3, [r7, #4]
 80350e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80350e6:	f003 0308 	and.w	r3, r3, #8
 80350ea:	2b00      	cmp	r3, #0
 80350ec:	d103      	bne.n	80350f6 <HAL_UART_IRQHandler+0x17a>
 80350ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80350f2:	2b00      	cmp	r3, #0
 80350f4:	d04f      	beq.n	8035196 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80350f6:	6878      	ldr	r0, [r7, #4]
 80350f8:	f000 fa96 	bl	8035628 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80350fc:	687b      	ldr	r3, [r7, #4]
 80350fe:	681b      	ldr	r3, [r3, #0]
 8035100:	695b      	ldr	r3, [r3, #20]
 8035102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8035106:	2b40      	cmp	r3, #64	; 0x40
 8035108:	d141      	bne.n	803518e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 803510a:	687b      	ldr	r3, [r7, #4]
 803510c:	681b      	ldr	r3, [r3, #0]
 803510e:	3314      	adds	r3, #20
 8035110:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035114:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8035118:	e853 3f00 	ldrex	r3, [r3]
 803511c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8035120:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8035124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8035128:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 803512c:	687b      	ldr	r3, [r7, #4]
 803512e:	681b      	ldr	r3, [r3, #0]
 8035130:	3314      	adds	r3, #20
 8035132:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8035136:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 803513a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803513e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8035142:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8035146:	e841 2300 	strex	r3, r2, [r1]
 803514a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 803514e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8035152:	2b00      	cmp	r3, #0
 8035154:	d1d9      	bne.n	803510a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8035156:	687b      	ldr	r3, [r7, #4]
 8035158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803515a:	2b00      	cmp	r3, #0
 803515c:	d013      	beq.n	8035186 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 803515e:	687b      	ldr	r3, [r7, #4]
 8035160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035162:	4a7d      	ldr	r2, [pc, #500]	; (8035358 <HAL_UART_IRQHandler+0x3dc>)
 8035164:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8035166:	687b      	ldr	r3, [r7, #4]
 8035168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803516a:	4618      	mov	r0, r3
 803516c:	f7fd f975 	bl	803245a <HAL_DMA_Abort_IT>
 8035170:	4603      	mov	r3, r0
 8035172:	2b00      	cmp	r3, #0
 8035174:	d016      	beq.n	80351a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8035176:	687b      	ldr	r3, [r7, #4]
 8035178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 803517a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 803517c:	687a      	ldr	r2, [r7, #4]
 803517e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8035180:	4610      	mov	r0, r2
 8035182:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8035184:	e00e      	b.n	80351a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8035186:	6878      	ldr	r0, [r7, #4]
 8035188:	f000 f990 	bl	80354ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 803518c:	e00a      	b.n	80351a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 803518e:	6878      	ldr	r0, [r7, #4]
 8035190:	f000 f98c 	bl	80354ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8035194:	e006      	b.n	80351a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8035196:	6878      	ldr	r0, [r7, #4]
 8035198:	f000 f988 	bl	80354ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 803519c:	687b      	ldr	r3, [r7, #4]
 803519e:	2200      	movs	r2, #0
 80351a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80351a2:	e170      	b.n	8035486 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80351a4:	bf00      	nop
    return;
 80351a6:	e16e      	b.n	8035486 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80351a8:	687b      	ldr	r3, [r7, #4]
 80351aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80351ac:	2b01      	cmp	r3, #1
 80351ae:	f040 814a 	bne.w	8035446 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80351b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80351b6:	f003 0310 	and.w	r3, r3, #16
 80351ba:	2b00      	cmp	r3, #0
 80351bc:	f000 8143 	beq.w	8035446 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80351c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80351c4:	f003 0310 	and.w	r3, r3, #16
 80351c8:	2b00      	cmp	r3, #0
 80351ca:	f000 813c 	beq.w	8035446 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80351ce:	2300      	movs	r3, #0
 80351d0:	60bb      	str	r3, [r7, #8]
 80351d2:	687b      	ldr	r3, [r7, #4]
 80351d4:	681b      	ldr	r3, [r3, #0]
 80351d6:	681b      	ldr	r3, [r3, #0]
 80351d8:	60bb      	str	r3, [r7, #8]
 80351da:	687b      	ldr	r3, [r7, #4]
 80351dc:	681b      	ldr	r3, [r3, #0]
 80351de:	685b      	ldr	r3, [r3, #4]
 80351e0:	60bb      	str	r3, [r7, #8]
 80351e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80351e4:	687b      	ldr	r3, [r7, #4]
 80351e6:	681b      	ldr	r3, [r3, #0]
 80351e8:	695b      	ldr	r3, [r3, #20]
 80351ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80351ee:	2b40      	cmp	r3, #64	; 0x40
 80351f0:	f040 80b4 	bne.w	803535c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80351f4:	687b      	ldr	r3, [r7, #4]
 80351f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80351f8:	681b      	ldr	r3, [r3, #0]
 80351fa:	685b      	ldr	r3, [r3, #4]
 80351fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8035200:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8035204:	2b00      	cmp	r3, #0
 8035206:	f000 8140 	beq.w	803548a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 803520a:	687b      	ldr	r3, [r7, #4]
 803520c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 803520e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8035212:	429a      	cmp	r2, r3
 8035214:	f080 8139 	bcs.w	803548a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8035218:	687b      	ldr	r3, [r7, #4]
 803521a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 803521e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8035220:	687b      	ldr	r3, [r7, #4]
 8035222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035224:	69db      	ldr	r3, [r3, #28]
 8035226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 803522a:	f000 8088 	beq.w	803533e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 803522e:	687b      	ldr	r3, [r7, #4]
 8035230:	681b      	ldr	r3, [r3, #0]
 8035232:	330c      	adds	r3, #12
 8035234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035238:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 803523c:	e853 3f00 	ldrex	r3, [r3]
 8035240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8035244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8035248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 803524c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8035250:	687b      	ldr	r3, [r7, #4]
 8035252:	681b      	ldr	r3, [r3, #0]
 8035254:	330c      	adds	r3, #12
 8035256:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 803525a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 803525e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035262:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8035266:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 803526a:	e841 2300 	strex	r3, r2, [r1]
 803526e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8035272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8035276:	2b00      	cmp	r3, #0
 8035278:	d1d9      	bne.n	803522e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803527a:	687b      	ldr	r3, [r7, #4]
 803527c:	681b      	ldr	r3, [r3, #0]
 803527e:	3314      	adds	r3, #20
 8035280:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8035284:	e853 3f00 	ldrex	r3, [r3]
 8035288:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 803528a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 803528c:	f023 0301 	bic.w	r3, r3, #1
 8035290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8035294:	687b      	ldr	r3, [r7, #4]
 8035296:	681b      	ldr	r3, [r3, #0]
 8035298:	3314      	adds	r3, #20
 803529a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 803529e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80352a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80352a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80352a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80352aa:	e841 2300 	strex	r3, r2, [r1]
 80352ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80352b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80352b2:	2b00      	cmp	r3, #0
 80352b4:	d1e1      	bne.n	803527a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80352b6:	687b      	ldr	r3, [r7, #4]
 80352b8:	681b      	ldr	r3, [r3, #0]
 80352ba:	3314      	adds	r3, #20
 80352bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80352be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80352c0:	e853 3f00 	ldrex	r3, [r3]
 80352c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80352c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80352c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80352cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80352d0:	687b      	ldr	r3, [r7, #4]
 80352d2:	681b      	ldr	r3, [r3, #0]
 80352d4:	3314      	adds	r3, #20
 80352d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80352da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80352dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80352de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80352e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80352e2:	e841 2300 	strex	r3, r2, [r1]
 80352e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80352e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80352ea:	2b00      	cmp	r3, #0
 80352ec:	d1e3      	bne.n	80352b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80352ee:	687b      	ldr	r3, [r7, #4]
 80352f0:	2220      	movs	r2, #32
 80352f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80352f6:	687b      	ldr	r3, [r7, #4]
 80352f8:	2200      	movs	r2, #0
 80352fa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80352fc:	687b      	ldr	r3, [r7, #4]
 80352fe:	681b      	ldr	r3, [r3, #0]
 8035300:	330c      	adds	r3, #12
 8035302:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8035306:	e853 3f00 	ldrex	r3, [r3]
 803530a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 803530c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 803530e:	f023 0310 	bic.w	r3, r3, #16
 8035312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8035316:	687b      	ldr	r3, [r7, #4]
 8035318:	681b      	ldr	r3, [r3, #0]
 803531a:	330c      	adds	r3, #12
 803531c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8035320:	65ba      	str	r2, [r7, #88]	; 0x58
 8035322:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035324:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8035326:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8035328:	e841 2300 	strex	r3, r2, [r1]
 803532c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 803532e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8035330:	2b00      	cmp	r3, #0
 8035332:	d1e3      	bne.n	80352fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8035334:	687b      	ldr	r3, [r7, #4]
 8035336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8035338:	4618      	mov	r0, r3
 803533a:	f7fd f81e 	bl	803237a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 803533e:	687b      	ldr	r3, [r7, #4]
 8035340:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8035342:	687b      	ldr	r3, [r7, #4]
 8035344:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8035346:	b29b      	uxth	r3, r3
 8035348:	1ad3      	subs	r3, r2, r3
 803534a:	b29b      	uxth	r3, r3
 803534c:	4619      	mov	r1, r3
 803534e:	6878      	ldr	r0, [r7, #4]
 8035350:	f000 f8b6 	bl	80354c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8035354:	e099      	b.n	803548a <HAL_UART_IRQHandler+0x50e>
 8035356:	bf00      	nop
 8035358:	080356ef 	.word	0x080356ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 803535c:	687b      	ldr	r3, [r7, #4]
 803535e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8035360:	687b      	ldr	r3, [r7, #4]
 8035362:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8035364:	b29b      	uxth	r3, r3
 8035366:	1ad3      	subs	r3, r2, r3
 8035368:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 803536c:	687b      	ldr	r3, [r7, #4]
 803536e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8035370:	b29b      	uxth	r3, r3
 8035372:	2b00      	cmp	r3, #0
 8035374:	f000 808b 	beq.w	803548e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8035378:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 803537c:	2b00      	cmp	r3, #0
 803537e:	f000 8086 	beq.w	803548e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8035382:	687b      	ldr	r3, [r7, #4]
 8035384:	681b      	ldr	r3, [r3, #0]
 8035386:	330c      	adds	r3, #12
 8035388:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803538c:	e853 3f00 	ldrex	r3, [r3]
 8035390:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8035392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8035394:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8035398:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 803539c:	687b      	ldr	r3, [r7, #4]
 803539e:	681b      	ldr	r3, [r3, #0]
 80353a0:	330c      	adds	r3, #12
 80353a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80353a6:	647a      	str	r2, [r7, #68]	; 0x44
 80353a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80353aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80353ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80353ae:	e841 2300 	strex	r3, r2, [r1]
 80353b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80353b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80353b6:	2b00      	cmp	r3, #0
 80353b8:	d1e3      	bne.n	8035382 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80353ba:	687b      	ldr	r3, [r7, #4]
 80353bc:	681b      	ldr	r3, [r3, #0]
 80353be:	3314      	adds	r3, #20
 80353c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80353c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80353c4:	e853 3f00 	ldrex	r3, [r3]
 80353c8:	623b      	str	r3, [r7, #32]
   return(result);
 80353ca:	6a3b      	ldr	r3, [r7, #32]
 80353cc:	f023 0301 	bic.w	r3, r3, #1
 80353d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80353d4:	687b      	ldr	r3, [r7, #4]
 80353d6:	681b      	ldr	r3, [r3, #0]
 80353d8:	3314      	adds	r3, #20
 80353da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80353de:	633a      	str	r2, [r7, #48]	; 0x30
 80353e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80353e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80353e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80353e6:	e841 2300 	strex	r3, r2, [r1]
 80353ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80353ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80353ee:	2b00      	cmp	r3, #0
 80353f0:	d1e3      	bne.n	80353ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80353f2:	687b      	ldr	r3, [r7, #4]
 80353f4:	2220      	movs	r2, #32
 80353f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80353fa:	687b      	ldr	r3, [r7, #4]
 80353fc:	2200      	movs	r2, #0
 80353fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8035400:	687b      	ldr	r3, [r7, #4]
 8035402:	681b      	ldr	r3, [r3, #0]
 8035404:	330c      	adds	r3, #12
 8035406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035408:	693b      	ldr	r3, [r7, #16]
 803540a:	e853 3f00 	ldrex	r3, [r3]
 803540e:	60fb      	str	r3, [r7, #12]
   return(result);
 8035410:	68fb      	ldr	r3, [r7, #12]
 8035412:	f023 0310 	bic.w	r3, r3, #16
 8035416:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 803541a:	687b      	ldr	r3, [r7, #4]
 803541c:	681b      	ldr	r3, [r3, #0]
 803541e:	330c      	adds	r3, #12
 8035420:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8035424:	61fa      	str	r2, [r7, #28]
 8035426:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035428:	69b9      	ldr	r1, [r7, #24]
 803542a:	69fa      	ldr	r2, [r7, #28]
 803542c:	e841 2300 	strex	r3, r2, [r1]
 8035430:	617b      	str	r3, [r7, #20]
   return(result);
 8035432:	697b      	ldr	r3, [r7, #20]
 8035434:	2b00      	cmp	r3, #0
 8035436:	d1e3      	bne.n	8035400 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8035438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 803543c:	4619      	mov	r1, r3
 803543e:	6878      	ldr	r0, [r7, #4]
 8035440:	f000 f83e 	bl	80354c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8035444:	e023      	b.n	803548e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8035446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803544a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803544e:	2b00      	cmp	r3, #0
 8035450:	d009      	beq.n	8035466 <HAL_UART_IRQHandler+0x4ea>
 8035452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 803545a:	2b00      	cmp	r3, #0
 803545c:	d003      	beq.n	8035466 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 803545e:	6878      	ldr	r0, [r7, #4]
 8035460:	f000 f959 	bl	8035716 <UART_Transmit_IT>
    return;
 8035464:	e014      	b.n	8035490 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8035466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 803546a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803546e:	2b00      	cmp	r3, #0
 8035470:	d00e      	beq.n	8035490 <HAL_UART_IRQHandler+0x514>
 8035472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8035476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 803547a:	2b00      	cmp	r3, #0
 803547c:	d008      	beq.n	8035490 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 803547e:	6878      	ldr	r0, [r7, #4]
 8035480:	f000 f999 	bl	80357b6 <UART_EndTransmit_IT>
    return;
 8035484:	e004      	b.n	8035490 <HAL_UART_IRQHandler+0x514>
    return;
 8035486:	bf00      	nop
 8035488:	e002      	b.n	8035490 <HAL_UART_IRQHandler+0x514>
      return;
 803548a:	bf00      	nop
 803548c:	e000      	b.n	8035490 <HAL_UART_IRQHandler+0x514>
      return;
 803548e:	bf00      	nop
  }
}
 8035490:	37e8      	adds	r7, #232	; 0xe8
 8035492:	46bd      	mov	sp, r7
 8035494:	bd80      	pop	{r7, pc}
 8035496:	bf00      	nop

08035498 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8035498:	b480      	push	{r7}
 803549a:	b083      	sub	sp, #12
 803549c:	af00      	add	r7, sp, #0
 803549e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80354a0:	bf00      	nop
 80354a2:	370c      	adds	r7, #12
 80354a4:	46bd      	mov	sp, r7
 80354a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80354aa:	4770      	bx	lr

080354ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80354ac:	b480      	push	{r7}
 80354ae:	b083      	sub	sp, #12
 80354b0:	af00      	add	r7, sp, #0
 80354b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80354b4:	bf00      	nop
 80354b6:	370c      	adds	r7, #12
 80354b8:	46bd      	mov	sp, r7
 80354ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80354be:	4770      	bx	lr

080354c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80354c0:	b480      	push	{r7}
 80354c2:	b083      	sub	sp, #12
 80354c4:	af00      	add	r7, sp, #0
 80354c6:	6078      	str	r0, [r7, #4]
 80354c8:	460b      	mov	r3, r1
 80354ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80354cc:	bf00      	nop
 80354ce:	370c      	adds	r7, #12
 80354d0:	46bd      	mov	sp, r7
 80354d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80354d6:	4770      	bx	lr

080354d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80354d8:	b580      	push	{r7, lr}
 80354da:	b090      	sub	sp, #64	; 0x40
 80354dc:	af00      	add	r7, sp, #0
 80354de:	60f8      	str	r0, [r7, #12]
 80354e0:	60b9      	str	r1, [r7, #8]
 80354e2:	603b      	str	r3, [r7, #0]
 80354e4:	4613      	mov	r3, r2
 80354e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80354e8:	e050      	b.n	803558c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80354ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80354ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80354f0:	d04c      	beq.n	803558c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80354f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80354f4:	2b00      	cmp	r3, #0
 80354f6:	d007      	beq.n	8035508 <UART_WaitOnFlagUntilTimeout+0x30>
 80354f8:	f7fc fdfe 	bl	80320f8 <HAL_GetTick>
 80354fc:	4602      	mov	r2, r0
 80354fe:	683b      	ldr	r3, [r7, #0]
 8035500:	1ad3      	subs	r3, r2, r3
 8035502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8035504:	429a      	cmp	r2, r3
 8035506:	d241      	bcs.n	803558c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8035508:	68fb      	ldr	r3, [r7, #12]
 803550a:	681b      	ldr	r3, [r3, #0]
 803550c:	330c      	adds	r3, #12
 803550e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8035512:	e853 3f00 	ldrex	r3, [r3]
 8035516:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8035518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 803551a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 803551e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8035520:	68fb      	ldr	r3, [r7, #12]
 8035522:	681b      	ldr	r3, [r3, #0]
 8035524:	330c      	adds	r3, #12
 8035526:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8035528:	637a      	str	r2, [r7, #52]	; 0x34
 803552a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 803552c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 803552e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8035530:	e841 2300 	strex	r3, r2, [r1]
 8035534:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8035536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035538:	2b00      	cmp	r3, #0
 803553a:	d1e5      	bne.n	8035508 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 803553c:	68fb      	ldr	r3, [r7, #12]
 803553e:	681b      	ldr	r3, [r3, #0]
 8035540:	3314      	adds	r3, #20
 8035542:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035544:	697b      	ldr	r3, [r7, #20]
 8035546:	e853 3f00 	ldrex	r3, [r3]
 803554a:	613b      	str	r3, [r7, #16]
   return(result);
 803554c:	693b      	ldr	r3, [r7, #16]
 803554e:	f023 0301 	bic.w	r3, r3, #1
 8035552:	63bb      	str	r3, [r7, #56]	; 0x38
 8035554:	68fb      	ldr	r3, [r7, #12]
 8035556:	681b      	ldr	r3, [r3, #0]
 8035558:	3314      	adds	r3, #20
 803555a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803555c:	623a      	str	r2, [r7, #32]
 803555e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035560:	69f9      	ldr	r1, [r7, #28]
 8035562:	6a3a      	ldr	r2, [r7, #32]
 8035564:	e841 2300 	strex	r3, r2, [r1]
 8035568:	61bb      	str	r3, [r7, #24]
   return(result);
 803556a:	69bb      	ldr	r3, [r7, #24]
 803556c:	2b00      	cmp	r3, #0
 803556e:	d1e5      	bne.n	803553c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8035570:	68fb      	ldr	r3, [r7, #12]
 8035572:	2220      	movs	r2, #32
 8035574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8035578:	68fb      	ldr	r3, [r7, #12]
 803557a:	2220      	movs	r2, #32
 803557c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8035580:	68fb      	ldr	r3, [r7, #12]
 8035582:	2200      	movs	r2, #0
 8035584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8035588:	2303      	movs	r3, #3
 803558a:	e00f      	b.n	80355ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 803558c:	68fb      	ldr	r3, [r7, #12]
 803558e:	681b      	ldr	r3, [r3, #0]
 8035590:	681a      	ldr	r2, [r3, #0]
 8035592:	68bb      	ldr	r3, [r7, #8]
 8035594:	4013      	ands	r3, r2
 8035596:	68ba      	ldr	r2, [r7, #8]
 8035598:	429a      	cmp	r2, r3
 803559a:	bf0c      	ite	eq
 803559c:	2301      	moveq	r3, #1
 803559e:	2300      	movne	r3, #0
 80355a0:	b2db      	uxtb	r3, r3
 80355a2:	461a      	mov	r2, r3
 80355a4:	79fb      	ldrb	r3, [r7, #7]
 80355a6:	429a      	cmp	r2, r3
 80355a8:	d09f      	beq.n	80354ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80355aa:	2300      	movs	r3, #0
}
 80355ac:	4618      	mov	r0, r3
 80355ae:	3740      	adds	r7, #64	; 0x40
 80355b0:	46bd      	mov	sp, r7
 80355b2:	bd80      	pop	{r7, pc}

080355b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80355b4:	b480      	push	{r7}
 80355b6:	b085      	sub	sp, #20
 80355b8:	af00      	add	r7, sp, #0
 80355ba:	60f8      	str	r0, [r7, #12]
 80355bc:	60b9      	str	r1, [r7, #8]
 80355be:	4613      	mov	r3, r2
 80355c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80355c2:	68fb      	ldr	r3, [r7, #12]
 80355c4:	68ba      	ldr	r2, [r7, #8]
 80355c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80355c8:	68fb      	ldr	r3, [r7, #12]
 80355ca:	88fa      	ldrh	r2, [r7, #6]
 80355cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80355ce:	68fb      	ldr	r3, [r7, #12]
 80355d0:	88fa      	ldrh	r2, [r7, #6]
 80355d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80355d4:	68fb      	ldr	r3, [r7, #12]
 80355d6:	2200      	movs	r2, #0
 80355d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80355da:	68fb      	ldr	r3, [r7, #12]
 80355dc:	2222      	movs	r2, #34	; 0x22
 80355de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80355e2:	68fb      	ldr	r3, [r7, #12]
 80355e4:	2200      	movs	r2, #0
 80355e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80355ea:	68fb      	ldr	r3, [r7, #12]
 80355ec:	681b      	ldr	r3, [r3, #0]
 80355ee:	68da      	ldr	r2, [r3, #12]
 80355f0:	68fb      	ldr	r3, [r7, #12]
 80355f2:	681b      	ldr	r3, [r3, #0]
 80355f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80355f8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80355fa:	68fb      	ldr	r3, [r7, #12]
 80355fc:	681b      	ldr	r3, [r3, #0]
 80355fe:	695a      	ldr	r2, [r3, #20]
 8035600:	68fb      	ldr	r3, [r7, #12]
 8035602:	681b      	ldr	r3, [r3, #0]
 8035604:	f042 0201 	orr.w	r2, r2, #1
 8035608:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 803560a:	68fb      	ldr	r3, [r7, #12]
 803560c:	681b      	ldr	r3, [r3, #0]
 803560e:	68da      	ldr	r2, [r3, #12]
 8035610:	68fb      	ldr	r3, [r7, #12]
 8035612:	681b      	ldr	r3, [r3, #0]
 8035614:	f042 0220 	orr.w	r2, r2, #32
 8035618:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 803561a:	2300      	movs	r3, #0
}
 803561c:	4618      	mov	r0, r3
 803561e:	3714      	adds	r7, #20
 8035620:	46bd      	mov	sp, r7
 8035622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035626:	4770      	bx	lr

08035628 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8035628:	b480      	push	{r7}
 803562a:	b095      	sub	sp, #84	; 0x54
 803562c:	af00      	add	r7, sp, #0
 803562e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8035630:	687b      	ldr	r3, [r7, #4]
 8035632:	681b      	ldr	r3, [r3, #0]
 8035634:	330c      	adds	r3, #12
 8035636:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8035638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 803563a:	e853 3f00 	ldrex	r3, [r3]
 803563e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8035640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8035642:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8035646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8035648:	687b      	ldr	r3, [r7, #4]
 803564a:	681b      	ldr	r3, [r3, #0]
 803564c:	330c      	adds	r3, #12
 803564e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8035650:	643a      	str	r2, [r7, #64]	; 0x40
 8035652:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035654:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8035656:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8035658:	e841 2300 	strex	r3, r2, [r1]
 803565c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 803565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8035660:	2b00      	cmp	r3, #0
 8035662:	d1e5      	bne.n	8035630 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8035664:	687b      	ldr	r3, [r7, #4]
 8035666:	681b      	ldr	r3, [r3, #0]
 8035668:	3314      	adds	r3, #20
 803566a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 803566c:	6a3b      	ldr	r3, [r7, #32]
 803566e:	e853 3f00 	ldrex	r3, [r3]
 8035672:	61fb      	str	r3, [r7, #28]
   return(result);
 8035674:	69fb      	ldr	r3, [r7, #28]
 8035676:	f023 0301 	bic.w	r3, r3, #1
 803567a:	64bb      	str	r3, [r7, #72]	; 0x48
 803567c:	687b      	ldr	r3, [r7, #4]
 803567e:	681b      	ldr	r3, [r3, #0]
 8035680:	3314      	adds	r3, #20
 8035682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8035684:	62fa      	str	r2, [r7, #44]	; 0x2c
 8035686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 803568a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 803568c:	e841 2300 	strex	r3, r2, [r1]
 8035690:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8035692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8035694:	2b00      	cmp	r3, #0
 8035696:	d1e5      	bne.n	8035664 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8035698:	687b      	ldr	r3, [r7, #4]
 803569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 803569c:	2b01      	cmp	r3, #1
 803569e:	d119      	bne.n	80356d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80356a0:	687b      	ldr	r3, [r7, #4]
 80356a2:	681b      	ldr	r3, [r3, #0]
 80356a4:	330c      	adds	r3, #12
 80356a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80356a8:	68fb      	ldr	r3, [r7, #12]
 80356aa:	e853 3f00 	ldrex	r3, [r3]
 80356ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80356b0:	68bb      	ldr	r3, [r7, #8]
 80356b2:	f023 0310 	bic.w	r3, r3, #16
 80356b6:	647b      	str	r3, [r7, #68]	; 0x44
 80356b8:	687b      	ldr	r3, [r7, #4]
 80356ba:	681b      	ldr	r3, [r3, #0]
 80356bc:	330c      	adds	r3, #12
 80356be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80356c0:	61ba      	str	r2, [r7, #24]
 80356c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80356c4:	6979      	ldr	r1, [r7, #20]
 80356c6:	69ba      	ldr	r2, [r7, #24]
 80356c8:	e841 2300 	strex	r3, r2, [r1]
 80356cc:	613b      	str	r3, [r7, #16]
   return(result);
 80356ce:	693b      	ldr	r3, [r7, #16]
 80356d0:	2b00      	cmp	r3, #0
 80356d2:	d1e5      	bne.n	80356a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80356d4:	687b      	ldr	r3, [r7, #4]
 80356d6:	2220      	movs	r2, #32
 80356d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80356dc:	687b      	ldr	r3, [r7, #4]
 80356de:	2200      	movs	r2, #0
 80356e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80356e2:	bf00      	nop
 80356e4:	3754      	adds	r7, #84	; 0x54
 80356e6:	46bd      	mov	sp, r7
 80356e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80356ec:	4770      	bx	lr

080356ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80356ee:	b580      	push	{r7, lr}
 80356f0:	b084      	sub	sp, #16
 80356f2:	af00      	add	r7, sp, #0
 80356f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80356f6:	687b      	ldr	r3, [r7, #4]
 80356f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80356fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80356fc:	68fb      	ldr	r3, [r7, #12]
 80356fe:	2200      	movs	r2, #0
 8035700:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8035702:	68fb      	ldr	r3, [r7, #12]
 8035704:	2200      	movs	r2, #0
 8035706:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8035708:	68f8      	ldr	r0, [r7, #12]
 803570a:	f7ff fecf 	bl	80354ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 803570e:	bf00      	nop
 8035710:	3710      	adds	r7, #16
 8035712:	46bd      	mov	sp, r7
 8035714:	bd80      	pop	{r7, pc}

08035716 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8035716:	b480      	push	{r7}
 8035718:	b085      	sub	sp, #20
 803571a:	af00      	add	r7, sp, #0
 803571c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 803571e:	687b      	ldr	r3, [r7, #4]
 8035720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8035724:	b2db      	uxtb	r3, r3
 8035726:	2b21      	cmp	r3, #33	; 0x21
 8035728:	d13e      	bne.n	80357a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 803572a:	687b      	ldr	r3, [r7, #4]
 803572c:	689b      	ldr	r3, [r3, #8]
 803572e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035732:	d114      	bne.n	803575e <UART_Transmit_IT+0x48>
 8035734:	687b      	ldr	r3, [r7, #4]
 8035736:	691b      	ldr	r3, [r3, #16]
 8035738:	2b00      	cmp	r3, #0
 803573a:	d110      	bne.n	803575e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 803573c:	687b      	ldr	r3, [r7, #4]
 803573e:	6a1b      	ldr	r3, [r3, #32]
 8035740:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8035742:	68fb      	ldr	r3, [r7, #12]
 8035744:	881b      	ldrh	r3, [r3, #0]
 8035746:	461a      	mov	r2, r3
 8035748:	687b      	ldr	r3, [r7, #4]
 803574a:	681b      	ldr	r3, [r3, #0]
 803574c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8035750:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8035752:	687b      	ldr	r3, [r7, #4]
 8035754:	6a1b      	ldr	r3, [r3, #32]
 8035756:	1c9a      	adds	r2, r3, #2
 8035758:	687b      	ldr	r3, [r7, #4]
 803575a:	621a      	str	r2, [r3, #32]
 803575c:	e008      	b.n	8035770 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 803575e:	687b      	ldr	r3, [r7, #4]
 8035760:	6a1b      	ldr	r3, [r3, #32]
 8035762:	1c59      	adds	r1, r3, #1
 8035764:	687a      	ldr	r2, [r7, #4]
 8035766:	6211      	str	r1, [r2, #32]
 8035768:	781a      	ldrb	r2, [r3, #0]
 803576a:	687b      	ldr	r3, [r7, #4]
 803576c:	681b      	ldr	r3, [r3, #0]
 803576e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8035770:	687b      	ldr	r3, [r7, #4]
 8035772:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8035774:	b29b      	uxth	r3, r3
 8035776:	3b01      	subs	r3, #1
 8035778:	b29b      	uxth	r3, r3
 803577a:	687a      	ldr	r2, [r7, #4]
 803577c:	4619      	mov	r1, r3
 803577e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8035780:	2b00      	cmp	r3, #0
 8035782:	d10f      	bne.n	80357a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8035784:	687b      	ldr	r3, [r7, #4]
 8035786:	681b      	ldr	r3, [r3, #0]
 8035788:	68da      	ldr	r2, [r3, #12]
 803578a:	687b      	ldr	r3, [r7, #4]
 803578c:	681b      	ldr	r3, [r3, #0]
 803578e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8035792:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8035794:	687b      	ldr	r3, [r7, #4]
 8035796:	681b      	ldr	r3, [r3, #0]
 8035798:	68da      	ldr	r2, [r3, #12]
 803579a:	687b      	ldr	r3, [r7, #4]
 803579c:	681b      	ldr	r3, [r3, #0]
 803579e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80357a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80357a4:	2300      	movs	r3, #0
 80357a6:	e000      	b.n	80357aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80357a8:	2302      	movs	r3, #2
  }
}
 80357aa:	4618      	mov	r0, r3
 80357ac:	3714      	adds	r7, #20
 80357ae:	46bd      	mov	sp, r7
 80357b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80357b4:	4770      	bx	lr

080357b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80357b6:	b580      	push	{r7, lr}
 80357b8:	b082      	sub	sp, #8
 80357ba:	af00      	add	r7, sp, #0
 80357bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80357be:	687b      	ldr	r3, [r7, #4]
 80357c0:	681b      	ldr	r3, [r3, #0]
 80357c2:	68da      	ldr	r2, [r3, #12]
 80357c4:	687b      	ldr	r3, [r7, #4]
 80357c6:	681b      	ldr	r3, [r3, #0]
 80357c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80357cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80357ce:	687b      	ldr	r3, [r7, #4]
 80357d0:	2220      	movs	r2, #32
 80357d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80357d6:	6878      	ldr	r0, [r7, #4]
 80357d8:	f7ff fe5e 	bl	8035498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80357dc:	2300      	movs	r3, #0
}
 80357de:	4618      	mov	r0, r3
 80357e0:	3708      	adds	r7, #8
 80357e2:	46bd      	mov	sp, r7
 80357e4:	bd80      	pop	{r7, pc}

080357e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80357e6:	b580      	push	{r7, lr}
 80357e8:	b08c      	sub	sp, #48	; 0x30
 80357ea:	af00      	add	r7, sp, #0
 80357ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80357ee:	687b      	ldr	r3, [r7, #4]
 80357f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80357f4:	b2db      	uxtb	r3, r3
 80357f6:	2b22      	cmp	r3, #34	; 0x22
 80357f8:	f040 80ab 	bne.w	8035952 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80357fc:	687b      	ldr	r3, [r7, #4]
 80357fe:	689b      	ldr	r3, [r3, #8]
 8035800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035804:	d117      	bne.n	8035836 <UART_Receive_IT+0x50>
 8035806:	687b      	ldr	r3, [r7, #4]
 8035808:	691b      	ldr	r3, [r3, #16]
 803580a:	2b00      	cmp	r3, #0
 803580c:	d113      	bne.n	8035836 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 803580e:	2300      	movs	r3, #0
 8035810:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8035812:	687b      	ldr	r3, [r7, #4]
 8035814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8035816:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8035818:	687b      	ldr	r3, [r7, #4]
 803581a:	681b      	ldr	r3, [r3, #0]
 803581c:	685b      	ldr	r3, [r3, #4]
 803581e:	b29b      	uxth	r3, r3
 8035820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8035824:	b29a      	uxth	r2, r3
 8035826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8035828:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 803582a:	687b      	ldr	r3, [r7, #4]
 803582c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803582e:	1c9a      	adds	r2, r3, #2
 8035830:	687b      	ldr	r3, [r7, #4]
 8035832:	629a      	str	r2, [r3, #40]	; 0x28
 8035834:	e026      	b.n	8035884 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8035836:	687b      	ldr	r3, [r7, #4]
 8035838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803583a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 803583c:	2300      	movs	r3, #0
 803583e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8035840:	687b      	ldr	r3, [r7, #4]
 8035842:	689b      	ldr	r3, [r3, #8]
 8035844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8035848:	d007      	beq.n	803585a <UART_Receive_IT+0x74>
 803584a:	687b      	ldr	r3, [r7, #4]
 803584c:	689b      	ldr	r3, [r3, #8]
 803584e:	2b00      	cmp	r3, #0
 8035850:	d10a      	bne.n	8035868 <UART_Receive_IT+0x82>
 8035852:	687b      	ldr	r3, [r7, #4]
 8035854:	691b      	ldr	r3, [r3, #16]
 8035856:	2b00      	cmp	r3, #0
 8035858:	d106      	bne.n	8035868 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 803585a:	687b      	ldr	r3, [r7, #4]
 803585c:	681b      	ldr	r3, [r3, #0]
 803585e:	685b      	ldr	r3, [r3, #4]
 8035860:	b2da      	uxtb	r2, r3
 8035862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035864:	701a      	strb	r2, [r3, #0]
 8035866:	e008      	b.n	803587a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8035868:	687b      	ldr	r3, [r7, #4]
 803586a:	681b      	ldr	r3, [r3, #0]
 803586c:	685b      	ldr	r3, [r3, #4]
 803586e:	b2db      	uxtb	r3, r3
 8035870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8035874:	b2da      	uxtb	r2, r3
 8035876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8035878:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 803587a:	687b      	ldr	r3, [r7, #4]
 803587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 803587e:	1c5a      	adds	r2, r3, #1
 8035880:	687b      	ldr	r3, [r7, #4]
 8035882:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8035884:	687b      	ldr	r3, [r7, #4]
 8035886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8035888:	b29b      	uxth	r3, r3
 803588a:	3b01      	subs	r3, #1
 803588c:	b29b      	uxth	r3, r3
 803588e:	687a      	ldr	r2, [r7, #4]
 8035890:	4619      	mov	r1, r3
 8035892:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8035894:	2b00      	cmp	r3, #0
 8035896:	d15a      	bne.n	803594e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8035898:	687b      	ldr	r3, [r7, #4]
 803589a:	681b      	ldr	r3, [r3, #0]
 803589c:	68da      	ldr	r2, [r3, #12]
 803589e:	687b      	ldr	r3, [r7, #4]
 80358a0:	681b      	ldr	r3, [r3, #0]
 80358a2:	f022 0220 	bic.w	r2, r2, #32
 80358a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80358a8:	687b      	ldr	r3, [r7, #4]
 80358aa:	681b      	ldr	r3, [r3, #0]
 80358ac:	68da      	ldr	r2, [r3, #12]
 80358ae:	687b      	ldr	r3, [r7, #4]
 80358b0:	681b      	ldr	r3, [r3, #0]
 80358b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80358b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80358b8:	687b      	ldr	r3, [r7, #4]
 80358ba:	681b      	ldr	r3, [r3, #0]
 80358bc:	695a      	ldr	r2, [r3, #20]
 80358be:	687b      	ldr	r3, [r7, #4]
 80358c0:	681b      	ldr	r3, [r3, #0]
 80358c2:	f022 0201 	bic.w	r2, r2, #1
 80358c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80358c8:	687b      	ldr	r3, [r7, #4]
 80358ca:	2220      	movs	r2, #32
 80358cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80358d0:	687b      	ldr	r3, [r7, #4]
 80358d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80358d4:	2b01      	cmp	r3, #1
 80358d6:	d135      	bne.n	8035944 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80358d8:	687b      	ldr	r3, [r7, #4]
 80358da:	2200      	movs	r2, #0
 80358dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80358de:	687b      	ldr	r3, [r7, #4]
 80358e0:	681b      	ldr	r3, [r3, #0]
 80358e2:	330c      	adds	r3, #12
 80358e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80358e6:	697b      	ldr	r3, [r7, #20]
 80358e8:	e853 3f00 	ldrex	r3, [r3]
 80358ec:	613b      	str	r3, [r7, #16]
   return(result);
 80358ee:	693b      	ldr	r3, [r7, #16]
 80358f0:	f023 0310 	bic.w	r3, r3, #16
 80358f4:	627b      	str	r3, [r7, #36]	; 0x24
 80358f6:	687b      	ldr	r3, [r7, #4]
 80358f8:	681b      	ldr	r3, [r3, #0]
 80358fa:	330c      	adds	r3, #12
 80358fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80358fe:	623a      	str	r2, [r7, #32]
 8035900:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8035902:	69f9      	ldr	r1, [r7, #28]
 8035904:	6a3a      	ldr	r2, [r7, #32]
 8035906:	e841 2300 	strex	r3, r2, [r1]
 803590a:	61bb      	str	r3, [r7, #24]
   return(result);
 803590c:	69bb      	ldr	r3, [r7, #24]
 803590e:	2b00      	cmp	r3, #0
 8035910:	d1e5      	bne.n	80358de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8035912:	687b      	ldr	r3, [r7, #4]
 8035914:	681b      	ldr	r3, [r3, #0]
 8035916:	681b      	ldr	r3, [r3, #0]
 8035918:	f003 0310 	and.w	r3, r3, #16
 803591c:	2b10      	cmp	r3, #16
 803591e:	d10a      	bne.n	8035936 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8035920:	2300      	movs	r3, #0
 8035922:	60fb      	str	r3, [r7, #12]
 8035924:	687b      	ldr	r3, [r7, #4]
 8035926:	681b      	ldr	r3, [r3, #0]
 8035928:	681b      	ldr	r3, [r3, #0]
 803592a:	60fb      	str	r3, [r7, #12]
 803592c:	687b      	ldr	r3, [r7, #4]
 803592e:	681b      	ldr	r3, [r3, #0]
 8035930:	685b      	ldr	r3, [r3, #4]
 8035932:	60fb      	str	r3, [r7, #12]
 8035934:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8035936:	687b      	ldr	r3, [r7, #4]
 8035938:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 803593a:	4619      	mov	r1, r3
 803593c:	6878      	ldr	r0, [r7, #4]
 803593e:	f7ff fdbf 	bl	80354c0 <HAL_UARTEx_RxEventCallback>
 8035942:	e002      	b.n	803594a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8035944:	6878      	ldr	r0, [r7, #4]
 8035946:	f7f4 fd27 	bl	802a398 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 803594a:	2300      	movs	r3, #0
 803594c:	e002      	b.n	8035954 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 803594e:	2300      	movs	r3, #0
 8035950:	e000      	b.n	8035954 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8035952:	2302      	movs	r3, #2
  }
}
 8035954:	4618      	mov	r0, r3
 8035956:	3730      	adds	r7, #48	; 0x30
 8035958:	46bd      	mov	sp, r7
 803595a:	bd80      	pop	{r7, pc}

0803595c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 803595c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8035960:	b09f      	sub	sp, #124	; 0x7c
 8035962:	af00      	add	r7, sp, #0
 8035964:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8035966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035968:	681b      	ldr	r3, [r3, #0]
 803596a:	691b      	ldr	r3, [r3, #16]
 803596c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8035970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035972:	68d9      	ldr	r1, [r3, #12]
 8035974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035976:	681a      	ldr	r2, [r3, #0]
 8035978:	ea40 0301 	orr.w	r3, r0, r1
 803597c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 803597e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035980:	689a      	ldr	r2, [r3, #8]
 8035982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035984:	691b      	ldr	r3, [r3, #16]
 8035986:	431a      	orrs	r2, r3
 8035988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 803598a:	695b      	ldr	r3, [r3, #20]
 803598c:	431a      	orrs	r2, r3
 803598e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035990:	69db      	ldr	r3, [r3, #28]
 8035992:	4313      	orrs	r3, r2
 8035994:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8035996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035998:	681b      	ldr	r3, [r3, #0]
 803599a:	68db      	ldr	r3, [r3, #12]
 803599c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80359a0:	f021 010c 	bic.w	r1, r1, #12
 80359a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80359a6:	681a      	ldr	r2, [r3, #0]
 80359a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80359aa:	430b      	orrs	r3, r1
 80359ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80359ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80359b0:	681b      	ldr	r3, [r3, #0]
 80359b2:	695b      	ldr	r3, [r3, #20]
 80359b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80359b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80359ba:	6999      	ldr	r1, [r3, #24]
 80359bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80359be:	681a      	ldr	r2, [r3, #0]
 80359c0:	ea40 0301 	orr.w	r3, r0, r1
 80359c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80359c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80359c8:	681a      	ldr	r2, [r3, #0]
 80359ca:	4bc5      	ldr	r3, [pc, #788]	; (8035ce0 <UART_SetConfig+0x384>)
 80359cc:	429a      	cmp	r2, r3
 80359ce:	d004      	beq.n	80359da <UART_SetConfig+0x7e>
 80359d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80359d2:	681a      	ldr	r2, [r3, #0]
 80359d4:	4bc3      	ldr	r3, [pc, #780]	; (8035ce4 <UART_SetConfig+0x388>)
 80359d6:	429a      	cmp	r2, r3
 80359d8:	d103      	bne.n	80359e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80359da:	f7fd fe4f 	bl	803367c <HAL_RCC_GetPCLK2Freq>
 80359de:	6778      	str	r0, [r7, #116]	; 0x74
 80359e0:	e002      	b.n	80359e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80359e2:	f7fd fe37 	bl	8033654 <HAL_RCC_GetPCLK1Freq>
 80359e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80359e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80359ea:	69db      	ldr	r3, [r3, #28]
 80359ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80359f0:	f040 80b6 	bne.w	8035b60 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80359f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80359f6:	461c      	mov	r4, r3
 80359f8:	f04f 0500 	mov.w	r5, #0
 80359fc:	4622      	mov	r2, r4
 80359fe:	462b      	mov	r3, r5
 8035a00:	1891      	adds	r1, r2, r2
 8035a02:	6439      	str	r1, [r7, #64]	; 0x40
 8035a04:	415b      	adcs	r3, r3
 8035a06:	647b      	str	r3, [r7, #68]	; 0x44
 8035a08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8035a0c:	1912      	adds	r2, r2, r4
 8035a0e:	eb45 0303 	adc.w	r3, r5, r3
 8035a12:	f04f 0000 	mov.w	r0, #0
 8035a16:	f04f 0100 	mov.w	r1, #0
 8035a1a:	00d9      	lsls	r1, r3, #3
 8035a1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8035a20:	00d0      	lsls	r0, r2, #3
 8035a22:	4602      	mov	r2, r0
 8035a24:	460b      	mov	r3, r1
 8035a26:	1911      	adds	r1, r2, r4
 8035a28:	6639      	str	r1, [r7, #96]	; 0x60
 8035a2a:	416b      	adcs	r3, r5
 8035a2c:	667b      	str	r3, [r7, #100]	; 0x64
 8035a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035a30:	685b      	ldr	r3, [r3, #4]
 8035a32:	461a      	mov	r2, r3
 8035a34:	f04f 0300 	mov.w	r3, #0
 8035a38:	1891      	adds	r1, r2, r2
 8035a3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8035a3c:	415b      	adcs	r3, r3
 8035a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8035a40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8035a44:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8035a48:	f7eb f91e 	bl	8020c88 <__aeabi_uldivmod>
 8035a4c:	4602      	mov	r2, r0
 8035a4e:	460b      	mov	r3, r1
 8035a50:	4ba5      	ldr	r3, [pc, #660]	; (8035ce8 <UART_SetConfig+0x38c>)
 8035a52:	fba3 2302 	umull	r2, r3, r3, r2
 8035a56:	095b      	lsrs	r3, r3, #5
 8035a58:	011e      	lsls	r6, r3, #4
 8035a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8035a5c:	461c      	mov	r4, r3
 8035a5e:	f04f 0500 	mov.w	r5, #0
 8035a62:	4622      	mov	r2, r4
 8035a64:	462b      	mov	r3, r5
 8035a66:	1891      	adds	r1, r2, r2
 8035a68:	6339      	str	r1, [r7, #48]	; 0x30
 8035a6a:	415b      	adcs	r3, r3
 8035a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8035a6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8035a72:	1912      	adds	r2, r2, r4
 8035a74:	eb45 0303 	adc.w	r3, r5, r3
 8035a78:	f04f 0000 	mov.w	r0, #0
 8035a7c:	f04f 0100 	mov.w	r1, #0
 8035a80:	00d9      	lsls	r1, r3, #3
 8035a82:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8035a86:	00d0      	lsls	r0, r2, #3
 8035a88:	4602      	mov	r2, r0
 8035a8a:	460b      	mov	r3, r1
 8035a8c:	1911      	adds	r1, r2, r4
 8035a8e:	65b9      	str	r1, [r7, #88]	; 0x58
 8035a90:	416b      	adcs	r3, r5
 8035a92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8035a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035a96:	685b      	ldr	r3, [r3, #4]
 8035a98:	461a      	mov	r2, r3
 8035a9a:	f04f 0300 	mov.w	r3, #0
 8035a9e:	1891      	adds	r1, r2, r2
 8035aa0:	62b9      	str	r1, [r7, #40]	; 0x28
 8035aa2:	415b      	adcs	r3, r3
 8035aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8035aa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8035aaa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8035aae:	f7eb f8eb 	bl	8020c88 <__aeabi_uldivmod>
 8035ab2:	4602      	mov	r2, r0
 8035ab4:	460b      	mov	r3, r1
 8035ab6:	4b8c      	ldr	r3, [pc, #560]	; (8035ce8 <UART_SetConfig+0x38c>)
 8035ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8035abc:	095b      	lsrs	r3, r3, #5
 8035abe:	2164      	movs	r1, #100	; 0x64
 8035ac0:	fb01 f303 	mul.w	r3, r1, r3
 8035ac4:	1ad3      	subs	r3, r2, r3
 8035ac6:	00db      	lsls	r3, r3, #3
 8035ac8:	3332      	adds	r3, #50	; 0x32
 8035aca:	4a87      	ldr	r2, [pc, #540]	; (8035ce8 <UART_SetConfig+0x38c>)
 8035acc:	fba2 2303 	umull	r2, r3, r2, r3
 8035ad0:	095b      	lsrs	r3, r3, #5
 8035ad2:	005b      	lsls	r3, r3, #1
 8035ad4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8035ad8:	441e      	add	r6, r3
 8035ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8035adc:	4618      	mov	r0, r3
 8035ade:	f04f 0100 	mov.w	r1, #0
 8035ae2:	4602      	mov	r2, r0
 8035ae4:	460b      	mov	r3, r1
 8035ae6:	1894      	adds	r4, r2, r2
 8035ae8:	623c      	str	r4, [r7, #32]
 8035aea:	415b      	adcs	r3, r3
 8035aec:	627b      	str	r3, [r7, #36]	; 0x24
 8035aee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8035af2:	1812      	adds	r2, r2, r0
 8035af4:	eb41 0303 	adc.w	r3, r1, r3
 8035af8:	f04f 0400 	mov.w	r4, #0
 8035afc:	f04f 0500 	mov.w	r5, #0
 8035b00:	00dd      	lsls	r5, r3, #3
 8035b02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8035b06:	00d4      	lsls	r4, r2, #3
 8035b08:	4622      	mov	r2, r4
 8035b0a:	462b      	mov	r3, r5
 8035b0c:	1814      	adds	r4, r2, r0
 8035b0e:	653c      	str	r4, [r7, #80]	; 0x50
 8035b10:	414b      	adcs	r3, r1
 8035b12:	657b      	str	r3, [r7, #84]	; 0x54
 8035b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035b16:	685b      	ldr	r3, [r3, #4]
 8035b18:	461a      	mov	r2, r3
 8035b1a:	f04f 0300 	mov.w	r3, #0
 8035b1e:	1891      	adds	r1, r2, r2
 8035b20:	61b9      	str	r1, [r7, #24]
 8035b22:	415b      	adcs	r3, r3
 8035b24:	61fb      	str	r3, [r7, #28]
 8035b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8035b2a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8035b2e:	f7eb f8ab 	bl	8020c88 <__aeabi_uldivmod>
 8035b32:	4602      	mov	r2, r0
 8035b34:	460b      	mov	r3, r1
 8035b36:	4b6c      	ldr	r3, [pc, #432]	; (8035ce8 <UART_SetConfig+0x38c>)
 8035b38:	fba3 1302 	umull	r1, r3, r3, r2
 8035b3c:	095b      	lsrs	r3, r3, #5
 8035b3e:	2164      	movs	r1, #100	; 0x64
 8035b40:	fb01 f303 	mul.w	r3, r1, r3
 8035b44:	1ad3      	subs	r3, r2, r3
 8035b46:	00db      	lsls	r3, r3, #3
 8035b48:	3332      	adds	r3, #50	; 0x32
 8035b4a:	4a67      	ldr	r2, [pc, #412]	; (8035ce8 <UART_SetConfig+0x38c>)
 8035b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8035b50:	095b      	lsrs	r3, r3, #5
 8035b52:	f003 0207 	and.w	r2, r3, #7
 8035b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035b58:	681b      	ldr	r3, [r3, #0]
 8035b5a:	4432      	add	r2, r6
 8035b5c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8035b5e:	e0b9      	b.n	8035cd4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8035b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8035b62:	461c      	mov	r4, r3
 8035b64:	f04f 0500 	mov.w	r5, #0
 8035b68:	4622      	mov	r2, r4
 8035b6a:	462b      	mov	r3, r5
 8035b6c:	1891      	adds	r1, r2, r2
 8035b6e:	6139      	str	r1, [r7, #16]
 8035b70:	415b      	adcs	r3, r3
 8035b72:	617b      	str	r3, [r7, #20]
 8035b74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8035b78:	1912      	adds	r2, r2, r4
 8035b7a:	eb45 0303 	adc.w	r3, r5, r3
 8035b7e:	f04f 0000 	mov.w	r0, #0
 8035b82:	f04f 0100 	mov.w	r1, #0
 8035b86:	00d9      	lsls	r1, r3, #3
 8035b88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8035b8c:	00d0      	lsls	r0, r2, #3
 8035b8e:	4602      	mov	r2, r0
 8035b90:	460b      	mov	r3, r1
 8035b92:	eb12 0804 	adds.w	r8, r2, r4
 8035b96:	eb43 0905 	adc.w	r9, r3, r5
 8035b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035b9c:	685b      	ldr	r3, [r3, #4]
 8035b9e:	4618      	mov	r0, r3
 8035ba0:	f04f 0100 	mov.w	r1, #0
 8035ba4:	f04f 0200 	mov.w	r2, #0
 8035ba8:	f04f 0300 	mov.w	r3, #0
 8035bac:	008b      	lsls	r3, r1, #2
 8035bae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8035bb2:	0082      	lsls	r2, r0, #2
 8035bb4:	4640      	mov	r0, r8
 8035bb6:	4649      	mov	r1, r9
 8035bb8:	f7eb f866 	bl	8020c88 <__aeabi_uldivmod>
 8035bbc:	4602      	mov	r2, r0
 8035bbe:	460b      	mov	r3, r1
 8035bc0:	4b49      	ldr	r3, [pc, #292]	; (8035ce8 <UART_SetConfig+0x38c>)
 8035bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8035bc6:	095b      	lsrs	r3, r3, #5
 8035bc8:	011e      	lsls	r6, r3, #4
 8035bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8035bcc:	4618      	mov	r0, r3
 8035bce:	f04f 0100 	mov.w	r1, #0
 8035bd2:	4602      	mov	r2, r0
 8035bd4:	460b      	mov	r3, r1
 8035bd6:	1894      	adds	r4, r2, r2
 8035bd8:	60bc      	str	r4, [r7, #8]
 8035bda:	415b      	adcs	r3, r3
 8035bdc:	60fb      	str	r3, [r7, #12]
 8035bde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8035be2:	1812      	adds	r2, r2, r0
 8035be4:	eb41 0303 	adc.w	r3, r1, r3
 8035be8:	f04f 0400 	mov.w	r4, #0
 8035bec:	f04f 0500 	mov.w	r5, #0
 8035bf0:	00dd      	lsls	r5, r3, #3
 8035bf2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8035bf6:	00d4      	lsls	r4, r2, #3
 8035bf8:	4622      	mov	r2, r4
 8035bfa:	462b      	mov	r3, r5
 8035bfc:	1814      	adds	r4, r2, r0
 8035bfe:	64bc      	str	r4, [r7, #72]	; 0x48
 8035c00:	414b      	adcs	r3, r1
 8035c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8035c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035c06:	685b      	ldr	r3, [r3, #4]
 8035c08:	4618      	mov	r0, r3
 8035c0a:	f04f 0100 	mov.w	r1, #0
 8035c0e:	f04f 0200 	mov.w	r2, #0
 8035c12:	f04f 0300 	mov.w	r3, #0
 8035c16:	008b      	lsls	r3, r1, #2
 8035c18:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8035c1c:	0082      	lsls	r2, r0, #2
 8035c1e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8035c22:	f7eb f831 	bl	8020c88 <__aeabi_uldivmod>
 8035c26:	4602      	mov	r2, r0
 8035c28:	460b      	mov	r3, r1
 8035c2a:	4b2f      	ldr	r3, [pc, #188]	; (8035ce8 <UART_SetConfig+0x38c>)
 8035c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8035c30:	095b      	lsrs	r3, r3, #5
 8035c32:	2164      	movs	r1, #100	; 0x64
 8035c34:	fb01 f303 	mul.w	r3, r1, r3
 8035c38:	1ad3      	subs	r3, r2, r3
 8035c3a:	011b      	lsls	r3, r3, #4
 8035c3c:	3332      	adds	r3, #50	; 0x32
 8035c3e:	4a2a      	ldr	r2, [pc, #168]	; (8035ce8 <UART_SetConfig+0x38c>)
 8035c40:	fba2 2303 	umull	r2, r3, r2, r3
 8035c44:	095b      	lsrs	r3, r3, #5
 8035c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8035c4a:	441e      	add	r6, r3
 8035c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8035c4e:	4618      	mov	r0, r3
 8035c50:	f04f 0100 	mov.w	r1, #0
 8035c54:	4602      	mov	r2, r0
 8035c56:	460b      	mov	r3, r1
 8035c58:	1894      	adds	r4, r2, r2
 8035c5a:	603c      	str	r4, [r7, #0]
 8035c5c:	415b      	adcs	r3, r3
 8035c5e:	607b      	str	r3, [r7, #4]
 8035c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8035c64:	1812      	adds	r2, r2, r0
 8035c66:	eb41 0303 	adc.w	r3, r1, r3
 8035c6a:	f04f 0400 	mov.w	r4, #0
 8035c6e:	f04f 0500 	mov.w	r5, #0
 8035c72:	00dd      	lsls	r5, r3, #3
 8035c74:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8035c78:	00d4      	lsls	r4, r2, #3
 8035c7a:	4622      	mov	r2, r4
 8035c7c:	462b      	mov	r3, r5
 8035c7e:	eb12 0a00 	adds.w	sl, r2, r0
 8035c82:	eb43 0b01 	adc.w	fp, r3, r1
 8035c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035c88:	685b      	ldr	r3, [r3, #4]
 8035c8a:	4618      	mov	r0, r3
 8035c8c:	f04f 0100 	mov.w	r1, #0
 8035c90:	f04f 0200 	mov.w	r2, #0
 8035c94:	f04f 0300 	mov.w	r3, #0
 8035c98:	008b      	lsls	r3, r1, #2
 8035c9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8035c9e:	0082      	lsls	r2, r0, #2
 8035ca0:	4650      	mov	r0, sl
 8035ca2:	4659      	mov	r1, fp
 8035ca4:	f7ea fff0 	bl	8020c88 <__aeabi_uldivmod>
 8035ca8:	4602      	mov	r2, r0
 8035caa:	460b      	mov	r3, r1
 8035cac:	4b0e      	ldr	r3, [pc, #56]	; (8035ce8 <UART_SetConfig+0x38c>)
 8035cae:	fba3 1302 	umull	r1, r3, r3, r2
 8035cb2:	095b      	lsrs	r3, r3, #5
 8035cb4:	2164      	movs	r1, #100	; 0x64
 8035cb6:	fb01 f303 	mul.w	r3, r1, r3
 8035cba:	1ad3      	subs	r3, r2, r3
 8035cbc:	011b      	lsls	r3, r3, #4
 8035cbe:	3332      	adds	r3, #50	; 0x32
 8035cc0:	4a09      	ldr	r2, [pc, #36]	; (8035ce8 <UART_SetConfig+0x38c>)
 8035cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8035cc6:	095b      	lsrs	r3, r3, #5
 8035cc8:	f003 020f 	and.w	r2, r3, #15
 8035ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8035cce:	681b      	ldr	r3, [r3, #0]
 8035cd0:	4432      	add	r2, r6
 8035cd2:	609a      	str	r2, [r3, #8]
}
 8035cd4:	bf00      	nop
 8035cd6:	377c      	adds	r7, #124	; 0x7c
 8035cd8:	46bd      	mov	sp, r7
 8035cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8035cde:	bf00      	nop
 8035ce0:	40011000 	.word	0x40011000
 8035ce4:	40011400 	.word	0x40011400
 8035ce8:	51eb851f 	.word	0x51eb851f

08035cec <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8035cec:	b084      	sub	sp, #16
 8035cee:	b480      	push	{r7}
 8035cf0:	b085      	sub	sp, #20
 8035cf2:	af00      	add	r7, sp, #0
 8035cf4:	6078      	str	r0, [r7, #4]
 8035cf6:	f107 001c 	add.w	r0, r7, #28
 8035cfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8035cfe:	2300      	movs	r3, #0
 8035d00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8035d02:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8035d04:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8035d06:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8035d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8035d0a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8035d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8035d0e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8035d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8035d12:	431a      	orrs	r2, r3
             Init.ClockDiv
 8035d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8035d16:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8035d18:	68fa      	ldr	r2, [r7, #12]
 8035d1a:	4313      	orrs	r3, r2
 8035d1c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8035d1e:	687b      	ldr	r3, [r7, #4]
 8035d20:	685b      	ldr	r3, [r3, #4]
 8035d22:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8035d26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8035d2a:	68fa      	ldr	r2, [r7, #12]
 8035d2c:	431a      	orrs	r2, r3
 8035d2e:	687b      	ldr	r3, [r7, #4]
 8035d30:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8035d32:	2300      	movs	r3, #0
}
 8035d34:	4618      	mov	r0, r3
 8035d36:	3714      	adds	r7, #20
 8035d38:	46bd      	mov	sp, r7
 8035d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035d3e:	b004      	add	sp, #16
 8035d40:	4770      	bx	lr

08035d42 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8035d42:	b480      	push	{r7}
 8035d44:	b083      	sub	sp, #12
 8035d46:	af00      	add	r7, sp, #0
 8035d48:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8035d4a:	687b      	ldr	r3, [r7, #4]
 8035d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8035d50:	4618      	mov	r0, r3
 8035d52:	370c      	adds	r7, #12
 8035d54:	46bd      	mov	sp, r7
 8035d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035d5a:	4770      	bx	lr

08035d5c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8035d5c:	b480      	push	{r7}
 8035d5e:	b083      	sub	sp, #12
 8035d60:	af00      	add	r7, sp, #0
 8035d62:	6078      	str	r0, [r7, #4]
 8035d64:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8035d66:	683b      	ldr	r3, [r7, #0]
 8035d68:	681a      	ldr	r2, [r3, #0]
 8035d6a:	687b      	ldr	r3, [r7, #4]
 8035d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8035d70:	2300      	movs	r3, #0
}
 8035d72:	4618      	mov	r0, r3
 8035d74:	370c      	adds	r7, #12
 8035d76:	46bd      	mov	sp, r7
 8035d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035d7c:	4770      	bx	lr

08035d7e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8035d7e:	b580      	push	{r7, lr}
 8035d80:	b082      	sub	sp, #8
 8035d82:	af00      	add	r7, sp, #0
 8035d84:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8035d86:	687b      	ldr	r3, [r7, #4]
 8035d88:	2203      	movs	r2, #3
 8035d8a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8035d8c:	2002      	movs	r0, #2
 8035d8e:	f7fc f9bf 	bl	8032110 <HAL_Delay>
  
  return HAL_OK;
 8035d92:	2300      	movs	r3, #0
}
 8035d94:	4618      	mov	r0, r3
 8035d96:	3708      	adds	r7, #8
 8035d98:	46bd      	mov	sp, r7
 8035d9a:	bd80      	pop	{r7, pc}

08035d9c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8035d9c:	b480      	push	{r7}
 8035d9e:	b083      	sub	sp, #12
 8035da0:	af00      	add	r7, sp, #0
 8035da2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8035da4:	687b      	ldr	r3, [r7, #4]
 8035da6:	681b      	ldr	r3, [r3, #0]
 8035da8:	f003 0303 	and.w	r3, r3, #3
}
 8035dac:	4618      	mov	r0, r3
 8035dae:	370c      	adds	r7, #12
 8035db0:	46bd      	mov	sp, r7
 8035db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035db6:	4770      	bx	lr

08035db8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8035db8:	b480      	push	{r7}
 8035dba:	b085      	sub	sp, #20
 8035dbc:	af00      	add	r7, sp, #0
 8035dbe:	6078      	str	r0, [r7, #4]
 8035dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8035dc2:	2300      	movs	r3, #0
 8035dc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8035dc6:	683b      	ldr	r3, [r7, #0]
 8035dc8:	681a      	ldr	r2, [r3, #0]
 8035dca:	687b      	ldr	r3, [r7, #4]
 8035dcc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8035dce:	683b      	ldr	r3, [r7, #0]
 8035dd0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8035dd2:	683b      	ldr	r3, [r7, #0]
 8035dd4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8035dd6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8035dd8:	683b      	ldr	r3, [r7, #0]
 8035dda:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8035ddc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8035dde:	683b      	ldr	r3, [r7, #0]
 8035de0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8035de2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8035de4:	68fa      	ldr	r2, [r7, #12]
 8035de6:	4313      	orrs	r3, r2
 8035de8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8035dea:	687b      	ldr	r3, [r7, #4]
 8035dec:	68db      	ldr	r3, [r3, #12]
 8035dee:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8035df2:	f023 030f 	bic.w	r3, r3, #15
 8035df6:	68fa      	ldr	r2, [r7, #12]
 8035df8:	431a      	orrs	r2, r3
 8035dfa:	687b      	ldr	r3, [r7, #4]
 8035dfc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8035dfe:	2300      	movs	r3, #0
}
 8035e00:	4618      	mov	r0, r3
 8035e02:	3714      	adds	r7, #20
 8035e04:	46bd      	mov	sp, r7
 8035e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035e0a:	4770      	bx	lr

08035e0c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8035e0c:	b480      	push	{r7}
 8035e0e:	b083      	sub	sp, #12
 8035e10:	af00      	add	r7, sp, #0
 8035e12:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8035e14:	687b      	ldr	r3, [r7, #4]
 8035e16:	691b      	ldr	r3, [r3, #16]
 8035e18:	b2db      	uxtb	r3, r3
}
 8035e1a:	4618      	mov	r0, r3
 8035e1c:	370c      	adds	r7, #12
 8035e1e:	46bd      	mov	sp, r7
 8035e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035e24:	4770      	bx	lr

08035e26 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8035e26:	b480      	push	{r7}
 8035e28:	b085      	sub	sp, #20
 8035e2a:	af00      	add	r7, sp, #0
 8035e2c:	6078      	str	r0, [r7, #4]
 8035e2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8035e30:	687b      	ldr	r3, [r7, #4]
 8035e32:	3314      	adds	r3, #20
 8035e34:	461a      	mov	r2, r3
 8035e36:	683b      	ldr	r3, [r7, #0]
 8035e38:	4413      	add	r3, r2
 8035e3a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8035e3c:	68fb      	ldr	r3, [r7, #12]
 8035e3e:	681b      	ldr	r3, [r3, #0]
}  
 8035e40:	4618      	mov	r0, r3
 8035e42:	3714      	adds	r7, #20
 8035e44:	46bd      	mov	sp, r7
 8035e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035e4a:	4770      	bx	lr

08035e4c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8035e4c:	b480      	push	{r7}
 8035e4e:	b085      	sub	sp, #20
 8035e50:	af00      	add	r7, sp, #0
 8035e52:	6078      	str	r0, [r7, #4]
 8035e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8035e56:	2300      	movs	r3, #0
 8035e58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8035e5a:	683b      	ldr	r3, [r7, #0]
 8035e5c:	681a      	ldr	r2, [r3, #0]
 8035e5e:	687b      	ldr	r3, [r7, #4]
 8035e60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8035e62:	683b      	ldr	r3, [r7, #0]
 8035e64:	685a      	ldr	r2, [r3, #4]
 8035e66:	687b      	ldr	r3, [r7, #4]
 8035e68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8035e6a:	683b      	ldr	r3, [r7, #0]
 8035e6c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8035e6e:	683b      	ldr	r3, [r7, #0]
 8035e70:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8035e72:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8035e74:	683b      	ldr	r3, [r7, #0]
 8035e76:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8035e78:	431a      	orrs	r2, r3
                       Data->DPSM);
 8035e7a:	683b      	ldr	r3, [r7, #0]
 8035e7c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8035e7e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8035e80:	68fa      	ldr	r2, [r7, #12]
 8035e82:	4313      	orrs	r3, r2
 8035e84:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8035e86:	687b      	ldr	r3, [r7, #4]
 8035e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8035e8a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8035e8e:	68fb      	ldr	r3, [r7, #12]
 8035e90:	431a      	orrs	r2, r3
 8035e92:	687b      	ldr	r3, [r7, #4]
 8035e94:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8035e96:	2300      	movs	r3, #0

}
 8035e98:	4618      	mov	r0, r3
 8035e9a:	3714      	adds	r7, #20
 8035e9c:	46bd      	mov	sp, r7
 8035e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8035ea2:	4770      	bx	lr

08035ea4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8035ea4:	b580      	push	{r7, lr}
 8035ea6:	b088      	sub	sp, #32
 8035ea8:	af00      	add	r7, sp, #0
 8035eaa:	6078      	str	r0, [r7, #4]
 8035eac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8035eae:	683b      	ldr	r3, [r7, #0]
 8035eb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8035eb2:	2310      	movs	r3, #16
 8035eb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8035eb6:	2340      	movs	r3, #64	; 0x40
 8035eb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8035eba:	2300      	movs	r3, #0
 8035ebc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8035ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8035ec2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8035ec4:	f107 0308 	add.w	r3, r7, #8
 8035ec8:	4619      	mov	r1, r3
 8035eca:	6878      	ldr	r0, [r7, #4]
 8035ecc:	f7ff ff74 	bl	8035db8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8035ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8035ed4:	2110      	movs	r1, #16
 8035ed6:	6878      	ldr	r0, [r7, #4]
 8035ed8:	f000 fa02 	bl	80362e0 <SDMMC_GetCmdResp1>
 8035edc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8035ede:	69fb      	ldr	r3, [r7, #28]
}
 8035ee0:	4618      	mov	r0, r3
 8035ee2:	3720      	adds	r7, #32
 8035ee4:	46bd      	mov	sp, r7
 8035ee6:	bd80      	pop	{r7, pc}

08035ee8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8035ee8:	b580      	push	{r7, lr}
 8035eea:	b088      	sub	sp, #32
 8035eec:	af00      	add	r7, sp, #0
 8035eee:	6078      	str	r0, [r7, #4]
 8035ef0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8035ef2:	683b      	ldr	r3, [r7, #0]
 8035ef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8035ef6:	2311      	movs	r3, #17
 8035ef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8035efa:	2340      	movs	r3, #64	; 0x40
 8035efc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8035efe:	2300      	movs	r3, #0
 8035f00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8035f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8035f06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8035f08:	f107 0308 	add.w	r3, r7, #8
 8035f0c:	4619      	mov	r1, r3
 8035f0e:	6878      	ldr	r0, [r7, #4]
 8035f10:	f7ff ff52 	bl	8035db8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8035f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8035f18:	2111      	movs	r1, #17
 8035f1a:	6878      	ldr	r0, [r7, #4]
 8035f1c:	f000 f9e0 	bl	80362e0 <SDMMC_GetCmdResp1>
 8035f20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8035f22:	69fb      	ldr	r3, [r7, #28]
}
 8035f24:	4618      	mov	r0, r3
 8035f26:	3720      	adds	r7, #32
 8035f28:	46bd      	mov	sp, r7
 8035f2a:	bd80      	pop	{r7, pc}

08035f2c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8035f2c:	b580      	push	{r7, lr}
 8035f2e:	b088      	sub	sp, #32
 8035f30:	af00      	add	r7, sp, #0
 8035f32:	6078      	str	r0, [r7, #4]
 8035f34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8035f36:	683b      	ldr	r3, [r7, #0]
 8035f38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8035f3a:	2312      	movs	r3, #18
 8035f3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8035f3e:	2340      	movs	r3, #64	; 0x40
 8035f40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8035f42:	2300      	movs	r3, #0
 8035f44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8035f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8035f4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8035f4c:	f107 0308 	add.w	r3, r7, #8
 8035f50:	4619      	mov	r1, r3
 8035f52:	6878      	ldr	r0, [r7, #4]
 8035f54:	f7ff ff30 	bl	8035db8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8035f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8035f5c:	2112      	movs	r1, #18
 8035f5e:	6878      	ldr	r0, [r7, #4]
 8035f60:	f000 f9be 	bl	80362e0 <SDMMC_GetCmdResp1>
 8035f64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8035f66:	69fb      	ldr	r3, [r7, #28]
}
 8035f68:	4618      	mov	r0, r3
 8035f6a:	3720      	adds	r7, #32
 8035f6c:	46bd      	mov	sp, r7
 8035f6e:	bd80      	pop	{r7, pc}

08035f70 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8035f70:	b580      	push	{r7, lr}
 8035f72:	b088      	sub	sp, #32
 8035f74:	af00      	add	r7, sp, #0
 8035f76:	6078      	str	r0, [r7, #4]
 8035f78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8035f7a:	683b      	ldr	r3, [r7, #0]
 8035f7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8035f7e:	2318      	movs	r3, #24
 8035f80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8035f82:	2340      	movs	r3, #64	; 0x40
 8035f84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8035f86:	2300      	movs	r3, #0
 8035f88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8035f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8035f8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8035f90:	f107 0308 	add.w	r3, r7, #8
 8035f94:	4619      	mov	r1, r3
 8035f96:	6878      	ldr	r0, [r7, #4]
 8035f98:	f7ff ff0e 	bl	8035db8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8035f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8035fa0:	2118      	movs	r1, #24
 8035fa2:	6878      	ldr	r0, [r7, #4]
 8035fa4:	f000 f99c 	bl	80362e0 <SDMMC_GetCmdResp1>
 8035fa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8035faa:	69fb      	ldr	r3, [r7, #28]
}
 8035fac:	4618      	mov	r0, r3
 8035fae:	3720      	adds	r7, #32
 8035fb0:	46bd      	mov	sp, r7
 8035fb2:	bd80      	pop	{r7, pc}

08035fb4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8035fb4:	b580      	push	{r7, lr}
 8035fb6:	b088      	sub	sp, #32
 8035fb8:	af00      	add	r7, sp, #0
 8035fba:	6078      	str	r0, [r7, #4]
 8035fbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8035fbe:	683b      	ldr	r3, [r7, #0]
 8035fc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8035fc2:	2319      	movs	r3, #25
 8035fc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8035fc6:	2340      	movs	r3, #64	; 0x40
 8035fc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8035fca:	2300      	movs	r3, #0
 8035fcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8035fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8035fd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8035fd4:	f107 0308 	add.w	r3, r7, #8
 8035fd8:	4619      	mov	r1, r3
 8035fda:	6878      	ldr	r0, [r7, #4]
 8035fdc:	f7ff feec 	bl	8035db8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8035fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8035fe4:	2119      	movs	r1, #25
 8035fe6:	6878      	ldr	r0, [r7, #4]
 8035fe8:	f000 f97a 	bl	80362e0 <SDMMC_GetCmdResp1>
 8035fec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8035fee:	69fb      	ldr	r3, [r7, #28]
}
 8035ff0:	4618      	mov	r0, r3
 8035ff2:	3720      	adds	r7, #32
 8035ff4:	46bd      	mov	sp, r7
 8035ff6:	bd80      	pop	{r7, pc}

08035ff8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8035ff8:	b580      	push	{r7, lr}
 8035ffa:	b088      	sub	sp, #32
 8035ffc:	af00      	add	r7, sp, #0
 8035ffe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8036000:	2300      	movs	r3, #0
 8036002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8036004:	230c      	movs	r3, #12
 8036006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8036008:	2340      	movs	r3, #64	; 0x40
 803600a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 803600c:	2300      	movs	r3, #0
 803600e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8036010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8036014:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8036016:	f107 0308 	add.w	r3, r7, #8
 803601a:	4619      	mov	r1, r3
 803601c:	6878      	ldr	r0, [r7, #4]
 803601e:	f7ff fecb 	bl	8035db8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8036022:	4a05      	ldr	r2, [pc, #20]	; (8036038 <SDMMC_CmdStopTransfer+0x40>)
 8036024:	210c      	movs	r1, #12
 8036026:	6878      	ldr	r0, [r7, #4]
 8036028:	f000 f95a 	bl	80362e0 <SDMMC_GetCmdResp1>
 803602c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 803602e:	69fb      	ldr	r3, [r7, #28]
}
 8036030:	4618      	mov	r0, r3
 8036032:	3720      	adds	r7, #32
 8036034:	46bd      	mov	sp, r7
 8036036:	bd80      	pop	{r7, pc}
 8036038:	05f5e100 	.word	0x05f5e100

0803603c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 803603c:	b580      	push	{r7, lr}
 803603e:	b08a      	sub	sp, #40	; 0x28
 8036040:	af00      	add	r7, sp, #0
 8036042:	60f8      	str	r0, [r7, #12]
 8036044:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8036048:	683b      	ldr	r3, [r7, #0]
 803604a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 803604c:	2307      	movs	r3, #7
 803604e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8036050:	2340      	movs	r3, #64	; 0x40
 8036052:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8036054:	2300      	movs	r3, #0
 8036056:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8036058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803605c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 803605e:	f107 0310 	add.w	r3, r7, #16
 8036062:	4619      	mov	r1, r3
 8036064:	68f8      	ldr	r0, [r7, #12]
 8036066:	f7ff fea7 	bl	8035db8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 803606a:	f241 3288 	movw	r2, #5000	; 0x1388
 803606e:	2107      	movs	r1, #7
 8036070:	68f8      	ldr	r0, [r7, #12]
 8036072:	f000 f935 	bl	80362e0 <SDMMC_GetCmdResp1>
 8036076:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8036078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 803607a:	4618      	mov	r0, r3
 803607c:	3728      	adds	r7, #40	; 0x28
 803607e:	46bd      	mov	sp, r7
 8036080:	bd80      	pop	{r7, pc}

08036082 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8036082:	b580      	push	{r7, lr}
 8036084:	b088      	sub	sp, #32
 8036086:	af00      	add	r7, sp, #0
 8036088:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 803608a:	2300      	movs	r3, #0
 803608c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 803608e:	2300      	movs	r3, #0
 8036090:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8036092:	2300      	movs	r3, #0
 8036094:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8036096:	2300      	movs	r3, #0
 8036098:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 803609a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803609e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80360a0:	f107 0308 	add.w	r3, r7, #8
 80360a4:	4619      	mov	r1, r3
 80360a6:	6878      	ldr	r0, [r7, #4]
 80360a8:	f7ff fe86 	bl	8035db8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80360ac:	6878      	ldr	r0, [r7, #4]
 80360ae:	f000 f8eb 	bl	8036288 <SDMMC_GetCmdError>
 80360b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80360b4:	69fb      	ldr	r3, [r7, #28]
}
 80360b6:	4618      	mov	r0, r3
 80360b8:	3720      	adds	r7, #32
 80360ba:	46bd      	mov	sp, r7
 80360bc:	bd80      	pop	{r7, pc}

080360be <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80360be:	b580      	push	{r7, lr}
 80360c0:	b088      	sub	sp, #32
 80360c2:	af00      	add	r7, sp, #0
 80360c4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80360c6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80360ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80360cc:	2308      	movs	r3, #8
 80360ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80360d0:	2340      	movs	r3, #64	; 0x40
 80360d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80360d4:	2300      	movs	r3, #0
 80360d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80360d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80360dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80360de:	f107 0308 	add.w	r3, r7, #8
 80360e2:	4619      	mov	r1, r3
 80360e4:	6878      	ldr	r0, [r7, #4]
 80360e6:	f7ff fe67 	bl	8035db8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80360ea:	6878      	ldr	r0, [r7, #4]
 80360ec:	f000 fae2 	bl	80366b4 <SDMMC_GetCmdResp7>
 80360f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80360f2:	69fb      	ldr	r3, [r7, #28]
}
 80360f4:	4618      	mov	r0, r3
 80360f6:	3720      	adds	r7, #32
 80360f8:	46bd      	mov	sp, r7
 80360fa:	bd80      	pop	{r7, pc}

080360fc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80360fc:	b580      	push	{r7, lr}
 80360fe:	b088      	sub	sp, #32
 8036100:	af00      	add	r7, sp, #0
 8036102:	6078      	str	r0, [r7, #4]
 8036104:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8036106:	683b      	ldr	r3, [r7, #0]
 8036108:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 803610a:	2337      	movs	r3, #55	; 0x37
 803610c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 803610e:	2340      	movs	r3, #64	; 0x40
 8036110:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8036112:	2300      	movs	r3, #0
 8036114:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8036116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803611a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 803611c:	f107 0308 	add.w	r3, r7, #8
 8036120:	4619      	mov	r1, r3
 8036122:	6878      	ldr	r0, [r7, #4]
 8036124:	f7ff fe48 	bl	8035db8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8036128:	f241 3288 	movw	r2, #5000	; 0x1388
 803612c:	2137      	movs	r1, #55	; 0x37
 803612e:	6878      	ldr	r0, [r7, #4]
 8036130:	f000 f8d6 	bl	80362e0 <SDMMC_GetCmdResp1>
 8036134:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8036136:	69fb      	ldr	r3, [r7, #28]
}
 8036138:	4618      	mov	r0, r3
 803613a:	3720      	adds	r7, #32
 803613c:	46bd      	mov	sp, r7
 803613e:	bd80      	pop	{r7, pc}

08036140 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8036140:	b580      	push	{r7, lr}
 8036142:	b088      	sub	sp, #32
 8036144:	af00      	add	r7, sp, #0
 8036146:	6078      	str	r0, [r7, #4]
 8036148:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 803614a:	683b      	ldr	r3, [r7, #0]
 803614c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8036150:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8036154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8036156:	2329      	movs	r3, #41	; 0x29
 8036158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 803615a:	2340      	movs	r3, #64	; 0x40
 803615c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 803615e:	2300      	movs	r3, #0
 8036160:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8036162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8036166:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8036168:	f107 0308 	add.w	r3, r7, #8
 803616c:	4619      	mov	r1, r3
 803616e:	6878      	ldr	r0, [r7, #4]
 8036170:	f7ff fe22 	bl	8035db8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8036174:	6878      	ldr	r0, [r7, #4]
 8036176:	f000 f9e9 	bl	803654c <SDMMC_GetCmdResp3>
 803617a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 803617c:	69fb      	ldr	r3, [r7, #28]
}
 803617e:	4618      	mov	r0, r3
 8036180:	3720      	adds	r7, #32
 8036182:	46bd      	mov	sp, r7
 8036184:	bd80      	pop	{r7, pc}

08036186 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8036186:	b580      	push	{r7, lr}
 8036188:	b088      	sub	sp, #32
 803618a:	af00      	add	r7, sp, #0
 803618c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 803618e:	2300      	movs	r3, #0
 8036190:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8036192:	2302      	movs	r3, #2
 8036194:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8036196:	23c0      	movs	r3, #192	; 0xc0
 8036198:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 803619a:	2300      	movs	r3, #0
 803619c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 803619e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80361a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80361a4:	f107 0308 	add.w	r3, r7, #8
 80361a8:	4619      	mov	r1, r3
 80361aa:	6878      	ldr	r0, [r7, #4]
 80361ac:	f7ff fe04 	bl	8035db8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80361b0:	6878      	ldr	r0, [r7, #4]
 80361b2:	f000 f983 	bl	80364bc <SDMMC_GetCmdResp2>
 80361b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80361b8:	69fb      	ldr	r3, [r7, #28]
}
 80361ba:	4618      	mov	r0, r3
 80361bc:	3720      	adds	r7, #32
 80361be:	46bd      	mov	sp, r7
 80361c0:	bd80      	pop	{r7, pc}

080361c2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80361c2:	b580      	push	{r7, lr}
 80361c4:	b088      	sub	sp, #32
 80361c6:	af00      	add	r7, sp, #0
 80361c8:	6078      	str	r0, [r7, #4]
 80361ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80361cc:	683b      	ldr	r3, [r7, #0]
 80361ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80361d0:	2309      	movs	r3, #9
 80361d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80361d4:	23c0      	movs	r3, #192	; 0xc0
 80361d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80361d8:	2300      	movs	r3, #0
 80361da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80361dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80361e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80361e2:	f107 0308 	add.w	r3, r7, #8
 80361e6:	4619      	mov	r1, r3
 80361e8:	6878      	ldr	r0, [r7, #4]
 80361ea:	f7ff fde5 	bl	8035db8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80361ee:	6878      	ldr	r0, [r7, #4]
 80361f0:	f000 f964 	bl	80364bc <SDMMC_GetCmdResp2>
 80361f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80361f6:	69fb      	ldr	r3, [r7, #28]
}
 80361f8:	4618      	mov	r0, r3
 80361fa:	3720      	adds	r7, #32
 80361fc:	46bd      	mov	sp, r7
 80361fe:	bd80      	pop	{r7, pc}

08036200 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8036200:	b580      	push	{r7, lr}
 8036202:	b088      	sub	sp, #32
 8036204:	af00      	add	r7, sp, #0
 8036206:	6078      	str	r0, [r7, #4]
 8036208:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 803620a:	2300      	movs	r3, #0
 803620c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 803620e:	2303      	movs	r3, #3
 8036210:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8036212:	2340      	movs	r3, #64	; 0x40
 8036214:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8036216:	2300      	movs	r3, #0
 8036218:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 803621a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803621e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8036220:	f107 0308 	add.w	r3, r7, #8
 8036224:	4619      	mov	r1, r3
 8036226:	6878      	ldr	r0, [r7, #4]
 8036228:	f7ff fdc6 	bl	8035db8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 803622c:	683a      	ldr	r2, [r7, #0]
 803622e:	2103      	movs	r1, #3
 8036230:	6878      	ldr	r0, [r7, #4]
 8036232:	f000 f9c9 	bl	80365c8 <SDMMC_GetCmdResp6>
 8036236:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8036238:	69fb      	ldr	r3, [r7, #28]
}
 803623a:	4618      	mov	r0, r3
 803623c:	3720      	adds	r7, #32
 803623e:	46bd      	mov	sp, r7
 8036240:	bd80      	pop	{r7, pc}

08036242 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8036242:	b580      	push	{r7, lr}
 8036244:	b088      	sub	sp, #32
 8036246:	af00      	add	r7, sp, #0
 8036248:	6078      	str	r0, [r7, #4]
 803624a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 803624c:	683b      	ldr	r3, [r7, #0]
 803624e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8036250:	230d      	movs	r3, #13
 8036252:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8036254:	2340      	movs	r3, #64	; 0x40
 8036256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8036258:	2300      	movs	r3, #0
 803625a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 803625c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8036260:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8036262:	f107 0308 	add.w	r3, r7, #8
 8036266:	4619      	mov	r1, r3
 8036268:	6878      	ldr	r0, [r7, #4]
 803626a:	f7ff fda5 	bl	8035db8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 803626e:	f241 3288 	movw	r2, #5000	; 0x1388
 8036272:	210d      	movs	r1, #13
 8036274:	6878      	ldr	r0, [r7, #4]
 8036276:	f000 f833 	bl	80362e0 <SDMMC_GetCmdResp1>
 803627a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 803627c:	69fb      	ldr	r3, [r7, #28]
}
 803627e:	4618      	mov	r0, r3
 8036280:	3720      	adds	r7, #32
 8036282:	46bd      	mov	sp, r7
 8036284:	bd80      	pop	{r7, pc}
	...

08036288 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8036288:	b480      	push	{r7}
 803628a:	b085      	sub	sp, #20
 803628c:	af00      	add	r7, sp, #0
 803628e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8036290:	4b11      	ldr	r3, [pc, #68]	; (80362d8 <SDMMC_GetCmdError+0x50>)
 8036292:	681b      	ldr	r3, [r3, #0]
 8036294:	4a11      	ldr	r2, [pc, #68]	; (80362dc <SDMMC_GetCmdError+0x54>)
 8036296:	fba2 2303 	umull	r2, r3, r2, r3
 803629a:	0a5b      	lsrs	r3, r3, #9
 803629c:	f241 3288 	movw	r2, #5000	; 0x1388
 80362a0:	fb02 f303 	mul.w	r3, r2, r3
 80362a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80362a6:	68fb      	ldr	r3, [r7, #12]
 80362a8:	1e5a      	subs	r2, r3, #1
 80362aa:	60fa      	str	r2, [r7, #12]
 80362ac:	2b00      	cmp	r3, #0
 80362ae:	d102      	bne.n	80362b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80362b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80362b4:	e009      	b.n	80362ca <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80362b6:	687b      	ldr	r3, [r7, #4]
 80362b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80362ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80362be:	2b00      	cmp	r3, #0
 80362c0:	d0f1      	beq.n	80362a6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80362c2:	687b      	ldr	r3, [r7, #4]
 80362c4:	22c5      	movs	r2, #197	; 0xc5
 80362c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80362c8:	2300      	movs	r3, #0
}
 80362ca:	4618      	mov	r0, r3
 80362cc:	3714      	adds	r7, #20
 80362ce:	46bd      	mov	sp, r7
 80362d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80362d4:	4770      	bx	lr
 80362d6:	bf00      	nop
 80362d8:	20000020 	.word	0x20000020
 80362dc:	10624dd3 	.word	0x10624dd3

080362e0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80362e0:	b580      	push	{r7, lr}
 80362e2:	b088      	sub	sp, #32
 80362e4:	af00      	add	r7, sp, #0
 80362e6:	60f8      	str	r0, [r7, #12]
 80362e8:	460b      	mov	r3, r1
 80362ea:	607a      	str	r2, [r7, #4]
 80362ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80362ee:	4b70      	ldr	r3, [pc, #448]	; (80364b0 <SDMMC_GetCmdResp1+0x1d0>)
 80362f0:	681b      	ldr	r3, [r3, #0]
 80362f2:	4a70      	ldr	r2, [pc, #448]	; (80364b4 <SDMMC_GetCmdResp1+0x1d4>)
 80362f4:	fba2 2303 	umull	r2, r3, r2, r3
 80362f8:	0a5a      	lsrs	r2, r3, #9
 80362fa:	687b      	ldr	r3, [r7, #4]
 80362fc:	fb02 f303 	mul.w	r3, r2, r3
 8036300:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8036302:	69fb      	ldr	r3, [r7, #28]
 8036304:	1e5a      	subs	r2, r3, #1
 8036306:	61fa      	str	r2, [r7, #28]
 8036308:	2b00      	cmp	r3, #0
 803630a:	d102      	bne.n	8036312 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 803630c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8036310:	e0c9      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8036312:	68fb      	ldr	r3, [r7, #12]
 8036314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036316:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8036318:	69bb      	ldr	r3, [r7, #24]
 803631a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 803631e:	2b00      	cmp	r3, #0
 8036320:	d0ef      	beq.n	8036302 <SDMMC_GetCmdResp1+0x22>
 8036322:	69bb      	ldr	r3, [r7, #24]
 8036324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8036328:	2b00      	cmp	r3, #0
 803632a:	d1ea      	bne.n	8036302 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 803632c:	68fb      	ldr	r3, [r7, #12]
 803632e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036330:	f003 0304 	and.w	r3, r3, #4
 8036334:	2b00      	cmp	r3, #0
 8036336:	d004      	beq.n	8036342 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8036338:	68fb      	ldr	r3, [r7, #12]
 803633a:	2204      	movs	r2, #4
 803633c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 803633e:	2304      	movs	r3, #4
 8036340:	e0b1      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8036342:	68fb      	ldr	r3, [r7, #12]
 8036344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036346:	f003 0301 	and.w	r3, r3, #1
 803634a:	2b00      	cmp	r3, #0
 803634c:	d004      	beq.n	8036358 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 803634e:	68fb      	ldr	r3, [r7, #12]
 8036350:	2201      	movs	r2, #1
 8036352:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8036354:	2301      	movs	r3, #1
 8036356:	e0a6      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8036358:	68fb      	ldr	r3, [r7, #12]
 803635a:	22c5      	movs	r2, #197	; 0xc5
 803635c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 803635e:	68f8      	ldr	r0, [r7, #12]
 8036360:	f7ff fd54 	bl	8035e0c <SDIO_GetCommandResponse>
 8036364:	4603      	mov	r3, r0
 8036366:	461a      	mov	r2, r3
 8036368:	7afb      	ldrb	r3, [r7, #11]
 803636a:	4293      	cmp	r3, r2
 803636c:	d001      	beq.n	8036372 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 803636e:	2301      	movs	r3, #1
 8036370:	e099      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8036372:	2100      	movs	r1, #0
 8036374:	68f8      	ldr	r0, [r7, #12]
 8036376:	f7ff fd56 	bl	8035e26 <SDIO_GetResponse>
 803637a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 803637c:	697a      	ldr	r2, [r7, #20]
 803637e:	4b4e      	ldr	r3, [pc, #312]	; (80364b8 <SDMMC_GetCmdResp1+0x1d8>)
 8036380:	4013      	ands	r3, r2
 8036382:	2b00      	cmp	r3, #0
 8036384:	d101      	bne.n	803638a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8036386:	2300      	movs	r3, #0
 8036388:	e08d      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 803638a:	697b      	ldr	r3, [r7, #20]
 803638c:	2b00      	cmp	r3, #0
 803638e:	da02      	bge.n	8036396 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8036390:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8036394:	e087      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8036396:	697b      	ldr	r3, [r7, #20]
 8036398:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 803639c:	2b00      	cmp	r3, #0
 803639e:	d001      	beq.n	80363a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80363a0:	2340      	movs	r3, #64	; 0x40
 80363a2:	e080      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80363a4:	697b      	ldr	r3, [r7, #20]
 80363a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80363aa:	2b00      	cmp	r3, #0
 80363ac:	d001      	beq.n	80363b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80363ae:	2380      	movs	r3, #128	; 0x80
 80363b0:	e079      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80363b2:	697b      	ldr	r3, [r7, #20]
 80363b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80363b8:	2b00      	cmp	r3, #0
 80363ba:	d002      	beq.n	80363c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80363bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80363c0:	e071      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80363c2:	697b      	ldr	r3, [r7, #20]
 80363c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80363c8:	2b00      	cmp	r3, #0
 80363ca:	d002      	beq.n	80363d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80363cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80363d0:	e069      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80363d2:	697b      	ldr	r3, [r7, #20]
 80363d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80363d8:	2b00      	cmp	r3, #0
 80363da:	d002      	beq.n	80363e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80363dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80363e0:	e061      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80363e2:	697b      	ldr	r3, [r7, #20]
 80363e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80363e8:	2b00      	cmp	r3, #0
 80363ea:	d002      	beq.n	80363f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80363ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80363f0:	e059      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80363f2:	697b      	ldr	r3, [r7, #20]
 80363f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80363f8:	2b00      	cmp	r3, #0
 80363fa:	d002      	beq.n	8036402 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80363fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8036400:	e051      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8036402:	697b      	ldr	r3, [r7, #20]
 8036404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8036408:	2b00      	cmp	r3, #0
 803640a:	d002      	beq.n	8036412 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 803640c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8036410:	e049      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8036412:	697b      	ldr	r3, [r7, #20]
 8036414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8036418:	2b00      	cmp	r3, #0
 803641a:	d002      	beq.n	8036422 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 803641c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8036420:	e041      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8036422:	697b      	ldr	r3, [r7, #20]
 8036424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8036428:	2b00      	cmp	r3, #0
 803642a:	d002      	beq.n	8036432 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 803642c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8036430:	e039      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8036432:	697b      	ldr	r3, [r7, #20]
 8036434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8036438:	2b00      	cmp	r3, #0
 803643a:	d002      	beq.n	8036442 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 803643c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8036440:	e031      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8036442:	697b      	ldr	r3, [r7, #20]
 8036444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8036448:	2b00      	cmp	r3, #0
 803644a:	d002      	beq.n	8036452 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 803644c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8036450:	e029      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8036452:	697b      	ldr	r3, [r7, #20]
 8036454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8036458:	2b00      	cmp	r3, #0
 803645a:	d002      	beq.n	8036462 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 803645c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8036460:	e021      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8036462:	697b      	ldr	r3, [r7, #20]
 8036464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8036468:	2b00      	cmp	r3, #0
 803646a:	d002      	beq.n	8036472 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 803646c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8036470:	e019      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8036472:	697b      	ldr	r3, [r7, #20]
 8036474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8036478:	2b00      	cmp	r3, #0
 803647a:	d002      	beq.n	8036482 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 803647c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8036480:	e011      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8036482:	697b      	ldr	r3, [r7, #20]
 8036484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8036488:	2b00      	cmp	r3, #0
 803648a:	d002      	beq.n	8036492 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 803648c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8036490:	e009      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8036492:	697b      	ldr	r3, [r7, #20]
 8036494:	f003 0308 	and.w	r3, r3, #8
 8036498:	2b00      	cmp	r3, #0
 803649a:	d002      	beq.n	80364a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 803649c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80364a0:	e001      	b.n	80364a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80364a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80364a6:	4618      	mov	r0, r3
 80364a8:	3720      	adds	r7, #32
 80364aa:	46bd      	mov	sp, r7
 80364ac:	bd80      	pop	{r7, pc}
 80364ae:	bf00      	nop
 80364b0:	20000020 	.word	0x20000020
 80364b4:	10624dd3 	.word	0x10624dd3
 80364b8:	fdffe008 	.word	0xfdffe008

080364bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80364bc:	b480      	push	{r7}
 80364be:	b085      	sub	sp, #20
 80364c0:	af00      	add	r7, sp, #0
 80364c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80364c4:	4b1f      	ldr	r3, [pc, #124]	; (8036544 <SDMMC_GetCmdResp2+0x88>)
 80364c6:	681b      	ldr	r3, [r3, #0]
 80364c8:	4a1f      	ldr	r2, [pc, #124]	; (8036548 <SDMMC_GetCmdResp2+0x8c>)
 80364ca:	fba2 2303 	umull	r2, r3, r2, r3
 80364ce:	0a5b      	lsrs	r3, r3, #9
 80364d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80364d4:	fb02 f303 	mul.w	r3, r2, r3
 80364d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80364da:	68fb      	ldr	r3, [r7, #12]
 80364dc:	1e5a      	subs	r2, r3, #1
 80364de:	60fa      	str	r2, [r7, #12]
 80364e0:	2b00      	cmp	r3, #0
 80364e2:	d102      	bne.n	80364ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80364e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80364e8:	e026      	b.n	8036538 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80364ea:	687b      	ldr	r3, [r7, #4]
 80364ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80364ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80364f0:	68bb      	ldr	r3, [r7, #8]
 80364f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80364f6:	2b00      	cmp	r3, #0
 80364f8:	d0ef      	beq.n	80364da <SDMMC_GetCmdResp2+0x1e>
 80364fa:	68bb      	ldr	r3, [r7, #8]
 80364fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8036500:	2b00      	cmp	r3, #0
 8036502:	d1ea      	bne.n	80364da <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8036504:	687b      	ldr	r3, [r7, #4]
 8036506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036508:	f003 0304 	and.w	r3, r3, #4
 803650c:	2b00      	cmp	r3, #0
 803650e:	d004      	beq.n	803651a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8036510:	687b      	ldr	r3, [r7, #4]
 8036512:	2204      	movs	r2, #4
 8036514:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8036516:	2304      	movs	r3, #4
 8036518:	e00e      	b.n	8036538 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 803651a:	687b      	ldr	r3, [r7, #4]
 803651c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803651e:	f003 0301 	and.w	r3, r3, #1
 8036522:	2b00      	cmp	r3, #0
 8036524:	d004      	beq.n	8036530 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8036526:	687b      	ldr	r3, [r7, #4]
 8036528:	2201      	movs	r2, #1
 803652a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 803652c:	2301      	movs	r3, #1
 803652e:	e003      	b.n	8036538 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8036530:	687b      	ldr	r3, [r7, #4]
 8036532:	22c5      	movs	r2, #197	; 0xc5
 8036534:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8036536:	2300      	movs	r3, #0
}
 8036538:	4618      	mov	r0, r3
 803653a:	3714      	adds	r7, #20
 803653c:	46bd      	mov	sp, r7
 803653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036542:	4770      	bx	lr
 8036544:	20000020 	.word	0x20000020
 8036548:	10624dd3 	.word	0x10624dd3

0803654c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 803654c:	b480      	push	{r7}
 803654e:	b085      	sub	sp, #20
 8036550:	af00      	add	r7, sp, #0
 8036552:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8036554:	4b1a      	ldr	r3, [pc, #104]	; (80365c0 <SDMMC_GetCmdResp3+0x74>)
 8036556:	681b      	ldr	r3, [r3, #0]
 8036558:	4a1a      	ldr	r2, [pc, #104]	; (80365c4 <SDMMC_GetCmdResp3+0x78>)
 803655a:	fba2 2303 	umull	r2, r3, r2, r3
 803655e:	0a5b      	lsrs	r3, r3, #9
 8036560:	f241 3288 	movw	r2, #5000	; 0x1388
 8036564:	fb02 f303 	mul.w	r3, r2, r3
 8036568:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 803656a:	68fb      	ldr	r3, [r7, #12]
 803656c:	1e5a      	subs	r2, r3, #1
 803656e:	60fa      	str	r2, [r7, #12]
 8036570:	2b00      	cmp	r3, #0
 8036572:	d102      	bne.n	803657a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8036574:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8036578:	e01b      	b.n	80365b2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 803657a:	687b      	ldr	r3, [r7, #4]
 803657c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803657e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8036580:	68bb      	ldr	r3, [r7, #8]
 8036582:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8036586:	2b00      	cmp	r3, #0
 8036588:	d0ef      	beq.n	803656a <SDMMC_GetCmdResp3+0x1e>
 803658a:	68bb      	ldr	r3, [r7, #8]
 803658c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8036590:	2b00      	cmp	r3, #0
 8036592:	d1ea      	bne.n	803656a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8036594:	687b      	ldr	r3, [r7, #4]
 8036596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036598:	f003 0304 	and.w	r3, r3, #4
 803659c:	2b00      	cmp	r3, #0
 803659e:	d004      	beq.n	80365aa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80365a0:	687b      	ldr	r3, [r7, #4]
 80365a2:	2204      	movs	r2, #4
 80365a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80365a6:	2304      	movs	r3, #4
 80365a8:	e003      	b.n	80365b2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80365aa:	687b      	ldr	r3, [r7, #4]
 80365ac:	22c5      	movs	r2, #197	; 0xc5
 80365ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80365b0:	2300      	movs	r3, #0
}
 80365b2:	4618      	mov	r0, r3
 80365b4:	3714      	adds	r7, #20
 80365b6:	46bd      	mov	sp, r7
 80365b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80365bc:	4770      	bx	lr
 80365be:	bf00      	nop
 80365c0:	20000020 	.word	0x20000020
 80365c4:	10624dd3 	.word	0x10624dd3

080365c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80365c8:	b580      	push	{r7, lr}
 80365ca:	b088      	sub	sp, #32
 80365cc:	af00      	add	r7, sp, #0
 80365ce:	60f8      	str	r0, [r7, #12]
 80365d0:	460b      	mov	r3, r1
 80365d2:	607a      	str	r2, [r7, #4]
 80365d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80365d6:	4b35      	ldr	r3, [pc, #212]	; (80366ac <SDMMC_GetCmdResp6+0xe4>)
 80365d8:	681b      	ldr	r3, [r3, #0]
 80365da:	4a35      	ldr	r2, [pc, #212]	; (80366b0 <SDMMC_GetCmdResp6+0xe8>)
 80365dc:	fba2 2303 	umull	r2, r3, r2, r3
 80365e0:	0a5b      	lsrs	r3, r3, #9
 80365e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80365e6:	fb02 f303 	mul.w	r3, r2, r3
 80365ea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80365ec:	69fb      	ldr	r3, [r7, #28]
 80365ee:	1e5a      	subs	r2, r3, #1
 80365f0:	61fa      	str	r2, [r7, #28]
 80365f2:	2b00      	cmp	r3, #0
 80365f4:	d102      	bne.n	80365fc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80365f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80365fa:	e052      	b.n	80366a2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80365fc:	68fb      	ldr	r3, [r7, #12]
 80365fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036600:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8036602:	69bb      	ldr	r3, [r7, #24]
 8036604:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8036608:	2b00      	cmp	r3, #0
 803660a:	d0ef      	beq.n	80365ec <SDMMC_GetCmdResp6+0x24>
 803660c:	69bb      	ldr	r3, [r7, #24]
 803660e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8036612:	2b00      	cmp	r3, #0
 8036614:	d1ea      	bne.n	80365ec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8036616:	68fb      	ldr	r3, [r7, #12]
 8036618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803661a:	f003 0304 	and.w	r3, r3, #4
 803661e:	2b00      	cmp	r3, #0
 8036620:	d004      	beq.n	803662c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8036622:	68fb      	ldr	r3, [r7, #12]
 8036624:	2204      	movs	r2, #4
 8036626:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8036628:	2304      	movs	r3, #4
 803662a:	e03a      	b.n	80366a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 803662c:	68fb      	ldr	r3, [r7, #12]
 803662e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036630:	f003 0301 	and.w	r3, r3, #1
 8036634:	2b00      	cmp	r3, #0
 8036636:	d004      	beq.n	8036642 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8036638:	68fb      	ldr	r3, [r7, #12]
 803663a:	2201      	movs	r2, #1
 803663c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 803663e:	2301      	movs	r3, #1
 8036640:	e02f      	b.n	80366a2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8036642:	68f8      	ldr	r0, [r7, #12]
 8036644:	f7ff fbe2 	bl	8035e0c <SDIO_GetCommandResponse>
 8036648:	4603      	mov	r3, r0
 803664a:	461a      	mov	r2, r3
 803664c:	7afb      	ldrb	r3, [r7, #11]
 803664e:	4293      	cmp	r3, r2
 8036650:	d001      	beq.n	8036656 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8036652:	2301      	movs	r3, #1
 8036654:	e025      	b.n	80366a2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8036656:	68fb      	ldr	r3, [r7, #12]
 8036658:	22c5      	movs	r2, #197	; 0xc5
 803665a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 803665c:	2100      	movs	r1, #0
 803665e:	68f8      	ldr	r0, [r7, #12]
 8036660:	f7ff fbe1 	bl	8035e26 <SDIO_GetResponse>
 8036664:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8036666:	697b      	ldr	r3, [r7, #20]
 8036668:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 803666c:	2b00      	cmp	r3, #0
 803666e:	d106      	bne.n	803667e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8036670:	697b      	ldr	r3, [r7, #20]
 8036672:	0c1b      	lsrs	r3, r3, #16
 8036674:	b29a      	uxth	r2, r3
 8036676:	687b      	ldr	r3, [r7, #4]
 8036678:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 803667a:	2300      	movs	r3, #0
 803667c:	e011      	b.n	80366a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 803667e:	697b      	ldr	r3, [r7, #20]
 8036680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8036684:	2b00      	cmp	r3, #0
 8036686:	d002      	beq.n	803668e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8036688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 803668c:	e009      	b.n	80366a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 803668e:	697b      	ldr	r3, [r7, #20]
 8036690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8036694:	2b00      	cmp	r3, #0
 8036696:	d002      	beq.n	803669e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8036698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 803669c:	e001      	b.n	80366a2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 803669e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80366a2:	4618      	mov	r0, r3
 80366a4:	3720      	adds	r7, #32
 80366a6:	46bd      	mov	sp, r7
 80366a8:	bd80      	pop	{r7, pc}
 80366aa:	bf00      	nop
 80366ac:	20000020 	.word	0x20000020
 80366b0:	10624dd3 	.word	0x10624dd3

080366b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80366b4:	b480      	push	{r7}
 80366b6:	b085      	sub	sp, #20
 80366b8:	af00      	add	r7, sp, #0
 80366ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80366bc:	4b22      	ldr	r3, [pc, #136]	; (8036748 <SDMMC_GetCmdResp7+0x94>)
 80366be:	681b      	ldr	r3, [r3, #0]
 80366c0:	4a22      	ldr	r2, [pc, #136]	; (803674c <SDMMC_GetCmdResp7+0x98>)
 80366c2:	fba2 2303 	umull	r2, r3, r2, r3
 80366c6:	0a5b      	lsrs	r3, r3, #9
 80366c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80366cc:	fb02 f303 	mul.w	r3, r2, r3
 80366d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80366d2:	68fb      	ldr	r3, [r7, #12]
 80366d4:	1e5a      	subs	r2, r3, #1
 80366d6:	60fa      	str	r2, [r7, #12]
 80366d8:	2b00      	cmp	r3, #0
 80366da:	d102      	bne.n	80366e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80366dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80366e0:	e02c      	b.n	803673c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80366e2:	687b      	ldr	r3, [r7, #4]
 80366e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80366e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80366e8:	68bb      	ldr	r3, [r7, #8]
 80366ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80366ee:	2b00      	cmp	r3, #0
 80366f0:	d0ef      	beq.n	80366d2 <SDMMC_GetCmdResp7+0x1e>
 80366f2:	68bb      	ldr	r3, [r7, #8]
 80366f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80366f8:	2b00      	cmp	r3, #0
 80366fa:	d1ea      	bne.n	80366d2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80366fc:	687b      	ldr	r3, [r7, #4]
 80366fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036700:	f003 0304 	and.w	r3, r3, #4
 8036704:	2b00      	cmp	r3, #0
 8036706:	d004      	beq.n	8036712 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8036708:	687b      	ldr	r3, [r7, #4]
 803670a:	2204      	movs	r2, #4
 803670c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 803670e:	2304      	movs	r3, #4
 8036710:	e014      	b.n	803673c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8036712:	687b      	ldr	r3, [r7, #4]
 8036714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8036716:	f003 0301 	and.w	r3, r3, #1
 803671a:	2b00      	cmp	r3, #0
 803671c:	d004      	beq.n	8036728 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 803671e:	687b      	ldr	r3, [r7, #4]
 8036720:	2201      	movs	r2, #1
 8036722:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8036724:	2301      	movs	r3, #1
 8036726:	e009      	b.n	803673c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8036728:	687b      	ldr	r3, [r7, #4]
 803672a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 803672c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8036730:	2b00      	cmp	r3, #0
 8036732:	d002      	beq.n	803673a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8036734:	687b      	ldr	r3, [r7, #4]
 8036736:	2240      	movs	r2, #64	; 0x40
 8036738:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 803673a:	2300      	movs	r3, #0
  
}
 803673c:	4618      	mov	r0, r3
 803673e:	3714      	adds	r7, #20
 8036740:	46bd      	mov	sp, r7
 8036742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036746:	4770      	bx	lr
 8036748:	20000020 	.word	0x20000020
 803674c:	10624dd3 	.word	0x10624dd3

08036750 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8036750:	b580      	push	{r7, lr}
 8036752:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8036754:	4904      	ldr	r1, [pc, #16]	; (8036768 <MX_FATFS_Init+0x18>)
 8036756:	4805      	ldr	r0, [pc, #20]	; (803676c <MX_FATFS_Init+0x1c>)
 8036758:	f002 fc62 	bl	8039020 <FATFS_LinkDriver>
 803675c:	4603      	mov	r3, r0
 803675e:	461a      	mov	r2, r3
 8036760:	4b03      	ldr	r3, [pc, #12]	; (8036770 <MX_FATFS_Init+0x20>)
 8036762:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8036764:	bf00      	nop
 8036766:	bd80      	pop	{r7, pc}
 8036768:	20000554 	.word	0x20000554
 803676c:	0803e808 	.word	0x0803e808
 8036770:	20000550 	.word	0x20000550

08036774 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8036774:	b480      	push	{r7}
 8036776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8036778:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 803677a:	4618      	mov	r0, r3
 803677c:	46bd      	mov	sp, r7
 803677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036782:	4770      	bx	lr

08036784 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8036784:	b580      	push	{r7, lr}
 8036786:	b082      	sub	sp, #8
 8036788:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 803678a:	2300      	movs	r3, #0
 803678c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 803678e:	f000 f86b 	bl	8036868 <BSP_SD_IsDetected>
 8036792:	4603      	mov	r3, r0
 8036794:	2b01      	cmp	r3, #1
 8036796:	d001      	beq.n	803679c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8036798:	2301      	movs	r3, #1
 803679a:	e005      	b.n	80367a8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 803679c:	4804      	ldr	r0, [pc, #16]	; (80367b0 <BSP_SD_Init+0x2c>)
 803679e:	f7fc ff81 	bl	80336a4 <HAL_SD_Init>
 80367a2:	4603      	mov	r3, r0
 80367a4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80367a6:	79fb      	ldrb	r3, [r7, #7]
}
 80367a8:	4618      	mov	r0, r3
 80367aa:	3708      	adds	r7, #8
 80367ac:	46bd      	mov	sp, r7
 80367ae:	bd80      	pop	{r7, pc}
 80367b0:	200003e0 	.word	0x200003e0

080367b4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80367b4:	b580      	push	{r7, lr}
 80367b6:	b088      	sub	sp, #32
 80367b8:	af02      	add	r7, sp, #8
 80367ba:	60f8      	str	r0, [r7, #12]
 80367bc:	60b9      	str	r1, [r7, #8]
 80367be:	607a      	str	r2, [r7, #4]
 80367c0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80367c2:	2300      	movs	r3, #0
 80367c4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80367c6:	683b      	ldr	r3, [r7, #0]
 80367c8:	9300      	str	r3, [sp, #0]
 80367ca:	687b      	ldr	r3, [r7, #4]
 80367cc:	68ba      	ldr	r2, [r7, #8]
 80367ce:	68f9      	ldr	r1, [r7, #12]
 80367d0:	4806      	ldr	r0, [pc, #24]	; (80367ec <BSP_SD_ReadBlocks+0x38>)
 80367d2:	f7fd f815 	bl	8033800 <HAL_SD_ReadBlocks>
 80367d6:	4603      	mov	r3, r0
 80367d8:	2b00      	cmp	r3, #0
 80367da:	d001      	beq.n	80367e0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80367dc:	2301      	movs	r3, #1
 80367de:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80367e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80367e2:	4618      	mov	r0, r3
 80367e4:	3718      	adds	r7, #24
 80367e6:	46bd      	mov	sp, r7
 80367e8:	bd80      	pop	{r7, pc}
 80367ea:	bf00      	nop
 80367ec:	200003e0 	.word	0x200003e0

080367f0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80367f0:	b580      	push	{r7, lr}
 80367f2:	b088      	sub	sp, #32
 80367f4:	af02      	add	r7, sp, #8
 80367f6:	60f8      	str	r0, [r7, #12]
 80367f8:	60b9      	str	r1, [r7, #8]
 80367fa:	607a      	str	r2, [r7, #4]
 80367fc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80367fe:	2300      	movs	r3, #0
 8036800:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8036802:	683b      	ldr	r3, [r7, #0]
 8036804:	9300      	str	r3, [sp, #0]
 8036806:	687b      	ldr	r3, [r7, #4]
 8036808:	68ba      	ldr	r2, [r7, #8]
 803680a:	68f9      	ldr	r1, [r7, #12]
 803680c:	4806      	ldr	r0, [pc, #24]	; (8036828 <BSP_SD_WriteBlocks+0x38>)
 803680e:	f7fd f9d5 	bl	8033bbc <HAL_SD_WriteBlocks>
 8036812:	4603      	mov	r3, r0
 8036814:	2b00      	cmp	r3, #0
 8036816:	d001      	beq.n	803681c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8036818:	2301      	movs	r3, #1
 803681a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 803681c:	7dfb      	ldrb	r3, [r7, #23]
}
 803681e:	4618      	mov	r0, r3
 8036820:	3718      	adds	r7, #24
 8036822:	46bd      	mov	sp, r7
 8036824:	bd80      	pop	{r7, pc}
 8036826:	bf00      	nop
 8036828:	200003e0 	.word	0x200003e0

0803682c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 803682c:	b580      	push	{r7, lr}
 803682e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8036830:	4805      	ldr	r0, [pc, #20]	; (8036848 <BSP_SD_GetCardState+0x1c>)
 8036832:	f7fd fd19 	bl	8034268 <HAL_SD_GetCardState>
 8036836:	4603      	mov	r3, r0
 8036838:	2b04      	cmp	r3, #4
 803683a:	bf14      	ite	ne
 803683c:	2301      	movne	r3, #1
 803683e:	2300      	moveq	r3, #0
 8036840:	b2db      	uxtb	r3, r3
}
 8036842:	4618      	mov	r0, r3
 8036844:	bd80      	pop	{r7, pc}
 8036846:	bf00      	nop
 8036848:	200003e0 	.word	0x200003e0

0803684c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 803684c:	b580      	push	{r7, lr}
 803684e:	b082      	sub	sp, #8
 8036850:	af00      	add	r7, sp, #0
 8036852:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8036854:	6879      	ldr	r1, [r7, #4]
 8036856:	4803      	ldr	r0, [pc, #12]	; (8036864 <BSP_SD_GetCardInfo+0x18>)
 8036858:	f7fd fcda 	bl	8034210 <HAL_SD_GetCardInfo>
}
 803685c:	bf00      	nop
 803685e:	3708      	adds	r7, #8
 8036860:	46bd      	mov	sp, r7
 8036862:	bd80      	pop	{r7, pc}
 8036864:	200003e0 	.word	0x200003e0

08036868 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8036868:	b480      	push	{r7}
 803686a:	b083      	sub	sp, #12
 803686c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 803686e:	2301      	movs	r3, #1
 8036870:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8036872:	79fb      	ldrb	r3, [r7, #7]
 8036874:	b2db      	uxtb	r3, r3
}
 8036876:	4618      	mov	r0, r3
 8036878:	370c      	adds	r7, #12
 803687a:	46bd      	mov	sp, r7
 803687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036880:	4770      	bx	lr
	...

08036884 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8036884:	b580      	push	{r7, lr}
 8036886:	b082      	sub	sp, #8
 8036888:	af00      	add	r7, sp, #0
 803688a:	4603      	mov	r3, r0
 803688c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 803688e:	4b0b      	ldr	r3, [pc, #44]	; (80368bc <SD_CheckStatus+0x38>)
 8036890:	2201      	movs	r2, #1
 8036892:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8036894:	f7ff ffca 	bl	803682c <BSP_SD_GetCardState>
 8036898:	4603      	mov	r3, r0
 803689a:	2b00      	cmp	r3, #0
 803689c:	d107      	bne.n	80368ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 803689e:	4b07      	ldr	r3, [pc, #28]	; (80368bc <SD_CheckStatus+0x38>)
 80368a0:	781b      	ldrb	r3, [r3, #0]
 80368a2:	b2db      	uxtb	r3, r3
 80368a4:	f023 0301 	bic.w	r3, r3, #1
 80368a8:	b2da      	uxtb	r2, r3
 80368aa:	4b04      	ldr	r3, [pc, #16]	; (80368bc <SD_CheckStatus+0x38>)
 80368ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80368ae:	4b03      	ldr	r3, [pc, #12]	; (80368bc <SD_CheckStatus+0x38>)
 80368b0:	781b      	ldrb	r3, [r3, #0]
 80368b2:	b2db      	uxtb	r3, r3
}
 80368b4:	4618      	mov	r0, r3
 80368b6:	3708      	adds	r7, #8
 80368b8:	46bd      	mov	sp, r7
 80368ba:	bd80      	pop	{r7, pc}
 80368bc:	20000029 	.word	0x20000029

080368c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80368c0:	b580      	push	{r7, lr}
 80368c2:	b082      	sub	sp, #8
 80368c4:	af00      	add	r7, sp, #0
 80368c6:	4603      	mov	r3, r0
 80368c8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80368ca:	4b0b      	ldr	r3, [pc, #44]	; (80368f8 <SD_initialize+0x38>)
 80368cc:	2201      	movs	r2, #1
 80368ce:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80368d0:	f7ff ff58 	bl	8036784 <BSP_SD_Init>
 80368d4:	4603      	mov	r3, r0
 80368d6:	2b00      	cmp	r3, #0
 80368d8:	d107      	bne.n	80368ea <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80368da:	79fb      	ldrb	r3, [r7, #7]
 80368dc:	4618      	mov	r0, r3
 80368de:	f7ff ffd1 	bl	8036884 <SD_CheckStatus>
 80368e2:	4603      	mov	r3, r0
 80368e4:	461a      	mov	r2, r3
 80368e6:	4b04      	ldr	r3, [pc, #16]	; (80368f8 <SD_initialize+0x38>)
 80368e8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80368ea:	4b03      	ldr	r3, [pc, #12]	; (80368f8 <SD_initialize+0x38>)
 80368ec:	781b      	ldrb	r3, [r3, #0]
 80368ee:	b2db      	uxtb	r3, r3
}
 80368f0:	4618      	mov	r0, r3
 80368f2:	3708      	adds	r7, #8
 80368f4:	46bd      	mov	sp, r7
 80368f6:	bd80      	pop	{r7, pc}
 80368f8:	20000029 	.word	0x20000029

080368fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80368fc:	b580      	push	{r7, lr}
 80368fe:	b082      	sub	sp, #8
 8036900:	af00      	add	r7, sp, #0
 8036902:	4603      	mov	r3, r0
 8036904:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8036906:	79fb      	ldrb	r3, [r7, #7]
 8036908:	4618      	mov	r0, r3
 803690a:	f7ff ffbb 	bl	8036884 <SD_CheckStatus>
 803690e:	4603      	mov	r3, r0
}
 8036910:	4618      	mov	r0, r3
 8036912:	3708      	adds	r7, #8
 8036914:	46bd      	mov	sp, r7
 8036916:	bd80      	pop	{r7, pc}

08036918 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8036918:	b580      	push	{r7, lr}
 803691a:	b086      	sub	sp, #24
 803691c:	af00      	add	r7, sp, #0
 803691e:	60b9      	str	r1, [r7, #8]
 8036920:	607a      	str	r2, [r7, #4]
 8036922:	603b      	str	r3, [r7, #0]
 8036924:	4603      	mov	r3, r0
 8036926:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8036928:	2301      	movs	r3, #1
 803692a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 803692c:	f04f 33ff 	mov.w	r3, #4294967295
 8036930:	683a      	ldr	r2, [r7, #0]
 8036932:	6879      	ldr	r1, [r7, #4]
 8036934:	68b8      	ldr	r0, [r7, #8]
 8036936:	f7ff ff3d 	bl	80367b4 <BSP_SD_ReadBlocks>
 803693a:	4603      	mov	r3, r0
 803693c:	2b00      	cmp	r3, #0
 803693e:	d107      	bne.n	8036950 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8036940:	bf00      	nop
 8036942:	f7ff ff73 	bl	803682c <BSP_SD_GetCardState>
 8036946:	4603      	mov	r3, r0
 8036948:	2b00      	cmp	r3, #0
 803694a:	d1fa      	bne.n	8036942 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 803694c:	2300      	movs	r3, #0
 803694e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8036950:	7dfb      	ldrb	r3, [r7, #23]
}
 8036952:	4618      	mov	r0, r3
 8036954:	3718      	adds	r7, #24
 8036956:	46bd      	mov	sp, r7
 8036958:	bd80      	pop	{r7, pc}

0803695a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 803695a:	b580      	push	{r7, lr}
 803695c:	b086      	sub	sp, #24
 803695e:	af00      	add	r7, sp, #0
 8036960:	60b9      	str	r1, [r7, #8]
 8036962:	607a      	str	r2, [r7, #4]
 8036964:	603b      	str	r3, [r7, #0]
 8036966:	4603      	mov	r3, r0
 8036968:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 803696a:	2301      	movs	r3, #1
 803696c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 803696e:	f04f 33ff 	mov.w	r3, #4294967295
 8036972:	683a      	ldr	r2, [r7, #0]
 8036974:	6879      	ldr	r1, [r7, #4]
 8036976:	68b8      	ldr	r0, [r7, #8]
 8036978:	f7ff ff3a 	bl	80367f0 <BSP_SD_WriteBlocks>
 803697c:	4603      	mov	r3, r0
 803697e:	2b00      	cmp	r3, #0
 8036980:	d107      	bne.n	8036992 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8036982:	bf00      	nop
 8036984:	f7ff ff52 	bl	803682c <BSP_SD_GetCardState>
 8036988:	4603      	mov	r3, r0
 803698a:	2b00      	cmp	r3, #0
 803698c:	d1fa      	bne.n	8036984 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 803698e:	2300      	movs	r3, #0
 8036990:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8036992:	7dfb      	ldrb	r3, [r7, #23]
}
 8036994:	4618      	mov	r0, r3
 8036996:	3718      	adds	r7, #24
 8036998:	46bd      	mov	sp, r7
 803699a:	bd80      	pop	{r7, pc}

0803699c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 803699c:	b580      	push	{r7, lr}
 803699e:	b08c      	sub	sp, #48	; 0x30
 80369a0:	af00      	add	r7, sp, #0
 80369a2:	4603      	mov	r3, r0
 80369a4:	603a      	str	r2, [r7, #0]
 80369a6:	71fb      	strb	r3, [r7, #7]
 80369a8:	460b      	mov	r3, r1
 80369aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80369ac:	2301      	movs	r3, #1
 80369ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80369b2:	4b25      	ldr	r3, [pc, #148]	; (8036a48 <SD_ioctl+0xac>)
 80369b4:	781b      	ldrb	r3, [r3, #0]
 80369b6:	b2db      	uxtb	r3, r3
 80369b8:	f003 0301 	and.w	r3, r3, #1
 80369bc:	2b00      	cmp	r3, #0
 80369be:	d001      	beq.n	80369c4 <SD_ioctl+0x28>
 80369c0:	2303      	movs	r3, #3
 80369c2:	e03c      	b.n	8036a3e <SD_ioctl+0xa2>

  switch (cmd)
 80369c4:	79bb      	ldrb	r3, [r7, #6]
 80369c6:	2b03      	cmp	r3, #3
 80369c8:	d834      	bhi.n	8036a34 <SD_ioctl+0x98>
 80369ca:	a201      	add	r2, pc, #4	; (adr r2, 80369d0 <SD_ioctl+0x34>)
 80369cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80369d0:	080369e1 	.word	0x080369e1
 80369d4:	080369e9 	.word	0x080369e9
 80369d8:	08036a01 	.word	0x08036a01
 80369dc:	08036a1b 	.word	0x08036a1b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80369e0:	2300      	movs	r3, #0
 80369e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80369e6:	e028      	b.n	8036a3a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80369e8:	f107 030c 	add.w	r3, r7, #12
 80369ec:	4618      	mov	r0, r3
 80369ee:	f7ff ff2d 	bl	803684c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80369f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80369f4:	683b      	ldr	r3, [r7, #0]
 80369f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80369f8:	2300      	movs	r3, #0
 80369fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80369fe:	e01c      	b.n	8036a3a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8036a00:	f107 030c 	add.w	r3, r7, #12
 8036a04:	4618      	mov	r0, r3
 8036a06:	f7ff ff21 	bl	803684c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8036a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036a0c:	b29a      	uxth	r2, r3
 8036a0e:	683b      	ldr	r3, [r7, #0]
 8036a10:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8036a12:	2300      	movs	r3, #0
 8036a14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8036a18:	e00f      	b.n	8036a3a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8036a1a:	f107 030c 	add.w	r3, r7, #12
 8036a1e:	4618      	mov	r0, r3
 8036a20:	f7ff ff14 	bl	803684c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8036a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8036a26:	0a5a      	lsrs	r2, r3, #9
 8036a28:	683b      	ldr	r3, [r7, #0]
 8036a2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8036a2c:	2300      	movs	r3, #0
 8036a2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8036a32:	e002      	b.n	8036a3a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8036a34:	2304      	movs	r3, #4
 8036a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8036a3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8036a3e:	4618      	mov	r0, r3
 8036a40:	3730      	adds	r7, #48	; 0x30
 8036a42:	46bd      	mov	sp, r7
 8036a44:	bd80      	pop	{r7, pc}
 8036a46:	bf00      	nop
 8036a48:	20000029 	.word	0x20000029

08036a4c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8036a4c:	b580      	push	{r7, lr}
 8036a4e:	b084      	sub	sp, #16
 8036a50:	af00      	add	r7, sp, #0
 8036a52:	4603      	mov	r3, r0
 8036a54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8036a56:	79fb      	ldrb	r3, [r7, #7]
 8036a58:	4a08      	ldr	r2, [pc, #32]	; (8036a7c <disk_status+0x30>)
 8036a5a:	009b      	lsls	r3, r3, #2
 8036a5c:	4413      	add	r3, r2
 8036a5e:	685b      	ldr	r3, [r3, #4]
 8036a60:	685b      	ldr	r3, [r3, #4]
 8036a62:	79fa      	ldrb	r2, [r7, #7]
 8036a64:	4905      	ldr	r1, [pc, #20]	; (8036a7c <disk_status+0x30>)
 8036a66:	440a      	add	r2, r1
 8036a68:	7a12      	ldrb	r2, [r2, #8]
 8036a6a:	4610      	mov	r0, r2
 8036a6c:	4798      	blx	r3
 8036a6e:	4603      	mov	r3, r0
 8036a70:	73fb      	strb	r3, [r7, #15]
  return stat;
 8036a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8036a74:	4618      	mov	r0, r3
 8036a76:	3710      	adds	r7, #16
 8036a78:	46bd      	mov	sp, r7
 8036a7a:	bd80      	pop	{r7, pc}
 8036a7c:	20000320 	.word	0x20000320

08036a80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8036a80:	b580      	push	{r7, lr}
 8036a82:	b084      	sub	sp, #16
 8036a84:	af00      	add	r7, sp, #0
 8036a86:	4603      	mov	r3, r0
 8036a88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8036a8a:	2300      	movs	r3, #0
 8036a8c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8036a8e:	79fb      	ldrb	r3, [r7, #7]
 8036a90:	4a0d      	ldr	r2, [pc, #52]	; (8036ac8 <disk_initialize+0x48>)
 8036a92:	5cd3      	ldrb	r3, [r2, r3]
 8036a94:	2b00      	cmp	r3, #0
 8036a96:	d111      	bne.n	8036abc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8036a98:	79fb      	ldrb	r3, [r7, #7]
 8036a9a:	4a0b      	ldr	r2, [pc, #44]	; (8036ac8 <disk_initialize+0x48>)
 8036a9c:	2101      	movs	r1, #1
 8036a9e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8036aa0:	79fb      	ldrb	r3, [r7, #7]
 8036aa2:	4a09      	ldr	r2, [pc, #36]	; (8036ac8 <disk_initialize+0x48>)
 8036aa4:	009b      	lsls	r3, r3, #2
 8036aa6:	4413      	add	r3, r2
 8036aa8:	685b      	ldr	r3, [r3, #4]
 8036aaa:	681b      	ldr	r3, [r3, #0]
 8036aac:	79fa      	ldrb	r2, [r7, #7]
 8036aae:	4906      	ldr	r1, [pc, #24]	; (8036ac8 <disk_initialize+0x48>)
 8036ab0:	440a      	add	r2, r1
 8036ab2:	7a12      	ldrb	r2, [r2, #8]
 8036ab4:	4610      	mov	r0, r2
 8036ab6:	4798      	blx	r3
 8036ab8:	4603      	mov	r3, r0
 8036aba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8036abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8036abe:	4618      	mov	r0, r3
 8036ac0:	3710      	adds	r7, #16
 8036ac2:	46bd      	mov	sp, r7
 8036ac4:	bd80      	pop	{r7, pc}
 8036ac6:	bf00      	nop
 8036ac8:	20000320 	.word	0x20000320

08036acc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8036acc:	b590      	push	{r4, r7, lr}
 8036ace:	b087      	sub	sp, #28
 8036ad0:	af00      	add	r7, sp, #0
 8036ad2:	60b9      	str	r1, [r7, #8]
 8036ad4:	607a      	str	r2, [r7, #4]
 8036ad6:	603b      	str	r3, [r7, #0]
 8036ad8:	4603      	mov	r3, r0
 8036ada:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8036adc:	7bfb      	ldrb	r3, [r7, #15]
 8036ade:	4a0a      	ldr	r2, [pc, #40]	; (8036b08 <disk_read+0x3c>)
 8036ae0:	009b      	lsls	r3, r3, #2
 8036ae2:	4413      	add	r3, r2
 8036ae4:	685b      	ldr	r3, [r3, #4]
 8036ae6:	689c      	ldr	r4, [r3, #8]
 8036ae8:	7bfb      	ldrb	r3, [r7, #15]
 8036aea:	4a07      	ldr	r2, [pc, #28]	; (8036b08 <disk_read+0x3c>)
 8036aec:	4413      	add	r3, r2
 8036aee:	7a18      	ldrb	r0, [r3, #8]
 8036af0:	683b      	ldr	r3, [r7, #0]
 8036af2:	687a      	ldr	r2, [r7, #4]
 8036af4:	68b9      	ldr	r1, [r7, #8]
 8036af6:	47a0      	blx	r4
 8036af8:	4603      	mov	r3, r0
 8036afa:	75fb      	strb	r3, [r7, #23]
  return res;
 8036afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8036afe:	4618      	mov	r0, r3
 8036b00:	371c      	adds	r7, #28
 8036b02:	46bd      	mov	sp, r7
 8036b04:	bd90      	pop	{r4, r7, pc}
 8036b06:	bf00      	nop
 8036b08:	20000320 	.word	0x20000320

08036b0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8036b0c:	b590      	push	{r4, r7, lr}
 8036b0e:	b087      	sub	sp, #28
 8036b10:	af00      	add	r7, sp, #0
 8036b12:	60b9      	str	r1, [r7, #8]
 8036b14:	607a      	str	r2, [r7, #4]
 8036b16:	603b      	str	r3, [r7, #0]
 8036b18:	4603      	mov	r3, r0
 8036b1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8036b1c:	7bfb      	ldrb	r3, [r7, #15]
 8036b1e:	4a0a      	ldr	r2, [pc, #40]	; (8036b48 <disk_write+0x3c>)
 8036b20:	009b      	lsls	r3, r3, #2
 8036b22:	4413      	add	r3, r2
 8036b24:	685b      	ldr	r3, [r3, #4]
 8036b26:	68dc      	ldr	r4, [r3, #12]
 8036b28:	7bfb      	ldrb	r3, [r7, #15]
 8036b2a:	4a07      	ldr	r2, [pc, #28]	; (8036b48 <disk_write+0x3c>)
 8036b2c:	4413      	add	r3, r2
 8036b2e:	7a18      	ldrb	r0, [r3, #8]
 8036b30:	683b      	ldr	r3, [r7, #0]
 8036b32:	687a      	ldr	r2, [r7, #4]
 8036b34:	68b9      	ldr	r1, [r7, #8]
 8036b36:	47a0      	blx	r4
 8036b38:	4603      	mov	r3, r0
 8036b3a:	75fb      	strb	r3, [r7, #23]
  return res;
 8036b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8036b3e:	4618      	mov	r0, r3
 8036b40:	371c      	adds	r7, #28
 8036b42:	46bd      	mov	sp, r7
 8036b44:	bd90      	pop	{r4, r7, pc}
 8036b46:	bf00      	nop
 8036b48:	20000320 	.word	0x20000320

08036b4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8036b4c:	b580      	push	{r7, lr}
 8036b4e:	b084      	sub	sp, #16
 8036b50:	af00      	add	r7, sp, #0
 8036b52:	4603      	mov	r3, r0
 8036b54:	603a      	str	r2, [r7, #0]
 8036b56:	71fb      	strb	r3, [r7, #7]
 8036b58:	460b      	mov	r3, r1
 8036b5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8036b5c:	79fb      	ldrb	r3, [r7, #7]
 8036b5e:	4a09      	ldr	r2, [pc, #36]	; (8036b84 <disk_ioctl+0x38>)
 8036b60:	009b      	lsls	r3, r3, #2
 8036b62:	4413      	add	r3, r2
 8036b64:	685b      	ldr	r3, [r3, #4]
 8036b66:	691b      	ldr	r3, [r3, #16]
 8036b68:	79fa      	ldrb	r2, [r7, #7]
 8036b6a:	4906      	ldr	r1, [pc, #24]	; (8036b84 <disk_ioctl+0x38>)
 8036b6c:	440a      	add	r2, r1
 8036b6e:	7a10      	ldrb	r0, [r2, #8]
 8036b70:	79b9      	ldrb	r1, [r7, #6]
 8036b72:	683a      	ldr	r2, [r7, #0]
 8036b74:	4798      	blx	r3
 8036b76:	4603      	mov	r3, r0
 8036b78:	73fb      	strb	r3, [r7, #15]
  return res;
 8036b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8036b7c:	4618      	mov	r0, r3
 8036b7e:	3710      	adds	r7, #16
 8036b80:	46bd      	mov	sp, r7
 8036b82:	bd80      	pop	{r7, pc}
 8036b84:	20000320 	.word	0x20000320

08036b88 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8036b88:	b480      	push	{r7}
 8036b8a:	b085      	sub	sp, #20
 8036b8c:	af00      	add	r7, sp, #0
 8036b8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8036b90:	687b      	ldr	r3, [r7, #4]
 8036b92:	3301      	adds	r3, #1
 8036b94:	781b      	ldrb	r3, [r3, #0]
 8036b96:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8036b98:	89fb      	ldrh	r3, [r7, #14]
 8036b9a:	021b      	lsls	r3, r3, #8
 8036b9c:	b21a      	sxth	r2, r3
 8036b9e:	687b      	ldr	r3, [r7, #4]
 8036ba0:	781b      	ldrb	r3, [r3, #0]
 8036ba2:	b21b      	sxth	r3, r3
 8036ba4:	4313      	orrs	r3, r2
 8036ba6:	b21b      	sxth	r3, r3
 8036ba8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8036baa:	89fb      	ldrh	r3, [r7, #14]
}
 8036bac:	4618      	mov	r0, r3
 8036bae:	3714      	adds	r7, #20
 8036bb0:	46bd      	mov	sp, r7
 8036bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036bb6:	4770      	bx	lr

08036bb8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8036bb8:	b480      	push	{r7}
 8036bba:	b085      	sub	sp, #20
 8036bbc:	af00      	add	r7, sp, #0
 8036bbe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8036bc0:	687b      	ldr	r3, [r7, #4]
 8036bc2:	3303      	adds	r3, #3
 8036bc4:	781b      	ldrb	r3, [r3, #0]
 8036bc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8036bc8:	68fb      	ldr	r3, [r7, #12]
 8036bca:	021b      	lsls	r3, r3, #8
 8036bcc:	687a      	ldr	r2, [r7, #4]
 8036bce:	3202      	adds	r2, #2
 8036bd0:	7812      	ldrb	r2, [r2, #0]
 8036bd2:	4313      	orrs	r3, r2
 8036bd4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8036bd6:	68fb      	ldr	r3, [r7, #12]
 8036bd8:	021b      	lsls	r3, r3, #8
 8036bda:	687a      	ldr	r2, [r7, #4]
 8036bdc:	3201      	adds	r2, #1
 8036bde:	7812      	ldrb	r2, [r2, #0]
 8036be0:	4313      	orrs	r3, r2
 8036be2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8036be4:	68fb      	ldr	r3, [r7, #12]
 8036be6:	021b      	lsls	r3, r3, #8
 8036be8:	687a      	ldr	r2, [r7, #4]
 8036bea:	7812      	ldrb	r2, [r2, #0]
 8036bec:	4313      	orrs	r3, r2
 8036bee:	60fb      	str	r3, [r7, #12]
	return rv;
 8036bf0:	68fb      	ldr	r3, [r7, #12]
}
 8036bf2:	4618      	mov	r0, r3
 8036bf4:	3714      	adds	r7, #20
 8036bf6:	46bd      	mov	sp, r7
 8036bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036bfc:	4770      	bx	lr

08036bfe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8036bfe:	b480      	push	{r7}
 8036c00:	b083      	sub	sp, #12
 8036c02:	af00      	add	r7, sp, #0
 8036c04:	6078      	str	r0, [r7, #4]
 8036c06:	460b      	mov	r3, r1
 8036c08:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8036c0a:	687b      	ldr	r3, [r7, #4]
 8036c0c:	1c5a      	adds	r2, r3, #1
 8036c0e:	607a      	str	r2, [r7, #4]
 8036c10:	887a      	ldrh	r2, [r7, #2]
 8036c12:	b2d2      	uxtb	r2, r2
 8036c14:	701a      	strb	r2, [r3, #0]
 8036c16:	887b      	ldrh	r3, [r7, #2]
 8036c18:	0a1b      	lsrs	r3, r3, #8
 8036c1a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8036c1c:	687b      	ldr	r3, [r7, #4]
 8036c1e:	1c5a      	adds	r2, r3, #1
 8036c20:	607a      	str	r2, [r7, #4]
 8036c22:	887a      	ldrh	r2, [r7, #2]
 8036c24:	b2d2      	uxtb	r2, r2
 8036c26:	701a      	strb	r2, [r3, #0]
}
 8036c28:	bf00      	nop
 8036c2a:	370c      	adds	r7, #12
 8036c2c:	46bd      	mov	sp, r7
 8036c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036c32:	4770      	bx	lr

08036c34 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8036c34:	b480      	push	{r7}
 8036c36:	b083      	sub	sp, #12
 8036c38:	af00      	add	r7, sp, #0
 8036c3a:	6078      	str	r0, [r7, #4]
 8036c3c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8036c3e:	687b      	ldr	r3, [r7, #4]
 8036c40:	1c5a      	adds	r2, r3, #1
 8036c42:	607a      	str	r2, [r7, #4]
 8036c44:	683a      	ldr	r2, [r7, #0]
 8036c46:	b2d2      	uxtb	r2, r2
 8036c48:	701a      	strb	r2, [r3, #0]
 8036c4a:	683b      	ldr	r3, [r7, #0]
 8036c4c:	0a1b      	lsrs	r3, r3, #8
 8036c4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8036c50:	687b      	ldr	r3, [r7, #4]
 8036c52:	1c5a      	adds	r2, r3, #1
 8036c54:	607a      	str	r2, [r7, #4]
 8036c56:	683a      	ldr	r2, [r7, #0]
 8036c58:	b2d2      	uxtb	r2, r2
 8036c5a:	701a      	strb	r2, [r3, #0]
 8036c5c:	683b      	ldr	r3, [r7, #0]
 8036c5e:	0a1b      	lsrs	r3, r3, #8
 8036c60:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8036c62:	687b      	ldr	r3, [r7, #4]
 8036c64:	1c5a      	adds	r2, r3, #1
 8036c66:	607a      	str	r2, [r7, #4]
 8036c68:	683a      	ldr	r2, [r7, #0]
 8036c6a:	b2d2      	uxtb	r2, r2
 8036c6c:	701a      	strb	r2, [r3, #0]
 8036c6e:	683b      	ldr	r3, [r7, #0]
 8036c70:	0a1b      	lsrs	r3, r3, #8
 8036c72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8036c74:	687b      	ldr	r3, [r7, #4]
 8036c76:	1c5a      	adds	r2, r3, #1
 8036c78:	607a      	str	r2, [r7, #4]
 8036c7a:	683a      	ldr	r2, [r7, #0]
 8036c7c:	b2d2      	uxtb	r2, r2
 8036c7e:	701a      	strb	r2, [r3, #0]
}
 8036c80:	bf00      	nop
 8036c82:	370c      	adds	r7, #12
 8036c84:	46bd      	mov	sp, r7
 8036c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036c8a:	4770      	bx	lr

08036c8c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8036c8c:	b480      	push	{r7}
 8036c8e:	b087      	sub	sp, #28
 8036c90:	af00      	add	r7, sp, #0
 8036c92:	60f8      	str	r0, [r7, #12]
 8036c94:	60b9      	str	r1, [r7, #8]
 8036c96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8036c98:	68fb      	ldr	r3, [r7, #12]
 8036c9a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8036c9c:	68bb      	ldr	r3, [r7, #8]
 8036c9e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8036ca0:	687b      	ldr	r3, [r7, #4]
 8036ca2:	2b00      	cmp	r3, #0
 8036ca4:	d00d      	beq.n	8036cc2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8036ca6:	693a      	ldr	r2, [r7, #16]
 8036ca8:	1c53      	adds	r3, r2, #1
 8036caa:	613b      	str	r3, [r7, #16]
 8036cac:	697b      	ldr	r3, [r7, #20]
 8036cae:	1c59      	adds	r1, r3, #1
 8036cb0:	6179      	str	r1, [r7, #20]
 8036cb2:	7812      	ldrb	r2, [r2, #0]
 8036cb4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8036cb6:	687b      	ldr	r3, [r7, #4]
 8036cb8:	3b01      	subs	r3, #1
 8036cba:	607b      	str	r3, [r7, #4]
 8036cbc:	687b      	ldr	r3, [r7, #4]
 8036cbe:	2b00      	cmp	r3, #0
 8036cc0:	d1f1      	bne.n	8036ca6 <mem_cpy+0x1a>
	}
}
 8036cc2:	bf00      	nop
 8036cc4:	371c      	adds	r7, #28
 8036cc6:	46bd      	mov	sp, r7
 8036cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036ccc:	4770      	bx	lr

08036cce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8036cce:	b480      	push	{r7}
 8036cd0:	b087      	sub	sp, #28
 8036cd2:	af00      	add	r7, sp, #0
 8036cd4:	60f8      	str	r0, [r7, #12]
 8036cd6:	60b9      	str	r1, [r7, #8]
 8036cd8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8036cda:	68fb      	ldr	r3, [r7, #12]
 8036cdc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8036cde:	697b      	ldr	r3, [r7, #20]
 8036ce0:	1c5a      	adds	r2, r3, #1
 8036ce2:	617a      	str	r2, [r7, #20]
 8036ce4:	68ba      	ldr	r2, [r7, #8]
 8036ce6:	b2d2      	uxtb	r2, r2
 8036ce8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8036cea:	687b      	ldr	r3, [r7, #4]
 8036cec:	3b01      	subs	r3, #1
 8036cee:	607b      	str	r3, [r7, #4]
 8036cf0:	687b      	ldr	r3, [r7, #4]
 8036cf2:	2b00      	cmp	r3, #0
 8036cf4:	d1f3      	bne.n	8036cde <mem_set+0x10>
}
 8036cf6:	bf00      	nop
 8036cf8:	bf00      	nop
 8036cfa:	371c      	adds	r7, #28
 8036cfc:	46bd      	mov	sp, r7
 8036cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036d02:	4770      	bx	lr

08036d04 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8036d04:	b480      	push	{r7}
 8036d06:	b089      	sub	sp, #36	; 0x24
 8036d08:	af00      	add	r7, sp, #0
 8036d0a:	60f8      	str	r0, [r7, #12]
 8036d0c:	60b9      	str	r1, [r7, #8]
 8036d0e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8036d10:	68fb      	ldr	r3, [r7, #12]
 8036d12:	61fb      	str	r3, [r7, #28]
 8036d14:	68bb      	ldr	r3, [r7, #8]
 8036d16:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8036d18:	2300      	movs	r3, #0
 8036d1a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8036d1c:	69fb      	ldr	r3, [r7, #28]
 8036d1e:	1c5a      	adds	r2, r3, #1
 8036d20:	61fa      	str	r2, [r7, #28]
 8036d22:	781b      	ldrb	r3, [r3, #0]
 8036d24:	4619      	mov	r1, r3
 8036d26:	69bb      	ldr	r3, [r7, #24]
 8036d28:	1c5a      	adds	r2, r3, #1
 8036d2a:	61ba      	str	r2, [r7, #24]
 8036d2c:	781b      	ldrb	r3, [r3, #0]
 8036d2e:	1acb      	subs	r3, r1, r3
 8036d30:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8036d32:	687b      	ldr	r3, [r7, #4]
 8036d34:	3b01      	subs	r3, #1
 8036d36:	607b      	str	r3, [r7, #4]
 8036d38:	687b      	ldr	r3, [r7, #4]
 8036d3a:	2b00      	cmp	r3, #0
 8036d3c:	d002      	beq.n	8036d44 <mem_cmp+0x40>
 8036d3e:	697b      	ldr	r3, [r7, #20]
 8036d40:	2b00      	cmp	r3, #0
 8036d42:	d0eb      	beq.n	8036d1c <mem_cmp+0x18>

	return r;
 8036d44:	697b      	ldr	r3, [r7, #20]
}
 8036d46:	4618      	mov	r0, r3
 8036d48:	3724      	adds	r7, #36	; 0x24
 8036d4a:	46bd      	mov	sp, r7
 8036d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036d50:	4770      	bx	lr

08036d52 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8036d52:	b480      	push	{r7}
 8036d54:	b083      	sub	sp, #12
 8036d56:	af00      	add	r7, sp, #0
 8036d58:	6078      	str	r0, [r7, #4]
 8036d5a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8036d5c:	e002      	b.n	8036d64 <chk_chr+0x12>
 8036d5e:	687b      	ldr	r3, [r7, #4]
 8036d60:	3301      	adds	r3, #1
 8036d62:	607b      	str	r3, [r7, #4]
 8036d64:	687b      	ldr	r3, [r7, #4]
 8036d66:	781b      	ldrb	r3, [r3, #0]
 8036d68:	2b00      	cmp	r3, #0
 8036d6a:	d005      	beq.n	8036d78 <chk_chr+0x26>
 8036d6c:	687b      	ldr	r3, [r7, #4]
 8036d6e:	781b      	ldrb	r3, [r3, #0]
 8036d70:	461a      	mov	r2, r3
 8036d72:	683b      	ldr	r3, [r7, #0]
 8036d74:	4293      	cmp	r3, r2
 8036d76:	d1f2      	bne.n	8036d5e <chk_chr+0xc>
	return *str;
 8036d78:	687b      	ldr	r3, [r7, #4]
 8036d7a:	781b      	ldrb	r3, [r3, #0]
}
 8036d7c:	4618      	mov	r0, r3
 8036d7e:	370c      	adds	r7, #12
 8036d80:	46bd      	mov	sp, r7
 8036d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036d86:	4770      	bx	lr

08036d88 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8036d88:	b480      	push	{r7}
 8036d8a:	b085      	sub	sp, #20
 8036d8c:	af00      	add	r7, sp, #0
 8036d8e:	6078      	str	r0, [r7, #4]
 8036d90:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8036d92:	2300      	movs	r3, #0
 8036d94:	60bb      	str	r3, [r7, #8]
 8036d96:	68bb      	ldr	r3, [r7, #8]
 8036d98:	60fb      	str	r3, [r7, #12]
 8036d9a:	e029      	b.n	8036df0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8036d9c:	4a27      	ldr	r2, [pc, #156]	; (8036e3c <chk_lock+0xb4>)
 8036d9e:	68fb      	ldr	r3, [r7, #12]
 8036da0:	011b      	lsls	r3, r3, #4
 8036da2:	4413      	add	r3, r2
 8036da4:	681b      	ldr	r3, [r3, #0]
 8036da6:	2b00      	cmp	r3, #0
 8036da8:	d01d      	beq.n	8036de6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8036daa:	4a24      	ldr	r2, [pc, #144]	; (8036e3c <chk_lock+0xb4>)
 8036dac:	68fb      	ldr	r3, [r7, #12]
 8036dae:	011b      	lsls	r3, r3, #4
 8036db0:	4413      	add	r3, r2
 8036db2:	681a      	ldr	r2, [r3, #0]
 8036db4:	687b      	ldr	r3, [r7, #4]
 8036db6:	681b      	ldr	r3, [r3, #0]
 8036db8:	429a      	cmp	r2, r3
 8036dba:	d116      	bne.n	8036dea <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8036dbc:	4a1f      	ldr	r2, [pc, #124]	; (8036e3c <chk_lock+0xb4>)
 8036dbe:	68fb      	ldr	r3, [r7, #12]
 8036dc0:	011b      	lsls	r3, r3, #4
 8036dc2:	4413      	add	r3, r2
 8036dc4:	3304      	adds	r3, #4
 8036dc6:	681a      	ldr	r2, [r3, #0]
 8036dc8:	687b      	ldr	r3, [r7, #4]
 8036dca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8036dcc:	429a      	cmp	r2, r3
 8036dce:	d10c      	bne.n	8036dea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8036dd0:	4a1a      	ldr	r2, [pc, #104]	; (8036e3c <chk_lock+0xb4>)
 8036dd2:	68fb      	ldr	r3, [r7, #12]
 8036dd4:	011b      	lsls	r3, r3, #4
 8036dd6:	4413      	add	r3, r2
 8036dd8:	3308      	adds	r3, #8
 8036dda:	681a      	ldr	r2, [r3, #0]
 8036ddc:	687b      	ldr	r3, [r7, #4]
 8036dde:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8036de0:	429a      	cmp	r2, r3
 8036de2:	d102      	bne.n	8036dea <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8036de4:	e007      	b.n	8036df6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8036de6:	2301      	movs	r3, #1
 8036de8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8036dea:	68fb      	ldr	r3, [r7, #12]
 8036dec:	3301      	adds	r3, #1
 8036dee:	60fb      	str	r3, [r7, #12]
 8036df0:	68fb      	ldr	r3, [r7, #12]
 8036df2:	2b01      	cmp	r3, #1
 8036df4:	d9d2      	bls.n	8036d9c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8036df6:	68fb      	ldr	r3, [r7, #12]
 8036df8:	2b02      	cmp	r3, #2
 8036dfa:	d109      	bne.n	8036e10 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8036dfc:	68bb      	ldr	r3, [r7, #8]
 8036dfe:	2b00      	cmp	r3, #0
 8036e00:	d102      	bne.n	8036e08 <chk_lock+0x80>
 8036e02:	683b      	ldr	r3, [r7, #0]
 8036e04:	2b02      	cmp	r3, #2
 8036e06:	d101      	bne.n	8036e0c <chk_lock+0x84>
 8036e08:	2300      	movs	r3, #0
 8036e0a:	e010      	b.n	8036e2e <chk_lock+0xa6>
 8036e0c:	2312      	movs	r3, #18
 8036e0e:	e00e      	b.n	8036e2e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8036e10:	683b      	ldr	r3, [r7, #0]
 8036e12:	2b00      	cmp	r3, #0
 8036e14:	d108      	bne.n	8036e28 <chk_lock+0xa0>
 8036e16:	4a09      	ldr	r2, [pc, #36]	; (8036e3c <chk_lock+0xb4>)
 8036e18:	68fb      	ldr	r3, [r7, #12]
 8036e1a:	011b      	lsls	r3, r3, #4
 8036e1c:	4413      	add	r3, r2
 8036e1e:	330c      	adds	r3, #12
 8036e20:	881b      	ldrh	r3, [r3, #0]
 8036e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8036e26:	d101      	bne.n	8036e2c <chk_lock+0xa4>
 8036e28:	2310      	movs	r3, #16
 8036e2a:	e000      	b.n	8036e2e <chk_lock+0xa6>
 8036e2c:	2300      	movs	r3, #0
}
 8036e2e:	4618      	mov	r0, r3
 8036e30:	3714      	adds	r7, #20
 8036e32:	46bd      	mov	sp, r7
 8036e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036e38:	4770      	bx	lr
 8036e3a:	bf00      	nop
 8036e3c:	20000300 	.word	0x20000300

08036e40 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8036e40:	b480      	push	{r7}
 8036e42:	b083      	sub	sp, #12
 8036e44:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8036e46:	2300      	movs	r3, #0
 8036e48:	607b      	str	r3, [r7, #4]
 8036e4a:	e002      	b.n	8036e52 <enq_lock+0x12>
 8036e4c:	687b      	ldr	r3, [r7, #4]
 8036e4e:	3301      	adds	r3, #1
 8036e50:	607b      	str	r3, [r7, #4]
 8036e52:	687b      	ldr	r3, [r7, #4]
 8036e54:	2b01      	cmp	r3, #1
 8036e56:	d806      	bhi.n	8036e66 <enq_lock+0x26>
 8036e58:	4a09      	ldr	r2, [pc, #36]	; (8036e80 <enq_lock+0x40>)
 8036e5a:	687b      	ldr	r3, [r7, #4]
 8036e5c:	011b      	lsls	r3, r3, #4
 8036e5e:	4413      	add	r3, r2
 8036e60:	681b      	ldr	r3, [r3, #0]
 8036e62:	2b00      	cmp	r3, #0
 8036e64:	d1f2      	bne.n	8036e4c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8036e66:	687b      	ldr	r3, [r7, #4]
 8036e68:	2b02      	cmp	r3, #2
 8036e6a:	bf14      	ite	ne
 8036e6c:	2301      	movne	r3, #1
 8036e6e:	2300      	moveq	r3, #0
 8036e70:	b2db      	uxtb	r3, r3
}
 8036e72:	4618      	mov	r0, r3
 8036e74:	370c      	adds	r7, #12
 8036e76:	46bd      	mov	sp, r7
 8036e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036e7c:	4770      	bx	lr
 8036e7e:	bf00      	nop
 8036e80:	20000300 	.word	0x20000300

08036e84 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8036e84:	b480      	push	{r7}
 8036e86:	b085      	sub	sp, #20
 8036e88:	af00      	add	r7, sp, #0
 8036e8a:	6078      	str	r0, [r7, #4]
 8036e8c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8036e8e:	2300      	movs	r3, #0
 8036e90:	60fb      	str	r3, [r7, #12]
 8036e92:	e01f      	b.n	8036ed4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8036e94:	4a41      	ldr	r2, [pc, #260]	; (8036f9c <inc_lock+0x118>)
 8036e96:	68fb      	ldr	r3, [r7, #12]
 8036e98:	011b      	lsls	r3, r3, #4
 8036e9a:	4413      	add	r3, r2
 8036e9c:	681a      	ldr	r2, [r3, #0]
 8036e9e:	687b      	ldr	r3, [r7, #4]
 8036ea0:	681b      	ldr	r3, [r3, #0]
 8036ea2:	429a      	cmp	r2, r3
 8036ea4:	d113      	bne.n	8036ece <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8036ea6:	4a3d      	ldr	r2, [pc, #244]	; (8036f9c <inc_lock+0x118>)
 8036ea8:	68fb      	ldr	r3, [r7, #12]
 8036eaa:	011b      	lsls	r3, r3, #4
 8036eac:	4413      	add	r3, r2
 8036eae:	3304      	adds	r3, #4
 8036eb0:	681a      	ldr	r2, [r3, #0]
 8036eb2:	687b      	ldr	r3, [r7, #4]
 8036eb4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8036eb6:	429a      	cmp	r2, r3
 8036eb8:	d109      	bne.n	8036ece <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8036eba:	4a38      	ldr	r2, [pc, #224]	; (8036f9c <inc_lock+0x118>)
 8036ebc:	68fb      	ldr	r3, [r7, #12]
 8036ebe:	011b      	lsls	r3, r3, #4
 8036ec0:	4413      	add	r3, r2
 8036ec2:	3308      	adds	r3, #8
 8036ec4:	681a      	ldr	r2, [r3, #0]
 8036ec6:	687b      	ldr	r3, [r7, #4]
 8036ec8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8036eca:	429a      	cmp	r2, r3
 8036ecc:	d006      	beq.n	8036edc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8036ece:	68fb      	ldr	r3, [r7, #12]
 8036ed0:	3301      	adds	r3, #1
 8036ed2:	60fb      	str	r3, [r7, #12]
 8036ed4:	68fb      	ldr	r3, [r7, #12]
 8036ed6:	2b01      	cmp	r3, #1
 8036ed8:	d9dc      	bls.n	8036e94 <inc_lock+0x10>
 8036eda:	e000      	b.n	8036ede <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8036edc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8036ede:	68fb      	ldr	r3, [r7, #12]
 8036ee0:	2b02      	cmp	r3, #2
 8036ee2:	d132      	bne.n	8036f4a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8036ee4:	2300      	movs	r3, #0
 8036ee6:	60fb      	str	r3, [r7, #12]
 8036ee8:	e002      	b.n	8036ef0 <inc_lock+0x6c>
 8036eea:	68fb      	ldr	r3, [r7, #12]
 8036eec:	3301      	adds	r3, #1
 8036eee:	60fb      	str	r3, [r7, #12]
 8036ef0:	68fb      	ldr	r3, [r7, #12]
 8036ef2:	2b01      	cmp	r3, #1
 8036ef4:	d806      	bhi.n	8036f04 <inc_lock+0x80>
 8036ef6:	4a29      	ldr	r2, [pc, #164]	; (8036f9c <inc_lock+0x118>)
 8036ef8:	68fb      	ldr	r3, [r7, #12]
 8036efa:	011b      	lsls	r3, r3, #4
 8036efc:	4413      	add	r3, r2
 8036efe:	681b      	ldr	r3, [r3, #0]
 8036f00:	2b00      	cmp	r3, #0
 8036f02:	d1f2      	bne.n	8036eea <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8036f04:	68fb      	ldr	r3, [r7, #12]
 8036f06:	2b02      	cmp	r3, #2
 8036f08:	d101      	bne.n	8036f0e <inc_lock+0x8a>
 8036f0a:	2300      	movs	r3, #0
 8036f0c:	e040      	b.n	8036f90 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8036f0e:	687b      	ldr	r3, [r7, #4]
 8036f10:	681a      	ldr	r2, [r3, #0]
 8036f12:	4922      	ldr	r1, [pc, #136]	; (8036f9c <inc_lock+0x118>)
 8036f14:	68fb      	ldr	r3, [r7, #12]
 8036f16:	011b      	lsls	r3, r3, #4
 8036f18:	440b      	add	r3, r1
 8036f1a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8036f1c:	687b      	ldr	r3, [r7, #4]
 8036f1e:	689a      	ldr	r2, [r3, #8]
 8036f20:	491e      	ldr	r1, [pc, #120]	; (8036f9c <inc_lock+0x118>)
 8036f22:	68fb      	ldr	r3, [r7, #12]
 8036f24:	011b      	lsls	r3, r3, #4
 8036f26:	440b      	add	r3, r1
 8036f28:	3304      	adds	r3, #4
 8036f2a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8036f2c:	687b      	ldr	r3, [r7, #4]
 8036f2e:	695a      	ldr	r2, [r3, #20]
 8036f30:	491a      	ldr	r1, [pc, #104]	; (8036f9c <inc_lock+0x118>)
 8036f32:	68fb      	ldr	r3, [r7, #12]
 8036f34:	011b      	lsls	r3, r3, #4
 8036f36:	440b      	add	r3, r1
 8036f38:	3308      	adds	r3, #8
 8036f3a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8036f3c:	4a17      	ldr	r2, [pc, #92]	; (8036f9c <inc_lock+0x118>)
 8036f3e:	68fb      	ldr	r3, [r7, #12]
 8036f40:	011b      	lsls	r3, r3, #4
 8036f42:	4413      	add	r3, r2
 8036f44:	330c      	adds	r3, #12
 8036f46:	2200      	movs	r2, #0
 8036f48:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8036f4a:	683b      	ldr	r3, [r7, #0]
 8036f4c:	2b00      	cmp	r3, #0
 8036f4e:	d009      	beq.n	8036f64 <inc_lock+0xe0>
 8036f50:	4a12      	ldr	r2, [pc, #72]	; (8036f9c <inc_lock+0x118>)
 8036f52:	68fb      	ldr	r3, [r7, #12]
 8036f54:	011b      	lsls	r3, r3, #4
 8036f56:	4413      	add	r3, r2
 8036f58:	330c      	adds	r3, #12
 8036f5a:	881b      	ldrh	r3, [r3, #0]
 8036f5c:	2b00      	cmp	r3, #0
 8036f5e:	d001      	beq.n	8036f64 <inc_lock+0xe0>
 8036f60:	2300      	movs	r3, #0
 8036f62:	e015      	b.n	8036f90 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8036f64:	683b      	ldr	r3, [r7, #0]
 8036f66:	2b00      	cmp	r3, #0
 8036f68:	d108      	bne.n	8036f7c <inc_lock+0xf8>
 8036f6a:	4a0c      	ldr	r2, [pc, #48]	; (8036f9c <inc_lock+0x118>)
 8036f6c:	68fb      	ldr	r3, [r7, #12]
 8036f6e:	011b      	lsls	r3, r3, #4
 8036f70:	4413      	add	r3, r2
 8036f72:	330c      	adds	r3, #12
 8036f74:	881b      	ldrh	r3, [r3, #0]
 8036f76:	3301      	adds	r3, #1
 8036f78:	b29a      	uxth	r2, r3
 8036f7a:	e001      	b.n	8036f80 <inc_lock+0xfc>
 8036f7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8036f80:	4906      	ldr	r1, [pc, #24]	; (8036f9c <inc_lock+0x118>)
 8036f82:	68fb      	ldr	r3, [r7, #12]
 8036f84:	011b      	lsls	r3, r3, #4
 8036f86:	440b      	add	r3, r1
 8036f88:	330c      	adds	r3, #12
 8036f8a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8036f8c:	68fb      	ldr	r3, [r7, #12]
 8036f8e:	3301      	adds	r3, #1
}
 8036f90:	4618      	mov	r0, r3
 8036f92:	3714      	adds	r7, #20
 8036f94:	46bd      	mov	sp, r7
 8036f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8036f9a:	4770      	bx	lr
 8036f9c:	20000300 	.word	0x20000300

08036fa0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8036fa0:	b480      	push	{r7}
 8036fa2:	b085      	sub	sp, #20
 8036fa4:	af00      	add	r7, sp, #0
 8036fa6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8036fa8:	687b      	ldr	r3, [r7, #4]
 8036faa:	3b01      	subs	r3, #1
 8036fac:	607b      	str	r3, [r7, #4]
 8036fae:	687b      	ldr	r3, [r7, #4]
 8036fb0:	2b01      	cmp	r3, #1
 8036fb2:	d825      	bhi.n	8037000 <dec_lock+0x60>
		n = Files[i].ctr;
 8036fb4:	4a17      	ldr	r2, [pc, #92]	; (8037014 <dec_lock+0x74>)
 8036fb6:	687b      	ldr	r3, [r7, #4]
 8036fb8:	011b      	lsls	r3, r3, #4
 8036fba:	4413      	add	r3, r2
 8036fbc:	330c      	adds	r3, #12
 8036fbe:	881b      	ldrh	r3, [r3, #0]
 8036fc0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8036fc2:	89fb      	ldrh	r3, [r7, #14]
 8036fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8036fc8:	d101      	bne.n	8036fce <dec_lock+0x2e>
 8036fca:	2300      	movs	r3, #0
 8036fcc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8036fce:	89fb      	ldrh	r3, [r7, #14]
 8036fd0:	2b00      	cmp	r3, #0
 8036fd2:	d002      	beq.n	8036fda <dec_lock+0x3a>
 8036fd4:	89fb      	ldrh	r3, [r7, #14]
 8036fd6:	3b01      	subs	r3, #1
 8036fd8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8036fda:	4a0e      	ldr	r2, [pc, #56]	; (8037014 <dec_lock+0x74>)
 8036fdc:	687b      	ldr	r3, [r7, #4]
 8036fde:	011b      	lsls	r3, r3, #4
 8036fe0:	4413      	add	r3, r2
 8036fe2:	330c      	adds	r3, #12
 8036fe4:	89fa      	ldrh	r2, [r7, #14]
 8036fe6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8036fe8:	89fb      	ldrh	r3, [r7, #14]
 8036fea:	2b00      	cmp	r3, #0
 8036fec:	d105      	bne.n	8036ffa <dec_lock+0x5a>
 8036fee:	4a09      	ldr	r2, [pc, #36]	; (8037014 <dec_lock+0x74>)
 8036ff0:	687b      	ldr	r3, [r7, #4]
 8036ff2:	011b      	lsls	r3, r3, #4
 8036ff4:	4413      	add	r3, r2
 8036ff6:	2200      	movs	r2, #0
 8036ff8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8036ffa:	2300      	movs	r3, #0
 8036ffc:	737b      	strb	r3, [r7, #13]
 8036ffe:	e001      	b.n	8037004 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8037000:	2302      	movs	r3, #2
 8037002:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8037004:	7b7b      	ldrb	r3, [r7, #13]
}
 8037006:	4618      	mov	r0, r3
 8037008:	3714      	adds	r7, #20
 803700a:	46bd      	mov	sp, r7
 803700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037010:	4770      	bx	lr
 8037012:	bf00      	nop
 8037014:	20000300 	.word	0x20000300

08037018 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8037018:	b480      	push	{r7}
 803701a:	b085      	sub	sp, #20
 803701c:	af00      	add	r7, sp, #0
 803701e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8037020:	2300      	movs	r3, #0
 8037022:	60fb      	str	r3, [r7, #12]
 8037024:	e010      	b.n	8037048 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8037026:	4a0d      	ldr	r2, [pc, #52]	; (803705c <clear_lock+0x44>)
 8037028:	68fb      	ldr	r3, [r7, #12]
 803702a:	011b      	lsls	r3, r3, #4
 803702c:	4413      	add	r3, r2
 803702e:	681b      	ldr	r3, [r3, #0]
 8037030:	687a      	ldr	r2, [r7, #4]
 8037032:	429a      	cmp	r2, r3
 8037034:	d105      	bne.n	8037042 <clear_lock+0x2a>
 8037036:	4a09      	ldr	r2, [pc, #36]	; (803705c <clear_lock+0x44>)
 8037038:	68fb      	ldr	r3, [r7, #12]
 803703a:	011b      	lsls	r3, r3, #4
 803703c:	4413      	add	r3, r2
 803703e:	2200      	movs	r2, #0
 8037040:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8037042:	68fb      	ldr	r3, [r7, #12]
 8037044:	3301      	adds	r3, #1
 8037046:	60fb      	str	r3, [r7, #12]
 8037048:	68fb      	ldr	r3, [r7, #12]
 803704a:	2b01      	cmp	r3, #1
 803704c:	d9eb      	bls.n	8037026 <clear_lock+0xe>
	}
}
 803704e:	bf00      	nop
 8037050:	bf00      	nop
 8037052:	3714      	adds	r7, #20
 8037054:	46bd      	mov	sp, r7
 8037056:	f85d 7b04 	ldr.w	r7, [sp], #4
 803705a:	4770      	bx	lr
 803705c:	20000300 	.word	0x20000300

08037060 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8037060:	b580      	push	{r7, lr}
 8037062:	b086      	sub	sp, #24
 8037064:	af00      	add	r7, sp, #0
 8037066:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8037068:	2300      	movs	r3, #0
 803706a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 803706c:	687b      	ldr	r3, [r7, #4]
 803706e:	78db      	ldrb	r3, [r3, #3]
 8037070:	2b00      	cmp	r3, #0
 8037072:	d034      	beq.n	80370de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8037074:	687b      	ldr	r3, [r7, #4]
 8037076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037078:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 803707a:	687b      	ldr	r3, [r7, #4]
 803707c:	7858      	ldrb	r0, [r3, #1]
 803707e:	687b      	ldr	r3, [r7, #4]
 8037080:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8037084:	2301      	movs	r3, #1
 8037086:	697a      	ldr	r2, [r7, #20]
 8037088:	f7ff fd40 	bl	8036b0c <disk_write>
 803708c:	4603      	mov	r3, r0
 803708e:	2b00      	cmp	r3, #0
 8037090:	d002      	beq.n	8037098 <sync_window+0x38>
			res = FR_DISK_ERR;
 8037092:	2301      	movs	r3, #1
 8037094:	73fb      	strb	r3, [r7, #15]
 8037096:	e022      	b.n	80370de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8037098:	687b      	ldr	r3, [r7, #4]
 803709a:	2200      	movs	r2, #0
 803709c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 803709e:	687b      	ldr	r3, [r7, #4]
 80370a0:	6a1b      	ldr	r3, [r3, #32]
 80370a2:	697a      	ldr	r2, [r7, #20]
 80370a4:	1ad2      	subs	r2, r2, r3
 80370a6:	687b      	ldr	r3, [r7, #4]
 80370a8:	699b      	ldr	r3, [r3, #24]
 80370aa:	429a      	cmp	r2, r3
 80370ac:	d217      	bcs.n	80370de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80370ae:	687b      	ldr	r3, [r7, #4]
 80370b0:	789b      	ldrb	r3, [r3, #2]
 80370b2:	613b      	str	r3, [r7, #16]
 80370b4:	e010      	b.n	80370d8 <sync_window+0x78>
					wsect += fs->fsize;
 80370b6:	687b      	ldr	r3, [r7, #4]
 80370b8:	699b      	ldr	r3, [r3, #24]
 80370ba:	697a      	ldr	r2, [r7, #20]
 80370bc:	4413      	add	r3, r2
 80370be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80370c0:	687b      	ldr	r3, [r7, #4]
 80370c2:	7858      	ldrb	r0, [r3, #1]
 80370c4:	687b      	ldr	r3, [r7, #4]
 80370c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80370ca:	2301      	movs	r3, #1
 80370cc:	697a      	ldr	r2, [r7, #20]
 80370ce:	f7ff fd1d 	bl	8036b0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80370d2:	693b      	ldr	r3, [r7, #16]
 80370d4:	3b01      	subs	r3, #1
 80370d6:	613b      	str	r3, [r7, #16]
 80370d8:	693b      	ldr	r3, [r7, #16]
 80370da:	2b01      	cmp	r3, #1
 80370dc:	d8eb      	bhi.n	80370b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80370de:	7bfb      	ldrb	r3, [r7, #15]
}
 80370e0:	4618      	mov	r0, r3
 80370e2:	3718      	adds	r7, #24
 80370e4:	46bd      	mov	sp, r7
 80370e6:	bd80      	pop	{r7, pc}

080370e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80370e8:	b580      	push	{r7, lr}
 80370ea:	b084      	sub	sp, #16
 80370ec:	af00      	add	r7, sp, #0
 80370ee:	6078      	str	r0, [r7, #4]
 80370f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80370f2:	2300      	movs	r3, #0
 80370f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80370f6:	687b      	ldr	r3, [r7, #4]
 80370f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80370fa:	683a      	ldr	r2, [r7, #0]
 80370fc:	429a      	cmp	r2, r3
 80370fe:	d01b      	beq.n	8037138 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8037100:	6878      	ldr	r0, [r7, #4]
 8037102:	f7ff ffad 	bl	8037060 <sync_window>
 8037106:	4603      	mov	r3, r0
 8037108:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 803710a:	7bfb      	ldrb	r3, [r7, #15]
 803710c:	2b00      	cmp	r3, #0
 803710e:	d113      	bne.n	8037138 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8037110:	687b      	ldr	r3, [r7, #4]
 8037112:	7858      	ldrb	r0, [r3, #1]
 8037114:	687b      	ldr	r3, [r7, #4]
 8037116:	f103 0130 	add.w	r1, r3, #48	; 0x30
 803711a:	2301      	movs	r3, #1
 803711c:	683a      	ldr	r2, [r7, #0]
 803711e:	f7ff fcd5 	bl	8036acc <disk_read>
 8037122:	4603      	mov	r3, r0
 8037124:	2b00      	cmp	r3, #0
 8037126:	d004      	beq.n	8037132 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8037128:	f04f 33ff 	mov.w	r3, #4294967295
 803712c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 803712e:	2301      	movs	r3, #1
 8037130:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8037132:	687b      	ldr	r3, [r7, #4]
 8037134:	683a      	ldr	r2, [r7, #0]
 8037136:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8037138:	7bfb      	ldrb	r3, [r7, #15]
}
 803713a:	4618      	mov	r0, r3
 803713c:	3710      	adds	r7, #16
 803713e:	46bd      	mov	sp, r7
 8037140:	bd80      	pop	{r7, pc}
	...

08037144 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8037144:	b580      	push	{r7, lr}
 8037146:	b084      	sub	sp, #16
 8037148:	af00      	add	r7, sp, #0
 803714a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 803714c:	6878      	ldr	r0, [r7, #4]
 803714e:	f7ff ff87 	bl	8037060 <sync_window>
 8037152:	4603      	mov	r3, r0
 8037154:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8037156:	7bfb      	ldrb	r3, [r7, #15]
 8037158:	2b00      	cmp	r3, #0
 803715a:	d158      	bne.n	803720e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 803715c:	687b      	ldr	r3, [r7, #4]
 803715e:	781b      	ldrb	r3, [r3, #0]
 8037160:	2b03      	cmp	r3, #3
 8037162:	d148      	bne.n	80371f6 <sync_fs+0xb2>
 8037164:	687b      	ldr	r3, [r7, #4]
 8037166:	791b      	ldrb	r3, [r3, #4]
 8037168:	2b01      	cmp	r3, #1
 803716a:	d144      	bne.n	80371f6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 803716c:	687b      	ldr	r3, [r7, #4]
 803716e:	3330      	adds	r3, #48	; 0x30
 8037170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8037174:	2100      	movs	r1, #0
 8037176:	4618      	mov	r0, r3
 8037178:	f7ff fda9 	bl	8036cce <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 803717c:	687b      	ldr	r3, [r7, #4]
 803717e:	3330      	adds	r3, #48	; 0x30
 8037180:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8037184:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8037188:	4618      	mov	r0, r3
 803718a:	f7ff fd38 	bl	8036bfe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 803718e:	687b      	ldr	r3, [r7, #4]
 8037190:	3330      	adds	r3, #48	; 0x30
 8037192:	4921      	ldr	r1, [pc, #132]	; (8037218 <sync_fs+0xd4>)
 8037194:	4618      	mov	r0, r3
 8037196:	f7ff fd4d 	bl	8036c34 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 803719a:	687b      	ldr	r3, [r7, #4]
 803719c:	3330      	adds	r3, #48	; 0x30
 803719e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80371a2:	491e      	ldr	r1, [pc, #120]	; (803721c <sync_fs+0xd8>)
 80371a4:	4618      	mov	r0, r3
 80371a6:	f7ff fd45 	bl	8036c34 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80371aa:	687b      	ldr	r3, [r7, #4]
 80371ac:	3330      	adds	r3, #48	; 0x30
 80371ae:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80371b2:	687b      	ldr	r3, [r7, #4]
 80371b4:	691b      	ldr	r3, [r3, #16]
 80371b6:	4619      	mov	r1, r3
 80371b8:	4610      	mov	r0, r2
 80371ba:	f7ff fd3b 	bl	8036c34 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80371be:	687b      	ldr	r3, [r7, #4]
 80371c0:	3330      	adds	r3, #48	; 0x30
 80371c2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80371c6:	687b      	ldr	r3, [r7, #4]
 80371c8:	68db      	ldr	r3, [r3, #12]
 80371ca:	4619      	mov	r1, r3
 80371cc:	4610      	mov	r0, r2
 80371ce:	f7ff fd31 	bl	8036c34 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80371d2:	687b      	ldr	r3, [r7, #4]
 80371d4:	69db      	ldr	r3, [r3, #28]
 80371d6:	1c5a      	adds	r2, r3, #1
 80371d8:	687b      	ldr	r3, [r7, #4]
 80371da:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80371dc:	687b      	ldr	r3, [r7, #4]
 80371de:	7858      	ldrb	r0, [r3, #1]
 80371e0:	687b      	ldr	r3, [r7, #4]
 80371e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80371e6:	687b      	ldr	r3, [r7, #4]
 80371e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80371ea:	2301      	movs	r3, #1
 80371ec:	f7ff fc8e 	bl	8036b0c <disk_write>
			fs->fsi_flag = 0;
 80371f0:	687b      	ldr	r3, [r7, #4]
 80371f2:	2200      	movs	r2, #0
 80371f4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80371f6:	687b      	ldr	r3, [r7, #4]
 80371f8:	785b      	ldrb	r3, [r3, #1]
 80371fa:	2200      	movs	r2, #0
 80371fc:	2100      	movs	r1, #0
 80371fe:	4618      	mov	r0, r3
 8037200:	f7ff fca4 	bl	8036b4c <disk_ioctl>
 8037204:	4603      	mov	r3, r0
 8037206:	2b00      	cmp	r3, #0
 8037208:	d001      	beq.n	803720e <sync_fs+0xca>
 803720a:	2301      	movs	r3, #1
 803720c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 803720e:	7bfb      	ldrb	r3, [r7, #15]
}
 8037210:	4618      	mov	r0, r3
 8037212:	3710      	adds	r7, #16
 8037214:	46bd      	mov	sp, r7
 8037216:	bd80      	pop	{r7, pc}
 8037218:	41615252 	.word	0x41615252
 803721c:	61417272 	.word	0x61417272

08037220 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8037220:	b480      	push	{r7}
 8037222:	b083      	sub	sp, #12
 8037224:	af00      	add	r7, sp, #0
 8037226:	6078      	str	r0, [r7, #4]
 8037228:	6039      	str	r1, [r7, #0]
	clst -= 2;
 803722a:	683b      	ldr	r3, [r7, #0]
 803722c:	3b02      	subs	r3, #2
 803722e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8037230:	687b      	ldr	r3, [r7, #4]
 8037232:	695b      	ldr	r3, [r3, #20]
 8037234:	3b02      	subs	r3, #2
 8037236:	683a      	ldr	r2, [r7, #0]
 8037238:	429a      	cmp	r2, r3
 803723a:	d301      	bcc.n	8037240 <clust2sect+0x20>
 803723c:	2300      	movs	r3, #0
 803723e:	e008      	b.n	8037252 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8037240:	687b      	ldr	r3, [r7, #4]
 8037242:	895b      	ldrh	r3, [r3, #10]
 8037244:	461a      	mov	r2, r3
 8037246:	683b      	ldr	r3, [r7, #0]
 8037248:	fb03 f202 	mul.w	r2, r3, r2
 803724c:	687b      	ldr	r3, [r7, #4]
 803724e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8037250:	4413      	add	r3, r2
}
 8037252:	4618      	mov	r0, r3
 8037254:	370c      	adds	r7, #12
 8037256:	46bd      	mov	sp, r7
 8037258:	f85d 7b04 	ldr.w	r7, [sp], #4
 803725c:	4770      	bx	lr

0803725e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 803725e:	b580      	push	{r7, lr}
 8037260:	b086      	sub	sp, #24
 8037262:	af00      	add	r7, sp, #0
 8037264:	6078      	str	r0, [r7, #4]
 8037266:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8037268:	687b      	ldr	r3, [r7, #4]
 803726a:	681b      	ldr	r3, [r3, #0]
 803726c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 803726e:	683b      	ldr	r3, [r7, #0]
 8037270:	2b01      	cmp	r3, #1
 8037272:	d904      	bls.n	803727e <get_fat+0x20>
 8037274:	693b      	ldr	r3, [r7, #16]
 8037276:	695b      	ldr	r3, [r3, #20]
 8037278:	683a      	ldr	r2, [r7, #0]
 803727a:	429a      	cmp	r2, r3
 803727c:	d302      	bcc.n	8037284 <get_fat+0x26>
		val = 1;	/* Internal error */
 803727e:	2301      	movs	r3, #1
 8037280:	617b      	str	r3, [r7, #20]
 8037282:	e08f      	b.n	80373a4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8037284:	f04f 33ff 	mov.w	r3, #4294967295
 8037288:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 803728a:	693b      	ldr	r3, [r7, #16]
 803728c:	781b      	ldrb	r3, [r3, #0]
 803728e:	2b03      	cmp	r3, #3
 8037290:	d062      	beq.n	8037358 <get_fat+0xfa>
 8037292:	2b03      	cmp	r3, #3
 8037294:	dc7c      	bgt.n	8037390 <get_fat+0x132>
 8037296:	2b01      	cmp	r3, #1
 8037298:	d002      	beq.n	80372a0 <get_fat+0x42>
 803729a:	2b02      	cmp	r3, #2
 803729c:	d042      	beq.n	8037324 <get_fat+0xc6>
 803729e:	e077      	b.n	8037390 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80372a0:	683b      	ldr	r3, [r7, #0]
 80372a2:	60fb      	str	r3, [r7, #12]
 80372a4:	68fb      	ldr	r3, [r7, #12]
 80372a6:	085b      	lsrs	r3, r3, #1
 80372a8:	68fa      	ldr	r2, [r7, #12]
 80372aa:	4413      	add	r3, r2
 80372ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80372ae:	693b      	ldr	r3, [r7, #16]
 80372b0:	6a1a      	ldr	r2, [r3, #32]
 80372b2:	68fb      	ldr	r3, [r7, #12]
 80372b4:	0a5b      	lsrs	r3, r3, #9
 80372b6:	4413      	add	r3, r2
 80372b8:	4619      	mov	r1, r3
 80372ba:	6938      	ldr	r0, [r7, #16]
 80372bc:	f7ff ff14 	bl	80370e8 <move_window>
 80372c0:	4603      	mov	r3, r0
 80372c2:	2b00      	cmp	r3, #0
 80372c4:	d167      	bne.n	8037396 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80372c6:	68fb      	ldr	r3, [r7, #12]
 80372c8:	1c5a      	adds	r2, r3, #1
 80372ca:	60fa      	str	r2, [r7, #12]
 80372cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80372d0:	693a      	ldr	r2, [r7, #16]
 80372d2:	4413      	add	r3, r2
 80372d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80372d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80372da:	693b      	ldr	r3, [r7, #16]
 80372dc:	6a1a      	ldr	r2, [r3, #32]
 80372de:	68fb      	ldr	r3, [r7, #12]
 80372e0:	0a5b      	lsrs	r3, r3, #9
 80372e2:	4413      	add	r3, r2
 80372e4:	4619      	mov	r1, r3
 80372e6:	6938      	ldr	r0, [r7, #16]
 80372e8:	f7ff fefe 	bl	80370e8 <move_window>
 80372ec:	4603      	mov	r3, r0
 80372ee:	2b00      	cmp	r3, #0
 80372f0:	d153      	bne.n	803739a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80372f2:	68fb      	ldr	r3, [r7, #12]
 80372f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80372f8:	693a      	ldr	r2, [r7, #16]
 80372fa:	4413      	add	r3, r2
 80372fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8037300:	021b      	lsls	r3, r3, #8
 8037302:	461a      	mov	r2, r3
 8037304:	68bb      	ldr	r3, [r7, #8]
 8037306:	4313      	orrs	r3, r2
 8037308:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 803730a:	683b      	ldr	r3, [r7, #0]
 803730c:	f003 0301 	and.w	r3, r3, #1
 8037310:	2b00      	cmp	r3, #0
 8037312:	d002      	beq.n	803731a <get_fat+0xbc>
 8037314:	68bb      	ldr	r3, [r7, #8]
 8037316:	091b      	lsrs	r3, r3, #4
 8037318:	e002      	b.n	8037320 <get_fat+0xc2>
 803731a:	68bb      	ldr	r3, [r7, #8]
 803731c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8037320:	617b      	str	r3, [r7, #20]
			break;
 8037322:	e03f      	b.n	80373a4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8037324:	693b      	ldr	r3, [r7, #16]
 8037326:	6a1a      	ldr	r2, [r3, #32]
 8037328:	683b      	ldr	r3, [r7, #0]
 803732a:	0a1b      	lsrs	r3, r3, #8
 803732c:	4413      	add	r3, r2
 803732e:	4619      	mov	r1, r3
 8037330:	6938      	ldr	r0, [r7, #16]
 8037332:	f7ff fed9 	bl	80370e8 <move_window>
 8037336:	4603      	mov	r3, r0
 8037338:	2b00      	cmp	r3, #0
 803733a:	d130      	bne.n	803739e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 803733c:	693b      	ldr	r3, [r7, #16]
 803733e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8037342:	683b      	ldr	r3, [r7, #0]
 8037344:	005b      	lsls	r3, r3, #1
 8037346:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 803734a:	4413      	add	r3, r2
 803734c:	4618      	mov	r0, r3
 803734e:	f7ff fc1b 	bl	8036b88 <ld_word>
 8037352:	4603      	mov	r3, r0
 8037354:	617b      	str	r3, [r7, #20]
			break;
 8037356:	e025      	b.n	80373a4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8037358:	693b      	ldr	r3, [r7, #16]
 803735a:	6a1a      	ldr	r2, [r3, #32]
 803735c:	683b      	ldr	r3, [r7, #0]
 803735e:	09db      	lsrs	r3, r3, #7
 8037360:	4413      	add	r3, r2
 8037362:	4619      	mov	r1, r3
 8037364:	6938      	ldr	r0, [r7, #16]
 8037366:	f7ff febf 	bl	80370e8 <move_window>
 803736a:	4603      	mov	r3, r0
 803736c:	2b00      	cmp	r3, #0
 803736e:	d118      	bne.n	80373a2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8037370:	693b      	ldr	r3, [r7, #16]
 8037372:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8037376:	683b      	ldr	r3, [r7, #0]
 8037378:	009b      	lsls	r3, r3, #2
 803737a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 803737e:	4413      	add	r3, r2
 8037380:	4618      	mov	r0, r3
 8037382:	f7ff fc19 	bl	8036bb8 <ld_dword>
 8037386:	4603      	mov	r3, r0
 8037388:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 803738c:	617b      	str	r3, [r7, #20]
			break;
 803738e:	e009      	b.n	80373a4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8037390:	2301      	movs	r3, #1
 8037392:	617b      	str	r3, [r7, #20]
 8037394:	e006      	b.n	80373a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8037396:	bf00      	nop
 8037398:	e004      	b.n	80373a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 803739a:	bf00      	nop
 803739c:	e002      	b.n	80373a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 803739e:	bf00      	nop
 80373a0:	e000      	b.n	80373a4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80373a2:	bf00      	nop
		}
	}

	return val;
 80373a4:	697b      	ldr	r3, [r7, #20]
}
 80373a6:	4618      	mov	r0, r3
 80373a8:	3718      	adds	r7, #24
 80373aa:	46bd      	mov	sp, r7
 80373ac:	bd80      	pop	{r7, pc}

080373ae <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80373ae:	b590      	push	{r4, r7, lr}
 80373b0:	b089      	sub	sp, #36	; 0x24
 80373b2:	af00      	add	r7, sp, #0
 80373b4:	60f8      	str	r0, [r7, #12]
 80373b6:	60b9      	str	r1, [r7, #8]
 80373b8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80373ba:	2302      	movs	r3, #2
 80373bc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80373be:	68bb      	ldr	r3, [r7, #8]
 80373c0:	2b01      	cmp	r3, #1
 80373c2:	f240 80d2 	bls.w	803756a <put_fat+0x1bc>
 80373c6:	68fb      	ldr	r3, [r7, #12]
 80373c8:	695b      	ldr	r3, [r3, #20]
 80373ca:	68ba      	ldr	r2, [r7, #8]
 80373cc:	429a      	cmp	r2, r3
 80373ce:	f080 80cc 	bcs.w	803756a <put_fat+0x1bc>
		switch (fs->fs_type) {
 80373d2:	68fb      	ldr	r3, [r7, #12]
 80373d4:	781b      	ldrb	r3, [r3, #0]
 80373d6:	2b03      	cmp	r3, #3
 80373d8:	f000 8096 	beq.w	8037508 <put_fat+0x15a>
 80373dc:	2b03      	cmp	r3, #3
 80373de:	f300 80cd 	bgt.w	803757c <put_fat+0x1ce>
 80373e2:	2b01      	cmp	r3, #1
 80373e4:	d002      	beq.n	80373ec <put_fat+0x3e>
 80373e6:	2b02      	cmp	r3, #2
 80373e8:	d06e      	beq.n	80374c8 <put_fat+0x11a>
 80373ea:	e0c7      	b.n	803757c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80373ec:	68bb      	ldr	r3, [r7, #8]
 80373ee:	61bb      	str	r3, [r7, #24]
 80373f0:	69bb      	ldr	r3, [r7, #24]
 80373f2:	085b      	lsrs	r3, r3, #1
 80373f4:	69ba      	ldr	r2, [r7, #24]
 80373f6:	4413      	add	r3, r2
 80373f8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80373fa:	68fb      	ldr	r3, [r7, #12]
 80373fc:	6a1a      	ldr	r2, [r3, #32]
 80373fe:	69bb      	ldr	r3, [r7, #24]
 8037400:	0a5b      	lsrs	r3, r3, #9
 8037402:	4413      	add	r3, r2
 8037404:	4619      	mov	r1, r3
 8037406:	68f8      	ldr	r0, [r7, #12]
 8037408:	f7ff fe6e 	bl	80370e8 <move_window>
 803740c:	4603      	mov	r3, r0
 803740e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8037410:	7ffb      	ldrb	r3, [r7, #31]
 8037412:	2b00      	cmp	r3, #0
 8037414:	f040 80ab 	bne.w	803756e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8037418:	68fb      	ldr	r3, [r7, #12]
 803741a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 803741e:	69bb      	ldr	r3, [r7, #24]
 8037420:	1c59      	adds	r1, r3, #1
 8037422:	61b9      	str	r1, [r7, #24]
 8037424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8037428:	4413      	add	r3, r2
 803742a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 803742c:	68bb      	ldr	r3, [r7, #8]
 803742e:	f003 0301 	and.w	r3, r3, #1
 8037432:	2b00      	cmp	r3, #0
 8037434:	d00d      	beq.n	8037452 <put_fat+0xa4>
 8037436:	697b      	ldr	r3, [r7, #20]
 8037438:	781b      	ldrb	r3, [r3, #0]
 803743a:	b25b      	sxtb	r3, r3
 803743c:	f003 030f 	and.w	r3, r3, #15
 8037440:	b25a      	sxtb	r2, r3
 8037442:	687b      	ldr	r3, [r7, #4]
 8037444:	b2db      	uxtb	r3, r3
 8037446:	011b      	lsls	r3, r3, #4
 8037448:	b25b      	sxtb	r3, r3
 803744a:	4313      	orrs	r3, r2
 803744c:	b25b      	sxtb	r3, r3
 803744e:	b2db      	uxtb	r3, r3
 8037450:	e001      	b.n	8037456 <put_fat+0xa8>
 8037452:	687b      	ldr	r3, [r7, #4]
 8037454:	b2db      	uxtb	r3, r3
 8037456:	697a      	ldr	r2, [r7, #20]
 8037458:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 803745a:	68fb      	ldr	r3, [r7, #12]
 803745c:	2201      	movs	r2, #1
 803745e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8037460:	68fb      	ldr	r3, [r7, #12]
 8037462:	6a1a      	ldr	r2, [r3, #32]
 8037464:	69bb      	ldr	r3, [r7, #24]
 8037466:	0a5b      	lsrs	r3, r3, #9
 8037468:	4413      	add	r3, r2
 803746a:	4619      	mov	r1, r3
 803746c:	68f8      	ldr	r0, [r7, #12]
 803746e:	f7ff fe3b 	bl	80370e8 <move_window>
 8037472:	4603      	mov	r3, r0
 8037474:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8037476:	7ffb      	ldrb	r3, [r7, #31]
 8037478:	2b00      	cmp	r3, #0
 803747a:	d17a      	bne.n	8037572 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 803747c:	68fb      	ldr	r3, [r7, #12]
 803747e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8037482:	69bb      	ldr	r3, [r7, #24]
 8037484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8037488:	4413      	add	r3, r2
 803748a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 803748c:	68bb      	ldr	r3, [r7, #8]
 803748e:	f003 0301 	and.w	r3, r3, #1
 8037492:	2b00      	cmp	r3, #0
 8037494:	d003      	beq.n	803749e <put_fat+0xf0>
 8037496:	687b      	ldr	r3, [r7, #4]
 8037498:	091b      	lsrs	r3, r3, #4
 803749a:	b2db      	uxtb	r3, r3
 803749c:	e00e      	b.n	80374bc <put_fat+0x10e>
 803749e:	697b      	ldr	r3, [r7, #20]
 80374a0:	781b      	ldrb	r3, [r3, #0]
 80374a2:	b25b      	sxtb	r3, r3
 80374a4:	f023 030f 	bic.w	r3, r3, #15
 80374a8:	b25a      	sxtb	r2, r3
 80374aa:	687b      	ldr	r3, [r7, #4]
 80374ac:	0a1b      	lsrs	r3, r3, #8
 80374ae:	b25b      	sxtb	r3, r3
 80374b0:	f003 030f 	and.w	r3, r3, #15
 80374b4:	b25b      	sxtb	r3, r3
 80374b6:	4313      	orrs	r3, r2
 80374b8:	b25b      	sxtb	r3, r3
 80374ba:	b2db      	uxtb	r3, r3
 80374bc:	697a      	ldr	r2, [r7, #20]
 80374be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80374c0:	68fb      	ldr	r3, [r7, #12]
 80374c2:	2201      	movs	r2, #1
 80374c4:	70da      	strb	r2, [r3, #3]
			break;
 80374c6:	e059      	b.n	803757c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80374c8:	68fb      	ldr	r3, [r7, #12]
 80374ca:	6a1a      	ldr	r2, [r3, #32]
 80374cc:	68bb      	ldr	r3, [r7, #8]
 80374ce:	0a1b      	lsrs	r3, r3, #8
 80374d0:	4413      	add	r3, r2
 80374d2:	4619      	mov	r1, r3
 80374d4:	68f8      	ldr	r0, [r7, #12]
 80374d6:	f7ff fe07 	bl	80370e8 <move_window>
 80374da:	4603      	mov	r3, r0
 80374dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80374de:	7ffb      	ldrb	r3, [r7, #31]
 80374e0:	2b00      	cmp	r3, #0
 80374e2:	d148      	bne.n	8037576 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80374e4:	68fb      	ldr	r3, [r7, #12]
 80374e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80374ea:	68bb      	ldr	r3, [r7, #8]
 80374ec:	005b      	lsls	r3, r3, #1
 80374ee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80374f2:	4413      	add	r3, r2
 80374f4:	687a      	ldr	r2, [r7, #4]
 80374f6:	b292      	uxth	r2, r2
 80374f8:	4611      	mov	r1, r2
 80374fa:	4618      	mov	r0, r3
 80374fc:	f7ff fb7f 	bl	8036bfe <st_word>
			fs->wflag = 1;
 8037500:	68fb      	ldr	r3, [r7, #12]
 8037502:	2201      	movs	r2, #1
 8037504:	70da      	strb	r2, [r3, #3]
			break;
 8037506:	e039      	b.n	803757c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8037508:	68fb      	ldr	r3, [r7, #12]
 803750a:	6a1a      	ldr	r2, [r3, #32]
 803750c:	68bb      	ldr	r3, [r7, #8]
 803750e:	09db      	lsrs	r3, r3, #7
 8037510:	4413      	add	r3, r2
 8037512:	4619      	mov	r1, r3
 8037514:	68f8      	ldr	r0, [r7, #12]
 8037516:	f7ff fde7 	bl	80370e8 <move_window>
 803751a:	4603      	mov	r3, r0
 803751c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 803751e:	7ffb      	ldrb	r3, [r7, #31]
 8037520:	2b00      	cmp	r3, #0
 8037522:	d12a      	bne.n	803757a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8037524:	687b      	ldr	r3, [r7, #4]
 8037526:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 803752a:	68fb      	ldr	r3, [r7, #12]
 803752c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8037530:	68bb      	ldr	r3, [r7, #8]
 8037532:	009b      	lsls	r3, r3, #2
 8037534:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8037538:	4413      	add	r3, r2
 803753a:	4618      	mov	r0, r3
 803753c:	f7ff fb3c 	bl	8036bb8 <ld_dword>
 8037540:	4603      	mov	r3, r0
 8037542:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8037546:	4323      	orrs	r3, r4
 8037548:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 803754a:	68fb      	ldr	r3, [r7, #12]
 803754c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8037550:	68bb      	ldr	r3, [r7, #8]
 8037552:	009b      	lsls	r3, r3, #2
 8037554:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8037558:	4413      	add	r3, r2
 803755a:	6879      	ldr	r1, [r7, #4]
 803755c:	4618      	mov	r0, r3
 803755e:	f7ff fb69 	bl	8036c34 <st_dword>
			fs->wflag = 1;
 8037562:	68fb      	ldr	r3, [r7, #12]
 8037564:	2201      	movs	r2, #1
 8037566:	70da      	strb	r2, [r3, #3]
			break;
 8037568:	e008      	b.n	803757c <put_fat+0x1ce>
		}
	}
 803756a:	bf00      	nop
 803756c:	e006      	b.n	803757c <put_fat+0x1ce>
			if (res != FR_OK) break;
 803756e:	bf00      	nop
 8037570:	e004      	b.n	803757c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8037572:	bf00      	nop
 8037574:	e002      	b.n	803757c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8037576:	bf00      	nop
 8037578:	e000      	b.n	803757c <put_fat+0x1ce>
			if (res != FR_OK) break;
 803757a:	bf00      	nop
	return res;
 803757c:	7ffb      	ldrb	r3, [r7, #31]
}
 803757e:	4618      	mov	r0, r3
 8037580:	3724      	adds	r7, #36	; 0x24
 8037582:	46bd      	mov	sp, r7
 8037584:	bd90      	pop	{r4, r7, pc}

08037586 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8037586:	b580      	push	{r7, lr}
 8037588:	b088      	sub	sp, #32
 803758a:	af00      	add	r7, sp, #0
 803758c:	60f8      	str	r0, [r7, #12]
 803758e:	60b9      	str	r1, [r7, #8]
 8037590:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8037592:	2300      	movs	r3, #0
 8037594:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8037596:	68fb      	ldr	r3, [r7, #12]
 8037598:	681b      	ldr	r3, [r3, #0]
 803759a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 803759c:	68bb      	ldr	r3, [r7, #8]
 803759e:	2b01      	cmp	r3, #1
 80375a0:	d904      	bls.n	80375ac <remove_chain+0x26>
 80375a2:	69bb      	ldr	r3, [r7, #24]
 80375a4:	695b      	ldr	r3, [r3, #20]
 80375a6:	68ba      	ldr	r2, [r7, #8]
 80375a8:	429a      	cmp	r2, r3
 80375aa:	d301      	bcc.n	80375b0 <remove_chain+0x2a>
 80375ac:	2302      	movs	r3, #2
 80375ae:	e04b      	b.n	8037648 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80375b0:	687b      	ldr	r3, [r7, #4]
 80375b2:	2b00      	cmp	r3, #0
 80375b4:	d00c      	beq.n	80375d0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80375b6:	f04f 32ff 	mov.w	r2, #4294967295
 80375ba:	6879      	ldr	r1, [r7, #4]
 80375bc:	69b8      	ldr	r0, [r7, #24]
 80375be:	f7ff fef6 	bl	80373ae <put_fat>
 80375c2:	4603      	mov	r3, r0
 80375c4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80375c6:	7ffb      	ldrb	r3, [r7, #31]
 80375c8:	2b00      	cmp	r3, #0
 80375ca:	d001      	beq.n	80375d0 <remove_chain+0x4a>
 80375cc:	7ffb      	ldrb	r3, [r7, #31]
 80375ce:	e03b      	b.n	8037648 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80375d0:	68b9      	ldr	r1, [r7, #8]
 80375d2:	68f8      	ldr	r0, [r7, #12]
 80375d4:	f7ff fe43 	bl	803725e <get_fat>
 80375d8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80375da:	697b      	ldr	r3, [r7, #20]
 80375dc:	2b00      	cmp	r3, #0
 80375de:	d031      	beq.n	8037644 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80375e0:	697b      	ldr	r3, [r7, #20]
 80375e2:	2b01      	cmp	r3, #1
 80375e4:	d101      	bne.n	80375ea <remove_chain+0x64>
 80375e6:	2302      	movs	r3, #2
 80375e8:	e02e      	b.n	8037648 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80375ea:	697b      	ldr	r3, [r7, #20]
 80375ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80375f0:	d101      	bne.n	80375f6 <remove_chain+0x70>
 80375f2:	2301      	movs	r3, #1
 80375f4:	e028      	b.n	8037648 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80375f6:	2200      	movs	r2, #0
 80375f8:	68b9      	ldr	r1, [r7, #8]
 80375fa:	69b8      	ldr	r0, [r7, #24]
 80375fc:	f7ff fed7 	bl	80373ae <put_fat>
 8037600:	4603      	mov	r3, r0
 8037602:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8037604:	7ffb      	ldrb	r3, [r7, #31]
 8037606:	2b00      	cmp	r3, #0
 8037608:	d001      	beq.n	803760e <remove_chain+0x88>
 803760a:	7ffb      	ldrb	r3, [r7, #31]
 803760c:	e01c      	b.n	8037648 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 803760e:	69bb      	ldr	r3, [r7, #24]
 8037610:	691a      	ldr	r2, [r3, #16]
 8037612:	69bb      	ldr	r3, [r7, #24]
 8037614:	695b      	ldr	r3, [r3, #20]
 8037616:	3b02      	subs	r3, #2
 8037618:	429a      	cmp	r2, r3
 803761a:	d20b      	bcs.n	8037634 <remove_chain+0xae>
			fs->free_clst++;
 803761c:	69bb      	ldr	r3, [r7, #24]
 803761e:	691b      	ldr	r3, [r3, #16]
 8037620:	1c5a      	adds	r2, r3, #1
 8037622:	69bb      	ldr	r3, [r7, #24]
 8037624:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8037626:	69bb      	ldr	r3, [r7, #24]
 8037628:	791b      	ldrb	r3, [r3, #4]
 803762a:	f043 0301 	orr.w	r3, r3, #1
 803762e:	b2da      	uxtb	r2, r3
 8037630:	69bb      	ldr	r3, [r7, #24]
 8037632:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8037634:	697b      	ldr	r3, [r7, #20]
 8037636:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8037638:	69bb      	ldr	r3, [r7, #24]
 803763a:	695b      	ldr	r3, [r3, #20]
 803763c:	68ba      	ldr	r2, [r7, #8]
 803763e:	429a      	cmp	r2, r3
 8037640:	d3c6      	bcc.n	80375d0 <remove_chain+0x4a>
 8037642:	e000      	b.n	8037646 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8037644:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8037646:	2300      	movs	r3, #0
}
 8037648:	4618      	mov	r0, r3
 803764a:	3720      	adds	r7, #32
 803764c:	46bd      	mov	sp, r7
 803764e:	bd80      	pop	{r7, pc}

08037650 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8037650:	b580      	push	{r7, lr}
 8037652:	b088      	sub	sp, #32
 8037654:	af00      	add	r7, sp, #0
 8037656:	6078      	str	r0, [r7, #4]
 8037658:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 803765a:	687b      	ldr	r3, [r7, #4]
 803765c:	681b      	ldr	r3, [r3, #0]
 803765e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8037660:	683b      	ldr	r3, [r7, #0]
 8037662:	2b00      	cmp	r3, #0
 8037664:	d10d      	bne.n	8037682 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8037666:	693b      	ldr	r3, [r7, #16]
 8037668:	68db      	ldr	r3, [r3, #12]
 803766a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 803766c:	69bb      	ldr	r3, [r7, #24]
 803766e:	2b00      	cmp	r3, #0
 8037670:	d004      	beq.n	803767c <create_chain+0x2c>
 8037672:	693b      	ldr	r3, [r7, #16]
 8037674:	695b      	ldr	r3, [r3, #20]
 8037676:	69ba      	ldr	r2, [r7, #24]
 8037678:	429a      	cmp	r2, r3
 803767a:	d31b      	bcc.n	80376b4 <create_chain+0x64>
 803767c:	2301      	movs	r3, #1
 803767e:	61bb      	str	r3, [r7, #24]
 8037680:	e018      	b.n	80376b4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8037682:	6839      	ldr	r1, [r7, #0]
 8037684:	6878      	ldr	r0, [r7, #4]
 8037686:	f7ff fdea 	bl	803725e <get_fat>
 803768a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 803768c:	68fb      	ldr	r3, [r7, #12]
 803768e:	2b01      	cmp	r3, #1
 8037690:	d801      	bhi.n	8037696 <create_chain+0x46>
 8037692:	2301      	movs	r3, #1
 8037694:	e070      	b.n	8037778 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8037696:	68fb      	ldr	r3, [r7, #12]
 8037698:	f1b3 3fff 	cmp.w	r3, #4294967295
 803769c:	d101      	bne.n	80376a2 <create_chain+0x52>
 803769e:	68fb      	ldr	r3, [r7, #12]
 80376a0:	e06a      	b.n	8037778 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80376a2:	693b      	ldr	r3, [r7, #16]
 80376a4:	695b      	ldr	r3, [r3, #20]
 80376a6:	68fa      	ldr	r2, [r7, #12]
 80376a8:	429a      	cmp	r2, r3
 80376aa:	d201      	bcs.n	80376b0 <create_chain+0x60>
 80376ac:	68fb      	ldr	r3, [r7, #12]
 80376ae:	e063      	b.n	8037778 <create_chain+0x128>
		scl = clst;
 80376b0:	683b      	ldr	r3, [r7, #0]
 80376b2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80376b4:	69bb      	ldr	r3, [r7, #24]
 80376b6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80376b8:	69fb      	ldr	r3, [r7, #28]
 80376ba:	3301      	adds	r3, #1
 80376bc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80376be:	693b      	ldr	r3, [r7, #16]
 80376c0:	695b      	ldr	r3, [r3, #20]
 80376c2:	69fa      	ldr	r2, [r7, #28]
 80376c4:	429a      	cmp	r2, r3
 80376c6:	d307      	bcc.n	80376d8 <create_chain+0x88>
				ncl = 2;
 80376c8:	2302      	movs	r3, #2
 80376ca:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80376cc:	69fa      	ldr	r2, [r7, #28]
 80376ce:	69bb      	ldr	r3, [r7, #24]
 80376d0:	429a      	cmp	r2, r3
 80376d2:	d901      	bls.n	80376d8 <create_chain+0x88>
 80376d4:	2300      	movs	r3, #0
 80376d6:	e04f      	b.n	8037778 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80376d8:	69f9      	ldr	r1, [r7, #28]
 80376da:	6878      	ldr	r0, [r7, #4]
 80376dc:	f7ff fdbf 	bl	803725e <get_fat>
 80376e0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80376e2:	68fb      	ldr	r3, [r7, #12]
 80376e4:	2b00      	cmp	r3, #0
 80376e6:	d00e      	beq.n	8037706 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80376e8:	68fb      	ldr	r3, [r7, #12]
 80376ea:	2b01      	cmp	r3, #1
 80376ec:	d003      	beq.n	80376f6 <create_chain+0xa6>
 80376ee:	68fb      	ldr	r3, [r7, #12]
 80376f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80376f4:	d101      	bne.n	80376fa <create_chain+0xaa>
 80376f6:	68fb      	ldr	r3, [r7, #12]
 80376f8:	e03e      	b.n	8037778 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80376fa:	69fa      	ldr	r2, [r7, #28]
 80376fc:	69bb      	ldr	r3, [r7, #24]
 80376fe:	429a      	cmp	r2, r3
 8037700:	d1da      	bne.n	80376b8 <create_chain+0x68>
 8037702:	2300      	movs	r3, #0
 8037704:	e038      	b.n	8037778 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8037706:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8037708:	f04f 32ff 	mov.w	r2, #4294967295
 803770c:	69f9      	ldr	r1, [r7, #28]
 803770e:	6938      	ldr	r0, [r7, #16]
 8037710:	f7ff fe4d 	bl	80373ae <put_fat>
 8037714:	4603      	mov	r3, r0
 8037716:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8037718:	7dfb      	ldrb	r3, [r7, #23]
 803771a:	2b00      	cmp	r3, #0
 803771c:	d109      	bne.n	8037732 <create_chain+0xe2>
 803771e:	683b      	ldr	r3, [r7, #0]
 8037720:	2b00      	cmp	r3, #0
 8037722:	d006      	beq.n	8037732 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8037724:	69fa      	ldr	r2, [r7, #28]
 8037726:	6839      	ldr	r1, [r7, #0]
 8037728:	6938      	ldr	r0, [r7, #16]
 803772a:	f7ff fe40 	bl	80373ae <put_fat>
 803772e:	4603      	mov	r3, r0
 8037730:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8037732:	7dfb      	ldrb	r3, [r7, #23]
 8037734:	2b00      	cmp	r3, #0
 8037736:	d116      	bne.n	8037766 <create_chain+0x116>
		fs->last_clst = ncl;
 8037738:	693b      	ldr	r3, [r7, #16]
 803773a:	69fa      	ldr	r2, [r7, #28]
 803773c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 803773e:	693b      	ldr	r3, [r7, #16]
 8037740:	691a      	ldr	r2, [r3, #16]
 8037742:	693b      	ldr	r3, [r7, #16]
 8037744:	695b      	ldr	r3, [r3, #20]
 8037746:	3b02      	subs	r3, #2
 8037748:	429a      	cmp	r2, r3
 803774a:	d804      	bhi.n	8037756 <create_chain+0x106>
 803774c:	693b      	ldr	r3, [r7, #16]
 803774e:	691b      	ldr	r3, [r3, #16]
 8037750:	1e5a      	subs	r2, r3, #1
 8037752:	693b      	ldr	r3, [r7, #16]
 8037754:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8037756:	693b      	ldr	r3, [r7, #16]
 8037758:	791b      	ldrb	r3, [r3, #4]
 803775a:	f043 0301 	orr.w	r3, r3, #1
 803775e:	b2da      	uxtb	r2, r3
 8037760:	693b      	ldr	r3, [r7, #16]
 8037762:	711a      	strb	r2, [r3, #4]
 8037764:	e007      	b.n	8037776 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8037766:	7dfb      	ldrb	r3, [r7, #23]
 8037768:	2b01      	cmp	r3, #1
 803776a:	d102      	bne.n	8037772 <create_chain+0x122>
 803776c:	f04f 33ff 	mov.w	r3, #4294967295
 8037770:	e000      	b.n	8037774 <create_chain+0x124>
 8037772:	2301      	movs	r3, #1
 8037774:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8037776:	69fb      	ldr	r3, [r7, #28]
}
 8037778:	4618      	mov	r0, r3
 803777a:	3720      	adds	r7, #32
 803777c:	46bd      	mov	sp, r7
 803777e:	bd80      	pop	{r7, pc}

08037780 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8037780:	b480      	push	{r7}
 8037782:	b087      	sub	sp, #28
 8037784:	af00      	add	r7, sp, #0
 8037786:	6078      	str	r0, [r7, #4]
 8037788:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 803778a:	687b      	ldr	r3, [r7, #4]
 803778c:	681b      	ldr	r3, [r3, #0]
 803778e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8037790:	687b      	ldr	r3, [r7, #4]
 8037792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037794:	3304      	adds	r3, #4
 8037796:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8037798:	683b      	ldr	r3, [r7, #0]
 803779a:	0a5b      	lsrs	r3, r3, #9
 803779c:	68fa      	ldr	r2, [r7, #12]
 803779e:	8952      	ldrh	r2, [r2, #10]
 80377a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80377a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80377a6:	693b      	ldr	r3, [r7, #16]
 80377a8:	1d1a      	adds	r2, r3, #4
 80377aa:	613a      	str	r2, [r7, #16]
 80377ac:	681b      	ldr	r3, [r3, #0]
 80377ae:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80377b0:	68bb      	ldr	r3, [r7, #8]
 80377b2:	2b00      	cmp	r3, #0
 80377b4:	d101      	bne.n	80377ba <clmt_clust+0x3a>
 80377b6:	2300      	movs	r3, #0
 80377b8:	e010      	b.n	80377dc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80377ba:	697a      	ldr	r2, [r7, #20]
 80377bc:	68bb      	ldr	r3, [r7, #8]
 80377be:	429a      	cmp	r2, r3
 80377c0:	d307      	bcc.n	80377d2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80377c2:	697a      	ldr	r2, [r7, #20]
 80377c4:	68bb      	ldr	r3, [r7, #8]
 80377c6:	1ad3      	subs	r3, r2, r3
 80377c8:	617b      	str	r3, [r7, #20]
 80377ca:	693b      	ldr	r3, [r7, #16]
 80377cc:	3304      	adds	r3, #4
 80377ce:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80377d0:	e7e9      	b.n	80377a6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80377d2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80377d4:	693b      	ldr	r3, [r7, #16]
 80377d6:	681a      	ldr	r2, [r3, #0]
 80377d8:	697b      	ldr	r3, [r7, #20]
 80377da:	4413      	add	r3, r2
}
 80377dc:	4618      	mov	r0, r3
 80377de:	371c      	adds	r7, #28
 80377e0:	46bd      	mov	sp, r7
 80377e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80377e6:	4770      	bx	lr

080377e8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80377e8:	b580      	push	{r7, lr}
 80377ea:	b086      	sub	sp, #24
 80377ec:	af00      	add	r7, sp, #0
 80377ee:	6078      	str	r0, [r7, #4]
 80377f0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80377f2:	687b      	ldr	r3, [r7, #4]
 80377f4:	681b      	ldr	r3, [r3, #0]
 80377f6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80377f8:	683b      	ldr	r3, [r7, #0]
 80377fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80377fe:	d204      	bcs.n	803780a <dir_sdi+0x22>
 8037800:	683b      	ldr	r3, [r7, #0]
 8037802:	f003 031f 	and.w	r3, r3, #31
 8037806:	2b00      	cmp	r3, #0
 8037808:	d001      	beq.n	803780e <dir_sdi+0x26>
		return FR_INT_ERR;
 803780a:	2302      	movs	r3, #2
 803780c:	e063      	b.n	80378d6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 803780e:	687b      	ldr	r3, [r7, #4]
 8037810:	683a      	ldr	r2, [r7, #0]
 8037812:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8037814:	687b      	ldr	r3, [r7, #4]
 8037816:	689b      	ldr	r3, [r3, #8]
 8037818:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 803781a:	697b      	ldr	r3, [r7, #20]
 803781c:	2b00      	cmp	r3, #0
 803781e:	d106      	bne.n	803782e <dir_sdi+0x46>
 8037820:	693b      	ldr	r3, [r7, #16]
 8037822:	781b      	ldrb	r3, [r3, #0]
 8037824:	2b02      	cmp	r3, #2
 8037826:	d902      	bls.n	803782e <dir_sdi+0x46>
		clst = fs->dirbase;
 8037828:	693b      	ldr	r3, [r7, #16]
 803782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 803782c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 803782e:	697b      	ldr	r3, [r7, #20]
 8037830:	2b00      	cmp	r3, #0
 8037832:	d10c      	bne.n	803784e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8037834:	683b      	ldr	r3, [r7, #0]
 8037836:	095b      	lsrs	r3, r3, #5
 8037838:	693a      	ldr	r2, [r7, #16]
 803783a:	8912      	ldrh	r2, [r2, #8]
 803783c:	4293      	cmp	r3, r2
 803783e:	d301      	bcc.n	8037844 <dir_sdi+0x5c>
 8037840:	2302      	movs	r3, #2
 8037842:	e048      	b.n	80378d6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8037844:	693b      	ldr	r3, [r7, #16]
 8037846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8037848:	687b      	ldr	r3, [r7, #4]
 803784a:	61da      	str	r2, [r3, #28]
 803784c:	e029      	b.n	80378a2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 803784e:	693b      	ldr	r3, [r7, #16]
 8037850:	895b      	ldrh	r3, [r3, #10]
 8037852:	025b      	lsls	r3, r3, #9
 8037854:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8037856:	e019      	b.n	803788c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8037858:	687b      	ldr	r3, [r7, #4]
 803785a:	6979      	ldr	r1, [r7, #20]
 803785c:	4618      	mov	r0, r3
 803785e:	f7ff fcfe 	bl	803725e <get_fat>
 8037862:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8037864:	697b      	ldr	r3, [r7, #20]
 8037866:	f1b3 3fff 	cmp.w	r3, #4294967295
 803786a:	d101      	bne.n	8037870 <dir_sdi+0x88>
 803786c:	2301      	movs	r3, #1
 803786e:	e032      	b.n	80378d6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8037870:	697b      	ldr	r3, [r7, #20]
 8037872:	2b01      	cmp	r3, #1
 8037874:	d904      	bls.n	8037880 <dir_sdi+0x98>
 8037876:	693b      	ldr	r3, [r7, #16]
 8037878:	695b      	ldr	r3, [r3, #20]
 803787a:	697a      	ldr	r2, [r7, #20]
 803787c:	429a      	cmp	r2, r3
 803787e:	d301      	bcc.n	8037884 <dir_sdi+0x9c>
 8037880:	2302      	movs	r3, #2
 8037882:	e028      	b.n	80378d6 <dir_sdi+0xee>
			ofs -= csz;
 8037884:	683a      	ldr	r2, [r7, #0]
 8037886:	68fb      	ldr	r3, [r7, #12]
 8037888:	1ad3      	subs	r3, r2, r3
 803788a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 803788c:	683a      	ldr	r2, [r7, #0]
 803788e:	68fb      	ldr	r3, [r7, #12]
 8037890:	429a      	cmp	r2, r3
 8037892:	d2e1      	bcs.n	8037858 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8037894:	6979      	ldr	r1, [r7, #20]
 8037896:	6938      	ldr	r0, [r7, #16]
 8037898:	f7ff fcc2 	bl	8037220 <clust2sect>
 803789c:	4602      	mov	r2, r0
 803789e:	687b      	ldr	r3, [r7, #4]
 80378a0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80378a2:	687b      	ldr	r3, [r7, #4]
 80378a4:	697a      	ldr	r2, [r7, #20]
 80378a6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80378a8:	687b      	ldr	r3, [r7, #4]
 80378aa:	69db      	ldr	r3, [r3, #28]
 80378ac:	2b00      	cmp	r3, #0
 80378ae:	d101      	bne.n	80378b4 <dir_sdi+0xcc>
 80378b0:	2302      	movs	r3, #2
 80378b2:	e010      	b.n	80378d6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80378b4:	687b      	ldr	r3, [r7, #4]
 80378b6:	69da      	ldr	r2, [r3, #28]
 80378b8:	683b      	ldr	r3, [r7, #0]
 80378ba:	0a5b      	lsrs	r3, r3, #9
 80378bc:	441a      	add	r2, r3
 80378be:	687b      	ldr	r3, [r7, #4]
 80378c0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80378c2:	693b      	ldr	r3, [r7, #16]
 80378c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80378c8:	683b      	ldr	r3, [r7, #0]
 80378ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80378ce:	441a      	add	r2, r3
 80378d0:	687b      	ldr	r3, [r7, #4]
 80378d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80378d4:	2300      	movs	r3, #0
}
 80378d6:	4618      	mov	r0, r3
 80378d8:	3718      	adds	r7, #24
 80378da:	46bd      	mov	sp, r7
 80378dc:	bd80      	pop	{r7, pc}

080378de <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80378de:	b580      	push	{r7, lr}
 80378e0:	b086      	sub	sp, #24
 80378e2:	af00      	add	r7, sp, #0
 80378e4:	6078      	str	r0, [r7, #4]
 80378e6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80378e8:	687b      	ldr	r3, [r7, #4]
 80378ea:	681b      	ldr	r3, [r3, #0]
 80378ec:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80378ee:	687b      	ldr	r3, [r7, #4]
 80378f0:	695b      	ldr	r3, [r3, #20]
 80378f2:	3320      	adds	r3, #32
 80378f4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80378f6:	687b      	ldr	r3, [r7, #4]
 80378f8:	69db      	ldr	r3, [r3, #28]
 80378fa:	2b00      	cmp	r3, #0
 80378fc:	d003      	beq.n	8037906 <dir_next+0x28>
 80378fe:	68bb      	ldr	r3, [r7, #8]
 8037900:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8037904:	d301      	bcc.n	803790a <dir_next+0x2c>
 8037906:	2304      	movs	r3, #4
 8037908:	e0aa      	b.n	8037a60 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 803790a:	68bb      	ldr	r3, [r7, #8]
 803790c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8037910:	2b00      	cmp	r3, #0
 8037912:	f040 8098 	bne.w	8037a46 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8037916:	687b      	ldr	r3, [r7, #4]
 8037918:	69db      	ldr	r3, [r3, #28]
 803791a:	1c5a      	adds	r2, r3, #1
 803791c:	687b      	ldr	r3, [r7, #4]
 803791e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8037920:	687b      	ldr	r3, [r7, #4]
 8037922:	699b      	ldr	r3, [r3, #24]
 8037924:	2b00      	cmp	r3, #0
 8037926:	d10b      	bne.n	8037940 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8037928:	68bb      	ldr	r3, [r7, #8]
 803792a:	095b      	lsrs	r3, r3, #5
 803792c:	68fa      	ldr	r2, [r7, #12]
 803792e:	8912      	ldrh	r2, [r2, #8]
 8037930:	4293      	cmp	r3, r2
 8037932:	f0c0 8088 	bcc.w	8037a46 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8037936:	687b      	ldr	r3, [r7, #4]
 8037938:	2200      	movs	r2, #0
 803793a:	61da      	str	r2, [r3, #28]
 803793c:	2304      	movs	r3, #4
 803793e:	e08f      	b.n	8037a60 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8037940:	68bb      	ldr	r3, [r7, #8]
 8037942:	0a5b      	lsrs	r3, r3, #9
 8037944:	68fa      	ldr	r2, [r7, #12]
 8037946:	8952      	ldrh	r2, [r2, #10]
 8037948:	3a01      	subs	r2, #1
 803794a:	4013      	ands	r3, r2
 803794c:	2b00      	cmp	r3, #0
 803794e:	d17a      	bne.n	8037a46 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8037950:	687a      	ldr	r2, [r7, #4]
 8037952:	687b      	ldr	r3, [r7, #4]
 8037954:	699b      	ldr	r3, [r3, #24]
 8037956:	4619      	mov	r1, r3
 8037958:	4610      	mov	r0, r2
 803795a:	f7ff fc80 	bl	803725e <get_fat>
 803795e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8037960:	697b      	ldr	r3, [r7, #20]
 8037962:	2b01      	cmp	r3, #1
 8037964:	d801      	bhi.n	803796a <dir_next+0x8c>
 8037966:	2302      	movs	r3, #2
 8037968:	e07a      	b.n	8037a60 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 803796a:	697b      	ldr	r3, [r7, #20]
 803796c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8037970:	d101      	bne.n	8037976 <dir_next+0x98>
 8037972:	2301      	movs	r3, #1
 8037974:	e074      	b.n	8037a60 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8037976:	68fb      	ldr	r3, [r7, #12]
 8037978:	695b      	ldr	r3, [r3, #20]
 803797a:	697a      	ldr	r2, [r7, #20]
 803797c:	429a      	cmp	r2, r3
 803797e:	d358      	bcc.n	8037a32 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8037980:	683b      	ldr	r3, [r7, #0]
 8037982:	2b00      	cmp	r3, #0
 8037984:	d104      	bne.n	8037990 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8037986:	687b      	ldr	r3, [r7, #4]
 8037988:	2200      	movs	r2, #0
 803798a:	61da      	str	r2, [r3, #28]
 803798c:	2304      	movs	r3, #4
 803798e:	e067      	b.n	8037a60 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8037990:	687a      	ldr	r2, [r7, #4]
 8037992:	687b      	ldr	r3, [r7, #4]
 8037994:	699b      	ldr	r3, [r3, #24]
 8037996:	4619      	mov	r1, r3
 8037998:	4610      	mov	r0, r2
 803799a:	f7ff fe59 	bl	8037650 <create_chain>
 803799e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80379a0:	697b      	ldr	r3, [r7, #20]
 80379a2:	2b00      	cmp	r3, #0
 80379a4:	d101      	bne.n	80379aa <dir_next+0xcc>
 80379a6:	2307      	movs	r3, #7
 80379a8:	e05a      	b.n	8037a60 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80379aa:	697b      	ldr	r3, [r7, #20]
 80379ac:	2b01      	cmp	r3, #1
 80379ae:	d101      	bne.n	80379b4 <dir_next+0xd6>
 80379b0:	2302      	movs	r3, #2
 80379b2:	e055      	b.n	8037a60 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80379b4:	697b      	ldr	r3, [r7, #20]
 80379b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80379ba:	d101      	bne.n	80379c0 <dir_next+0xe2>
 80379bc:	2301      	movs	r3, #1
 80379be:	e04f      	b.n	8037a60 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80379c0:	68f8      	ldr	r0, [r7, #12]
 80379c2:	f7ff fb4d 	bl	8037060 <sync_window>
 80379c6:	4603      	mov	r3, r0
 80379c8:	2b00      	cmp	r3, #0
 80379ca:	d001      	beq.n	80379d0 <dir_next+0xf2>
 80379cc:	2301      	movs	r3, #1
 80379ce:	e047      	b.n	8037a60 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80379d0:	68fb      	ldr	r3, [r7, #12]
 80379d2:	3330      	adds	r3, #48	; 0x30
 80379d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80379d8:	2100      	movs	r1, #0
 80379da:	4618      	mov	r0, r3
 80379dc:	f7ff f977 	bl	8036cce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80379e0:	2300      	movs	r3, #0
 80379e2:	613b      	str	r3, [r7, #16]
 80379e4:	6979      	ldr	r1, [r7, #20]
 80379e6:	68f8      	ldr	r0, [r7, #12]
 80379e8:	f7ff fc1a 	bl	8037220 <clust2sect>
 80379ec:	4602      	mov	r2, r0
 80379ee:	68fb      	ldr	r3, [r7, #12]
 80379f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80379f2:	e012      	b.n	8037a1a <dir_next+0x13c>
						fs->wflag = 1;
 80379f4:	68fb      	ldr	r3, [r7, #12]
 80379f6:	2201      	movs	r2, #1
 80379f8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80379fa:	68f8      	ldr	r0, [r7, #12]
 80379fc:	f7ff fb30 	bl	8037060 <sync_window>
 8037a00:	4603      	mov	r3, r0
 8037a02:	2b00      	cmp	r3, #0
 8037a04:	d001      	beq.n	8037a0a <dir_next+0x12c>
 8037a06:	2301      	movs	r3, #1
 8037a08:	e02a      	b.n	8037a60 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8037a0a:	693b      	ldr	r3, [r7, #16]
 8037a0c:	3301      	adds	r3, #1
 8037a0e:	613b      	str	r3, [r7, #16]
 8037a10:	68fb      	ldr	r3, [r7, #12]
 8037a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8037a14:	1c5a      	adds	r2, r3, #1
 8037a16:	68fb      	ldr	r3, [r7, #12]
 8037a18:	62da      	str	r2, [r3, #44]	; 0x2c
 8037a1a:	68fb      	ldr	r3, [r7, #12]
 8037a1c:	895b      	ldrh	r3, [r3, #10]
 8037a1e:	461a      	mov	r2, r3
 8037a20:	693b      	ldr	r3, [r7, #16]
 8037a22:	4293      	cmp	r3, r2
 8037a24:	d3e6      	bcc.n	80379f4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8037a26:	68fb      	ldr	r3, [r7, #12]
 8037a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8037a2a:	693b      	ldr	r3, [r7, #16]
 8037a2c:	1ad2      	subs	r2, r2, r3
 8037a2e:	68fb      	ldr	r3, [r7, #12]
 8037a30:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8037a32:	687b      	ldr	r3, [r7, #4]
 8037a34:	697a      	ldr	r2, [r7, #20]
 8037a36:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8037a38:	6979      	ldr	r1, [r7, #20]
 8037a3a:	68f8      	ldr	r0, [r7, #12]
 8037a3c:	f7ff fbf0 	bl	8037220 <clust2sect>
 8037a40:	4602      	mov	r2, r0
 8037a42:	687b      	ldr	r3, [r7, #4]
 8037a44:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8037a46:	687b      	ldr	r3, [r7, #4]
 8037a48:	68ba      	ldr	r2, [r7, #8]
 8037a4a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8037a4c:	68fb      	ldr	r3, [r7, #12]
 8037a4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8037a52:	68bb      	ldr	r3, [r7, #8]
 8037a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8037a58:	441a      	add	r2, r3
 8037a5a:	687b      	ldr	r3, [r7, #4]
 8037a5c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8037a5e:	2300      	movs	r3, #0
}
 8037a60:	4618      	mov	r0, r3
 8037a62:	3718      	adds	r7, #24
 8037a64:	46bd      	mov	sp, r7
 8037a66:	bd80      	pop	{r7, pc}

08037a68 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8037a68:	b580      	push	{r7, lr}
 8037a6a:	b086      	sub	sp, #24
 8037a6c:	af00      	add	r7, sp, #0
 8037a6e:	6078      	str	r0, [r7, #4]
 8037a70:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8037a72:	687b      	ldr	r3, [r7, #4]
 8037a74:	681b      	ldr	r3, [r3, #0]
 8037a76:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8037a78:	2100      	movs	r1, #0
 8037a7a:	6878      	ldr	r0, [r7, #4]
 8037a7c:	f7ff feb4 	bl	80377e8 <dir_sdi>
 8037a80:	4603      	mov	r3, r0
 8037a82:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8037a84:	7dfb      	ldrb	r3, [r7, #23]
 8037a86:	2b00      	cmp	r3, #0
 8037a88:	d12b      	bne.n	8037ae2 <dir_alloc+0x7a>
		n = 0;
 8037a8a:	2300      	movs	r3, #0
 8037a8c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8037a8e:	687b      	ldr	r3, [r7, #4]
 8037a90:	69db      	ldr	r3, [r3, #28]
 8037a92:	4619      	mov	r1, r3
 8037a94:	68f8      	ldr	r0, [r7, #12]
 8037a96:	f7ff fb27 	bl	80370e8 <move_window>
 8037a9a:	4603      	mov	r3, r0
 8037a9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8037a9e:	7dfb      	ldrb	r3, [r7, #23]
 8037aa0:	2b00      	cmp	r3, #0
 8037aa2:	d11d      	bne.n	8037ae0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8037aa4:	687b      	ldr	r3, [r7, #4]
 8037aa6:	6a1b      	ldr	r3, [r3, #32]
 8037aa8:	781b      	ldrb	r3, [r3, #0]
 8037aaa:	2be5      	cmp	r3, #229	; 0xe5
 8037aac:	d004      	beq.n	8037ab8 <dir_alloc+0x50>
 8037aae:	687b      	ldr	r3, [r7, #4]
 8037ab0:	6a1b      	ldr	r3, [r3, #32]
 8037ab2:	781b      	ldrb	r3, [r3, #0]
 8037ab4:	2b00      	cmp	r3, #0
 8037ab6:	d107      	bne.n	8037ac8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8037ab8:	693b      	ldr	r3, [r7, #16]
 8037aba:	3301      	adds	r3, #1
 8037abc:	613b      	str	r3, [r7, #16]
 8037abe:	693a      	ldr	r2, [r7, #16]
 8037ac0:	683b      	ldr	r3, [r7, #0]
 8037ac2:	429a      	cmp	r2, r3
 8037ac4:	d102      	bne.n	8037acc <dir_alloc+0x64>
 8037ac6:	e00c      	b.n	8037ae2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8037ac8:	2300      	movs	r3, #0
 8037aca:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8037acc:	2101      	movs	r1, #1
 8037ace:	6878      	ldr	r0, [r7, #4]
 8037ad0:	f7ff ff05 	bl	80378de <dir_next>
 8037ad4:	4603      	mov	r3, r0
 8037ad6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8037ad8:	7dfb      	ldrb	r3, [r7, #23]
 8037ada:	2b00      	cmp	r3, #0
 8037adc:	d0d7      	beq.n	8037a8e <dir_alloc+0x26>
 8037ade:	e000      	b.n	8037ae2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8037ae0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8037ae2:	7dfb      	ldrb	r3, [r7, #23]
 8037ae4:	2b04      	cmp	r3, #4
 8037ae6:	d101      	bne.n	8037aec <dir_alloc+0x84>
 8037ae8:	2307      	movs	r3, #7
 8037aea:	75fb      	strb	r3, [r7, #23]
	return res;
 8037aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8037aee:	4618      	mov	r0, r3
 8037af0:	3718      	adds	r7, #24
 8037af2:	46bd      	mov	sp, r7
 8037af4:	bd80      	pop	{r7, pc}

08037af6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8037af6:	b580      	push	{r7, lr}
 8037af8:	b084      	sub	sp, #16
 8037afa:	af00      	add	r7, sp, #0
 8037afc:	6078      	str	r0, [r7, #4]
 8037afe:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8037b00:	683b      	ldr	r3, [r7, #0]
 8037b02:	331a      	adds	r3, #26
 8037b04:	4618      	mov	r0, r3
 8037b06:	f7ff f83f 	bl	8036b88 <ld_word>
 8037b0a:	4603      	mov	r3, r0
 8037b0c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8037b0e:	687b      	ldr	r3, [r7, #4]
 8037b10:	781b      	ldrb	r3, [r3, #0]
 8037b12:	2b03      	cmp	r3, #3
 8037b14:	d109      	bne.n	8037b2a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8037b16:	683b      	ldr	r3, [r7, #0]
 8037b18:	3314      	adds	r3, #20
 8037b1a:	4618      	mov	r0, r3
 8037b1c:	f7ff f834 	bl	8036b88 <ld_word>
 8037b20:	4603      	mov	r3, r0
 8037b22:	041b      	lsls	r3, r3, #16
 8037b24:	68fa      	ldr	r2, [r7, #12]
 8037b26:	4313      	orrs	r3, r2
 8037b28:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8037b2a:	68fb      	ldr	r3, [r7, #12]
}
 8037b2c:	4618      	mov	r0, r3
 8037b2e:	3710      	adds	r7, #16
 8037b30:	46bd      	mov	sp, r7
 8037b32:	bd80      	pop	{r7, pc}

08037b34 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8037b34:	b580      	push	{r7, lr}
 8037b36:	b084      	sub	sp, #16
 8037b38:	af00      	add	r7, sp, #0
 8037b3a:	60f8      	str	r0, [r7, #12]
 8037b3c:	60b9      	str	r1, [r7, #8]
 8037b3e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8037b40:	68bb      	ldr	r3, [r7, #8]
 8037b42:	331a      	adds	r3, #26
 8037b44:	687a      	ldr	r2, [r7, #4]
 8037b46:	b292      	uxth	r2, r2
 8037b48:	4611      	mov	r1, r2
 8037b4a:	4618      	mov	r0, r3
 8037b4c:	f7ff f857 	bl	8036bfe <st_word>
	if (fs->fs_type == FS_FAT32) {
 8037b50:	68fb      	ldr	r3, [r7, #12]
 8037b52:	781b      	ldrb	r3, [r3, #0]
 8037b54:	2b03      	cmp	r3, #3
 8037b56:	d109      	bne.n	8037b6c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8037b58:	68bb      	ldr	r3, [r7, #8]
 8037b5a:	f103 0214 	add.w	r2, r3, #20
 8037b5e:	687b      	ldr	r3, [r7, #4]
 8037b60:	0c1b      	lsrs	r3, r3, #16
 8037b62:	b29b      	uxth	r3, r3
 8037b64:	4619      	mov	r1, r3
 8037b66:	4610      	mov	r0, r2
 8037b68:	f7ff f849 	bl	8036bfe <st_word>
	}
}
 8037b6c:	bf00      	nop
 8037b6e:	3710      	adds	r7, #16
 8037b70:	46bd      	mov	sp, r7
 8037b72:	bd80      	pop	{r7, pc}

08037b74 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8037b74:	b580      	push	{r7, lr}
 8037b76:	b086      	sub	sp, #24
 8037b78:	af00      	add	r7, sp, #0
 8037b7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8037b7c:	687b      	ldr	r3, [r7, #4]
 8037b7e:	681b      	ldr	r3, [r3, #0]
 8037b80:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8037b82:	2100      	movs	r1, #0
 8037b84:	6878      	ldr	r0, [r7, #4]
 8037b86:	f7ff fe2f 	bl	80377e8 <dir_sdi>
 8037b8a:	4603      	mov	r3, r0
 8037b8c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8037b8e:	7dfb      	ldrb	r3, [r7, #23]
 8037b90:	2b00      	cmp	r3, #0
 8037b92:	d001      	beq.n	8037b98 <dir_find+0x24>
 8037b94:	7dfb      	ldrb	r3, [r7, #23]
 8037b96:	e03e      	b.n	8037c16 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8037b98:	687b      	ldr	r3, [r7, #4]
 8037b9a:	69db      	ldr	r3, [r3, #28]
 8037b9c:	4619      	mov	r1, r3
 8037b9e:	6938      	ldr	r0, [r7, #16]
 8037ba0:	f7ff faa2 	bl	80370e8 <move_window>
 8037ba4:	4603      	mov	r3, r0
 8037ba6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8037ba8:	7dfb      	ldrb	r3, [r7, #23]
 8037baa:	2b00      	cmp	r3, #0
 8037bac:	d12f      	bne.n	8037c0e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8037bae:	687b      	ldr	r3, [r7, #4]
 8037bb0:	6a1b      	ldr	r3, [r3, #32]
 8037bb2:	781b      	ldrb	r3, [r3, #0]
 8037bb4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8037bb6:	7bfb      	ldrb	r3, [r7, #15]
 8037bb8:	2b00      	cmp	r3, #0
 8037bba:	d102      	bne.n	8037bc2 <dir_find+0x4e>
 8037bbc:	2304      	movs	r3, #4
 8037bbe:	75fb      	strb	r3, [r7, #23]
 8037bc0:	e028      	b.n	8037c14 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8037bc2:	687b      	ldr	r3, [r7, #4]
 8037bc4:	6a1b      	ldr	r3, [r3, #32]
 8037bc6:	330b      	adds	r3, #11
 8037bc8:	781b      	ldrb	r3, [r3, #0]
 8037bca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8037bce:	b2da      	uxtb	r2, r3
 8037bd0:	687b      	ldr	r3, [r7, #4]
 8037bd2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8037bd4:	687b      	ldr	r3, [r7, #4]
 8037bd6:	6a1b      	ldr	r3, [r3, #32]
 8037bd8:	330b      	adds	r3, #11
 8037bda:	781b      	ldrb	r3, [r3, #0]
 8037bdc:	f003 0308 	and.w	r3, r3, #8
 8037be0:	2b00      	cmp	r3, #0
 8037be2:	d10a      	bne.n	8037bfa <dir_find+0x86>
 8037be4:	687b      	ldr	r3, [r7, #4]
 8037be6:	6a18      	ldr	r0, [r3, #32]
 8037be8:	687b      	ldr	r3, [r7, #4]
 8037bea:	3324      	adds	r3, #36	; 0x24
 8037bec:	220b      	movs	r2, #11
 8037bee:	4619      	mov	r1, r3
 8037bf0:	f7ff f888 	bl	8036d04 <mem_cmp>
 8037bf4:	4603      	mov	r3, r0
 8037bf6:	2b00      	cmp	r3, #0
 8037bf8:	d00b      	beq.n	8037c12 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8037bfa:	2100      	movs	r1, #0
 8037bfc:	6878      	ldr	r0, [r7, #4]
 8037bfe:	f7ff fe6e 	bl	80378de <dir_next>
 8037c02:	4603      	mov	r3, r0
 8037c04:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8037c06:	7dfb      	ldrb	r3, [r7, #23]
 8037c08:	2b00      	cmp	r3, #0
 8037c0a:	d0c5      	beq.n	8037b98 <dir_find+0x24>
 8037c0c:	e002      	b.n	8037c14 <dir_find+0xa0>
		if (res != FR_OK) break;
 8037c0e:	bf00      	nop
 8037c10:	e000      	b.n	8037c14 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8037c12:	bf00      	nop

	return res;
 8037c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8037c16:	4618      	mov	r0, r3
 8037c18:	3718      	adds	r7, #24
 8037c1a:	46bd      	mov	sp, r7
 8037c1c:	bd80      	pop	{r7, pc}

08037c1e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8037c1e:	b580      	push	{r7, lr}
 8037c20:	b084      	sub	sp, #16
 8037c22:	af00      	add	r7, sp, #0
 8037c24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8037c26:	687b      	ldr	r3, [r7, #4]
 8037c28:	681b      	ldr	r3, [r3, #0]
 8037c2a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8037c2c:	2101      	movs	r1, #1
 8037c2e:	6878      	ldr	r0, [r7, #4]
 8037c30:	f7ff ff1a 	bl	8037a68 <dir_alloc>
 8037c34:	4603      	mov	r3, r0
 8037c36:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8037c38:	7bfb      	ldrb	r3, [r7, #15]
 8037c3a:	2b00      	cmp	r3, #0
 8037c3c:	d11c      	bne.n	8037c78 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8037c3e:	687b      	ldr	r3, [r7, #4]
 8037c40:	69db      	ldr	r3, [r3, #28]
 8037c42:	4619      	mov	r1, r3
 8037c44:	68b8      	ldr	r0, [r7, #8]
 8037c46:	f7ff fa4f 	bl	80370e8 <move_window>
 8037c4a:	4603      	mov	r3, r0
 8037c4c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8037c4e:	7bfb      	ldrb	r3, [r7, #15]
 8037c50:	2b00      	cmp	r3, #0
 8037c52:	d111      	bne.n	8037c78 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8037c54:	687b      	ldr	r3, [r7, #4]
 8037c56:	6a1b      	ldr	r3, [r3, #32]
 8037c58:	2220      	movs	r2, #32
 8037c5a:	2100      	movs	r1, #0
 8037c5c:	4618      	mov	r0, r3
 8037c5e:	f7ff f836 	bl	8036cce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8037c62:	687b      	ldr	r3, [r7, #4]
 8037c64:	6a18      	ldr	r0, [r3, #32]
 8037c66:	687b      	ldr	r3, [r7, #4]
 8037c68:	3324      	adds	r3, #36	; 0x24
 8037c6a:	220b      	movs	r2, #11
 8037c6c:	4619      	mov	r1, r3
 8037c6e:	f7ff f80d 	bl	8036c8c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8037c72:	68bb      	ldr	r3, [r7, #8]
 8037c74:	2201      	movs	r2, #1
 8037c76:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8037c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8037c7a:	4618      	mov	r0, r3
 8037c7c:	3710      	adds	r7, #16
 8037c7e:	46bd      	mov	sp, r7
 8037c80:	bd80      	pop	{r7, pc}
	...

08037c84 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8037c84:	b580      	push	{r7, lr}
 8037c86:	b088      	sub	sp, #32
 8037c88:	af00      	add	r7, sp, #0
 8037c8a:	6078      	str	r0, [r7, #4]
 8037c8c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8037c8e:	683b      	ldr	r3, [r7, #0]
 8037c90:	681b      	ldr	r3, [r3, #0]
 8037c92:	60fb      	str	r3, [r7, #12]
 8037c94:	687b      	ldr	r3, [r7, #4]
 8037c96:	3324      	adds	r3, #36	; 0x24
 8037c98:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8037c9a:	220b      	movs	r2, #11
 8037c9c:	2120      	movs	r1, #32
 8037c9e:	68b8      	ldr	r0, [r7, #8]
 8037ca0:	f7ff f815 	bl	8036cce <mem_set>
	si = i = 0; ni = 8;
 8037ca4:	2300      	movs	r3, #0
 8037ca6:	613b      	str	r3, [r7, #16]
 8037ca8:	693b      	ldr	r3, [r7, #16]
 8037caa:	61fb      	str	r3, [r7, #28]
 8037cac:	2308      	movs	r3, #8
 8037cae:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8037cb0:	69fb      	ldr	r3, [r7, #28]
 8037cb2:	1c5a      	adds	r2, r3, #1
 8037cb4:	61fa      	str	r2, [r7, #28]
 8037cb6:	68fa      	ldr	r2, [r7, #12]
 8037cb8:	4413      	add	r3, r2
 8037cba:	781b      	ldrb	r3, [r3, #0]
 8037cbc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8037cbe:	7efb      	ldrb	r3, [r7, #27]
 8037cc0:	2b20      	cmp	r3, #32
 8037cc2:	d94e      	bls.n	8037d62 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8037cc4:	7efb      	ldrb	r3, [r7, #27]
 8037cc6:	2b2f      	cmp	r3, #47	; 0x2f
 8037cc8:	d006      	beq.n	8037cd8 <create_name+0x54>
 8037cca:	7efb      	ldrb	r3, [r7, #27]
 8037ccc:	2b5c      	cmp	r3, #92	; 0x5c
 8037cce:	d110      	bne.n	8037cf2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8037cd0:	e002      	b.n	8037cd8 <create_name+0x54>
 8037cd2:	69fb      	ldr	r3, [r7, #28]
 8037cd4:	3301      	adds	r3, #1
 8037cd6:	61fb      	str	r3, [r7, #28]
 8037cd8:	68fa      	ldr	r2, [r7, #12]
 8037cda:	69fb      	ldr	r3, [r7, #28]
 8037cdc:	4413      	add	r3, r2
 8037cde:	781b      	ldrb	r3, [r3, #0]
 8037ce0:	2b2f      	cmp	r3, #47	; 0x2f
 8037ce2:	d0f6      	beq.n	8037cd2 <create_name+0x4e>
 8037ce4:	68fa      	ldr	r2, [r7, #12]
 8037ce6:	69fb      	ldr	r3, [r7, #28]
 8037ce8:	4413      	add	r3, r2
 8037cea:	781b      	ldrb	r3, [r3, #0]
 8037cec:	2b5c      	cmp	r3, #92	; 0x5c
 8037cee:	d0f0      	beq.n	8037cd2 <create_name+0x4e>
			break;
 8037cf0:	e038      	b.n	8037d64 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8037cf2:	7efb      	ldrb	r3, [r7, #27]
 8037cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8037cf6:	d003      	beq.n	8037d00 <create_name+0x7c>
 8037cf8:	693a      	ldr	r2, [r7, #16]
 8037cfa:	697b      	ldr	r3, [r7, #20]
 8037cfc:	429a      	cmp	r2, r3
 8037cfe:	d30c      	bcc.n	8037d1a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8037d00:	697b      	ldr	r3, [r7, #20]
 8037d02:	2b0b      	cmp	r3, #11
 8037d04:	d002      	beq.n	8037d0c <create_name+0x88>
 8037d06:	7efb      	ldrb	r3, [r7, #27]
 8037d08:	2b2e      	cmp	r3, #46	; 0x2e
 8037d0a:	d001      	beq.n	8037d10 <create_name+0x8c>
 8037d0c:	2306      	movs	r3, #6
 8037d0e:	e044      	b.n	8037d9a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8037d10:	2308      	movs	r3, #8
 8037d12:	613b      	str	r3, [r7, #16]
 8037d14:	230b      	movs	r3, #11
 8037d16:	617b      	str	r3, [r7, #20]
			continue;
 8037d18:	e022      	b.n	8037d60 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8037d1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8037d1e:	2b00      	cmp	r3, #0
 8037d20:	da04      	bge.n	8037d2c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8037d22:	7efb      	ldrb	r3, [r7, #27]
 8037d24:	3b80      	subs	r3, #128	; 0x80
 8037d26:	4a1f      	ldr	r2, [pc, #124]	; (8037da4 <create_name+0x120>)
 8037d28:	5cd3      	ldrb	r3, [r2, r3]
 8037d2a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8037d2c:	7efb      	ldrb	r3, [r7, #27]
 8037d2e:	4619      	mov	r1, r3
 8037d30:	481d      	ldr	r0, [pc, #116]	; (8037da8 <create_name+0x124>)
 8037d32:	f7ff f80e 	bl	8036d52 <chk_chr>
 8037d36:	4603      	mov	r3, r0
 8037d38:	2b00      	cmp	r3, #0
 8037d3a:	d001      	beq.n	8037d40 <create_name+0xbc>
 8037d3c:	2306      	movs	r3, #6
 8037d3e:	e02c      	b.n	8037d9a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8037d40:	7efb      	ldrb	r3, [r7, #27]
 8037d42:	2b60      	cmp	r3, #96	; 0x60
 8037d44:	d905      	bls.n	8037d52 <create_name+0xce>
 8037d46:	7efb      	ldrb	r3, [r7, #27]
 8037d48:	2b7a      	cmp	r3, #122	; 0x7a
 8037d4a:	d802      	bhi.n	8037d52 <create_name+0xce>
 8037d4c:	7efb      	ldrb	r3, [r7, #27]
 8037d4e:	3b20      	subs	r3, #32
 8037d50:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8037d52:	693b      	ldr	r3, [r7, #16]
 8037d54:	1c5a      	adds	r2, r3, #1
 8037d56:	613a      	str	r2, [r7, #16]
 8037d58:	68ba      	ldr	r2, [r7, #8]
 8037d5a:	4413      	add	r3, r2
 8037d5c:	7efa      	ldrb	r2, [r7, #27]
 8037d5e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8037d60:	e7a6      	b.n	8037cb0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8037d62:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8037d64:	68fa      	ldr	r2, [r7, #12]
 8037d66:	69fb      	ldr	r3, [r7, #28]
 8037d68:	441a      	add	r2, r3
 8037d6a:	683b      	ldr	r3, [r7, #0]
 8037d6c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8037d6e:	693b      	ldr	r3, [r7, #16]
 8037d70:	2b00      	cmp	r3, #0
 8037d72:	d101      	bne.n	8037d78 <create_name+0xf4>
 8037d74:	2306      	movs	r3, #6
 8037d76:	e010      	b.n	8037d9a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8037d78:	68bb      	ldr	r3, [r7, #8]
 8037d7a:	781b      	ldrb	r3, [r3, #0]
 8037d7c:	2be5      	cmp	r3, #229	; 0xe5
 8037d7e:	d102      	bne.n	8037d86 <create_name+0x102>
 8037d80:	68bb      	ldr	r3, [r7, #8]
 8037d82:	2205      	movs	r2, #5
 8037d84:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8037d86:	7efb      	ldrb	r3, [r7, #27]
 8037d88:	2b20      	cmp	r3, #32
 8037d8a:	d801      	bhi.n	8037d90 <create_name+0x10c>
 8037d8c:	2204      	movs	r2, #4
 8037d8e:	e000      	b.n	8037d92 <create_name+0x10e>
 8037d90:	2200      	movs	r2, #0
 8037d92:	68bb      	ldr	r3, [r7, #8]
 8037d94:	330b      	adds	r3, #11
 8037d96:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8037d98:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8037d9a:	4618      	mov	r0, r3
 8037d9c:	3720      	adds	r7, #32
 8037d9e:	46bd      	mov	sp, r7
 8037da0:	bd80      	pop	{r7, pc}
 8037da2:	bf00      	nop
 8037da4:	0803e81c 	.word	0x0803e81c
 8037da8:	0803dcd0 	.word	0x0803dcd0

08037dac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8037dac:	b580      	push	{r7, lr}
 8037dae:	b086      	sub	sp, #24
 8037db0:	af00      	add	r7, sp, #0
 8037db2:	6078      	str	r0, [r7, #4]
 8037db4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8037db6:	687b      	ldr	r3, [r7, #4]
 8037db8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8037dba:	693b      	ldr	r3, [r7, #16]
 8037dbc:	681b      	ldr	r3, [r3, #0]
 8037dbe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8037dc0:	e002      	b.n	8037dc8 <follow_path+0x1c>
 8037dc2:	683b      	ldr	r3, [r7, #0]
 8037dc4:	3301      	adds	r3, #1
 8037dc6:	603b      	str	r3, [r7, #0]
 8037dc8:	683b      	ldr	r3, [r7, #0]
 8037dca:	781b      	ldrb	r3, [r3, #0]
 8037dcc:	2b2f      	cmp	r3, #47	; 0x2f
 8037dce:	d0f8      	beq.n	8037dc2 <follow_path+0x16>
 8037dd0:	683b      	ldr	r3, [r7, #0]
 8037dd2:	781b      	ldrb	r3, [r3, #0]
 8037dd4:	2b5c      	cmp	r3, #92	; 0x5c
 8037dd6:	d0f4      	beq.n	8037dc2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8037dd8:	693b      	ldr	r3, [r7, #16]
 8037dda:	2200      	movs	r2, #0
 8037ddc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8037dde:	683b      	ldr	r3, [r7, #0]
 8037de0:	781b      	ldrb	r3, [r3, #0]
 8037de2:	2b1f      	cmp	r3, #31
 8037de4:	d80a      	bhi.n	8037dfc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8037de6:	687b      	ldr	r3, [r7, #4]
 8037de8:	2280      	movs	r2, #128	; 0x80
 8037dea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8037dee:	2100      	movs	r1, #0
 8037df0:	6878      	ldr	r0, [r7, #4]
 8037df2:	f7ff fcf9 	bl	80377e8 <dir_sdi>
 8037df6:	4603      	mov	r3, r0
 8037df8:	75fb      	strb	r3, [r7, #23]
 8037dfa:	e043      	b.n	8037e84 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8037dfc:	463b      	mov	r3, r7
 8037dfe:	4619      	mov	r1, r3
 8037e00:	6878      	ldr	r0, [r7, #4]
 8037e02:	f7ff ff3f 	bl	8037c84 <create_name>
 8037e06:	4603      	mov	r3, r0
 8037e08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8037e0a:	7dfb      	ldrb	r3, [r7, #23]
 8037e0c:	2b00      	cmp	r3, #0
 8037e0e:	d134      	bne.n	8037e7a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8037e10:	6878      	ldr	r0, [r7, #4]
 8037e12:	f7ff feaf 	bl	8037b74 <dir_find>
 8037e16:	4603      	mov	r3, r0
 8037e18:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8037e1a:	687b      	ldr	r3, [r7, #4]
 8037e1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8037e20:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8037e22:	7dfb      	ldrb	r3, [r7, #23]
 8037e24:	2b00      	cmp	r3, #0
 8037e26:	d00a      	beq.n	8037e3e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8037e28:	7dfb      	ldrb	r3, [r7, #23]
 8037e2a:	2b04      	cmp	r3, #4
 8037e2c:	d127      	bne.n	8037e7e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8037e2e:	7afb      	ldrb	r3, [r7, #11]
 8037e30:	f003 0304 	and.w	r3, r3, #4
 8037e34:	2b00      	cmp	r3, #0
 8037e36:	d122      	bne.n	8037e7e <follow_path+0xd2>
 8037e38:	2305      	movs	r3, #5
 8037e3a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8037e3c:	e01f      	b.n	8037e7e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8037e3e:	7afb      	ldrb	r3, [r7, #11]
 8037e40:	f003 0304 	and.w	r3, r3, #4
 8037e44:	2b00      	cmp	r3, #0
 8037e46:	d11c      	bne.n	8037e82 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8037e48:	693b      	ldr	r3, [r7, #16]
 8037e4a:	799b      	ldrb	r3, [r3, #6]
 8037e4c:	f003 0310 	and.w	r3, r3, #16
 8037e50:	2b00      	cmp	r3, #0
 8037e52:	d102      	bne.n	8037e5a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8037e54:	2305      	movs	r3, #5
 8037e56:	75fb      	strb	r3, [r7, #23]
 8037e58:	e014      	b.n	8037e84 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8037e5a:	68fb      	ldr	r3, [r7, #12]
 8037e5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8037e60:	687b      	ldr	r3, [r7, #4]
 8037e62:	695b      	ldr	r3, [r3, #20]
 8037e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8037e68:	4413      	add	r3, r2
 8037e6a:	4619      	mov	r1, r3
 8037e6c:	68f8      	ldr	r0, [r7, #12]
 8037e6e:	f7ff fe42 	bl	8037af6 <ld_clust>
 8037e72:	4602      	mov	r2, r0
 8037e74:	693b      	ldr	r3, [r7, #16]
 8037e76:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8037e78:	e7c0      	b.n	8037dfc <follow_path+0x50>
			if (res != FR_OK) break;
 8037e7a:	bf00      	nop
 8037e7c:	e002      	b.n	8037e84 <follow_path+0xd8>
				break;
 8037e7e:	bf00      	nop
 8037e80:	e000      	b.n	8037e84 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8037e82:	bf00      	nop
			}
		}
	}

	return res;
 8037e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8037e86:	4618      	mov	r0, r3
 8037e88:	3718      	adds	r7, #24
 8037e8a:	46bd      	mov	sp, r7
 8037e8c:	bd80      	pop	{r7, pc}

08037e8e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8037e8e:	b480      	push	{r7}
 8037e90:	b087      	sub	sp, #28
 8037e92:	af00      	add	r7, sp, #0
 8037e94:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8037e96:	f04f 33ff 	mov.w	r3, #4294967295
 8037e9a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8037e9c:	687b      	ldr	r3, [r7, #4]
 8037e9e:	681b      	ldr	r3, [r3, #0]
 8037ea0:	2b00      	cmp	r3, #0
 8037ea2:	d031      	beq.n	8037f08 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8037ea4:	687b      	ldr	r3, [r7, #4]
 8037ea6:	681b      	ldr	r3, [r3, #0]
 8037ea8:	617b      	str	r3, [r7, #20]
 8037eaa:	e002      	b.n	8037eb2 <get_ldnumber+0x24>
 8037eac:	697b      	ldr	r3, [r7, #20]
 8037eae:	3301      	adds	r3, #1
 8037eb0:	617b      	str	r3, [r7, #20]
 8037eb2:	697b      	ldr	r3, [r7, #20]
 8037eb4:	781b      	ldrb	r3, [r3, #0]
 8037eb6:	2b20      	cmp	r3, #32
 8037eb8:	d903      	bls.n	8037ec2 <get_ldnumber+0x34>
 8037eba:	697b      	ldr	r3, [r7, #20]
 8037ebc:	781b      	ldrb	r3, [r3, #0]
 8037ebe:	2b3a      	cmp	r3, #58	; 0x3a
 8037ec0:	d1f4      	bne.n	8037eac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8037ec2:	697b      	ldr	r3, [r7, #20]
 8037ec4:	781b      	ldrb	r3, [r3, #0]
 8037ec6:	2b3a      	cmp	r3, #58	; 0x3a
 8037ec8:	d11c      	bne.n	8037f04 <get_ldnumber+0x76>
			tp = *path;
 8037eca:	687b      	ldr	r3, [r7, #4]
 8037ecc:	681b      	ldr	r3, [r3, #0]
 8037ece:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8037ed0:	68fb      	ldr	r3, [r7, #12]
 8037ed2:	1c5a      	adds	r2, r3, #1
 8037ed4:	60fa      	str	r2, [r7, #12]
 8037ed6:	781b      	ldrb	r3, [r3, #0]
 8037ed8:	3b30      	subs	r3, #48	; 0x30
 8037eda:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8037edc:	68bb      	ldr	r3, [r7, #8]
 8037ede:	2b09      	cmp	r3, #9
 8037ee0:	d80e      	bhi.n	8037f00 <get_ldnumber+0x72>
 8037ee2:	68fa      	ldr	r2, [r7, #12]
 8037ee4:	697b      	ldr	r3, [r7, #20]
 8037ee6:	429a      	cmp	r2, r3
 8037ee8:	d10a      	bne.n	8037f00 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8037eea:	68bb      	ldr	r3, [r7, #8]
 8037eec:	2b00      	cmp	r3, #0
 8037eee:	d107      	bne.n	8037f00 <get_ldnumber+0x72>
					vol = (int)i;
 8037ef0:	68bb      	ldr	r3, [r7, #8]
 8037ef2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8037ef4:	697b      	ldr	r3, [r7, #20]
 8037ef6:	3301      	adds	r3, #1
 8037ef8:	617b      	str	r3, [r7, #20]
 8037efa:	687b      	ldr	r3, [r7, #4]
 8037efc:	697a      	ldr	r2, [r7, #20]
 8037efe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8037f00:	693b      	ldr	r3, [r7, #16]
 8037f02:	e002      	b.n	8037f0a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8037f04:	2300      	movs	r3, #0
 8037f06:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8037f08:	693b      	ldr	r3, [r7, #16]
}
 8037f0a:	4618      	mov	r0, r3
 8037f0c:	371c      	adds	r7, #28
 8037f0e:	46bd      	mov	sp, r7
 8037f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8037f14:	4770      	bx	lr
	...

08037f18 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8037f18:	b580      	push	{r7, lr}
 8037f1a:	b082      	sub	sp, #8
 8037f1c:	af00      	add	r7, sp, #0
 8037f1e:	6078      	str	r0, [r7, #4]
 8037f20:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8037f22:	687b      	ldr	r3, [r7, #4]
 8037f24:	2200      	movs	r2, #0
 8037f26:	70da      	strb	r2, [r3, #3]
 8037f28:	687b      	ldr	r3, [r7, #4]
 8037f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8037f2e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8037f30:	6839      	ldr	r1, [r7, #0]
 8037f32:	6878      	ldr	r0, [r7, #4]
 8037f34:	f7ff f8d8 	bl	80370e8 <move_window>
 8037f38:	4603      	mov	r3, r0
 8037f3a:	2b00      	cmp	r3, #0
 8037f3c:	d001      	beq.n	8037f42 <check_fs+0x2a>
 8037f3e:	2304      	movs	r3, #4
 8037f40:	e038      	b.n	8037fb4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8037f42:	687b      	ldr	r3, [r7, #4]
 8037f44:	3330      	adds	r3, #48	; 0x30
 8037f46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8037f4a:	4618      	mov	r0, r3
 8037f4c:	f7fe fe1c 	bl	8036b88 <ld_word>
 8037f50:	4603      	mov	r3, r0
 8037f52:	461a      	mov	r2, r3
 8037f54:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8037f58:	429a      	cmp	r2, r3
 8037f5a:	d001      	beq.n	8037f60 <check_fs+0x48>
 8037f5c:	2303      	movs	r3, #3
 8037f5e:	e029      	b.n	8037fb4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8037f60:	687b      	ldr	r3, [r7, #4]
 8037f62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8037f66:	2be9      	cmp	r3, #233	; 0xe9
 8037f68:	d009      	beq.n	8037f7e <check_fs+0x66>
 8037f6a:	687b      	ldr	r3, [r7, #4]
 8037f6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8037f70:	2beb      	cmp	r3, #235	; 0xeb
 8037f72:	d11e      	bne.n	8037fb2 <check_fs+0x9a>
 8037f74:	687b      	ldr	r3, [r7, #4]
 8037f76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8037f7a:	2b90      	cmp	r3, #144	; 0x90
 8037f7c:	d119      	bne.n	8037fb2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8037f7e:	687b      	ldr	r3, [r7, #4]
 8037f80:	3330      	adds	r3, #48	; 0x30
 8037f82:	3336      	adds	r3, #54	; 0x36
 8037f84:	4618      	mov	r0, r3
 8037f86:	f7fe fe17 	bl	8036bb8 <ld_dword>
 8037f8a:	4603      	mov	r3, r0
 8037f8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8037f90:	4a0a      	ldr	r2, [pc, #40]	; (8037fbc <check_fs+0xa4>)
 8037f92:	4293      	cmp	r3, r2
 8037f94:	d101      	bne.n	8037f9a <check_fs+0x82>
 8037f96:	2300      	movs	r3, #0
 8037f98:	e00c      	b.n	8037fb4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8037f9a:	687b      	ldr	r3, [r7, #4]
 8037f9c:	3330      	adds	r3, #48	; 0x30
 8037f9e:	3352      	adds	r3, #82	; 0x52
 8037fa0:	4618      	mov	r0, r3
 8037fa2:	f7fe fe09 	bl	8036bb8 <ld_dword>
 8037fa6:	4603      	mov	r3, r0
 8037fa8:	4a05      	ldr	r2, [pc, #20]	; (8037fc0 <check_fs+0xa8>)
 8037faa:	4293      	cmp	r3, r2
 8037fac:	d101      	bne.n	8037fb2 <check_fs+0x9a>
 8037fae:	2300      	movs	r3, #0
 8037fb0:	e000      	b.n	8037fb4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8037fb2:	2302      	movs	r3, #2
}
 8037fb4:	4618      	mov	r0, r3
 8037fb6:	3708      	adds	r7, #8
 8037fb8:	46bd      	mov	sp, r7
 8037fba:	bd80      	pop	{r7, pc}
 8037fbc:	00544146 	.word	0x00544146
 8037fc0:	33544146 	.word	0x33544146

08037fc4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8037fc4:	b580      	push	{r7, lr}
 8037fc6:	b096      	sub	sp, #88	; 0x58
 8037fc8:	af00      	add	r7, sp, #0
 8037fca:	60f8      	str	r0, [r7, #12]
 8037fcc:	60b9      	str	r1, [r7, #8]
 8037fce:	4613      	mov	r3, r2
 8037fd0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8037fd2:	68bb      	ldr	r3, [r7, #8]
 8037fd4:	2200      	movs	r2, #0
 8037fd6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8037fd8:	68f8      	ldr	r0, [r7, #12]
 8037fda:	f7ff ff58 	bl	8037e8e <get_ldnumber>
 8037fde:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8037fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8037fe2:	2b00      	cmp	r3, #0
 8037fe4:	da01      	bge.n	8037fea <find_volume+0x26>
 8037fe6:	230b      	movs	r3, #11
 8037fe8:	e22e      	b.n	8038448 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8037fea:	4aa8      	ldr	r2, [pc, #672]	; (803828c <find_volume+0x2c8>)
 8037fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8037fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8037ff2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8037ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8037ff6:	2b00      	cmp	r3, #0
 8037ff8:	d101      	bne.n	8037ffe <find_volume+0x3a>
 8037ffa:	230c      	movs	r3, #12
 8037ffc:	e224      	b.n	8038448 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8037ffe:	68bb      	ldr	r3, [r7, #8]
 8038000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8038002:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8038004:	79fb      	ldrb	r3, [r7, #7]
 8038006:	f023 0301 	bic.w	r3, r3, #1
 803800a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 803800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803800e:	781b      	ldrb	r3, [r3, #0]
 8038010:	2b00      	cmp	r3, #0
 8038012:	d01a      	beq.n	803804a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8038014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038016:	785b      	ldrb	r3, [r3, #1]
 8038018:	4618      	mov	r0, r3
 803801a:	f7fe fd17 	bl	8036a4c <disk_status>
 803801e:	4603      	mov	r3, r0
 8038020:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8038024:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8038028:	f003 0301 	and.w	r3, r3, #1
 803802c:	2b00      	cmp	r3, #0
 803802e:	d10c      	bne.n	803804a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8038030:	79fb      	ldrb	r3, [r7, #7]
 8038032:	2b00      	cmp	r3, #0
 8038034:	d007      	beq.n	8038046 <find_volume+0x82>
 8038036:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 803803a:	f003 0304 	and.w	r3, r3, #4
 803803e:	2b00      	cmp	r3, #0
 8038040:	d001      	beq.n	8038046 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8038042:	230a      	movs	r3, #10
 8038044:	e200      	b.n	8038448 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8038046:	2300      	movs	r3, #0
 8038048:	e1fe      	b.n	8038448 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 803804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803804c:	2200      	movs	r2, #0
 803804e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8038050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8038052:	b2da      	uxtb	r2, r3
 8038054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038056:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8038058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803805a:	785b      	ldrb	r3, [r3, #1]
 803805c:	4618      	mov	r0, r3
 803805e:	f7fe fd0f 	bl	8036a80 <disk_initialize>
 8038062:	4603      	mov	r3, r0
 8038064:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8038068:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 803806c:	f003 0301 	and.w	r3, r3, #1
 8038070:	2b00      	cmp	r3, #0
 8038072:	d001      	beq.n	8038078 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8038074:	2303      	movs	r3, #3
 8038076:	e1e7      	b.n	8038448 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8038078:	79fb      	ldrb	r3, [r7, #7]
 803807a:	2b00      	cmp	r3, #0
 803807c:	d007      	beq.n	803808e <find_volume+0xca>
 803807e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8038082:	f003 0304 	and.w	r3, r3, #4
 8038086:	2b00      	cmp	r3, #0
 8038088:	d001      	beq.n	803808e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 803808a:	230a      	movs	r3, #10
 803808c:	e1dc      	b.n	8038448 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 803808e:	2300      	movs	r3, #0
 8038090:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8038092:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8038094:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8038096:	f7ff ff3f 	bl	8037f18 <check_fs>
 803809a:	4603      	mov	r3, r0
 803809c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80380a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80380a4:	2b02      	cmp	r3, #2
 80380a6:	d14b      	bne.n	8038140 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80380a8:	2300      	movs	r3, #0
 80380aa:	643b      	str	r3, [r7, #64]	; 0x40
 80380ac:	e01f      	b.n	80380ee <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80380ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80380b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80380b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80380b6:	011b      	lsls	r3, r3, #4
 80380b8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80380bc:	4413      	add	r3, r2
 80380be:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80380c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80380c2:	3304      	adds	r3, #4
 80380c4:	781b      	ldrb	r3, [r3, #0]
 80380c6:	2b00      	cmp	r3, #0
 80380c8:	d006      	beq.n	80380d8 <find_volume+0x114>
 80380ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80380cc:	3308      	adds	r3, #8
 80380ce:	4618      	mov	r0, r3
 80380d0:	f7fe fd72 	bl	8036bb8 <ld_dword>
 80380d4:	4602      	mov	r2, r0
 80380d6:	e000      	b.n	80380da <find_volume+0x116>
 80380d8:	2200      	movs	r2, #0
 80380da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80380dc:	009b      	lsls	r3, r3, #2
 80380de:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80380e2:	440b      	add	r3, r1
 80380e4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80380e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80380ea:	3301      	adds	r3, #1
 80380ec:	643b      	str	r3, [r7, #64]	; 0x40
 80380ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80380f0:	2b03      	cmp	r3, #3
 80380f2:	d9dc      	bls.n	80380ae <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80380f4:	2300      	movs	r3, #0
 80380f6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80380f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80380fa:	2b00      	cmp	r3, #0
 80380fc:	d002      	beq.n	8038104 <find_volume+0x140>
 80380fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8038100:	3b01      	subs	r3, #1
 8038102:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8038104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8038106:	009b      	lsls	r3, r3, #2
 8038108:	f107 0258 	add.w	r2, r7, #88	; 0x58
 803810c:	4413      	add	r3, r2
 803810e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8038112:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8038114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8038116:	2b00      	cmp	r3, #0
 8038118:	d005      	beq.n	8038126 <find_volume+0x162>
 803811a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 803811c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 803811e:	f7ff fefb 	bl	8037f18 <check_fs>
 8038122:	4603      	mov	r3, r0
 8038124:	e000      	b.n	8038128 <find_volume+0x164>
 8038126:	2303      	movs	r3, #3
 8038128:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 803812c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8038130:	2b01      	cmp	r3, #1
 8038132:	d905      	bls.n	8038140 <find_volume+0x17c>
 8038134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8038136:	3301      	adds	r3, #1
 8038138:	643b      	str	r3, [r7, #64]	; 0x40
 803813a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 803813c:	2b03      	cmp	r3, #3
 803813e:	d9e1      	bls.n	8038104 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8038140:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8038144:	2b04      	cmp	r3, #4
 8038146:	d101      	bne.n	803814c <find_volume+0x188>
 8038148:	2301      	movs	r3, #1
 803814a:	e17d      	b.n	8038448 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 803814c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8038150:	2b01      	cmp	r3, #1
 8038152:	d901      	bls.n	8038158 <find_volume+0x194>
 8038154:	230d      	movs	r3, #13
 8038156:	e177      	b.n	8038448 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8038158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803815a:	3330      	adds	r3, #48	; 0x30
 803815c:	330b      	adds	r3, #11
 803815e:	4618      	mov	r0, r3
 8038160:	f7fe fd12 	bl	8036b88 <ld_word>
 8038164:	4603      	mov	r3, r0
 8038166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803816a:	d001      	beq.n	8038170 <find_volume+0x1ac>
 803816c:	230d      	movs	r3, #13
 803816e:	e16b      	b.n	8038448 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8038170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038172:	3330      	adds	r3, #48	; 0x30
 8038174:	3316      	adds	r3, #22
 8038176:	4618      	mov	r0, r3
 8038178:	f7fe fd06 	bl	8036b88 <ld_word>
 803817c:	4603      	mov	r3, r0
 803817e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8038180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8038182:	2b00      	cmp	r3, #0
 8038184:	d106      	bne.n	8038194 <find_volume+0x1d0>
 8038186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038188:	3330      	adds	r3, #48	; 0x30
 803818a:	3324      	adds	r3, #36	; 0x24
 803818c:	4618      	mov	r0, r3
 803818e:	f7fe fd13 	bl	8036bb8 <ld_dword>
 8038192:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8038194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038196:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8038198:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 803819a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803819c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80381a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80381a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80381a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80381a6:	789b      	ldrb	r3, [r3, #2]
 80381a8:	2b01      	cmp	r3, #1
 80381aa:	d005      	beq.n	80381b8 <find_volume+0x1f4>
 80381ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80381ae:	789b      	ldrb	r3, [r3, #2]
 80381b0:	2b02      	cmp	r3, #2
 80381b2:	d001      	beq.n	80381b8 <find_volume+0x1f4>
 80381b4:	230d      	movs	r3, #13
 80381b6:	e147      	b.n	8038448 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80381b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80381ba:	789b      	ldrb	r3, [r3, #2]
 80381bc:	461a      	mov	r2, r3
 80381be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80381c0:	fb02 f303 	mul.w	r3, r2, r3
 80381c4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80381c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80381c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80381cc:	b29a      	uxth	r2, r3
 80381ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80381d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80381d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80381d4:	895b      	ldrh	r3, [r3, #10]
 80381d6:	2b00      	cmp	r3, #0
 80381d8:	d008      	beq.n	80381ec <find_volume+0x228>
 80381da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80381dc:	895b      	ldrh	r3, [r3, #10]
 80381de:	461a      	mov	r2, r3
 80381e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80381e2:	895b      	ldrh	r3, [r3, #10]
 80381e4:	3b01      	subs	r3, #1
 80381e6:	4013      	ands	r3, r2
 80381e8:	2b00      	cmp	r3, #0
 80381ea:	d001      	beq.n	80381f0 <find_volume+0x22c>
 80381ec:	230d      	movs	r3, #13
 80381ee:	e12b      	b.n	8038448 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80381f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80381f2:	3330      	adds	r3, #48	; 0x30
 80381f4:	3311      	adds	r3, #17
 80381f6:	4618      	mov	r0, r3
 80381f8:	f7fe fcc6 	bl	8036b88 <ld_word>
 80381fc:	4603      	mov	r3, r0
 80381fe:	461a      	mov	r2, r3
 8038200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038202:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8038204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038206:	891b      	ldrh	r3, [r3, #8]
 8038208:	f003 030f 	and.w	r3, r3, #15
 803820c:	b29b      	uxth	r3, r3
 803820e:	2b00      	cmp	r3, #0
 8038210:	d001      	beq.n	8038216 <find_volume+0x252>
 8038212:	230d      	movs	r3, #13
 8038214:	e118      	b.n	8038448 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8038216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038218:	3330      	adds	r3, #48	; 0x30
 803821a:	3313      	adds	r3, #19
 803821c:	4618      	mov	r0, r3
 803821e:	f7fe fcb3 	bl	8036b88 <ld_word>
 8038222:	4603      	mov	r3, r0
 8038224:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8038226:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8038228:	2b00      	cmp	r3, #0
 803822a:	d106      	bne.n	803823a <find_volume+0x276>
 803822c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803822e:	3330      	adds	r3, #48	; 0x30
 8038230:	3320      	adds	r3, #32
 8038232:	4618      	mov	r0, r3
 8038234:	f7fe fcc0 	bl	8036bb8 <ld_dword>
 8038238:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 803823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803823c:	3330      	adds	r3, #48	; 0x30
 803823e:	330e      	adds	r3, #14
 8038240:	4618      	mov	r0, r3
 8038242:	f7fe fca1 	bl	8036b88 <ld_word>
 8038246:	4603      	mov	r3, r0
 8038248:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 803824a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 803824c:	2b00      	cmp	r3, #0
 803824e:	d101      	bne.n	8038254 <find_volume+0x290>
 8038250:	230d      	movs	r3, #13
 8038252:	e0f9      	b.n	8038448 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8038254:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8038256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8038258:	4413      	add	r3, r2
 803825a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803825c:	8912      	ldrh	r2, [r2, #8]
 803825e:	0912      	lsrs	r2, r2, #4
 8038260:	b292      	uxth	r2, r2
 8038262:	4413      	add	r3, r2
 8038264:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8038266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8038268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 803826a:	429a      	cmp	r2, r3
 803826c:	d201      	bcs.n	8038272 <find_volume+0x2ae>
 803826e:	230d      	movs	r3, #13
 8038270:	e0ea      	b.n	8038448 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8038272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8038274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038276:	1ad3      	subs	r3, r2, r3
 8038278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 803827a:	8952      	ldrh	r2, [r2, #10]
 803827c:	fbb3 f3f2 	udiv	r3, r3, r2
 8038280:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8038282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038284:	2b00      	cmp	r3, #0
 8038286:	d103      	bne.n	8038290 <find_volume+0x2cc>
 8038288:	230d      	movs	r3, #13
 803828a:	e0dd      	b.n	8038448 <find_volume+0x484>
 803828c:	200002f8 	.word	0x200002f8
		fmt = FS_FAT32;
 8038290:	2303      	movs	r3, #3
 8038292:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8038296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038298:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 803829c:	4293      	cmp	r3, r2
 803829e:	d802      	bhi.n	80382a6 <find_volume+0x2e2>
 80382a0:	2302      	movs	r3, #2
 80382a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80382a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80382a8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80382ac:	4293      	cmp	r3, r2
 80382ae:	d802      	bhi.n	80382b6 <find_volume+0x2f2>
 80382b0:	2301      	movs	r3, #1
 80382b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80382b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80382b8:	1c9a      	adds	r2, r3, #2
 80382ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80382bc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80382be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80382c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80382c2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80382c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80382c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80382c8:	441a      	add	r2, r3
 80382ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80382cc:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80382ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80382d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80382d2:	441a      	add	r2, r3
 80382d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80382d6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80382d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80382dc:	2b03      	cmp	r3, #3
 80382de:	d11e      	bne.n	803831e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80382e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80382e2:	3330      	adds	r3, #48	; 0x30
 80382e4:	332a      	adds	r3, #42	; 0x2a
 80382e6:	4618      	mov	r0, r3
 80382e8:	f7fe fc4e 	bl	8036b88 <ld_word>
 80382ec:	4603      	mov	r3, r0
 80382ee:	2b00      	cmp	r3, #0
 80382f0:	d001      	beq.n	80382f6 <find_volume+0x332>
 80382f2:	230d      	movs	r3, #13
 80382f4:	e0a8      	b.n	8038448 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80382f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80382f8:	891b      	ldrh	r3, [r3, #8]
 80382fa:	2b00      	cmp	r3, #0
 80382fc:	d001      	beq.n	8038302 <find_volume+0x33e>
 80382fe:	230d      	movs	r3, #13
 8038300:	e0a2      	b.n	8038448 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8038302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038304:	3330      	adds	r3, #48	; 0x30
 8038306:	332c      	adds	r3, #44	; 0x2c
 8038308:	4618      	mov	r0, r3
 803830a:	f7fe fc55 	bl	8036bb8 <ld_dword>
 803830e:	4602      	mov	r2, r0
 8038310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038312:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8038314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038316:	695b      	ldr	r3, [r3, #20]
 8038318:	009b      	lsls	r3, r3, #2
 803831a:	647b      	str	r3, [r7, #68]	; 0x44
 803831c:	e01f      	b.n	803835e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 803831e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038320:	891b      	ldrh	r3, [r3, #8]
 8038322:	2b00      	cmp	r3, #0
 8038324:	d101      	bne.n	803832a <find_volume+0x366>
 8038326:	230d      	movs	r3, #13
 8038328:	e08e      	b.n	8038448 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 803832a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803832c:	6a1a      	ldr	r2, [r3, #32]
 803832e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8038330:	441a      	add	r2, r3
 8038332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038334:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8038336:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 803833a:	2b02      	cmp	r3, #2
 803833c:	d103      	bne.n	8038346 <find_volume+0x382>
 803833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038340:	695b      	ldr	r3, [r3, #20]
 8038342:	005b      	lsls	r3, r3, #1
 8038344:	e00a      	b.n	803835c <find_volume+0x398>
 8038346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038348:	695a      	ldr	r2, [r3, #20]
 803834a:	4613      	mov	r3, r2
 803834c:	005b      	lsls	r3, r3, #1
 803834e:	4413      	add	r3, r2
 8038350:	085a      	lsrs	r2, r3, #1
 8038352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038354:	695b      	ldr	r3, [r3, #20]
 8038356:	f003 0301 	and.w	r3, r3, #1
 803835a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 803835c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 803835e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038360:	699a      	ldr	r2, [r3, #24]
 8038362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8038364:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8038368:	0a5b      	lsrs	r3, r3, #9
 803836a:	429a      	cmp	r2, r3
 803836c:	d201      	bcs.n	8038372 <find_volume+0x3ae>
 803836e:	230d      	movs	r3, #13
 8038370:	e06a      	b.n	8038448 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8038372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038374:	f04f 32ff 	mov.w	r2, #4294967295
 8038378:	611a      	str	r2, [r3, #16]
 803837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803837c:	691a      	ldr	r2, [r3, #16]
 803837e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038380:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8038382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038384:	2280      	movs	r2, #128	; 0x80
 8038386:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8038388:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 803838c:	2b03      	cmp	r3, #3
 803838e:	d149      	bne.n	8038424 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8038390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038392:	3330      	adds	r3, #48	; 0x30
 8038394:	3330      	adds	r3, #48	; 0x30
 8038396:	4618      	mov	r0, r3
 8038398:	f7fe fbf6 	bl	8036b88 <ld_word>
 803839c:	4603      	mov	r3, r0
 803839e:	2b01      	cmp	r3, #1
 80383a0:	d140      	bne.n	8038424 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80383a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80383a4:	3301      	adds	r3, #1
 80383a6:	4619      	mov	r1, r3
 80383a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80383aa:	f7fe fe9d 	bl	80370e8 <move_window>
 80383ae:	4603      	mov	r3, r0
 80383b0:	2b00      	cmp	r3, #0
 80383b2:	d137      	bne.n	8038424 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80383b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80383b6:	2200      	movs	r2, #0
 80383b8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80383ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80383bc:	3330      	adds	r3, #48	; 0x30
 80383be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80383c2:	4618      	mov	r0, r3
 80383c4:	f7fe fbe0 	bl	8036b88 <ld_word>
 80383c8:	4603      	mov	r3, r0
 80383ca:	461a      	mov	r2, r3
 80383cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80383d0:	429a      	cmp	r2, r3
 80383d2:	d127      	bne.n	8038424 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80383d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80383d6:	3330      	adds	r3, #48	; 0x30
 80383d8:	4618      	mov	r0, r3
 80383da:	f7fe fbed 	bl	8036bb8 <ld_dword>
 80383de:	4603      	mov	r3, r0
 80383e0:	4a1b      	ldr	r2, [pc, #108]	; (8038450 <find_volume+0x48c>)
 80383e2:	4293      	cmp	r3, r2
 80383e4:	d11e      	bne.n	8038424 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80383e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80383e8:	3330      	adds	r3, #48	; 0x30
 80383ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80383ee:	4618      	mov	r0, r3
 80383f0:	f7fe fbe2 	bl	8036bb8 <ld_dword>
 80383f4:	4603      	mov	r3, r0
 80383f6:	4a17      	ldr	r2, [pc, #92]	; (8038454 <find_volume+0x490>)
 80383f8:	4293      	cmp	r3, r2
 80383fa:	d113      	bne.n	8038424 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80383fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80383fe:	3330      	adds	r3, #48	; 0x30
 8038400:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8038404:	4618      	mov	r0, r3
 8038406:	f7fe fbd7 	bl	8036bb8 <ld_dword>
 803840a:	4602      	mov	r2, r0
 803840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803840e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8038410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038412:	3330      	adds	r3, #48	; 0x30
 8038414:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8038418:	4618      	mov	r0, r3
 803841a:	f7fe fbcd 	bl	8036bb8 <ld_dword>
 803841e:	4602      	mov	r2, r0
 8038420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038422:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8038424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8038426:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 803842a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 803842c:	4b0a      	ldr	r3, [pc, #40]	; (8038458 <find_volume+0x494>)
 803842e:	881b      	ldrh	r3, [r3, #0]
 8038430:	3301      	adds	r3, #1
 8038432:	b29a      	uxth	r2, r3
 8038434:	4b08      	ldr	r3, [pc, #32]	; (8038458 <find_volume+0x494>)
 8038436:	801a      	strh	r2, [r3, #0]
 8038438:	4b07      	ldr	r3, [pc, #28]	; (8038458 <find_volume+0x494>)
 803843a:	881a      	ldrh	r2, [r3, #0]
 803843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 803843e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8038440:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8038442:	f7fe fde9 	bl	8037018 <clear_lock>
#endif
	return FR_OK;
 8038446:	2300      	movs	r3, #0
}
 8038448:	4618      	mov	r0, r3
 803844a:	3758      	adds	r7, #88	; 0x58
 803844c:	46bd      	mov	sp, r7
 803844e:	bd80      	pop	{r7, pc}
 8038450:	41615252 	.word	0x41615252
 8038454:	61417272 	.word	0x61417272
 8038458:	200002fc 	.word	0x200002fc

0803845c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 803845c:	b580      	push	{r7, lr}
 803845e:	b084      	sub	sp, #16
 8038460:	af00      	add	r7, sp, #0
 8038462:	6078      	str	r0, [r7, #4]
 8038464:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8038466:	2309      	movs	r3, #9
 8038468:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 803846a:	687b      	ldr	r3, [r7, #4]
 803846c:	2b00      	cmp	r3, #0
 803846e:	d01c      	beq.n	80384aa <validate+0x4e>
 8038470:	687b      	ldr	r3, [r7, #4]
 8038472:	681b      	ldr	r3, [r3, #0]
 8038474:	2b00      	cmp	r3, #0
 8038476:	d018      	beq.n	80384aa <validate+0x4e>
 8038478:	687b      	ldr	r3, [r7, #4]
 803847a:	681b      	ldr	r3, [r3, #0]
 803847c:	781b      	ldrb	r3, [r3, #0]
 803847e:	2b00      	cmp	r3, #0
 8038480:	d013      	beq.n	80384aa <validate+0x4e>
 8038482:	687b      	ldr	r3, [r7, #4]
 8038484:	889a      	ldrh	r2, [r3, #4]
 8038486:	687b      	ldr	r3, [r7, #4]
 8038488:	681b      	ldr	r3, [r3, #0]
 803848a:	88db      	ldrh	r3, [r3, #6]
 803848c:	429a      	cmp	r2, r3
 803848e:	d10c      	bne.n	80384aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8038490:	687b      	ldr	r3, [r7, #4]
 8038492:	681b      	ldr	r3, [r3, #0]
 8038494:	785b      	ldrb	r3, [r3, #1]
 8038496:	4618      	mov	r0, r3
 8038498:	f7fe fad8 	bl	8036a4c <disk_status>
 803849c:	4603      	mov	r3, r0
 803849e:	f003 0301 	and.w	r3, r3, #1
 80384a2:	2b00      	cmp	r3, #0
 80384a4:	d101      	bne.n	80384aa <validate+0x4e>
			res = FR_OK;
 80384a6:	2300      	movs	r3, #0
 80384a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80384aa:	7bfb      	ldrb	r3, [r7, #15]
 80384ac:	2b00      	cmp	r3, #0
 80384ae:	d102      	bne.n	80384b6 <validate+0x5a>
 80384b0:	687b      	ldr	r3, [r7, #4]
 80384b2:	681b      	ldr	r3, [r3, #0]
 80384b4:	e000      	b.n	80384b8 <validate+0x5c>
 80384b6:	2300      	movs	r3, #0
 80384b8:	683a      	ldr	r2, [r7, #0]
 80384ba:	6013      	str	r3, [r2, #0]
	return res;
 80384bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80384be:	4618      	mov	r0, r3
 80384c0:	3710      	adds	r7, #16
 80384c2:	46bd      	mov	sp, r7
 80384c4:	bd80      	pop	{r7, pc}
	...

080384c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80384c8:	b580      	push	{r7, lr}
 80384ca:	b088      	sub	sp, #32
 80384cc:	af00      	add	r7, sp, #0
 80384ce:	60f8      	str	r0, [r7, #12]
 80384d0:	60b9      	str	r1, [r7, #8]
 80384d2:	4613      	mov	r3, r2
 80384d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80384d6:	68bb      	ldr	r3, [r7, #8]
 80384d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80384da:	f107 0310 	add.w	r3, r7, #16
 80384de:	4618      	mov	r0, r3
 80384e0:	f7ff fcd5 	bl	8037e8e <get_ldnumber>
 80384e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80384e6:	69fb      	ldr	r3, [r7, #28]
 80384e8:	2b00      	cmp	r3, #0
 80384ea:	da01      	bge.n	80384f0 <f_mount+0x28>
 80384ec:	230b      	movs	r3, #11
 80384ee:	e02b      	b.n	8038548 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80384f0:	4a17      	ldr	r2, [pc, #92]	; (8038550 <f_mount+0x88>)
 80384f2:	69fb      	ldr	r3, [r7, #28]
 80384f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80384f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80384fa:	69bb      	ldr	r3, [r7, #24]
 80384fc:	2b00      	cmp	r3, #0
 80384fe:	d005      	beq.n	803850c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8038500:	69b8      	ldr	r0, [r7, #24]
 8038502:	f7fe fd89 	bl	8037018 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8038506:	69bb      	ldr	r3, [r7, #24]
 8038508:	2200      	movs	r2, #0
 803850a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 803850c:	68fb      	ldr	r3, [r7, #12]
 803850e:	2b00      	cmp	r3, #0
 8038510:	d002      	beq.n	8038518 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8038512:	68fb      	ldr	r3, [r7, #12]
 8038514:	2200      	movs	r2, #0
 8038516:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8038518:	68fa      	ldr	r2, [r7, #12]
 803851a:	490d      	ldr	r1, [pc, #52]	; (8038550 <f_mount+0x88>)
 803851c:	69fb      	ldr	r3, [r7, #28]
 803851e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8038522:	68fb      	ldr	r3, [r7, #12]
 8038524:	2b00      	cmp	r3, #0
 8038526:	d002      	beq.n	803852e <f_mount+0x66>
 8038528:	79fb      	ldrb	r3, [r7, #7]
 803852a:	2b01      	cmp	r3, #1
 803852c:	d001      	beq.n	8038532 <f_mount+0x6a>
 803852e:	2300      	movs	r3, #0
 8038530:	e00a      	b.n	8038548 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8038532:	f107 010c 	add.w	r1, r7, #12
 8038536:	f107 0308 	add.w	r3, r7, #8
 803853a:	2200      	movs	r2, #0
 803853c:	4618      	mov	r0, r3
 803853e:	f7ff fd41 	bl	8037fc4 <find_volume>
 8038542:	4603      	mov	r3, r0
 8038544:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8038546:	7dfb      	ldrb	r3, [r7, #23]
}
 8038548:	4618      	mov	r0, r3
 803854a:	3720      	adds	r7, #32
 803854c:	46bd      	mov	sp, r7
 803854e:	bd80      	pop	{r7, pc}
 8038550:	200002f8 	.word	0x200002f8

08038554 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8038554:	b580      	push	{r7, lr}
 8038556:	b098      	sub	sp, #96	; 0x60
 8038558:	af00      	add	r7, sp, #0
 803855a:	60f8      	str	r0, [r7, #12]
 803855c:	60b9      	str	r1, [r7, #8]
 803855e:	4613      	mov	r3, r2
 8038560:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8038562:	68fb      	ldr	r3, [r7, #12]
 8038564:	2b00      	cmp	r3, #0
 8038566:	d101      	bne.n	803856c <f_open+0x18>
 8038568:	2309      	movs	r3, #9
 803856a:	e1ad      	b.n	80388c8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 803856c:	79fb      	ldrb	r3, [r7, #7]
 803856e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8038572:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8038574:	79fa      	ldrb	r2, [r7, #7]
 8038576:	f107 0110 	add.w	r1, r7, #16
 803857a:	f107 0308 	add.w	r3, r7, #8
 803857e:	4618      	mov	r0, r3
 8038580:	f7ff fd20 	bl	8037fc4 <find_volume>
 8038584:	4603      	mov	r3, r0
 8038586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 803858a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 803858e:	2b00      	cmp	r3, #0
 8038590:	f040 8191 	bne.w	80388b6 <f_open+0x362>
		dj.obj.fs = fs;
 8038594:	693b      	ldr	r3, [r7, #16]
 8038596:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8038598:	68ba      	ldr	r2, [r7, #8]
 803859a:	f107 0314 	add.w	r3, r7, #20
 803859e:	4611      	mov	r1, r2
 80385a0:	4618      	mov	r0, r3
 80385a2:	f7ff fc03 	bl	8037dac <follow_path>
 80385a6:	4603      	mov	r3, r0
 80385a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80385ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80385b0:	2b00      	cmp	r3, #0
 80385b2:	d11a      	bne.n	80385ea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80385b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80385b8:	b25b      	sxtb	r3, r3
 80385ba:	2b00      	cmp	r3, #0
 80385bc:	da03      	bge.n	80385c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80385be:	2306      	movs	r3, #6
 80385c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80385c4:	e011      	b.n	80385ea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80385c6:	79fb      	ldrb	r3, [r7, #7]
 80385c8:	f023 0301 	bic.w	r3, r3, #1
 80385cc:	2b00      	cmp	r3, #0
 80385ce:	bf14      	ite	ne
 80385d0:	2301      	movne	r3, #1
 80385d2:	2300      	moveq	r3, #0
 80385d4:	b2db      	uxtb	r3, r3
 80385d6:	461a      	mov	r2, r3
 80385d8:	f107 0314 	add.w	r3, r7, #20
 80385dc:	4611      	mov	r1, r2
 80385de:	4618      	mov	r0, r3
 80385e0:	f7fe fbd2 	bl	8036d88 <chk_lock>
 80385e4:	4603      	mov	r3, r0
 80385e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80385ea:	79fb      	ldrb	r3, [r7, #7]
 80385ec:	f003 031c 	and.w	r3, r3, #28
 80385f0:	2b00      	cmp	r3, #0
 80385f2:	d07f      	beq.n	80386f4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80385f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80385f8:	2b00      	cmp	r3, #0
 80385fa:	d017      	beq.n	803862c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80385fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8038600:	2b04      	cmp	r3, #4
 8038602:	d10e      	bne.n	8038622 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8038604:	f7fe fc1c 	bl	8036e40 <enq_lock>
 8038608:	4603      	mov	r3, r0
 803860a:	2b00      	cmp	r3, #0
 803860c:	d006      	beq.n	803861c <f_open+0xc8>
 803860e:	f107 0314 	add.w	r3, r7, #20
 8038612:	4618      	mov	r0, r3
 8038614:	f7ff fb03 	bl	8037c1e <dir_register>
 8038618:	4603      	mov	r3, r0
 803861a:	e000      	b.n	803861e <f_open+0xca>
 803861c:	2312      	movs	r3, #18
 803861e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8038622:	79fb      	ldrb	r3, [r7, #7]
 8038624:	f043 0308 	orr.w	r3, r3, #8
 8038628:	71fb      	strb	r3, [r7, #7]
 803862a:	e010      	b.n	803864e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 803862c:	7ebb      	ldrb	r3, [r7, #26]
 803862e:	f003 0311 	and.w	r3, r3, #17
 8038632:	2b00      	cmp	r3, #0
 8038634:	d003      	beq.n	803863e <f_open+0xea>
					res = FR_DENIED;
 8038636:	2307      	movs	r3, #7
 8038638:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 803863c:	e007      	b.n	803864e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 803863e:	79fb      	ldrb	r3, [r7, #7]
 8038640:	f003 0304 	and.w	r3, r3, #4
 8038644:	2b00      	cmp	r3, #0
 8038646:	d002      	beq.n	803864e <f_open+0xfa>
 8038648:	2308      	movs	r3, #8
 803864a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 803864e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8038652:	2b00      	cmp	r3, #0
 8038654:	d168      	bne.n	8038728 <f_open+0x1d4>
 8038656:	79fb      	ldrb	r3, [r7, #7]
 8038658:	f003 0308 	and.w	r3, r3, #8
 803865c:	2b00      	cmp	r3, #0
 803865e:	d063      	beq.n	8038728 <f_open+0x1d4>
				dw = GET_FATTIME();
 8038660:	f7fe f888 	bl	8036774 <get_fattime>
 8038664:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8038666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038668:	330e      	adds	r3, #14
 803866a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 803866c:	4618      	mov	r0, r3
 803866e:	f7fe fae1 	bl	8036c34 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8038672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038674:	3316      	adds	r3, #22
 8038676:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8038678:	4618      	mov	r0, r3
 803867a:	f7fe fadb 	bl	8036c34 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 803867e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8038680:	330b      	adds	r3, #11
 8038682:	2220      	movs	r2, #32
 8038684:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8038686:	693b      	ldr	r3, [r7, #16]
 8038688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803868a:	4611      	mov	r1, r2
 803868c:	4618      	mov	r0, r3
 803868e:	f7ff fa32 	bl	8037af6 <ld_clust>
 8038692:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8038694:	693b      	ldr	r3, [r7, #16]
 8038696:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8038698:	2200      	movs	r2, #0
 803869a:	4618      	mov	r0, r3
 803869c:	f7ff fa4a 	bl	8037b34 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80386a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80386a2:	331c      	adds	r3, #28
 80386a4:	2100      	movs	r1, #0
 80386a6:	4618      	mov	r0, r3
 80386a8:	f7fe fac4 	bl	8036c34 <st_dword>
					fs->wflag = 1;
 80386ac:	693b      	ldr	r3, [r7, #16]
 80386ae:	2201      	movs	r2, #1
 80386b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80386b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80386b4:	2b00      	cmp	r3, #0
 80386b6:	d037      	beq.n	8038728 <f_open+0x1d4>
						dw = fs->winsect;
 80386b8:	693b      	ldr	r3, [r7, #16]
 80386ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80386bc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80386be:	f107 0314 	add.w	r3, r7, #20
 80386c2:	2200      	movs	r2, #0
 80386c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80386c6:	4618      	mov	r0, r3
 80386c8:	f7fe ff5d 	bl	8037586 <remove_chain>
 80386cc:	4603      	mov	r3, r0
 80386ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80386d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80386d6:	2b00      	cmp	r3, #0
 80386d8:	d126      	bne.n	8038728 <f_open+0x1d4>
							res = move_window(fs, dw);
 80386da:	693b      	ldr	r3, [r7, #16]
 80386dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80386de:	4618      	mov	r0, r3
 80386e0:	f7fe fd02 	bl	80370e8 <move_window>
 80386e4:	4603      	mov	r3, r0
 80386e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80386ea:	693b      	ldr	r3, [r7, #16]
 80386ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80386ee:	3a01      	subs	r2, #1
 80386f0:	60da      	str	r2, [r3, #12]
 80386f2:	e019      	b.n	8038728 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80386f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80386f8:	2b00      	cmp	r3, #0
 80386fa:	d115      	bne.n	8038728 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80386fc:	7ebb      	ldrb	r3, [r7, #26]
 80386fe:	f003 0310 	and.w	r3, r3, #16
 8038702:	2b00      	cmp	r3, #0
 8038704:	d003      	beq.n	803870e <f_open+0x1ba>
					res = FR_NO_FILE;
 8038706:	2304      	movs	r3, #4
 8038708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 803870c:	e00c      	b.n	8038728 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 803870e:	79fb      	ldrb	r3, [r7, #7]
 8038710:	f003 0302 	and.w	r3, r3, #2
 8038714:	2b00      	cmp	r3, #0
 8038716:	d007      	beq.n	8038728 <f_open+0x1d4>
 8038718:	7ebb      	ldrb	r3, [r7, #26]
 803871a:	f003 0301 	and.w	r3, r3, #1
 803871e:	2b00      	cmp	r3, #0
 8038720:	d002      	beq.n	8038728 <f_open+0x1d4>
						res = FR_DENIED;
 8038722:	2307      	movs	r3, #7
 8038724:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8038728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 803872c:	2b00      	cmp	r3, #0
 803872e:	d128      	bne.n	8038782 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8038730:	79fb      	ldrb	r3, [r7, #7]
 8038732:	f003 0308 	and.w	r3, r3, #8
 8038736:	2b00      	cmp	r3, #0
 8038738:	d003      	beq.n	8038742 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 803873a:	79fb      	ldrb	r3, [r7, #7]
 803873c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8038740:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8038742:	693b      	ldr	r3, [r7, #16]
 8038744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8038746:	68fb      	ldr	r3, [r7, #12]
 8038748:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 803874a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 803874c:	68fb      	ldr	r3, [r7, #12]
 803874e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8038750:	79fb      	ldrb	r3, [r7, #7]
 8038752:	f023 0301 	bic.w	r3, r3, #1
 8038756:	2b00      	cmp	r3, #0
 8038758:	bf14      	ite	ne
 803875a:	2301      	movne	r3, #1
 803875c:	2300      	moveq	r3, #0
 803875e:	b2db      	uxtb	r3, r3
 8038760:	461a      	mov	r2, r3
 8038762:	f107 0314 	add.w	r3, r7, #20
 8038766:	4611      	mov	r1, r2
 8038768:	4618      	mov	r0, r3
 803876a:	f7fe fb8b 	bl	8036e84 <inc_lock>
 803876e:	4602      	mov	r2, r0
 8038770:	68fb      	ldr	r3, [r7, #12]
 8038772:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8038774:	68fb      	ldr	r3, [r7, #12]
 8038776:	691b      	ldr	r3, [r3, #16]
 8038778:	2b00      	cmp	r3, #0
 803877a:	d102      	bne.n	8038782 <f_open+0x22e>
 803877c:	2302      	movs	r3, #2
 803877e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8038782:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8038786:	2b00      	cmp	r3, #0
 8038788:	f040 8095 	bne.w	80388b6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 803878c:	693b      	ldr	r3, [r7, #16]
 803878e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8038790:	4611      	mov	r1, r2
 8038792:	4618      	mov	r0, r3
 8038794:	f7ff f9af 	bl	8037af6 <ld_clust>
 8038798:	4602      	mov	r2, r0
 803879a:	68fb      	ldr	r3, [r7, #12]
 803879c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 803879e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80387a0:	331c      	adds	r3, #28
 80387a2:	4618      	mov	r0, r3
 80387a4:	f7fe fa08 	bl	8036bb8 <ld_dword>
 80387a8:	4602      	mov	r2, r0
 80387aa:	68fb      	ldr	r3, [r7, #12]
 80387ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80387ae:	68fb      	ldr	r3, [r7, #12]
 80387b0:	2200      	movs	r2, #0
 80387b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80387b4:	693a      	ldr	r2, [r7, #16]
 80387b6:	68fb      	ldr	r3, [r7, #12]
 80387b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80387ba:	693b      	ldr	r3, [r7, #16]
 80387bc:	88da      	ldrh	r2, [r3, #6]
 80387be:	68fb      	ldr	r3, [r7, #12]
 80387c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80387c2:	68fb      	ldr	r3, [r7, #12]
 80387c4:	79fa      	ldrb	r2, [r7, #7]
 80387c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80387c8:	68fb      	ldr	r3, [r7, #12]
 80387ca:	2200      	movs	r2, #0
 80387cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80387ce:	68fb      	ldr	r3, [r7, #12]
 80387d0:	2200      	movs	r2, #0
 80387d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80387d4:	68fb      	ldr	r3, [r7, #12]
 80387d6:	2200      	movs	r2, #0
 80387d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80387da:	68fb      	ldr	r3, [r7, #12]
 80387dc:	3330      	adds	r3, #48	; 0x30
 80387de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80387e2:	2100      	movs	r1, #0
 80387e4:	4618      	mov	r0, r3
 80387e6:	f7fe fa72 	bl	8036cce <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80387ea:	79fb      	ldrb	r3, [r7, #7]
 80387ec:	f003 0320 	and.w	r3, r3, #32
 80387f0:	2b00      	cmp	r3, #0
 80387f2:	d060      	beq.n	80388b6 <f_open+0x362>
 80387f4:	68fb      	ldr	r3, [r7, #12]
 80387f6:	68db      	ldr	r3, [r3, #12]
 80387f8:	2b00      	cmp	r3, #0
 80387fa:	d05c      	beq.n	80388b6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80387fc:	68fb      	ldr	r3, [r7, #12]
 80387fe:	68da      	ldr	r2, [r3, #12]
 8038800:	68fb      	ldr	r3, [r7, #12]
 8038802:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8038804:	693b      	ldr	r3, [r7, #16]
 8038806:	895b      	ldrh	r3, [r3, #10]
 8038808:	025b      	lsls	r3, r3, #9
 803880a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 803880c:	68fb      	ldr	r3, [r7, #12]
 803880e:	689b      	ldr	r3, [r3, #8]
 8038810:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8038812:	68fb      	ldr	r3, [r7, #12]
 8038814:	68db      	ldr	r3, [r3, #12]
 8038816:	657b      	str	r3, [r7, #84]	; 0x54
 8038818:	e016      	b.n	8038848 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 803881a:	68fb      	ldr	r3, [r7, #12]
 803881c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 803881e:	4618      	mov	r0, r3
 8038820:	f7fe fd1d 	bl	803725e <get_fat>
 8038824:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8038826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8038828:	2b01      	cmp	r3, #1
 803882a:	d802      	bhi.n	8038832 <f_open+0x2de>
 803882c:	2302      	movs	r3, #2
 803882e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8038832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8038834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8038838:	d102      	bne.n	8038840 <f_open+0x2ec>
 803883a:	2301      	movs	r3, #1
 803883c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8038840:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8038842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8038844:	1ad3      	subs	r3, r2, r3
 8038846:	657b      	str	r3, [r7, #84]	; 0x54
 8038848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 803884c:	2b00      	cmp	r3, #0
 803884e:	d103      	bne.n	8038858 <f_open+0x304>
 8038850:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8038852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8038854:	429a      	cmp	r2, r3
 8038856:	d8e0      	bhi.n	803881a <f_open+0x2c6>
				}
				fp->clust = clst;
 8038858:	68fb      	ldr	r3, [r7, #12]
 803885a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 803885c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 803885e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8038862:	2b00      	cmp	r3, #0
 8038864:	d127      	bne.n	80388b6 <f_open+0x362>
 8038866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8038868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803886c:	2b00      	cmp	r3, #0
 803886e:	d022      	beq.n	80388b6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8038870:	693b      	ldr	r3, [r7, #16]
 8038872:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8038874:	4618      	mov	r0, r3
 8038876:	f7fe fcd3 	bl	8037220 <clust2sect>
 803887a:	6478      	str	r0, [r7, #68]	; 0x44
 803887c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 803887e:	2b00      	cmp	r3, #0
 8038880:	d103      	bne.n	803888a <f_open+0x336>
						res = FR_INT_ERR;
 8038882:	2302      	movs	r3, #2
 8038884:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8038888:	e015      	b.n	80388b6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 803888a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 803888c:	0a5a      	lsrs	r2, r3, #9
 803888e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8038890:	441a      	add	r2, r3
 8038892:	68fb      	ldr	r3, [r7, #12]
 8038894:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8038896:	693b      	ldr	r3, [r7, #16]
 8038898:	7858      	ldrb	r0, [r3, #1]
 803889a:	68fb      	ldr	r3, [r7, #12]
 803889c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80388a0:	68fb      	ldr	r3, [r7, #12]
 80388a2:	6a1a      	ldr	r2, [r3, #32]
 80388a4:	2301      	movs	r3, #1
 80388a6:	f7fe f911 	bl	8036acc <disk_read>
 80388aa:	4603      	mov	r3, r0
 80388ac:	2b00      	cmp	r3, #0
 80388ae:	d002      	beq.n	80388b6 <f_open+0x362>
 80388b0:	2301      	movs	r3, #1
 80388b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80388b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80388ba:	2b00      	cmp	r3, #0
 80388bc:	d002      	beq.n	80388c4 <f_open+0x370>
 80388be:	68fb      	ldr	r3, [r7, #12]
 80388c0:	2200      	movs	r2, #0
 80388c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80388c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80388c8:	4618      	mov	r0, r3
 80388ca:	3760      	adds	r7, #96	; 0x60
 80388cc:	46bd      	mov	sp, r7
 80388ce:	bd80      	pop	{r7, pc}

080388d0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80388d0:	b580      	push	{r7, lr}
 80388d2:	b08e      	sub	sp, #56	; 0x38
 80388d4:	af00      	add	r7, sp, #0
 80388d6:	60f8      	str	r0, [r7, #12]
 80388d8:	60b9      	str	r1, [r7, #8]
 80388da:	607a      	str	r2, [r7, #4]
 80388dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80388de:	68bb      	ldr	r3, [r7, #8]
 80388e0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80388e2:	683b      	ldr	r3, [r7, #0]
 80388e4:	2200      	movs	r2, #0
 80388e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80388e8:	68fb      	ldr	r3, [r7, #12]
 80388ea:	f107 0214 	add.w	r2, r7, #20
 80388ee:	4611      	mov	r1, r2
 80388f0:	4618      	mov	r0, r3
 80388f2:	f7ff fdb3 	bl	803845c <validate>
 80388f6:	4603      	mov	r3, r0
 80388f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80388fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8038900:	2b00      	cmp	r3, #0
 8038902:	d107      	bne.n	8038914 <f_read+0x44>
 8038904:	68fb      	ldr	r3, [r7, #12]
 8038906:	7d5b      	ldrb	r3, [r3, #21]
 8038908:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 803890c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8038910:	2b00      	cmp	r3, #0
 8038912:	d002      	beq.n	803891a <f_read+0x4a>
 8038914:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8038918:	e115      	b.n	8038b46 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 803891a:	68fb      	ldr	r3, [r7, #12]
 803891c:	7d1b      	ldrb	r3, [r3, #20]
 803891e:	f003 0301 	and.w	r3, r3, #1
 8038922:	2b00      	cmp	r3, #0
 8038924:	d101      	bne.n	803892a <f_read+0x5a>
 8038926:	2307      	movs	r3, #7
 8038928:	e10d      	b.n	8038b46 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 803892a:	68fb      	ldr	r3, [r7, #12]
 803892c:	68da      	ldr	r2, [r3, #12]
 803892e:	68fb      	ldr	r3, [r7, #12]
 8038930:	699b      	ldr	r3, [r3, #24]
 8038932:	1ad3      	subs	r3, r2, r3
 8038934:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8038936:	687a      	ldr	r2, [r7, #4]
 8038938:	6a3b      	ldr	r3, [r7, #32]
 803893a:	429a      	cmp	r2, r3
 803893c:	f240 80fe 	bls.w	8038b3c <f_read+0x26c>
 8038940:	6a3b      	ldr	r3, [r7, #32]
 8038942:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8038944:	e0fa      	b.n	8038b3c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8038946:	68fb      	ldr	r3, [r7, #12]
 8038948:	699b      	ldr	r3, [r3, #24]
 803894a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 803894e:	2b00      	cmp	r3, #0
 8038950:	f040 80c6 	bne.w	8038ae0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8038954:	68fb      	ldr	r3, [r7, #12]
 8038956:	699b      	ldr	r3, [r3, #24]
 8038958:	0a5b      	lsrs	r3, r3, #9
 803895a:	697a      	ldr	r2, [r7, #20]
 803895c:	8952      	ldrh	r2, [r2, #10]
 803895e:	3a01      	subs	r2, #1
 8038960:	4013      	ands	r3, r2
 8038962:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8038964:	69fb      	ldr	r3, [r7, #28]
 8038966:	2b00      	cmp	r3, #0
 8038968:	d12f      	bne.n	80389ca <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 803896a:	68fb      	ldr	r3, [r7, #12]
 803896c:	699b      	ldr	r3, [r3, #24]
 803896e:	2b00      	cmp	r3, #0
 8038970:	d103      	bne.n	803897a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8038972:	68fb      	ldr	r3, [r7, #12]
 8038974:	689b      	ldr	r3, [r3, #8]
 8038976:	633b      	str	r3, [r7, #48]	; 0x30
 8038978:	e013      	b.n	80389a2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 803897a:	68fb      	ldr	r3, [r7, #12]
 803897c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 803897e:	2b00      	cmp	r3, #0
 8038980:	d007      	beq.n	8038992 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8038982:	68fb      	ldr	r3, [r7, #12]
 8038984:	699b      	ldr	r3, [r3, #24]
 8038986:	4619      	mov	r1, r3
 8038988:	68f8      	ldr	r0, [r7, #12]
 803898a:	f7fe fef9 	bl	8037780 <clmt_clust>
 803898e:	6338      	str	r0, [r7, #48]	; 0x30
 8038990:	e007      	b.n	80389a2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8038992:	68fa      	ldr	r2, [r7, #12]
 8038994:	68fb      	ldr	r3, [r7, #12]
 8038996:	69db      	ldr	r3, [r3, #28]
 8038998:	4619      	mov	r1, r3
 803899a:	4610      	mov	r0, r2
 803899c:	f7fe fc5f 	bl	803725e <get_fat>
 80389a0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80389a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80389a4:	2b01      	cmp	r3, #1
 80389a6:	d804      	bhi.n	80389b2 <f_read+0xe2>
 80389a8:	68fb      	ldr	r3, [r7, #12]
 80389aa:	2202      	movs	r2, #2
 80389ac:	755a      	strb	r2, [r3, #21]
 80389ae:	2302      	movs	r3, #2
 80389b0:	e0c9      	b.n	8038b46 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80389b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80389b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80389b8:	d104      	bne.n	80389c4 <f_read+0xf4>
 80389ba:	68fb      	ldr	r3, [r7, #12]
 80389bc:	2201      	movs	r2, #1
 80389be:	755a      	strb	r2, [r3, #21]
 80389c0:	2301      	movs	r3, #1
 80389c2:	e0c0      	b.n	8038b46 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80389c4:	68fb      	ldr	r3, [r7, #12]
 80389c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80389c8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80389ca:	697a      	ldr	r2, [r7, #20]
 80389cc:	68fb      	ldr	r3, [r7, #12]
 80389ce:	69db      	ldr	r3, [r3, #28]
 80389d0:	4619      	mov	r1, r3
 80389d2:	4610      	mov	r0, r2
 80389d4:	f7fe fc24 	bl	8037220 <clust2sect>
 80389d8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80389da:	69bb      	ldr	r3, [r7, #24]
 80389dc:	2b00      	cmp	r3, #0
 80389de:	d104      	bne.n	80389ea <f_read+0x11a>
 80389e0:	68fb      	ldr	r3, [r7, #12]
 80389e2:	2202      	movs	r2, #2
 80389e4:	755a      	strb	r2, [r3, #21]
 80389e6:	2302      	movs	r3, #2
 80389e8:	e0ad      	b.n	8038b46 <f_read+0x276>
			sect += csect;
 80389ea:	69ba      	ldr	r2, [r7, #24]
 80389ec:	69fb      	ldr	r3, [r7, #28]
 80389ee:	4413      	add	r3, r2
 80389f0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80389f2:	687b      	ldr	r3, [r7, #4]
 80389f4:	0a5b      	lsrs	r3, r3, #9
 80389f6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80389f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80389fa:	2b00      	cmp	r3, #0
 80389fc:	d039      	beq.n	8038a72 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80389fe:	69fa      	ldr	r2, [r7, #28]
 8038a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038a02:	4413      	add	r3, r2
 8038a04:	697a      	ldr	r2, [r7, #20]
 8038a06:	8952      	ldrh	r2, [r2, #10]
 8038a08:	4293      	cmp	r3, r2
 8038a0a:	d905      	bls.n	8038a18 <f_read+0x148>
					cc = fs->csize - csect;
 8038a0c:	697b      	ldr	r3, [r7, #20]
 8038a0e:	895b      	ldrh	r3, [r3, #10]
 8038a10:	461a      	mov	r2, r3
 8038a12:	69fb      	ldr	r3, [r7, #28]
 8038a14:	1ad3      	subs	r3, r2, r3
 8038a16:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8038a18:	697b      	ldr	r3, [r7, #20]
 8038a1a:	7858      	ldrb	r0, [r3, #1]
 8038a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038a1e:	69ba      	ldr	r2, [r7, #24]
 8038a20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8038a22:	f7fe f853 	bl	8036acc <disk_read>
 8038a26:	4603      	mov	r3, r0
 8038a28:	2b00      	cmp	r3, #0
 8038a2a:	d004      	beq.n	8038a36 <f_read+0x166>
 8038a2c:	68fb      	ldr	r3, [r7, #12]
 8038a2e:	2201      	movs	r2, #1
 8038a30:	755a      	strb	r2, [r3, #21]
 8038a32:	2301      	movs	r3, #1
 8038a34:	e087      	b.n	8038b46 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8038a36:	68fb      	ldr	r3, [r7, #12]
 8038a38:	7d1b      	ldrb	r3, [r3, #20]
 8038a3a:	b25b      	sxtb	r3, r3
 8038a3c:	2b00      	cmp	r3, #0
 8038a3e:	da14      	bge.n	8038a6a <f_read+0x19a>
 8038a40:	68fb      	ldr	r3, [r7, #12]
 8038a42:	6a1a      	ldr	r2, [r3, #32]
 8038a44:	69bb      	ldr	r3, [r7, #24]
 8038a46:	1ad3      	subs	r3, r2, r3
 8038a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8038a4a:	429a      	cmp	r2, r3
 8038a4c:	d90d      	bls.n	8038a6a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8038a4e:	68fb      	ldr	r3, [r7, #12]
 8038a50:	6a1a      	ldr	r2, [r3, #32]
 8038a52:	69bb      	ldr	r3, [r7, #24]
 8038a54:	1ad3      	subs	r3, r2, r3
 8038a56:	025b      	lsls	r3, r3, #9
 8038a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8038a5a:	18d0      	adds	r0, r2, r3
 8038a5c:	68fb      	ldr	r3, [r7, #12]
 8038a5e:	3330      	adds	r3, #48	; 0x30
 8038a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8038a64:	4619      	mov	r1, r3
 8038a66:	f7fe f911 	bl	8036c8c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8038a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038a6c:	025b      	lsls	r3, r3, #9
 8038a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8038a70:	e050      	b.n	8038b14 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8038a72:	68fb      	ldr	r3, [r7, #12]
 8038a74:	6a1b      	ldr	r3, [r3, #32]
 8038a76:	69ba      	ldr	r2, [r7, #24]
 8038a78:	429a      	cmp	r2, r3
 8038a7a:	d02e      	beq.n	8038ada <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8038a7c:	68fb      	ldr	r3, [r7, #12]
 8038a7e:	7d1b      	ldrb	r3, [r3, #20]
 8038a80:	b25b      	sxtb	r3, r3
 8038a82:	2b00      	cmp	r3, #0
 8038a84:	da18      	bge.n	8038ab8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8038a86:	697b      	ldr	r3, [r7, #20]
 8038a88:	7858      	ldrb	r0, [r3, #1]
 8038a8a:	68fb      	ldr	r3, [r7, #12]
 8038a8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8038a90:	68fb      	ldr	r3, [r7, #12]
 8038a92:	6a1a      	ldr	r2, [r3, #32]
 8038a94:	2301      	movs	r3, #1
 8038a96:	f7fe f839 	bl	8036b0c <disk_write>
 8038a9a:	4603      	mov	r3, r0
 8038a9c:	2b00      	cmp	r3, #0
 8038a9e:	d004      	beq.n	8038aaa <f_read+0x1da>
 8038aa0:	68fb      	ldr	r3, [r7, #12]
 8038aa2:	2201      	movs	r2, #1
 8038aa4:	755a      	strb	r2, [r3, #21]
 8038aa6:	2301      	movs	r3, #1
 8038aa8:	e04d      	b.n	8038b46 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8038aaa:	68fb      	ldr	r3, [r7, #12]
 8038aac:	7d1b      	ldrb	r3, [r3, #20]
 8038aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8038ab2:	b2da      	uxtb	r2, r3
 8038ab4:	68fb      	ldr	r3, [r7, #12]
 8038ab6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8038ab8:	697b      	ldr	r3, [r7, #20]
 8038aba:	7858      	ldrb	r0, [r3, #1]
 8038abc:	68fb      	ldr	r3, [r7, #12]
 8038abe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8038ac2:	2301      	movs	r3, #1
 8038ac4:	69ba      	ldr	r2, [r7, #24]
 8038ac6:	f7fe f801 	bl	8036acc <disk_read>
 8038aca:	4603      	mov	r3, r0
 8038acc:	2b00      	cmp	r3, #0
 8038ace:	d004      	beq.n	8038ada <f_read+0x20a>
 8038ad0:	68fb      	ldr	r3, [r7, #12]
 8038ad2:	2201      	movs	r2, #1
 8038ad4:	755a      	strb	r2, [r3, #21]
 8038ad6:	2301      	movs	r3, #1
 8038ad8:	e035      	b.n	8038b46 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8038ada:	68fb      	ldr	r3, [r7, #12]
 8038adc:	69ba      	ldr	r2, [r7, #24]
 8038ade:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8038ae0:	68fb      	ldr	r3, [r7, #12]
 8038ae2:	699b      	ldr	r3, [r3, #24]
 8038ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8038ae8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8038aec:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8038aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8038af0:	687b      	ldr	r3, [r7, #4]
 8038af2:	429a      	cmp	r2, r3
 8038af4:	d901      	bls.n	8038afa <f_read+0x22a>
 8038af6:	687b      	ldr	r3, [r7, #4]
 8038af8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8038afa:	68fb      	ldr	r3, [r7, #12]
 8038afc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8038b00:	68fb      	ldr	r3, [r7, #12]
 8038b02:	699b      	ldr	r3, [r3, #24]
 8038b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8038b08:	4413      	add	r3, r2
 8038b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8038b0c:	4619      	mov	r1, r3
 8038b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8038b10:	f7fe f8bc 	bl	8036c8c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8038b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8038b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038b18:	4413      	add	r3, r2
 8038b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8038b1c:	68fb      	ldr	r3, [r7, #12]
 8038b1e:	699a      	ldr	r2, [r3, #24]
 8038b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038b22:	441a      	add	r2, r3
 8038b24:	68fb      	ldr	r3, [r7, #12]
 8038b26:	619a      	str	r2, [r3, #24]
 8038b28:	683b      	ldr	r3, [r7, #0]
 8038b2a:	681a      	ldr	r2, [r3, #0]
 8038b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038b2e:	441a      	add	r2, r3
 8038b30:	683b      	ldr	r3, [r7, #0]
 8038b32:	601a      	str	r2, [r3, #0]
 8038b34:	687a      	ldr	r2, [r7, #4]
 8038b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8038b38:	1ad3      	subs	r3, r2, r3
 8038b3a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8038b3c:	687b      	ldr	r3, [r7, #4]
 8038b3e:	2b00      	cmp	r3, #0
 8038b40:	f47f af01 	bne.w	8038946 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8038b44:	2300      	movs	r3, #0
}
 8038b46:	4618      	mov	r0, r3
 8038b48:	3738      	adds	r7, #56	; 0x38
 8038b4a:	46bd      	mov	sp, r7
 8038b4c:	bd80      	pop	{r7, pc}

08038b4e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8038b4e:	b580      	push	{r7, lr}
 8038b50:	b08c      	sub	sp, #48	; 0x30
 8038b52:	af00      	add	r7, sp, #0
 8038b54:	60f8      	str	r0, [r7, #12]
 8038b56:	60b9      	str	r1, [r7, #8]
 8038b58:	607a      	str	r2, [r7, #4]
 8038b5a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8038b5c:	68bb      	ldr	r3, [r7, #8]
 8038b5e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8038b60:	683b      	ldr	r3, [r7, #0]
 8038b62:	2200      	movs	r2, #0
 8038b64:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8038b66:	68fb      	ldr	r3, [r7, #12]
 8038b68:	f107 0210 	add.w	r2, r7, #16
 8038b6c:	4611      	mov	r1, r2
 8038b6e:	4618      	mov	r0, r3
 8038b70:	f7ff fc74 	bl	803845c <validate>
 8038b74:	4603      	mov	r3, r0
 8038b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8038b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8038b7e:	2b00      	cmp	r3, #0
 8038b80:	d107      	bne.n	8038b92 <f_write+0x44>
 8038b82:	68fb      	ldr	r3, [r7, #12]
 8038b84:	7d5b      	ldrb	r3, [r3, #21]
 8038b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8038b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8038b8e:	2b00      	cmp	r3, #0
 8038b90:	d002      	beq.n	8038b98 <f_write+0x4a>
 8038b92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8038b96:	e14b      	b.n	8038e30 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8038b98:	68fb      	ldr	r3, [r7, #12]
 8038b9a:	7d1b      	ldrb	r3, [r3, #20]
 8038b9c:	f003 0302 	and.w	r3, r3, #2
 8038ba0:	2b00      	cmp	r3, #0
 8038ba2:	d101      	bne.n	8038ba8 <f_write+0x5a>
 8038ba4:	2307      	movs	r3, #7
 8038ba6:	e143      	b.n	8038e30 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8038ba8:	68fb      	ldr	r3, [r7, #12]
 8038baa:	699a      	ldr	r2, [r3, #24]
 8038bac:	687b      	ldr	r3, [r7, #4]
 8038bae:	441a      	add	r2, r3
 8038bb0:	68fb      	ldr	r3, [r7, #12]
 8038bb2:	699b      	ldr	r3, [r3, #24]
 8038bb4:	429a      	cmp	r2, r3
 8038bb6:	f080 812d 	bcs.w	8038e14 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8038bba:	68fb      	ldr	r3, [r7, #12]
 8038bbc:	699b      	ldr	r3, [r3, #24]
 8038bbe:	43db      	mvns	r3, r3
 8038bc0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8038bc2:	e127      	b.n	8038e14 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8038bc4:	68fb      	ldr	r3, [r7, #12]
 8038bc6:	699b      	ldr	r3, [r3, #24]
 8038bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8038bcc:	2b00      	cmp	r3, #0
 8038bce:	f040 80e3 	bne.w	8038d98 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8038bd2:	68fb      	ldr	r3, [r7, #12]
 8038bd4:	699b      	ldr	r3, [r3, #24]
 8038bd6:	0a5b      	lsrs	r3, r3, #9
 8038bd8:	693a      	ldr	r2, [r7, #16]
 8038bda:	8952      	ldrh	r2, [r2, #10]
 8038bdc:	3a01      	subs	r2, #1
 8038bde:	4013      	ands	r3, r2
 8038be0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8038be2:	69bb      	ldr	r3, [r7, #24]
 8038be4:	2b00      	cmp	r3, #0
 8038be6:	d143      	bne.n	8038c70 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8038be8:	68fb      	ldr	r3, [r7, #12]
 8038bea:	699b      	ldr	r3, [r3, #24]
 8038bec:	2b00      	cmp	r3, #0
 8038bee:	d10c      	bne.n	8038c0a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8038bf0:	68fb      	ldr	r3, [r7, #12]
 8038bf2:	689b      	ldr	r3, [r3, #8]
 8038bf4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8038bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038bf8:	2b00      	cmp	r3, #0
 8038bfa:	d11a      	bne.n	8038c32 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8038bfc:	68fb      	ldr	r3, [r7, #12]
 8038bfe:	2100      	movs	r1, #0
 8038c00:	4618      	mov	r0, r3
 8038c02:	f7fe fd25 	bl	8037650 <create_chain>
 8038c06:	62b8      	str	r0, [r7, #40]	; 0x28
 8038c08:	e013      	b.n	8038c32 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8038c0a:	68fb      	ldr	r3, [r7, #12]
 8038c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8038c0e:	2b00      	cmp	r3, #0
 8038c10:	d007      	beq.n	8038c22 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8038c12:	68fb      	ldr	r3, [r7, #12]
 8038c14:	699b      	ldr	r3, [r3, #24]
 8038c16:	4619      	mov	r1, r3
 8038c18:	68f8      	ldr	r0, [r7, #12]
 8038c1a:	f7fe fdb1 	bl	8037780 <clmt_clust>
 8038c1e:	62b8      	str	r0, [r7, #40]	; 0x28
 8038c20:	e007      	b.n	8038c32 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8038c22:	68fa      	ldr	r2, [r7, #12]
 8038c24:	68fb      	ldr	r3, [r7, #12]
 8038c26:	69db      	ldr	r3, [r3, #28]
 8038c28:	4619      	mov	r1, r3
 8038c2a:	4610      	mov	r0, r2
 8038c2c:	f7fe fd10 	bl	8037650 <create_chain>
 8038c30:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8038c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038c34:	2b00      	cmp	r3, #0
 8038c36:	f000 80f2 	beq.w	8038e1e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8038c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038c3c:	2b01      	cmp	r3, #1
 8038c3e:	d104      	bne.n	8038c4a <f_write+0xfc>
 8038c40:	68fb      	ldr	r3, [r7, #12]
 8038c42:	2202      	movs	r2, #2
 8038c44:	755a      	strb	r2, [r3, #21]
 8038c46:	2302      	movs	r3, #2
 8038c48:	e0f2      	b.n	8038e30 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8038c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8038c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8038c50:	d104      	bne.n	8038c5c <f_write+0x10e>
 8038c52:	68fb      	ldr	r3, [r7, #12]
 8038c54:	2201      	movs	r2, #1
 8038c56:	755a      	strb	r2, [r3, #21]
 8038c58:	2301      	movs	r3, #1
 8038c5a:	e0e9      	b.n	8038e30 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8038c5c:	68fb      	ldr	r3, [r7, #12]
 8038c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8038c60:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8038c62:	68fb      	ldr	r3, [r7, #12]
 8038c64:	689b      	ldr	r3, [r3, #8]
 8038c66:	2b00      	cmp	r3, #0
 8038c68:	d102      	bne.n	8038c70 <f_write+0x122>
 8038c6a:	68fb      	ldr	r3, [r7, #12]
 8038c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8038c6e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8038c70:	68fb      	ldr	r3, [r7, #12]
 8038c72:	7d1b      	ldrb	r3, [r3, #20]
 8038c74:	b25b      	sxtb	r3, r3
 8038c76:	2b00      	cmp	r3, #0
 8038c78:	da18      	bge.n	8038cac <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8038c7a:	693b      	ldr	r3, [r7, #16]
 8038c7c:	7858      	ldrb	r0, [r3, #1]
 8038c7e:	68fb      	ldr	r3, [r7, #12]
 8038c80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8038c84:	68fb      	ldr	r3, [r7, #12]
 8038c86:	6a1a      	ldr	r2, [r3, #32]
 8038c88:	2301      	movs	r3, #1
 8038c8a:	f7fd ff3f 	bl	8036b0c <disk_write>
 8038c8e:	4603      	mov	r3, r0
 8038c90:	2b00      	cmp	r3, #0
 8038c92:	d004      	beq.n	8038c9e <f_write+0x150>
 8038c94:	68fb      	ldr	r3, [r7, #12]
 8038c96:	2201      	movs	r2, #1
 8038c98:	755a      	strb	r2, [r3, #21]
 8038c9a:	2301      	movs	r3, #1
 8038c9c:	e0c8      	b.n	8038e30 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8038c9e:	68fb      	ldr	r3, [r7, #12]
 8038ca0:	7d1b      	ldrb	r3, [r3, #20]
 8038ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8038ca6:	b2da      	uxtb	r2, r3
 8038ca8:	68fb      	ldr	r3, [r7, #12]
 8038caa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8038cac:	693a      	ldr	r2, [r7, #16]
 8038cae:	68fb      	ldr	r3, [r7, #12]
 8038cb0:	69db      	ldr	r3, [r3, #28]
 8038cb2:	4619      	mov	r1, r3
 8038cb4:	4610      	mov	r0, r2
 8038cb6:	f7fe fab3 	bl	8037220 <clust2sect>
 8038cba:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8038cbc:	697b      	ldr	r3, [r7, #20]
 8038cbe:	2b00      	cmp	r3, #0
 8038cc0:	d104      	bne.n	8038ccc <f_write+0x17e>
 8038cc2:	68fb      	ldr	r3, [r7, #12]
 8038cc4:	2202      	movs	r2, #2
 8038cc6:	755a      	strb	r2, [r3, #21]
 8038cc8:	2302      	movs	r3, #2
 8038cca:	e0b1      	b.n	8038e30 <f_write+0x2e2>
			sect += csect;
 8038ccc:	697a      	ldr	r2, [r7, #20]
 8038cce:	69bb      	ldr	r3, [r7, #24]
 8038cd0:	4413      	add	r3, r2
 8038cd2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8038cd4:	687b      	ldr	r3, [r7, #4]
 8038cd6:	0a5b      	lsrs	r3, r3, #9
 8038cd8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8038cda:	6a3b      	ldr	r3, [r7, #32]
 8038cdc:	2b00      	cmp	r3, #0
 8038cde:	d03c      	beq.n	8038d5a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8038ce0:	69ba      	ldr	r2, [r7, #24]
 8038ce2:	6a3b      	ldr	r3, [r7, #32]
 8038ce4:	4413      	add	r3, r2
 8038ce6:	693a      	ldr	r2, [r7, #16]
 8038ce8:	8952      	ldrh	r2, [r2, #10]
 8038cea:	4293      	cmp	r3, r2
 8038cec:	d905      	bls.n	8038cfa <f_write+0x1ac>
					cc = fs->csize - csect;
 8038cee:	693b      	ldr	r3, [r7, #16]
 8038cf0:	895b      	ldrh	r3, [r3, #10]
 8038cf2:	461a      	mov	r2, r3
 8038cf4:	69bb      	ldr	r3, [r7, #24]
 8038cf6:	1ad3      	subs	r3, r2, r3
 8038cf8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8038cfa:	693b      	ldr	r3, [r7, #16]
 8038cfc:	7858      	ldrb	r0, [r3, #1]
 8038cfe:	6a3b      	ldr	r3, [r7, #32]
 8038d00:	697a      	ldr	r2, [r7, #20]
 8038d02:	69f9      	ldr	r1, [r7, #28]
 8038d04:	f7fd ff02 	bl	8036b0c <disk_write>
 8038d08:	4603      	mov	r3, r0
 8038d0a:	2b00      	cmp	r3, #0
 8038d0c:	d004      	beq.n	8038d18 <f_write+0x1ca>
 8038d0e:	68fb      	ldr	r3, [r7, #12]
 8038d10:	2201      	movs	r2, #1
 8038d12:	755a      	strb	r2, [r3, #21]
 8038d14:	2301      	movs	r3, #1
 8038d16:	e08b      	b.n	8038e30 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8038d18:	68fb      	ldr	r3, [r7, #12]
 8038d1a:	6a1a      	ldr	r2, [r3, #32]
 8038d1c:	697b      	ldr	r3, [r7, #20]
 8038d1e:	1ad3      	subs	r3, r2, r3
 8038d20:	6a3a      	ldr	r2, [r7, #32]
 8038d22:	429a      	cmp	r2, r3
 8038d24:	d915      	bls.n	8038d52 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8038d26:	68fb      	ldr	r3, [r7, #12]
 8038d28:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8038d2c:	68fb      	ldr	r3, [r7, #12]
 8038d2e:	6a1a      	ldr	r2, [r3, #32]
 8038d30:	697b      	ldr	r3, [r7, #20]
 8038d32:	1ad3      	subs	r3, r2, r3
 8038d34:	025b      	lsls	r3, r3, #9
 8038d36:	69fa      	ldr	r2, [r7, #28]
 8038d38:	4413      	add	r3, r2
 8038d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8038d3e:	4619      	mov	r1, r3
 8038d40:	f7fd ffa4 	bl	8036c8c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8038d44:	68fb      	ldr	r3, [r7, #12]
 8038d46:	7d1b      	ldrb	r3, [r3, #20]
 8038d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8038d4c:	b2da      	uxtb	r2, r3
 8038d4e:	68fb      	ldr	r3, [r7, #12]
 8038d50:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8038d52:	6a3b      	ldr	r3, [r7, #32]
 8038d54:	025b      	lsls	r3, r3, #9
 8038d56:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8038d58:	e03f      	b.n	8038dda <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8038d5a:	68fb      	ldr	r3, [r7, #12]
 8038d5c:	6a1b      	ldr	r3, [r3, #32]
 8038d5e:	697a      	ldr	r2, [r7, #20]
 8038d60:	429a      	cmp	r2, r3
 8038d62:	d016      	beq.n	8038d92 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8038d64:	68fb      	ldr	r3, [r7, #12]
 8038d66:	699a      	ldr	r2, [r3, #24]
 8038d68:	68fb      	ldr	r3, [r7, #12]
 8038d6a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8038d6c:	429a      	cmp	r2, r3
 8038d6e:	d210      	bcs.n	8038d92 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8038d70:	693b      	ldr	r3, [r7, #16]
 8038d72:	7858      	ldrb	r0, [r3, #1]
 8038d74:	68fb      	ldr	r3, [r7, #12]
 8038d76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8038d7a:	2301      	movs	r3, #1
 8038d7c:	697a      	ldr	r2, [r7, #20]
 8038d7e:	f7fd fea5 	bl	8036acc <disk_read>
 8038d82:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8038d84:	2b00      	cmp	r3, #0
 8038d86:	d004      	beq.n	8038d92 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8038d88:	68fb      	ldr	r3, [r7, #12]
 8038d8a:	2201      	movs	r2, #1
 8038d8c:	755a      	strb	r2, [r3, #21]
 8038d8e:	2301      	movs	r3, #1
 8038d90:	e04e      	b.n	8038e30 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8038d92:	68fb      	ldr	r3, [r7, #12]
 8038d94:	697a      	ldr	r2, [r7, #20]
 8038d96:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8038d98:	68fb      	ldr	r3, [r7, #12]
 8038d9a:	699b      	ldr	r3, [r3, #24]
 8038d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8038da0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8038da4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8038da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8038da8:	687b      	ldr	r3, [r7, #4]
 8038daa:	429a      	cmp	r2, r3
 8038dac:	d901      	bls.n	8038db2 <f_write+0x264>
 8038dae:	687b      	ldr	r3, [r7, #4]
 8038db0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8038db2:	68fb      	ldr	r3, [r7, #12]
 8038db4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8038db8:	68fb      	ldr	r3, [r7, #12]
 8038dba:	699b      	ldr	r3, [r3, #24]
 8038dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8038dc0:	4413      	add	r3, r2
 8038dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8038dc4:	69f9      	ldr	r1, [r7, #28]
 8038dc6:	4618      	mov	r0, r3
 8038dc8:	f7fd ff60 	bl	8036c8c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8038dcc:	68fb      	ldr	r3, [r7, #12]
 8038dce:	7d1b      	ldrb	r3, [r3, #20]
 8038dd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8038dd4:	b2da      	uxtb	r2, r3
 8038dd6:	68fb      	ldr	r3, [r7, #12]
 8038dd8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8038dda:	69fa      	ldr	r2, [r7, #28]
 8038ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038dde:	4413      	add	r3, r2
 8038de0:	61fb      	str	r3, [r7, #28]
 8038de2:	68fb      	ldr	r3, [r7, #12]
 8038de4:	699a      	ldr	r2, [r3, #24]
 8038de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038de8:	441a      	add	r2, r3
 8038dea:	68fb      	ldr	r3, [r7, #12]
 8038dec:	619a      	str	r2, [r3, #24]
 8038dee:	68fb      	ldr	r3, [r7, #12]
 8038df0:	68da      	ldr	r2, [r3, #12]
 8038df2:	68fb      	ldr	r3, [r7, #12]
 8038df4:	699b      	ldr	r3, [r3, #24]
 8038df6:	429a      	cmp	r2, r3
 8038df8:	bf38      	it	cc
 8038dfa:	461a      	movcc	r2, r3
 8038dfc:	68fb      	ldr	r3, [r7, #12]
 8038dfe:	60da      	str	r2, [r3, #12]
 8038e00:	683b      	ldr	r3, [r7, #0]
 8038e02:	681a      	ldr	r2, [r3, #0]
 8038e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e06:	441a      	add	r2, r3
 8038e08:	683b      	ldr	r3, [r7, #0]
 8038e0a:	601a      	str	r2, [r3, #0]
 8038e0c:	687a      	ldr	r2, [r7, #4]
 8038e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8038e10:	1ad3      	subs	r3, r2, r3
 8038e12:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8038e14:	687b      	ldr	r3, [r7, #4]
 8038e16:	2b00      	cmp	r3, #0
 8038e18:	f47f aed4 	bne.w	8038bc4 <f_write+0x76>
 8038e1c:	e000      	b.n	8038e20 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8038e1e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8038e20:	68fb      	ldr	r3, [r7, #12]
 8038e22:	7d1b      	ldrb	r3, [r3, #20]
 8038e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8038e28:	b2da      	uxtb	r2, r3
 8038e2a:	68fb      	ldr	r3, [r7, #12]
 8038e2c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8038e2e:	2300      	movs	r3, #0
}
 8038e30:	4618      	mov	r0, r3
 8038e32:	3730      	adds	r7, #48	; 0x30
 8038e34:	46bd      	mov	sp, r7
 8038e36:	bd80      	pop	{r7, pc}

08038e38 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8038e38:	b580      	push	{r7, lr}
 8038e3a:	b086      	sub	sp, #24
 8038e3c:	af00      	add	r7, sp, #0
 8038e3e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8038e40:	687b      	ldr	r3, [r7, #4]
 8038e42:	f107 0208 	add.w	r2, r7, #8
 8038e46:	4611      	mov	r1, r2
 8038e48:	4618      	mov	r0, r3
 8038e4a:	f7ff fb07 	bl	803845c <validate>
 8038e4e:	4603      	mov	r3, r0
 8038e50:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8038e52:	7dfb      	ldrb	r3, [r7, #23]
 8038e54:	2b00      	cmp	r3, #0
 8038e56:	d168      	bne.n	8038f2a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8038e58:	687b      	ldr	r3, [r7, #4]
 8038e5a:	7d1b      	ldrb	r3, [r3, #20]
 8038e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8038e60:	2b00      	cmp	r3, #0
 8038e62:	d062      	beq.n	8038f2a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8038e64:	687b      	ldr	r3, [r7, #4]
 8038e66:	7d1b      	ldrb	r3, [r3, #20]
 8038e68:	b25b      	sxtb	r3, r3
 8038e6a:	2b00      	cmp	r3, #0
 8038e6c:	da15      	bge.n	8038e9a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8038e6e:	68bb      	ldr	r3, [r7, #8]
 8038e70:	7858      	ldrb	r0, [r3, #1]
 8038e72:	687b      	ldr	r3, [r7, #4]
 8038e74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8038e78:	687b      	ldr	r3, [r7, #4]
 8038e7a:	6a1a      	ldr	r2, [r3, #32]
 8038e7c:	2301      	movs	r3, #1
 8038e7e:	f7fd fe45 	bl	8036b0c <disk_write>
 8038e82:	4603      	mov	r3, r0
 8038e84:	2b00      	cmp	r3, #0
 8038e86:	d001      	beq.n	8038e8c <f_sync+0x54>
 8038e88:	2301      	movs	r3, #1
 8038e8a:	e04f      	b.n	8038f2c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8038e8c:	687b      	ldr	r3, [r7, #4]
 8038e8e:	7d1b      	ldrb	r3, [r3, #20]
 8038e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8038e94:	b2da      	uxtb	r2, r3
 8038e96:	687b      	ldr	r3, [r7, #4]
 8038e98:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8038e9a:	f7fd fc6b 	bl	8036774 <get_fattime>
 8038e9e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8038ea0:	68ba      	ldr	r2, [r7, #8]
 8038ea2:	687b      	ldr	r3, [r7, #4]
 8038ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8038ea6:	4619      	mov	r1, r3
 8038ea8:	4610      	mov	r0, r2
 8038eaa:	f7fe f91d 	bl	80370e8 <move_window>
 8038eae:	4603      	mov	r3, r0
 8038eb0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8038eb2:	7dfb      	ldrb	r3, [r7, #23]
 8038eb4:	2b00      	cmp	r3, #0
 8038eb6:	d138      	bne.n	8038f2a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8038eb8:	687b      	ldr	r3, [r7, #4]
 8038eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8038ebc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8038ebe:	68fb      	ldr	r3, [r7, #12]
 8038ec0:	330b      	adds	r3, #11
 8038ec2:	781a      	ldrb	r2, [r3, #0]
 8038ec4:	68fb      	ldr	r3, [r7, #12]
 8038ec6:	330b      	adds	r3, #11
 8038ec8:	f042 0220 	orr.w	r2, r2, #32
 8038ecc:	b2d2      	uxtb	r2, r2
 8038ece:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8038ed0:	687b      	ldr	r3, [r7, #4]
 8038ed2:	6818      	ldr	r0, [r3, #0]
 8038ed4:	687b      	ldr	r3, [r7, #4]
 8038ed6:	689b      	ldr	r3, [r3, #8]
 8038ed8:	461a      	mov	r2, r3
 8038eda:	68f9      	ldr	r1, [r7, #12]
 8038edc:	f7fe fe2a 	bl	8037b34 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8038ee0:	68fb      	ldr	r3, [r7, #12]
 8038ee2:	f103 021c 	add.w	r2, r3, #28
 8038ee6:	687b      	ldr	r3, [r7, #4]
 8038ee8:	68db      	ldr	r3, [r3, #12]
 8038eea:	4619      	mov	r1, r3
 8038eec:	4610      	mov	r0, r2
 8038eee:	f7fd fea1 	bl	8036c34 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8038ef2:	68fb      	ldr	r3, [r7, #12]
 8038ef4:	3316      	adds	r3, #22
 8038ef6:	6939      	ldr	r1, [r7, #16]
 8038ef8:	4618      	mov	r0, r3
 8038efa:	f7fd fe9b 	bl	8036c34 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8038efe:	68fb      	ldr	r3, [r7, #12]
 8038f00:	3312      	adds	r3, #18
 8038f02:	2100      	movs	r1, #0
 8038f04:	4618      	mov	r0, r3
 8038f06:	f7fd fe7a 	bl	8036bfe <st_word>
					fs->wflag = 1;
 8038f0a:	68bb      	ldr	r3, [r7, #8]
 8038f0c:	2201      	movs	r2, #1
 8038f0e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8038f10:	68bb      	ldr	r3, [r7, #8]
 8038f12:	4618      	mov	r0, r3
 8038f14:	f7fe f916 	bl	8037144 <sync_fs>
 8038f18:	4603      	mov	r3, r0
 8038f1a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8038f1c:	687b      	ldr	r3, [r7, #4]
 8038f1e:	7d1b      	ldrb	r3, [r3, #20]
 8038f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8038f24:	b2da      	uxtb	r2, r3
 8038f26:	687b      	ldr	r3, [r7, #4]
 8038f28:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8038f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8038f2c:	4618      	mov	r0, r3
 8038f2e:	3718      	adds	r7, #24
 8038f30:	46bd      	mov	sp, r7
 8038f32:	bd80      	pop	{r7, pc}

08038f34 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8038f34:	b580      	push	{r7, lr}
 8038f36:	b084      	sub	sp, #16
 8038f38:	af00      	add	r7, sp, #0
 8038f3a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8038f3c:	6878      	ldr	r0, [r7, #4]
 8038f3e:	f7ff ff7b 	bl	8038e38 <f_sync>
 8038f42:	4603      	mov	r3, r0
 8038f44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8038f46:	7bfb      	ldrb	r3, [r7, #15]
 8038f48:	2b00      	cmp	r3, #0
 8038f4a:	d118      	bne.n	8038f7e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8038f4c:	687b      	ldr	r3, [r7, #4]
 8038f4e:	f107 0208 	add.w	r2, r7, #8
 8038f52:	4611      	mov	r1, r2
 8038f54:	4618      	mov	r0, r3
 8038f56:	f7ff fa81 	bl	803845c <validate>
 8038f5a:	4603      	mov	r3, r0
 8038f5c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8038f5e:	7bfb      	ldrb	r3, [r7, #15]
 8038f60:	2b00      	cmp	r3, #0
 8038f62:	d10c      	bne.n	8038f7e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8038f64:	687b      	ldr	r3, [r7, #4]
 8038f66:	691b      	ldr	r3, [r3, #16]
 8038f68:	4618      	mov	r0, r3
 8038f6a:	f7fe f819 	bl	8036fa0 <dec_lock>
 8038f6e:	4603      	mov	r3, r0
 8038f70:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8038f72:	7bfb      	ldrb	r3, [r7, #15]
 8038f74:	2b00      	cmp	r3, #0
 8038f76:	d102      	bne.n	8038f7e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8038f78:	687b      	ldr	r3, [r7, #4]
 8038f7a:	2200      	movs	r2, #0
 8038f7c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8038f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8038f80:	4618      	mov	r0, r3
 8038f82:	3710      	adds	r7, #16
 8038f84:	46bd      	mov	sp, r7
 8038f86:	bd80      	pop	{r7, pc}

08038f88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8038f88:	b480      	push	{r7}
 8038f8a:	b087      	sub	sp, #28
 8038f8c:	af00      	add	r7, sp, #0
 8038f8e:	60f8      	str	r0, [r7, #12]
 8038f90:	60b9      	str	r1, [r7, #8]
 8038f92:	4613      	mov	r3, r2
 8038f94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8038f96:	2301      	movs	r3, #1
 8038f98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8038f9a:	2300      	movs	r3, #0
 8038f9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8038f9e:	4b1f      	ldr	r3, [pc, #124]	; (803901c <FATFS_LinkDriverEx+0x94>)
 8038fa0:	7a5b      	ldrb	r3, [r3, #9]
 8038fa2:	b2db      	uxtb	r3, r3
 8038fa4:	2b00      	cmp	r3, #0
 8038fa6:	d131      	bne.n	803900c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8038fa8:	4b1c      	ldr	r3, [pc, #112]	; (803901c <FATFS_LinkDriverEx+0x94>)
 8038faa:	7a5b      	ldrb	r3, [r3, #9]
 8038fac:	b2db      	uxtb	r3, r3
 8038fae:	461a      	mov	r2, r3
 8038fb0:	4b1a      	ldr	r3, [pc, #104]	; (803901c <FATFS_LinkDriverEx+0x94>)
 8038fb2:	2100      	movs	r1, #0
 8038fb4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8038fb6:	4b19      	ldr	r3, [pc, #100]	; (803901c <FATFS_LinkDriverEx+0x94>)
 8038fb8:	7a5b      	ldrb	r3, [r3, #9]
 8038fba:	b2db      	uxtb	r3, r3
 8038fbc:	4a17      	ldr	r2, [pc, #92]	; (803901c <FATFS_LinkDriverEx+0x94>)
 8038fbe:	009b      	lsls	r3, r3, #2
 8038fc0:	4413      	add	r3, r2
 8038fc2:	68fa      	ldr	r2, [r7, #12]
 8038fc4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8038fc6:	4b15      	ldr	r3, [pc, #84]	; (803901c <FATFS_LinkDriverEx+0x94>)
 8038fc8:	7a5b      	ldrb	r3, [r3, #9]
 8038fca:	b2db      	uxtb	r3, r3
 8038fcc:	461a      	mov	r2, r3
 8038fce:	4b13      	ldr	r3, [pc, #76]	; (803901c <FATFS_LinkDriverEx+0x94>)
 8038fd0:	4413      	add	r3, r2
 8038fd2:	79fa      	ldrb	r2, [r7, #7]
 8038fd4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8038fd6:	4b11      	ldr	r3, [pc, #68]	; (803901c <FATFS_LinkDriverEx+0x94>)
 8038fd8:	7a5b      	ldrb	r3, [r3, #9]
 8038fda:	b2db      	uxtb	r3, r3
 8038fdc:	1c5a      	adds	r2, r3, #1
 8038fde:	b2d1      	uxtb	r1, r2
 8038fe0:	4a0e      	ldr	r2, [pc, #56]	; (803901c <FATFS_LinkDriverEx+0x94>)
 8038fe2:	7251      	strb	r1, [r2, #9]
 8038fe4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8038fe6:	7dbb      	ldrb	r3, [r7, #22]
 8038fe8:	3330      	adds	r3, #48	; 0x30
 8038fea:	b2da      	uxtb	r2, r3
 8038fec:	68bb      	ldr	r3, [r7, #8]
 8038fee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8038ff0:	68bb      	ldr	r3, [r7, #8]
 8038ff2:	3301      	adds	r3, #1
 8038ff4:	223a      	movs	r2, #58	; 0x3a
 8038ff6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8038ff8:	68bb      	ldr	r3, [r7, #8]
 8038ffa:	3302      	adds	r3, #2
 8038ffc:	222f      	movs	r2, #47	; 0x2f
 8038ffe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8039000:	68bb      	ldr	r3, [r7, #8]
 8039002:	3303      	adds	r3, #3
 8039004:	2200      	movs	r2, #0
 8039006:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8039008:	2300      	movs	r3, #0
 803900a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 803900c:	7dfb      	ldrb	r3, [r7, #23]
}
 803900e:	4618      	mov	r0, r3
 8039010:	371c      	adds	r7, #28
 8039012:	46bd      	mov	sp, r7
 8039014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8039018:	4770      	bx	lr
 803901a:	bf00      	nop
 803901c:	20000320 	.word	0x20000320

08039020 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8039020:	b580      	push	{r7, lr}
 8039022:	b082      	sub	sp, #8
 8039024:	af00      	add	r7, sp, #0
 8039026:	6078      	str	r0, [r7, #4]
 8039028:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 803902a:	2200      	movs	r2, #0
 803902c:	6839      	ldr	r1, [r7, #0]
 803902e:	6878      	ldr	r0, [r7, #4]
 8039030:	f7ff ffaa 	bl	8038f88 <FATFS_LinkDriverEx>
 8039034:	4603      	mov	r3, r0
}
 8039036:	4618      	mov	r0, r3
 8039038:	3708      	adds	r7, #8
 803903a:	46bd      	mov	sp, r7
 803903c:	bd80      	pop	{r7, pc}
	...

08039040 <__errno>:
 8039040:	4b01      	ldr	r3, [pc, #4]	; (8039048 <__errno+0x8>)
 8039042:	6818      	ldr	r0, [r3, #0]
 8039044:	4770      	bx	lr
 8039046:	bf00      	nop
 8039048:	2000002c 	.word	0x2000002c

0803904c <__sflush_r>:
 803904c:	898a      	ldrh	r2, [r1, #12]
 803904e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8039052:	4605      	mov	r5, r0
 8039054:	0710      	lsls	r0, r2, #28
 8039056:	460c      	mov	r4, r1
 8039058:	d458      	bmi.n	803910c <__sflush_r+0xc0>
 803905a:	684b      	ldr	r3, [r1, #4]
 803905c:	2b00      	cmp	r3, #0
 803905e:	dc05      	bgt.n	803906c <__sflush_r+0x20>
 8039060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8039062:	2b00      	cmp	r3, #0
 8039064:	dc02      	bgt.n	803906c <__sflush_r+0x20>
 8039066:	2000      	movs	r0, #0
 8039068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803906c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 803906e:	2e00      	cmp	r6, #0
 8039070:	d0f9      	beq.n	8039066 <__sflush_r+0x1a>
 8039072:	2300      	movs	r3, #0
 8039074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8039078:	682f      	ldr	r7, [r5, #0]
 803907a:	602b      	str	r3, [r5, #0]
 803907c:	d032      	beq.n	80390e4 <__sflush_r+0x98>
 803907e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8039080:	89a3      	ldrh	r3, [r4, #12]
 8039082:	075a      	lsls	r2, r3, #29
 8039084:	d505      	bpl.n	8039092 <__sflush_r+0x46>
 8039086:	6863      	ldr	r3, [r4, #4]
 8039088:	1ac0      	subs	r0, r0, r3
 803908a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803908c:	b10b      	cbz	r3, 8039092 <__sflush_r+0x46>
 803908e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8039090:	1ac0      	subs	r0, r0, r3
 8039092:	2300      	movs	r3, #0
 8039094:	4602      	mov	r2, r0
 8039096:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8039098:	6a21      	ldr	r1, [r4, #32]
 803909a:	4628      	mov	r0, r5
 803909c:	47b0      	blx	r6
 803909e:	1c43      	adds	r3, r0, #1
 80390a0:	89a3      	ldrh	r3, [r4, #12]
 80390a2:	d106      	bne.n	80390b2 <__sflush_r+0x66>
 80390a4:	6829      	ldr	r1, [r5, #0]
 80390a6:	291d      	cmp	r1, #29
 80390a8:	d82c      	bhi.n	8039104 <__sflush_r+0xb8>
 80390aa:	4a2a      	ldr	r2, [pc, #168]	; (8039154 <__sflush_r+0x108>)
 80390ac:	40ca      	lsrs	r2, r1
 80390ae:	07d6      	lsls	r6, r2, #31
 80390b0:	d528      	bpl.n	8039104 <__sflush_r+0xb8>
 80390b2:	2200      	movs	r2, #0
 80390b4:	6062      	str	r2, [r4, #4]
 80390b6:	04d9      	lsls	r1, r3, #19
 80390b8:	6922      	ldr	r2, [r4, #16]
 80390ba:	6022      	str	r2, [r4, #0]
 80390bc:	d504      	bpl.n	80390c8 <__sflush_r+0x7c>
 80390be:	1c42      	adds	r2, r0, #1
 80390c0:	d101      	bne.n	80390c6 <__sflush_r+0x7a>
 80390c2:	682b      	ldr	r3, [r5, #0]
 80390c4:	b903      	cbnz	r3, 80390c8 <__sflush_r+0x7c>
 80390c6:	6560      	str	r0, [r4, #84]	; 0x54
 80390c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80390ca:	602f      	str	r7, [r5, #0]
 80390cc:	2900      	cmp	r1, #0
 80390ce:	d0ca      	beq.n	8039066 <__sflush_r+0x1a>
 80390d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80390d4:	4299      	cmp	r1, r3
 80390d6:	d002      	beq.n	80390de <__sflush_r+0x92>
 80390d8:	4628      	mov	r0, r5
 80390da:	f000 fa11 	bl	8039500 <_free_r>
 80390de:	2000      	movs	r0, #0
 80390e0:	6360      	str	r0, [r4, #52]	; 0x34
 80390e2:	e7c1      	b.n	8039068 <__sflush_r+0x1c>
 80390e4:	6a21      	ldr	r1, [r4, #32]
 80390e6:	2301      	movs	r3, #1
 80390e8:	4628      	mov	r0, r5
 80390ea:	47b0      	blx	r6
 80390ec:	1c41      	adds	r1, r0, #1
 80390ee:	d1c7      	bne.n	8039080 <__sflush_r+0x34>
 80390f0:	682b      	ldr	r3, [r5, #0]
 80390f2:	2b00      	cmp	r3, #0
 80390f4:	d0c4      	beq.n	8039080 <__sflush_r+0x34>
 80390f6:	2b1d      	cmp	r3, #29
 80390f8:	d001      	beq.n	80390fe <__sflush_r+0xb2>
 80390fa:	2b16      	cmp	r3, #22
 80390fc:	d101      	bne.n	8039102 <__sflush_r+0xb6>
 80390fe:	602f      	str	r7, [r5, #0]
 8039100:	e7b1      	b.n	8039066 <__sflush_r+0x1a>
 8039102:	89a3      	ldrh	r3, [r4, #12]
 8039104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8039108:	81a3      	strh	r3, [r4, #12]
 803910a:	e7ad      	b.n	8039068 <__sflush_r+0x1c>
 803910c:	690f      	ldr	r7, [r1, #16]
 803910e:	2f00      	cmp	r7, #0
 8039110:	d0a9      	beq.n	8039066 <__sflush_r+0x1a>
 8039112:	0793      	lsls	r3, r2, #30
 8039114:	680e      	ldr	r6, [r1, #0]
 8039116:	bf08      	it	eq
 8039118:	694b      	ldreq	r3, [r1, #20]
 803911a:	600f      	str	r7, [r1, #0]
 803911c:	bf18      	it	ne
 803911e:	2300      	movne	r3, #0
 8039120:	eba6 0807 	sub.w	r8, r6, r7
 8039124:	608b      	str	r3, [r1, #8]
 8039126:	f1b8 0f00 	cmp.w	r8, #0
 803912a:	dd9c      	ble.n	8039066 <__sflush_r+0x1a>
 803912c:	6a21      	ldr	r1, [r4, #32]
 803912e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8039130:	4643      	mov	r3, r8
 8039132:	463a      	mov	r2, r7
 8039134:	4628      	mov	r0, r5
 8039136:	47b0      	blx	r6
 8039138:	2800      	cmp	r0, #0
 803913a:	dc06      	bgt.n	803914a <__sflush_r+0xfe>
 803913c:	89a3      	ldrh	r3, [r4, #12]
 803913e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8039142:	81a3      	strh	r3, [r4, #12]
 8039144:	f04f 30ff 	mov.w	r0, #4294967295
 8039148:	e78e      	b.n	8039068 <__sflush_r+0x1c>
 803914a:	4407      	add	r7, r0
 803914c:	eba8 0800 	sub.w	r8, r8, r0
 8039150:	e7e9      	b.n	8039126 <__sflush_r+0xda>
 8039152:	bf00      	nop
 8039154:	20400001 	.word	0x20400001

08039158 <_fflush_r>:
 8039158:	b538      	push	{r3, r4, r5, lr}
 803915a:	690b      	ldr	r3, [r1, #16]
 803915c:	4605      	mov	r5, r0
 803915e:	460c      	mov	r4, r1
 8039160:	b913      	cbnz	r3, 8039168 <_fflush_r+0x10>
 8039162:	2500      	movs	r5, #0
 8039164:	4628      	mov	r0, r5
 8039166:	bd38      	pop	{r3, r4, r5, pc}
 8039168:	b118      	cbz	r0, 8039172 <_fflush_r+0x1a>
 803916a:	6983      	ldr	r3, [r0, #24]
 803916c:	b90b      	cbnz	r3, 8039172 <_fflush_r+0x1a>
 803916e:	f000 f887 	bl	8039280 <__sinit>
 8039172:	4b14      	ldr	r3, [pc, #80]	; (80391c4 <_fflush_r+0x6c>)
 8039174:	429c      	cmp	r4, r3
 8039176:	d11b      	bne.n	80391b0 <_fflush_r+0x58>
 8039178:	686c      	ldr	r4, [r5, #4]
 803917a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 803917e:	2b00      	cmp	r3, #0
 8039180:	d0ef      	beq.n	8039162 <_fflush_r+0xa>
 8039182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8039184:	07d0      	lsls	r0, r2, #31
 8039186:	d404      	bmi.n	8039192 <_fflush_r+0x3a>
 8039188:	0599      	lsls	r1, r3, #22
 803918a:	d402      	bmi.n	8039192 <_fflush_r+0x3a>
 803918c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 803918e:	f000 f93a 	bl	8039406 <__retarget_lock_acquire_recursive>
 8039192:	4628      	mov	r0, r5
 8039194:	4621      	mov	r1, r4
 8039196:	f7ff ff59 	bl	803904c <__sflush_r>
 803919a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 803919c:	07da      	lsls	r2, r3, #31
 803919e:	4605      	mov	r5, r0
 80391a0:	d4e0      	bmi.n	8039164 <_fflush_r+0xc>
 80391a2:	89a3      	ldrh	r3, [r4, #12]
 80391a4:	059b      	lsls	r3, r3, #22
 80391a6:	d4dd      	bmi.n	8039164 <_fflush_r+0xc>
 80391a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80391aa:	f000 f92d 	bl	8039408 <__retarget_lock_release_recursive>
 80391ae:	e7d9      	b.n	8039164 <_fflush_r+0xc>
 80391b0:	4b05      	ldr	r3, [pc, #20]	; (80391c8 <_fflush_r+0x70>)
 80391b2:	429c      	cmp	r4, r3
 80391b4:	d101      	bne.n	80391ba <_fflush_r+0x62>
 80391b6:	68ac      	ldr	r4, [r5, #8]
 80391b8:	e7df      	b.n	803917a <_fflush_r+0x22>
 80391ba:	4b04      	ldr	r3, [pc, #16]	; (80391cc <_fflush_r+0x74>)
 80391bc:	429c      	cmp	r4, r3
 80391be:	bf08      	it	eq
 80391c0:	68ec      	ldreq	r4, [r5, #12]
 80391c2:	e7da      	b.n	803917a <_fflush_r+0x22>
 80391c4:	0803e8bc 	.word	0x0803e8bc
 80391c8:	0803e8dc 	.word	0x0803e8dc
 80391cc:	0803e89c 	.word	0x0803e89c

080391d0 <std>:
 80391d0:	2300      	movs	r3, #0
 80391d2:	b510      	push	{r4, lr}
 80391d4:	4604      	mov	r4, r0
 80391d6:	e9c0 3300 	strd	r3, r3, [r0]
 80391da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80391de:	6083      	str	r3, [r0, #8]
 80391e0:	8181      	strh	r1, [r0, #12]
 80391e2:	6643      	str	r3, [r0, #100]	; 0x64
 80391e4:	81c2      	strh	r2, [r0, #14]
 80391e6:	6183      	str	r3, [r0, #24]
 80391e8:	4619      	mov	r1, r3
 80391ea:	2208      	movs	r2, #8
 80391ec:	305c      	adds	r0, #92	; 0x5c
 80391ee:	f000 f97f 	bl	80394f0 <memset>
 80391f2:	4b05      	ldr	r3, [pc, #20]	; (8039208 <std+0x38>)
 80391f4:	6263      	str	r3, [r4, #36]	; 0x24
 80391f6:	4b05      	ldr	r3, [pc, #20]	; (803920c <std+0x3c>)
 80391f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80391fa:	4b05      	ldr	r3, [pc, #20]	; (8039210 <std+0x40>)
 80391fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80391fe:	4b05      	ldr	r3, [pc, #20]	; (8039214 <std+0x44>)
 8039200:	6224      	str	r4, [r4, #32]
 8039202:	6323      	str	r3, [r4, #48]	; 0x30
 8039204:	bd10      	pop	{r4, pc}
 8039206:	bf00      	nop
 8039208:	0803a3b5 	.word	0x0803a3b5
 803920c:	0803a3d7 	.word	0x0803a3d7
 8039210:	0803a40f 	.word	0x0803a40f
 8039214:	0803a433 	.word	0x0803a433

08039218 <_cleanup_r>:
 8039218:	4901      	ldr	r1, [pc, #4]	; (8039220 <_cleanup_r+0x8>)
 803921a:	f000 b8af 	b.w	803937c <_fwalk_reent>
 803921e:	bf00      	nop
 8039220:	08039159 	.word	0x08039159

08039224 <__sfmoreglue>:
 8039224:	b570      	push	{r4, r5, r6, lr}
 8039226:	1e4a      	subs	r2, r1, #1
 8039228:	2568      	movs	r5, #104	; 0x68
 803922a:	4355      	muls	r5, r2
 803922c:	460e      	mov	r6, r1
 803922e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8039232:	f000 f9b5 	bl	80395a0 <_malloc_r>
 8039236:	4604      	mov	r4, r0
 8039238:	b140      	cbz	r0, 803924c <__sfmoreglue+0x28>
 803923a:	2100      	movs	r1, #0
 803923c:	e9c0 1600 	strd	r1, r6, [r0]
 8039240:	300c      	adds	r0, #12
 8039242:	60a0      	str	r0, [r4, #8]
 8039244:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8039248:	f000 f952 	bl	80394f0 <memset>
 803924c:	4620      	mov	r0, r4
 803924e:	bd70      	pop	{r4, r5, r6, pc}

08039250 <__sfp_lock_acquire>:
 8039250:	4801      	ldr	r0, [pc, #4]	; (8039258 <__sfp_lock_acquire+0x8>)
 8039252:	f000 b8d8 	b.w	8039406 <__retarget_lock_acquire_recursive>
 8039256:	bf00      	nop
 8039258:	200009c0 	.word	0x200009c0

0803925c <__sfp_lock_release>:
 803925c:	4801      	ldr	r0, [pc, #4]	; (8039264 <__sfp_lock_release+0x8>)
 803925e:	f000 b8d3 	b.w	8039408 <__retarget_lock_release_recursive>
 8039262:	bf00      	nop
 8039264:	200009c0 	.word	0x200009c0

08039268 <__sinit_lock_acquire>:
 8039268:	4801      	ldr	r0, [pc, #4]	; (8039270 <__sinit_lock_acquire+0x8>)
 803926a:	f000 b8cc 	b.w	8039406 <__retarget_lock_acquire_recursive>
 803926e:	bf00      	nop
 8039270:	200009bb 	.word	0x200009bb

08039274 <__sinit_lock_release>:
 8039274:	4801      	ldr	r0, [pc, #4]	; (803927c <__sinit_lock_release+0x8>)
 8039276:	f000 b8c7 	b.w	8039408 <__retarget_lock_release_recursive>
 803927a:	bf00      	nop
 803927c:	200009bb 	.word	0x200009bb

08039280 <__sinit>:
 8039280:	b510      	push	{r4, lr}
 8039282:	4604      	mov	r4, r0
 8039284:	f7ff fff0 	bl	8039268 <__sinit_lock_acquire>
 8039288:	69a3      	ldr	r3, [r4, #24]
 803928a:	b11b      	cbz	r3, 8039294 <__sinit+0x14>
 803928c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8039290:	f7ff bff0 	b.w	8039274 <__sinit_lock_release>
 8039294:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8039298:	6523      	str	r3, [r4, #80]	; 0x50
 803929a:	4b13      	ldr	r3, [pc, #76]	; (80392e8 <__sinit+0x68>)
 803929c:	4a13      	ldr	r2, [pc, #76]	; (80392ec <__sinit+0x6c>)
 803929e:	681b      	ldr	r3, [r3, #0]
 80392a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80392a2:	42a3      	cmp	r3, r4
 80392a4:	bf04      	itt	eq
 80392a6:	2301      	moveq	r3, #1
 80392a8:	61a3      	streq	r3, [r4, #24]
 80392aa:	4620      	mov	r0, r4
 80392ac:	f000 f820 	bl	80392f0 <__sfp>
 80392b0:	6060      	str	r0, [r4, #4]
 80392b2:	4620      	mov	r0, r4
 80392b4:	f000 f81c 	bl	80392f0 <__sfp>
 80392b8:	60a0      	str	r0, [r4, #8]
 80392ba:	4620      	mov	r0, r4
 80392bc:	f000 f818 	bl	80392f0 <__sfp>
 80392c0:	2200      	movs	r2, #0
 80392c2:	60e0      	str	r0, [r4, #12]
 80392c4:	2104      	movs	r1, #4
 80392c6:	6860      	ldr	r0, [r4, #4]
 80392c8:	f7ff ff82 	bl	80391d0 <std>
 80392cc:	68a0      	ldr	r0, [r4, #8]
 80392ce:	2201      	movs	r2, #1
 80392d0:	2109      	movs	r1, #9
 80392d2:	f7ff ff7d 	bl	80391d0 <std>
 80392d6:	68e0      	ldr	r0, [r4, #12]
 80392d8:	2202      	movs	r2, #2
 80392da:	2112      	movs	r1, #18
 80392dc:	f7ff ff78 	bl	80391d0 <std>
 80392e0:	2301      	movs	r3, #1
 80392e2:	61a3      	str	r3, [r4, #24]
 80392e4:	e7d2      	b.n	803928c <__sinit+0xc>
 80392e6:	bf00      	nop
 80392e8:	0803e8fc 	.word	0x0803e8fc
 80392ec:	08039219 	.word	0x08039219

080392f0 <__sfp>:
 80392f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80392f2:	4607      	mov	r7, r0
 80392f4:	f7ff ffac 	bl	8039250 <__sfp_lock_acquire>
 80392f8:	4b1e      	ldr	r3, [pc, #120]	; (8039374 <__sfp+0x84>)
 80392fa:	681e      	ldr	r6, [r3, #0]
 80392fc:	69b3      	ldr	r3, [r6, #24]
 80392fe:	b913      	cbnz	r3, 8039306 <__sfp+0x16>
 8039300:	4630      	mov	r0, r6
 8039302:	f7ff ffbd 	bl	8039280 <__sinit>
 8039306:	3648      	adds	r6, #72	; 0x48
 8039308:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 803930c:	3b01      	subs	r3, #1
 803930e:	d503      	bpl.n	8039318 <__sfp+0x28>
 8039310:	6833      	ldr	r3, [r6, #0]
 8039312:	b30b      	cbz	r3, 8039358 <__sfp+0x68>
 8039314:	6836      	ldr	r6, [r6, #0]
 8039316:	e7f7      	b.n	8039308 <__sfp+0x18>
 8039318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 803931c:	b9d5      	cbnz	r5, 8039354 <__sfp+0x64>
 803931e:	4b16      	ldr	r3, [pc, #88]	; (8039378 <__sfp+0x88>)
 8039320:	60e3      	str	r3, [r4, #12]
 8039322:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8039326:	6665      	str	r5, [r4, #100]	; 0x64
 8039328:	f000 f86c 	bl	8039404 <__retarget_lock_init_recursive>
 803932c:	f7ff ff96 	bl	803925c <__sfp_lock_release>
 8039330:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8039334:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8039338:	6025      	str	r5, [r4, #0]
 803933a:	61a5      	str	r5, [r4, #24]
 803933c:	2208      	movs	r2, #8
 803933e:	4629      	mov	r1, r5
 8039340:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8039344:	f000 f8d4 	bl	80394f0 <memset>
 8039348:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 803934c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8039350:	4620      	mov	r0, r4
 8039352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8039354:	3468      	adds	r4, #104	; 0x68
 8039356:	e7d9      	b.n	803930c <__sfp+0x1c>
 8039358:	2104      	movs	r1, #4
 803935a:	4638      	mov	r0, r7
 803935c:	f7ff ff62 	bl	8039224 <__sfmoreglue>
 8039360:	4604      	mov	r4, r0
 8039362:	6030      	str	r0, [r6, #0]
 8039364:	2800      	cmp	r0, #0
 8039366:	d1d5      	bne.n	8039314 <__sfp+0x24>
 8039368:	f7ff ff78 	bl	803925c <__sfp_lock_release>
 803936c:	230c      	movs	r3, #12
 803936e:	603b      	str	r3, [r7, #0]
 8039370:	e7ee      	b.n	8039350 <__sfp+0x60>
 8039372:	bf00      	nop
 8039374:	0803e8fc 	.word	0x0803e8fc
 8039378:	ffff0001 	.word	0xffff0001

0803937c <_fwalk_reent>:
 803937c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8039380:	4606      	mov	r6, r0
 8039382:	4688      	mov	r8, r1
 8039384:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8039388:	2700      	movs	r7, #0
 803938a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 803938e:	f1b9 0901 	subs.w	r9, r9, #1
 8039392:	d505      	bpl.n	80393a0 <_fwalk_reent+0x24>
 8039394:	6824      	ldr	r4, [r4, #0]
 8039396:	2c00      	cmp	r4, #0
 8039398:	d1f7      	bne.n	803938a <_fwalk_reent+0xe>
 803939a:	4638      	mov	r0, r7
 803939c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80393a0:	89ab      	ldrh	r3, [r5, #12]
 80393a2:	2b01      	cmp	r3, #1
 80393a4:	d907      	bls.n	80393b6 <_fwalk_reent+0x3a>
 80393a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80393aa:	3301      	adds	r3, #1
 80393ac:	d003      	beq.n	80393b6 <_fwalk_reent+0x3a>
 80393ae:	4629      	mov	r1, r5
 80393b0:	4630      	mov	r0, r6
 80393b2:	47c0      	blx	r8
 80393b4:	4307      	orrs	r7, r0
 80393b6:	3568      	adds	r5, #104	; 0x68
 80393b8:	e7e9      	b.n	803938e <_fwalk_reent+0x12>
	...

080393bc <__libc_init_array>:
 80393bc:	b570      	push	{r4, r5, r6, lr}
 80393be:	4d0d      	ldr	r5, [pc, #52]	; (80393f4 <__libc_init_array+0x38>)
 80393c0:	4c0d      	ldr	r4, [pc, #52]	; (80393f8 <__libc_init_array+0x3c>)
 80393c2:	1b64      	subs	r4, r4, r5
 80393c4:	10a4      	asrs	r4, r4, #2
 80393c6:	2600      	movs	r6, #0
 80393c8:	42a6      	cmp	r6, r4
 80393ca:	d109      	bne.n	80393e0 <__libc_init_array+0x24>
 80393cc:	4d0b      	ldr	r5, [pc, #44]	; (80393fc <__libc_init_array+0x40>)
 80393ce:	4c0c      	ldr	r4, [pc, #48]	; (8039400 <__libc_init_array+0x44>)
 80393d0:	f004 fa8e 	bl	803d8f0 <_init>
 80393d4:	1b64      	subs	r4, r4, r5
 80393d6:	10a4      	asrs	r4, r4, #2
 80393d8:	2600      	movs	r6, #0
 80393da:	42a6      	cmp	r6, r4
 80393dc:	d105      	bne.n	80393ea <__libc_init_array+0x2e>
 80393de:	bd70      	pop	{r4, r5, r6, pc}
 80393e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80393e4:	4798      	blx	r3
 80393e6:	3601      	adds	r6, #1
 80393e8:	e7ee      	b.n	80393c8 <__libc_init_array+0xc>
 80393ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80393ee:	4798      	blx	r3
 80393f0:	3601      	adds	r6, #1
 80393f2:	e7f2      	b.n	80393da <__libc_init_array+0x1e>
 80393f4:	0803ed5c 	.word	0x0803ed5c
 80393f8:	0803ed5c 	.word	0x0803ed5c
 80393fc:	0803ed5c 	.word	0x0803ed5c
 8039400:	0803ed60 	.word	0x0803ed60

08039404 <__retarget_lock_init_recursive>:
 8039404:	4770      	bx	lr

08039406 <__retarget_lock_acquire_recursive>:
 8039406:	4770      	bx	lr

08039408 <__retarget_lock_release_recursive>:
 8039408:	4770      	bx	lr

0803940a <__swhatbuf_r>:
 803940a:	b570      	push	{r4, r5, r6, lr}
 803940c:	460e      	mov	r6, r1
 803940e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8039412:	2900      	cmp	r1, #0
 8039414:	b096      	sub	sp, #88	; 0x58
 8039416:	4614      	mov	r4, r2
 8039418:	461d      	mov	r5, r3
 803941a:	da07      	bge.n	803942c <__swhatbuf_r+0x22>
 803941c:	2300      	movs	r3, #0
 803941e:	602b      	str	r3, [r5, #0]
 8039420:	89b3      	ldrh	r3, [r6, #12]
 8039422:	061a      	lsls	r2, r3, #24
 8039424:	d410      	bmi.n	8039448 <__swhatbuf_r+0x3e>
 8039426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 803942a:	e00e      	b.n	803944a <__swhatbuf_r+0x40>
 803942c:	466a      	mov	r2, sp
 803942e:	f002 fd63 	bl	803bef8 <_fstat_r>
 8039432:	2800      	cmp	r0, #0
 8039434:	dbf2      	blt.n	803941c <__swhatbuf_r+0x12>
 8039436:	9a01      	ldr	r2, [sp, #4]
 8039438:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 803943c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8039440:	425a      	negs	r2, r3
 8039442:	415a      	adcs	r2, r3
 8039444:	602a      	str	r2, [r5, #0]
 8039446:	e7ee      	b.n	8039426 <__swhatbuf_r+0x1c>
 8039448:	2340      	movs	r3, #64	; 0x40
 803944a:	2000      	movs	r0, #0
 803944c:	6023      	str	r3, [r4, #0]
 803944e:	b016      	add	sp, #88	; 0x58
 8039450:	bd70      	pop	{r4, r5, r6, pc}
	...

08039454 <__smakebuf_r>:
 8039454:	898b      	ldrh	r3, [r1, #12]
 8039456:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8039458:	079d      	lsls	r5, r3, #30
 803945a:	4606      	mov	r6, r0
 803945c:	460c      	mov	r4, r1
 803945e:	d507      	bpl.n	8039470 <__smakebuf_r+0x1c>
 8039460:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8039464:	6023      	str	r3, [r4, #0]
 8039466:	6123      	str	r3, [r4, #16]
 8039468:	2301      	movs	r3, #1
 803946a:	6163      	str	r3, [r4, #20]
 803946c:	b002      	add	sp, #8
 803946e:	bd70      	pop	{r4, r5, r6, pc}
 8039470:	ab01      	add	r3, sp, #4
 8039472:	466a      	mov	r2, sp
 8039474:	f7ff ffc9 	bl	803940a <__swhatbuf_r>
 8039478:	9900      	ldr	r1, [sp, #0]
 803947a:	4605      	mov	r5, r0
 803947c:	4630      	mov	r0, r6
 803947e:	f000 f88f 	bl	80395a0 <_malloc_r>
 8039482:	b948      	cbnz	r0, 8039498 <__smakebuf_r+0x44>
 8039484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8039488:	059a      	lsls	r2, r3, #22
 803948a:	d4ef      	bmi.n	803946c <__smakebuf_r+0x18>
 803948c:	f023 0303 	bic.w	r3, r3, #3
 8039490:	f043 0302 	orr.w	r3, r3, #2
 8039494:	81a3      	strh	r3, [r4, #12]
 8039496:	e7e3      	b.n	8039460 <__smakebuf_r+0xc>
 8039498:	4b0d      	ldr	r3, [pc, #52]	; (80394d0 <__smakebuf_r+0x7c>)
 803949a:	62b3      	str	r3, [r6, #40]	; 0x28
 803949c:	89a3      	ldrh	r3, [r4, #12]
 803949e:	6020      	str	r0, [r4, #0]
 80394a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80394a4:	81a3      	strh	r3, [r4, #12]
 80394a6:	9b00      	ldr	r3, [sp, #0]
 80394a8:	6163      	str	r3, [r4, #20]
 80394aa:	9b01      	ldr	r3, [sp, #4]
 80394ac:	6120      	str	r0, [r4, #16]
 80394ae:	b15b      	cbz	r3, 80394c8 <__smakebuf_r+0x74>
 80394b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80394b4:	4630      	mov	r0, r6
 80394b6:	f003 f8a1 	bl	803c5fc <_isatty_r>
 80394ba:	b128      	cbz	r0, 80394c8 <__smakebuf_r+0x74>
 80394bc:	89a3      	ldrh	r3, [r4, #12]
 80394be:	f023 0303 	bic.w	r3, r3, #3
 80394c2:	f043 0301 	orr.w	r3, r3, #1
 80394c6:	81a3      	strh	r3, [r4, #12]
 80394c8:	89a0      	ldrh	r0, [r4, #12]
 80394ca:	4305      	orrs	r5, r0
 80394cc:	81a5      	strh	r5, [r4, #12]
 80394ce:	e7cd      	b.n	803946c <__smakebuf_r+0x18>
 80394d0:	08039219 	.word	0x08039219

080394d4 <memcpy>:
 80394d4:	440a      	add	r2, r1
 80394d6:	4291      	cmp	r1, r2
 80394d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80394dc:	d100      	bne.n	80394e0 <memcpy+0xc>
 80394de:	4770      	bx	lr
 80394e0:	b510      	push	{r4, lr}
 80394e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80394e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80394ea:	4291      	cmp	r1, r2
 80394ec:	d1f9      	bne.n	80394e2 <memcpy+0xe>
 80394ee:	bd10      	pop	{r4, pc}

080394f0 <memset>:
 80394f0:	4402      	add	r2, r0
 80394f2:	4603      	mov	r3, r0
 80394f4:	4293      	cmp	r3, r2
 80394f6:	d100      	bne.n	80394fa <memset+0xa>
 80394f8:	4770      	bx	lr
 80394fa:	f803 1b01 	strb.w	r1, [r3], #1
 80394fe:	e7f9      	b.n	80394f4 <memset+0x4>

08039500 <_free_r>:
 8039500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8039502:	2900      	cmp	r1, #0
 8039504:	d048      	beq.n	8039598 <_free_r+0x98>
 8039506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803950a:	9001      	str	r0, [sp, #4]
 803950c:	2b00      	cmp	r3, #0
 803950e:	f1a1 0404 	sub.w	r4, r1, #4
 8039512:	bfb8      	it	lt
 8039514:	18e4      	addlt	r4, r4, r3
 8039516:	f003 f8b1 	bl	803c67c <__malloc_lock>
 803951a:	4a20      	ldr	r2, [pc, #128]	; (803959c <_free_r+0x9c>)
 803951c:	9801      	ldr	r0, [sp, #4]
 803951e:	6813      	ldr	r3, [r2, #0]
 8039520:	4615      	mov	r5, r2
 8039522:	b933      	cbnz	r3, 8039532 <_free_r+0x32>
 8039524:	6063      	str	r3, [r4, #4]
 8039526:	6014      	str	r4, [r2, #0]
 8039528:	b003      	add	sp, #12
 803952a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 803952e:	f003 b8ab 	b.w	803c688 <__malloc_unlock>
 8039532:	42a3      	cmp	r3, r4
 8039534:	d90b      	bls.n	803954e <_free_r+0x4e>
 8039536:	6821      	ldr	r1, [r4, #0]
 8039538:	1862      	adds	r2, r4, r1
 803953a:	4293      	cmp	r3, r2
 803953c:	bf04      	itt	eq
 803953e:	681a      	ldreq	r2, [r3, #0]
 8039540:	685b      	ldreq	r3, [r3, #4]
 8039542:	6063      	str	r3, [r4, #4]
 8039544:	bf04      	itt	eq
 8039546:	1852      	addeq	r2, r2, r1
 8039548:	6022      	streq	r2, [r4, #0]
 803954a:	602c      	str	r4, [r5, #0]
 803954c:	e7ec      	b.n	8039528 <_free_r+0x28>
 803954e:	461a      	mov	r2, r3
 8039550:	685b      	ldr	r3, [r3, #4]
 8039552:	b10b      	cbz	r3, 8039558 <_free_r+0x58>
 8039554:	42a3      	cmp	r3, r4
 8039556:	d9fa      	bls.n	803954e <_free_r+0x4e>
 8039558:	6811      	ldr	r1, [r2, #0]
 803955a:	1855      	adds	r5, r2, r1
 803955c:	42a5      	cmp	r5, r4
 803955e:	d10b      	bne.n	8039578 <_free_r+0x78>
 8039560:	6824      	ldr	r4, [r4, #0]
 8039562:	4421      	add	r1, r4
 8039564:	1854      	adds	r4, r2, r1
 8039566:	42a3      	cmp	r3, r4
 8039568:	6011      	str	r1, [r2, #0]
 803956a:	d1dd      	bne.n	8039528 <_free_r+0x28>
 803956c:	681c      	ldr	r4, [r3, #0]
 803956e:	685b      	ldr	r3, [r3, #4]
 8039570:	6053      	str	r3, [r2, #4]
 8039572:	4421      	add	r1, r4
 8039574:	6011      	str	r1, [r2, #0]
 8039576:	e7d7      	b.n	8039528 <_free_r+0x28>
 8039578:	d902      	bls.n	8039580 <_free_r+0x80>
 803957a:	230c      	movs	r3, #12
 803957c:	6003      	str	r3, [r0, #0]
 803957e:	e7d3      	b.n	8039528 <_free_r+0x28>
 8039580:	6825      	ldr	r5, [r4, #0]
 8039582:	1961      	adds	r1, r4, r5
 8039584:	428b      	cmp	r3, r1
 8039586:	bf04      	itt	eq
 8039588:	6819      	ldreq	r1, [r3, #0]
 803958a:	685b      	ldreq	r3, [r3, #4]
 803958c:	6063      	str	r3, [r4, #4]
 803958e:	bf04      	itt	eq
 8039590:	1949      	addeq	r1, r1, r5
 8039592:	6021      	streq	r1, [r4, #0]
 8039594:	6054      	str	r4, [r2, #4]
 8039596:	e7c7      	b.n	8039528 <_free_r+0x28>
 8039598:	b003      	add	sp, #12
 803959a:	bd30      	pop	{r4, r5, pc}
 803959c:	2000032c 	.word	0x2000032c

080395a0 <_malloc_r>:
 80395a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80395a2:	1ccd      	adds	r5, r1, #3
 80395a4:	f025 0503 	bic.w	r5, r5, #3
 80395a8:	3508      	adds	r5, #8
 80395aa:	2d0c      	cmp	r5, #12
 80395ac:	bf38      	it	cc
 80395ae:	250c      	movcc	r5, #12
 80395b0:	2d00      	cmp	r5, #0
 80395b2:	4606      	mov	r6, r0
 80395b4:	db01      	blt.n	80395ba <_malloc_r+0x1a>
 80395b6:	42a9      	cmp	r1, r5
 80395b8:	d903      	bls.n	80395c2 <_malloc_r+0x22>
 80395ba:	230c      	movs	r3, #12
 80395bc:	6033      	str	r3, [r6, #0]
 80395be:	2000      	movs	r0, #0
 80395c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80395c2:	f003 f85b 	bl	803c67c <__malloc_lock>
 80395c6:	4921      	ldr	r1, [pc, #132]	; (803964c <_malloc_r+0xac>)
 80395c8:	680a      	ldr	r2, [r1, #0]
 80395ca:	4614      	mov	r4, r2
 80395cc:	b99c      	cbnz	r4, 80395f6 <_malloc_r+0x56>
 80395ce:	4f20      	ldr	r7, [pc, #128]	; (8039650 <_malloc_r+0xb0>)
 80395d0:	683b      	ldr	r3, [r7, #0]
 80395d2:	b923      	cbnz	r3, 80395de <_malloc_r+0x3e>
 80395d4:	4621      	mov	r1, r4
 80395d6:	4630      	mov	r0, r6
 80395d8:	f000 feb6 	bl	803a348 <_sbrk_r>
 80395dc:	6038      	str	r0, [r7, #0]
 80395de:	4629      	mov	r1, r5
 80395e0:	4630      	mov	r0, r6
 80395e2:	f000 feb1 	bl	803a348 <_sbrk_r>
 80395e6:	1c43      	adds	r3, r0, #1
 80395e8:	d123      	bne.n	8039632 <_malloc_r+0x92>
 80395ea:	230c      	movs	r3, #12
 80395ec:	6033      	str	r3, [r6, #0]
 80395ee:	4630      	mov	r0, r6
 80395f0:	f003 f84a 	bl	803c688 <__malloc_unlock>
 80395f4:	e7e3      	b.n	80395be <_malloc_r+0x1e>
 80395f6:	6823      	ldr	r3, [r4, #0]
 80395f8:	1b5b      	subs	r3, r3, r5
 80395fa:	d417      	bmi.n	803962c <_malloc_r+0x8c>
 80395fc:	2b0b      	cmp	r3, #11
 80395fe:	d903      	bls.n	8039608 <_malloc_r+0x68>
 8039600:	6023      	str	r3, [r4, #0]
 8039602:	441c      	add	r4, r3
 8039604:	6025      	str	r5, [r4, #0]
 8039606:	e004      	b.n	8039612 <_malloc_r+0x72>
 8039608:	6863      	ldr	r3, [r4, #4]
 803960a:	42a2      	cmp	r2, r4
 803960c:	bf0c      	ite	eq
 803960e:	600b      	streq	r3, [r1, #0]
 8039610:	6053      	strne	r3, [r2, #4]
 8039612:	4630      	mov	r0, r6
 8039614:	f003 f838 	bl	803c688 <__malloc_unlock>
 8039618:	f104 000b 	add.w	r0, r4, #11
 803961c:	1d23      	adds	r3, r4, #4
 803961e:	f020 0007 	bic.w	r0, r0, #7
 8039622:	1ac2      	subs	r2, r0, r3
 8039624:	d0cc      	beq.n	80395c0 <_malloc_r+0x20>
 8039626:	1a1b      	subs	r3, r3, r0
 8039628:	50a3      	str	r3, [r4, r2]
 803962a:	e7c9      	b.n	80395c0 <_malloc_r+0x20>
 803962c:	4622      	mov	r2, r4
 803962e:	6864      	ldr	r4, [r4, #4]
 8039630:	e7cc      	b.n	80395cc <_malloc_r+0x2c>
 8039632:	1cc4      	adds	r4, r0, #3
 8039634:	f024 0403 	bic.w	r4, r4, #3
 8039638:	42a0      	cmp	r0, r4
 803963a:	d0e3      	beq.n	8039604 <_malloc_r+0x64>
 803963c:	1a21      	subs	r1, r4, r0
 803963e:	4630      	mov	r0, r6
 8039640:	f000 fe82 	bl	803a348 <_sbrk_r>
 8039644:	3001      	adds	r0, #1
 8039646:	d1dd      	bne.n	8039604 <_malloc_r+0x64>
 8039648:	e7cf      	b.n	80395ea <_malloc_r+0x4a>
 803964a:	bf00      	nop
 803964c:	2000032c 	.word	0x2000032c
 8039650:	20000330 	.word	0x20000330

08039654 <__cvt>:
 8039654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8039658:	ec55 4b10 	vmov	r4, r5, d0
 803965c:	2d00      	cmp	r5, #0
 803965e:	460e      	mov	r6, r1
 8039660:	4619      	mov	r1, r3
 8039662:	462b      	mov	r3, r5
 8039664:	bfbb      	ittet	lt
 8039666:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 803966a:	461d      	movlt	r5, r3
 803966c:	2300      	movge	r3, #0
 803966e:	232d      	movlt	r3, #45	; 0x2d
 8039670:	700b      	strb	r3, [r1, #0]
 8039672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8039674:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8039678:	4691      	mov	r9, r2
 803967a:	f023 0820 	bic.w	r8, r3, #32
 803967e:	bfbc      	itt	lt
 8039680:	4622      	movlt	r2, r4
 8039682:	4614      	movlt	r4, r2
 8039684:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8039688:	d005      	beq.n	8039696 <__cvt+0x42>
 803968a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 803968e:	d100      	bne.n	8039692 <__cvt+0x3e>
 8039690:	3601      	adds	r6, #1
 8039692:	2102      	movs	r1, #2
 8039694:	e000      	b.n	8039698 <__cvt+0x44>
 8039696:	2103      	movs	r1, #3
 8039698:	ab03      	add	r3, sp, #12
 803969a:	9301      	str	r3, [sp, #4]
 803969c:	ab02      	add	r3, sp, #8
 803969e:	9300      	str	r3, [sp, #0]
 80396a0:	ec45 4b10 	vmov	d0, r4, r5
 80396a4:	4653      	mov	r3, sl
 80396a6:	4632      	mov	r2, r6
 80396a8:	f001 fe3a 	bl	803b320 <_dtoa_r>
 80396ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80396b0:	4607      	mov	r7, r0
 80396b2:	d102      	bne.n	80396ba <__cvt+0x66>
 80396b4:	f019 0f01 	tst.w	r9, #1
 80396b8:	d022      	beq.n	8039700 <__cvt+0xac>
 80396ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80396be:	eb07 0906 	add.w	r9, r7, r6
 80396c2:	d110      	bne.n	80396e6 <__cvt+0x92>
 80396c4:	783b      	ldrb	r3, [r7, #0]
 80396c6:	2b30      	cmp	r3, #48	; 0x30
 80396c8:	d10a      	bne.n	80396e0 <__cvt+0x8c>
 80396ca:	2200      	movs	r2, #0
 80396cc:	2300      	movs	r3, #0
 80396ce:	4620      	mov	r0, r4
 80396d0:	4629      	mov	r1, r5
 80396d2:	f7e7 f9f9 	bl	8020ac8 <__aeabi_dcmpeq>
 80396d6:	b918      	cbnz	r0, 80396e0 <__cvt+0x8c>
 80396d8:	f1c6 0601 	rsb	r6, r6, #1
 80396dc:	f8ca 6000 	str.w	r6, [sl]
 80396e0:	f8da 3000 	ldr.w	r3, [sl]
 80396e4:	4499      	add	r9, r3
 80396e6:	2200      	movs	r2, #0
 80396e8:	2300      	movs	r3, #0
 80396ea:	4620      	mov	r0, r4
 80396ec:	4629      	mov	r1, r5
 80396ee:	f7e7 f9eb 	bl	8020ac8 <__aeabi_dcmpeq>
 80396f2:	b108      	cbz	r0, 80396f8 <__cvt+0xa4>
 80396f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80396f8:	2230      	movs	r2, #48	; 0x30
 80396fa:	9b03      	ldr	r3, [sp, #12]
 80396fc:	454b      	cmp	r3, r9
 80396fe:	d307      	bcc.n	8039710 <__cvt+0xbc>
 8039700:	9b03      	ldr	r3, [sp, #12]
 8039702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8039704:	1bdb      	subs	r3, r3, r7
 8039706:	4638      	mov	r0, r7
 8039708:	6013      	str	r3, [r2, #0]
 803970a:	b004      	add	sp, #16
 803970c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8039710:	1c59      	adds	r1, r3, #1
 8039712:	9103      	str	r1, [sp, #12]
 8039714:	701a      	strb	r2, [r3, #0]
 8039716:	e7f0      	b.n	80396fa <__cvt+0xa6>

08039718 <__exponent>:
 8039718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 803971a:	4603      	mov	r3, r0
 803971c:	2900      	cmp	r1, #0
 803971e:	bfb8      	it	lt
 8039720:	4249      	neglt	r1, r1
 8039722:	f803 2b02 	strb.w	r2, [r3], #2
 8039726:	bfb4      	ite	lt
 8039728:	222d      	movlt	r2, #45	; 0x2d
 803972a:	222b      	movge	r2, #43	; 0x2b
 803972c:	2909      	cmp	r1, #9
 803972e:	7042      	strb	r2, [r0, #1]
 8039730:	dd2a      	ble.n	8039788 <__exponent+0x70>
 8039732:	f10d 0407 	add.w	r4, sp, #7
 8039736:	46a4      	mov	ip, r4
 8039738:	270a      	movs	r7, #10
 803973a:	46a6      	mov	lr, r4
 803973c:	460a      	mov	r2, r1
 803973e:	fb91 f6f7 	sdiv	r6, r1, r7
 8039742:	fb07 1516 	mls	r5, r7, r6, r1
 8039746:	3530      	adds	r5, #48	; 0x30
 8039748:	2a63      	cmp	r2, #99	; 0x63
 803974a:	f104 34ff 	add.w	r4, r4, #4294967295
 803974e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8039752:	4631      	mov	r1, r6
 8039754:	dcf1      	bgt.n	803973a <__exponent+0x22>
 8039756:	3130      	adds	r1, #48	; 0x30
 8039758:	f1ae 0502 	sub.w	r5, lr, #2
 803975c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8039760:	1c44      	adds	r4, r0, #1
 8039762:	4629      	mov	r1, r5
 8039764:	4561      	cmp	r1, ip
 8039766:	d30a      	bcc.n	803977e <__exponent+0x66>
 8039768:	f10d 0209 	add.w	r2, sp, #9
 803976c:	eba2 020e 	sub.w	r2, r2, lr
 8039770:	4565      	cmp	r5, ip
 8039772:	bf88      	it	hi
 8039774:	2200      	movhi	r2, #0
 8039776:	4413      	add	r3, r2
 8039778:	1a18      	subs	r0, r3, r0
 803977a:	b003      	add	sp, #12
 803977c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 803977e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8039782:	f804 2f01 	strb.w	r2, [r4, #1]!
 8039786:	e7ed      	b.n	8039764 <__exponent+0x4c>
 8039788:	2330      	movs	r3, #48	; 0x30
 803978a:	3130      	adds	r1, #48	; 0x30
 803978c:	7083      	strb	r3, [r0, #2]
 803978e:	70c1      	strb	r1, [r0, #3]
 8039790:	1d03      	adds	r3, r0, #4
 8039792:	e7f1      	b.n	8039778 <__exponent+0x60>

08039794 <_printf_float>:
 8039794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8039798:	ed2d 8b02 	vpush	{d8}
 803979c:	b08d      	sub	sp, #52	; 0x34
 803979e:	460c      	mov	r4, r1
 80397a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80397a4:	4616      	mov	r6, r2
 80397a6:	461f      	mov	r7, r3
 80397a8:	4605      	mov	r5, r0
 80397aa:	f002 ff37 	bl	803c61c <_localeconv_r>
 80397ae:	f8d0 a000 	ldr.w	sl, [r0]
 80397b2:	4650      	mov	r0, sl
 80397b4:	f7e6 fd0c 	bl	80201d0 <strlen>
 80397b8:	2300      	movs	r3, #0
 80397ba:	930a      	str	r3, [sp, #40]	; 0x28
 80397bc:	6823      	ldr	r3, [r4, #0]
 80397be:	9305      	str	r3, [sp, #20]
 80397c0:	f8d8 3000 	ldr.w	r3, [r8]
 80397c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80397c8:	3307      	adds	r3, #7
 80397ca:	f023 0307 	bic.w	r3, r3, #7
 80397ce:	f103 0208 	add.w	r2, r3, #8
 80397d2:	f8c8 2000 	str.w	r2, [r8]
 80397d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80397da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80397de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80397e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80397e6:	9307      	str	r3, [sp, #28]
 80397e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80397ec:	ee08 0a10 	vmov	s16, r0
 80397f0:	4b9f      	ldr	r3, [pc, #636]	; (8039a70 <_printf_float+0x2dc>)
 80397f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80397f6:	f04f 32ff 	mov.w	r2, #4294967295
 80397fa:	f7e7 f997 	bl	8020b2c <__aeabi_dcmpun>
 80397fe:	bb88      	cbnz	r0, 8039864 <_printf_float+0xd0>
 8039800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8039804:	4b9a      	ldr	r3, [pc, #616]	; (8039a70 <_printf_float+0x2dc>)
 8039806:	f04f 32ff 	mov.w	r2, #4294967295
 803980a:	f7e7 f971 	bl	8020af0 <__aeabi_dcmple>
 803980e:	bb48      	cbnz	r0, 8039864 <_printf_float+0xd0>
 8039810:	2200      	movs	r2, #0
 8039812:	2300      	movs	r3, #0
 8039814:	4640      	mov	r0, r8
 8039816:	4649      	mov	r1, r9
 8039818:	f7e7 f960 	bl	8020adc <__aeabi_dcmplt>
 803981c:	b110      	cbz	r0, 8039824 <_printf_float+0x90>
 803981e:	232d      	movs	r3, #45	; 0x2d
 8039820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8039824:	4b93      	ldr	r3, [pc, #588]	; (8039a74 <_printf_float+0x2e0>)
 8039826:	4894      	ldr	r0, [pc, #592]	; (8039a78 <_printf_float+0x2e4>)
 8039828:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 803982c:	bf94      	ite	ls
 803982e:	4698      	movls	r8, r3
 8039830:	4680      	movhi	r8, r0
 8039832:	2303      	movs	r3, #3
 8039834:	6123      	str	r3, [r4, #16]
 8039836:	9b05      	ldr	r3, [sp, #20]
 8039838:	f023 0204 	bic.w	r2, r3, #4
 803983c:	6022      	str	r2, [r4, #0]
 803983e:	f04f 0900 	mov.w	r9, #0
 8039842:	9700      	str	r7, [sp, #0]
 8039844:	4633      	mov	r3, r6
 8039846:	aa0b      	add	r2, sp, #44	; 0x2c
 8039848:	4621      	mov	r1, r4
 803984a:	4628      	mov	r0, r5
 803984c:	f000 f9d8 	bl	8039c00 <_printf_common>
 8039850:	3001      	adds	r0, #1
 8039852:	f040 8090 	bne.w	8039976 <_printf_float+0x1e2>
 8039856:	f04f 30ff 	mov.w	r0, #4294967295
 803985a:	b00d      	add	sp, #52	; 0x34
 803985c:	ecbd 8b02 	vpop	{d8}
 8039860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8039864:	4642      	mov	r2, r8
 8039866:	464b      	mov	r3, r9
 8039868:	4640      	mov	r0, r8
 803986a:	4649      	mov	r1, r9
 803986c:	f7e7 f95e 	bl	8020b2c <__aeabi_dcmpun>
 8039870:	b140      	cbz	r0, 8039884 <_printf_float+0xf0>
 8039872:	464b      	mov	r3, r9
 8039874:	2b00      	cmp	r3, #0
 8039876:	bfbc      	itt	lt
 8039878:	232d      	movlt	r3, #45	; 0x2d
 803987a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 803987e:	487f      	ldr	r0, [pc, #508]	; (8039a7c <_printf_float+0x2e8>)
 8039880:	4b7f      	ldr	r3, [pc, #508]	; (8039a80 <_printf_float+0x2ec>)
 8039882:	e7d1      	b.n	8039828 <_printf_float+0x94>
 8039884:	6863      	ldr	r3, [r4, #4]
 8039886:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 803988a:	9206      	str	r2, [sp, #24]
 803988c:	1c5a      	adds	r2, r3, #1
 803988e:	d13f      	bne.n	8039910 <_printf_float+0x17c>
 8039890:	2306      	movs	r3, #6
 8039892:	6063      	str	r3, [r4, #4]
 8039894:	9b05      	ldr	r3, [sp, #20]
 8039896:	6861      	ldr	r1, [r4, #4]
 8039898:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 803989c:	2300      	movs	r3, #0
 803989e:	9303      	str	r3, [sp, #12]
 80398a0:	ab0a      	add	r3, sp, #40	; 0x28
 80398a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80398a6:	ab09      	add	r3, sp, #36	; 0x24
 80398a8:	ec49 8b10 	vmov	d0, r8, r9
 80398ac:	9300      	str	r3, [sp, #0]
 80398ae:	6022      	str	r2, [r4, #0]
 80398b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80398b4:	4628      	mov	r0, r5
 80398b6:	f7ff fecd 	bl	8039654 <__cvt>
 80398ba:	9b06      	ldr	r3, [sp, #24]
 80398bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80398be:	2b47      	cmp	r3, #71	; 0x47
 80398c0:	4680      	mov	r8, r0
 80398c2:	d108      	bne.n	80398d6 <_printf_float+0x142>
 80398c4:	1cc8      	adds	r0, r1, #3
 80398c6:	db02      	blt.n	80398ce <_printf_float+0x13a>
 80398c8:	6863      	ldr	r3, [r4, #4]
 80398ca:	4299      	cmp	r1, r3
 80398cc:	dd41      	ble.n	8039952 <_printf_float+0x1be>
 80398ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80398d2:	fa5f fb8b 	uxtb.w	fp, fp
 80398d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80398da:	d820      	bhi.n	803991e <_printf_float+0x18a>
 80398dc:	3901      	subs	r1, #1
 80398de:	465a      	mov	r2, fp
 80398e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80398e4:	9109      	str	r1, [sp, #36]	; 0x24
 80398e6:	f7ff ff17 	bl	8039718 <__exponent>
 80398ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80398ec:	1813      	adds	r3, r2, r0
 80398ee:	2a01      	cmp	r2, #1
 80398f0:	4681      	mov	r9, r0
 80398f2:	6123      	str	r3, [r4, #16]
 80398f4:	dc02      	bgt.n	80398fc <_printf_float+0x168>
 80398f6:	6822      	ldr	r2, [r4, #0]
 80398f8:	07d2      	lsls	r2, r2, #31
 80398fa:	d501      	bpl.n	8039900 <_printf_float+0x16c>
 80398fc:	3301      	adds	r3, #1
 80398fe:	6123      	str	r3, [r4, #16]
 8039900:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8039904:	2b00      	cmp	r3, #0
 8039906:	d09c      	beq.n	8039842 <_printf_float+0xae>
 8039908:	232d      	movs	r3, #45	; 0x2d
 803990a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 803990e:	e798      	b.n	8039842 <_printf_float+0xae>
 8039910:	9a06      	ldr	r2, [sp, #24]
 8039912:	2a47      	cmp	r2, #71	; 0x47
 8039914:	d1be      	bne.n	8039894 <_printf_float+0x100>
 8039916:	2b00      	cmp	r3, #0
 8039918:	d1bc      	bne.n	8039894 <_printf_float+0x100>
 803991a:	2301      	movs	r3, #1
 803991c:	e7b9      	b.n	8039892 <_printf_float+0xfe>
 803991e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8039922:	d118      	bne.n	8039956 <_printf_float+0x1c2>
 8039924:	2900      	cmp	r1, #0
 8039926:	6863      	ldr	r3, [r4, #4]
 8039928:	dd0b      	ble.n	8039942 <_printf_float+0x1ae>
 803992a:	6121      	str	r1, [r4, #16]
 803992c:	b913      	cbnz	r3, 8039934 <_printf_float+0x1a0>
 803992e:	6822      	ldr	r2, [r4, #0]
 8039930:	07d0      	lsls	r0, r2, #31
 8039932:	d502      	bpl.n	803993a <_printf_float+0x1a6>
 8039934:	3301      	adds	r3, #1
 8039936:	440b      	add	r3, r1
 8039938:	6123      	str	r3, [r4, #16]
 803993a:	65a1      	str	r1, [r4, #88]	; 0x58
 803993c:	f04f 0900 	mov.w	r9, #0
 8039940:	e7de      	b.n	8039900 <_printf_float+0x16c>
 8039942:	b913      	cbnz	r3, 803994a <_printf_float+0x1b6>
 8039944:	6822      	ldr	r2, [r4, #0]
 8039946:	07d2      	lsls	r2, r2, #31
 8039948:	d501      	bpl.n	803994e <_printf_float+0x1ba>
 803994a:	3302      	adds	r3, #2
 803994c:	e7f4      	b.n	8039938 <_printf_float+0x1a4>
 803994e:	2301      	movs	r3, #1
 8039950:	e7f2      	b.n	8039938 <_printf_float+0x1a4>
 8039952:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8039956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8039958:	4299      	cmp	r1, r3
 803995a:	db05      	blt.n	8039968 <_printf_float+0x1d4>
 803995c:	6823      	ldr	r3, [r4, #0]
 803995e:	6121      	str	r1, [r4, #16]
 8039960:	07d8      	lsls	r0, r3, #31
 8039962:	d5ea      	bpl.n	803993a <_printf_float+0x1a6>
 8039964:	1c4b      	adds	r3, r1, #1
 8039966:	e7e7      	b.n	8039938 <_printf_float+0x1a4>
 8039968:	2900      	cmp	r1, #0
 803996a:	bfd4      	ite	le
 803996c:	f1c1 0202 	rsble	r2, r1, #2
 8039970:	2201      	movgt	r2, #1
 8039972:	4413      	add	r3, r2
 8039974:	e7e0      	b.n	8039938 <_printf_float+0x1a4>
 8039976:	6823      	ldr	r3, [r4, #0]
 8039978:	055a      	lsls	r2, r3, #21
 803997a:	d407      	bmi.n	803998c <_printf_float+0x1f8>
 803997c:	6923      	ldr	r3, [r4, #16]
 803997e:	4642      	mov	r2, r8
 8039980:	4631      	mov	r1, r6
 8039982:	4628      	mov	r0, r5
 8039984:	47b8      	blx	r7
 8039986:	3001      	adds	r0, #1
 8039988:	d12c      	bne.n	80399e4 <_printf_float+0x250>
 803998a:	e764      	b.n	8039856 <_printf_float+0xc2>
 803998c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8039990:	f240 80e0 	bls.w	8039b54 <_printf_float+0x3c0>
 8039994:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8039998:	2200      	movs	r2, #0
 803999a:	2300      	movs	r3, #0
 803999c:	f7e7 f894 	bl	8020ac8 <__aeabi_dcmpeq>
 80399a0:	2800      	cmp	r0, #0
 80399a2:	d034      	beq.n	8039a0e <_printf_float+0x27a>
 80399a4:	4a37      	ldr	r2, [pc, #220]	; (8039a84 <_printf_float+0x2f0>)
 80399a6:	2301      	movs	r3, #1
 80399a8:	4631      	mov	r1, r6
 80399aa:	4628      	mov	r0, r5
 80399ac:	47b8      	blx	r7
 80399ae:	3001      	adds	r0, #1
 80399b0:	f43f af51 	beq.w	8039856 <_printf_float+0xc2>
 80399b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80399b8:	429a      	cmp	r2, r3
 80399ba:	db02      	blt.n	80399c2 <_printf_float+0x22e>
 80399bc:	6823      	ldr	r3, [r4, #0]
 80399be:	07d8      	lsls	r0, r3, #31
 80399c0:	d510      	bpl.n	80399e4 <_printf_float+0x250>
 80399c2:	ee18 3a10 	vmov	r3, s16
 80399c6:	4652      	mov	r2, sl
 80399c8:	4631      	mov	r1, r6
 80399ca:	4628      	mov	r0, r5
 80399cc:	47b8      	blx	r7
 80399ce:	3001      	adds	r0, #1
 80399d0:	f43f af41 	beq.w	8039856 <_printf_float+0xc2>
 80399d4:	f04f 0800 	mov.w	r8, #0
 80399d8:	f104 091a 	add.w	r9, r4, #26
 80399dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80399de:	3b01      	subs	r3, #1
 80399e0:	4543      	cmp	r3, r8
 80399e2:	dc09      	bgt.n	80399f8 <_printf_float+0x264>
 80399e4:	6823      	ldr	r3, [r4, #0]
 80399e6:	079b      	lsls	r3, r3, #30
 80399e8:	f100 8105 	bmi.w	8039bf6 <_printf_float+0x462>
 80399ec:	68e0      	ldr	r0, [r4, #12]
 80399ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80399f0:	4298      	cmp	r0, r3
 80399f2:	bfb8      	it	lt
 80399f4:	4618      	movlt	r0, r3
 80399f6:	e730      	b.n	803985a <_printf_float+0xc6>
 80399f8:	2301      	movs	r3, #1
 80399fa:	464a      	mov	r2, r9
 80399fc:	4631      	mov	r1, r6
 80399fe:	4628      	mov	r0, r5
 8039a00:	47b8      	blx	r7
 8039a02:	3001      	adds	r0, #1
 8039a04:	f43f af27 	beq.w	8039856 <_printf_float+0xc2>
 8039a08:	f108 0801 	add.w	r8, r8, #1
 8039a0c:	e7e6      	b.n	80399dc <_printf_float+0x248>
 8039a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8039a10:	2b00      	cmp	r3, #0
 8039a12:	dc39      	bgt.n	8039a88 <_printf_float+0x2f4>
 8039a14:	4a1b      	ldr	r2, [pc, #108]	; (8039a84 <_printf_float+0x2f0>)
 8039a16:	2301      	movs	r3, #1
 8039a18:	4631      	mov	r1, r6
 8039a1a:	4628      	mov	r0, r5
 8039a1c:	47b8      	blx	r7
 8039a1e:	3001      	adds	r0, #1
 8039a20:	f43f af19 	beq.w	8039856 <_printf_float+0xc2>
 8039a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8039a28:	4313      	orrs	r3, r2
 8039a2a:	d102      	bne.n	8039a32 <_printf_float+0x29e>
 8039a2c:	6823      	ldr	r3, [r4, #0]
 8039a2e:	07d9      	lsls	r1, r3, #31
 8039a30:	d5d8      	bpl.n	80399e4 <_printf_float+0x250>
 8039a32:	ee18 3a10 	vmov	r3, s16
 8039a36:	4652      	mov	r2, sl
 8039a38:	4631      	mov	r1, r6
 8039a3a:	4628      	mov	r0, r5
 8039a3c:	47b8      	blx	r7
 8039a3e:	3001      	adds	r0, #1
 8039a40:	f43f af09 	beq.w	8039856 <_printf_float+0xc2>
 8039a44:	f04f 0900 	mov.w	r9, #0
 8039a48:	f104 0a1a 	add.w	sl, r4, #26
 8039a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8039a4e:	425b      	negs	r3, r3
 8039a50:	454b      	cmp	r3, r9
 8039a52:	dc01      	bgt.n	8039a58 <_printf_float+0x2c4>
 8039a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8039a56:	e792      	b.n	803997e <_printf_float+0x1ea>
 8039a58:	2301      	movs	r3, #1
 8039a5a:	4652      	mov	r2, sl
 8039a5c:	4631      	mov	r1, r6
 8039a5e:	4628      	mov	r0, r5
 8039a60:	47b8      	blx	r7
 8039a62:	3001      	adds	r0, #1
 8039a64:	f43f aef7 	beq.w	8039856 <_printf_float+0xc2>
 8039a68:	f109 0901 	add.w	r9, r9, #1
 8039a6c:	e7ee      	b.n	8039a4c <_printf_float+0x2b8>
 8039a6e:	bf00      	nop
 8039a70:	7fefffff 	.word	0x7fefffff
 8039a74:	0803e900 	.word	0x0803e900
 8039a78:	0803e904 	.word	0x0803e904
 8039a7c:	0803e90c 	.word	0x0803e90c
 8039a80:	0803e908 	.word	0x0803e908
 8039a84:	0803e910 	.word	0x0803e910
 8039a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8039a8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8039a8c:	429a      	cmp	r2, r3
 8039a8e:	bfa8      	it	ge
 8039a90:	461a      	movge	r2, r3
 8039a92:	2a00      	cmp	r2, #0
 8039a94:	4691      	mov	r9, r2
 8039a96:	dc37      	bgt.n	8039b08 <_printf_float+0x374>
 8039a98:	f04f 0b00 	mov.w	fp, #0
 8039a9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8039aa0:	f104 021a 	add.w	r2, r4, #26
 8039aa4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8039aa6:	9305      	str	r3, [sp, #20]
 8039aa8:	eba3 0309 	sub.w	r3, r3, r9
 8039aac:	455b      	cmp	r3, fp
 8039aae:	dc33      	bgt.n	8039b18 <_printf_float+0x384>
 8039ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8039ab4:	429a      	cmp	r2, r3
 8039ab6:	db3b      	blt.n	8039b30 <_printf_float+0x39c>
 8039ab8:	6823      	ldr	r3, [r4, #0]
 8039aba:	07da      	lsls	r2, r3, #31
 8039abc:	d438      	bmi.n	8039b30 <_printf_float+0x39c>
 8039abe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8039ac0:	9b05      	ldr	r3, [sp, #20]
 8039ac2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8039ac4:	1ad3      	subs	r3, r2, r3
 8039ac6:	eba2 0901 	sub.w	r9, r2, r1
 8039aca:	4599      	cmp	r9, r3
 8039acc:	bfa8      	it	ge
 8039ace:	4699      	movge	r9, r3
 8039ad0:	f1b9 0f00 	cmp.w	r9, #0
 8039ad4:	dc35      	bgt.n	8039b42 <_printf_float+0x3ae>
 8039ad6:	f04f 0800 	mov.w	r8, #0
 8039ada:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8039ade:	f104 0a1a 	add.w	sl, r4, #26
 8039ae2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8039ae6:	1a9b      	subs	r3, r3, r2
 8039ae8:	eba3 0309 	sub.w	r3, r3, r9
 8039aec:	4543      	cmp	r3, r8
 8039aee:	f77f af79 	ble.w	80399e4 <_printf_float+0x250>
 8039af2:	2301      	movs	r3, #1
 8039af4:	4652      	mov	r2, sl
 8039af6:	4631      	mov	r1, r6
 8039af8:	4628      	mov	r0, r5
 8039afa:	47b8      	blx	r7
 8039afc:	3001      	adds	r0, #1
 8039afe:	f43f aeaa 	beq.w	8039856 <_printf_float+0xc2>
 8039b02:	f108 0801 	add.w	r8, r8, #1
 8039b06:	e7ec      	b.n	8039ae2 <_printf_float+0x34e>
 8039b08:	4613      	mov	r3, r2
 8039b0a:	4631      	mov	r1, r6
 8039b0c:	4642      	mov	r2, r8
 8039b0e:	4628      	mov	r0, r5
 8039b10:	47b8      	blx	r7
 8039b12:	3001      	adds	r0, #1
 8039b14:	d1c0      	bne.n	8039a98 <_printf_float+0x304>
 8039b16:	e69e      	b.n	8039856 <_printf_float+0xc2>
 8039b18:	2301      	movs	r3, #1
 8039b1a:	4631      	mov	r1, r6
 8039b1c:	4628      	mov	r0, r5
 8039b1e:	9205      	str	r2, [sp, #20]
 8039b20:	47b8      	blx	r7
 8039b22:	3001      	adds	r0, #1
 8039b24:	f43f ae97 	beq.w	8039856 <_printf_float+0xc2>
 8039b28:	9a05      	ldr	r2, [sp, #20]
 8039b2a:	f10b 0b01 	add.w	fp, fp, #1
 8039b2e:	e7b9      	b.n	8039aa4 <_printf_float+0x310>
 8039b30:	ee18 3a10 	vmov	r3, s16
 8039b34:	4652      	mov	r2, sl
 8039b36:	4631      	mov	r1, r6
 8039b38:	4628      	mov	r0, r5
 8039b3a:	47b8      	blx	r7
 8039b3c:	3001      	adds	r0, #1
 8039b3e:	d1be      	bne.n	8039abe <_printf_float+0x32a>
 8039b40:	e689      	b.n	8039856 <_printf_float+0xc2>
 8039b42:	9a05      	ldr	r2, [sp, #20]
 8039b44:	464b      	mov	r3, r9
 8039b46:	4442      	add	r2, r8
 8039b48:	4631      	mov	r1, r6
 8039b4a:	4628      	mov	r0, r5
 8039b4c:	47b8      	blx	r7
 8039b4e:	3001      	adds	r0, #1
 8039b50:	d1c1      	bne.n	8039ad6 <_printf_float+0x342>
 8039b52:	e680      	b.n	8039856 <_printf_float+0xc2>
 8039b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8039b56:	2a01      	cmp	r2, #1
 8039b58:	dc01      	bgt.n	8039b5e <_printf_float+0x3ca>
 8039b5a:	07db      	lsls	r3, r3, #31
 8039b5c:	d538      	bpl.n	8039bd0 <_printf_float+0x43c>
 8039b5e:	2301      	movs	r3, #1
 8039b60:	4642      	mov	r2, r8
 8039b62:	4631      	mov	r1, r6
 8039b64:	4628      	mov	r0, r5
 8039b66:	47b8      	blx	r7
 8039b68:	3001      	adds	r0, #1
 8039b6a:	f43f ae74 	beq.w	8039856 <_printf_float+0xc2>
 8039b6e:	ee18 3a10 	vmov	r3, s16
 8039b72:	4652      	mov	r2, sl
 8039b74:	4631      	mov	r1, r6
 8039b76:	4628      	mov	r0, r5
 8039b78:	47b8      	blx	r7
 8039b7a:	3001      	adds	r0, #1
 8039b7c:	f43f ae6b 	beq.w	8039856 <_printf_float+0xc2>
 8039b80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8039b84:	2200      	movs	r2, #0
 8039b86:	2300      	movs	r3, #0
 8039b88:	f7e6 ff9e 	bl	8020ac8 <__aeabi_dcmpeq>
 8039b8c:	b9d8      	cbnz	r0, 8039bc6 <_printf_float+0x432>
 8039b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8039b90:	f108 0201 	add.w	r2, r8, #1
 8039b94:	3b01      	subs	r3, #1
 8039b96:	4631      	mov	r1, r6
 8039b98:	4628      	mov	r0, r5
 8039b9a:	47b8      	blx	r7
 8039b9c:	3001      	adds	r0, #1
 8039b9e:	d10e      	bne.n	8039bbe <_printf_float+0x42a>
 8039ba0:	e659      	b.n	8039856 <_printf_float+0xc2>
 8039ba2:	2301      	movs	r3, #1
 8039ba4:	4652      	mov	r2, sl
 8039ba6:	4631      	mov	r1, r6
 8039ba8:	4628      	mov	r0, r5
 8039baa:	47b8      	blx	r7
 8039bac:	3001      	adds	r0, #1
 8039bae:	f43f ae52 	beq.w	8039856 <_printf_float+0xc2>
 8039bb2:	f108 0801 	add.w	r8, r8, #1
 8039bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8039bb8:	3b01      	subs	r3, #1
 8039bba:	4543      	cmp	r3, r8
 8039bbc:	dcf1      	bgt.n	8039ba2 <_printf_float+0x40e>
 8039bbe:	464b      	mov	r3, r9
 8039bc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8039bc4:	e6dc      	b.n	8039980 <_printf_float+0x1ec>
 8039bc6:	f04f 0800 	mov.w	r8, #0
 8039bca:	f104 0a1a 	add.w	sl, r4, #26
 8039bce:	e7f2      	b.n	8039bb6 <_printf_float+0x422>
 8039bd0:	2301      	movs	r3, #1
 8039bd2:	4642      	mov	r2, r8
 8039bd4:	e7df      	b.n	8039b96 <_printf_float+0x402>
 8039bd6:	2301      	movs	r3, #1
 8039bd8:	464a      	mov	r2, r9
 8039bda:	4631      	mov	r1, r6
 8039bdc:	4628      	mov	r0, r5
 8039bde:	47b8      	blx	r7
 8039be0:	3001      	adds	r0, #1
 8039be2:	f43f ae38 	beq.w	8039856 <_printf_float+0xc2>
 8039be6:	f108 0801 	add.w	r8, r8, #1
 8039bea:	68e3      	ldr	r3, [r4, #12]
 8039bec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8039bee:	1a5b      	subs	r3, r3, r1
 8039bf0:	4543      	cmp	r3, r8
 8039bf2:	dcf0      	bgt.n	8039bd6 <_printf_float+0x442>
 8039bf4:	e6fa      	b.n	80399ec <_printf_float+0x258>
 8039bf6:	f04f 0800 	mov.w	r8, #0
 8039bfa:	f104 0919 	add.w	r9, r4, #25
 8039bfe:	e7f4      	b.n	8039bea <_printf_float+0x456>

08039c00 <_printf_common>:
 8039c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8039c04:	4616      	mov	r6, r2
 8039c06:	4699      	mov	r9, r3
 8039c08:	688a      	ldr	r2, [r1, #8]
 8039c0a:	690b      	ldr	r3, [r1, #16]
 8039c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8039c10:	4293      	cmp	r3, r2
 8039c12:	bfb8      	it	lt
 8039c14:	4613      	movlt	r3, r2
 8039c16:	6033      	str	r3, [r6, #0]
 8039c18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8039c1c:	4607      	mov	r7, r0
 8039c1e:	460c      	mov	r4, r1
 8039c20:	b10a      	cbz	r2, 8039c26 <_printf_common+0x26>
 8039c22:	3301      	adds	r3, #1
 8039c24:	6033      	str	r3, [r6, #0]
 8039c26:	6823      	ldr	r3, [r4, #0]
 8039c28:	0699      	lsls	r1, r3, #26
 8039c2a:	bf42      	ittt	mi
 8039c2c:	6833      	ldrmi	r3, [r6, #0]
 8039c2e:	3302      	addmi	r3, #2
 8039c30:	6033      	strmi	r3, [r6, #0]
 8039c32:	6825      	ldr	r5, [r4, #0]
 8039c34:	f015 0506 	ands.w	r5, r5, #6
 8039c38:	d106      	bne.n	8039c48 <_printf_common+0x48>
 8039c3a:	f104 0a19 	add.w	sl, r4, #25
 8039c3e:	68e3      	ldr	r3, [r4, #12]
 8039c40:	6832      	ldr	r2, [r6, #0]
 8039c42:	1a9b      	subs	r3, r3, r2
 8039c44:	42ab      	cmp	r3, r5
 8039c46:	dc26      	bgt.n	8039c96 <_printf_common+0x96>
 8039c48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8039c4c:	1e13      	subs	r3, r2, #0
 8039c4e:	6822      	ldr	r2, [r4, #0]
 8039c50:	bf18      	it	ne
 8039c52:	2301      	movne	r3, #1
 8039c54:	0692      	lsls	r2, r2, #26
 8039c56:	d42b      	bmi.n	8039cb0 <_printf_common+0xb0>
 8039c58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8039c5c:	4649      	mov	r1, r9
 8039c5e:	4638      	mov	r0, r7
 8039c60:	47c0      	blx	r8
 8039c62:	3001      	adds	r0, #1
 8039c64:	d01e      	beq.n	8039ca4 <_printf_common+0xa4>
 8039c66:	6823      	ldr	r3, [r4, #0]
 8039c68:	68e5      	ldr	r5, [r4, #12]
 8039c6a:	6832      	ldr	r2, [r6, #0]
 8039c6c:	f003 0306 	and.w	r3, r3, #6
 8039c70:	2b04      	cmp	r3, #4
 8039c72:	bf08      	it	eq
 8039c74:	1aad      	subeq	r5, r5, r2
 8039c76:	68a3      	ldr	r3, [r4, #8]
 8039c78:	6922      	ldr	r2, [r4, #16]
 8039c7a:	bf0c      	ite	eq
 8039c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8039c80:	2500      	movne	r5, #0
 8039c82:	4293      	cmp	r3, r2
 8039c84:	bfc4      	itt	gt
 8039c86:	1a9b      	subgt	r3, r3, r2
 8039c88:	18ed      	addgt	r5, r5, r3
 8039c8a:	2600      	movs	r6, #0
 8039c8c:	341a      	adds	r4, #26
 8039c8e:	42b5      	cmp	r5, r6
 8039c90:	d11a      	bne.n	8039cc8 <_printf_common+0xc8>
 8039c92:	2000      	movs	r0, #0
 8039c94:	e008      	b.n	8039ca8 <_printf_common+0xa8>
 8039c96:	2301      	movs	r3, #1
 8039c98:	4652      	mov	r2, sl
 8039c9a:	4649      	mov	r1, r9
 8039c9c:	4638      	mov	r0, r7
 8039c9e:	47c0      	blx	r8
 8039ca0:	3001      	adds	r0, #1
 8039ca2:	d103      	bne.n	8039cac <_printf_common+0xac>
 8039ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8039ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8039cac:	3501      	adds	r5, #1
 8039cae:	e7c6      	b.n	8039c3e <_printf_common+0x3e>
 8039cb0:	18e1      	adds	r1, r4, r3
 8039cb2:	1c5a      	adds	r2, r3, #1
 8039cb4:	2030      	movs	r0, #48	; 0x30
 8039cb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8039cba:	4422      	add	r2, r4
 8039cbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8039cc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8039cc4:	3302      	adds	r3, #2
 8039cc6:	e7c7      	b.n	8039c58 <_printf_common+0x58>
 8039cc8:	2301      	movs	r3, #1
 8039cca:	4622      	mov	r2, r4
 8039ccc:	4649      	mov	r1, r9
 8039cce:	4638      	mov	r0, r7
 8039cd0:	47c0      	blx	r8
 8039cd2:	3001      	adds	r0, #1
 8039cd4:	d0e6      	beq.n	8039ca4 <_printf_common+0xa4>
 8039cd6:	3601      	adds	r6, #1
 8039cd8:	e7d9      	b.n	8039c8e <_printf_common+0x8e>
	...

08039cdc <_printf_i>:
 8039cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8039ce0:	460c      	mov	r4, r1
 8039ce2:	4691      	mov	r9, r2
 8039ce4:	7e27      	ldrb	r7, [r4, #24]
 8039ce6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8039ce8:	2f78      	cmp	r7, #120	; 0x78
 8039cea:	4680      	mov	r8, r0
 8039cec:	469a      	mov	sl, r3
 8039cee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8039cf2:	d807      	bhi.n	8039d04 <_printf_i+0x28>
 8039cf4:	2f62      	cmp	r7, #98	; 0x62
 8039cf6:	d80a      	bhi.n	8039d0e <_printf_i+0x32>
 8039cf8:	2f00      	cmp	r7, #0
 8039cfa:	f000 80d8 	beq.w	8039eae <_printf_i+0x1d2>
 8039cfe:	2f58      	cmp	r7, #88	; 0x58
 8039d00:	f000 80a3 	beq.w	8039e4a <_printf_i+0x16e>
 8039d04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8039d08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8039d0c:	e03a      	b.n	8039d84 <_printf_i+0xa8>
 8039d0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8039d12:	2b15      	cmp	r3, #21
 8039d14:	d8f6      	bhi.n	8039d04 <_printf_i+0x28>
 8039d16:	a001      	add	r0, pc, #4	; (adr r0, 8039d1c <_printf_i+0x40>)
 8039d18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8039d1c:	08039d75 	.word	0x08039d75
 8039d20:	08039d89 	.word	0x08039d89
 8039d24:	08039d05 	.word	0x08039d05
 8039d28:	08039d05 	.word	0x08039d05
 8039d2c:	08039d05 	.word	0x08039d05
 8039d30:	08039d05 	.word	0x08039d05
 8039d34:	08039d89 	.word	0x08039d89
 8039d38:	08039d05 	.word	0x08039d05
 8039d3c:	08039d05 	.word	0x08039d05
 8039d40:	08039d05 	.word	0x08039d05
 8039d44:	08039d05 	.word	0x08039d05
 8039d48:	08039e95 	.word	0x08039e95
 8039d4c:	08039db9 	.word	0x08039db9
 8039d50:	08039e77 	.word	0x08039e77
 8039d54:	08039d05 	.word	0x08039d05
 8039d58:	08039d05 	.word	0x08039d05
 8039d5c:	08039eb7 	.word	0x08039eb7
 8039d60:	08039d05 	.word	0x08039d05
 8039d64:	08039db9 	.word	0x08039db9
 8039d68:	08039d05 	.word	0x08039d05
 8039d6c:	08039d05 	.word	0x08039d05
 8039d70:	08039e7f 	.word	0x08039e7f
 8039d74:	680b      	ldr	r3, [r1, #0]
 8039d76:	1d1a      	adds	r2, r3, #4
 8039d78:	681b      	ldr	r3, [r3, #0]
 8039d7a:	600a      	str	r2, [r1, #0]
 8039d7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8039d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8039d84:	2301      	movs	r3, #1
 8039d86:	e0a3      	b.n	8039ed0 <_printf_i+0x1f4>
 8039d88:	6825      	ldr	r5, [r4, #0]
 8039d8a:	6808      	ldr	r0, [r1, #0]
 8039d8c:	062e      	lsls	r6, r5, #24
 8039d8e:	f100 0304 	add.w	r3, r0, #4
 8039d92:	d50a      	bpl.n	8039daa <_printf_i+0xce>
 8039d94:	6805      	ldr	r5, [r0, #0]
 8039d96:	600b      	str	r3, [r1, #0]
 8039d98:	2d00      	cmp	r5, #0
 8039d9a:	da03      	bge.n	8039da4 <_printf_i+0xc8>
 8039d9c:	232d      	movs	r3, #45	; 0x2d
 8039d9e:	426d      	negs	r5, r5
 8039da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8039da4:	485e      	ldr	r0, [pc, #376]	; (8039f20 <_printf_i+0x244>)
 8039da6:	230a      	movs	r3, #10
 8039da8:	e019      	b.n	8039dde <_printf_i+0x102>
 8039daa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8039dae:	6805      	ldr	r5, [r0, #0]
 8039db0:	600b      	str	r3, [r1, #0]
 8039db2:	bf18      	it	ne
 8039db4:	b22d      	sxthne	r5, r5
 8039db6:	e7ef      	b.n	8039d98 <_printf_i+0xbc>
 8039db8:	680b      	ldr	r3, [r1, #0]
 8039dba:	6825      	ldr	r5, [r4, #0]
 8039dbc:	1d18      	adds	r0, r3, #4
 8039dbe:	6008      	str	r0, [r1, #0]
 8039dc0:	0628      	lsls	r0, r5, #24
 8039dc2:	d501      	bpl.n	8039dc8 <_printf_i+0xec>
 8039dc4:	681d      	ldr	r5, [r3, #0]
 8039dc6:	e002      	b.n	8039dce <_printf_i+0xf2>
 8039dc8:	0669      	lsls	r1, r5, #25
 8039dca:	d5fb      	bpl.n	8039dc4 <_printf_i+0xe8>
 8039dcc:	881d      	ldrh	r5, [r3, #0]
 8039dce:	4854      	ldr	r0, [pc, #336]	; (8039f20 <_printf_i+0x244>)
 8039dd0:	2f6f      	cmp	r7, #111	; 0x6f
 8039dd2:	bf0c      	ite	eq
 8039dd4:	2308      	moveq	r3, #8
 8039dd6:	230a      	movne	r3, #10
 8039dd8:	2100      	movs	r1, #0
 8039dda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8039dde:	6866      	ldr	r6, [r4, #4]
 8039de0:	60a6      	str	r6, [r4, #8]
 8039de2:	2e00      	cmp	r6, #0
 8039de4:	bfa2      	ittt	ge
 8039de6:	6821      	ldrge	r1, [r4, #0]
 8039de8:	f021 0104 	bicge.w	r1, r1, #4
 8039dec:	6021      	strge	r1, [r4, #0]
 8039dee:	b90d      	cbnz	r5, 8039df4 <_printf_i+0x118>
 8039df0:	2e00      	cmp	r6, #0
 8039df2:	d04d      	beq.n	8039e90 <_printf_i+0x1b4>
 8039df4:	4616      	mov	r6, r2
 8039df6:	fbb5 f1f3 	udiv	r1, r5, r3
 8039dfa:	fb03 5711 	mls	r7, r3, r1, r5
 8039dfe:	5dc7      	ldrb	r7, [r0, r7]
 8039e00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8039e04:	462f      	mov	r7, r5
 8039e06:	42bb      	cmp	r3, r7
 8039e08:	460d      	mov	r5, r1
 8039e0a:	d9f4      	bls.n	8039df6 <_printf_i+0x11a>
 8039e0c:	2b08      	cmp	r3, #8
 8039e0e:	d10b      	bne.n	8039e28 <_printf_i+0x14c>
 8039e10:	6823      	ldr	r3, [r4, #0]
 8039e12:	07df      	lsls	r7, r3, #31
 8039e14:	d508      	bpl.n	8039e28 <_printf_i+0x14c>
 8039e16:	6923      	ldr	r3, [r4, #16]
 8039e18:	6861      	ldr	r1, [r4, #4]
 8039e1a:	4299      	cmp	r1, r3
 8039e1c:	bfde      	ittt	le
 8039e1e:	2330      	movle	r3, #48	; 0x30
 8039e20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8039e24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8039e28:	1b92      	subs	r2, r2, r6
 8039e2a:	6122      	str	r2, [r4, #16]
 8039e2c:	f8cd a000 	str.w	sl, [sp]
 8039e30:	464b      	mov	r3, r9
 8039e32:	aa03      	add	r2, sp, #12
 8039e34:	4621      	mov	r1, r4
 8039e36:	4640      	mov	r0, r8
 8039e38:	f7ff fee2 	bl	8039c00 <_printf_common>
 8039e3c:	3001      	adds	r0, #1
 8039e3e:	d14c      	bne.n	8039eda <_printf_i+0x1fe>
 8039e40:	f04f 30ff 	mov.w	r0, #4294967295
 8039e44:	b004      	add	sp, #16
 8039e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8039e4a:	4835      	ldr	r0, [pc, #212]	; (8039f20 <_printf_i+0x244>)
 8039e4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8039e50:	6823      	ldr	r3, [r4, #0]
 8039e52:	680e      	ldr	r6, [r1, #0]
 8039e54:	061f      	lsls	r7, r3, #24
 8039e56:	f856 5b04 	ldr.w	r5, [r6], #4
 8039e5a:	600e      	str	r6, [r1, #0]
 8039e5c:	d514      	bpl.n	8039e88 <_printf_i+0x1ac>
 8039e5e:	07d9      	lsls	r1, r3, #31
 8039e60:	bf44      	itt	mi
 8039e62:	f043 0320 	orrmi.w	r3, r3, #32
 8039e66:	6023      	strmi	r3, [r4, #0]
 8039e68:	b91d      	cbnz	r5, 8039e72 <_printf_i+0x196>
 8039e6a:	6823      	ldr	r3, [r4, #0]
 8039e6c:	f023 0320 	bic.w	r3, r3, #32
 8039e70:	6023      	str	r3, [r4, #0]
 8039e72:	2310      	movs	r3, #16
 8039e74:	e7b0      	b.n	8039dd8 <_printf_i+0xfc>
 8039e76:	6823      	ldr	r3, [r4, #0]
 8039e78:	f043 0320 	orr.w	r3, r3, #32
 8039e7c:	6023      	str	r3, [r4, #0]
 8039e7e:	2378      	movs	r3, #120	; 0x78
 8039e80:	4828      	ldr	r0, [pc, #160]	; (8039f24 <_printf_i+0x248>)
 8039e82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8039e86:	e7e3      	b.n	8039e50 <_printf_i+0x174>
 8039e88:	065e      	lsls	r6, r3, #25
 8039e8a:	bf48      	it	mi
 8039e8c:	b2ad      	uxthmi	r5, r5
 8039e8e:	e7e6      	b.n	8039e5e <_printf_i+0x182>
 8039e90:	4616      	mov	r6, r2
 8039e92:	e7bb      	b.n	8039e0c <_printf_i+0x130>
 8039e94:	680b      	ldr	r3, [r1, #0]
 8039e96:	6826      	ldr	r6, [r4, #0]
 8039e98:	6960      	ldr	r0, [r4, #20]
 8039e9a:	1d1d      	adds	r5, r3, #4
 8039e9c:	600d      	str	r5, [r1, #0]
 8039e9e:	0635      	lsls	r5, r6, #24
 8039ea0:	681b      	ldr	r3, [r3, #0]
 8039ea2:	d501      	bpl.n	8039ea8 <_printf_i+0x1cc>
 8039ea4:	6018      	str	r0, [r3, #0]
 8039ea6:	e002      	b.n	8039eae <_printf_i+0x1d2>
 8039ea8:	0671      	lsls	r1, r6, #25
 8039eaa:	d5fb      	bpl.n	8039ea4 <_printf_i+0x1c8>
 8039eac:	8018      	strh	r0, [r3, #0]
 8039eae:	2300      	movs	r3, #0
 8039eb0:	6123      	str	r3, [r4, #16]
 8039eb2:	4616      	mov	r6, r2
 8039eb4:	e7ba      	b.n	8039e2c <_printf_i+0x150>
 8039eb6:	680b      	ldr	r3, [r1, #0]
 8039eb8:	1d1a      	adds	r2, r3, #4
 8039eba:	600a      	str	r2, [r1, #0]
 8039ebc:	681e      	ldr	r6, [r3, #0]
 8039ebe:	6862      	ldr	r2, [r4, #4]
 8039ec0:	2100      	movs	r1, #0
 8039ec2:	4630      	mov	r0, r6
 8039ec4:	f7e6 f98c 	bl	80201e0 <memchr>
 8039ec8:	b108      	cbz	r0, 8039ece <_printf_i+0x1f2>
 8039eca:	1b80      	subs	r0, r0, r6
 8039ecc:	6060      	str	r0, [r4, #4]
 8039ece:	6863      	ldr	r3, [r4, #4]
 8039ed0:	6123      	str	r3, [r4, #16]
 8039ed2:	2300      	movs	r3, #0
 8039ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8039ed8:	e7a8      	b.n	8039e2c <_printf_i+0x150>
 8039eda:	6923      	ldr	r3, [r4, #16]
 8039edc:	4632      	mov	r2, r6
 8039ede:	4649      	mov	r1, r9
 8039ee0:	4640      	mov	r0, r8
 8039ee2:	47d0      	blx	sl
 8039ee4:	3001      	adds	r0, #1
 8039ee6:	d0ab      	beq.n	8039e40 <_printf_i+0x164>
 8039ee8:	6823      	ldr	r3, [r4, #0]
 8039eea:	079b      	lsls	r3, r3, #30
 8039eec:	d413      	bmi.n	8039f16 <_printf_i+0x23a>
 8039eee:	68e0      	ldr	r0, [r4, #12]
 8039ef0:	9b03      	ldr	r3, [sp, #12]
 8039ef2:	4298      	cmp	r0, r3
 8039ef4:	bfb8      	it	lt
 8039ef6:	4618      	movlt	r0, r3
 8039ef8:	e7a4      	b.n	8039e44 <_printf_i+0x168>
 8039efa:	2301      	movs	r3, #1
 8039efc:	4632      	mov	r2, r6
 8039efe:	4649      	mov	r1, r9
 8039f00:	4640      	mov	r0, r8
 8039f02:	47d0      	blx	sl
 8039f04:	3001      	adds	r0, #1
 8039f06:	d09b      	beq.n	8039e40 <_printf_i+0x164>
 8039f08:	3501      	adds	r5, #1
 8039f0a:	68e3      	ldr	r3, [r4, #12]
 8039f0c:	9903      	ldr	r1, [sp, #12]
 8039f0e:	1a5b      	subs	r3, r3, r1
 8039f10:	42ab      	cmp	r3, r5
 8039f12:	dcf2      	bgt.n	8039efa <_printf_i+0x21e>
 8039f14:	e7eb      	b.n	8039eee <_printf_i+0x212>
 8039f16:	2500      	movs	r5, #0
 8039f18:	f104 0619 	add.w	r6, r4, #25
 8039f1c:	e7f5      	b.n	8039f0a <_printf_i+0x22e>
 8039f1e:	bf00      	nop
 8039f20:	0803e912 	.word	0x0803e912
 8039f24:	0803e923 	.word	0x0803e923

08039f28 <_scanf_float>:
 8039f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8039f2c:	b087      	sub	sp, #28
 8039f2e:	4617      	mov	r7, r2
 8039f30:	9303      	str	r3, [sp, #12]
 8039f32:	688b      	ldr	r3, [r1, #8]
 8039f34:	1e5a      	subs	r2, r3, #1
 8039f36:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8039f3a:	bf83      	ittte	hi
 8039f3c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8039f40:	195b      	addhi	r3, r3, r5
 8039f42:	9302      	strhi	r3, [sp, #8]
 8039f44:	2300      	movls	r3, #0
 8039f46:	bf86      	itte	hi
 8039f48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8039f4c:	608b      	strhi	r3, [r1, #8]
 8039f4e:	9302      	strls	r3, [sp, #8]
 8039f50:	680b      	ldr	r3, [r1, #0]
 8039f52:	468b      	mov	fp, r1
 8039f54:	2500      	movs	r5, #0
 8039f56:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8039f5a:	f84b 3b1c 	str.w	r3, [fp], #28
 8039f5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8039f62:	4680      	mov	r8, r0
 8039f64:	460c      	mov	r4, r1
 8039f66:	465e      	mov	r6, fp
 8039f68:	46aa      	mov	sl, r5
 8039f6a:	46a9      	mov	r9, r5
 8039f6c:	9501      	str	r5, [sp, #4]
 8039f6e:	68a2      	ldr	r2, [r4, #8]
 8039f70:	b152      	cbz	r2, 8039f88 <_scanf_float+0x60>
 8039f72:	683b      	ldr	r3, [r7, #0]
 8039f74:	781b      	ldrb	r3, [r3, #0]
 8039f76:	2b4e      	cmp	r3, #78	; 0x4e
 8039f78:	d864      	bhi.n	803a044 <_scanf_float+0x11c>
 8039f7a:	2b40      	cmp	r3, #64	; 0x40
 8039f7c:	d83c      	bhi.n	8039ff8 <_scanf_float+0xd0>
 8039f7e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8039f82:	b2c8      	uxtb	r0, r1
 8039f84:	280e      	cmp	r0, #14
 8039f86:	d93a      	bls.n	8039ffe <_scanf_float+0xd6>
 8039f88:	f1b9 0f00 	cmp.w	r9, #0
 8039f8c:	d003      	beq.n	8039f96 <_scanf_float+0x6e>
 8039f8e:	6823      	ldr	r3, [r4, #0]
 8039f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8039f94:	6023      	str	r3, [r4, #0]
 8039f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8039f9a:	f1ba 0f01 	cmp.w	sl, #1
 8039f9e:	f200 8113 	bhi.w	803a1c8 <_scanf_float+0x2a0>
 8039fa2:	455e      	cmp	r6, fp
 8039fa4:	f200 8105 	bhi.w	803a1b2 <_scanf_float+0x28a>
 8039fa8:	2501      	movs	r5, #1
 8039faa:	4628      	mov	r0, r5
 8039fac:	b007      	add	sp, #28
 8039fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8039fb2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8039fb6:	2a0d      	cmp	r2, #13
 8039fb8:	d8e6      	bhi.n	8039f88 <_scanf_float+0x60>
 8039fba:	a101      	add	r1, pc, #4	; (adr r1, 8039fc0 <_scanf_float+0x98>)
 8039fbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8039fc0:	0803a0ff 	.word	0x0803a0ff
 8039fc4:	08039f89 	.word	0x08039f89
 8039fc8:	08039f89 	.word	0x08039f89
 8039fcc:	08039f89 	.word	0x08039f89
 8039fd0:	0803a15f 	.word	0x0803a15f
 8039fd4:	0803a137 	.word	0x0803a137
 8039fd8:	08039f89 	.word	0x08039f89
 8039fdc:	08039f89 	.word	0x08039f89
 8039fe0:	0803a10d 	.word	0x0803a10d
 8039fe4:	08039f89 	.word	0x08039f89
 8039fe8:	08039f89 	.word	0x08039f89
 8039fec:	08039f89 	.word	0x08039f89
 8039ff0:	08039f89 	.word	0x08039f89
 8039ff4:	0803a0c5 	.word	0x0803a0c5
 8039ff8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8039ffc:	e7db      	b.n	8039fb6 <_scanf_float+0x8e>
 8039ffe:	290e      	cmp	r1, #14
 803a000:	d8c2      	bhi.n	8039f88 <_scanf_float+0x60>
 803a002:	a001      	add	r0, pc, #4	; (adr r0, 803a008 <_scanf_float+0xe0>)
 803a004:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 803a008:	0803a0b7 	.word	0x0803a0b7
 803a00c:	08039f89 	.word	0x08039f89
 803a010:	0803a0b7 	.word	0x0803a0b7
 803a014:	0803a14b 	.word	0x0803a14b
 803a018:	08039f89 	.word	0x08039f89
 803a01c:	0803a065 	.word	0x0803a065
 803a020:	0803a0a1 	.word	0x0803a0a1
 803a024:	0803a0a1 	.word	0x0803a0a1
 803a028:	0803a0a1 	.word	0x0803a0a1
 803a02c:	0803a0a1 	.word	0x0803a0a1
 803a030:	0803a0a1 	.word	0x0803a0a1
 803a034:	0803a0a1 	.word	0x0803a0a1
 803a038:	0803a0a1 	.word	0x0803a0a1
 803a03c:	0803a0a1 	.word	0x0803a0a1
 803a040:	0803a0a1 	.word	0x0803a0a1
 803a044:	2b6e      	cmp	r3, #110	; 0x6e
 803a046:	d809      	bhi.n	803a05c <_scanf_float+0x134>
 803a048:	2b60      	cmp	r3, #96	; 0x60
 803a04a:	d8b2      	bhi.n	8039fb2 <_scanf_float+0x8a>
 803a04c:	2b54      	cmp	r3, #84	; 0x54
 803a04e:	d077      	beq.n	803a140 <_scanf_float+0x218>
 803a050:	2b59      	cmp	r3, #89	; 0x59
 803a052:	d199      	bne.n	8039f88 <_scanf_float+0x60>
 803a054:	2d07      	cmp	r5, #7
 803a056:	d197      	bne.n	8039f88 <_scanf_float+0x60>
 803a058:	2508      	movs	r5, #8
 803a05a:	e029      	b.n	803a0b0 <_scanf_float+0x188>
 803a05c:	2b74      	cmp	r3, #116	; 0x74
 803a05e:	d06f      	beq.n	803a140 <_scanf_float+0x218>
 803a060:	2b79      	cmp	r3, #121	; 0x79
 803a062:	e7f6      	b.n	803a052 <_scanf_float+0x12a>
 803a064:	6821      	ldr	r1, [r4, #0]
 803a066:	05c8      	lsls	r0, r1, #23
 803a068:	d51a      	bpl.n	803a0a0 <_scanf_float+0x178>
 803a06a:	9b02      	ldr	r3, [sp, #8]
 803a06c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 803a070:	6021      	str	r1, [r4, #0]
 803a072:	f109 0901 	add.w	r9, r9, #1
 803a076:	b11b      	cbz	r3, 803a080 <_scanf_float+0x158>
 803a078:	3b01      	subs	r3, #1
 803a07a:	3201      	adds	r2, #1
 803a07c:	9302      	str	r3, [sp, #8]
 803a07e:	60a2      	str	r2, [r4, #8]
 803a080:	68a3      	ldr	r3, [r4, #8]
 803a082:	3b01      	subs	r3, #1
 803a084:	60a3      	str	r3, [r4, #8]
 803a086:	6923      	ldr	r3, [r4, #16]
 803a088:	3301      	adds	r3, #1
 803a08a:	6123      	str	r3, [r4, #16]
 803a08c:	687b      	ldr	r3, [r7, #4]
 803a08e:	3b01      	subs	r3, #1
 803a090:	2b00      	cmp	r3, #0
 803a092:	607b      	str	r3, [r7, #4]
 803a094:	f340 8084 	ble.w	803a1a0 <_scanf_float+0x278>
 803a098:	683b      	ldr	r3, [r7, #0]
 803a09a:	3301      	adds	r3, #1
 803a09c:	603b      	str	r3, [r7, #0]
 803a09e:	e766      	b.n	8039f6e <_scanf_float+0x46>
 803a0a0:	eb1a 0f05 	cmn.w	sl, r5
 803a0a4:	f47f af70 	bne.w	8039f88 <_scanf_float+0x60>
 803a0a8:	6822      	ldr	r2, [r4, #0]
 803a0aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 803a0ae:	6022      	str	r2, [r4, #0]
 803a0b0:	f806 3b01 	strb.w	r3, [r6], #1
 803a0b4:	e7e4      	b.n	803a080 <_scanf_float+0x158>
 803a0b6:	6822      	ldr	r2, [r4, #0]
 803a0b8:	0610      	lsls	r0, r2, #24
 803a0ba:	f57f af65 	bpl.w	8039f88 <_scanf_float+0x60>
 803a0be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 803a0c2:	e7f4      	b.n	803a0ae <_scanf_float+0x186>
 803a0c4:	f1ba 0f00 	cmp.w	sl, #0
 803a0c8:	d10e      	bne.n	803a0e8 <_scanf_float+0x1c0>
 803a0ca:	f1b9 0f00 	cmp.w	r9, #0
 803a0ce:	d10e      	bne.n	803a0ee <_scanf_float+0x1c6>
 803a0d0:	6822      	ldr	r2, [r4, #0]
 803a0d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 803a0d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 803a0da:	d108      	bne.n	803a0ee <_scanf_float+0x1c6>
 803a0dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 803a0e0:	6022      	str	r2, [r4, #0]
 803a0e2:	f04f 0a01 	mov.w	sl, #1
 803a0e6:	e7e3      	b.n	803a0b0 <_scanf_float+0x188>
 803a0e8:	f1ba 0f02 	cmp.w	sl, #2
 803a0ec:	d055      	beq.n	803a19a <_scanf_float+0x272>
 803a0ee:	2d01      	cmp	r5, #1
 803a0f0:	d002      	beq.n	803a0f8 <_scanf_float+0x1d0>
 803a0f2:	2d04      	cmp	r5, #4
 803a0f4:	f47f af48 	bne.w	8039f88 <_scanf_float+0x60>
 803a0f8:	3501      	adds	r5, #1
 803a0fa:	b2ed      	uxtb	r5, r5
 803a0fc:	e7d8      	b.n	803a0b0 <_scanf_float+0x188>
 803a0fe:	f1ba 0f01 	cmp.w	sl, #1
 803a102:	f47f af41 	bne.w	8039f88 <_scanf_float+0x60>
 803a106:	f04f 0a02 	mov.w	sl, #2
 803a10a:	e7d1      	b.n	803a0b0 <_scanf_float+0x188>
 803a10c:	b97d      	cbnz	r5, 803a12e <_scanf_float+0x206>
 803a10e:	f1b9 0f00 	cmp.w	r9, #0
 803a112:	f47f af3c 	bne.w	8039f8e <_scanf_float+0x66>
 803a116:	6822      	ldr	r2, [r4, #0]
 803a118:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 803a11c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 803a120:	f47f af39 	bne.w	8039f96 <_scanf_float+0x6e>
 803a124:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 803a128:	6022      	str	r2, [r4, #0]
 803a12a:	2501      	movs	r5, #1
 803a12c:	e7c0      	b.n	803a0b0 <_scanf_float+0x188>
 803a12e:	2d03      	cmp	r5, #3
 803a130:	d0e2      	beq.n	803a0f8 <_scanf_float+0x1d0>
 803a132:	2d05      	cmp	r5, #5
 803a134:	e7de      	b.n	803a0f4 <_scanf_float+0x1cc>
 803a136:	2d02      	cmp	r5, #2
 803a138:	f47f af26 	bne.w	8039f88 <_scanf_float+0x60>
 803a13c:	2503      	movs	r5, #3
 803a13e:	e7b7      	b.n	803a0b0 <_scanf_float+0x188>
 803a140:	2d06      	cmp	r5, #6
 803a142:	f47f af21 	bne.w	8039f88 <_scanf_float+0x60>
 803a146:	2507      	movs	r5, #7
 803a148:	e7b2      	b.n	803a0b0 <_scanf_float+0x188>
 803a14a:	6822      	ldr	r2, [r4, #0]
 803a14c:	0591      	lsls	r1, r2, #22
 803a14e:	f57f af1b 	bpl.w	8039f88 <_scanf_float+0x60>
 803a152:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 803a156:	6022      	str	r2, [r4, #0]
 803a158:	f8cd 9004 	str.w	r9, [sp, #4]
 803a15c:	e7a8      	b.n	803a0b0 <_scanf_float+0x188>
 803a15e:	6822      	ldr	r2, [r4, #0]
 803a160:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 803a164:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 803a168:	d006      	beq.n	803a178 <_scanf_float+0x250>
 803a16a:	0550      	lsls	r0, r2, #21
 803a16c:	f57f af0c 	bpl.w	8039f88 <_scanf_float+0x60>
 803a170:	f1b9 0f00 	cmp.w	r9, #0
 803a174:	f43f af0f 	beq.w	8039f96 <_scanf_float+0x6e>
 803a178:	0591      	lsls	r1, r2, #22
 803a17a:	bf58      	it	pl
 803a17c:	9901      	ldrpl	r1, [sp, #4]
 803a17e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 803a182:	bf58      	it	pl
 803a184:	eba9 0101 	subpl.w	r1, r9, r1
 803a188:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 803a18c:	bf58      	it	pl
 803a18e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 803a192:	6022      	str	r2, [r4, #0]
 803a194:	f04f 0900 	mov.w	r9, #0
 803a198:	e78a      	b.n	803a0b0 <_scanf_float+0x188>
 803a19a:	f04f 0a03 	mov.w	sl, #3
 803a19e:	e787      	b.n	803a0b0 <_scanf_float+0x188>
 803a1a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 803a1a4:	4639      	mov	r1, r7
 803a1a6:	4640      	mov	r0, r8
 803a1a8:	4798      	blx	r3
 803a1aa:	2800      	cmp	r0, #0
 803a1ac:	f43f aedf 	beq.w	8039f6e <_scanf_float+0x46>
 803a1b0:	e6ea      	b.n	8039f88 <_scanf_float+0x60>
 803a1b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 803a1b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 803a1ba:	463a      	mov	r2, r7
 803a1bc:	4640      	mov	r0, r8
 803a1be:	4798      	blx	r3
 803a1c0:	6923      	ldr	r3, [r4, #16]
 803a1c2:	3b01      	subs	r3, #1
 803a1c4:	6123      	str	r3, [r4, #16]
 803a1c6:	e6ec      	b.n	8039fa2 <_scanf_float+0x7a>
 803a1c8:	1e6b      	subs	r3, r5, #1
 803a1ca:	2b06      	cmp	r3, #6
 803a1cc:	d825      	bhi.n	803a21a <_scanf_float+0x2f2>
 803a1ce:	2d02      	cmp	r5, #2
 803a1d0:	d836      	bhi.n	803a240 <_scanf_float+0x318>
 803a1d2:	455e      	cmp	r6, fp
 803a1d4:	f67f aee8 	bls.w	8039fa8 <_scanf_float+0x80>
 803a1d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 803a1dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 803a1e0:	463a      	mov	r2, r7
 803a1e2:	4640      	mov	r0, r8
 803a1e4:	4798      	blx	r3
 803a1e6:	6923      	ldr	r3, [r4, #16]
 803a1e8:	3b01      	subs	r3, #1
 803a1ea:	6123      	str	r3, [r4, #16]
 803a1ec:	e7f1      	b.n	803a1d2 <_scanf_float+0x2aa>
 803a1ee:	9802      	ldr	r0, [sp, #8]
 803a1f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 803a1f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 803a1f8:	9002      	str	r0, [sp, #8]
 803a1fa:	463a      	mov	r2, r7
 803a1fc:	4640      	mov	r0, r8
 803a1fe:	4798      	blx	r3
 803a200:	6923      	ldr	r3, [r4, #16]
 803a202:	3b01      	subs	r3, #1
 803a204:	6123      	str	r3, [r4, #16]
 803a206:	f10a 3aff 	add.w	sl, sl, #4294967295
 803a20a:	fa5f fa8a 	uxtb.w	sl, sl
 803a20e:	f1ba 0f02 	cmp.w	sl, #2
 803a212:	d1ec      	bne.n	803a1ee <_scanf_float+0x2c6>
 803a214:	3d03      	subs	r5, #3
 803a216:	b2ed      	uxtb	r5, r5
 803a218:	1b76      	subs	r6, r6, r5
 803a21a:	6823      	ldr	r3, [r4, #0]
 803a21c:	05da      	lsls	r2, r3, #23
 803a21e:	d52f      	bpl.n	803a280 <_scanf_float+0x358>
 803a220:	055b      	lsls	r3, r3, #21
 803a222:	d510      	bpl.n	803a246 <_scanf_float+0x31e>
 803a224:	455e      	cmp	r6, fp
 803a226:	f67f aebf 	bls.w	8039fa8 <_scanf_float+0x80>
 803a22a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 803a22e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 803a232:	463a      	mov	r2, r7
 803a234:	4640      	mov	r0, r8
 803a236:	4798      	blx	r3
 803a238:	6923      	ldr	r3, [r4, #16]
 803a23a:	3b01      	subs	r3, #1
 803a23c:	6123      	str	r3, [r4, #16]
 803a23e:	e7f1      	b.n	803a224 <_scanf_float+0x2fc>
 803a240:	46aa      	mov	sl, r5
 803a242:	9602      	str	r6, [sp, #8]
 803a244:	e7df      	b.n	803a206 <_scanf_float+0x2de>
 803a246:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 803a24a:	6923      	ldr	r3, [r4, #16]
 803a24c:	2965      	cmp	r1, #101	; 0x65
 803a24e:	f103 33ff 	add.w	r3, r3, #4294967295
 803a252:	f106 35ff 	add.w	r5, r6, #4294967295
 803a256:	6123      	str	r3, [r4, #16]
 803a258:	d00c      	beq.n	803a274 <_scanf_float+0x34c>
 803a25a:	2945      	cmp	r1, #69	; 0x45
 803a25c:	d00a      	beq.n	803a274 <_scanf_float+0x34c>
 803a25e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 803a262:	463a      	mov	r2, r7
 803a264:	4640      	mov	r0, r8
 803a266:	4798      	blx	r3
 803a268:	6923      	ldr	r3, [r4, #16]
 803a26a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 803a26e:	3b01      	subs	r3, #1
 803a270:	1eb5      	subs	r5, r6, #2
 803a272:	6123      	str	r3, [r4, #16]
 803a274:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 803a278:	463a      	mov	r2, r7
 803a27a:	4640      	mov	r0, r8
 803a27c:	4798      	blx	r3
 803a27e:	462e      	mov	r6, r5
 803a280:	6825      	ldr	r5, [r4, #0]
 803a282:	f015 0510 	ands.w	r5, r5, #16
 803a286:	d158      	bne.n	803a33a <_scanf_float+0x412>
 803a288:	7035      	strb	r5, [r6, #0]
 803a28a:	6823      	ldr	r3, [r4, #0]
 803a28c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 803a290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 803a294:	d11c      	bne.n	803a2d0 <_scanf_float+0x3a8>
 803a296:	9b01      	ldr	r3, [sp, #4]
 803a298:	454b      	cmp	r3, r9
 803a29a:	eba3 0209 	sub.w	r2, r3, r9
 803a29e:	d124      	bne.n	803a2ea <_scanf_float+0x3c2>
 803a2a0:	2200      	movs	r2, #0
 803a2a2:	4659      	mov	r1, fp
 803a2a4:	4640      	mov	r0, r8
 803a2a6:	f000 ff01 	bl	803b0ac <_strtod_r>
 803a2aa:	9b03      	ldr	r3, [sp, #12]
 803a2ac:	6821      	ldr	r1, [r4, #0]
 803a2ae:	681b      	ldr	r3, [r3, #0]
 803a2b0:	f011 0f02 	tst.w	r1, #2
 803a2b4:	ec57 6b10 	vmov	r6, r7, d0
 803a2b8:	f103 0204 	add.w	r2, r3, #4
 803a2bc:	d020      	beq.n	803a300 <_scanf_float+0x3d8>
 803a2be:	9903      	ldr	r1, [sp, #12]
 803a2c0:	600a      	str	r2, [r1, #0]
 803a2c2:	681b      	ldr	r3, [r3, #0]
 803a2c4:	e9c3 6700 	strd	r6, r7, [r3]
 803a2c8:	68e3      	ldr	r3, [r4, #12]
 803a2ca:	3301      	adds	r3, #1
 803a2cc:	60e3      	str	r3, [r4, #12]
 803a2ce:	e66c      	b.n	8039faa <_scanf_float+0x82>
 803a2d0:	9b04      	ldr	r3, [sp, #16]
 803a2d2:	2b00      	cmp	r3, #0
 803a2d4:	d0e4      	beq.n	803a2a0 <_scanf_float+0x378>
 803a2d6:	9905      	ldr	r1, [sp, #20]
 803a2d8:	230a      	movs	r3, #10
 803a2da:	462a      	mov	r2, r5
 803a2dc:	3101      	adds	r1, #1
 803a2de:	4640      	mov	r0, r8
 803a2e0:	f000 ff6e 	bl	803b1c0 <_strtol_r>
 803a2e4:	9b04      	ldr	r3, [sp, #16]
 803a2e6:	9e05      	ldr	r6, [sp, #20]
 803a2e8:	1ac2      	subs	r2, r0, r3
 803a2ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 803a2ee:	429e      	cmp	r6, r3
 803a2f0:	bf28      	it	cs
 803a2f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 803a2f6:	4912      	ldr	r1, [pc, #72]	; (803a340 <_scanf_float+0x418>)
 803a2f8:	4630      	mov	r0, r6
 803a2fa:	f000 f83b 	bl	803a374 <siprintf>
 803a2fe:	e7cf      	b.n	803a2a0 <_scanf_float+0x378>
 803a300:	f011 0f04 	tst.w	r1, #4
 803a304:	9903      	ldr	r1, [sp, #12]
 803a306:	600a      	str	r2, [r1, #0]
 803a308:	d1db      	bne.n	803a2c2 <_scanf_float+0x39a>
 803a30a:	f8d3 8000 	ldr.w	r8, [r3]
 803a30e:	ee10 2a10 	vmov	r2, s0
 803a312:	ee10 0a10 	vmov	r0, s0
 803a316:	463b      	mov	r3, r7
 803a318:	4639      	mov	r1, r7
 803a31a:	f7e6 fc07 	bl	8020b2c <__aeabi_dcmpun>
 803a31e:	b128      	cbz	r0, 803a32c <_scanf_float+0x404>
 803a320:	4808      	ldr	r0, [pc, #32]	; (803a344 <_scanf_float+0x41c>)
 803a322:	f000 f821 	bl	803a368 <nanf>
 803a326:	ed88 0a00 	vstr	s0, [r8]
 803a32a:	e7cd      	b.n	803a2c8 <_scanf_float+0x3a0>
 803a32c:	4630      	mov	r0, r6
 803a32e:	4639      	mov	r1, r7
 803a330:	f7e6 fc5a 	bl	8020be8 <__aeabi_d2f>
 803a334:	f8c8 0000 	str.w	r0, [r8]
 803a338:	e7c6      	b.n	803a2c8 <_scanf_float+0x3a0>
 803a33a:	2500      	movs	r5, #0
 803a33c:	e635      	b.n	8039faa <_scanf_float+0x82>
 803a33e:	bf00      	nop
 803a340:	0803e934 	.word	0x0803e934
 803a344:	0803ed50 	.word	0x0803ed50

0803a348 <_sbrk_r>:
 803a348:	b538      	push	{r3, r4, r5, lr}
 803a34a:	4d06      	ldr	r5, [pc, #24]	; (803a364 <_sbrk_r+0x1c>)
 803a34c:	2300      	movs	r3, #0
 803a34e:	4604      	mov	r4, r0
 803a350:	4608      	mov	r0, r1
 803a352:	602b      	str	r3, [r5, #0]
 803a354:	f7f7 fc08 	bl	8031b68 <_sbrk>
 803a358:	1c43      	adds	r3, r0, #1
 803a35a:	d102      	bne.n	803a362 <_sbrk_r+0x1a>
 803a35c:	682b      	ldr	r3, [r5, #0]
 803a35e:	b103      	cbz	r3, 803a362 <_sbrk_r+0x1a>
 803a360:	6023      	str	r3, [r4, #0]
 803a362:	bd38      	pop	{r3, r4, r5, pc}
 803a364:	200009c4 	.word	0x200009c4

0803a368 <nanf>:
 803a368:	ed9f 0a01 	vldr	s0, [pc, #4]	; 803a370 <nanf+0x8>
 803a36c:	4770      	bx	lr
 803a36e:	bf00      	nop
 803a370:	7fc00000 	.word	0x7fc00000

0803a374 <siprintf>:
 803a374:	b40e      	push	{r1, r2, r3}
 803a376:	b500      	push	{lr}
 803a378:	b09c      	sub	sp, #112	; 0x70
 803a37a:	ab1d      	add	r3, sp, #116	; 0x74
 803a37c:	9002      	str	r0, [sp, #8]
 803a37e:	9006      	str	r0, [sp, #24]
 803a380:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 803a384:	4809      	ldr	r0, [pc, #36]	; (803a3ac <siprintf+0x38>)
 803a386:	9107      	str	r1, [sp, #28]
 803a388:	9104      	str	r1, [sp, #16]
 803a38a:	4909      	ldr	r1, [pc, #36]	; (803a3b0 <siprintf+0x3c>)
 803a38c:	f853 2b04 	ldr.w	r2, [r3], #4
 803a390:	9105      	str	r1, [sp, #20]
 803a392:	6800      	ldr	r0, [r0, #0]
 803a394:	9301      	str	r3, [sp, #4]
 803a396:	a902      	add	r1, sp, #8
 803a398:	f002 fea2 	bl	803d0e0 <_svfiprintf_r>
 803a39c:	9b02      	ldr	r3, [sp, #8]
 803a39e:	2200      	movs	r2, #0
 803a3a0:	701a      	strb	r2, [r3, #0]
 803a3a2:	b01c      	add	sp, #112	; 0x70
 803a3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 803a3a8:	b003      	add	sp, #12
 803a3aa:	4770      	bx	lr
 803a3ac:	2000002c 	.word	0x2000002c
 803a3b0:	ffff0208 	.word	0xffff0208

0803a3b4 <__sread>:
 803a3b4:	b510      	push	{r4, lr}
 803a3b6:	460c      	mov	r4, r1
 803a3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803a3bc:	f002 ff90 	bl	803d2e0 <_read_r>
 803a3c0:	2800      	cmp	r0, #0
 803a3c2:	bfab      	itete	ge
 803a3c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 803a3c6:	89a3      	ldrhlt	r3, [r4, #12]
 803a3c8:	181b      	addge	r3, r3, r0
 803a3ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 803a3ce:	bfac      	ite	ge
 803a3d0:	6563      	strge	r3, [r4, #84]	; 0x54
 803a3d2:	81a3      	strhlt	r3, [r4, #12]
 803a3d4:	bd10      	pop	{r4, pc}

0803a3d6 <__swrite>:
 803a3d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803a3da:	461f      	mov	r7, r3
 803a3dc:	898b      	ldrh	r3, [r1, #12]
 803a3de:	05db      	lsls	r3, r3, #23
 803a3e0:	4605      	mov	r5, r0
 803a3e2:	460c      	mov	r4, r1
 803a3e4:	4616      	mov	r6, r2
 803a3e6:	d505      	bpl.n	803a3f4 <__swrite+0x1e>
 803a3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803a3ec:	2302      	movs	r3, #2
 803a3ee:	2200      	movs	r2, #0
 803a3f0:	f002 f918 	bl	803c624 <_lseek_r>
 803a3f4:	89a3      	ldrh	r3, [r4, #12]
 803a3f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 803a3fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 803a3fe:	81a3      	strh	r3, [r4, #12]
 803a400:	4632      	mov	r2, r6
 803a402:	463b      	mov	r3, r7
 803a404:	4628      	mov	r0, r5
 803a406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 803a40a:	f000 bedb 	b.w	803b1c4 <_write_r>

0803a40e <__sseek>:
 803a40e:	b510      	push	{r4, lr}
 803a410:	460c      	mov	r4, r1
 803a412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803a416:	f002 f905 	bl	803c624 <_lseek_r>
 803a41a:	1c43      	adds	r3, r0, #1
 803a41c:	89a3      	ldrh	r3, [r4, #12]
 803a41e:	bf15      	itete	ne
 803a420:	6560      	strne	r0, [r4, #84]	; 0x54
 803a422:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 803a426:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 803a42a:	81a3      	strheq	r3, [r4, #12]
 803a42c:	bf18      	it	ne
 803a42e:	81a3      	strhne	r3, [r4, #12]
 803a430:	bd10      	pop	{r4, pc}

0803a432 <__sclose>:
 803a432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 803a436:	f000 bed7 	b.w	803b1e8 <_close_r>

0803a43a <strncmp>:
 803a43a:	b510      	push	{r4, lr}
 803a43c:	b16a      	cbz	r2, 803a45a <strncmp+0x20>
 803a43e:	3901      	subs	r1, #1
 803a440:	1884      	adds	r4, r0, r2
 803a442:	f810 3b01 	ldrb.w	r3, [r0], #1
 803a446:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 803a44a:	4293      	cmp	r3, r2
 803a44c:	d103      	bne.n	803a456 <strncmp+0x1c>
 803a44e:	42a0      	cmp	r0, r4
 803a450:	d001      	beq.n	803a456 <strncmp+0x1c>
 803a452:	2b00      	cmp	r3, #0
 803a454:	d1f5      	bne.n	803a442 <strncmp+0x8>
 803a456:	1a98      	subs	r0, r3, r2
 803a458:	bd10      	pop	{r4, pc}
 803a45a:	4610      	mov	r0, r2
 803a45c:	e7fc      	b.n	803a458 <strncmp+0x1e>

0803a45e <sulp>:
 803a45e:	b570      	push	{r4, r5, r6, lr}
 803a460:	4604      	mov	r4, r0
 803a462:	460d      	mov	r5, r1
 803a464:	ec45 4b10 	vmov	d0, r4, r5
 803a468:	4616      	mov	r6, r2
 803a46a:	f002 fc7f 	bl	803cd6c <__ulp>
 803a46e:	ec51 0b10 	vmov	r0, r1, d0
 803a472:	b17e      	cbz	r6, 803a494 <sulp+0x36>
 803a474:	f3c5 530a 	ubfx	r3, r5, #20, #11
 803a478:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 803a47c:	2b00      	cmp	r3, #0
 803a47e:	dd09      	ble.n	803a494 <sulp+0x36>
 803a480:	051b      	lsls	r3, r3, #20
 803a482:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 803a486:	2400      	movs	r4, #0
 803a488:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 803a48c:	4622      	mov	r2, r4
 803a48e:	462b      	mov	r3, r5
 803a490:	f7e6 f8b2 	bl	80205f8 <__aeabi_dmul>
 803a494:	bd70      	pop	{r4, r5, r6, pc}
	...

0803a498 <_strtod_l>:
 803a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803a49c:	b0a3      	sub	sp, #140	; 0x8c
 803a49e:	461f      	mov	r7, r3
 803a4a0:	2300      	movs	r3, #0
 803a4a2:	931e      	str	r3, [sp, #120]	; 0x78
 803a4a4:	4ba4      	ldr	r3, [pc, #656]	; (803a738 <_strtod_l+0x2a0>)
 803a4a6:	9219      	str	r2, [sp, #100]	; 0x64
 803a4a8:	681b      	ldr	r3, [r3, #0]
 803a4aa:	9307      	str	r3, [sp, #28]
 803a4ac:	4604      	mov	r4, r0
 803a4ae:	4618      	mov	r0, r3
 803a4b0:	4688      	mov	r8, r1
 803a4b2:	f7e5 fe8d 	bl	80201d0 <strlen>
 803a4b6:	f04f 0a00 	mov.w	sl, #0
 803a4ba:	4605      	mov	r5, r0
 803a4bc:	f04f 0b00 	mov.w	fp, #0
 803a4c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 803a4c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803a4c6:	781a      	ldrb	r2, [r3, #0]
 803a4c8:	2a2b      	cmp	r2, #43	; 0x2b
 803a4ca:	d04c      	beq.n	803a566 <_strtod_l+0xce>
 803a4cc:	d839      	bhi.n	803a542 <_strtod_l+0xaa>
 803a4ce:	2a0d      	cmp	r2, #13
 803a4d0:	d832      	bhi.n	803a538 <_strtod_l+0xa0>
 803a4d2:	2a08      	cmp	r2, #8
 803a4d4:	d832      	bhi.n	803a53c <_strtod_l+0xa4>
 803a4d6:	2a00      	cmp	r2, #0
 803a4d8:	d03c      	beq.n	803a554 <_strtod_l+0xbc>
 803a4da:	2300      	movs	r3, #0
 803a4dc:	930e      	str	r3, [sp, #56]	; 0x38
 803a4de:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 803a4e0:	7833      	ldrb	r3, [r6, #0]
 803a4e2:	2b30      	cmp	r3, #48	; 0x30
 803a4e4:	f040 80b4 	bne.w	803a650 <_strtod_l+0x1b8>
 803a4e8:	7873      	ldrb	r3, [r6, #1]
 803a4ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 803a4ee:	2b58      	cmp	r3, #88	; 0x58
 803a4f0:	d16c      	bne.n	803a5cc <_strtod_l+0x134>
 803a4f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 803a4f4:	9301      	str	r3, [sp, #4]
 803a4f6:	ab1e      	add	r3, sp, #120	; 0x78
 803a4f8:	9702      	str	r7, [sp, #8]
 803a4fa:	9300      	str	r3, [sp, #0]
 803a4fc:	4a8f      	ldr	r2, [pc, #572]	; (803a73c <_strtod_l+0x2a4>)
 803a4fe:	ab1f      	add	r3, sp, #124	; 0x7c
 803a500:	a91d      	add	r1, sp, #116	; 0x74
 803a502:	4620      	mov	r0, r4
 803a504:	f001 fd72 	bl	803bfec <__gethex>
 803a508:	f010 0707 	ands.w	r7, r0, #7
 803a50c:	4605      	mov	r5, r0
 803a50e:	d005      	beq.n	803a51c <_strtod_l+0x84>
 803a510:	2f06      	cmp	r7, #6
 803a512:	d12a      	bne.n	803a56a <_strtod_l+0xd2>
 803a514:	3601      	adds	r6, #1
 803a516:	2300      	movs	r3, #0
 803a518:	961d      	str	r6, [sp, #116]	; 0x74
 803a51a:	930e      	str	r3, [sp, #56]	; 0x38
 803a51c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 803a51e:	2b00      	cmp	r3, #0
 803a520:	f040 8596 	bne.w	803b050 <_strtod_l+0xbb8>
 803a524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 803a526:	b1db      	cbz	r3, 803a560 <_strtod_l+0xc8>
 803a528:	4652      	mov	r2, sl
 803a52a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 803a52e:	ec43 2b10 	vmov	d0, r2, r3
 803a532:	b023      	add	sp, #140	; 0x8c
 803a534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803a538:	2a20      	cmp	r2, #32
 803a53a:	d1ce      	bne.n	803a4da <_strtod_l+0x42>
 803a53c:	3301      	adds	r3, #1
 803a53e:	931d      	str	r3, [sp, #116]	; 0x74
 803a540:	e7c0      	b.n	803a4c4 <_strtod_l+0x2c>
 803a542:	2a2d      	cmp	r2, #45	; 0x2d
 803a544:	d1c9      	bne.n	803a4da <_strtod_l+0x42>
 803a546:	2201      	movs	r2, #1
 803a548:	920e      	str	r2, [sp, #56]	; 0x38
 803a54a:	1c5a      	adds	r2, r3, #1
 803a54c:	921d      	str	r2, [sp, #116]	; 0x74
 803a54e:	785b      	ldrb	r3, [r3, #1]
 803a550:	2b00      	cmp	r3, #0
 803a552:	d1c4      	bne.n	803a4de <_strtod_l+0x46>
 803a554:	9b19      	ldr	r3, [sp, #100]	; 0x64
 803a556:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 803a55a:	2b00      	cmp	r3, #0
 803a55c:	f040 8576 	bne.w	803b04c <_strtod_l+0xbb4>
 803a560:	4652      	mov	r2, sl
 803a562:	465b      	mov	r3, fp
 803a564:	e7e3      	b.n	803a52e <_strtod_l+0x96>
 803a566:	2200      	movs	r2, #0
 803a568:	e7ee      	b.n	803a548 <_strtod_l+0xb0>
 803a56a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 803a56c:	b13a      	cbz	r2, 803a57e <_strtod_l+0xe6>
 803a56e:	2135      	movs	r1, #53	; 0x35
 803a570:	a820      	add	r0, sp, #128	; 0x80
 803a572:	f002 fd06 	bl	803cf82 <__copybits>
 803a576:	991e      	ldr	r1, [sp, #120]	; 0x78
 803a578:	4620      	mov	r0, r4
 803a57a:	f002 f8cb 	bl	803c714 <_Bfree>
 803a57e:	3f01      	subs	r7, #1
 803a580:	2f05      	cmp	r7, #5
 803a582:	d807      	bhi.n	803a594 <_strtod_l+0xfc>
 803a584:	e8df f007 	tbb	[pc, r7]
 803a588:	1d180b0e 	.word	0x1d180b0e
 803a58c:	030e      	.short	0x030e
 803a58e:	f04f 0b00 	mov.w	fp, #0
 803a592:	46da      	mov	sl, fp
 803a594:	0728      	lsls	r0, r5, #28
 803a596:	d5c1      	bpl.n	803a51c <_strtod_l+0x84>
 803a598:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 803a59c:	e7be      	b.n	803a51c <_strtod_l+0x84>
 803a59e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 803a5a2:	e7f7      	b.n	803a594 <_strtod_l+0xfc>
 803a5a4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 803a5a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 803a5aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 803a5ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 803a5b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 803a5b6:	e7ed      	b.n	803a594 <_strtod_l+0xfc>
 803a5b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 803a740 <_strtod_l+0x2a8>
 803a5bc:	f04f 0a00 	mov.w	sl, #0
 803a5c0:	e7e8      	b.n	803a594 <_strtod_l+0xfc>
 803a5c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 803a5c6:	f04f 3aff 	mov.w	sl, #4294967295
 803a5ca:	e7e3      	b.n	803a594 <_strtod_l+0xfc>
 803a5cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803a5ce:	1c5a      	adds	r2, r3, #1
 803a5d0:	921d      	str	r2, [sp, #116]	; 0x74
 803a5d2:	785b      	ldrb	r3, [r3, #1]
 803a5d4:	2b30      	cmp	r3, #48	; 0x30
 803a5d6:	d0f9      	beq.n	803a5cc <_strtod_l+0x134>
 803a5d8:	2b00      	cmp	r3, #0
 803a5da:	d09f      	beq.n	803a51c <_strtod_l+0x84>
 803a5dc:	2301      	movs	r3, #1
 803a5de:	f04f 0900 	mov.w	r9, #0
 803a5e2:	9304      	str	r3, [sp, #16]
 803a5e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803a5e6:	930a      	str	r3, [sp, #40]	; 0x28
 803a5e8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 803a5ec:	464f      	mov	r7, r9
 803a5ee:	220a      	movs	r2, #10
 803a5f0:	981d      	ldr	r0, [sp, #116]	; 0x74
 803a5f2:	7806      	ldrb	r6, [r0, #0]
 803a5f4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 803a5f8:	b2d9      	uxtb	r1, r3
 803a5fa:	2909      	cmp	r1, #9
 803a5fc:	d92a      	bls.n	803a654 <_strtod_l+0x1bc>
 803a5fe:	9907      	ldr	r1, [sp, #28]
 803a600:	462a      	mov	r2, r5
 803a602:	f7ff ff1a 	bl	803a43a <strncmp>
 803a606:	b398      	cbz	r0, 803a670 <_strtod_l+0x1d8>
 803a608:	2000      	movs	r0, #0
 803a60a:	4633      	mov	r3, r6
 803a60c:	463d      	mov	r5, r7
 803a60e:	9007      	str	r0, [sp, #28]
 803a610:	4602      	mov	r2, r0
 803a612:	2b65      	cmp	r3, #101	; 0x65
 803a614:	d001      	beq.n	803a61a <_strtod_l+0x182>
 803a616:	2b45      	cmp	r3, #69	; 0x45
 803a618:	d118      	bne.n	803a64c <_strtod_l+0x1b4>
 803a61a:	b91d      	cbnz	r5, 803a624 <_strtod_l+0x18c>
 803a61c:	9b04      	ldr	r3, [sp, #16]
 803a61e:	4303      	orrs	r3, r0
 803a620:	d098      	beq.n	803a554 <_strtod_l+0xbc>
 803a622:	2500      	movs	r5, #0
 803a624:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 803a628:	f108 0301 	add.w	r3, r8, #1
 803a62c:	931d      	str	r3, [sp, #116]	; 0x74
 803a62e:	f898 3001 	ldrb.w	r3, [r8, #1]
 803a632:	2b2b      	cmp	r3, #43	; 0x2b
 803a634:	d075      	beq.n	803a722 <_strtod_l+0x28a>
 803a636:	2b2d      	cmp	r3, #45	; 0x2d
 803a638:	d07b      	beq.n	803a732 <_strtod_l+0x29a>
 803a63a:	f04f 0c00 	mov.w	ip, #0
 803a63e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 803a642:	2909      	cmp	r1, #9
 803a644:	f240 8082 	bls.w	803a74c <_strtod_l+0x2b4>
 803a648:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 803a64c:	2600      	movs	r6, #0
 803a64e:	e09d      	b.n	803a78c <_strtod_l+0x2f4>
 803a650:	2300      	movs	r3, #0
 803a652:	e7c4      	b.n	803a5de <_strtod_l+0x146>
 803a654:	2f08      	cmp	r7, #8
 803a656:	bfd8      	it	le
 803a658:	9909      	ldrle	r1, [sp, #36]	; 0x24
 803a65a:	f100 0001 	add.w	r0, r0, #1
 803a65e:	bfda      	itte	le
 803a660:	fb02 3301 	mlale	r3, r2, r1, r3
 803a664:	9309      	strle	r3, [sp, #36]	; 0x24
 803a666:	fb02 3909 	mlagt	r9, r2, r9, r3
 803a66a:	3701      	adds	r7, #1
 803a66c:	901d      	str	r0, [sp, #116]	; 0x74
 803a66e:	e7bf      	b.n	803a5f0 <_strtod_l+0x158>
 803a670:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803a672:	195a      	adds	r2, r3, r5
 803a674:	921d      	str	r2, [sp, #116]	; 0x74
 803a676:	5d5b      	ldrb	r3, [r3, r5]
 803a678:	2f00      	cmp	r7, #0
 803a67a:	d037      	beq.n	803a6ec <_strtod_l+0x254>
 803a67c:	9007      	str	r0, [sp, #28]
 803a67e:	463d      	mov	r5, r7
 803a680:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 803a684:	2a09      	cmp	r2, #9
 803a686:	d912      	bls.n	803a6ae <_strtod_l+0x216>
 803a688:	2201      	movs	r2, #1
 803a68a:	e7c2      	b.n	803a612 <_strtod_l+0x17a>
 803a68c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803a68e:	1c5a      	adds	r2, r3, #1
 803a690:	921d      	str	r2, [sp, #116]	; 0x74
 803a692:	785b      	ldrb	r3, [r3, #1]
 803a694:	3001      	adds	r0, #1
 803a696:	2b30      	cmp	r3, #48	; 0x30
 803a698:	d0f8      	beq.n	803a68c <_strtod_l+0x1f4>
 803a69a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 803a69e:	2a08      	cmp	r2, #8
 803a6a0:	f200 84db 	bhi.w	803b05a <_strtod_l+0xbc2>
 803a6a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 803a6a6:	9007      	str	r0, [sp, #28]
 803a6a8:	2000      	movs	r0, #0
 803a6aa:	920a      	str	r2, [sp, #40]	; 0x28
 803a6ac:	4605      	mov	r5, r0
 803a6ae:	3b30      	subs	r3, #48	; 0x30
 803a6b0:	f100 0201 	add.w	r2, r0, #1
 803a6b4:	d014      	beq.n	803a6e0 <_strtod_l+0x248>
 803a6b6:	9907      	ldr	r1, [sp, #28]
 803a6b8:	4411      	add	r1, r2
 803a6ba:	9107      	str	r1, [sp, #28]
 803a6bc:	462a      	mov	r2, r5
 803a6be:	eb00 0e05 	add.w	lr, r0, r5
 803a6c2:	210a      	movs	r1, #10
 803a6c4:	4572      	cmp	r2, lr
 803a6c6:	d113      	bne.n	803a6f0 <_strtod_l+0x258>
 803a6c8:	182a      	adds	r2, r5, r0
 803a6ca:	2a08      	cmp	r2, #8
 803a6cc:	f105 0501 	add.w	r5, r5, #1
 803a6d0:	4405      	add	r5, r0
 803a6d2:	dc1c      	bgt.n	803a70e <_strtod_l+0x276>
 803a6d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 803a6d6:	220a      	movs	r2, #10
 803a6d8:	fb02 3301 	mla	r3, r2, r1, r3
 803a6dc:	9309      	str	r3, [sp, #36]	; 0x24
 803a6de:	2200      	movs	r2, #0
 803a6e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803a6e2:	1c59      	adds	r1, r3, #1
 803a6e4:	911d      	str	r1, [sp, #116]	; 0x74
 803a6e6:	785b      	ldrb	r3, [r3, #1]
 803a6e8:	4610      	mov	r0, r2
 803a6ea:	e7c9      	b.n	803a680 <_strtod_l+0x1e8>
 803a6ec:	4638      	mov	r0, r7
 803a6ee:	e7d2      	b.n	803a696 <_strtod_l+0x1fe>
 803a6f0:	2a08      	cmp	r2, #8
 803a6f2:	dc04      	bgt.n	803a6fe <_strtod_l+0x266>
 803a6f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 803a6f6:	434e      	muls	r6, r1
 803a6f8:	9609      	str	r6, [sp, #36]	; 0x24
 803a6fa:	3201      	adds	r2, #1
 803a6fc:	e7e2      	b.n	803a6c4 <_strtod_l+0x22c>
 803a6fe:	f102 0c01 	add.w	ip, r2, #1
 803a702:	f1bc 0f10 	cmp.w	ip, #16
 803a706:	bfd8      	it	le
 803a708:	fb01 f909 	mulle.w	r9, r1, r9
 803a70c:	e7f5      	b.n	803a6fa <_strtod_l+0x262>
 803a70e:	2d10      	cmp	r5, #16
 803a710:	bfdc      	itt	le
 803a712:	220a      	movle	r2, #10
 803a714:	fb02 3909 	mlale	r9, r2, r9, r3
 803a718:	e7e1      	b.n	803a6de <_strtod_l+0x246>
 803a71a:	2300      	movs	r3, #0
 803a71c:	9307      	str	r3, [sp, #28]
 803a71e:	2201      	movs	r2, #1
 803a720:	e77c      	b.n	803a61c <_strtod_l+0x184>
 803a722:	f04f 0c00 	mov.w	ip, #0
 803a726:	f108 0302 	add.w	r3, r8, #2
 803a72a:	931d      	str	r3, [sp, #116]	; 0x74
 803a72c:	f898 3002 	ldrb.w	r3, [r8, #2]
 803a730:	e785      	b.n	803a63e <_strtod_l+0x1a6>
 803a732:	f04f 0c01 	mov.w	ip, #1
 803a736:	e7f6      	b.n	803a726 <_strtod_l+0x28e>
 803a738:	0803eb90 	.word	0x0803eb90
 803a73c:	0803e93c 	.word	0x0803e93c
 803a740:	7ff00000 	.word	0x7ff00000
 803a744:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803a746:	1c59      	adds	r1, r3, #1
 803a748:	911d      	str	r1, [sp, #116]	; 0x74
 803a74a:	785b      	ldrb	r3, [r3, #1]
 803a74c:	2b30      	cmp	r3, #48	; 0x30
 803a74e:	d0f9      	beq.n	803a744 <_strtod_l+0x2ac>
 803a750:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 803a754:	2908      	cmp	r1, #8
 803a756:	f63f af79 	bhi.w	803a64c <_strtod_l+0x1b4>
 803a75a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 803a75e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803a760:	9308      	str	r3, [sp, #32]
 803a762:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803a764:	1c59      	adds	r1, r3, #1
 803a766:	911d      	str	r1, [sp, #116]	; 0x74
 803a768:	785b      	ldrb	r3, [r3, #1]
 803a76a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 803a76e:	2e09      	cmp	r6, #9
 803a770:	d937      	bls.n	803a7e2 <_strtod_l+0x34a>
 803a772:	9e08      	ldr	r6, [sp, #32]
 803a774:	1b89      	subs	r1, r1, r6
 803a776:	2908      	cmp	r1, #8
 803a778:	f644 661f 	movw	r6, #19999	; 0x4e1f
 803a77c:	dc02      	bgt.n	803a784 <_strtod_l+0x2ec>
 803a77e:	4576      	cmp	r6, lr
 803a780:	bfa8      	it	ge
 803a782:	4676      	movge	r6, lr
 803a784:	f1bc 0f00 	cmp.w	ip, #0
 803a788:	d000      	beq.n	803a78c <_strtod_l+0x2f4>
 803a78a:	4276      	negs	r6, r6
 803a78c:	2d00      	cmp	r5, #0
 803a78e:	d14f      	bne.n	803a830 <_strtod_l+0x398>
 803a790:	9904      	ldr	r1, [sp, #16]
 803a792:	4301      	orrs	r1, r0
 803a794:	f47f aec2 	bne.w	803a51c <_strtod_l+0x84>
 803a798:	2a00      	cmp	r2, #0
 803a79a:	f47f aedb 	bne.w	803a554 <_strtod_l+0xbc>
 803a79e:	2b69      	cmp	r3, #105	; 0x69
 803a7a0:	d027      	beq.n	803a7f2 <_strtod_l+0x35a>
 803a7a2:	dc24      	bgt.n	803a7ee <_strtod_l+0x356>
 803a7a4:	2b49      	cmp	r3, #73	; 0x49
 803a7a6:	d024      	beq.n	803a7f2 <_strtod_l+0x35a>
 803a7a8:	2b4e      	cmp	r3, #78	; 0x4e
 803a7aa:	f47f aed3 	bne.w	803a554 <_strtod_l+0xbc>
 803a7ae:	499e      	ldr	r1, [pc, #632]	; (803aa28 <_strtod_l+0x590>)
 803a7b0:	a81d      	add	r0, sp, #116	; 0x74
 803a7b2:	f001 fe73 	bl	803c49c <__match>
 803a7b6:	2800      	cmp	r0, #0
 803a7b8:	f43f aecc 	beq.w	803a554 <_strtod_l+0xbc>
 803a7bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803a7be:	781b      	ldrb	r3, [r3, #0]
 803a7c0:	2b28      	cmp	r3, #40	; 0x28
 803a7c2:	d12d      	bne.n	803a820 <_strtod_l+0x388>
 803a7c4:	4999      	ldr	r1, [pc, #612]	; (803aa2c <_strtod_l+0x594>)
 803a7c6:	aa20      	add	r2, sp, #128	; 0x80
 803a7c8:	a81d      	add	r0, sp, #116	; 0x74
 803a7ca:	f001 fe7b 	bl	803c4c4 <__hexnan>
 803a7ce:	2805      	cmp	r0, #5
 803a7d0:	d126      	bne.n	803a820 <_strtod_l+0x388>
 803a7d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 803a7d4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 803a7d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 803a7dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 803a7e0:	e69c      	b.n	803a51c <_strtod_l+0x84>
 803a7e2:	210a      	movs	r1, #10
 803a7e4:	fb01 3e0e 	mla	lr, r1, lr, r3
 803a7e8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 803a7ec:	e7b9      	b.n	803a762 <_strtod_l+0x2ca>
 803a7ee:	2b6e      	cmp	r3, #110	; 0x6e
 803a7f0:	e7db      	b.n	803a7aa <_strtod_l+0x312>
 803a7f2:	498f      	ldr	r1, [pc, #572]	; (803aa30 <_strtod_l+0x598>)
 803a7f4:	a81d      	add	r0, sp, #116	; 0x74
 803a7f6:	f001 fe51 	bl	803c49c <__match>
 803a7fa:	2800      	cmp	r0, #0
 803a7fc:	f43f aeaa 	beq.w	803a554 <_strtod_l+0xbc>
 803a800:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803a802:	498c      	ldr	r1, [pc, #560]	; (803aa34 <_strtod_l+0x59c>)
 803a804:	3b01      	subs	r3, #1
 803a806:	a81d      	add	r0, sp, #116	; 0x74
 803a808:	931d      	str	r3, [sp, #116]	; 0x74
 803a80a:	f001 fe47 	bl	803c49c <__match>
 803a80e:	b910      	cbnz	r0, 803a816 <_strtod_l+0x37e>
 803a810:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803a812:	3301      	adds	r3, #1
 803a814:	931d      	str	r3, [sp, #116]	; 0x74
 803a816:	f8df b22c 	ldr.w	fp, [pc, #556]	; 803aa44 <_strtod_l+0x5ac>
 803a81a:	f04f 0a00 	mov.w	sl, #0
 803a81e:	e67d      	b.n	803a51c <_strtod_l+0x84>
 803a820:	4885      	ldr	r0, [pc, #532]	; (803aa38 <_strtod_l+0x5a0>)
 803a822:	f002 fd71 	bl	803d308 <nan>
 803a826:	ed8d 0b04 	vstr	d0, [sp, #16]
 803a82a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 803a82e:	e675      	b.n	803a51c <_strtod_l+0x84>
 803a830:	9b07      	ldr	r3, [sp, #28]
 803a832:	9809      	ldr	r0, [sp, #36]	; 0x24
 803a834:	1af3      	subs	r3, r6, r3
 803a836:	2f00      	cmp	r7, #0
 803a838:	bf08      	it	eq
 803a83a:	462f      	moveq	r7, r5
 803a83c:	2d10      	cmp	r5, #16
 803a83e:	9308      	str	r3, [sp, #32]
 803a840:	46a8      	mov	r8, r5
 803a842:	bfa8      	it	ge
 803a844:	f04f 0810 	movge.w	r8, #16
 803a848:	f7e5 fe5c 	bl	8020504 <__aeabi_ui2d>
 803a84c:	2d09      	cmp	r5, #9
 803a84e:	4682      	mov	sl, r0
 803a850:	468b      	mov	fp, r1
 803a852:	dd13      	ble.n	803a87c <_strtod_l+0x3e4>
 803a854:	4b79      	ldr	r3, [pc, #484]	; (803aa3c <_strtod_l+0x5a4>)
 803a856:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 803a85a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 803a85e:	f7e5 fecb 	bl	80205f8 <__aeabi_dmul>
 803a862:	4682      	mov	sl, r0
 803a864:	4648      	mov	r0, r9
 803a866:	468b      	mov	fp, r1
 803a868:	f7e5 fe4c 	bl	8020504 <__aeabi_ui2d>
 803a86c:	4602      	mov	r2, r0
 803a86e:	460b      	mov	r3, r1
 803a870:	4650      	mov	r0, sl
 803a872:	4659      	mov	r1, fp
 803a874:	f7e5 fd0a 	bl	802028c <__adddf3>
 803a878:	4682      	mov	sl, r0
 803a87a:	468b      	mov	fp, r1
 803a87c:	2d0f      	cmp	r5, #15
 803a87e:	dc38      	bgt.n	803a8f2 <_strtod_l+0x45a>
 803a880:	9b08      	ldr	r3, [sp, #32]
 803a882:	2b00      	cmp	r3, #0
 803a884:	f43f ae4a 	beq.w	803a51c <_strtod_l+0x84>
 803a888:	dd24      	ble.n	803a8d4 <_strtod_l+0x43c>
 803a88a:	2b16      	cmp	r3, #22
 803a88c:	dc0b      	bgt.n	803a8a6 <_strtod_l+0x40e>
 803a88e:	4d6b      	ldr	r5, [pc, #428]	; (803aa3c <_strtod_l+0x5a4>)
 803a890:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 803a894:	e9d5 0100 	ldrd	r0, r1, [r5]
 803a898:	4652      	mov	r2, sl
 803a89a:	465b      	mov	r3, fp
 803a89c:	f7e5 feac 	bl	80205f8 <__aeabi_dmul>
 803a8a0:	4682      	mov	sl, r0
 803a8a2:	468b      	mov	fp, r1
 803a8a4:	e63a      	b.n	803a51c <_strtod_l+0x84>
 803a8a6:	9a08      	ldr	r2, [sp, #32]
 803a8a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 803a8ac:	4293      	cmp	r3, r2
 803a8ae:	db20      	blt.n	803a8f2 <_strtod_l+0x45a>
 803a8b0:	4c62      	ldr	r4, [pc, #392]	; (803aa3c <_strtod_l+0x5a4>)
 803a8b2:	f1c5 050f 	rsb	r5, r5, #15
 803a8b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 803a8ba:	4652      	mov	r2, sl
 803a8bc:	465b      	mov	r3, fp
 803a8be:	e9d1 0100 	ldrd	r0, r1, [r1]
 803a8c2:	f7e5 fe99 	bl	80205f8 <__aeabi_dmul>
 803a8c6:	9b08      	ldr	r3, [sp, #32]
 803a8c8:	1b5d      	subs	r5, r3, r5
 803a8ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 803a8ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 803a8d2:	e7e3      	b.n	803a89c <_strtod_l+0x404>
 803a8d4:	9b08      	ldr	r3, [sp, #32]
 803a8d6:	3316      	adds	r3, #22
 803a8d8:	db0b      	blt.n	803a8f2 <_strtod_l+0x45a>
 803a8da:	9b07      	ldr	r3, [sp, #28]
 803a8dc:	4a57      	ldr	r2, [pc, #348]	; (803aa3c <_strtod_l+0x5a4>)
 803a8de:	1b9e      	subs	r6, r3, r6
 803a8e0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 803a8e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 803a8e8:	4650      	mov	r0, sl
 803a8ea:	4659      	mov	r1, fp
 803a8ec:	f7e5 ffae 	bl	802084c <__aeabi_ddiv>
 803a8f0:	e7d6      	b.n	803a8a0 <_strtod_l+0x408>
 803a8f2:	9b08      	ldr	r3, [sp, #32]
 803a8f4:	eba5 0808 	sub.w	r8, r5, r8
 803a8f8:	4498      	add	r8, r3
 803a8fa:	f1b8 0f00 	cmp.w	r8, #0
 803a8fe:	dd71      	ble.n	803a9e4 <_strtod_l+0x54c>
 803a900:	f018 030f 	ands.w	r3, r8, #15
 803a904:	d00a      	beq.n	803a91c <_strtod_l+0x484>
 803a906:	494d      	ldr	r1, [pc, #308]	; (803aa3c <_strtod_l+0x5a4>)
 803a908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 803a90c:	4652      	mov	r2, sl
 803a90e:	465b      	mov	r3, fp
 803a910:	e9d1 0100 	ldrd	r0, r1, [r1]
 803a914:	f7e5 fe70 	bl	80205f8 <__aeabi_dmul>
 803a918:	4682      	mov	sl, r0
 803a91a:	468b      	mov	fp, r1
 803a91c:	f038 080f 	bics.w	r8, r8, #15
 803a920:	d04d      	beq.n	803a9be <_strtod_l+0x526>
 803a922:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 803a926:	dd22      	ble.n	803a96e <_strtod_l+0x4d6>
 803a928:	2500      	movs	r5, #0
 803a92a:	462e      	mov	r6, r5
 803a92c:	9509      	str	r5, [sp, #36]	; 0x24
 803a92e:	9507      	str	r5, [sp, #28]
 803a930:	2322      	movs	r3, #34	; 0x22
 803a932:	f8df b110 	ldr.w	fp, [pc, #272]	; 803aa44 <_strtod_l+0x5ac>
 803a936:	6023      	str	r3, [r4, #0]
 803a938:	f04f 0a00 	mov.w	sl, #0
 803a93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803a93e:	2b00      	cmp	r3, #0
 803a940:	f43f adec 	beq.w	803a51c <_strtod_l+0x84>
 803a944:	991e      	ldr	r1, [sp, #120]	; 0x78
 803a946:	4620      	mov	r0, r4
 803a948:	f001 fee4 	bl	803c714 <_Bfree>
 803a94c:	9907      	ldr	r1, [sp, #28]
 803a94e:	4620      	mov	r0, r4
 803a950:	f001 fee0 	bl	803c714 <_Bfree>
 803a954:	4631      	mov	r1, r6
 803a956:	4620      	mov	r0, r4
 803a958:	f001 fedc 	bl	803c714 <_Bfree>
 803a95c:	9909      	ldr	r1, [sp, #36]	; 0x24
 803a95e:	4620      	mov	r0, r4
 803a960:	f001 fed8 	bl	803c714 <_Bfree>
 803a964:	4629      	mov	r1, r5
 803a966:	4620      	mov	r0, r4
 803a968:	f001 fed4 	bl	803c714 <_Bfree>
 803a96c:	e5d6      	b.n	803a51c <_strtod_l+0x84>
 803a96e:	2300      	movs	r3, #0
 803a970:	ea4f 1828 	mov.w	r8, r8, asr #4
 803a974:	4650      	mov	r0, sl
 803a976:	4659      	mov	r1, fp
 803a978:	4699      	mov	r9, r3
 803a97a:	f1b8 0f01 	cmp.w	r8, #1
 803a97e:	dc21      	bgt.n	803a9c4 <_strtod_l+0x52c>
 803a980:	b10b      	cbz	r3, 803a986 <_strtod_l+0x4ee>
 803a982:	4682      	mov	sl, r0
 803a984:	468b      	mov	fp, r1
 803a986:	4b2e      	ldr	r3, [pc, #184]	; (803aa40 <_strtod_l+0x5a8>)
 803a988:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 803a98c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 803a990:	4652      	mov	r2, sl
 803a992:	465b      	mov	r3, fp
 803a994:	e9d9 0100 	ldrd	r0, r1, [r9]
 803a998:	f7e5 fe2e 	bl	80205f8 <__aeabi_dmul>
 803a99c:	4b29      	ldr	r3, [pc, #164]	; (803aa44 <_strtod_l+0x5ac>)
 803a99e:	460a      	mov	r2, r1
 803a9a0:	400b      	ands	r3, r1
 803a9a2:	4929      	ldr	r1, [pc, #164]	; (803aa48 <_strtod_l+0x5b0>)
 803a9a4:	428b      	cmp	r3, r1
 803a9a6:	4682      	mov	sl, r0
 803a9a8:	d8be      	bhi.n	803a928 <_strtod_l+0x490>
 803a9aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 803a9ae:	428b      	cmp	r3, r1
 803a9b0:	bf86      	itte	hi
 803a9b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 803aa4c <_strtod_l+0x5b4>
 803a9b6:	f04f 3aff 	movhi.w	sl, #4294967295
 803a9ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 803a9be:	2300      	movs	r3, #0
 803a9c0:	9304      	str	r3, [sp, #16]
 803a9c2:	e081      	b.n	803aac8 <_strtod_l+0x630>
 803a9c4:	f018 0f01 	tst.w	r8, #1
 803a9c8:	d007      	beq.n	803a9da <_strtod_l+0x542>
 803a9ca:	4b1d      	ldr	r3, [pc, #116]	; (803aa40 <_strtod_l+0x5a8>)
 803a9cc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 803a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 803a9d4:	f7e5 fe10 	bl	80205f8 <__aeabi_dmul>
 803a9d8:	2301      	movs	r3, #1
 803a9da:	f109 0901 	add.w	r9, r9, #1
 803a9de:	ea4f 0868 	mov.w	r8, r8, asr #1
 803a9e2:	e7ca      	b.n	803a97a <_strtod_l+0x4e2>
 803a9e4:	d0eb      	beq.n	803a9be <_strtod_l+0x526>
 803a9e6:	f1c8 0800 	rsb	r8, r8, #0
 803a9ea:	f018 020f 	ands.w	r2, r8, #15
 803a9ee:	d00a      	beq.n	803aa06 <_strtod_l+0x56e>
 803a9f0:	4b12      	ldr	r3, [pc, #72]	; (803aa3c <_strtod_l+0x5a4>)
 803a9f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 803a9f6:	4650      	mov	r0, sl
 803a9f8:	4659      	mov	r1, fp
 803a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 803a9fe:	f7e5 ff25 	bl	802084c <__aeabi_ddiv>
 803aa02:	4682      	mov	sl, r0
 803aa04:	468b      	mov	fp, r1
 803aa06:	ea5f 1828 	movs.w	r8, r8, asr #4
 803aa0a:	d0d8      	beq.n	803a9be <_strtod_l+0x526>
 803aa0c:	f1b8 0f1f 	cmp.w	r8, #31
 803aa10:	dd1e      	ble.n	803aa50 <_strtod_l+0x5b8>
 803aa12:	2500      	movs	r5, #0
 803aa14:	462e      	mov	r6, r5
 803aa16:	9509      	str	r5, [sp, #36]	; 0x24
 803aa18:	9507      	str	r5, [sp, #28]
 803aa1a:	2322      	movs	r3, #34	; 0x22
 803aa1c:	f04f 0a00 	mov.w	sl, #0
 803aa20:	f04f 0b00 	mov.w	fp, #0
 803aa24:	6023      	str	r3, [r4, #0]
 803aa26:	e789      	b.n	803a93c <_strtod_l+0x4a4>
 803aa28:	0803e90d 	.word	0x0803e90d
 803aa2c:	0803e950 	.word	0x0803e950
 803aa30:	0803e905 	.word	0x0803e905
 803aa34:	0803ea94 	.word	0x0803ea94
 803aa38:	0803ed50 	.word	0x0803ed50
 803aa3c:	0803ec30 	.word	0x0803ec30
 803aa40:	0803ec08 	.word	0x0803ec08
 803aa44:	7ff00000 	.word	0x7ff00000
 803aa48:	7ca00000 	.word	0x7ca00000
 803aa4c:	7fefffff 	.word	0x7fefffff
 803aa50:	f018 0310 	ands.w	r3, r8, #16
 803aa54:	bf18      	it	ne
 803aa56:	236a      	movne	r3, #106	; 0x6a
 803aa58:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 803ae10 <_strtod_l+0x978>
 803aa5c:	9304      	str	r3, [sp, #16]
 803aa5e:	4650      	mov	r0, sl
 803aa60:	4659      	mov	r1, fp
 803aa62:	2300      	movs	r3, #0
 803aa64:	f018 0f01 	tst.w	r8, #1
 803aa68:	d004      	beq.n	803aa74 <_strtod_l+0x5dc>
 803aa6a:	e9d9 2300 	ldrd	r2, r3, [r9]
 803aa6e:	f7e5 fdc3 	bl	80205f8 <__aeabi_dmul>
 803aa72:	2301      	movs	r3, #1
 803aa74:	ea5f 0868 	movs.w	r8, r8, asr #1
 803aa78:	f109 0908 	add.w	r9, r9, #8
 803aa7c:	d1f2      	bne.n	803aa64 <_strtod_l+0x5cc>
 803aa7e:	b10b      	cbz	r3, 803aa84 <_strtod_l+0x5ec>
 803aa80:	4682      	mov	sl, r0
 803aa82:	468b      	mov	fp, r1
 803aa84:	9b04      	ldr	r3, [sp, #16]
 803aa86:	b1bb      	cbz	r3, 803aab8 <_strtod_l+0x620>
 803aa88:	f3cb 530a 	ubfx	r3, fp, #20, #11
 803aa8c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 803aa90:	2b00      	cmp	r3, #0
 803aa92:	4659      	mov	r1, fp
 803aa94:	dd10      	ble.n	803aab8 <_strtod_l+0x620>
 803aa96:	2b1f      	cmp	r3, #31
 803aa98:	f340 8128 	ble.w	803acec <_strtod_l+0x854>
 803aa9c:	2b34      	cmp	r3, #52	; 0x34
 803aa9e:	bfde      	ittt	le
 803aaa0:	3b20      	suble	r3, #32
 803aaa2:	f04f 32ff 	movle.w	r2, #4294967295
 803aaa6:	fa02 f303 	lslle.w	r3, r2, r3
 803aaaa:	f04f 0a00 	mov.w	sl, #0
 803aaae:	bfcc      	ite	gt
 803aab0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 803aab4:	ea03 0b01 	andle.w	fp, r3, r1
 803aab8:	2200      	movs	r2, #0
 803aaba:	2300      	movs	r3, #0
 803aabc:	4650      	mov	r0, sl
 803aabe:	4659      	mov	r1, fp
 803aac0:	f7e6 f802 	bl	8020ac8 <__aeabi_dcmpeq>
 803aac4:	2800      	cmp	r0, #0
 803aac6:	d1a4      	bne.n	803aa12 <_strtod_l+0x57a>
 803aac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803aaca:	9300      	str	r3, [sp, #0]
 803aacc:	990a      	ldr	r1, [sp, #40]	; 0x28
 803aace:	462b      	mov	r3, r5
 803aad0:	463a      	mov	r2, r7
 803aad2:	4620      	mov	r0, r4
 803aad4:	f001 fe8a 	bl	803c7ec <__s2b>
 803aad8:	9009      	str	r0, [sp, #36]	; 0x24
 803aada:	2800      	cmp	r0, #0
 803aadc:	f43f af24 	beq.w	803a928 <_strtod_l+0x490>
 803aae0:	9b07      	ldr	r3, [sp, #28]
 803aae2:	1b9e      	subs	r6, r3, r6
 803aae4:	9b08      	ldr	r3, [sp, #32]
 803aae6:	2b00      	cmp	r3, #0
 803aae8:	bfb4      	ite	lt
 803aaea:	4633      	movlt	r3, r6
 803aaec:	2300      	movge	r3, #0
 803aaee:	9310      	str	r3, [sp, #64]	; 0x40
 803aaf0:	9b08      	ldr	r3, [sp, #32]
 803aaf2:	2500      	movs	r5, #0
 803aaf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 803aaf8:	9318      	str	r3, [sp, #96]	; 0x60
 803aafa:	462e      	mov	r6, r5
 803aafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803aafe:	4620      	mov	r0, r4
 803ab00:	6859      	ldr	r1, [r3, #4]
 803ab02:	f001 fdc7 	bl	803c694 <_Balloc>
 803ab06:	9007      	str	r0, [sp, #28]
 803ab08:	2800      	cmp	r0, #0
 803ab0a:	f43f af11 	beq.w	803a930 <_strtod_l+0x498>
 803ab0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803ab10:	691a      	ldr	r2, [r3, #16]
 803ab12:	3202      	adds	r2, #2
 803ab14:	f103 010c 	add.w	r1, r3, #12
 803ab18:	0092      	lsls	r2, r2, #2
 803ab1a:	300c      	adds	r0, #12
 803ab1c:	f7fe fcda 	bl	80394d4 <memcpy>
 803ab20:	ec4b ab10 	vmov	d0, sl, fp
 803ab24:	aa20      	add	r2, sp, #128	; 0x80
 803ab26:	a91f      	add	r1, sp, #124	; 0x7c
 803ab28:	4620      	mov	r0, r4
 803ab2a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 803ab2e:	f002 f999 	bl	803ce64 <__d2b>
 803ab32:	901e      	str	r0, [sp, #120]	; 0x78
 803ab34:	2800      	cmp	r0, #0
 803ab36:	f43f aefb 	beq.w	803a930 <_strtod_l+0x498>
 803ab3a:	2101      	movs	r1, #1
 803ab3c:	4620      	mov	r0, r4
 803ab3e:	f001 feef 	bl	803c920 <__i2b>
 803ab42:	4606      	mov	r6, r0
 803ab44:	2800      	cmp	r0, #0
 803ab46:	f43f aef3 	beq.w	803a930 <_strtod_l+0x498>
 803ab4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 803ab4c:	9904      	ldr	r1, [sp, #16]
 803ab4e:	2b00      	cmp	r3, #0
 803ab50:	bfab      	itete	ge
 803ab52:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 803ab54:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 803ab56:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 803ab58:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 803ab5c:	bfac      	ite	ge
 803ab5e:	eb03 0902 	addge.w	r9, r3, r2
 803ab62:	1ad7      	sublt	r7, r2, r3
 803ab64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 803ab66:	eba3 0801 	sub.w	r8, r3, r1
 803ab6a:	4490      	add	r8, r2
 803ab6c:	4ba3      	ldr	r3, [pc, #652]	; (803adfc <_strtod_l+0x964>)
 803ab6e:	f108 38ff 	add.w	r8, r8, #4294967295
 803ab72:	4598      	cmp	r8, r3
 803ab74:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 803ab78:	f280 80cc 	bge.w	803ad14 <_strtod_l+0x87c>
 803ab7c:	eba3 0308 	sub.w	r3, r3, r8
 803ab80:	2b1f      	cmp	r3, #31
 803ab82:	eba2 0203 	sub.w	r2, r2, r3
 803ab86:	f04f 0101 	mov.w	r1, #1
 803ab8a:	f300 80b6 	bgt.w	803acfa <_strtod_l+0x862>
 803ab8e:	fa01 f303 	lsl.w	r3, r1, r3
 803ab92:	9311      	str	r3, [sp, #68]	; 0x44
 803ab94:	2300      	movs	r3, #0
 803ab96:	930c      	str	r3, [sp, #48]	; 0x30
 803ab98:	eb09 0802 	add.w	r8, r9, r2
 803ab9c:	9b04      	ldr	r3, [sp, #16]
 803ab9e:	45c1      	cmp	r9, r8
 803aba0:	4417      	add	r7, r2
 803aba2:	441f      	add	r7, r3
 803aba4:	464b      	mov	r3, r9
 803aba6:	bfa8      	it	ge
 803aba8:	4643      	movge	r3, r8
 803abaa:	42bb      	cmp	r3, r7
 803abac:	bfa8      	it	ge
 803abae:	463b      	movge	r3, r7
 803abb0:	2b00      	cmp	r3, #0
 803abb2:	bfc2      	ittt	gt
 803abb4:	eba8 0803 	subgt.w	r8, r8, r3
 803abb8:	1aff      	subgt	r7, r7, r3
 803abba:	eba9 0903 	subgt.w	r9, r9, r3
 803abbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 803abc0:	2b00      	cmp	r3, #0
 803abc2:	dd17      	ble.n	803abf4 <_strtod_l+0x75c>
 803abc4:	4631      	mov	r1, r6
 803abc6:	461a      	mov	r2, r3
 803abc8:	4620      	mov	r0, r4
 803abca:	f001 ff65 	bl	803ca98 <__pow5mult>
 803abce:	4606      	mov	r6, r0
 803abd0:	2800      	cmp	r0, #0
 803abd2:	f43f aead 	beq.w	803a930 <_strtod_l+0x498>
 803abd6:	4601      	mov	r1, r0
 803abd8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 803abda:	4620      	mov	r0, r4
 803abdc:	f001 feb6 	bl	803c94c <__multiply>
 803abe0:	900f      	str	r0, [sp, #60]	; 0x3c
 803abe2:	2800      	cmp	r0, #0
 803abe4:	f43f aea4 	beq.w	803a930 <_strtod_l+0x498>
 803abe8:	991e      	ldr	r1, [sp, #120]	; 0x78
 803abea:	4620      	mov	r0, r4
 803abec:	f001 fd92 	bl	803c714 <_Bfree>
 803abf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803abf2:	931e      	str	r3, [sp, #120]	; 0x78
 803abf4:	f1b8 0f00 	cmp.w	r8, #0
 803abf8:	f300 8091 	bgt.w	803ad1e <_strtod_l+0x886>
 803abfc:	9b08      	ldr	r3, [sp, #32]
 803abfe:	2b00      	cmp	r3, #0
 803ac00:	dd08      	ble.n	803ac14 <_strtod_l+0x77c>
 803ac02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 803ac04:	9907      	ldr	r1, [sp, #28]
 803ac06:	4620      	mov	r0, r4
 803ac08:	f001 ff46 	bl	803ca98 <__pow5mult>
 803ac0c:	9007      	str	r0, [sp, #28]
 803ac0e:	2800      	cmp	r0, #0
 803ac10:	f43f ae8e 	beq.w	803a930 <_strtod_l+0x498>
 803ac14:	2f00      	cmp	r7, #0
 803ac16:	dd08      	ble.n	803ac2a <_strtod_l+0x792>
 803ac18:	9907      	ldr	r1, [sp, #28]
 803ac1a:	463a      	mov	r2, r7
 803ac1c:	4620      	mov	r0, r4
 803ac1e:	f001 ff95 	bl	803cb4c <__lshift>
 803ac22:	9007      	str	r0, [sp, #28]
 803ac24:	2800      	cmp	r0, #0
 803ac26:	f43f ae83 	beq.w	803a930 <_strtod_l+0x498>
 803ac2a:	f1b9 0f00 	cmp.w	r9, #0
 803ac2e:	dd08      	ble.n	803ac42 <_strtod_l+0x7aa>
 803ac30:	4631      	mov	r1, r6
 803ac32:	464a      	mov	r2, r9
 803ac34:	4620      	mov	r0, r4
 803ac36:	f001 ff89 	bl	803cb4c <__lshift>
 803ac3a:	4606      	mov	r6, r0
 803ac3c:	2800      	cmp	r0, #0
 803ac3e:	f43f ae77 	beq.w	803a930 <_strtod_l+0x498>
 803ac42:	9a07      	ldr	r2, [sp, #28]
 803ac44:	991e      	ldr	r1, [sp, #120]	; 0x78
 803ac46:	4620      	mov	r0, r4
 803ac48:	f002 f808 	bl	803cc5c <__mdiff>
 803ac4c:	4605      	mov	r5, r0
 803ac4e:	2800      	cmp	r0, #0
 803ac50:	f43f ae6e 	beq.w	803a930 <_strtod_l+0x498>
 803ac54:	68c3      	ldr	r3, [r0, #12]
 803ac56:	930f      	str	r3, [sp, #60]	; 0x3c
 803ac58:	2300      	movs	r3, #0
 803ac5a:	60c3      	str	r3, [r0, #12]
 803ac5c:	4631      	mov	r1, r6
 803ac5e:	f001 ffe1 	bl	803cc24 <__mcmp>
 803ac62:	2800      	cmp	r0, #0
 803ac64:	da65      	bge.n	803ad32 <_strtod_l+0x89a>
 803ac66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803ac68:	ea53 030a 	orrs.w	r3, r3, sl
 803ac6c:	f040 8087 	bne.w	803ad7e <_strtod_l+0x8e6>
 803ac70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 803ac74:	2b00      	cmp	r3, #0
 803ac76:	f040 8082 	bne.w	803ad7e <_strtod_l+0x8e6>
 803ac7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 803ac7e:	0d1b      	lsrs	r3, r3, #20
 803ac80:	051b      	lsls	r3, r3, #20
 803ac82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 803ac86:	d97a      	bls.n	803ad7e <_strtod_l+0x8e6>
 803ac88:	696b      	ldr	r3, [r5, #20]
 803ac8a:	b913      	cbnz	r3, 803ac92 <_strtod_l+0x7fa>
 803ac8c:	692b      	ldr	r3, [r5, #16]
 803ac8e:	2b01      	cmp	r3, #1
 803ac90:	dd75      	ble.n	803ad7e <_strtod_l+0x8e6>
 803ac92:	4629      	mov	r1, r5
 803ac94:	2201      	movs	r2, #1
 803ac96:	4620      	mov	r0, r4
 803ac98:	f001 ff58 	bl	803cb4c <__lshift>
 803ac9c:	4631      	mov	r1, r6
 803ac9e:	4605      	mov	r5, r0
 803aca0:	f001 ffc0 	bl	803cc24 <__mcmp>
 803aca4:	2800      	cmp	r0, #0
 803aca6:	dd6a      	ble.n	803ad7e <_strtod_l+0x8e6>
 803aca8:	9904      	ldr	r1, [sp, #16]
 803acaa:	4a55      	ldr	r2, [pc, #340]	; (803ae00 <_strtod_l+0x968>)
 803acac:	465b      	mov	r3, fp
 803acae:	2900      	cmp	r1, #0
 803acb0:	f000 8085 	beq.w	803adbe <_strtod_l+0x926>
 803acb4:	ea02 010b 	and.w	r1, r2, fp
 803acb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 803acbc:	dc7f      	bgt.n	803adbe <_strtod_l+0x926>
 803acbe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 803acc2:	f77f aeaa 	ble.w	803aa1a <_strtod_l+0x582>
 803acc6:	4a4f      	ldr	r2, [pc, #316]	; (803ae04 <_strtod_l+0x96c>)
 803acc8:	2300      	movs	r3, #0
 803acca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 803acce:	4650      	mov	r0, sl
 803acd0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 803acd4:	4659      	mov	r1, fp
 803acd6:	f7e5 fc8f 	bl	80205f8 <__aeabi_dmul>
 803acda:	460b      	mov	r3, r1
 803acdc:	4303      	orrs	r3, r0
 803acde:	bf08      	it	eq
 803ace0:	2322      	moveq	r3, #34	; 0x22
 803ace2:	4682      	mov	sl, r0
 803ace4:	468b      	mov	fp, r1
 803ace6:	bf08      	it	eq
 803ace8:	6023      	streq	r3, [r4, #0]
 803acea:	e62b      	b.n	803a944 <_strtod_l+0x4ac>
 803acec:	f04f 32ff 	mov.w	r2, #4294967295
 803acf0:	fa02 f303 	lsl.w	r3, r2, r3
 803acf4:	ea03 0a0a 	and.w	sl, r3, sl
 803acf8:	e6de      	b.n	803aab8 <_strtod_l+0x620>
 803acfa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 803acfe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 803ad02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 803ad06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 803ad0a:	fa01 f308 	lsl.w	r3, r1, r8
 803ad0e:	930c      	str	r3, [sp, #48]	; 0x30
 803ad10:	9111      	str	r1, [sp, #68]	; 0x44
 803ad12:	e741      	b.n	803ab98 <_strtod_l+0x700>
 803ad14:	2300      	movs	r3, #0
 803ad16:	930c      	str	r3, [sp, #48]	; 0x30
 803ad18:	2301      	movs	r3, #1
 803ad1a:	9311      	str	r3, [sp, #68]	; 0x44
 803ad1c:	e73c      	b.n	803ab98 <_strtod_l+0x700>
 803ad1e:	991e      	ldr	r1, [sp, #120]	; 0x78
 803ad20:	4642      	mov	r2, r8
 803ad22:	4620      	mov	r0, r4
 803ad24:	f001 ff12 	bl	803cb4c <__lshift>
 803ad28:	901e      	str	r0, [sp, #120]	; 0x78
 803ad2a:	2800      	cmp	r0, #0
 803ad2c:	f47f af66 	bne.w	803abfc <_strtod_l+0x764>
 803ad30:	e5fe      	b.n	803a930 <_strtod_l+0x498>
 803ad32:	465f      	mov	r7, fp
 803ad34:	d16e      	bne.n	803ae14 <_strtod_l+0x97c>
 803ad36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 803ad38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 803ad3c:	b342      	cbz	r2, 803ad90 <_strtod_l+0x8f8>
 803ad3e:	4a32      	ldr	r2, [pc, #200]	; (803ae08 <_strtod_l+0x970>)
 803ad40:	4293      	cmp	r3, r2
 803ad42:	d128      	bne.n	803ad96 <_strtod_l+0x8fe>
 803ad44:	9b04      	ldr	r3, [sp, #16]
 803ad46:	4650      	mov	r0, sl
 803ad48:	b1eb      	cbz	r3, 803ad86 <_strtod_l+0x8ee>
 803ad4a:	4a2d      	ldr	r2, [pc, #180]	; (803ae00 <_strtod_l+0x968>)
 803ad4c:	403a      	ands	r2, r7
 803ad4e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 803ad52:	f04f 31ff 	mov.w	r1, #4294967295
 803ad56:	d819      	bhi.n	803ad8c <_strtod_l+0x8f4>
 803ad58:	0d12      	lsrs	r2, r2, #20
 803ad5a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 803ad5e:	fa01 f303 	lsl.w	r3, r1, r3
 803ad62:	4298      	cmp	r0, r3
 803ad64:	d117      	bne.n	803ad96 <_strtod_l+0x8fe>
 803ad66:	4b29      	ldr	r3, [pc, #164]	; (803ae0c <_strtod_l+0x974>)
 803ad68:	429f      	cmp	r7, r3
 803ad6a:	d102      	bne.n	803ad72 <_strtod_l+0x8da>
 803ad6c:	3001      	adds	r0, #1
 803ad6e:	f43f addf 	beq.w	803a930 <_strtod_l+0x498>
 803ad72:	4b23      	ldr	r3, [pc, #140]	; (803ae00 <_strtod_l+0x968>)
 803ad74:	403b      	ands	r3, r7
 803ad76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 803ad7a:	f04f 0a00 	mov.w	sl, #0
 803ad7e:	9b04      	ldr	r3, [sp, #16]
 803ad80:	2b00      	cmp	r3, #0
 803ad82:	d1a0      	bne.n	803acc6 <_strtod_l+0x82e>
 803ad84:	e5de      	b.n	803a944 <_strtod_l+0x4ac>
 803ad86:	f04f 33ff 	mov.w	r3, #4294967295
 803ad8a:	e7ea      	b.n	803ad62 <_strtod_l+0x8ca>
 803ad8c:	460b      	mov	r3, r1
 803ad8e:	e7e8      	b.n	803ad62 <_strtod_l+0x8ca>
 803ad90:	ea53 030a 	orrs.w	r3, r3, sl
 803ad94:	d088      	beq.n	803aca8 <_strtod_l+0x810>
 803ad96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 803ad98:	b1db      	cbz	r3, 803add2 <_strtod_l+0x93a>
 803ad9a:	423b      	tst	r3, r7
 803ad9c:	d0ef      	beq.n	803ad7e <_strtod_l+0x8e6>
 803ad9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803ada0:	9a04      	ldr	r2, [sp, #16]
 803ada2:	4650      	mov	r0, sl
 803ada4:	4659      	mov	r1, fp
 803ada6:	b1c3      	cbz	r3, 803adda <_strtod_l+0x942>
 803ada8:	f7ff fb59 	bl	803a45e <sulp>
 803adac:	4602      	mov	r2, r0
 803adae:	460b      	mov	r3, r1
 803adb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 803adb4:	f7e5 fa6a 	bl	802028c <__adddf3>
 803adb8:	4682      	mov	sl, r0
 803adba:	468b      	mov	fp, r1
 803adbc:	e7df      	b.n	803ad7e <_strtod_l+0x8e6>
 803adbe:	4013      	ands	r3, r2
 803adc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 803adc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 803adc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 803adcc:	f04f 3aff 	mov.w	sl, #4294967295
 803add0:	e7d5      	b.n	803ad7e <_strtod_l+0x8e6>
 803add2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 803add4:	ea13 0f0a 	tst.w	r3, sl
 803add8:	e7e0      	b.n	803ad9c <_strtod_l+0x904>
 803adda:	f7ff fb40 	bl	803a45e <sulp>
 803adde:	4602      	mov	r2, r0
 803ade0:	460b      	mov	r3, r1
 803ade2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 803ade6:	f7e5 fa4f 	bl	8020288 <__aeabi_dsub>
 803adea:	2200      	movs	r2, #0
 803adec:	2300      	movs	r3, #0
 803adee:	4682      	mov	sl, r0
 803adf0:	468b      	mov	fp, r1
 803adf2:	f7e5 fe69 	bl	8020ac8 <__aeabi_dcmpeq>
 803adf6:	2800      	cmp	r0, #0
 803adf8:	d0c1      	beq.n	803ad7e <_strtod_l+0x8e6>
 803adfa:	e60e      	b.n	803aa1a <_strtod_l+0x582>
 803adfc:	fffffc02 	.word	0xfffffc02
 803ae00:	7ff00000 	.word	0x7ff00000
 803ae04:	39500000 	.word	0x39500000
 803ae08:	000fffff 	.word	0x000fffff
 803ae0c:	7fefffff 	.word	0x7fefffff
 803ae10:	0803e968 	.word	0x0803e968
 803ae14:	4631      	mov	r1, r6
 803ae16:	4628      	mov	r0, r5
 803ae18:	f002 f880 	bl	803cf1c <__ratio>
 803ae1c:	ec59 8b10 	vmov	r8, r9, d0
 803ae20:	ee10 0a10 	vmov	r0, s0
 803ae24:	2200      	movs	r2, #0
 803ae26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 803ae2a:	4649      	mov	r1, r9
 803ae2c:	f7e5 fe60 	bl	8020af0 <__aeabi_dcmple>
 803ae30:	2800      	cmp	r0, #0
 803ae32:	d07c      	beq.n	803af2e <_strtod_l+0xa96>
 803ae34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803ae36:	2b00      	cmp	r3, #0
 803ae38:	d04c      	beq.n	803aed4 <_strtod_l+0xa3c>
 803ae3a:	4b95      	ldr	r3, [pc, #596]	; (803b090 <_strtod_l+0xbf8>)
 803ae3c:	2200      	movs	r2, #0
 803ae3e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 803ae42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 803b090 <_strtod_l+0xbf8>
 803ae46:	f04f 0800 	mov.w	r8, #0
 803ae4a:	4b92      	ldr	r3, [pc, #584]	; (803b094 <_strtod_l+0xbfc>)
 803ae4c:	403b      	ands	r3, r7
 803ae4e:	9311      	str	r3, [sp, #68]	; 0x44
 803ae50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 803ae52:	4b91      	ldr	r3, [pc, #580]	; (803b098 <_strtod_l+0xc00>)
 803ae54:	429a      	cmp	r2, r3
 803ae56:	f040 80b2 	bne.w	803afbe <_strtod_l+0xb26>
 803ae5a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 803ae5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 803ae62:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 803ae66:	ec4b ab10 	vmov	d0, sl, fp
 803ae6a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 803ae6e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 803ae72:	f001 ff7b 	bl	803cd6c <__ulp>
 803ae76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 803ae7a:	ec53 2b10 	vmov	r2, r3, d0
 803ae7e:	f7e5 fbbb 	bl	80205f8 <__aeabi_dmul>
 803ae82:	4652      	mov	r2, sl
 803ae84:	465b      	mov	r3, fp
 803ae86:	f7e5 fa01 	bl	802028c <__adddf3>
 803ae8a:	460b      	mov	r3, r1
 803ae8c:	4981      	ldr	r1, [pc, #516]	; (803b094 <_strtod_l+0xbfc>)
 803ae8e:	4a83      	ldr	r2, [pc, #524]	; (803b09c <_strtod_l+0xc04>)
 803ae90:	4019      	ands	r1, r3
 803ae92:	4291      	cmp	r1, r2
 803ae94:	4682      	mov	sl, r0
 803ae96:	d95e      	bls.n	803af56 <_strtod_l+0xabe>
 803ae98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 803ae9a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 803ae9e:	4293      	cmp	r3, r2
 803aea0:	d103      	bne.n	803aeaa <_strtod_l+0xa12>
 803aea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 803aea4:	3301      	adds	r3, #1
 803aea6:	f43f ad43 	beq.w	803a930 <_strtod_l+0x498>
 803aeaa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 803b0a8 <_strtod_l+0xc10>
 803aeae:	f04f 3aff 	mov.w	sl, #4294967295
 803aeb2:	991e      	ldr	r1, [sp, #120]	; 0x78
 803aeb4:	4620      	mov	r0, r4
 803aeb6:	f001 fc2d 	bl	803c714 <_Bfree>
 803aeba:	9907      	ldr	r1, [sp, #28]
 803aebc:	4620      	mov	r0, r4
 803aebe:	f001 fc29 	bl	803c714 <_Bfree>
 803aec2:	4631      	mov	r1, r6
 803aec4:	4620      	mov	r0, r4
 803aec6:	f001 fc25 	bl	803c714 <_Bfree>
 803aeca:	4629      	mov	r1, r5
 803aecc:	4620      	mov	r0, r4
 803aece:	f001 fc21 	bl	803c714 <_Bfree>
 803aed2:	e613      	b.n	803aafc <_strtod_l+0x664>
 803aed4:	f1ba 0f00 	cmp.w	sl, #0
 803aed8:	d11b      	bne.n	803af12 <_strtod_l+0xa7a>
 803aeda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 803aede:	b9f3      	cbnz	r3, 803af1e <_strtod_l+0xa86>
 803aee0:	4b6b      	ldr	r3, [pc, #428]	; (803b090 <_strtod_l+0xbf8>)
 803aee2:	2200      	movs	r2, #0
 803aee4:	4640      	mov	r0, r8
 803aee6:	4649      	mov	r1, r9
 803aee8:	f7e5 fdf8 	bl	8020adc <__aeabi_dcmplt>
 803aeec:	b9d0      	cbnz	r0, 803af24 <_strtod_l+0xa8c>
 803aeee:	4640      	mov	r0, r8
 803aef0:	4649      	mov	r1, r9
 803aef2:	4b6b      	ldr	r3, [pc, #428]	; (803b0a0 <_strtod_l+0xc08>)
 803aef4:	2200      	movs	r2, #0
 803aef6:	f7e5 fb7f 	bl	80205f8 <__aeabi_dmul>
 803aefa:	4680      	mov	r8, r0
 803aefc:	4689      	mov	r9, r1
 803aefe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 803af02:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 803af06:	931b      	str	r3, [sp, #108]	; 0x6c
 803af08:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 803af0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 803af10:	e79b      	b.n	803ae4a <_strtod_l+0x9b2>
 803af12:	f1ba 0f01 	cmp.w	sl, #1
 803af16:	d102      	bne.n	803af1e <_strtod_l+0xa86>
 803af18:	2f00      	cmp	r7, #0
 803af1a:	f43f ad7e 	beq.w	803aa1a <_strtod_l+0x582>
 803af1e:	4b61      	ldr	r3, [pc, #388]	; (803b0a4 <_strtod_l+0xc0c>)
 803af20:	2200      	movs	r2, #0
 803af22:	e78c      	b.n	803ae3e <_strtod_l+0x9a6>
 803af24:	f8df 9178 	ldr.w	r9, [pc, #376]	; 803b0a0 <_strtod_l+0xc08>
 803af28:	f04f 0800 	mov.w	r8, #0
 803af2c:	e7e7      	b.n	803aefe <_strtod_l+0xa66>
 803af2e:	4b5c      	ldr	r3, [pc, #368]	; (803b0a0 <_strtod_l+0xc08>)
 803af30:	4640      	mov	r0, r8
 803af32:	4649      	mov	r1, r9
 803af34:	2200      	movs	r2, #0
 803af36:	f7e5 fb5f 	bl	80205f8 <__aeabi_dmul>
 803af3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803af3c:	4680      	mov	r8, r0
 803af3e:	4689      	mov	r9, r1
 803af40:	b933      	cbnz	r3, 803af50 <_strtod_l+0xab8>
 803af42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 803af46:	9012      	str	r0, [sp, #72]	; 0x48
 803af48:	9313      	str	r3, [sp, #76]	; 0x4c
 803af4a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 803af4e:	e7dd      	b.n	803af0c <_strtod_l+0xa74>
 803af50:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 803af54:	e7f9      	b.n	803af4a <_strtod_l+0xab2>
 803af56:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 803af5a:	9b04      	ldr	r3, [sp, #16]
 803af5c:	2b00      	cmp	r3, #0
 803af5e:	d1a8      	bne.n	803aeb2 <_strtod_l+0xa1a>
 803af60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 803af64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 803af66:	0d1b      	lsrs	r3, r3, #20
 803af68:	051b      	lsls	r3, r3, #20
 803af6a:	429a      	cmp	r2, r3
 803af6c:	d1a1      	bne.n	803aeb2 <_strtod_l+0xa1a>
 803af6e:	4640      	mov	r0, r8
 803af70:	4649      	mov	r1, r9
 803af72:	f7e5 fea1 	bl	8020cb8 <__aeabi_d2lz>
 803af76:	f7e5 fb11 	bl	802059c <__aeabi_l2d>
 803af7a:	4602      	mov	r2, r0
 803af7c:	460b      	mov	r3, r1
 803af7e:	4640      	mov	r0, r8
 803af80:	4649      	mov	r1, r9
 803af82:	f7e5 f981 	bl	8020288 <__aeabi_dsub>
 803af86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 803af88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 803af8c:	ea43 030a 	orr.w	r3, r3, sl
 803af90:	4313      	orrs	r3, r2
 803af92:	4680      	mov	r8, r0
 803af94:	4689      	mov	r9, r1
 803af96:	d053      	beq.n	803b040 <_strtod_l+0xba8>
 803af98:	a335      	add	r3, pc, #212	; (adr r3, 803b070 <_strtod_l+0xbd8>)
 803af9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 803af9e:	f7e5 fd9d 	bl	8020adc <__aeabi_dcmplt>
 803afa2:	2800      	cmp	r0, #0
 803afa4:	f47f acce 	bne.w	803a944 <_strtod_l+0x4ac>
 803afa8:	a333      	add	r3, pc, #204	; (adr r3, 803b078 <_strtod_l+0xbe0>)
 803afaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 803afae:	4640      	mov	r0, r8
 803afb0:	4649      	mov	r1, r9
 803afb2:	f7e5 fdb1 	bl	8020b18 <__aeabi_dcmpgt>
 803afb6:	2800      	cmp	r0, #0
 803afb8:	f43f af7b 	beq.w	803aeb2 <_strtod_l+0xa1a>
 803afbc:	e4c2      	b.n	803a944 <_strtod_l+0x4ac>
 803afbe:	9b04      	ldr	r3, [sp, #16]
 803afc0:	b333      	cbz	r3, 803b010 <_strtod_l+0xb78>
 803afc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 803afc4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 803afc8:	d822      	bhi.n	803b010 <_strtod_l+0xb78>
 803afca:	a32d      	add	r3, pc, #180	; (adr r3, 803b080 <_strtod_l+0xbe8>)
 803afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 803afd0:	4640      	mov	r0, r8
 803afd2:	4649      	mov	r1, r9
 803afd4:	f7e5 fd8c 	bl	8020af0 <__aeabi_dcmple>
 803afd8:	b1a0      	cbz	r0, 803b004 <_strtod_l+0xb6c>
 803afda:	4649      	mov	r1, r9
 803afdc:	4640      	mov	r0, r8
 803afde:	f7e5 fde3 	bl	8020ba8 <__aeabi_d2uiz>
 803afe2:	2801      	cmp	r0, #1
 803afe4:	bf38      	it	cc
 803afe6:	2001      	movcc	r0, #1
 803afe8:	f7e5 fa8c 	bl	8020504 <__aeabi_ui2d>
 803afec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803afee:	4680      	mov	r8, r0
 803aff0:	4689      	mov	r9, r1
 803aff2:	bb13      	cbnz	r3, 803b03a <_strtod_l+0xba2>
 803aff4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 803aff8:	9014      	str	r0, [sp, #80]	; 0x50
 803affa:	9315      	str	r3, [sp, #84]	; 0x54
 803affc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 803b000:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 803b004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 803b006:	9a11      	ldr	r2, [sp, #68]	; 0x44
 803b008:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 803b00c:	1a9b      	subs	r3, r3, r2
 803b00e:	930d      	str	r3, [sp, #52]	; 0x34
 803b010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 803b014:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 803b018:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 803b01c:	f001 fea6 	bl	803cd6c <__ulp>
 803b020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 803b024:	ec53 2b10 	vmov	r2, r3, d0
 803b028:	f7e5 fae6 	bl	80205f8 <__aeabi_dmul>
 803b02c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 803b030:	f7e5 f92c 	bl	802028c <__adddf3>
 803b034:	4682      	mov	sl, r0
 803b036:	468b      	mov	fp, r1
 803b038:	e78f      	b.n	803af5a <_strtod_l+0xac2>
 803b03a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 803b03e:	e7dd      	b.n	803affc <_strtod_l+0xb64>
 803b040:	a311      	add	r3, pc, #68	; (adr r3, 803b088 <_strtod_l+0xbf0>)
 803b042:	e9d3 2300 	ldrd	r2, r3, [r3]
 803b046:	f7e5 fd49 	bl	8020adc <__aeabi_dcmplt>
 803b04a:	e7b4      	b.n	803afb6 <_strtod_l+0xb1e>
 803b04c:	2300      	movs	r3, #0
 803b04e:	930e      	str	r3, [sp, #56]	; 0x38
 803b050:	9a19      	ldr	r2, [sp, #100]	; 0x64
 803b052:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 803b054:	6013      	str	r3, [r2, #0]
 803b056:	f7ff ba65 	b.w	803a524 <_strtod_l+0x8c>
 803b05a:	2b65      	cmp	r3, #101	; 0x65
 803b05c:	f43f ab5d 	beq.w	803a71a <_strtod_l+0x282>
 803b060:	2b45      	cmp	r3, #69	; 0x45
 803b062:	f43f ab5a 	beq.w	803a71a <_strtod_l+0x282>
 803b066:	2201      	movs	r2, #1
 803b068:	f7ff bb92 	b.w	803a790 <_strtod_l+0x2f8>
 803b06c:	f3af 8000 	nop.w
 803b070:	94a03595 	.word	0x94a03595
 803b074:	3fdfffff 	.word	0x3fdfffff
 803b078:	35afe535 	.word	0x35afe535
 803b07c:	3fe00000 	.word	0x3fe00000
 803b080:	ffc00000 	.word	0xffc00000
 803b084:	41dfffff 	.word	0x41dfffff
 803b088:	94a03595 	.word	0x94a03595
 803b08c:	3fcfffff 	.word	0x3fcfffff
 803b090:	3ff00000 	.word	0x3ff00000
 803b094:	7ff00000 	.word	0x7ff00000
 803b098:	7fe00000 	.word	0x7fe00000
 803b09c:	7c9fffff 	.word	0x7c9fffff
 803b0a0:	3fe00000 	.word	0x3fe00000
 803b0a4:	bff00000 	.word	0xbff00000
 803b0a8:	7fefffff 	.word	0x7fefffff

0803b0ac <_strtod_r>:
 803b0ac:	4b01      	ldr	r3, [pc, #4]	; (803b0b4 <_strtod_r+0x8>)
 803b0ae:	f7ff b9f3 	b.w	803a498 <_strtod_l>
 803b0b2:	bf00      	nop
 803b0b4:	20000094 	.word	0x20000094

0803b0b8 <_strtol_l.isra.0>:
 803b0b8:	2b01      	cmp	r3, #1
 803b0ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803b0be:	d001      	beq.n	803b0c4 <_strtol_l.isra.0+0xc>
 803b0c0:	2b24      	cmp	r3, #36	; 0x24
 803b0c2:	d906      	bls.n	803b0d2 <_strtol_l.isra.0+0x1a>
 803b0c4:	f7fd ffbc 	bl	8039040 <__errno>
 803b0c8:	2316      	movs	r3, #22
 803b0ca:	6003      	str	r3, [r0, #0]
 803b0cc:	2000      	movs	r0, #0
 803b0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803b0d2:	4f3a      	ldr	r7, [pc, #232]	; (803b1bc <_strtol_l.isra.0+0x104>)
 803b0d4:	468e      	mov	lr, r1
 803b0d6:	4676      	mov	r6, lr
 803b0d8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 803b0dc:	5de5      	ldrb	r5, [r4, r7]
 803b0de:	f015 0508 	ands.w	r5, r5, #8
 803b0e2:	d1f8      	bne.n	803b0d6 <_strtol_l.isra.0+0x1e>
 803b0e4:	2c2d      	cmp	r4, #45	; 0x2d
 803b0e6:	d134      	bne.n	803b152 <_strtol_l.isra.0+0x9a>
 803b0e8:	f89e 4000 	ldrb.w	r4, [lr]
 803b0ec:	f04f 0801 	mov.w	r8, #1
 803b0f0:	f106 0e02 	add.w	lr, r6, #2
 803b0f4:	2b00      	cmp	r3, #0
 803b0f6:	d05c      	beq.n	803b1b2 <_strtol_l.isra.0+0xfa>
 803b0f8:	2b10      	cmp	r3, #16
 803b0fa:	d10c      	bne.n	803b116 <_strtol_l.isra.0+0x5e>
 803b0fc:	2c30      	cmp	r4, #48	; 0x30
 803b0fe:	d10a      	bne.n	803b116 <_strtol_l.isra.0+0x5e>
 803b100:	f89e 4000 	ldrb.w	r4, [lr]
 803b104:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 803b108:	2c58      	cmp	r4, #88	; 0x58
 803b10a:	d14d      	bne.n	803b1a8 <_strtol_l.isra.0+0xf0>
 803b10c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 803b110:	2310      	movs	r3, #16
 803b112:	f10e 0e02 	add.w	lr, lr, #2
 803b116:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 803b11a:	f10c 3cff 	add.w	ip, ip, #4294967295
 803b11e:	2600      	movs	r6, #0
 803b120:	fbbc f9f3 	udiv	r9, ip, r3
 803b124:	4635      	mov	r5, r6
 803b126:	fb03 ca19 	mls	sl, r3, r9, ip
 803b12a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 803b12e:	2f09      	cmp	r7, #9
 803b130:	d818      	bhi.n	803b164 <_strtol_l.isra.0+0xac>
 803b132:	463c      	mov	r4, r7
 803b134:	42a3      	cmp	r3, r4
 803b136:	dd24      	ble.n	803b182 <_strtol_l.isra.0+0xca>
 803b138:	2e00      	cmp	r6, #0
 803b13a:	db1f      	blt.n	803b17c <_strtol_l.isra.0+0xc4>
 803b13c:	45a9      	cmp	r9, r5
 803b13e:	d31d      	bcc.n	803b17c <_strtol_l.isra.0+0xc4>
 803b140:	d101      	bne.n	803b146 <_strtol_l.isra.0+0x8e>
 803b142:	45a2      	cmp	sl, r4
 803b144:	db1a      	blt.n	803b17c <_strtol_l.isra.0+0xc4>
 803b146:	fb05 4503 	mla	r5, r5, r3, r4
 803b14a:	2601      	movs	r6, #1
 803b14c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 803b150:	e7eb      	b.n	803b12a <_strtol_l.isra.0+0x72>
 803b152:	2c2b      	cmp	r4, #43	; 0x2b
 803b154:	bf08      	it	eq
 803b156:	f89e 4000 	ldrbeq.w	r4, [lr]
 803b15a:	46a8      	mov	r8, r5
 803b15c:	bf08      	it	eq
 803b15e:	f106 0e02 	addeq.w	lr, r6, #2
 803b162:	e7c7      	b.n	803b0f4 <_strtol_l.isra.0+0x3c>
 803b164:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 803b168:	2f19      	cmp	r7, #25
 803b16a:	d801      	bhi.n	803b170 <_strtol_l.isra.0+0xb8>
 803b16c:	3c37      	subs	r4, #55	; 0x37
 803b16e:	e7e1      	b.n	803b134 <_strtol_l.isra.0+0x7c>
 803b170:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 803b174:	2f19      	cmp	r7, #25
 803b176:	d804      	bhi.n	803b182 <_strtol_l.isra.0+0xca>
 803b178:	3c57      	subs	r4, #87	; 0x57
 803b17a:	e7db      	b.n	803b134 <_strtol_l.isra.0+0x7c>
 803b17c:	f04f 36ff 	mov.w	r6, #4294967295
 803b180:	e7e4      	b.n	803b14c <_strtol_l.isra.0+0x94>
 803b182:	2e00      	cmp	r6, #0
 803b184:	da05      	bge.n	803b192 <_strtol_l.isra.0+0xda>
 803b186:	2322      	movs	r3, #34	; 0x22
 803b188:	6003      	str	r3, [r0, #0]
 803b18a:	4665      	mov	r5, ip
 803b18c:	b942      	cbnz	r2, 803b1a0 <_strtol_l.isra.0+0xe8>
 803b18e:	4628      	mov	r0, r5
 803b190:	e79d      	b.n	803b0ce <_strtol_l.isra.0+0x16>
 803b192:	f1b8 0f00 	cmp.w	r8, #0
 803b196:	d000      	beq.n	803b19a <_strtol_l.isra.0+0xe2>
 803b198:	426d      	negs	r5, r5
 803b19a:	2a00      	cmp	r2, #0
 803b19c:	d0f7      	beq.n	803b18e <_strtol_l.isra.0+0xd6>
 803b19e:	b10e      	cbz	r6, 803b1a4 <_strtol_l.isra.0+0xec>
 803b1a0:	f10e 31ff 	add.w	r1, lr, #4294967295
 803b1a4:	6011      	str	r1, [r2, #0]
 803b1a6:	e7f2      	b.n	803b18e <_strtol_l.isra.0+0xd6>
 803b1a8:	2430      	movs	r4, #48	; 0x30
 803b1aa:	2b00      	cmp	r3, #0
 803b1ac:	d1b3      	bne.n	803b116 <_strtol_l.isra.0+0x5e>
 803b1ae:	2308      	movs	r3, #8
 803b1b0:	e7b1      	b.n	803b116 <_strtol_l.isra.0+0x5e>
 803b1b2:	2c30      	cmp	r4, #48	; 0x30
 803b1b4:	d0a4      	beq.n	803b100 <_strtol_l.isra.0+0x48>
 803b1b6:	230a      	movs	r3, #10
 803b1b8:	e7ad      	b.n	803b116 <_strtol_l.isra.0+0x5e>
 803b1ba:	bf00      	nop
 803b1bc:	0803e991 	.word	0x0803e991

0803b1c0 <_strtol_r>:
 803b1c0:	f7ff bf7a 	b.w	803b0b8 <_strtol_l.isra.0>

0803b1c4 <_write_r>:
 803b1c4:	b538      	push	{r3, r4, r5, lr}
 803b1c6:	4d07      	ldr	r5, [pc, #28]	; (803b1e4 <_write_r+0x20>)
 803b1c8:	4604      	mov	r4, r0
 803b1ca:	4608      	mov	r0, r1
 803b1cc:	4611      	mov	r1, r2
 803b1ce:	2200      	movs	r2, #0
 803b1d0:	602a      	str	r2, [r5, #0]
 803b1d2:	461a      	mov	r2, r3
 803b1d4:	f7f6 fc77 	bl	8031ac6 <_write>
 803b1d8:	1c43      	adds	r3, r0, #1
 803b1da:	d102      	bne.n	803b1e2 <_write_r+0x1e>
 803b1dc:	682b      	ldr	r3, [r5, #0]
 803b1de:	b103      	cbz	r3, 803b1e2 <_write_r+0x1e>
 803b1e0:	6023      	str	r3, [r4, #0]
 803b1e2:	bd38      	pop	{r3, r4, r5, pc}
 803b1e4:	200009c4 	.word	0x200009c4

0803b1e8 <_close_r>:
 803b1e8:	b538      	push	{r3, r4, r5, lr}
 803b1ea:	4d06      	ldr	r5, [pc, #24]	; (803b204 <_close_r+0x1c>)
 803b1ec:	2300      	movs	r3, #0
 803b1ee:	4604      	mov	r4, r0
 803b1f0:	4608      	mov	r0, r1
 803b1f2:	602b      	str	r3, [r5, #0]
 803b1f4:	f7f6 fc83 	bl	8031afe <_close>
 803b1f8:	1c43      	adds	r3, r0, #1
 803b1fa:	d102      	bne.n	803b202 <_close_r+0x1a>
 803b1fc:	682b      	ldr	r3, [r5, #0]
 803b1fe:	b103      	cbz	r3, 803b202 <_close_r+0x1a>
 803b200:	6023      	str	r3, [r4, #0]
 803b202:	bd38      	pop	{r3, r4, r5, pc}
 803b204:	200009c4 	.word	0x200009c4

0803b208 <quorem>:
 803b208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803b20c:	6903      	ldr	r3, [r0, #16]
 803b20e:	690c      	ldr	r4, [r1, #16]
 803b210:	42a3      	cmp	r3, r4
 803b212:	4607      	mov	r7, r0
 803b214:	f2c0 8081 	blt.w	803b31a <quorem+0x112>
 803b218:	3c01      	subs	r4, #1
 803b21a:	f101 0814 	add.w	r8, r1, #20
 803b21e:	f100 0514 	add.w	r5, r0, #20
 803b222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 803b226:	9301      	str	r3, [sp, #4]
 803b228:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 803b22c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 803b230:	3301      	adds	r3, #1
 803b232:	429a      	cmp	r2, r3
 803b234:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 803b238:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 803b23c:	fbb2 f6f3 	udiv	r6, r2, r3
 803b240:	d331      	bcc.n	803b2a6 <quorem+0x9e>
 803b242:	f04f 0e00 	mov.w	lr, #0
 803b246:	4640      	mov	r0, r8
 803b248:	46ac      	mov	ip, r5
 803b24a:	46f2      	mov	sl, lr
 803b24c:	f850 2b04 	ldr.w	r2, [r0], #4
 803b250:	b293      	uxth	r3, r2
 803b252:	fb06 e303 	mla	r3, r6, r3, lr
 803b256:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 803b25a:	b29b      	uxth	r3, r3
 803b25c:	ebaa 0303 	sub.w	r3, sl, r3
 803b260:	0c12      	lsrs	r2, r2, #16
 803b262:	f8dc a000 	ldr.w	sl, [ip]
 803b266:	fb06 e202 	mla	r2, r6, r2, lr
 803b26a:	fa13 f38a 	uxtah	r3, r3, sl
 803b26e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 803b272:	fa1f fa82 	uxth.w	sl, r2
 803b276:	f8dc 2000 	ldr.w	r2, [ip]
 803b27a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 803b27e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 803b282:	b29b      	uxth	r3, r3
 803b284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 803b288:	4581      	cmp	r9, r0
 803b28a:	f84c 3b04 	str.w	r3, [ip], #4
 803b28e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 803b292:	d2db      	bcs.n	803b24c <quorem+0x44>
 803b294:	f855 300b 	ldr.w	r3, [r5, fp]
 803b298:	b92b      	cbnz	r3, 803b2a6 <quorem+0x9e>
 803b29a:	9b01      	ldr	r3, [sp, #4]
 803b29c:	3b04      	subs	r3, #4
 803b29e:	429d      	cmp	r5, r3
 803b2a0:	461a      	mov	r2, r3
 803b2a2:	d32e      	bcc.n	803b302 <quorem+0xfa>
 803b2a4:	613c      	str	r4, [r7, #16]
 803b2a6:	4638      	mov	r0, r7
 803b2a8:	f001 fcbc 	bl	803cc24 <__mcmp>
 803b2ac:	2800      	cmp	r0, #0
 803b2ae:	db24      	blt.n	803b2fa <quorem+0xf2>
 803b2b0:	3601      	adds	r6, #1
 803b2b2:	4628      	mov	r0, r5
 803b2b4:	f04f 0c00 	mov.w	ip, #0
 803b2b8:	f858 2b04 	ldr.w	r2, [r8], #4
 803b2bc:	f8d0 e000 	ldr.w	lr, [r0]
 803b2c0:	b293      	uxth	r3, r2
 803b2c2:	ebac 0303 	sub.w	r3, ip, r3
 803b2c6:	0c12      	lsrs	r2, r2, #16
 803b2c8:	fa13 f38e 	uxtah	r3, r3, lr
 803b2cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 803b2d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 803b2d4:	b29b      	uxth	r3, r3
 803b2d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 803b2da:	45c1      	cmp	r9, r8
 803b2dc:	f840 3b04 	str.w	r3, [r0], #4
 803b2e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 803b2e4:	d2e8      	bcs.n	803b2b8 <quorem+0xb0>
 803b2e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 803b2ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 803b2ee:	b922      	cbnz	r2, 803b2fa <quorem+0xf2>
 803b2f0:	3b04      	subs	r3, #4
 803b2f2:	429d      	cmp	r5, r3
 803b2f4:	461a      	mov	r2, r3
 803b2f6:	d30a      	bcc.n	803b30e <quorem+0x106>
 803b2f8:	613c      	str	r4, [r7, #16]
 803b2fa:	4630      	mov	r0, r6
 803b2fc:	b003      	add	sp, #12
 803b2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803b302:	6812      	ldr	r2, [r2, #0]
 803b304:	3b04      	subs	r3, #4
 803b306:	2a00      	cmp	r2, #0
 803b308:	d1cc      	bne.n	803b2a4 <quorem+0x9c>
 803b30a:	3c01      	subs	r4, #1
 803b30c:	e7c7      	b.n	803b29e <quorem+0x96>
 803b30e:	6812      	ldr	r2, [r2, #0]
 803b310:	3b04      	subs	r3, #4
 803b312:	2a00      	cmp	r2, #0
 803b314:	d1f0      	bne.n	803b2f8 <quorem+0xf0>
 803b316:	3c01      	subs	r4, #1
 803b318:	e7eb      	b.n	803b2f2 <quorem+0xea>
 803b31a:	2000      	movs	r0, #0
 803b31c:	e7ee      	b.n	803b2fc <quorem+0xf4>
	...

0803b320 <_dtoa_r>:
 803b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803b324:	ed2d 8b02 	vpush	{d8}
 803b328:	ec57 6b10 	vmov	r6, r7, d0
 803b32c:	b095      	sub	sp, #84	; 0x54
 803b32e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 803b330:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 803b334:	9105      	str	r1, [sp, #20]
 803b336:	e9cd 6702 	strd	r6, r7, [sp, #8]
 803b33a:	4604      	mov	r4, r0
 803b33c:	9209      	str	r2, [sp, #36]	; 0x24
 803b33e:	930f      	str	r3, [sp, #60]	; 0x3c
 803b340:	b975      	cbnz	r5, 803b360 <_dtoa_r+0x40>
 803b342:	2010      	movs	r0, #16
 803b344:	f001 f980 	bl	803c648 <malloc>
 803b348:	4602      	mov	r2, r0
 803b34a:	6260      	str	r0, [r4, #36]	; 0x24
 803b34c:	b920      	cbnz	r0, 803b358 <_dtoa_r+0x38>
 803b34e:	4bb2      	ldr	r3, [pc, #712]	; (803b618 <_dtoa_r+0x2f8>)
 803b350:	21ea      	movs	r1, #234	; 0xea
 803b352:	48b2      	ldr	r0, [pc, #712]	; (803b61c <_dtoa_r+0x2fc>)
 803b354:	f001 ffee 	bl	803d334 <__assert_func>
 803b358:	e9c0 5501 	strd	r5, r5, [r0, #4]
 803b35c:	6005      	str	r5, [r0, #0]
 803b35e:	60c5      	str	r5, [r0, #12]
 803b360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 803b362:	6819      	ldr	r1, [r3, #0]
 803b364:	b151      	cbz	r1, 803b37c <_dtoa_r+0x5c>
 803b366:	685a      	ldr	r2, [r3, #4]
 803b368:	604a      	str	r2, [r1, #4]
 803b36a:	2301      	movs	r3, #1
 803b36c:	4093      	lsls	r3, r2
 803b36e:	608b      	str	r3, [r1, #8]
 803b370:	4620      	mov	r0, r4
 803b372:	f001 f9cf 	bl	803c714 <_Bfree>
 803b376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 803b378:	2200      	movs	r2, #0
 803b37a:	601a      	str	r2, [r3, #0]
 803b37c:	1e3b      	subs	r3, r7, #0
 803b37e:	bfb9      	ittee	lt
 803b380:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 803b384:	9303      	strlt	r3, [sp, #12]
 803b386:	2300      	movge	r3, #0
 803b388:	f8c8 3000 	strge.w	r3, [r8]
 803b38c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 803b390:	4ba3      	ldr	r3, [pc, #652]	; (803b620 <_dtoa_r+0x300>)
 803b392:	bfbc      	itt	lt
 803b394:	2201      	movlt	r2, #1
 803b396:	f8c8 2000 	strlt.w	r2, [r8]
 803b39a:	ea33 0309 	bics.w	r3, r3, r9
 803b39e:	d11b      	bne.n	803b3d8 <_dtoa_r+0xb8>
 803b3a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 803b3a2:	f242 730f 	movw	r3, #9999	; 0x270f
 803b3a6:	6013      	str	r3, [r2, #0]
 803b3a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 803b3ac:	4333      	orrs	r3, r6
 803b3ae:	f000 857a 	beq.w	803bea6 <_dtoa_r+0xb86>
 803b3b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 803b3b4:	b963      	cbnz	r3, 803b3d0 <_dtoa_r+0xb0>
 803b3b6:	4b9b      	ldr	r3, [pc, #620]	; (803b624 <_dtoa_r+0x304>)
 803b3b8:	e024      	b.n	803b404 <_dtoa_r+0xe4>
 803b3ba:	4b9b      	ldr	r3, [pc, #620]	; (803b628 <_dtoa_r+0x308>)
 803b3bc:	9300      	str	r3, [sp, #0]
 803b3be:	3308      	adds	r3, #8
 803b3c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 803b3c2:	6013      	str	r3, [r2, #0]
 803b3c4:	9800      	ldr	r0, [sp, #0]
 803b3c6:	b015      	add	sp, #84	; 0x54
 803b3c8:	ecbd 8b02 	vpop	{d8}
 803b3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803b3d0:	4b94      	ldr	r3, [pc, #592]	; (803b624 <_dtoa_r+0x304>)
 803b3d2:	9300      	str	r3, [sp, #0]
 803b3d4:	3303      	adds	r3, #3
 803b3d6:	e7f3      	b.n	803b3c0 <_dtoa_r+0xa0>
 803b3d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 803b3dc:	2200      	movs	r2, #0
 803b3de:	ec51 0b17 	vmov	r0, r1, d7
 803b3e2:	2300      	movs	r3, #0
 803b3e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 803b3e8:	f7e5 fb6e 	bl	8020ac8 <__aeabi_dcmpeq>
 803b3ec:	4680      	mov	r8, r0
 803b3ee:	b158      	cbz	r0, 803b408 <_dtoa_r+0xe8>
 803b3f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 803b3f2:	2301      	movs	r3, #1
 803b3f4:	6013      	str	r3, [r2, #0]
 803b3f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 803b3f8:	2b00      	cmp	r3, #0
 803b3fa:	f000 8551 	beq.w	803bea0 <_dtoa_r+0xb80>
 803b3fe:	488b      	ldr	r0, [pc, #556]	; (803b62c <_dtoa_r+0x30c>)
 803b400:	6018      	str	r0, [r3, #0]
 803b402:	1e43      	subs	r3, r0, #1
 803b404:	9300      	str	r3, [sp, #0]
 803b406:	e7dd      	b.n	803b3c4 <_dtoa_r+0xa4>
 803b408:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 803b40c:	aa12      	add	r2, sp, #72	; 0x48
 803b40e:	a913      	add	r1, sp, #76	; 0x4c
 803b410:	4620      	mov	r0, r4
 803b412:	f001 fd27 	bl	803ce64 <__d2b>
 803b416:	f3c9 550a 	ubfx	r5, r9, #20, #11
 803b41a:	4683      	mov	fp, r0
 803b41c:	2d00      	cmp	r5, #0
 803b41e:	d07c      	beq.n	803b51a <_dtoa_r+0x1fa>
 803b420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 803b422:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 803b426:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803b42a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 803b42e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 803b432:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 803b436:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 803b43a:	4b7d      	ldr	r3, [pc, #500]	; (803b630 <_dtoa_r+0x310>)
 803b43c:	2200      	movs	r2, #0
 803b43e:	4630      	mov	r0, r6
 803b440:	4639      	mov	r1, r7
 803b442:	f7e4 ff21 	bl	8020288 <__aeabi_dsub>
 803b446:	a36e      	add	r3, pc, #440	; (adr r3, 803b600 <_dtoa_r+0x2e0>)
 803b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 803b44c:	f7e5 f8d4 	bl	80205f8 <__aeabi_dmul>
 803b450:	a36d      	add	r3, pc, #436	; (adr r3, 803b608 <_dtoa_r+0x2e8>)
 803b452:	e9d3 2300 	ldrd	r2, r3, [r3]
 803b456:	f7e4 ff19 	bl	802028c <__adddf3>
 803b45a:	4606      	mov	r6, r0
 803b45c:	4628      	mov	r0, r5
 803b45e:	460f      	mov	r7, r1
 803b460:	f7e5 f860 	bl	8020524 <__aeabi_i2d>
 803b464:	a36a      	add	r3, pc, #424	; (adr r3, 803b610 <_dtoa_r+0x2f0>)
 803b466:	e9d3 2300 	ldrd	r2, r3, [r3]
 803b46a:	f7e5 f8c5 	bl	80205f8 <__aeabi_dmul>
 803b46e:	4602      	mov	r2, r0
 803b470:	460b      	mov	r3, r1
 803b472:	4630      	mov	r0, r6
 803b474:	4639      	mov	r1, r7
 803b476:	f7e4 ff09 	bl	802028c <__adddf3>
 803b47a:	4606      	mov	r6, r0
 803b47c:	460f      	mov	r7, r1
 803b47e:	f7e5 fb6b 	bl	8020b58 <__aeabi_d2iz>
 803b482:	2200      	movs	r2, #0
 803b484:	4682      	mov	sl, r0
 803b486:	2300      	movs	r3, #0
 803b488:	4630      	mov	r0, r6
 803b48a:	4639      	mov	r1, r7
 803b48c:	f7e5 fb26 	bl	8020adc <__aeabi_dcmplt>
 803b490:	b148      	cbz	r0, 803b4a6 <_dtoa_r+0x186>
 803b492:	4650      	mov	r0, sl
 803b494:	f7e5 f846 	bl	8020524 <__aeabi_i2d>
 803b498:	4632      	mov	r2, r6
 803b49a:	463b      	mov	r3, r7
 803b49c:	f7e5 fb14 	bl	8020ac8 <__aeabi_dcmpeq>
 803b4a0:	b908      	cbnz	r0, 803b4a6 <_dtoa_r+0x186>
 803b4a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 803b4a6:	f1ba 0f16 	cmp.w	sl, #22
 803b4aa:	d854      	bhi.n	803b556 <_dtoa_r+0x236>
 803b4ac:	4b61      	ldr	r3, [pc, #388]	; (803b634 <_dtoa_r+0x314>)
 803b4ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 803b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 803b4b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 803b4ba:	f7e5 fb0f 	bl	8020adc <__aeabi_dcmplt>
 803b4be:	2800      	cmp	r0, #0
 803b4c0:	d04b      	beq.n	803b55a <_dtoa_r+0x23a>
 803b4c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 803b4c6:	2300      	movs	r3, #0
 803b4c8:	930e      	str	r3, [sp, #56]	; 0x38
 803b4ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 803b4cc:	1b5d      	subs	r5, r3, r5
 803b4ce:	1e6b      	subs	r3, r5, #1
 803b4d0:	9304      	str	r3, [sp, #16]
 803b4d2:	bf43      	ittte	mi
 803b4d4:	2300      	movmi	r3, #0
 803b4d6:	f1c5 0801 	rsbmi	r8, r5, #1
 803b4da:	9304      	strmi	r3, [sp, #16]
 803b4dc:	f04f 0800 	movpl.w	r8, #0
 803b4e0:	f1ba 0f00 	cmp.w	sl, #0
 803b4e4:	db3b      	blt.n	803b55e <_dtoa_r+0x23e>
 803b4e6:	9b04      	ldr	r3, [sp, #16]
 803b4e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 803b4ec:	4453      	add	r3, sl
 803b4ee:	9304      	str	r3, [sp, #16]
 803b4f0:	2300      	movs	r3, #0
 803b4f2:	9306      	str	r3, [sp, #24]
 803b4f4:	9b05      	ldr	r3, [sp, #20]
 803b4f6:	2b09      	cmp	r3, #9
 803b4f8:	d869      	bhi.n	803b5ce <_dtoa_r+0x2ae>
 803b4fa:	2b05      	cmp	r3, #5
 803b4fc:	bfc4      	itt	gt
 803b4fe:	3b04      	subgt	r3, #4
 803b500:	9305      	strgt	r3, [sp, #20]
 803b502:	9b05      	ldr	r3, [sp, #20]
 803b504:	f1a3 0302 	sub.w	r3, r3, #2
 803b508:	bfcc      	ite	gt
 803b50a:	2500      	movgt	r5, #0
 803b50c:	2501      	movle	r5, #1
 803b50e:	2b03      	cmp	r3, #3
 803b510:	d869      	bhi.n	803b5e6 <_dtoa_r+0x2c6>
 803b512:	e8df f003 	tbb	[pc, r3]
 803b516:	4e2c      	.short	0x4e2c
 803b518:	5a4c      	.short	0x5a4c
 803b51a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 803b51e:	441d      	add	r5, r3
 803b520:	f205 4332 	addw	r3, r5, #1074	; 0x432
 803b524:	2b20      	cmp	r3, #32
 803b526:	bfc1      	itttt	gt
 803b528:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 803b52c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 803b530:	fa09 f303 	lslgt.w	r3, r9, r3
 803b534:	fa26 f000 	lsrgt.w	r0, r6, r0
 803b538:	bfda      	itte	le
 803b53a:	f1c3 0320 	rsble	r3, r3, #32
 803b53e:	fa06 f003 	lslle.w	r0, r6, r3
 803b542:	4318      	orrgt	r0, r3
 803b544:	f7e4 ffde 	bl	8020504 <__aeabi_ui2d>
 803b548:	2301      	movs	r3, #1
 803b54a:	4606      	mov	r6, r0
 803b54c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 803b550:	3d01      	subs	r5, #1
 803b552:	9310      	str	r3, [sp, #64]	; 0x40
 803b554:	e771      	b.n	803b43a <_dtoa_r+0x11a>
 803b556:	2301      	movs	r3, #1
 803b558:	e7b6      	b.n	803b4c8 <_dtoa_r+0x1a8>
 803b55a:	900e      	str	r0, [sp, #56]	; 0x38
 803b55c:	e7b5      	b.n	803b4ca <_dtoa_r+0x1aa>
 803b55e:	f1ca 0300 	rsb	r3, sl, #0
 803b562:	9306      	str	r3, [sp, #24]
 803b564:	2300      	movs	r3, #0
 803b566:	eba8 080a 	sub.w	r8, r8, sl
 803b56a:	930d      	str	r3, [sp, #52]	; 0x34
 803b56c:	e7c2      	b.n	803b4f4 <_dtoa_r+0x1d4>
 803b56e:	2300      	movs	r3, #0
 803b570:	9308      	str	r3, [sp, #32]
 803b572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803b574:	2b00      	cmp	r3, #0
 803b576:	dc39      	bgt.n	803b5ec <_dtoa_r+0x2cc>
 803b578:	f04f 0901 	mov.w	r9, #1
 803b57c:	f8cd 9004 	str.w	r9, [sp, #4]
 803b580:	464b      	mov	r3, r9
 803b582:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 803b586:	6a60      	ldr	r0, [r4, #36]	; 0x24
 803b588:	2200      	movs	r2, #0
 803b58a:	6042      	str	r2, [r0, #4]
 803b58c:	2204      	movs	r2, #4
 803b58e:	f102 0614 	add.w	r6, r2, #20
 803b592:	429e      	cmp	r6, r3
 803b594:	6841      	ldr	r1, [r0, #4]
 803b596:	d92f      	bls.n	803b5f8 <_dtoa_r+0x2d8>
 803b598:	4620      	mov	r0, r4
 803b59a:	f001 f87b 	bl	803c694 <_Balloc>
 803b59e:	9000      	str	r0, [sp, #0]
 803b5a0:	2800      	cmp	r0, #0
 803b5a2:	d14b      	bne.n	803b63c <_dtoa_r+0x31c>
 803b5a4:	4b24      	ldr	r3, [pc, #144]	; (803b638 <_dtoa_r+0x318>)
 803b5a6:	4602      	mov	r2, r0
 803b5a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 803b5ac:	e6d1      	b.n	803b352 <_dtoa_r+0x32>
 803b5ae:	2301      	movs	r3, #1
 803b5b0:	e7de      	b.n	803b570 <_dtoa_r+0x250>
 803b5b2:	2300      	movs	r3, #0
 803b5b4:	9308      	str	r3, [sp, #32]
 803b5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803b5b8:	eb0a 0903 	add.w	r9, sl, r3
 803b5bc:	f109 0301 	add.w	r3, r9, #1
 803b5c0:	2b01      	cmp	r3, #1
 803b5c2:	9301      	str	r3, [sp, #4]
 803b5c4:	bfb8      	it	lt
 803b5c6:	2301      	movlt	r3, #1
 803b5c8:	e7dd      	b.n	803b586 <_dtoa_r+0x266>
 803b5ca:	2301      	movs	r3, #1
 803b5cc:	e7f2      	b.n	803b5b4 <_dtoa_r+0x294>
 803b5ce:	2501      	movs	r5, #1
 803b5d0:	2300      	movs	r3, #0
 803b5d2:	9305      	str	r3, [sp, #20]
 803b5d4:	9508      	str	r5, [sp, #32]
 803b5d6:	f04f 39ff 	mov.w	r9, #4294967295
 803b5da:	2200      	movs	r2, #0
 803b5dc:	f8cd 9004 	str.w	r9, [sp, #4]
 803b5e0:	2312      	movs	r3, #18
 803b5e2:	9209      	str	r2, [sp, #36]	; 0x24
 803b5e4:	e7cf      	b.n	803b586 <_dtoa_r+0x266>
 803b5e6:	2301      	movs	r3, #1
 803b5e8:	9308      	str	r3, [sp, #32]
 803b5ea:	e7f4      	b.n	803b5d6 <_dtoa_r+0x2b6>
 803b5ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 803b5f0:	f8cd 9004 	str.w	r9, [sp, #4]
 803b5f4:	464b      	mov	r3, r9
 803b5f6:	e7c6      	b.n	803b586 <_dtoa_r+0x266>
 803b5f8:	3101      	adds	r1, #1
 803b5fa:	6041      	str	r1, [r0, #4]
 803b5fc:	0052      	lsls	r2, r2, #1
 803b5fe:	e7c6      	b.n	803b58e <_dtoa_r+0x26e>
 803b600:	636f4361 	.word	0x636f4361
 803b604:	3fd287a7 	.word	0x3fd287a7
 803b608:	8b60c8b3 	.word	0x8b60c8b3
 803b60c:	3fc68a28 	.word	0x3fc68a28
 803b610:	509f79fb 	.word	0x509f79fb
 803b614:	3fd34413 	.word	0x3fd34413
 803b618:	0803ea9e 	.word	0x0803ea9e
 803b61c:	0803eab5 	.word	0x0803eab5
 803b620:	7ff00000 	.word	0x7ff00000
 803b624:	0803ea9a 	.word	0x0803ea9a
 803b628:	0803ea91 	.word	0x0803ea91
 803b62c:	0803e911 	.word	0x0803e911
 803b630:	3ff80000 	.word	0x3ff80000
 803b634:	0803ec30 	.word	0x0803ec30
 803b638:	0803eb14 	.word	0x0803eb14
 803b63c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 803b63e:	9a00      	ldr	r2, [sp, #0]
 803b640:	601a      	str	r2, [r3, #0]
 803b642:	9b01      	ldr	r3, [sp, #4]
 803b644:	2b0e      	cmp	r3, #14
 803b646:	f200 80ad 	bhi.w	803b7a4 <_dtoa_r+0x484>
 803b64a:	2d00      	cmp	r5, #0
 803b64c:	f000 80aa 	beq.w	803b7a4 <_dtoa_r+0x484>
 803b650:	f1ba 0f00 	cmp.w	sl, #0
 803b654:	dd36      	ble.n	803b6c4 <_dtoa_r+0x3a4>
 803b656:	4ac3      	ldr	r2, [pc, #780]	; (803b964 <_dtoa_r+0x644>)
 803b658:	f00a 030f 	and.w	r3, sl, #15
 803b65c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 803b660:	ed93 7b00 	vldr	d7, [r3]
 803b664:	f41a 7f80 	tst.w	sl, #256	; 0x100
 803b668:	ea4f 172a 	mov.w	r7, sl, asr #4
 803b66c:	eeb0 8a47 	vmov.f32	s16, s14
 803b670:	eef0 8a67 	vmov.f32	s17, s15
 803b674:	d016      	beq.n	803b6a4 <_dtoa_r+0x384>
 803b676:	4bbc      	ldr	r3, [pc, #752]	; (803b968 <_dtoa_r+0x648>)
 803b678:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 803b67c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 803b680:	f7e5 f8e4 	bl	802084c <__aeabi_ddiv>
 803b684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803b688:	f007 070f 	and.w	r7, r7, #15
 803b68c:	2503      	movs	r5, #3
 803b68e:	4eb6      	ldr	r6, [pc, #728]	; (803b968 <_dtoa_r+0x648>)
 803b690:	b957      	cbnz	r7, 803b6a8 <_dtoa_r+0x388>
 803b692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 803b696:	ec53 2b18 	vmov	r2, r3, d8
 803b69a:	f7e5 f8d7 	bl	802084c <__aeabi_ddiv>
 803b69e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803b6a2:	e029      	b.n	803b6f8 <_dtoa_r+0x3d8>
 803b6a4:	2502      	movs	r5, #2
 803b6a6:	e7f2      	b.n	803b68e <_dtoa_r+0x36e>
 803b6a8:	07f9      	lsls	r1, r7, #31
 803b6aa:	d508      	bpl.n	803b6be <_dtoa_r+0x39e>
 803b6ac:	ec51 0b18 	vmov	r0, r1, d8
 803b6b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 803b6b4:	f7e4 ffa0 	bl	80205f8 <__aeabi_dmul>
 803b6b8:	ec41 0b18 	vmov	d8, r0, r1
 803b6bc:	3501      	adds	r5, #1
 803b6be:	107f      	asrs	r7, r7, #1
 803b6c0:	3608      	adds	r6, #8
 803b6c2:	e7e5      	b.n	803b690 <_dtoa_r+0x370>
 803b6c4:	f000 80a6 	beq.w	803b814 <_dtoa_r+0x4f4>
 803b6c8:	f1ca 0600 	rsb	r6, sl, #0
 803b6cc:	4ba5      	ldr	r3, [pc, #660]	; (803b964 <_dtoa_r+0x644>)
 803b6ce:	4fa6      	ldr	r7, [pc, #664]	; (803b968 <_dtoa_r+0x648>)
 803b6d0:	f006 020f 	and.w	r2, r6, #15
 803b6d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 803b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 803b6dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 803b6e0:	f7e4 ff8a 	bl	80205f8 <__aeabi_dmul>
 803b6e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803b6e8:	1136      	asrs	r6, r6, #4
 803b6ea:	2300      	movs	r3, #0
 803b6ec:	2502      	movs	r5, #2
 803b6ee:	2e00      	cmp	r6, #0
 803b6f0:	f040 8085 	bne.w	803b7fe <_dtoa_r+0x4de>
 803b6f4:	2b00      	cmp	r3, #0
 803b6f6:	d1d2      	bne.n	803b69e <_dtoa_r+0x37e>
 803b6f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 803b6fa:	2b00      	cmp	r3, #0
 803b6fc:	f000 808c 	beq.w	803b818 <_dtoa_r+0x4f8>
 803b700:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 803b704:	4b99      	ldr	r3, [pc, #612]	; (803b96c <_dtoa_r+0x64c>)
 803b706:	2200      	movs	r2, #0
 803b708:	4630      	mov	r0, r6
 803b70a:	4639      	mov	r1, r7
 803b70c:	f7e5 f9e6 	bl	8020adc <__aeabi_dcmplt>
 803b710:	2800      	cmp	r0, #0
 803b712:	f000 8081 	beq.w	803b818 <_dtoa_r+0x4f8>
 803b716:	9b01      	ldr	r3, [sp, #4]
 803b718:	2b00      	cmp	r3, #0
 803b71a:	d07d      	beq.n	803b818 <_dtoa_r+0x4f8>
 803b71c:	f1b9 0f00 	cmp.w	r9, #0
 803b720:	dd3c      	ble.n	803b79c <_dtoa_r+0x47c>
 803b722:	f10a 33ff 	add.w	r3, sl, #4294967295
 803b726:	9307      	str	r3, [sp, #28]
 803b728:	2200      	movs	r2, #0
 803b72a:	4b91      	ldr	r3, [pc, #580]	; (803b970 <_dtoa_r+0x650>)
 803b72c:	4630      	mov	r0, r6
 803b72e:	4639      	mov	r1, r7
 803b730:	f7e4 ff62 	bl	80205f8 <__aeabi_dmul>
 803b734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803b738:	3501      	adds	r5, #1
 803b73a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 803b73e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 803b742:	4628      	mov	r0, r5
 803b744:	f7e4 feee 	bl	8020524 <__aeabi_i2d>
 803b748:	4632      	mov	r2, r6
 803b74a:	463b      	mov	r3, r7
 803b74c:	f7e4 ff54 	bl	80205f8 <__aeabi_dmul>
 803b750:	4b88      	ldr	r3, [pc, #544]	; (803b974 <_dtoa_r+0x654>)
 803b752:	2200      	movs	r2, #0
 803b754:	f7e4 fd9a 	bl	802028c <__adddf3>
 803b758:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 803b75c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 803b760:	9303      	str	r3, [sp, #12]
 803b762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 803b764:	2b00      	cmp	r3, #0
 803b766:	d15c      	bne.n	803b822 <_dtoa_r+0x502>
 803b768:	4b83      	ldr	r3, [pc, #524]	; (803b978 <_dtoa_r+0x658>)
 803b76a:	2200      	movs	r2, #0
 803b76c:	4630      	mov	r0, r6
 803b76e:	4639      	mov	r1, r7
 803b770:	f7e4 fd8a 	bl	8020288 <__aeabi_dsub>
 803b774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 803b778:	4606      	mov	r6, r0
 803b77a:	460f      	mov	r7, r1
 803b77c:	f7e5 f9cc 	bl	8020b18 <__aeabi_dcmpgt>
 803b780:	2800      	cmp	r0, #0
 803b782:	f040 8296 	bne.w	803bcb2 <_dtoa_r+0x992>
 803b786:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 803b78a:	4630      	mov	r0, r6
 803b78c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 803b790:	4639      	mov	r1, r7
 803b792:	f7e5 f9a3 	bl	8020adc <__aeabi_dcmplt>
 803b796:	2800      	cmp	r0, #0
 803b798:	f040 8288 	bne.w	803bcac <_dtoa_r+0x98c>
 803b79c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 803b7a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 803b7a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 803b7a6:	2b00      	cmp	r3, #0
 803b7a8:	f2c0 8158 	blt.w	803ba5c <_dtoa_r+0x73c>
 803b7ac:	f1ba 0f0e 	cmp.w	sl, #14
 803b7b0:	f300 8154 	bgt.w	803ba5c <_dtoa_r+0x73c>
 803b7b4:	4b6b      	ldr	r3, [pc, #428]	; (803b964 <_dtoa_r+0x644>)
 803b7b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 803b7ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 803b7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803b7c0:	2b00      	cmp	r3, #0
 803b7c2:	f280 80e3 	bge.w	803b98c <_dtoa_r+0x66c>
 803b7c6:	9b01      	ldr	r3, [sp, #4]
 803b7c8:	2b00      	cmp	r3, #0
 803b7ca:	f300 80df 	bgt.w	803b98c <_dtoa_r+0x66c>
 803b7ce:	f040 826d 	bne.w	803bcac <_dtoa_r+0x98c>
 803b7d2:	4b69      	ldr	r3, [pc, #420]	; (803b978 <_dtoa_r+0x658>)
 803b7d4:	2200      	movs	r2, #0
 803b7d6:	4640      	mov	r0, r8
 803b7d8:	4649      	mov	r1, r9
 803b7da:	f7e4 ff0d 	bl	80205f8 <__aeabi_dmul>
 803b7de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 803b7e2:	f7e5 f98f 	bl	8020b04 <__aeabi_dcmpge>
 803b7e6:	9e01      	ldr	r6, [sp, #4]
 803b7e8:	4637      	mov	r7, r6
 803b7ea:	2800      	cmp	r0, #0
 803b7ec:	f040 8243 	bne.w	803bc76 <_dtoa_r+0x956>
 803b7f0:	9d00      	ldr	r5, [sp, #0]
 803b7f2:	2331      	movs	r3, #49	; 0x31
 803b7f4:	f805 3b01 	strb.w	r3, [r5], #1
 803b7f8:	f10a 0a01 	add.w	sl, sl, #1
 803b7fc:	e23f      	b.n	803bc7e <_dtoa_r+0x95e>
 803b7fe:	07f2      	lsls	r2, r6, #31
 803b800:	d505      	bpl.n	803b80e <_dtoa_r+0x4ee>
 803b802:	e9d7 2300 	ldrd	r2, r3, [r7]
 803b806:	f7e4 fef7 	bl	80205f8 <__aeabi_dmul>
 803b80a:	3501      	adds	r5, #1
 803b80c:	2301      	movs	r3, #1
 803b80e:	1076      	asrs	r6, r6, #1
 803b810:	3708      	adds	r7, #8
 803b812:	e76c      	b.n	803b6ee <_dtoa_r+0x3ce>
 803b814:	2502      	movs	r5, #2
 803b816:	e76f      	b.n	803b6f8 <_dtoa_r+0x3d8>
 803b818:	9b01      	ldr	r3, [sp, #4]
 803b81a:	f8cd a01c 	str.w	sl, [sp, #28]
 803b81e:	930c      	str	r3, [sp, #48]	; 0x30
 803b820:	e78d      	b.n	803b73e <_dtoa_r+0x41e>
 803b822:	9900      	ldr	r1, [sp, #0]
 803b824:	980c      	ldr	r0, [sp, #48]	; 0x30
 803b826:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 803b828:	4b4e      	ldr	r3, [pc, #312]	; (803b964 <_dtoa_r+0x644>)
 803b82a:	ed9d 7b02 	vldr	d7, [sp, #8]
 803b82e:	4401      	add	r1, r0
 803b830:	9102      	str	r1, [sp, #8]
 803b832:	9908      	ldr	r1, [sp, #32]
 803b834:	eeb0 8a47 	vmov.f32	s16, s14
 803b838:	eef0 8a67 	vmov.f32	s17, s15
 803b83c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 803b840:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 803b844:	2900      	cmp	r1, #0
 803b846:	d045      	beq.n	803b8d4 <_dtoa_r+0x5b4>
 803b848:	494c      	ldr	r1, [pc, #304]	; (803b97c <_dtoa_r+0x65c>)
 803b84a:	2000      	movs	r0, #0
 803b84c:	f7e4 fffe 	bl	802084c <__aeabi_ddiv>
 803b850:	ec53 2b18 	vmov	r2, r3, d8
 803b854:	f7e4 fd18 	bl	8020288 <__aeabi_dsub>
 803b858:	9d00      	ldr	r5, [sp, #0]
 803b85a:	ec41 0b18 	vmov	d8, r0, r1
 803b85e:	4639      	mov	r1, r7
 803b860:	4630      	mov	r0, r6
 803b862:	f7e5 f979 	bl	8020b58 <__aeabi_d2iz>
 803b866:	900c      	str	r0, [sp, #48]	; 0x30
 803b868:	f7e4 fe5c 	bl	8020524 <__aeabi_i2d>
 803b86c:	4602      	mov	r2, r0
 803b86e:	460b      	mov	r3, r1
 803b870:	4630      	mov	r0, r6
 803b872:	4639      	mov	r1, r7
 803b874:	f7e4 fd08 	bl	8020288 <__aeabi_dsub>
 803b878:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 803b87a:	3330      	adds	r3, #48	; 0x30
 803b87c:	f805 3b01 	strb.w	r3, [r5], #1
 803b880:	ec53 2b18 	vmov	r2, r3, d8
 803b884:	4606      	mov	r6, r0
 803b886:	460f      	mov	r7, r1
 803b888:	f7e5 f928 	bl	8020adc <__aeabi_dcmplt>
 803b88c:	2800      	cmp	r0, #0
 803b88e:	d165      	bne.n	803b95c <_dtoa_r+0x63c>
 803b890:	4632      	mov	r2, r6
 803b892:	463b      	mov	r3, r7
 803b894:	4935      	ldr	r1, [pc, #212]	; (803b96c <_dtoa_r+0x64c>)
 803b896:	2000      	movs	r0, #0
 803b898:	f7e4 fcf6 	bl	8020288 <__aeabi_dsub>
 803b89c:	ec53 2b18 	vmov	r2, r3, d8
 803b8a0:	f7e5 f91c 	bl	8020adc <__aeabi_dcmplt>
 803b8a4:	2800      	cmp	r0, #0
 803b8a6:	f040 80b9 	bne.w	803ba1c <_dtoa_r+0x6fc>
 803b8aa:	9b02      	ldr	r3, [sp, #8]
 803b8ac:	429d      	cmp	r5, r3
 803b8ae:	f43f af75 	beq.w	803b79c <_dtoa_r+0x47c>
 803b8b2:	4b2f      	ldr	r3, [pc, #188]	; (803b970 <_dtoa_r+0x650>)
 803b8b4:	ec51 0b18 	vmov	r0, r1, d8
 803b8b8:	2200      	movs	r2, #0
 803b8ba:	f7e4 fe9d 	bl	80205f8 <__aeabi_dmul>
 803b8be:	4b2c      	ldr	r3, [pc, #176]	; (803b970 <_dtoa_r+0x650>)
 803b8c0:	ec41 0b18 	vmov	d8, r0, r1
 803b8c4:	2200      	movs	r2, #0
 803b8c6:	4630      	mov	r0, r6
 803b8c8:	4639      	mov	r1, r7
 803b8ca:	f7e4 fe95 	bl	80205f8 <__aeabi_dmul>
 803b8ce:	4606      	mov	r6, r0
 803b8d0:	460f      	mov	r7, r1
 803b8d2:	e7c4      	b.n	803b85e <_dtoa_r+0x53e>
 803b8d4:	ec51 0b17 	vmov	r0, r1, d7
 803b8d8:	f7e4 fe8e 	bl	80205f8 <__aeabi_dmul>
 803b8dc:	9b02      	ldr	r3, [sp, #8]
 803b8de:	9d00      	ldr	r5, [sp, #0]
 803b8e0:	930c      	str	r3, [sp, #48]	; 0x30
 803b8e2:	ec41 0b18 	vmov	d8, r0, r1
 803b8e6:	4639      	mov	r1, r7
 803b8e8:	4630      	mov	r0, r6
 803b8ea:	f7e5 f935 	bl	8020b58 <__aeabi_d2iz>
 803b8ee:	9011      	str	r0, [sp, #68]	; 0x44
 803b8f0:	f7e4 fe18 	bl	8020524 <__aeabi_i2d>
 803b8f4:	4602      	mov	r2, r0
 803b8f6:	460b      	mov	r3, r1
 803b8f8:	4630      	mov	r0, r6
 803b8fa:	4639      	mov	r1, r7
 803b8fc:	f7e4 fcc4 	bl	8020288 <__aeabi_dsub>
 803b900:	9b11      	ldr	r3, [sp, #68]	; 0x44
 803b902:	3330      	adds	r3, #48	; 0x30
 803b904:	f805 3b01 	strb.w	r3, [r5], #1
 803b908:	9b02      	ldr	r3, [sp, #8]
 803b90a:	429d      	cmp	r5, r3
 803b90c:	4606      	mov	r6, r0
 803b90e:	460f      	mov	r7, r1
 803b910:	f04f 0200 	mov.w	r2, #0
 803b914:	d134      	bne.n	803b980 <_dtoa_r+0x660>
 803b916:	4b19      	ldr	r3, [pc, #100]	; (803b97c <_dtoa_r+0x65c>)
 803b918:	ec51 0b18 	vmov	r0, r1, d8
 803b91c:	f7e4 fcb6 	bl	802028c <__adddf3>
 803b920:	4602      	mov	r2, r0
 803b922:	460b      	mov	r3, r1
 803b924:	4630      	mov	r0, r6
 803b926:	4639      	mov	r1, r7
 803b928:	f7e5 f8f6 	bl	8020b18 <__aeabi_dcmpgt>
 803b92c:	2800      	cmp	r0, #0
 803b92e:	d175      	bne.n	803ba1c <_dtoa_r+0x6fc>
 803b930:	ec53 2b18 	vmov	r2, r3, d8
 803b934:	4911      	ldr	r1, [pc, #68]	; (803b97c <_dtoa_r+0x65c>)
 803b936:	2000      	movs	r0, #0
 803b938:	f7e4 fca6 	bl	8020288 <__aeabi_dsub>
 803b93c:	4602      	mov	r2, r0
 803b93e:	460b      	mov	r3, r1
 803b940:	4630      	mov	r0, r6
 803b942:	4639      	mov	r1, r7
 803b944:	f7e5 f8ca 	bl	8020adc <__aeabi_dcmplt>
 803b948:	2800      	cmp	r0, #0
 803b94a:	f43f af27 	beq.w	803b79c <_dtoa_r+0x47c>
 803b94e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 803b950:	1e6b      	subs	r3, r5, #1
 803b952:	930c      	str	r3, [sp, #48]	; 0x30
 803b954:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 803b958:	2b30      	cmp	r3, #48	; 0x30
 803b95a:	d0f8      	beq.n	803b94e <_dtoa_r+0x62e>
 803b95c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 803b960:	e04a      	b.n	803b9f8 <_dtoa_r+0x6d8>
 803b962:	bf00      	nop
 803b964:	0803ec30 	.word	0x0803ec30
 803b968:	0803ec08 	.word	0x0803ec08
 803b96c:	3ff00000 	.word	0x3ff00000
 803b970:	40240000 	.word	0x40240000
 803b974:	401c0000 	.word	0x401c0000
 803b978:	40140000 	.word	0x40140000
 803b97c:	3fe00000 	.word	0x3fe00000
 803b980:	4baf      	ldr	r3, [pc, #700]	; (803bc40 <_dtoa_r+0x920>)
 803b982:	f7e4 fe39 	bl	80205f8 <__aeabi_dmul>
 803b986:	4606      	mov	r6, r0
 803b988:	460f      	mov	r7, r1
 803b98a:	e7ac      	b.n	803b8e6 <_dtoa_r+0x5c6>
 803b98c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 803b990:	9d00      	ldr	r5, [sp, #0]
 803b992:	4642      	mov	r2, r8
 803b994:	464b      	mov	r3, r9
 803b996:	4630      	mov	r0, r6
 803b998:	4639      	mov	r1, r7
 803b99a:	f7e4 ff57 	bl	802084c <__aeabi_ddiv>
 803b99e:	f7e5 f8db 	bl	8020b58 <__aeabi_d2iz>
 803b9a2:	9002      	str	r0, [sp, #8]
 803b9a4:	f7e4 fdbe 	bl	8020524 <__aeabi_i2d>
 803b9a8:	4642      	mov	r2, r8
 803b9aa:	464b      	mov	r3, r9
 803b9ac:	f7e4 fe24 	bl	80205f8 <__aeabi_dmul>
 803b9b0:	4602      	mov	r2, r0
 803b9b2:	460b      	mov	r3, r1
 803b9b4:	4630      	mov	r0, r6
 803b9b6:	4639      	mov	r1, r7
 803b9b8:	f7e4 fc66 	bl	8020288 <__aeabi_dsub>
 803b9bc:	9e02      	ldr	r6, [sp, #8]
 803b9be:	9f01      	ldr	r7, [sp, #4]
 803b9c0:	3630      	adds	r6, #48	; 0x30
 803b9c2:	f805 6b01 	strb.w	r6, [r5], #1
 803b9c6:	9e00      	ldr	r6, [sp, #0]
 803b9c8:	1bae      	subs	r6, r5, r6
 803b9ca:	42b7      	cmp	r7, r6
 803b9cc:	4602      	mov	r2, r0
 803b9ce:	460b      	mov	r3, r1
 803b9d0:	d137      	bne.n	803ba42 <_dtoa_r+0x722>
 803b9d2:	f7e4 fc5b 	bl	802028c <__adddf3>
 803b9d6:	4642      	mov	r2, r8
 803b9d8:	464b      	mov	r3, r9
 803b9da:	4606      	mov	r6, r0
 803b9dc:	460f      	mov	r7, r1
 803b9de:	f7e5 f89b 	bl	8020b18 <__aeabi_dcmpgt>
 803b9e2:	b9c8      	cbnz	r0, 803ba18 <_dtoa_r+0x6f8>
 803b9e4:	4642      	mov	r2, r8
 803b9e6:	464b      	mov	r3, r9
 803b9e8:	4630      	mov	r0, r6
 803b9ea:	4639      	mov	r1, r7
 803b9ec:	f7e5 f86c 	bl	8020ac8 <__aeabi_dcmpeq>
 803b9f0:	b110      	cbz	r0, 803b9f8 <_dtoa_r+0x6d8>
 803b9f2:	9b02      	ldr	r3, [sp, #8]
 803b9f4:	07d9      	lsls	r1, r3, #31
 803b9f6:	d40f      	bmi.n	803ba18 <_dtoa_r+0x6f8>
 803b9f8:	4620      	mov	r0, r4
 803b9fa:	4659      	mov	r1, fp
 803b9fc:	f000 fe8a 	bl	803c714 <_Bfree>
 803ba00:	2300      	movs	r3, #0
 803ba02:	702b      	strb	r3, [r5, #0]
 803ba04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803ba06:	f10a 0001 	add.w	r0, sl, #1
 803ba0a:	6018      	str	r0, [r3, #0]
 803ba0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 803ba0e:	2b00      	cmp	r3, #0
 803ba10:	f43f acd8 	beq.w	803b3c4 <_dtoa_r+0xa4>
 803ba14:	601d      	str	r5, [r3, #0]
 803ba16:	e4d5      	b.n	803b3c4 <_dtoa_r+0xa4>
 803ba18:	f8cd a01c 	str.w	sl, [sp, #28]
 803ba1c:	462b      	mov	r3, r5
 803ba1e:	461d      	mov	r5, r3
 803ba20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 803ba24:	2a39      	cmp	r2, #57	; 0x39
 803ba26:	d108      	bne.n	803ba3a <_dtoa_r+0x71a>
 803ba28:	9a00      	ldr	r2, [sp, #0]
 803ba2a:	429a      	cmp	r2, r3
 803ba2c:	d1f7      	bne.n	803ba1e <_dtoa_r+0x6fe>
 803ba2e:	9a07      	ldr	r2, [sp, #28]
 803ba30:	9900      	ldr	r1, [sp, #0]
 803ba32:	3201      	adds	r2, #1
 803ba34:	9207      	str	r2, [sp, #28]
 803ba36:	2230      	movs	r2, #48	; 0x30
 803ba38:	700a      	strb	r2, [r1, #0]
 803ba3a:	781a      	ldrb	r2, [r3, #0]
 803ba3c:	3201      	adds	r2, #1
 803ba3e:	701a      	strb	r2, [r3, #0]
 803ba40:	e78c      	b.n	803b95c <_dtoa_r+0x63c>
 803ba42:	4b7f      	ldr	r3, [pc, #508]	; (803bc40 <_dtoa_r+0x920>)
 803ba44:	2200      	movs	r2, #0
 803ba46:	f7e4 fdd7 	bl	80205f8 <__aeabi_dmul>
 803ba4a:	2200      	movs	r2, #0
 803ba4c:	2300      	movs	r3, #0
 803ba4e:	4606      	mov	r6, r0
 803ba50:	460f      	mov	r7, r1
 803ba52:	f7e5 f839 	bl	8020ac8 <__aeabi_dcmpeq>
 803ba56:	2800      	cmp	r0, #0
 803ba58:	d09b      	beq.n	803b992 <_dtoa_r+0x672>
 803ba5a:	e7cd      	b.n	803b9f8 <_dtoa_r+0x6d8>
 803ba5c:	9a08      	ldr	r2, [sp, #32]
 803ba5e:	2a00      	cmp	r2, #0
 803ba60:	f000 80c4 	beq.w	803bbec <_dtoa_r+0x8cc>
 803ba64:	9a05      	ldr	r2, [sp, #20]
 803ba66:	2a01      	cmp	r2, #1
 803ba68:	f300 80a8 	bgt.w	803bbbc <_dtoa_r+0x89c>
 803ba6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 803ba6e:	2a00      	cmp	r2, #0
 803ba70:	f000 80a0 	beq.w	803bbb4 <_dtoa_r+0x894>
 803ba74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 803ba78:	9e06      	ldr	r6, [sp, #24]
 803ba7a:	4645      	mov	r5, r8
 803ba7c:	9a04      	ldr	r2, [sp, #16]
 803ba7e:	2101      	movs	r1, #1
 803ba80:	441a      	add	r2, r3
 803ba82:	4620      	mov	r0, r4
 803ba84:	4498      	add	r8, r3
 803ba86:	9204      	str	r2, [sp, #16]
 803ba88:	f000 ff4a 	bl	803c920 <__i2b>
 803ba8c:	4607      	mov	r7, r0
 803ba8e:	2d00      	cmp	r5, #0
 803ba90:	dd0b      	ble.n	803baaa <_dtoa_r+0x78a>
 803ba92:	9b04      	ldr	r3, [sp, #16]
 803ba94:	2b00      	cmp	r3, #0
 803ba96:	dd08      	ble.n	803baaa <_dtoa_r+0x78a>
 803ba98:	42ab      	cmp	r3, r5
 803ba9a:	9a04      	ldr	r2, [sp, #16]
 803ba9c:	bfa8      	it	ge
 803ba9e:	462b      	movge	r3, r5
 803baa0:	eba8 0803 	sub.w	r8, r8, r3
 803baa4:	1aed      	subs	r5, r5, r3
 803baa6:	1ad3      	subs	r3, r2, r3
 803baa8:	9304      	str	r3, [sp, #16]
 803baaa:	9b06      	ldr	r3, [sp, #24]
 803baac:	b1fb      	cbz	r3, 803baee <_dtoa_r+0x7ce>
 803baae:	9b08      	ldr	r3, [sp, #32]
 803bab0:	2b00      	cmp	r3, #0
 803bab2:	f000 809f 	beq.w	803bbf4 <_dtoa_r+0x8d4>
 803bab6:	2e00      	cmp	r6, #0
 803bab8:	dd11      	ble.n	803bade <_dtoa_r+0x7be>
 803baba:	4639      	mov	r1, r7
 803babc:	4632      	mov	r2, r6
 803babe:	4620      	mov	r0, r4
 803bac0:	f000 ffea 	bl	803ca98 <__pow5mult>
 803bac4:	465a      	mov	r2, fp
 803bac6:	4601      	mov	r1, r0
 803bac8:	4607      	mov	r7, r0
 803baca:	4620      	mov	r0, r4
 803bacc:	f000 ff3e 	bl	803c94c <__multiply>
 803bad0:	4659      	mov	r1, fp
 803bad2:	9007      	str	r0, [sp, #28]
 803bad4:	4620      	mov	r0, r4
 803bad6:	f000 fe1d 	bl	803c714 <_Bfree>
 803bada:	9b07      	ldr	r3, [sp, #28]
 803badc:	469b      	mov	fp, r3
 803bade:	9b06      	ldr	r3, [sp, #24]
 803bae0:	1b9a      	subs	r2, r3, r6
 803bae2:	d004      	beq.n	803baee <_dtoa_r+0x7ce>
 803bae4:	4659      	mov	r1, fp
 803bae6:	4620      	mov	r0, r4
 803bae8:	f000 ffd6 	bl	803ca98 <__pow5mult>
 803baec:	4683      	mov	fp, r0
 803baee:	2101      	movs	r1, #1
 803baf0:	4620      	mov	r0, r4
 803baf2:	f000 ff15 	bl	803c920 <__i2b>
 803baf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 803baf8:	2b00      	cmp	r3, #0
 803bafa:	4606      	mov	r6, r0
 803bafc:	dd7c      	ble.n	803bbf8 <_dtoa_r+0x8d8>
 803bafe:	461a      	mov	r2, r3
 803bb00:	4601      	mov	r1, r0
 803bb02:	4620      	mov	r0, r4
 803bb04:	f000 ffc8 	bl	803ca98 <__pow5mult>
 803bb08:	9b05      	ldr	r3, [sp, #20]
 803bb0a:	2b01      	cmp	r3, #1
 803bb0c:	4606      	mov	r6, r0
 803bb0e:	dd76      	ble.n	803bbfe <_dtoa_r+0x8de>
 803bb10:	2300      	movs	r3, #0
 803bb12:	9306      	str	r3, [sp, #24]
 803bb14:	6933      	ldr	r3, [r6, #16]
 803bb16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 803bb1a:	6918      	ldr	r0, [r3, #16]
 803bb1c:	f000 feb0 	bl	803c880 <__hi0bits>
 803bb20:	f1c0 0020 	rsb	r0, r0, #32
 803bb24:	9b04      	ldr	r3, [sp, #16]
 803bb26:	4418      	add	r0, r3
 803bb28:	f010 001f 	ands.w	r0, r0, #31
 803bb2c:	f000 8086 	beq.w	803bc3c <_dtoa_r+0x91c>
 803bb30:	f1c0 0320 	rsb	r3, r0, #32
 803bb34:	2b04      	cmp	r3, #4
 803bb36:	dd7f      	ble.n	803bc38 <_dtoa_r+0x918>
 803bb38:	f1c0 001c 	rsb	r0, r0, #28
 803bb3c:	9b04      	ldr	r3, [sp, #16]
 803bb3e:	4403      	add	r3, r0
 803bb40:	4480      	add	r8, r0
 803bb42:	4405      	add	r5, r0
 803bb44:	9304      	str	r3, [sp, #16]
 803bb46:	f1b8 0f00 	cmp.w	r8, #0
 803bb4a:	dd05      	ble.n	803bb58 <_dtoa_r+0x838>
 803bb4c:	4659      	mov	r1, fp
 803bb4e:	4642      	mov	r2, r8
 803bb50:	4620      	mov	r0, r4
 803bb52:	f000 fffb 	bl	803cb4c <__lshift>
 803bb56:	4683      	mov	fp, r0
 803bb58:	9b04      	ldr	r3, [sp, #16]
 803bb5a:	2b00      	cmp	r3, #0
 803bb5c:	dd05      	ble.n	803bb6a <_dtoa_r+0x84a>
 803bb5e:	4631      	mov	r1, r6
 803bb60:	461a      	mov	r2, r3
 803bb62:	4620      	mov	r0, r4
 803bb64:	f000 fff2 	bl	803cb4c <__lshift>
 803bb68:	4606      	mov	r6, r0
 803bb6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 803bb6c:	2b00      	cmp	r3, #0
 803bb6e:	d069      	beq.n	803bc44 <_dtoa_r+0x924>
 803bb70:	4631      	mov	r1, r6
 803bb72:	4658      	mov	r0, fp
 803bb74:	f001 f856 	bl	803cc24 <__mcmp>
 803bb78:	2800      	cmp	r0, #0
 803bb7a:	da63      	bge.n	803bc44 <_dtoa_r+0x924>
 803bb7c:	2300      	movs	r3, #0
 803bb7e:	4659      	mov	r1, fp
 803bb80:	220a      	movs	r2, #10
 803bb82:	4620      	mov	r0, r4
 803bb84:	f000 fde8 	bl	803c758 <__multadd>
 803bb88:	9b08      	ldr	r3, [sp, #32]
 803bb8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 803bb8e:	4683      	mov	fp, r0
 803bb90:	2b00      	cmp	r3, #0
 803bb92:	f000 818f 	beq.w	803beb4 <_dtoa_r+0xb94>
 803bb96:	4639      	mov	r1, r7
 803bb98:	2300      	movs	r3, #0
 803bb9a:	220a      	movs	r2, #10
 803bb9c:	4620      	mov	r0, r4
 803bb9e:	f000 fddb 	bl	803c758 <__multadd>
 803bba2:	f1b9 0f00 	cmp.w	r9, #0
 803bba6:	4607      	mov	r7, r0
 803bba8:	f300 808e 	bgt.w	803bcc8 <_dtoa_r+0x9a8>
 803bbac:	9b05      	ldr	r3, [sp, #20]
 803bbae:	2b02      	cmp	r3, #2
 803bbb0:	dc50      	bgt.n	803bc54 <_dtoa_r+0x934>
 803bbb2:	e089      	b.n	803bcc8 <_dtoa_r+0x9a8>
 803bbb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 803bbb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 803bbba:	e75d      	b.n	803ba78 <_dtoa_r+0x758>
 803bbbc:	9b01      	ldr	r3, [sp, #4]
 803bbbe:	1e5e      	subs	r6, r3, #1
 803bbc0:	9b06      	ldr	r3, [sp, #24]
 803bbc2:	42b3      	cmp	r3, r6
 803bbc4:	bfbf      	itttt	lt
 803bbc6:	9b06      	ldrlt	r3, [sp, #24]
 803bbc8:	9606      	strlt	r6, [sp, #24]
 803bbca:	1af2      	sublt	r2, r6, r3
 803bbcc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 803bbce:	bfb6      	itet	lt
 803bbd0:	189b      	addlt	r3, r3, r2
 803bbd2:	1b9e      	subge	r6, r3, r6
 803bbd4:	930d      	strlt	r3, [sp, #52]	; 0x34
 803bbd6:	9b01      	ldr	r3, [sp, #4]
 803bbd8:	bfb8      	it	lt
 803bbda:	2600      	movlt	r6, #0
 803bbdc:	2b00      	cmp	r3, #0
 803bbde:	bfb5      	itete	lt
 803bbe0:	eba8 0503 	sublt.w	r5, r8, r3
 803bbe4:	9b01      	ldrge	r3, [sp, #4]
 803bbe6:	2300      	movlt	r3, #0
 803bbe8:	4645      	movge	r5, r8
 803bbea:	e747      	b.n	803ba7c <_dtoa_r+0x75c>
 803bbec:	9e06      	ldr	r6, [sp, #24]
 803bbee:	9f08      	ldr	r7, [sp, #32]
 803bbf0:	4645      	mov	r5, r8
 803bbf2:	e74c      	b.n	803ba8e <_dtoa_r+0x76e>
 803bbf4:	9a06      	ldr	r2, [sp, #24]
 803bbf6:	e775      	b.n	803bae4 <_dtoa_r+0x7c4>
 803bbf8:	9b05      	ldr	r3, [sp, #20]
 803bbfa:	2b01      	cmp	r3, #1
 803bbfc:	dc18      	bgt.n	803bc30 <_dtoa_r+0x910>
 803bbfe:	9b02      	ldr	r3, [sp, #8]
 803bc00:	b9b3      	cbnz	r3, 803bc30 <_dtoa_r+0x910>
 803bc02:	9b03      	ldr	r3, [sp, #12]
 803bc04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 803bc08:	b9a3      	cbnz	r3, 803bc34 <_dtoa_r+0x914>
 803bc0a:	9b03      	ldr	r3, [sp, #12]
 803bc0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 803bc10:	0d1b      	lsrs	r3, r3, #20
 803bc12:	051b      	lsls	r3, r3, #20
 803bc14:	b12b      	cbz	r3, 803bc22 <_dtoa_r+0x902>
 803bc16:	9b04      	ldr	r3, [sp, #16]
 803bc18:	3301      	adds	r3, #1
 803bc1a:	9304      	str	r3, [sp, #16]
 803bc1c:	f108 0801 	add.w	r8, r8, #1
 803bc20:	2301      	movs	r3, #1
 803bc22:	9306      	str	r3, [sp, #24]
 803bc24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 803bc26:	2b00      	cmp	r3, #0
 803bc28:	f47f af74 	bne.w	803bb14 <_dtoa_r+0x7f4>
 803bc2c:	2001      	movs	r0, #1
 803bc2e:	e779      	b.n	803bb24 <_dtoa_r+0x804>
 803bc30:	2300      	movs	r3, #0
 803bc32:	e7f6      	b.n	803bc22 <_dtoa_r+0x902>
 803bc34:	9b02      	ldr	r3, [sp, #8]
 803bc36:	e7f4      	b.n	803bc22 <_dtoa_r+0x902>
 803bc38:	d085      	beq.n	803bb46 <_dtoa_r+0x826>
 803bc3a:	4618      	mov	r0, r3
 803bc3c:	301c      	adds	r0, #28
 803bc3e:	e77d      	b.n	803bb3c <_dtoa_r+0x81c>
 803bc40:	40240000 	.word	0x40240000
 803bc44:	9b01      	ldr	r3, [sp, #4]
 803bc46:	2b00      	cmp	r3, #0
 803bc48:	dc38      	bgt.n	803bcbc <_dtoa_r+0x99c>
 803bc4a:	9b05      	ldr	r3, [sp, #20]
 803bc4c:	2b02      	cmp	r3, #2
 803bc4e:	dd35      	ble.n	803bcbc <_dtoa_r+0x99c>
 803bc50:	f8dd 9004 	ldr.w	r9, [sp, #4]
 803bc54:	f1b9 0f00 	cmp.w	r9, #0
 803bc58:	d10d      	bne.n	803bc76 <_dtoa_r+0x956>
 803bc5a:	4631      	mov	r1, r6
 803bc5c:	464b      	mov	r3, r9
 803bc5e:	2205      	movs	r2, #5
 803bc60:	4620      	mov	r0, r4
 803bc62:	f000 fd79 	bl	803c758 <__multadd>
 803bc66:	4601      	mov	r1, r0
 803bc68:	4606      	mov	r6, r0
 803bc6a:	4658      	mov	r0, fp
 803bc6c:	f000 ffda 	bl	803cc24 <__mcmp>
 803bc70:	2800      	cmp	r0, #0
 803bc72:	f73f adbd 	bgt.w	803b7f0 <_dtoa_r+0x4d0>
 803bc76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803bc78:	9d00      	ldr	r5, [sp, #0]
 803bc7a:	ea6f 0a03 	mvn.w	sl, r3
 803bc7e:	f04f 0800 	mov.w	r8, #0
 803bc82:	4631      	mov	r1, r6
 803bc84:	4620      	mov	r0, r4
 803bc86:	f000 fd45 	bl	803c714 <_Bfree>
 803bc8a:	2f00      	cmp	r7, #0
 803bc8c:	f43f aeb4 	beq.w	803b9f8 <_dtoa_r+0x6d8>
 803bc90:	f1b8 0f00 	cmp.w	r8, #0
 803bc94:	d005      	beq.n	803bca2 <_dtoa_r+0x982>
 803bc96:	45b8      	cmp	r8, r7
 803bc98:	d003      	beq.n	803bca2 <_dtoa_r+0x982>
 803bc9a:	4641      	mov	r1, r8
 803bc9c:	4620      	mov	r0, r4
 803bc9e:	f000 fd39 	bl	803c714 <_Bfree>
 803bca2:	4639      	mov	r1, r7
 803bca4:	4620      	mov	r0, r4
 803bca6:	f000 fd35 	bl	803c714 <_Bfree>
 803bcaa:	e6a5      	b.n	803b9f8 <_dtoa_r+0x6d8>
 803bcac:	2600      	movs	r6, #0
 803bcae:	4637      	mov	r7, r6
 803bcb0:	e7e1      	b.n	803bc76 <_dtoa_r+0x956>
 803bcb2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 803bcb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 803bcb8:	4637      	mov	r7, r6
 803bcba:	e599      	b.n	803b7f0 <_dtoa_r+0x4d0>
 803bcbc:	9b08      	ldr	r3, [sp, #32]
 803bcbe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 803bcc2:	2b00      	cmp	r3, #0
 803bcc4:	f000 80fd 	beq.w	803bec2 <_dtoa_r+0xba2>
 803bcc8:	2d00      	cmp	r5, #0
 803bcca:	dd05      	ble.n	803bcd8 <_dtoa_r+0x9b8>
 803bccc:	4639      	mov	r1, r7
 803bcce:	462a      	mov	r2, r5
 803bcd0:	4620      	mov	r0, r4
 803bcd2:	f000 ff3b 	bl	803cb4c <__lshift>
 803bcd6:	4607      	mov	r7, r0
 803bcd8:	9b06      	ldr	r3, [sp, #24]
 803bcda:	2b00      	cmp	r3, #0
 803bcdc:	d05c      	beq.n	803bd98 <_dtoa_r+0xa78>
 803bcde:	6879      	ldr	r1, [r7, #4]
 803bce0:	4620      	mov	r0, r4
 803bce2:	f000 fcd7 	bl	803c694 <_Balloc>
 803bce6:	4605      	mov	r5, r0
 803bce8:	b928      	cbnz	r0, 803bcf6 <_dtoa_r+0x9d6>
 803bcea:	4b80      	ldr	r3, [pc, #512]	; (803beec <_dtoa_r+0xbcc>)
 803bcec:	4602      	mov	r2, r0
 803bcee:	f240 21ea 	movw	r1, #746	; 0x2ea
 803bcf2:	f7ff bb2e 	b.w	803b352 <_dtoa_r+0x32>
 803bcf6:	693a      	ldr	r2, [r7, #16]
 803bcf8:	3202      	adds	r2, #2
 803bcfa:	0092      	lsls	r2, r2, #2
 803bcfc:	f107 010c 	add.w	r1, r7, #12
 803bd00:	300c      	adds	r0, #12
 803bd02:	f7fd fbe7 	bl	80394d4 <memcpy>
 803bd06:	2201      	movs	r2, #1
 803bd08:	4629      	mov	r1, r5
 803bd0a:	4620      	mov	r0, r4
 803bd0c:	f000 ff1e 	bl	803cb4c <__lshift>
 803bd10:	9b00      	ldr	r3, [sp, #0]
 803bd12:	3301      	adds	r3, #1
 803bd14:	9301      	str	r3, [sp, #4]
 803bd16:	9b00      	ldr	r3, [sp, #0]
 803bd18:	444b      	add	r3, r9
 803bd1a:	9307      	str	r3, [sp, #28]
 803bd1c:	9b02      	ldr	r3, [sp, #8]
 803bd1e:	f003 0301 	and.w	r3, r3, #1
 803bd22:	46b8      	mov	r8, r7
 803bd24:	9306      	str	r3, [sp, #24]
 803bd26:	4607      	mov	r7, r0
 803bd28:	9b01      	ldr	r3, [sp, #4]
 803bd2a:	4631      	mov	r1, r6
 803bd2c:	3b01      	subs	r3, #1
 803bd2e:	4658      	mov	r0, fp
 803bd30:	9302      	str	r3, [sp, #8]
 803bd32:	f7ff fa69 	bl	803b208 <quorem>
 803bd36:	4603      	mov	r3, r0
 803bd38:	3330      	adds	r3, #48	; 0x30
 803bd3a:	9004      	str	r0, [sp, #16]
 803bd3c:	4641      	mov	r1, r8
 803bd3e:	4658      	mov	r0, fp
 803bd40:	9308      	str	r3, [sp, #32]
 803bd42:	f000 ff6f 	bl	803cc24 <__mcmp>
 803bd46:	463a      	mov	r2, r7
 803bd48:	4681      	mov	r9, r0
 803bd4a:	4631      	mov	r1, r6
 803bd4c:	4620      	mov	r0, r4
 803bd4e:	f000 ff85 	bl	803cc5c <__mdiff>
 803bd52:	68c2      	ldr	r2, [r0, #12]
 803bd54:	9b08      	ldr	r3, [sp, #32]
 803bd56:	4605      	mov	r5, r0
 803bd58:	bb02      	cbnz	r2, 803bd9c <_dtoa_r+0xa7c>
 803bd5a:	4601      	mov	r1, r0
 803bd5c:	4658      	mov	r0, fp
 803bd5e:	f000 ff61 	bl	803cc24 <__mcmp>
 803bd62:	9b08      	ldr	r3, [sp, #32]
 803bd64:	4602      	mov	r2, r0
 803bd66:	4629      	mov	r1, r5
 803bd68:	4620      	mov	r0, r4
 803bd6a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 803bd6e:	f000 fcd1 	bl	803c714 <_Bfree>
 803bd72:	9b05      	ldr	r3, [sp, #20]
 803bd74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803bd76:	9d01      	ldr	r5, [sp, #4]
 803bd78:	ea43 0102 	orr.w	r1, r3, r2
 803bd7c:	9b06      	ldr	r3, [sp, #24]
 803bd7e:	430b      	orrs	r3, r1
 803bd80:	9b08      	ldr	r3, [sp, #32]
 803bd82:	d10d      	bne.n	803bda0 <_dtoa_r+0xa80>
 803bd84:	2b39      	cmp	r3, #57	; 0x39
 803bd86:	d029      	beq.n	803bddc <_dtoa_r+0xabc>
 803bd88:	f1b9 0f00 	cmp.w	r9, #0
 803bd8c:	dd01      	ble.n	803bd92 <_dtoa_r+0xa72>
 803bd8e:	9b04      	ldr	r3, [sp, #16]
 803bd90:	3331      	adds	r3, #49	; 0x31
 803bd92:	9a02      	ldr	r2, [sp, #8]
 803bd94:	7013      	strb	r3, [r2, #0]
 803bd96:	e774      	b.n	803bc82 <_dtoa_r+0x962>
 803bd98:	4638      	mov	r0, r7
 803bd9a:	e7b9      	b.n	803bd10 <_dtoa_r+0x9f0>
 803bd9c:	2201      	movs	r2, #1
 803bd9e:	e7e2      	b.n	803bd66 <_dtoa_r+0xa46>
 803bda0:	f1b9 0f00 	cmp.w	r9, #0
 803bda4:	db06      	blt.n	803bdb4 <_dtoa_r+0xa94>
 803bda6:	9905      	ldr	r1, [sp, #20]
 803bda8:	ea41 0909 	orr.w	r9, r1, r9
 803bdac:	9906      	ldr	r1, [sp, #24]
 803bdae:	ea59 0101 	orrs.w	r1, r9, r1
 803bdb2:	d120      	bne.n	803bdf6 <_dtoa_r+0xad6>
 803bdb4:	2a00      	cmp	r2, #0
 803bdb6:	ddec      	ble.n	803bd92 <_dtoa_r+0xa72>
 803bdb8:	4659      	mov	r1, fp
 803bdba:	2201      	movs	r2, #1
 803bdbc:	4620      	mov	r0, r4
 803bdbe:	9301      	str	r3, [sp, #4]
 803bdc0:	f000 fec4 	bl	803cb4c <__lshift>
 803bdc4:	4631      	mov	r1, r6
 803bdc6:	4683      	mov	fp, r0
 803bdc8:	f000 ff2c 	bl	803cc24 <__mcmp>
 803bdcc:	2800      	cmp	r0, #0
 803bdce:	9b01      	ldr	r3, [sp, #4]
 803bdd0:	dc02      	bgt.n	803bdd8 <_dtoa_r+0xab8>
 803bdd2:	d1de      	bne.n	803bd92 <_dtoa_r+0xa72>
 803bdd4:	07da      	lsls	r2, r3, #31
 803bdd6:	d5dc      	bpl.n	803bd92 <_dtoa_r+0xa72>
 803bdd8:	2b39      	cmp	r3, #57	; 0x39
 803bdda:	d1d8      	bne.n	803bd8e <_dtoa_r+0xa6e>
 803bddc:	9a02      	ldr	r2, [sp, #8]
 803bdde:	2339      	movs	r3, #57	; 0x39
 803bde0:	7013      	strb	r3, [r2, #0]
 803bde2:	462b      	mov	r3, r5
 803bde4:	461d      	mov	r5, r3
 803bde6:	3b01      	subs	r3, #1
 803bde8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 803bdec:	2a39      	cmp	r2, #57	; 0x39
 803bdee:	d050      	beq.n	803be92 <_dtoa_r+0xb72>
 803bdf0:	3201      	adds	r2, #1
 803bdf2:	701a      	strb	r2, [r3, #0]
 803bdf4:	e745      	b.n	803bc82 <_dtoa_r+0x962>
 803bdf6:	2a00      	cmp	r2, #0
 803bdf8:	dd03      	ble.n	803be02 <_dtoa_r+0xae2>
 803bdfa:	2b39      	cmp	r3, #57	; 0x39
 803bdfc:	d0ee      	beq.n	803bddc <_dtoa_r+0xabc>
 803bdfe:	3301      	adds	r3, #1
 803be00:	e7c7      	b.n	803bd92 <_dtoa_r+0xa72>
 803be02:	9a01      	ldr	r2, [sp, #4]
 803be04:	9907      	ldr	r1, [sp, #28]
 803be06:	f802 3c01 	strb.w	r3, [r2, #-1]
 803be0a:	428a      	cmp	r2, r1
 803be0c:	d02a      	beq.n	803be64 <_dtoa_r+0xb44>
 803be0e:	4659      	mov	r1, fp
 803be10:	2300      	movs	r3, #0
 803be12:	220a      	movs	r2, #10
 803be14:	4620      	mov	r0, r4
 803be16:	f000 fc9f 	bl	803c758 <__multadd>
 803be1a:	45b8      	cmp	r8, r7
 803be1c:	4683      	mov	fp, r0
 803be1e:	f04f 0300 	mov.w	r3, #0
 803be22:	f04f 020a 	mov.w	r2, #10
 803be26:	4641      	mov	r1, r8
 803be28:	4620      	mov	r0, r4
 803be2a:	d107      	bne.n	803be3c <_dtoa_r+0xb1c>
 803be2c:	f000 fc94 	bl	803c758 <__multadd>
 803be30:	4680      	mov	r8, r0
 803be32:	4607      	mov	r7, r0
 803be34:	9b01      	ldr	r3, [sp, #4]
 803be36:	3301      	adds	r3, #1
 803be38:	9301      	str	r3, [sp, #4]
 803be3a:	e775      	b.n	803bd28 <_dtoa_r+0xa08>
 803be3c:	f000 fc8c 	bl	803c758 <__multadd>
 803be40:	4639      	mov	r1, r7
 803be42:	4680      	mov	r8, r0
 803be44:	2300      	movs	r3, #0
 803be46:	220a      	movs	r2, #10
 803be48:	4620      	mov	r0, r4
 803be4a:	f000 fc85 	bl	803c758 <__multadd>
 803be4e:	4607      	mov	r7, r0
 803be50:	e7f0      	b.n	803be34 <_dtoa_r+0xb14>
 803be52:	f1b9 0f00 	cmp.w	r9, #0
 803be56:	9a00      	ldr	r2, [sp, #0]
 803be58:	bfcc      	ite	gt
 803be5a:	464d      	movgt	r5, r9
 803be5c:	2501      	movle	r5, #1
 803be5e:	4415      	add	r5, r2
 803be60:	f04f 0800 	mov.w	r8, #0
 803be64:	4659      	mov	r1, fp
 803be66:	2201      	movs	r2, #1
 803be68:	4620      	mov	r0, r4
 803be6a:	9301      	str	r3, [sp, #4]
 803be6c:	f000 fe6e 	bl	803cb4c <__lshift>
 803be70:	4631      	mov	r1, r6
 803be72:	4683      	mov	fp, r0
 803be74:	f000 fed6 	bl	803cc24 <__mcmp>
 803be78:	2800      	cmp	r0, #0
 803be7a:	dcb2      	bgt.n	803bde2 <_dtoa_r+0xac2>
 803be7c:	d102      	bne.n	803be84 <_dtoa_r+0xb64>
 803be7e:	9b01      	ldr	r3, [sp, #4]
 803be80:	07db      	lsls	r3, r3, #31
 803be82:	d4ae      	bmi.n	803bde2 <_dtoa_r+0xac2>
 803be84:	462b      	mov	r3, r5
 803be86:	461d      	mov	r5, r3
 803be88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 803be8c:	2a30      	cmp	r2, #48	; 0x30
 803be8e:	d0fa      	beq.n	803be86 <_dtoa_r+0xb66>
 803be90:	e6f7      	b.n	803bc82 <_dtoa_r+0x962>
 803be92:	9a00      	ldr	r2, [sp, #0]
 803be94:	429a      	cmp	r2, r3
 803be96:	d1a5      	bne.n	803bde4 <_dtoa_r+0xac4>
 803be98:	f10a 0a01 	add.w	sl, sl, #1
 803be9c:	2331      	movs	r3, #49	; 0x31
 803be9e:	e779      	b.n	803bd94 <_dtoa_r+0xa74>
 803bea0:	4b13      	ldr	r3, [pc, #76]	; (803bef0 <_dtoa_r+0xbd0>)
 803bea2:	f7ff baaf 	b.w	803b404 <_dtoa_r+0xe4>
 803bea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 803bea8:	2b00      	cmp	r3, #0
 803beaa:	f47f aa86 	bne.w	803b3ba <_dtoa_r+0x9a>
 803beae:	4b11      	ldr	r3, [pc, #68]	; (803bef4 <_dtoa_r+0xbd4>)
 803beb0:	f7ff baa8 	b.w	803b404 <_dtoa_r+0xe4>
 803beb4:	f1b9 0f00 	cmp.w	r9, #0
 803beb8:	dc03      	bgt.n	803bec2 <_dtoa_r+0xba2>
 803beba:	9b05      	ldr	r3, [sp, #20]
 803bebc:	2b02      	cmp	r3, #2
 803bebe:	f73f aec9 	bgt.w	803bc54 <_dtoa_r+0x934>
 803bec2:	9d00      	ldr	r5, [sp, #0]
 803bec4:	4631      	mov	r1, r6
 803bec6:	4658      	mov	r0, fp
 803bec8:	f7ff f99e 	bl	803b208 <quorem>
 803becc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 803bed0:	f805 3b01 	strb.w	r3, [r5], #1
 803bed4:	9a00      	ldr	r2, [sp, #0]
 803bed6:	1aaa      	subs	r2, r5, r2
 803bed8:	4591      	cmp	r9, r2
 803beda:	ddba      	ble.n	803be52 <_dtoa_r+0xb32>
 803bedc:	4659      	mov	r1, fp
 803bede:	2300      	movs	r3, #0
 803bee0:	220a      	movs	r2, #10
 803bee2:	4620      	mov	r0, r4
 803bee4:	f000 fc38 	bl	803c758 <__multadd>
 803bee8:	4683      	mov	fp, r0
 803beea:	e7eb      	b.n	803bec4 <_dtoa_r+0xba4>
 803beec:	0803eb14 	.word	0x0803eb14
 803bef0:	0803e910 	.word	0x0803e910
 803bef4:	0803ea91 	.word	0x0803ea91

0803bef8 <_fstat_r>:
 803bef8:	b538      	push	{r3, r4, r5, lr}
 803befa:	4d07      	ldr	r5, [pc, #28]	; (803bf18 <_fstat_r+0x20>)
 803befc:	2300      	movs	r3, #0
 803befe:	4604      	mov	r4, r0
 803bf00:	4608      	mov	r0, r1
 803bf02:	4611      	mov	r1, r2
 803bf04:	602b      	str	r3, [r5, #0]
 803bf06:	f7f5 fe06 	bl	8031b16 <_fstat>
 803bf0a:	1c43      	adds	r3, r0, #1
 803bf0c:	d102      	bne.n	803bf14 <_fstat_r+0x1c>
 803bf0e:	682b      	ldr	r3, [r5, #0]
 803bf10:	b103      	cbz	r3, 803bf14 <_fstat_r+0x1c>
 803bf12:	6023      	str	r3, [r4, #0]
 803bf14:	bd38      	pop	{r3, r4, r5, pc}
 803bf16:	bf00      	nop
 803bf18:	200009c4 	.word	0x200009c4

0803bf1c <rshift>:
 803bf1c:	6903      	ldr	r3, [r0, #16]
 803bf1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 803bf22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 803bf26:	ea4f 1261 	mov.w	r2, r1, asr #5
 803bf2a:	f100 0414 	add.w	r4, r0, #20
 803bf2e:	dd45      	ble.n	803bfbc <rshift+0xa0>
 803bf30:	f011 011f 	ands.w	r1, r1, #31
 803bf34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 803bf38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 803bf3c:	d10c      	bne.n	803bf58 <rshift+0x3c>
 803bf3e:	f100 0710 	add.w	r7, r0, #16
 803bf42:	4629      	mov	r1, r5
 803bf44:	42b1      	cmp	r1, r6
 803bf46:	d334      	bcc.n	803bfb2 <rshift+0x96>
 803bf48:	1a9b      	subs	r3, r3, r2
 803bf4a:	009b      	lsls	r3, r3, #2
 803bf4c:	1eea      	subs	r2, r5, #3
 803bf4e:	4296      	cmp	r6, r2
 803bf50:	bf38      	it	cc
 803bf52:	2300      	movcc	r3, #0
 803bf54:	4423      	add	r3, r4
 803bf56:	e015      	b.n	803bf84 <rshift+0x68>
 803bf58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 803bf5c:	f1c1 0820 	rsb	r8, r1, #32
 803bf60:	40cf      	lsrs	r7, r1
 803bf62:	f105 0e04 	add.w	lr, r5, #4
 803bf66:	46a1      	mov	r9, r4
 803bf68:	4576      	cmp	r6, lr
 803bf6a:	46f4      	mov	ip, lr
 803bf6c:	d815      	bhi.n	803bf9a <rshift+0x7e>
 803bf6e:	1a9b      	subs	r3, r3, r2
 803bf70:	009a      	lsls	r2, r3, #2
 803bf72:	3a04      	subs	r2, #4
 803bf74:	3501      	adds	r5, #1
 803bf76:	42ae      	cmp	r6, r5
 803bf78:	bf38      	it	cc
 803bf7a:	2200      	movcc	r2, #0
 803bf7c:	18a3      	adds	r3, r4, r2
 803bf7e:	50a7      	str	r7, [r4, r2]
 803bf80:	b107      	cbz	r7, 803bf84 <rshift+0x68>
 803bf82:	3304      	adds	r3, #4
 803bf84:	1b1a      	subs	r2, r3, r4
 803bf86:	42a3      	cmp	r3, r4
 803bf88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 803bf8c:	bf08      	it	eq
 803bf8e:	2300      	moveq	r3, #0
 803bf90:	6102      	str	r2, [r0, #16]
 803bf92:	bf08      	it	eq
 803bf94:	6143      	streq	r3, [r0, #20]
 803bf96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803bf9a:	f8dc c000 	ldr.w	ip, [ip]
 803bf9e:	fa0c fc08 	lsl.w	ip, ip, r8
 803bfa2:	ea4c 0707 	orr.w	r7, ip, r7
 803bfa6:	f849 7b04 	str.w	r7, [r9], #4
 803bfaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 803bfae:	40cf      	lsrs	r7, r1
 803bfb0:	e7da      	b.n	803bf68 <rshift+0x4c>
 803bfb2:	f851 cb04 	ldr.w	ip, [r1], #4
 803bfb6:	f847 cf04 	str.w	ip, [r7, #4]!
 803bfba:	e7c3      	b.n	803bf44 <rshift+0x28>
 803bfbc:	4623      	mov	r3, r4
 803bfbe:	e7e1      	b.n	803bf84 <rshift+0x68>

0803bfc0 <__hexdig_fun>:
 803bfc0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 803bfc4:	2b09      	cmp	r3, #9
 803bfc6:	d802      	bhi.n	803bfce <__hexdig_fun+0xe>
 803bfc8:	3820      	subs	r0, #32
 803bfca:	b2c0      	uxtb	r0, r0
 803bfcc:	4770      	bx	lr
 803bfce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 803bfd2:	2b05      	cmp	r3, #5
 803bfd4:	d801      	bhi.n	803bfda <__hexdig_fun+0x1a>
 803bfd6:	3847      	subs	r0, #71	; 0x47
 803bfd8:	e7f7      	b.n	803bfca <__hexdig_fun+0xa>
 803bfda:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 803bfde:	2b05      	cmp	r3, #5
 803bfe0:	d801      	bhi.n	803bfe6 <__hexdig_fun+0x26>
 803bfe2:	3827      	subs	r0, #39	; 0x27
 803bfe4:	e7f1      	b.n	803bfca <__hexdig_fun+0xa>
 803bfe6:	2000      	movs	r0, #0
 803bfe8:	4770      	bx	lr
	...

0803bfec <__gethex>:
 803bfec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803bff0:	ed2d 8b02 	vpush	{d8}
 803bff4:	b089      	sub	sp, #36	; 0x24
 803bff6:	ee08 0a10 	vmov	s16, r0
 803bffa:	9304      	str	r3, [sp, #16]
 803bffc:	4bbc      	ldr	r3, [pc, #752]	; (803c2f0 <__gethex+0x304>)
 803bffe:	681b      	ldr	r3, [r3, #0]
 803c000:	9301      	str	r3, [sp, #4]
 803c002:	4618      	mov	r0, r3
 803c004:	468b      	mov	fp, r1
 803c006:	4690      	mov	r8, r2
 803c008:	f7e4 f8e2 	bl	80201d0 <strlen>
 803c00c:	9b01      	ldr	r3, [sp, #4]
 803c00e:	f8db 2000 	ldr.w	r2, [fp]
 803c012:	4403      	add	r3, r0
 803c014:	4682      	mov	sl, r0
 803c016:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 803c01a:	9305      	str	r3, [sp, #20]
 803c01c:	1c93      	adds	r3, r2, #2
 803c01e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 803c022:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 803c026:	32fe      	adds	r2, #254	; 0xfe
 803c028:	18d1      	adds	r1, r2, r3
 803c02a:	461f      	mov	r7, r3
 803c02c:	f813 0b01 	ldrb.w	r0, [r3], #1
 803c030:	9100      	str	r1, [sp, #0]
 803c032:	2830      	cmp	r0, #48	; 0x30
 803c034:	d0f8      	beq.n	803c028 <__gethex+0x3c>
 803c036:	f7ff ffc3 	bl	803bfc0 <__hexdig_fun>
 803c03a:	4604      	mov	r4, r0
 803c03c:	2800      	cmp	r0, #0
 803c03e:	d13a      	bne.n	803c0b6 <__gethex+0xca>
 803c040:	9901      	ldr	r1, [sp, #4]
 803c042:	4652      	mov	r2, sl
 803c044:	4638      	mov	r0, r7
 803c046:	f7fe f9f8 	bl	803a43a <strncmp>
 803c04a:	4605      	mov	r5, r0
 803c04c:	2800      	cmp	r0, #0
 803c04e:	d168      	bne.n	803c122 <__gethex+0x136>
 803c050:	f817 000a 	ldrb.w	r0, [r7, sl]
 803c054:	eb07 060a 	add.w	r6, r7, sl
 803c058:	f7ff ffb2 	bl	803bfc0 <__hexdig_fun>
 803c05c:	2800      	cmp	r0, #0
 803c05e:	d062      	beq.n	803c126 <__gethex+0x13a>
 803c060:	4633      	mov	r3, r6
 803c062:	7818      	ldrb	r0, [r3, #0]
 803c064:	2830      	cmp	r0, #48	; 0x30
 803c066:	461f      	mov	r7, r3
 803c068:	f103 0301 	add.w	r3, r3, #1
 803c06c:	d0f9      	beq.n	803c062 <__gethex+0x76>
 803c06e:	f7ff ffa7 	bl	803bfc0 <__hexdig_fun>
 803c072:	2301      	movs	r3, #1
 803c074:	fab0 f480 	clz	r4, r0
 803c078:	0964      	lsrs	r4, r4, #5
 803c07a:	4635      	mov	r5, r6
 803c07c:	9300      	str	r3, [sp, #0]
 803c07e:	463a      	mov	r2, r7
 803c080:	4616      	mov	r6, r2
 803c082:	3201      	adds	r2, #1
 803c084:	7830      	ldrb	r0, [r6, #0]
 803c086:	f7ff ff9b 	bl	803bfc0 <__hexdig_fun>
 803c08a:	2800      	cmp	r0, #0
 803c08c:	d1f8      	bne.n	803c080 <__gethex+0x94>
 803c08e:	9901      	ldr	r1, [sp, #4]
 803c090:	4652      	mov	r2, sl
 803c092:	4630      	mov	r0, r6
 803c094:	f7fe f9d1 	bl	803a43a <strncmp>
 803c098:	b980      	cbnz	r0, 803c0bc <__gethex+0xd0>
 803c09a:	b94d      	cbnz	r5, 803c0b0 <__gethex+0xc4>
 803c09c:	eb06 050a 	add.w	r5, r6, sl
 803c0a0:	462a      	mov	r2, r5
 803c0a2:	4616      	mov	r6, r2
 803c0a4:	3201      	adds	r2, #1
 803c0a6:	7830      	ldrb	r0, [r6, #0]
 803c0a8:	f7ff ff8a 	bl	803bfc0 <__hexdig_fun>
 803c0ac:	2800      	cmp	r0, #0
 803c0ae:	d1f8      	bne.n	803c0a2 <__gethex+0xb6>
 803c0b0:	1bad      	subs	r5, r5, r6
 803c0b2:	00ad      	lsls	r5, r5, #2
 803c0b4:	e004      	b.n	803c0c0 <__gethex+0xd4>
 803c0b6:	2400      	movs	r4, #0
 803c0b8:	4625      	mov	r5, r4
 803c0ba:	e7e0      	b.n	803c07e <__gethex+0x92>
 803c0bc:	2d00      	cmp	r5, #0
 803c0be:	d1f7      	bne.n	803c0b0 <__gethex+0xc4>
 803c0c0:	7833      	ldrb	r3, [r6, #0]
 803c0c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 803c0c6:	2b50      	cmp	r3, #80	; 0x50
 803c0c8:	d13b      	bne.n	803c142 <__gethex+0x156>
 803c0ca:	7873      	ldrb	r3, [r6, #1]
 803c0cc:	2b2b      	cmp	r3, #43	; 0x2b
 803c0ce:	d02c      	beq.n	803c12a <__gethex+0x13e>
 803c0d0:	2b2d      	cmp	r3, #45	; 0x2d
 803c0d2:	d02e      	beq.n	803c132 <__gethex+0x146>
 803c0d4:	1c71      	adds	r1, r6, #1
 803c0d6:	f04f 0900 	mov.w	r9, #0
 803c0da:	7808      	ldrb	r0, [r1, #0]
 803c0dc:	f7ff ff70 	bl	803bfc0 <__hexdig_fun>
 803c0e0:	1e43      	subs	r3, r0, #1
 803c0e2:	b2db      	uxtb	r3, r3
 803c0e4:	2b18      	cmp	r3, #24
 803c0e6:	d82c      	bhi.n	803c142 <__gethex+0x156>
 803c0e8:	f1a0 0210 	sub.w	r2, r0, #16
 803c0ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 803c0f0:	f7ff ff66 	bl	803bfc0 <__hexdig_fun>
 803c0f4:	1e43      	subs	r3, r0, #1
 803c0f6:	b2db      	uxtb	r3, r3
 803c0f8:	2b18      	cmp	r3, #24
 803c0fa:	d91d      	bls.n	803c138 <__gethex+0x14c>
 803c0fc:	f1b9 0f00 	cmp.w	r9, #0
 803c100:	d000      	beq.n	803c104 <__gethex+0x118>
 803c102:	4252      	negs	r2, r2
 803c104:	4415      	add	r5, r2
 803c106:	f8cb 1000 	str.w	r1, [fp]
 803c10a:	b1e4      	cbz	r4, 803c146 <__gethex+0x15a>
 803c10c:	9b00      	ldr	r3, [sp, #0]
 803c10e:	2b00      	cmp	r3, #0
 803c110:	bf14      	ite	ne
 803c112:	2700      	movne	r7, #0
 803c114:	2706      	moveq	r7, #6
 803c116:	4638      	mov	r0, r7
 803c118:	b009      	add	sp, #36	; 0x24
 803c11a:	ecbd 8b02 	vpop	{d8}
 803c11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803c122:	463e      	mov	r6, r7
 803c124:	4625      	mov	r5, r4
 803c126:	2401      	movs	r4, #1
 803c128:	e7ca      	b.n	803c0c0 <__gethex+0xd4>
 803c12a:	f04f 0900 	mov.w	r9, #0
 803c12e:	1cb1      	adds	r1, r6, #2
 803c130:	e7d3      	b.n	803c0da <__gethex+0xee>
 803c132:	f04f 0901 	mov.w	r9, #1
 803c136:	e7fa      	b.n	803c12e <__gethex+0x142>
 803c138:	230a      	movs	r3, #10
 803c13a:	fb03 0202 	mla	r2, r3, r2, r0
 803c13e:	3a10      	subs	r2, #16
 803c140:	e7d4      	b.n	803c0ec <__gethex+0x100>
 803c142:	4631      	mov	r1, r6
 803c144:	e7df      	b.n	803c106 <__gethex+0x11a>
 803c146:	1bf3      	subs	r3, r6, r7
 803c148:	3b01      	subs	r3, #1
 803c14a:	4621      	mov	r1, r4
 803c14c:	2b07      	cmp	r3, #7
 803c14e:	dc0b      	bgt.n	803c168 <__gethex+0x17c>
 803c150:	ee18 0a10 	vmov	r0, s16
 803c154:	f000 fa9e 	bl	803c694 <_Balloc>
 803c158:	4604      	mov	r4, r0
 803c15a:	b940      	cbnz	r0, 803c16e <__gethex+0x182>
 803c15c:	4b65      	ldr	r3, [pc, #404]	; (803c2f4 <__gethex+0x308>)
 803c15e:	4602      	mov	r2, r0
 803c160:	21de      	movs	r1, #222	; 0xde
 803c162:	4865      	ldr	r0, [pc, #404]	; (803c2f8 <__gethex+0x30c>)
 803c164:	f001 f8e6 	bl	803d334 <__assert_func>
 803c168:	3101      	adds	r1, #1
 803c16a:	105b      	asrs	r3, r3, #1
 803c16c:	e7ee      	b.n	803c14c <__gethex+0x160>
 803c16e:	f100 0914 	add.w	r9, r0, #20
 803c172:	f04f 0b00 	mov.w	fp, #0
 803c176:	f1ca 0301 	rsb	r3, sl, #1
 803c17a:	f8cd 9008 	str.w	r9, [sp, #8]
 803c17e:	f8cd b000 	str.w	fp, [sp]
 803c182:	9306      	str	r3, [sp, #24]
 803c184:	42b7      	cmp	r7, r6
 803c186:	d340      	bcc.n	803c20a <__gethex+0x21e>
 803c188:	9802      	ldr	r0, [sp, #8]
 803c18a:	9b00      	ldr	r3, [sp, #0]
 803c18c:	f840 3b04 	str.w	r3, [r0], #4
 803c190:	eba0 0009 	sub.w	r0, r0, r9
 803c194:	1080      	asrs	r0, r0, #2
 803c196:	0146      	lsls	r6, r0, #5
 803c198:	6120      	str	r0, [r4, #16]
 803c19a:	4618      	mov	r0, r3
 803c19c:	f000 fb70 	bl	803c880 <__hi0bits>
 803c1a0:	1a30      	subs	r0, r6, r0
 803c1a2:	f8d8 6000 	ldr.w	r6, [r8]
 803c1a6:	42b0      	cmp	r0, r6
 803c1a8:	dd63      	ble.n	803c272 <__gethex+0x286>
 803c1aa:	1b87      	subs	r7, r0, r6
 803c1ac:	4639      	mov	r1, r7
 803c1ae:	4620      	mov	r0, r4
 803c1b0:	f000 ff0a 	bl	803cfc8 <__any_on>
 803c1b4:	4682      	mov	sl, r0
 803c1b6:	b1a8      	cbz	r0, 803c1e4 <__gethex+0x1f8>
 803c1b8:	1e7b      	subs	r3, r7, #1
 803c1ba:	1159      	asrs	r1, r3, #5
 803c1bc:	f003 021f 	and.w	r2, r3, #31
 803c1c0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 803c1c4:	f04f 0a01 	mov.w	sl, #1
 803c1c8:	fa0a f202 	lsl.w	r2, sl, r2
 803c1cc:	420a      	tst	r2, r1
 803c1ce:	d009      	beq.n	803c1e4 <__gethex+0x1f8>
 803c1d0:	4553      	cmp	r3, sl
 803c1d2:	dd05      	ble.n	803c1e0 <__gethex+0x1f4>
 803c1d4:	1eb9      	subs	r1, r7, #2
 803c1d6:	4620      	mov	r0, r4
 803c1d8:	f000 fef6 	bl	803cfc8 <__any_on>
 803c1dc:	2800      	cmp	r0, #0
 803c1de:	d145      	bne.n	803c26c <__gethex+0x280>
 803c1e0:	f04f 0a02 	mov.w	sl, #2
 803c1e4:	4639      	mov	r1, r7
 803c1e6:	4620      	mov	r0, r4
 803c1e8:	f7ff fe98 	bl	803bf1c <rshift>
 803c1ec:	443d      	add	r5, r7
 803c1ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 803c1f2:	42ab      	cmp	r3, r5
 803c1f4:	da4c      	bge.n	803c290 <__gethex+0x2a4>
 803c1f6:	ee18 0a10 	vmov	r0, s16
 803c1fa:	4621      	mov	r1, r4
 803c1fc:	f000 fa8a 	bl	803c714 <_Bfree>
 803c200:	9a14      	ldr	r2, [sp, #80]	; 0x50
 803c202:	2300      	movs	r3, #0
 803c204:	6013      	str	r3, [r2, #0]
 803c206:	27a3      	movs	r7, #163	; 0xa3
 803c208:	e785      	b.n	803c116 <__gethex+0x12a>
 803c20a:	1e73      	subs	r3, r6, #1
 803c20c:	9a05      	ldr	r2, [sp, #20]
 803c20e:	9303      	str	r3, [sp, #12]
 803c210:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 803c214:	4293      	cmp	r3, r2
 803c216:	d019      	beq.n	803c24c <__gethex+0x260>
 803c218:	f1bb 0f20 	cmp.w	fp, #32
 803c21c:	d107      	bne.n	803c22e <__gethex+0x242>
 803c21e:	9b02      	ldr	r3, [sp, #8]
 803c220:	9a00      	ldr	r2, [sp, #0]
 803c222:	f843 2b04 	str.w	r2, [r3], #4
 803c226:	9302      	str	r3, [sp, #8]
 803c228:	2300      	movs	r3, #0
 803c22a:	9300      	str	r3, [sp, #0]
 803c22c:	469b      	mov	fp, r3
 803c22e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 803c232:	f7ff fec5 	bl	803bfc0 <__hexdig_fun>
 803c236:	9b00      	ldr	r3, [sp, #0]
 803c238:	f000 000f 	and.w	r0, r0, #15
 803c23c:	fa00 f00b 	lsl.w	r0, r0, fp
 803c240:	4303      	orrs	r3, r0
 803c242:	9300      	str	r3, [sp, #0]
 803c244:	f10b 0b04 	add.w	fp, fp, #4
 803c248:	9b03      	ldr	r3, [sp, #12]
 803c24a:	e00d      	b.n	803c268 <__gethex+0x27c>
 803c24c:	9b03      	ldr	r3, [sp, #12]
 803c24e:	9a06      	ldr	r2, [sp, #24]
 803c250:	4413      	add	r3, r2
 803c252:	42bb      	cmp	r3, r7
 803c254:	d3e0      	bcc.n	803c218 <__gethex+0x22c>
 803c256:	4618      	mov	r0, r3
 803c258:	9901      	ldr	r1, [sp, #4]
 803c25a:	9307      	str	r3, [sp, #28]
 803c25c:	4652      	mov	r2, sl
 803c25e:	f7fe f8ec 	bl	803a43a <strncmp>
 803c262:	9b07      	ldr	r3, [sp, #28]
 803c264:	2800      	cmp	r0, #0
 803c266:	d1d7      	bne.n	803c218 <__gethex+0x22c>
 803c268:	461e      	mov	r6, r3
 803c26a:	e78b      	b.n	803c184 <__gethex+0x198>
 803c26c:	f04f 0a03 	mov.w	sl, #3
 803c270:	e7b8      	b.n	803c1e4 <__gethex+0x1f8>
 803c272:	da0a      	bge.n	803c28a <__gethex+0x29e>
 803c274:	1a37      	subs	r7, r6, r0
 803c276:	4621      	mov	r1, r4
 803c278:	ee18 0a10 	vmov	r0, s16
 803c27c:	463a      	mov	r2, r7
 803c27e:	f000 fc65 	bl	803cb4c <__lshift>
 803c282:	1bed      	subs	r5, r5, r7
 803c284:	4604      	mov	r4, r0
 803c286:	f100 0914 	add.w	r9, r0, #20
 803c28a:	f04f 0a00 	mov.w	sl, #0
 803c28e:	e7ae      	b.n	803c1ee <__gethex+0x202>
 803c290:	f8d8 0004 	ldr.w	r0, [r8, #4]
 803c294:	42a8      	cmp	r0, r5
 803c296:	dd72      	ble.n	803c37e <__gethex+0x392>
 803c298:	1b45      	subs	r5, r0, r5
 803c29a:	42ae      	cmp	r6, r5
 803c29c:	dc36      	bgt.n	803c30c <__gethex+0x320>
 803c29e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 803c2a2:	2b02      	cmp	r3, #2
 803c2a4:	d02a      	beq.n	803c2fc <__gethex+0x310>
 803c2a6:	2b03      	cmp	r3, #3
 803c2a8:	d02c      	beq.n	803c304 <__gethex+0x318>
 803c2aa:	2b01      	cmp	r3, #1
 803c2ac:	d115      	bne.n	803c2da <__gethex+0x2ee>
 803c2ae:	42ae      	cmp	r6, r5
 803c2b0:	d113      	bne.n	803c2da <__gethex+0x2ee>
 803c2b2:	2e01      	cmp	r6, #1
 803c2b4:	d10b      	bne.n	803c2ce <__gethex+0x2e2>
 803c2b6:	9a04      	ldr	r2, [sp, #16]
 803c2b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 803c2bc:	6013      	str	r3, [r2, #0]
 803c2be:	2301      	movs	r3, #1
 803c2c0:	6123      	str	r3, [r4, #16]
 803c2c2:	f8c9 3000 	str.w	r3, [r9]
 803c2c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 803c2c8:	2762      	movs	r7, #98	; 0x62
 803c2ca:	601c      	str	r4, [r3, #0]
 803c2cc:	e723      	b.n	803c116 <__gethex+0x12a>
 803c2ce:	1e71      	subs	r1, r6, #1
 803c2d0:	4620      	mov	r0, r4
 803c2d2:	f000 fe79 	bl	803cfc8 <__any_on>
 803c2d6:	2800      	cmp	r0, #0
 803c2d8:	d1ed      	bne.n	803c2b6 <__gethex+0x2ca>
 803c2da:	ee18 0a10 	vmov	r0, s16
 803c2de:	4621      	mov	r1, r4
 803c2e0:	f000 fa18 	bl	803c714 <_Bfree>
 803c2e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 803c2e6:	2300      	movs	r3, #0
 803c2e8:	6013      	str	r3, [r2, #0]
 803c2ea:	2750      	movs	r7, #80	; 0x50
 803c2ec:	e713      	b.n	803c116 <__gethex+0x12a>
 803c2ee:	bf00      	nop
 803c2f0:	0803eb90 	.word	0x0803eb90
 803c2f4:	0803eb14 	.word	0x0803eb14
 803c2f8:	0803eb25 	.word	0x0803eb25
 803c2fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 803c2fe:	2b00      	cmp	r3, #0
 803c300:	d1eb      	bne.n	803c2da <__gethex+0x2ee>
 803c302:	e7d8      	b.n	803c2b6 <__gethex+0x2ca>
 803c304:	9b15      	ldr	r3, [sp, #84]	; 0x54
 803c306:	2b00      	cmp	r3, #0
 803c308:	d1d5      	bne.n	803c2b6 <__gethex+0x2ca>
 803c30a:	e7e6      	b.n	803c2da <__gethex+0x2ee>
 803c30c:	1e6f      	subs	r7, r5, #1
 803c30e:	f1ba 0f00 	cmp.w	sl, #0
 803c312:	d131      	bne.n	803c378 <__gethex+0x38c>
 803c314:	b127      	cbz	r7, 803c320 <__gethex+0x334>
 803c316:	4639      	mov	r1, r7
 803c318:	4620      	mov	r0, r4
 803c31a:	f000 fe55 	bl	803cfc8 <__any_on>
 803c31e:	4682      	mov	sl, r0
 803c320:	117b      	asrs	r3, r7, #5
 803c322:	2101      	movs	r1, #1
 803c324:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 803c328:	f007 071f 	and.w	r7, r7, #31
 803c32c:	fa01 f707 	lsl.w	r7, r1, r7
 803c330:	421f      	tst	r7, r3
 803c332:	4629      	mov	r1, r5
 803c334:	4620      	mov	r0, r4
 803c336:	bf18      	it	ne
 803c338:	f04a 0a02 	orrne.w	sl, sl, #2
 803c33c:	1b76      	subs	r6, r6, r5
 803c33e:	f7ff fded 	bl	803bf1c <rshift>
 803c342:	f8d8 5004 	ldr.w	r5, [r8, #4]
 803c346:	2702      	movs	r7, #2
 803c348:	f1ba 0f00 	cmp.w	sl, #0
 803c34c:	d048      	beq.n	803c3e0 <__gethex+0x3f4>
 803c34e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 803c352:	2b02      	cmp	r3, #2
 803c354:	d015      	beq.n	803c382 <__gethex+0x396>
 803c356:	2b03      	cmp	r3, #3
 803c358:	d017      	beq.n	803c38a <__gethex+0x39e>
 803c35a:	2b01      	cmp	r3, #1
 803c35c:	d109      	bne.n	803c372 <__gethex+0x386>
 803c35e:	f01a 0f02 	tst.w	sl, #2
 803c362:	d006      	beq.n	803c372 <__gethex+0x386>
 803c364:	f8d9 0000 	ldr.w	r0, [r9]
 803c368:	ea4a 0a00 	orr.w	sl, sl, r0
 803c36c:	f01a 0f01 	tst.w	sl, #1
 803c370:	d10e      	bne.n	803c390 <__gethex+0x3a4>
 803c372:	f047 0710 	orr.w	r7, r7, #16
 803c376:	e033      	b.n	803c3e0 <__gethex+0x3f4>
 803c378:	f04f 0a01 	mov.w	sl, #1
 803c37c:	e7d0      	b.n	803c320 <__gethex+0x334>
 803c37e:	2701      	movs	r7, #1
 803c380:	e7e2      	b.n	803c348 <__gethex+0x35c>
 803c382:	9b15      	ldr	r3, [sp, #84]	; 0x54
 803c384:	f1c3 0301 	rsb	r3, r3, #1
 803c388:	9315      	str	r3, [sp, #84]	; 0x54
 803c38a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 803c38c:	2b00      	cmp	r3, #0
 803c38e:	d0f0      	beq.n	803c372 <__gethex+0x386>
 803c390:	f8d4 b010 	ldr.w	fp, [r4, #16]
 803c394:	f104 0314 	add.w	r3, r4, #20
 803c398:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 803c39c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 803c3a0:	f04f 0c00 	mov.w	ip, #0
 803c3a4:	4618      	mov	r0, r3
 803c3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 803c3aa:	f1b2 3fff 	cmp.w	r2, #4294967295
 803c3ae:	d01c      	beq.n	803c3ea <__gethex+0x3fe>
 803c3b0:	3201      	adds	r2, #1
 803c3b2:	6002      	str	r2, [r0, #0]
 803c3b4:	2f02      	cmp	r7, #2
 803c3b6:	f104 0314 	add.w	r3, r4, #20
 803c3ba:	d13f      	bne.n	803c43c <__gethex+0x450>
 803c3bc:	f8d8 2000 	ldr.w	r2, [r8]
 803c3c0:	3a01      	subs	r2, #1
 803c3c2:	42b2      	cmp	r2, r6
 803c3c4:	d10a      	bne.n	803c3dc <__gethex+0x3f0>
 803c3c6:	1171      	asrs	r1, r6, #5
 803c3c8:	2201      	movs	r2, #1
 803c3ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 803c3ce:	f006 061f 	and.w	r6, r6, #31
 803c3d2:	fa02 f606 	lsl.w	r6, r2, r6
 803c3d6:	421e      	tst	r6, r3
 803c3d8:	bf18      	it	ne
 803c3da:	4617      	movne	r7, r2
 803c3dc:	f047 0720 	orr.w	r7, r7, #32
 803c3e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 803c3e2:	601c      	str	r4, [r3, #0]
 803c3e4:	9b04      	ldr	r3, [sp, #16]
 803c3e6:	601d      	str	r5, [r3, #0]
 803c3e8:	e695      	b.n	803c116 <__gethex+0x12a>
 803c3ea:	4299      	cmp	r1, r3
 803c3ec:	f843 cc04 	str.w	ip, [r3, #-4]
 803c3f0:	d8d8      	bhi.n	803c3a4 <__gethex+0x3b8>
 803c3f2:	68a3      	ldr	r3, [r4, #8]
 803c3f4:	459b      	cmp	fp, r3
 803c3f6:	db19      	blt.n	803c42c <__gethex+0x440>
 803c3f8:	6861      	ldr	r1, [r4, #4]
 803c3fa:	ee18 0a10 	vmov	r0, s16
 803c3fe:	3101      	adds	r1, #1
 803c400:	f000 f948 	bl	803c694 <_Balloc>
 803c404:	4681      	mov	r9, r0
 803c406:	b918      	cbnz	r0, 803c410 <__gethex+0x424>
 803c408:	4b1a      	ldr	r3, [pc, #104]	; (803c474 <__gethex+0x488>)
 803c40a:	4602      	mov	r2, r0
 803c40c:	2184      	movs	r1, #132	; 0x84
 803c40e:	e6a8      	b.n	803c162 <__gethex+0x176>
 803c410:	6922      	ldr	r2, [r4, #16]
 803c412:	3202      	adds	r2, #2
 803c414:	f104 010c 	add.w	r1, r4, #12
 803c418:	0092      	lsls	r2, r2, #2
 803c41a:	300c      	adds	r0, #12
 803c41c:	f7fd f85a 	bl	80394d4 <memcpy>
 803c420:	4621      	mov	r1, r4
 803c422:	ee18 0a10 	vmov	r0, s16
 803c426:	f000 f975 	bl	803c714 <_Bfree>
 803c42a:	464c      	mov	r4, r9
 803c42c:	6923      	ldr	r3, [r4, #16]
 803c42e:	1c5a      	adds	r2, r3, #1
 803c430:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 803c434:	6122      	str	r2, [r4, #16]
 803c436:	2201      	movs	r2, #1
 803c438:	615a      	str	r2, [r3, #20]
 803c43a:	e7bb      	b.n	803c3b4 <__gethex+0x3c8>
 803c43c:	6922      	ldr	r2, [r4, #16]
 803c43e:	455a      	cmp	r2, fp
 803c440:	dd0b      	ble.n	803c45a <__gethex+0x46e>
 803c442:	2101      	movs	r1, #1
 803c444:	4620      	mov	r0, r4
 803c446:	f7ff fd69 	bl	803bf1c <rshift>
 803c44a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 803c44e:	3501      	adds	r5, #1
 803c450:	42ab      	cmp	r3, r5
 803c452:	f6ff aed0 	blt.w	803c1f6 <__gethex+0x20a>
 803c456:	2701      	movs	r7, #1
 803c458:	e7c0      	b.n	803c3dc <__gethex+0x3f0>
 803c45a:	f016 061f 	ands.w	r6, r6, #31
 803c45e:	d0fa      	beq.n	803c456 <__gethex+0x46a>
 803c460:	449a      	add	sl, r3
 803c462:	f1c6 0620 	rsb	r6, r6, #32
 803c466:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 803c46a:	f000 fa09 	bl	803c880 <__hi0bits>
 803c46e:	42b0      	cmp	r0, r6
 803c470:	dbe7      	blt.n	803c442 <__gethex+0x456>
 803c472:	e7f0      	b.n	803c456 <__gethex+0x46a>
 803c474:	0803eb14 	.word	0x0803eb14

0803c478 <L_shift>:
 803c478:	f1c2 0208 	rsb	r2, r2, #8
 803c47c:	0092      	lsls	r2, r2, #2
 803c47e:	b570      	push	{r4, r5, r6, lr}
 803c480:	f1c2 0620 	rsb	r6, r2, #32
 803c484:	6843      	ldr	r3, [r0, #4]
 803c486:	6804      	ldr	r4, [r0, #0]
 803c488:	fa03 f506 	lsl.w	r5, r3, r6
 803c48c:	432c      	orrs	r4, r5
 803c48e:	40d3      	lsrs	r3, r2
 803c490:	6004      	str	r4, [r0, #0]
 803c492:	f840 3f04 	str.w	r3, [r0, #4]!
 803c496:	4288      	cmp	r0, r1
 803c498:	d3f4      	bcc.n	803c484 <L_shift+0xc>
 803c49a:	bd70      	pop	{r4, r5, r6, pc}

0803c49c <__match>:
 803c49c:	b530      	push	{r4, r5, lr}
 803c49e:	6803      	ldr	r3, [r0, #0]
 803c4a0:	3301      	adds	r3, #1
 803c4a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 803c4a6:	b914      	cbnz	r4, 803c4ae <__match+0x12>
 803c4a8:	6003      	str	r3, [r0, #0]
 803c4aa:	2001      	movs	r0, #1
 803c4ac:	bd30      	pop	{r4, r5, pc}
 803c4ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 803c4b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 803c4b6:	2d19      	cmp	r5, #25
 803c4b8:	bf98      	it	ls
 803c4ba:	3220      	addls	r2, #32
 803c4bc:	42a2      	cmp	r2, r4
 803c4be:	d0f0      	beq.n	803c4a2 <__match+0x6>
 803c4c0:	2000      	movs	r0, #0
 803c4c2:	e7f3      	b.n	803c4ac <__match+0x10>

0803c4c4 <__hexnan>:
 803c4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803c4c8:	680b      	ldr	r3, [r1, #0]
 803c4ca:	6801      	ldr	r1, [r0, #0]
 803c4cc:	115e      	asrs	r6, r3, #5
 803c4ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 803c4d2:	f013 031f 	ands.w	r3, r3, #31
 803c4d6:	b087      	sub	sp, #28
 803c4d8:	bf18      	it	ne
 803c4da:	3604      	addne	r6, #4
 803c4dc:	2500      	movs	r5, #0
 803c4de:	1f37      	subs	r7, r6, #4
 803c4e0:	4682      	mov	sl, r0
 803c4e2:	4690      	mov	r8, r2
 803c4e4:	9301      	str	r3, [sp, #4]
 803c4e6:	f846 5c04 	str.w	r5, [r6, #-4]
 803c4ea:	46b9      	mov	r9, r7
 803c4ec:	463c      	mov	r4, r7
 803c4ee:	9502      	str	r5, [sp, #8]
 803c4f0:	46ab      	mov	fp, r5
 803c4f2:	784a      	ldrb	r2, [r1, #1]
 803c4f4:	1c4b      	adds	r3, r1, #1
 803c4f6:	9303      	str	r3, [sp, #12]
 803c4f8:	b342      	cbz	r2, 803c54c <__hexnan+0x88>
 803c4fa:	4610      	mov	r0, r2
 803c4fc:	9105      	str	r1, [sp, #20]
 803c4fe:	9204      	str	r2, [sp, #16]
 803c500:	f7ff fd5e 	bl	803bfc0 <__hexdig_fun>
 803c504:	2800      	cmp	r0, #0
 803c506:	d14f      	bne.n	803c5a8 <__hexnan+0xe4>
 803c508:	9a04      	ldr	r2, [sp, #16]
 803c50a:	9905      	ldr	r1, [sp, #20]
 803c50c:	2a20      	cmp	r2, #32
 803c50e:	d818      	bhi.n	803c542 <__hexnan+0x7e>
 803c510:	9b02      	ldr	r3, [sp, #8]
 803c512:	459b      	cmp	fp, r3
 803c514:	dd13      	ble.n	803c53e <__hexnan+0x7a>
 803c516:	454c      	cmp	r4, r9
 803c518:	d206      	bcs.n	803c528 <__hexnan+0x64>
 803c51a:	2d07      	cmp	r5, #7
 803c51c:	dc04      	bgt.n	803c528 <__hexnan+0x64>
 803c51e:	462a      	mov	r2, r5
 803c520:	4649      	mov	r1, r9
 803c522:	4620      	mov	r0, r4
 803c524:	f7ff ffa8 	bl	803c478 <L_shift>
 803c528:	4544      	cmp	r4, r8
 803c52a:	d950      	bls.n	803c5ce <__hexnan+0x10a>
 803c52c:	2300      	movs	r3, #0
 803c52e:	f1a4 0904 	sub.w	r9, r4, #4
 803c532:	f844 3c04 	str.w	r3, [r4, #-4]
 803c536:	f8cd b008 	str.w	fp, [sp, #8]
 803c53a:	464c      	mov	r4, r9
 803c53c:	461d      	mov	r5, r3
 803c53e:	9903      	ldr	r1, [sp, #12]
 803c540:	e7d7      	b.n	803c4f2 <__hexnan+0x2e>
 803c542:	2a29      	cmp	r2, #41	; 0x29
 803c544:	d156      	bne.n	803c5f4 <__hexnan+0x130>
 803c546:	3102      	adds	r1, #2
 803c548:	f8ca 1000 	str.w	r1, [sl]
 803c54c:	f1bb 0f00 	cmp.w	fp, #0
 803c550:	d050      	beq.n	803c5f4 <__hexnan+0x130>
 803c552:	454c      	cmp	r4, r9
 803c554:	d206      	bcs.n	803c564 <__hexnan+0xa0>
 803c556:	2d07      	cmp	r5, #7
 803c558:	dc04      	bgt.n	803c564 <__hexnan+0xa0>
 803c55a:	462a      	mov	r2, r5
 803c55c:	4649      	mov	r1, r9
 803c55e:	4620      	mov	r0, r4
 803c560:	f7ff ff8a 	bl	803c478 <L_shift>
 803c564:	4544      	cmp	r4, r8
 803c566:	d934      	bls.n	803c5d2 <__hexnan+0x10e>
 803c568:	f1a8 0204 	sub.w	r2, r8, #4
 803c56c:	4623      	mov	r3, r4
 803c56e:	f853 1b04 	ldr.w	r1, [r3], #4
 803c572:	f842 1f04 	str.w	r1, [r2, #4]!
 803c576:	429f      	cmp	r7, r3
 803c578:	d2f9      	bcs.n	803c56e <__hexnan+0xaa>
 803c57a:	1b3b      	subs	r3, r7, r4
 803c57c:	f023 0303 	bic.w	r3, r3, #3
 803c580:	3304      	adds	r3, #4
 803c582:	3401      	adds	r4, #1
 803c584:	3e03      	subs	r6, #3
 803c586:	42b4      	cmp	r4, r6
 803c588:	bf88      	it	hi
 803c58a:	2304      	movhi	r3, #4
 803c58c:	4443      	add	r3, r8
 803c58e:	2200      	movs	r2, #0
 803c590:	f843 2b04 	str.w	r2, [r3], #4
 803c594:	429f      	cmp	r7, r3
 803c596:	d2fb      	bcs.n	803c590 <__hexnan+0xcc>
 803c598:	683b      	ldr	r3, [r7, #0]
 803c59a:	b91b      	cbnz	r3, 803c5a4 <__hexnan+0xe0>
 803c59c:	4547      	cmp	r7, r8
 803c59e:	d127      	bne.n	803c5f0 <__hexnan+0x12c>
 803c5a0:	2301      	movs	r3, #1
 803c5a2:	603b      	str	r3, [r7, #0]
 803c5a4:	2005      	movs	r0, #5
 803c5a6:	e026      	b.n	803c5f6 <__hexnan+0x132>
 803c5a8:	3501      	adds	r5, #1
 803c5aa:	2d08      	cmp	r5, #8
 803c5ac:	f10b 0b01 	add.w	fp, fp, #1
 803c5b0:	dd06      	ble.n	803c5c0 <__hexnan+0xfc>
 803c5b2:	4544      	cmp	r4, r8
 803c5b4:	d9c3      	bls.n	803c53e <__hexnan+0x7a>
 803c5b6:	2300      	movs	r3, #0
 803c5b8:	f844 3c04 	str.w	r3, [r4, #-4]
 803c5bc:	2501      	movs	r5, #1
 803c5be:	3c04      	subs	r4, #4
 803c5c0:	6822      	ldr	r2, [r4, #0]
 803c5c2:	f000 000f 	and.w	r0, r0, #15
 803c5c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 803c5ca:	6022      	str	r2, [r4, #0]
 803c5cc:	e7b7      	b.n	803c53e <__hexnan+0x7a>
 803c5ce:	2508      	movs	r5, #8
 803c5d0:	e7b5      	b.n	803c53e <__hexnan+0x7a>
 803c5d2:	9b01      	ldr	r3, [sp, #4]
 803c5d4:	2b00      	cmp	r3, #0
 803c5d6:	d0df      	beq.n	803c598 <__hexnan+0xd4>
 803c5d8:	f04f 32ff 	mov.w	r2, #4294967295
 803c5dc:	f1c3 0320 	rsb	r3, r3, #32
 803c5e0:	fa22 f303 	lsr.w	r3, r2, r3
 803c5e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 803c5e8:	401a      	ands	r2, r3
 803c5ea:	f846 2c04 	str.w	r2, [r6, #-4]
 803c5ee:	e7d3      	b.n	803c598 <__hexnan+0xd4>
 803c5f0:	3f04      	subs	r7, #4
 803c5f2:	e7d1      	b.n	803c598 <__hexnan+0xd4>
 803c5f4:	2004      	movs	r0, #4
 803c5f6:	b007      	add	sp, #28
 803c5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0803c5fc <_isatty_r>:
 803c5fc:	b538      	push	{r3, r4, r5, lr}
 803c5fe:	4d06      	ldr	r5, [pc, #24]	; (803c618 <_isatty_r+0x1c>)
 803c600:	2300      	movs	r3, #0
 803c602:	4604      	mov	r4, r0
 803c604:	4608      	mov	r0, r1
 803c606:	602b      	str	r3, [r5, #0]
 803c608:	f7f5 fa95 	bl	8031b36 <_isatty>
 803c60c:	1c43      	adds	r3, r0, #1
 803c60e:	d102      	bne.n	803c616 <_isatty_r+0x1a>
 803c610:	682b      	ldr	r3, [r5, #0]
 803c612:	b103      	cbz	r3, 803c616 <_isatty_r+0x1a>
 803c614:	6023      	str	r3, [r4, #0]
 803c616:	bd38      	pop	{r3, r4, r5, pc}
 803c618:	200009c4 	.word	0x200009c4

0803c61c <_localeconv_r>:
 803c61c:	4800      	ldr	r0, [pc, #0]	; (803c620 <_localeconv_r+0x4>)
 803c61e:	4770      	bx	lr
 803c620:	20000184 	.word	0x20000184

0803c624 <_lseek_r>:
 803c624:	b538      	push	{r3, r4, r5, lr}
 803c626:	4d07      	ldr	r5, [pc, #28]	; (803c644 <_lseek_r+0x20>)
 803c628:	4604      	mov	r4, r0
 803c62a:	4608      	mov	r0, r1
 803c62c:	4611      	mov	r1, r2
 803c62e:	2200      	movs	r2, #0
 803c630:	602a      	str	r2, [r5, #0]
 803c632:	461a      	mov	r2, r3
 803c634:	f7f5 fa8a 	bl	8031b4c <_lseek>
 803c638:	1c43      	adds	r3, r0, #1
 803c63a:	d102      	bne.n	803c642 <_lseek_r+0x1e>
 803c63c:	682b      	ldr	r3, [r5, #0]
 803c63e:	b103      	cbz	r3, 803c642 <_lseek_r+0x1e>
 803c640:	6023      	str	r3, [r4, #0]
 803c642:	bd38      	pop	{r3, r4, r5, pc}
 803c644:	200009c4 	.word	0x200009c4

0803c648 <malloc>:
 803c648:	4b02      	ldr	r3, [pc, #8]	; (803c654 <malloc+0xc>)
 803c64a:	4601      	mov	r1, r0
 803c64c:	6818      	ldr	r0, [r3, #0]
 803c64e:	f7fc bfa7 	b.w	80395a0 <_malloc_r>
 803c652:	bf00      	nop
 803c654:	2000002c 	.word	0x2000002c

0803c658 <__ascii_mbtowc>:
 803c658:	b082      	sub	sp, #8
 803c65a:	b901      	cbnz	r1, 803c65e <__ascii_mbtowc+0x6>
 803c65c:	a901      	add	r1, sp, #4
 803c65e:	b142      	cbz	r2, 803c672 <__ascii_mbtowc+0x1a>
 803c660:	b14b      	cbz	r3, 803c676 <__ascii_mbtowc+0x1e>
 803c662:	7813      	ldrb	r3, [r2, #0]
 803c664:	600b      	str	r3, [r1, #0]
 803c666:	7812      	ldrb	r2, [r2, #0]
 803c668:	1e10      	subs	r0, r2, #0
 803c66a:	bf18      	it	ne
 803c66c:	2001      	movne	r0, #1
 803c66e:	b002      	add	sp, #8
 803c670:	4770      	bx	lr
 803c672:	4610      	mov	r0, r2
 803c674:	e7fb      	b.n	803c66e <__ascii_mbtowc+0x16>
 803c676:	f06f 0001 	mvn.w	r0, #1
 803c67a:	e7f8      	b.n	803c66e <__ascii_mbtowc+0x16>

0803c67c <__malloc_lock>:
 803c67c:	4801      	ldr	r0, [pc, #4]	; (803c684 <__malloc_lock+0x8>)
 803c67e:	f7fc bec2 	b.w	8039406 <__retarget_lock_acquire_recursive>
 803c682:	bf00      	nop
 803c684:	200009bc 	.word	0x200009bc

0803c688 <__malloc_unlock>:
 803c688:	4801      	ldr	r0, [pc, #4]	; (803c690 <__malloc_unlock+0x8>)
 803c68a:	f7fc bebd 	b.w	8039408 <__retarget_lock_release_recursive>
 803c68e:	bf00      	nop
 803c690:	200009bc 	.word	0x200009bc

0803c694 <_Balloc>:
 803c694:	b570      	push	{r4, r5, r6, lr}
 803c696:	6a46      	ldr	r6, [r0, #36]	; 0x24
 803c698:	4604      	mov	r4, r0
 803c69a:	460d      	mov	r5, r1
 803c69c:	b976      	cbnz	r6, 803c6bc <_Balloc+0x28>
 803c69e:	2010      	movs	r0, #16
 803c6a0:	f7ff ffd2 	bl	803c648 <malloc>
 803c6a4:	4602      	mov	r2, r0
 803c6a6:	6260      	str	r0, [r4, #36]	; 0x24
 803c6a8:	b920      	cbnz	r0, 803c6b4 <_Balloc+0x20>
 803c6aa:	4b18      	ldr	r3, [pc, #96]	; (803c70c <_Balloc+0x78>)
 803c6ac:	4818      	ldr	r0, [pc, #96]	; (803c710 <_Balloc+0x7c>)
 803c6ae:	2166      	movs	r1, #102	; 0x66
 803c6b0:	f000 fe40 	bl	803d334 <__assert_func>
 803c6b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 803c6b8:	6006      	str	r6, [r0, #0]
 803c6ba:	60c6      	str	r6, [r0, #12]
 803c6bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 803c6be:	68f3      	ldr	r3, [r6, #12]
 803c6c0:	b183      	cbz	r3, 803c6e4 <_Balloc+0x50>
 803c6c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 803c6c4:	68db      	ldr	r3, [r3, #12]
 803c6c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 803c6ca:	b9b8      	cbnz	r0, 803c6fc <_Balloc+0x68>
 803c6cc:	2101      	movs	r1, #1
 803c6ce:	fa01 f605 	lsl.w	r6, r1, r5
 803c6d2:	1d72      	adds	r2, r6, #5
 803c6d4:	0092      	lsls	r2, r2, #2
 803c6d6:	4620      	mov	r0, r4
 803c6d8:	f000 fc97 	bl	803d00a <_calloc_r>
 803c6dc:	b160      	cbz	r0, 803c6f8 <_Balloc+0x64>
 803c6de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 803c6e2:	e00e      	b.n	803c702 <_Balloc+0x6e>
 803c6e4:	2221      	movs	r2, #33	; 0x21
 803c6e6:	2104      	movs	r1, #4
 803c6e8:	4620      	mov	r0, r4
 803c6ea:	f000 fc8e 	bl	803d00a <_calloc_r>
 803c6ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 803c6f0:	60f0      	str	r0, [r6, #12]
 803c6f2:	68db      	ldr	r3, [r3, #12]
 803c6f4:	2b00      	cmp	r3, #0
 803c6f6:	d1e4      	bne.n	803c6c2 <_Balloc+0x2e>
 803c6f8:	2000      	movs	r0, #0
 803c6fa:	bd70      	pop	{r4, r5, r6, pc}
 803c6fc:	6802      	ldr	r2, [r0, #0]
 803c6fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 803c702:	2300      	movs	r3, #0
 803c704:	e9c0 3303 	strd	r3, r3, [r0, #12]
 803c708:	e7f7      	b.n	803c6fa <_Balloc+0x66>
 803c70a:	bf00      	nop
 803c70c:	0803ea9e 	.word	0x0803ea9e
 803c710:	0803eba4 	.word	0x0803eba4

0803c714 <_Bfree>:
 803c714:	b570      	push	{r4, r5, r6, lr}
 803c716:	6a46      	ldr	r6, [r0, #36]	; 0x24
 803c718:	4605      	mov	r5, r0
 803c71a:	460c      	mov	r4, r1
 803c71c:	b976      	cbnz	r6, 803c73c <_Bfree+0x28>
 803c71e:	2010      	movs	r0, #16
 803c720:	f7ff ff92 	bl	803c648 <malloc>
 803c724:	4602      	mov	r2, r0
 803c726:	6268      	str	r0, [r5, #36]	; 0x24
 803c728:	b920      	cbnz	r0, 803c734 <_Bfree+0x20>
 803c72a:	4b09      	ldr	r3, [pc, #36]	; (803c750 <_Bfree+0x3c>)
 803c72c:	4809      	ldr	r0, [pc, #36]	; (803c754 <_Bfree+0x40>)
 803c72e:	218a      	movs	r1, #138	; 0x8a
 803c730:	f000 fe00 	bl	803d334 <__assert_func>
 803c734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 803c738:	6006      	str	r6, [r0, #0]
 803c73a:	60c6      	str	r6, [r0, #12]
 803c73c:	b13c      	cbz	r4, 803c74e <_Bfree+0x3a>
 803c73e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 803c740:	6862      	ldr	r2, [r4, #4]
 803c742:	68db      	ldr	r3, [r3, #12]
 803c744:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 803c748:	6021      	str	r1, [r4, #0]
 803c74a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 803c74e:	bd70      	pop	{r4, r5, r6, pc}
 803c750:	0803ea9e 	.word	0x0803ea9e
 803c754:	0803eba4 	.word	0x0803eba4

0803c758 <__multadd>:
 803c758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 803c75c:	690e      	ldr	r6, [r1, #16]
 803c75e:	4607      	mov	r7, r0
 803c760:	4698      	mov	r8, r3
 803c762:	460c      	mov	r4, r1
 803c764:	f101 0014 	add.w	r0, r1, #20
 803c768:	2300      	movs	r3, #0
 803c76a:	6805      	ldr	r5, [r0, #0]
 803c76c:	b2a9      	uxth	r1, r5
 803c76e:	fb02 8101 	mla	r1, r2, r1, r8
 803c772:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 803c776:	0c2d      	lsrs	r5, r5, #16
 803c778:	fb02 c505 	mla	r5, r2, r5, ip
 803c77c:	b289      	uxth	r1, r1
 803c77e:	3301      	adds	r3, #1
 803c780:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 803c784:	429e      	cmp	r6, r3
 803c786:	f840 1b04 	str.w	r1, [r0], #4
 803c78a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 803c78e:	dcec      	bgt.n	803c76a <__multadd+0x12>
 803c790:	f1b8 0f00 	cmp.w	r8, #0
 803c794:	d022      	beq.n	803c7dc <__multadd+0x84>
 803c796:	68a3      	ldr	r3, [r4, #8]
 803c798:	42b3      	cmp	r3, r6
 803c79a:	dc19      	bgt.n	803c7d0 <__multadd+0x78>
 803c79c:	6861      	ldr	r1, [r4, #4]
 803c79e:	4638      	mov	r0, r7
 803c7a0:	3101      	adds	r1, #1
 803c7a2:	f7ff ff77 	bl	803c694 <_Balloc>
 803c7a6:	4605      	mov	r5, r0
 803c7a8:	b928      	cbnz	r0, 803c7b6 <__multadd+0x5e>
 803c7aa:	4602      	mov	r2, r0
 803c7ac:	4b0d      	ldr	r3, [pc, #52]	; (803c7e4 <__multadd+0x8c>)
 803c7ae:	480e      	ldr	r0, [pc, #56]	; (803c7e8 <__multadd+0x90>)
 803c7b0:	21b5      	movs	r1, #181	; 0xb5
 803c7b2:	f000 fdbf 	bl	803d334 <__assert_func>
 803c7b6:	6922      	ldr	r2, [r4, #16]
 803c7b8:	3202      	adds	r2, #2
 803c7ba:	f104 010c 	add.w	r1, r4, #12
 803c7be:	0092      	lsls	r2, r2, #2
 803c7c0:	300c      	adds	r0, #12
 803c7c2:	f7fc fe87 	bl	80394d4 <memcpy>
 803c7c6:	4621      	mov	r1, r4
 803c7c8:	4638      	mov	r0, r7
 803c7ca:	f7ff ffa3 	bl	803c714 <_Bfree>
 803c7ce:	462c      	mov	r4, r5
 803c7d0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 803c7d4:	3601      	adds	r6, #1
 803c7d6:	f8c3 8014 	str.w	r8, [r3, #20]
 803c7da:	6126      	str	r6, [r4, #16]
 803c7dc:	4620      	mov	r0, r4
 803c7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 803c7e2:	bf00      	nop
 803c7e4:	0803eb14 	.word	0x0803eb14
 803c7e8:	0803eba4 	.word	0x0803eba4

0803c7ec <__s2b>:
 803c7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803c7f0:	460c      	mov	r4, r1
 803c7f2:	4615      	mov	r5, r2
 803c7f4:	461f      	mov	r7, r3
 803c7f6:	2209      	movs	r2, #9
 803c7f8:	3308      	adds	r3, #8
 803c7fa:	4606      	mov	r6, r0
 803c7fc:	fb93 f3f2 	sdiv	r3, r3, r2
 803c800:	2100      	movs	r1, #0
 803c802:	2201      	movs	r2, #1
 803c804:	429a      	cmp	r2, r3
 803c806:	db09      	blt.n	803c81c <__s2b+0x30>
 803c808:	4630      	mov	r0, r6
 803c80a:	f7ff ff43 	bl	803c694 <_Balloc>
 803c80e:	b940      	cbnz	r0, 803c822 <__s2b+0x36>
 803c810:	4602      	mov	r2, r0
 803c812:	4b19      	ldr	r3, [pc, #100]	; (803c878 <__s2b+0x8c>)
 803c814:	4819      	ldr	r0, [pc, #100]	; (803c87c <__s2b+0x90>)
 803c816:	21ce      	movs	r1, #206	; 0xce
 803c818:	f000 fd8c 	bl	803d334 <__assert_func>
 803c81c:	0052      	lsls	r2, r2, #1
 803c81e:	3101      	adds	r1, #1
 803c820:	e7f0      	b.n	803c804 <__s2b+0x18>
 803c822:	9b08      	ldr	r3, [sp, #32]
 803c824:	6143      	str	r3, [r0, #20]
 803c826:	2d09      	cmp	r5, #9
 803c828:	f04f 0301 	mov.w	r3, #1
 803c82c:	6103      	str	r3, [r0, #16]
 803c82e:	dd16      	ble.n	803c85e <__s2b+0x72>
 803c830:	f104 0909 	add.w	r9, r4, #9
 803c834:	46c8      	mov	r8, r9
 803c836:	442c      	add	r4, r5
 803c838:	f818 3b01 	ldrb.w	r3, [r8], #1
 803c83c:	4601      	mov	r1, r0
 803c83e:	3b30      	subs	r3, #48	; 0x30
 803c840:	220a      	movs	r2, #10
 803c842:	4630      	mov	r0, r6
 803c844:	f7ff ff88 	bl	803c758 <__multadd>
 803c848:	45a0      	cmp	r8, r4
 803c84a:	d1f5      	bne.n	803c838 <__s2b+0x4c>
 803c84c:	f1a5 0408 	sub.w	r4, r5, #8
 803c850:	444c      	add	r4, r9
 803c852:	1b2d      	subs	r5, r5, r4
 803c854:	1963      	adds	r3, r4, r5
 803c856:	42bb      	cmp	r3, r7
 803c858:	db04      	blt.n	803c864 <__s2b+0x78>
 803c85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803c85e:	340a      	adds	r4, #10
 803c860:	2509      	movs	r5, #9
 803c862:	e7f6      	b.n	803c852 <__s2b+0x66>
 803c864:	f814 3b01 	ldrb.w	r3, [r4], #1
 803c868:	4601      	mov	r1, r0
 803c86a:	3b30      	subs	r3, #48	; 0x30
 803c86c:	220a      	movs	r2, #10
 803c86e:	4630      	mov	r0, r6
 803c870:	f7ff ff72 	bl	803c758 <__multadd>
 803c874:	e7ee      	b.n	803c854 <__s2b+0x68>
 803c876:	bf00      	nop
 803c878:	0803eb14 	.word	0x0803eb14
 803c87c:	0803eba4 	.word	0x0803eba4

0803c880 <__hi0bits>:
 803c880:	0c03      	lsrs	r3, r0, #16
 803c882:	041b      	lsls	r3, r3, #16
 803c884:	b9d3      	cbnz	r3, 803c8bc <__hi0bits+0x3c>
 803c886:	0400      	lsls	r0, r0, #16
 803c888:	2310      	movs	r3, #16
 803c88a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 803c88e:	bf04      	itt	eq
 803c890:	0200      	lsleq	r0, r0, #8
 803c892:	3308      	addeq	r3, #8
 803c894:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 803c898:	bf04      	itt	eq
 803c89a:	0100      	lsleq	r0, r0, #4
 803c89c:	3304      	addeq	r3, #4
 803c89e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 803c8a2:	bf04      	itt	eq
 803c8a4:	0080      	lsleq	r0, r0, #2
 803c8a6:	3302      	addeq	r3, #2
 803c8a8:	2800      	cmp	r0, #0
 803c8aa:	db05      	blt.n	803c8b8 <__hi0bits+0x38>
 803c8ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 803c8b0:	f103 0301 	add.w	r3, r3, #1
 803c8b4:	bf08      	it	eq
 803c8b6:	2320      	moveq	r3, #32
 803c8b8:	4618      	mov	r0, r3
 803c8ba:	4770      	bx	lr
 803c8bc:	2300      	movs	r3, #0
 803c8be:	e7e4      	b.n	803c88a <__hi0bits+0xa>

0803c8c0 <__lo0bits>:
 803c8c0:	6803      	ldr	r3, [r0, #0]
 803c8c2:	f013 0207 	ands.w	r2, r3, #7
 803c8c6:	4601      	mov	r1, r0
 803c8c8:	d00b      	beq.n	803c8e2 <__lo0bits+0x22>
 803c8ca:	07da      	lsls	r2, r3, #31
 803c8cc:	d424      	bmi.n	803c918 <__lo0bits+0x58>
 803c8ce:	0798      	lsls	r0, r3, #30
 803c8d0:	bf49      	itett	mi
 803c8d2:	085b      	lsrmi	r3, r3, #1
 803c8d4:	089b      	lsrpl	r3, r3, #2
 803c8d6:	2001      	movmi	r0, #1
 803c8d8:	600b      	strmi	r3, [r1, #0]
 803c8da:	bf5c      	itt	pl
 803c8dc:	600b      	strpl	r3, [r1, #0]
 803c8de:	2002      	movpl	r0, #2
 803c8e0:	4770      	bx	lr
 803c8e2:	b298      	uxth	r0, r3
 803c8e4:	b9b0      	cbnz	r0, 803c914 <__lo0bits+0x54>
 803c8e6:	0c1b      	lsrs	r3, r3, #16
 803c8e8:	2010      	movs	r0, #16
 803c8ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 803c8ee:	bf04      	itt	eq
 803c8f0:	0a1b      	lsreq	r3, r3, #8
 803c8f2:	3008      	addeq	r0, #8
 803c8f4:	071a      	lsls	r2, r3, #28
 803c8f6:	bf04      	itt	eq
 803c8f8:	091b      	lsreq	r3, r3, #4
 803c8fa:	3004      	addeq	r0, #4
 803c8fc:	079a      	lsls	r2, r3, #30
 803c8fe:	bf04      	itt	eq
 803c900:	089b      	lsreq	r3, r3, #2
 803c902:	3002      	addeq	r0, #2
 803c904:	07da      	lsls	r2, r3, #31
 803c906:	d403      	bmi.n	803c910 <__lo0bits+0x50>
 803c908:	085b      	lsrs	r3, r3, #1
 803c90a:	f100 0001 	add.w	r0, r0, #1
 803c90e:	d005      	beq.n	803c91c <__lo0bits+0x5c>
 803c910:	600b      	str	r3, [r1, #0]
 803c912:	4770      	bx	lr
 803c914:	4610      	mov	r0, r2
 803c916:	e7e8      	b.n	803c8ea <__lo0bits+0x2a>
 803c918:	2000      	movs	r0, #0
 803c91a:	4770      	bx	lr
 803c91c:	2020      	movs	r0, #32
 803c91e:	4770      	bx	lr

0803c920 <__i2b>:
 803c920:	b510      	push	{r4, lr}
 803c922:	460c      	mov	r4, r1
 803c924:	2101      	movs	r1, #1
 803c926:	f7ff feb5 	bl	803c694 <_Balloc>
 803c92a:	4602      	mov	r2, r0
 803c92c:	b928      	cbnz	r0, 803c93a <__i2b+0x1a>
 803c92e:	4b05      	ldr	r3, [pc, #20]	; (803c944 <__i2b+0x24>)
 803c930:	4805      	ldr	r0, [pc, #20]	; (803c948 <__i2b+0x28>)
 803c932:	f44f 71a0 	mov.w	r1, #320	; 0x140
 803c936:	f000 fcfd 	bl	803d334 <__assert_func>
 803c93a:	2301      	movs	r3, #1
 803c93c:	6144      	str	r4, [r0, #20]
 803c93e:	6103      	str	r3, [r0, #16]
 803c940:	bd10      	pop	{r4, pc}
 803c942:	bf00      	nop
 803c944:	0803eb14 	.word	0x0803eb14
 803c948:	0803eba4 	.word	0x0803eba4

0803c94c <__multiply>:
 803c94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803c950:	4614      	mov	r4, r2
 803c952:	690a      	ldr	r2, [r1, #16]
 803c954:	6923      	ldr	r3, [r4, #16]
 803c956:	429a      	cmp	r2, r3
 803c958:	bfb8      	it	lt
 803c95a:	460b      	movlt	r3, r1
 803c95c:	460d      	mov	r5, r1
 803c95e:	bfbc      	itt	lt
 803c960:	4625      	movlt	r5, r4
 803c962:	461c      	movlt	r4, r3
 803c964:	f8d5 a010 	ldr.w	sl, [r5, #16]
 803c968:	f8d4 9010 	ldr.w	r9, [r4, #16]
 803c96c:	68ab      	ldr	r3, [r5, #8]
 803c96e:	6869      	ldr	r1, [r5, #4]
 803c970:	eb0a 0709 	add.w	r7, sl, r9
 803c974:	42bb      	cmp	r3, r7
 803c976:	b085      	sub	sp, #20
 803c978:	bfb8      	it	lt
 803c97a:	3101      	addlt	r1, #1
 803c97c:	f7ff fe8a 	bl	803c694 <_Balloc>
 803c980:	b930      	cbnz	r0, 803c990 <__multiply+0x44>
 803c982:	4602      	mov	r2, r0
 803c984:	4b42      	ldr	r3, [pc, #264]	; (803ca90 <__multiply+0x144>)
 803c986:	4843      	ldr	r0, [pc, #268]	; (803ca94 <__multiply+0x148>)
 803c988:	f240 115d 	movw	r1, #349	; 0x15d
 803c98c:	f000 fcd2 	bl	803d334 <__assert_func>
 803c990:	f100 0614 	add.w	r6, r0, #20
 803c994:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 803c998:	4633      	mov	r3, r6
 803c99a:	2200      	movs	r2, #0
 803c99c:	4543      	cmp	r3, r8
 803c99e:	d31e      	bcc.n	803c9de <__multiply+0x92>
 803c9a0:	f105 0c14 	add.w	ip, r5, #20
 803c9a4:	f104 0314 	add.w	r3, r4, #20
 803c9a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 803c9ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 803c9b0:	9202      	str	r2, [sp, #8]
 803c9b2:	ebac 0205 	sub.w	r2, ip, r5
 803c9b6:	3a15      	subs	r2, #21
 803c9b8:	f022 0203 	bic.w	r2, r2, #3
 803c9bc:	3204      	adds	r2, #4
 803c9be:	f105 0115 	add.w	r1, r5, #21
 803c9c2:	458c      	cmp	ip, r1
 803c9c4:	bf38      	it	cc
 803c9c6:	2204      	movcc	r2, #4
 803c9c8:	9201      	str	r2, [sp, #4]
 803c9ca:	9a02      	ldr	r2, [sp, #8]
 803c9cc:	9303      	str	r3, [sp, #12]
 803c9ce:	429a      	cmp	r2, r3
 803c9d0:	d808      	bhi.n	803c9e4 <__multiply+0x98>
 803c9d2:	2f00      	cmp	r7, #0
 803c9d4:	dc55      	bgt.n	803ca82 <__multiply+0x136>
 803c9d6:	6107      	str	r7, [r0, #16]
 803c9d8:	b005      	add	sp, #20
 803c9da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803c9de:	f843 2b04 	str.w	r2, [r3], #4
 803c9e2:	e7db      	b.n	803c99c <__multiply+0x50>
 803c9e4:	f8b3 a000 	ldrh.w	sl, [r3]
 803c9e8:	f1ba 0f00 	cmp.w	sl, #0
 803c9ec:	d020      	beq.n	803ca30 <__multiply+0xe4>
 803c9ee:	f105 0e14 	add.w	lr, r5, #20
 803c9f2:	46b1      	mov	r9, r6
 803c9f4:	2200      	movs	r2, #0
 803c9f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 803c9fa:	f8d9 b000 	ldr.w	fp, [r9]
 803c9fe:	b2a1      	uxth	r1, r4
 803ca00:	fa1f fb8b 	uxth.w	fp, fp
 803ca04:	fb0a b101 	mla	r1, sl, r1, fp
 803ca08:	4411      	add	r1, r2
 803ca0a:	f8d9 2000 	ldr.w	r2, [r9]
 803ca0e:	0c24      	lsrs	r4, r4, #16
 803ca10:	0c12      	lsrs	r2, r2, #16
 803ca12:	fb0a 2404 	mla	r4, sl, r4, r2
 803ca16:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 803ca1a:	b289      	uxth	r1, r1
 803ca1c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 803ca20:	45f4      	cmp	ip, lr
 803ca22:	f849 1b04 	str.w	r1, [r9], #4
 803ca26:	ea4f 4214 	mov.w	r2, r4, lsr #16
 803ca2a:	d8e4      	bhi.n	803c9f6 <__multiply+0xaa>
 803ca2c:	9901      	ldr	r1, [sp, #4]
 803ca2e:	5072      	str	r2, [r6, r1]
 803ca30:	9a03      	ldr	r2, [sp, #12]
 803ca32:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 803ca36:	3304      	adds	r3, #4
 803ca38:	f1b9 0f00 	cmp.w	r9, #0
 803ca3c:	d01f      	beq.n	803ca7e <__multiply+0x132>
 803ca3e:	6834      	ldr	r4, [r6, #0]
 803ca40:	f105 0114 	add.w	r1, r5, #20
 803ca44:	46b6      	mov	lr, r6
 803ca46:	f04f 0a00 	mov.w	sl, #0
 803ca4a:	880a      	ldrh	r2, [r1, #0]
 803ca4c:	f8be b002 	ldrh.w	fp, [lr, #2]
 803ca50:	fb09 b202 	mla	r2, r9, r2, fp
 803ca54:	4492      	add	sl, r2
 803ca56:	b2a4      	uxth	r4, r4
 803ca58:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 803ca5c:	f84e 4b04 	str.w	r4, [lr], #4
 803ca60:	f851 4b04 	ldr.w	r4, [r1], #4
 803ca64:	f8be 2000 	ldrh.w	r2, [lr]
 803ca68:	0c24      	lsrs	r4, r4, #16
 803ca6a:	fb09 2404 	mla	r4, r9, r4, r2
 803ca6e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 803ca72:	458c      	cmp	ip, r1
 803ca74:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 803ca78:	d8e7      	bhi.n	803ca4a <__multiply+0xfe>
 803ca7a:	9a01      	ldr	r2, [sp, #4]
 803ca7c:	50b4      	str	r4, [r6, r2]
 803ca7e:	3604      	adds	r6, #4
 803ca80:	e7a3      	b.n	803c9ca <__multiply+0x7e>
 803ca82:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 803ca86:	2b00      	cmp	r3, #0
 803ca88:	d1a5      	bne.n	803c9d6 <__multiply+0x8a>
 803ca8a:	3f01      	subs	r7, #1
 803ca8c:	e7a1      	b.n	803c9d2 <__multiply+0x86>
 803ca8e:	bf00      	nop
 803ca90:	0803eb14 	.word	0x0803eb14
 803ca94:	0803eba4 	.word	0x0803eba4

0803ca98 <__pow5mult>:
 803ca98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 803ca9c:	4615      	mov	r5, r2
 803ca9e:	f012 0203 	ands.w	r2, r2, #3
 803caa2:	4606      	mov	r6, r0
 803caa4:	460f      	mov	r7, r1
 803caa6:	d007      	beq.n	803cab8 <__pow5mult+0x20>
 803caa8:	4c25      	ldr	r4, [pc, #148]	; (803cb40 <__pow5mult+0xa8>)
 803caaa:	3a01      	subs	r2, #1
 803caac:	2300      	movs	r3, #0
 803caae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 803cab2:	f7ff fe51 	bl	803c758 <__multadd>
 803cab6:	4607      	mov	r7, r0
 803cab8:	10ad      	asrs	r5, r5, #2
 803caba:	d03d      	beq.n	803cb38 <__pow5mult+0xa0>
 803cabc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 803cabe:	b97c      	cbnz	r4, 803cae0 <__pow5mult+0x48>
 803cac0:	2010      	movs	r0, #16
 803cac2:	f7ff fdc1 	bl	803c648 <malloc>
 803cac6:	4602      	mov	r2, r0
 803cac8:	6270      	str	r0, [r6, #36]	; 0x24
 803caca:	b928      	cbnz	r0, 803cad8 <__pow5mult+0x40>
 803cacc:	4b1d      	ldr	r3, [pc, #116]	; (803cb44 <__pow5mult+0xac>)
 803cace:	481e      	ldr	r0, [pc, #120]	; (803cb48 <__pow5mult+0xb0>)
 803cad0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 803cad4:	f000 fc2e 	bl	803d334 <__assert_func>
 803cad8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 803cadc:	6004      	str	r4, [r0, #0]
 803cade:	60c4      	str	r4, [r0, #12]
 803cae0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 803cae4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 803cae8:	b94c      	cbnz	r4, 803cafe <__pow5mult+0x66>
 803caea:	f240 2171 	movw	r1, #625	; 0x271
 803caee:	4630      	mov	r0, r6
 803caf0:	f7ff ff16 	bl	803c920 <__i2b>
 803caf4:	2300      	movs	r3, #0
 803caf6:	f8c8 0008 	str.w	r0, [r8, #8]
 803cafa:	4604      	mov	r4, r0
 803cafc:	6003      	str	r3, [r0, #0]
 803cafe:	f04f 0900 	mov.w	r9, #0
 803cb02:	07eb      	lsls	r3, r5, #31
 803cb04:	d50a      	bpl.n	803cb1c <__pow5mult+0x84>
 803cb06:	4639      	mov	r1, r7
 803cb08:	4622      	mov	r2, r4
 803cb0a:	4630      	mov	r0, r6
 803cb0c:	f7ff ff1e 	bl	803c94c <__multiply>
 803cb10:	4639      	mov	r1, r7
 803cb12:	4680      	mov	r8, r0
 803cb14:	4630      	mov	r0, r6
 803cb16:	f7ff fdfd 	bl	803c714 <_Bfree>
 803cb1a:	4647      	mov	r7, r8
 803cb1c:	106d      	asrs	r5, r5, #1
 803cb1e:	d00b      	beq.n	803cb38 <__pow5mult+0xa0>
 803cb20:	6820      	ldr	r0, [r4, #0]
 803cb22:	b938      	cbnz	r0, 803cb34 <__pow5mult+0x9c>
 803cb24:	4622      	mov	r2, r4
 803cb26:	4621      	mov	r1, r4
 803cb28:	4630      	mov	r0, r6
 803cb2a:	f7ff ff0f 	bl	803c94c <__multiply>
 803cb2e:	6020      	str	r0, [r4, #0]
 803cb30:	f8c0 9000 	str.w	r9, [r0]
 803cb34:	4604      	mov	r4, r0
 803cb36:	e7e4      	b.n	803cb02 <__pow5mult+0x6a>
 803cb38:	4638      	mov	r0, r7
 803cb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803cb3e:	bf00      	nop
 803cb40:	0803ecf8 	.word	0x0803ecf8
 803cb44:	0803ea9e 	.word	0x0803ea9e
 803cb48:	0803eba4 	.word	0x0803eba4

0803cb4c <__lshift>:
 803cb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803cb50:	460c      	mov	r4, r1
 803cb52:	6849      	ldr	r1, [r1, #4]
 803cb54:	6923      	ldr	r3, [r4, #16]
 803cb56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 803cb5a:	68a3      	ldr	r3, [r4, #8]
 803cb5c:	4607      	mov	r7, r0
 803cb5e:	4691      	mov	r9, r2
 803cb60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 803cb64:	f108 0601 	add.w	r6, r8, #1
 803cb68:	42b3      	cmp	r3, r6
 803cb6a:	db0b      	blt.n	803cb84 <__lshift+0x38>
 803cb6c:	4638      	mov	r0, r7
 803cb6e:	f7ff fd91 	bl	803c694 <_Balloc>
 803cb72:	4605      	mov	r5, r0
 803cb74:	b948      	cbnz	r0, 803cb8a <__lshift+0x3e>
 803cb76:	4602      	mov	r2, r0
 803cb78:	4b28      	ldr	r3, [pc, #160]	; (803cc1c <__lshift+0xd0>)
 803cb7a:	4829      	ldr	r0, [pc, #164]	; (803cc20 <__lshift+0xd4>)
 803cb7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 803cb80:	f000 fbd8 	bl	803d334 <__assert_func>
 803cb84:	3101      	adds	r1, #1
 803cb86:	005b      	lsls	r3, r3, #1
 803cb88:	e7ee      	b.n	803cb68 <__lshift+0x1c>
 803cb8a:	2300      	movs	r3, #0
 803cb8c:	f100 0114 	add.w	r1, r0, #20
 803cb90:	f100 0210 	add.w	r2, r0, #16
 803cb94:	4618      	mov	r0, r3
 803cb96:	4553      	cmp	r3, sl
 803cb98:	db33      	blt.n	803cc02 <__lshift+0xb6>
 803cb9a:	6920      	ldr	r0, [r4, #16]
 803cb9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 803cba0:	f104 0314 	add.w	r3, r4, #20
 803cba4:	f019 091f 	ands.w	r9, r9, #31
 803cba8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 803cbac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 803cbb0:	d02b      	beq.n	803cc0a <__lshift+0xbe>
 803cbb2:	f1c9 0e20 	rsb	lr, r9, #32
 803cbb6:	468a      	mov	sl, r1
 803cbb8:	2200      	movs	r2, #0
 803cbba:	6818      	ldr	r0, [r3, #0]
 803cbbc:	fa00 f009 	lsl.w	r0, r0, r9
 803cbc0:	4302      	orrs	r2, r0
 803cbc2:	f84a 2b04 	str.w	r2, [sl], #4
 803cbc6:	f853 2b04 	ldr.w	r2, [r3], #4
 803cbca:	459c      	cmp	ip, r3
 803cbcc:	fa22 f20e 	lsr.w	r2, r2, lr
 803cbd0:	d8f3      	bhi.n	803cbba <__lshift+0x6e>
 803cbd2:	ebac 0304 	sub.w	r3, ip, r4
 803cbd6:	3b15      	subs	r3, #21
 803cbd8:	f023 0303 	bic.w	r3, r3, #3
 803cbdc:	3304      	adds	r3, #4
 803cbde:	f104 0015 	add.w	r0, r4, #21
 803cbe2:	4584      	cmp	ip, r0
 803cbe4:	bf38      	it	cc
 803cbe6:	2304      	movcc	r3, #4
 803cbe8:	50ca      	str	r2, [r1, r3]
 803cbea:	b10a      	cbz	r2, 803cbf0 <__lshift+0xa4>
 803cbec:	f108 0602 	add.w	r6, r8, #2
 803cbf0:	3e01      	subs	r6, #1
 803cbf2:	4638      	mov	r0, r7
 803cbf4:	612e      	str	r6, [r5, #16]
 803cbf6:	4621      	mov	r1, r4
 803cbf8:	f7ff fd8c 	bl	803c714 <_Bfree>
 803cbfc:	4628      	mov	r0, r5
 803cbfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803cc02:	f842 0f04 	str.w	r0, [r2, #4]!
 803cc06:	3301      	adds	r3, #1
 803cc08:	e7c5      	b.n	803cb96 <__lshift+0x4a>
 803cc0a:	3904      	subs	r1, #4
 803cc0c:	f853 2b04 	ldr.w	r2, [r3], #4
 803cc10:	f841 2f04 	str.w	r2, [r1, #4]!
 803cc14:	459c      	cmp	ip, r3
 803cc16:	d8f9      	bhi.n	803cc0c <__lshift+0xc0>
 803cc18:	e7ea      	b.n	803cbf0 <__lshift+0xa4>
 803cc1a:	bf00      	nop
 803cc1c:	0803eb14 	.word	0x0803eb14
 803cc20:	0803eba4 	.word	0x0803eba4

0803cc24 <__mcmp>:
 803cc24:	b530      	push	{r4, r5, lr}
 803cc26:	6902      	ldr	r2, [r0, #16]
 803cc28:	690c      	ldr	r4, [r1, #16]
 803cc2a:	1b12      	subs	r2, r2, r4
 803cc2c:	d10e      	bne.n	803cc4c <__mcmp+0x28>
 803cc2e:	f100 0314 	add.w	r3, r0, #20
 803cc32:	3114      	adds	r1, #20
 803cc34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 803cc38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 803cc3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 803cc40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 803cc44:	42a5      	cmp	r5, r4
 803cc46:	d003      	beq.n	803cc50 <__mcmp+0x2c>
 803cc48:	d305      	bcc.n	803cc56 <__mcmp+0x32>
 803cc4a:	2201      	movs	r2, #1
 803cc4c:	4610      	mov	r0, r2
 803cc4e:	bd30      	pop	{r4, r5, pc}
 803cc50:	4283      	cmp	r3, r0
 803cc52:	d3f3      	bcc.n	803cc3c <__mcmp+0x18>
 803cc54:	e7fa      	b.n	803cc4c <__mcmp+0x28>
 803cc56:	f04f 32ff 	mov.w	r2, #4294967295
 803cc5a:	e7f7      	b.n	803cc4c <__mcmp+0x28>

0803cc5c <__mdiff>:
 803cc5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803cc60:	460c      	mov	r4, r1
 803cc62:	4606      	mov	r6, r0
 803cc64:	4611      	mov	r1, r2
 803cc66:	4620      	mov	r0, r4
 803cc68:	4617      	mov	r7, r2
 803cc6a:	f7ff ffdb 	bl	803cc24 <__mcmp>
 803cc6e:	1e05      	subs	r5, r0, #0
 803cc70:	d110      	bne.n	803cc94 <__mdiff+0x38>
 803cc72:	4629      	mov	r1, r5
 803cc74:	4630      	mov	r0, r6
 803cc76:	f7ff fd0d 	bl	803c694 <_Balloc>
 803cc7a:	b930      	cbnz	r0, 803cc8a <__mdiff+0x2e>
 803cc7c:	4b39      	ldr	r3, [pc, #228]	; (803cd64 <__mdiff+0x108>)
 803cc7e:	4602      	mov	r2, r0
 803cc80:	f240 2132 	movw	r1, #562	; 0x232
 803cc84:	4838      	ldr	r0, [pc, #224]	; (803cd68 <__mdiff+0x10c>)
 803cc86:	f000 fb55 	bl	803d334 <__assert_func>
 803cc8a:	2301      	movs	r3, #1
 803cc8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 803cc90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803cc94:	bfa4      	itt	ge
 803cc96:	463b      	movge	r3, r7
 803cc98:	4627      	movge	r7, r4
 803cc9a:	4630      	mov	r0, r6
 803cc9c:	6879      	ldr	r1, [r7, #4]
 803cc9e:	bfa6      	itte	ge
 803cca0:	461c      	movge	r4, r3
 803cca2:	2500      	movge	r5, #0
 803cca4:	2501      	movlt	r5, #1
 803cca6:	f7ff fcf5 	bl	803c694 <_Balloc>
 803ccaa:	b920      	cbnz	r0, 803ccb6 <__mdiff+0x5a>
 803ccac:	4b2d      	ldr	r3, [pc, #180]	; (803cd64 <__mdiff+0x108>)
 803ccae:	4602      	mov	r2, r0
 803ccb0:	f44f 7110 	mov.w	r1, #576	; 0x240
 803ccb4:	e7e6      	b.n	803cc84 <__mdiff+0x28>
 803ccb6:	693e      	ldr	r6, [r7, #16]
 803ccb8:	60c5      	str	r5, [r0, #12]
 803ccba:	6925      	ldr	r5, [r4, #16]
 803ccbc:	f107 0114 	add.w	r1, r7, #20
 803ccc0:	f104 0914 	add.w	r9, r4, #20
 803ccc4:	f100 0e14 	add.w	lr, r0, #20
 803ccc8:	f107 0210 	add.w	r2, r7, #16
 803cccc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 803ccd0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 803ccd4:	46f2      	mov	sl, lr
 803ccd6:	2700      	movs	r7, #0
 803ccd8:	f859 3b04 	ldr.w	r3, [r9], #4
 803ccdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 803cce0:	fa1f f883 	uxth.w	r8, r3
 803cce4:	fa17 f78b 	uxtah	r7, r7, fp
 803cce8:	0c1b      	lsrs	r3, r3, #16
 803ccea:	eba7 0808 	sub.w	r8, r7, r8
 803ccee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 803ccf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 803ccf6:	fa1f f888 	uxth.w	r8, r8
 803ccfa:	141f      	asrs	r7, r3, #16
 803ccfc:	454d      	cmp	r5, r9
 803ccfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 803cd02:	f84a 3b04 	str.w	r3, [sl], #4
 803cd06:	d8e7      	bhi.n	803ccd8 <__mdiff+0x7c>
 803cd08:	1b2b      	subs	r3, r5, r4
 803cd0a:	3b15      	subs	r3, #21
 803cd0c:	f023 0303 	bic.w	r3, r3, #3
 803cd10:	3304      	adds	r3, #4
 803cd12:	3415      	adds	r4, #21
 803cd14:	42a5      	cmp	r5, r4
 803cd16:	bf38      	it	cc
 803cd18:	2304      	movcc	r3, #4
 803cd1a:	4419      	add	r1, r3
 803cd1c:	4473      	add	r3, lr
 803cd1e:	469e      	mov	lr, r3
 803cd20:	460d      	mov	r5, r1
 803cd22:	4565      	cmp	r5, ip
 803cd24:	d30e      	bcc.n	803cd44 <__mdiff+0xe8>
 803cd26:	f10c 0203 	add.w	r2, ip, #3
 803cd2a:	1a52      	subs	r2, r2, r1
 803cd2c:	f022 0203 	bic.w	r2, r2, #3
 803cd30:	3903      	subs	r1, #3
 803cd32:	458c      	cmp	ip, r1
 803cd34:	bf38      	it	cc
 803cd36:	2200      	movcc	r2, #0
 803cd38:	441a      	add	r2, r3
 803cd3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 803cd3e:	b17b      	cbz	r3, 803cd60 <__mdiff+0x104>
 803cd40:	6106      	str	r6, [r0, #16]
 803cd42:	e7a5      	b.n	803cc90 <__mdiff+0x34>
 803cd44:	f855 8b04 	ldr.w	r8, [r5], #4
 803cd48:	fa17 f488 	uxtah	r4, r7, r8
 803cd4c:	1422      	asrs	r2, r4, #16
 803cd4e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 803cd52:	b2a4      	uxth	r4, r4
 803cd54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 803cd58:	f84e 4b04 	str.w	r4, [lr], #4
 803cd5c:	1417      	asrs	r7, r2, #16
 803cd5e:	e7e0      	b.n	803cd22 <__mdiff+0xc6>
 803cd60:	3e01      	subs	r6, #1
 803cd62:	e7ea      	b.n	803cd3a <__mdiff+0xde>
 803cd64:	0803eb14 	.word	0x0803eb14
 803cd68:	0803eba4 	.word	0x0803eba4

0803cd6c <__ulp>:
 803cd6c:	b082      	sub	sp, #8
 803cd6e:	ed8d 0b00 	vstr	d0, [sp]
 803cd72:	9b01      	ldr	r3, [sp, #4]
 803cd74:	4912      	ldr	r1, [pc, #72]	; (803cdc0 <__ulp+0x54>)
 803cd76:	4019      	ands	r1, r3
 803cd78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 803cd7c:	2900      	cmp	r1, #0
 803cd7e:	dd05      	ble.n	803cd8c <__ulp+0x20>
 803cd80:	2200      	movs	r2, #0
 803cd82:	460b      	mov	r3, r1
 803cd84:	ec43 2b10 	vmov	d0, r2, r3
 803cd88:	b002      	add	sp, #8
 803cd8a:	4770      	bx	lr
 803cd8c:	4249      	negs	r1, r1
 803cd8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 803cd92:	ea4f 5021 	mov.w	r0, r1, asr #20
 803cd96:	f04f 0200 	mov.w	r2, #0
 803cd9a:	f04f 0300 	mov.w	r3, #0
 803cd9e:	da04      	bge.n	803cdaa <__ulp+0x3e>
 803cda0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 803cda4:	fa41 f300 	asr.w	r3, r1, r0
 803cda8:	e7ec      	b.n	803cd84 <__ulp+0x18>
 803cdaa:	f1a0 0114 	sub.w	r1, r0, #20
 803cdae:	291e      	cmp	r1, #30
 803cdb0:	bfda      	itte	le
 803cdb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 803cdb6:	fa20 f101 	lsrle.w	r1, r0, r1
 803cdba:	2101      	movgt	r1, #1
 803cdbc:	460a      	mov	r2, r1
 803cdbe:	e7e1      	b.n	803cd84 <__ulp+0x18>
 803cdc0:	7ff00000 	.word	0x7ff00000

0803cdc4 <__b2d>:
 803cdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803cdc6:	6905      	ldr	r5, [r0, #16]
 803cdc8:	f100 0714 	add.w	r7, r0, #20
 803cdcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 803cdd0:	1f2e      	subs	r6, r5, #4
 803cdd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 803cdd6:	4620      	mov	r0, r4
 803cdd8:	f7ff fd52 	bl	803c880 <__hi0bits>
 803cddc:	f1c0 0320 	rsb	r3, r0, #32
 803cde0:	280a      	cmp	r0, #10
 803cde2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 803ce60 <__b2d+0x9c>
 803cde6:	600b      	str	r3, [r1, #0]
 803cde8:	dc14      	bgt.n	803ce14 <__b2d+0x50>
 803cdea:	f1c0 0e0b 	rsb	lr, r0, #11
 803cdee:	fa24 f10e 	lsr.w	r1, r4, lr
 803cdf2:	42b7      	cmp	r7, r6
 803cdf4:	ea41 030c 	orr.w	r3, r1, ip
 803cdf8:	bf34      	ite	cc
 803cdfa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 803cdfe:	2100      	movcs	r1, #0
 803ce00:	3015      	adds	r0, #21
 803ce02:	fa04 f000 	lsl.w	r0, r4, r0
 803ce06:	fa21 f10e 	lsr.w	r1, r1, lr
 803ce0a:	ea40 0201 	orr.w	r2, r0, r1
 803ce0e:	ec43 2b10 	vmov	d0, r2, r3
 803ce12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803ce14:	42b7      	cmp	r7, r6
 803ce16:	bf3a      	itte	cc
 803ce18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 803ce1c:	f1a5 0608 	subcc.w	r6, r5, #8
 803ce20:	2100      	movcs	r1, #0
 803ce22:	380b      	subs	r0, #11
 803ce24:	d017      	beq.n	803ce56 <__b2d+0x92>
 803ce26:	f1c0 0c20 	rsb	ip, r0, #32
 803ce2a:	fa04 f500 	lsl.w	r5, r4, r0
 803ce2e:	42be      	cmp	r6, r7
 803ce30:	fa21 f40c 	lsr.w	r4, r1, ip
 803ce34:	ea45 0504 	orr.w	r5, r5, r4
 803ce38:	bf8c      	ite	hi
 803ce3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 803ce3e:	2400      	movls	r4, #0
 803ce40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 803ce44:	fa01 f000 	lsl.w	r0, r1, r0
 803ce48:	fa24 f40c 	lsr.w	r4, r4, ip
 803ce4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 803ce50:	ea40 0204 	orr.w	r2, r0, r4
 803ce54:	e7db      	b.n	803ce0e <__b2d+0x4a>
 803ce56:	ea44 030c 	orr.w	r3, r4, ip
 803ce5a:	460a      	mov	r2, r1
 803ce5c:	e7d7      	b.n	803ce0e <__b2d+0x4a>
 803ce5e:	bf00      	nop
 803ce60:	3ff00000 	.word	0x3ff00000

0803ce64 <__d2b>:
 803ce64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 803ce68:	4689      	mov	r9, r1
 803ce6a:	2101      	movs	r1, #1
 803ce6c:	ec57 6b10 	vmov	r6, r7, d0
 803ce70:	4690      	mov	r8, r2
 803ce72:	f7ff fc0f 	bl	803c694 <_Balloc>
 803ce76:	4604      	mov	r4, r0
 803ce78:	b930      	cbnz	r0, 803ce88 <__d2b+0x24>
 803ce7a:	4602      	mov	r2, r0
 803ce7c:	4b25      	ldr	r3, [pc, #148]	; (803cf14 <__d2b+0xb0>)
 803ce7e:	4826      	ldr	r0, [pc, #152]	; (803cf18 <__d2b+0xb4>)
 803ce80:	f240 310a 	movw	r1, #778	; 0x30a
 803ce84:	f000 fa56 	bl	803d334 <__assert_func>
 803ce88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 803ce8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 803ce90:	bb35      	cbnz	r5, 803cee0 <__d2b+0x7c>
 803ce92:	2e00      	cmp	r6, #0
 803ce94:	9301      	str	r3, [sp, #4]
 803ce96:	d028      	beq.n	803ceea <__d2b+0x86>
 803ce98:	4668      	mov	r0, sp
 803ce9a:	9600      	str	r6, [sp, #0]
 803ce9c:	f7ff fd10 	bl	803c8c0 <__lo0bits>
 803cea0:	9900      	ldr	r1, [sp, #0]
 803cea2:	b300      	cbz	r0, 803cee6 <__d2b+0x82>
 803cea4:	9a01      	ldr	r2, [sp, #4]
 803cea6:	f1c0 0320 	rsb	r3, r0, #32
 803ceaa:	fa02 f303 	lsl.w	r3, r2, r3
 803ceae:	430b      	orrs	r3, r1
 803ceb0:	40c2      	lsrs	r2, r0
 803ceb2:	6163      	str	r3, [r4, #20]
 803ceb4:	9201      	str	r2, [sp, #4]
 803ceb6:	9b01      	ldr	r3, [sp, #4]
 803ceb8:	61a3      	str	r3, [r4, #24]
 803ceba:	2b00      	cmp	r3, #0
 803cebc:	bf14      	ite	ne
 803cebe:	2202      	movne	r2, #2
 803cec0:	2201      	moveq	r2, #1
 803cec2:	6122      	str	r2, [r4, #16]
 803cec4:	b1d5      	cbz	r5, 803cefc <__d2b+0x98>
 803cec6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 803ceca:	4405      	add	r5, r0
 803cecc:	f8c9 5000 	str.w	r5, [r9]
 803ced0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 803ced4:	f8c8 0000 	str.w	r0, [r8]
 803ced8:	4620      	mov	r0, r4
 803ceda:	b003      	add	sp, #12
 803cedc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803cee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 803cee4:	e7d5      	b.n	803ce92 <__d2b+0x2e>
 803cee6:	6161      	str	r1, [r4, #20]
 803cee8:	e7e5      	b.n	803ceb6 <__d2b+0x52>
 803ceea:	a801      	add	r0, sp, #4
 803ceec:	f7ff fce8 	bl	803c8c0 <__lo0bits>
 803cef0:	9b01      	ldr	r3, [sp, #4]
 803cef2:	6163      	str	r3, [r4, #20]
 803cef4:	2201      	movs	r2, #1
 803cef6:	6122      	str	r2, [r4, #16]
 803cef8:	3020      	adds	r0, #32
 803cefa:	e7e3      	b.n	803cec4 <__d2b+0x60>
 803cefc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 803cf00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 803cf04:	f8c9 0000 	str.w	r0, [r9]
 803cf08:	6918      	ldr	r0, [r3, #16]
 803cf0a:	f7ff fcb9 	bl	803c880 <__hi0bits>
 803cf0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 803cf12:	e7df      	b.n	803ced4 <__d2b+0x70>
 803cf14:	0803eb14 	.word	0x0803eb14
 803cf18:	0803eba4 	.word	0x0803eba4

0803cf1c <__ratio>:
 803cf1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803cf20:	4688      	mov	r8, r1
 803cf22:	4669      	mov	r1, sp
 803cf24:	4681      	mov	r9, r0
 803cf26:	f7ff ff4d 	bl	803cdc4 <__b2d>
 803cf2a:	a901      	add	r1, sp, #4
 803cf2c:	4640      	mov	r0, r8
 803cf2e:	ec55 4b10 	vmov	r4, r5, d0
 803cf32:	f7ff ff47 	bl	803cdc4 <__b2d>
 803cf36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 803cf3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 803cf3e:	eba3 0c02 	sub.w	ip, r3, r2
 803cf42:	e9dd 3200 	ldrd	r3, r2, [sp]
 803cf46:	1a9b      	subs	r3, r3, r2
 803cf48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 803cf4c:	ec51 0b10 	vmov	r0, r1, d0
 803cf50:	2b00      	cmp	r3, #0
 803cf52:	bfd6      	itet	le
 803cf54:	460a      	movle	r2, r1
 803cf56:	462a      	movgt	r2, r5
 803cf58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 803cf5c:	468b      	mov	fp, r1
 803cf5e:	462f      	mov	r7, r5
 803cf60:	bfd4      	ite	le
 803cf62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 803cf66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 803cf6a:	4620      	mov	r0, r4
 803cf6c:	ee10 2a10 	vmov	r2, s0
 803cf70:	465b      	mov	r3, fp
 803cf72:	4639      	mov	r1, r7
 803cf74:	f7e3 fc6a 	bl	802084c <__aeabi_ddiv>
 803cf78:	ec41 0b10 	vmov	d0, r0, r1
 803cf7c:	b003      	add	sp, #12
 803cf7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0803cf82 <__copybits>:
 803cf82:	3901      	subs	r1, #1
 803cf84:	b570      	push	{r4, r5, r6, lr}
 803cf86:	1149      	asrs	r1, r1, #5
 803cf88:	6914      	ldr	r4, [r2, #16]
 803cf8a:	3101      	adds	r1, #1
 803cf8c:	f102 0314 	add.w	r3, r2, #20
 803cf90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 803cf94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 803cf98:	1f05      	subs	r5, r0, #4
 803cf9a:	42a3      	cmp	r3, r4
 803cf9c:	d30c      	bcc.n	803cfb8 <__copybits+0x36>
 803cf9e:	1aa3      	subs	r3, r4, r2
 803cfa0:	3b11      	subs	r3, #17
 803cfa2:	f023 0303 	bic.w	r3, r3, #3
 803cfa6:	3211      	adds	r2, #17
 803cfa8:	42a2      	cmp	r2, r4
 803cfaa:	bf88      	it	hi
 803cfac:	2300      	movhi	r3, #0
 803cfae:	4418      	add	r0, r3
 803cfb0:	2300      	movs	r3, #0
 803cfb2:	4288      	cmp	r0, r1
 803cfb4:	d305      	bcc.n	803cfc2 <__copybits+0x40>
 803cfb6:	bd70      	pop	{r4, r5, r6, pc}
 803cfb8:	f853 6b04 	ldr.w	r6, [r3], #4
 803cfbc:	f845 6f04 	str.w	r6, [r5, #4]!
 803cfc0:	e7eb      	b.n	803cf9a <__copybits+0x18>
 803cfc2:	f840 3b04 	str.w	r3, [r0], #4
 803cfc6:	e7f4      	b.n	803cfb2 <__copybits+0x30>

0803cfc8 <__any_on>:
 803cfc8:	f100 0214 	add.w	r2, r0, #20
 803cfcc:	6900      	ldr	r0, [r0, #16]
 803cfce:	114b      	asrs	r3, r1, #5
 803cfd0:	4298      	cmp	r0, r3
 803cfd2:	b510      	push	{r4, lr}
 803cfd4:	db11      	blt.n	803cffa <__any_on+0x32>
 803cfd6:	dd0a      	ble.n	803cfee <__any_on+0x26>
 803cfd8:	f011 011f 	ands.w	r1, r1, #31
 803cfdc:	d007      	beq.n	803cfee <__any_on+0x26>
 803cfde:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 803cfe2:	fa24 f001 	lsr.w	r0, r4, r1
 803cfe6:	fa00 f101 	lsl.w	r1, r0, r1
 803cfea:	428c      	cmp	r4, r1
 803cfec:	d10b      	bne.n	803d006 <__any_on+0x3e>
 803cfee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 803cff2:	4293      	cmp	r3, r2
 803cff4:	d803      	bhi.n	803cffe <__any_on+0x36>
 803cff6:	2000      	movs	r0, #0
 803cff8:	bd10      	pop	{r4, pc}
 803cffa:	4603      	mov	r3, r0
 803cffc:	e7f7      	b.n	803cfee <__any_on+0x26>
 803cffe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 803d002:	2900      	cmp	r1, #0
 803d004:	d0f5      	beq.n	803cff2 <__any_on+0x2a>
 803d006:	2001      	movs	r0, #1
 803d008:	e7f6      	b.n	803cff8 <__any_on+0x30>

0803d00a <_calloc_r>:
 803d00a:	b513      	push	{r0, r1, r4, lr}
 803d00c:	434a      	muls	r2, r1
 803d00e:	4611      	mov	r1, r2
 803d010:	9201      	str	r2, [sp, #4]
 803d012:	f7fc fac5 	bl	80395a0 <_malloc_r>
 803d016:	4604      	mov	r4, r0
 803d018:	b118      	cbz	r0, 803d022 <_calloc_r+0x18>
 803d01a:	9a01      	ldr	r2, [sp, #4]
 803d01c:	2100      	movs	r1, #0
 803d01e:	f7fc fa67 	bl	80394f0 <memset>
 803d022:	4620      	mov	r0, r4
 803d024:	b002      	add	sp, #8
 803d026:	bd10      	pop	{r4, pc}

0803d028 <__ssputs_r>:
 803d028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803d02c:	688e      	ldr	r6, [r1, #8]
 803d02e:	429e      	cmp	r6, r3
 803d030:	4682      	mov	sl, r0
 803d032:	460c      	mov	r4, r1
 803d034:	4690      	mov	r8, r2
 803d036:	461f      	mov	r7, r3
 803d038:	d838      	bhi.n	803d0ac <__ssputs_r+0x84>
 803d03a:	898a      	ldrh	r2, [r1, #12]
 803d03c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 803d040:	d032      	beq.n	803d0a8 <__ssputs_r+0x80>
 803d042:	6825      	ldr	r5, [r4, #0]
 803d044:	6909      	ldr	r1, [r1, #16]
 803d046:	eba5 0901 	sub.w	r9, r5, r1
 803d04a:	6965      	ldr	r5, [r4, #20]
 803d04c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 803d050:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 803d054:	3301      	adds	r3, #1
 803d056:	444b      	add	r3, r9
 803d058:	106d      	asrs	r5, r5, #1
 803d05a:	429d      	cmp	r5, r3
 803d05c:	bf38      	it	cc
 803d05e:	461d      	movcc	r5, r3
 803d060:	0553      	lsls	r3, r2, #21
 803d062:	d531      	bpl.n	803d0c8 <__ssputs_r+0xa0>
 803d064:	4629      	mov	r1, r5
 803d066:	f7fc fa9b 	bl	80395a0 <_malloc_r>
 803d06a:	4606      	mov	r6, r0
 803d06c:	b950      	cbnz	r0, 803d084 <__ssputs_r+0x5c>
 803d06e:	230c      	movs	r3, #12
 803d070:	f8ca 3000 	str.w	r3, [sl]
 803d074:	89a3      	ldrh	r3, [r4, #12]
 803d076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803d07a:	81a3      	strh	r3, [r4, #12]
 803d07c:	f04f 30ff 	mov.w	r0, #4294967295
 803d080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803d084:	6921      	ldr	r1, [r4, #16]
 803d086:	464a      	mov	r2, r9
 803d088:	f7fc fa24 	bl	80394d4 <memcpy>
 803d08c:	89a3      	ldrh	r3, [r4, #12]
 803d08e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 803d092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803d096:	81a3      	strh	r3, [r4, #12]
 803d098:	6126      	str	r6, [r4, #16]
 803d09a:	6165      	str	r5, [r4, #20]
 803d09c:	444e      	add	r6, r9
 803d09e:	eba5 0509 	sub.w	r5, r5, r9
 803d0a2:	6026      	str	r6, [r4, #0]
 803d0a4:	60a5      	str	r5, [r4, #8]
 803d0a6:	463e      	mov	r6, r7
 803d0a8:	42be      	cmp	r6, r7
 803d0aa:	d900      	bls.n	803d0ae <__ssputs_r+0x86>
 803d0ac:	463e      	mov	r6, r7
 803d0ae:	4632      	mov	r2, r6
 803d0b0:	6820      	ldr	r0, [r4, #0]
 803d0b2:	4641      	mov	r1, r8
 803d0b4:	f000 f96e 	bl	803d394 <memmove>
 803d0b8:	68a3      	ldr	r3, [r4, #8]
 803d0ba:	6822      	ldr	r2, [r4, #0]
 803d0bc:	1b9b      	subs	r3, r3, r6
 803d0be:	4432      	add	r2, r6
 803d0c0:	60a3      	str	r3, [r4, #8]
 803d0c2:	6022      	str	r2, [r4, #0]
 803d0c4:	2000      	movs	r0, #0
 803d0c6:	e7db      	b.n	803d080 <__ssputs_r+0x58>
 803d0c8:	462a      	mov	r2, r5
 803d0ca:	f000 f97d 	bl	803d3c8 <_realloc_r>
 803d0ce:	4606      	mov	r6, r0
 803d0d0:	2800      	cmp	r0, #0
 803d0d2:	d1e1      	bne.n	803d098 <__ssputs_r+0x70>
 803d0d4:	6921      	ldr	r1, [r4, #16]
 803d0d6:	4650      	mov	r0, sl
 803d0d8:	f7fc fa12 	bl	8039500 <_free_r>
 803d0dc:	e7c7      	b.n	803d06e <__ssputs_r+0x46>
	...

0803d0e0 <_svfiprintf_r>:
 803d0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d0e4:	4698      	mov	r8, r3
 803d0e6:	898b      	ldrh	r3, [r1, #12]
 803d0e8:	061b      	lsls	r3, r3, #24
 803d0ea:	b09d      	sub	sp, #116	; 0x74
 803d0ec:	4607      	mov	r7, r0
 803d0ee:	460d      	mov	r5, r1
 803d0f0:	4614      	mov	r4, r2
 803d0f2:	d50e      	bpl.n	803d112 <_svfiprintf_r+0x32>
 803d0f4:	690b      	ldr	r3, [r1, #16]
 803d0f6:	b963      	cbnz	r3, 803d112 <_svfiprintf_r+0x32>
 803d0f8:	2140      	movs	r1, #64	; 0x40
 803d0fa:	f7fc fa51 	bl	80395a0 <_malloc_r>
 803d0fe:	6028      	str	r0, [r5, #0]
 803d100:	6128      	str	r0, [r5, #16]
 803d102:	b920      	cbnz	r0, 803d10e <_svfiprintf_r+0x2e>
 803d104:	230c      	movs	r3, #12
 803d106:	603b      	str	r3, [r7, #0]
 803d108:	f04f 30ff 	mov.w	r0, #4294967295
 803d10c:	e0d1      	b.n	803d2b2 <_svfiprintf_r+0x1d2>
 803d10e:	2340      	movs	r3, #64	; 0x40
 803d110:	616b      	str	r3, [r5, #20]
 803d112:	2300      	movs	r3, #0
 803d114:	9309      	str	r3, [sp, #36]	; 0x24
 803d116:	2320      	movs	r3, #32
 803d118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803d11c:	f8cd 800c 	str.w	r8, [sp, #12]
 803d120:	2330      	movs	r3, #48	; 0x30
 803d122:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 803d2cc <_svfiprintf_r+0x1ec>
 803d126:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803d12a:	f04f 0901 	mov.w	r9, #1
 803d12e:	4623      	mov	r3, r4
 803d130:	469a      	mov	sl, r3
 803d132:	f813 2b01 	ldrb.w	r2, [r3], #1
 803d136:	b10a      	cbz	r2, 803d13c <_svfiprintf_r+0x5c>
 803d138:	2a25      	cmp	r2, #37	; 0x25
 803d13a:	d1f9      	bne.n	803d130 <_svfiprintf_r+0x50>
 803d13c:	ebba 0b04 	subs.w	fp, sl, r4
 803d140:	d00b      	beq.n	803d15a <_svfiprintf_r+0x7a>
 803d142:	465b      	mov	r3, fp
 803d144:	4622      	mov	r2, r4
 803d146:	4629      	mov	r1, r5
 803d148:	4638      	mov	r0, r7
 803d14a:	f7ff ff6d 	bl	803d028 <__ssputs_r>
 803d14e:	3001      	adds	r0, #1
 803d150:	f000 80aa 	beq.w	803d2a8 <_svfiprintf_r+0x1c8>
 803d154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803d156:	445a      	add	r2, fp
 803d158:	9209      	str	r2, [sp, #36]	; 0x24
 803d15a:	f89a 3000 	ldrb.w	r3, [sl]
 803d15e:	2b00      	cmp	r3, #0
 803d160:	f000 80a2 	beq.w	803d2a8 <_svfiprintf_r+0x1c8>
 803d164:	2300      	movs	r3, #0
 803d166:	f04f 32ff 	mov.w	r2, #4294967295
 803d16a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803d16e:	f10a 0a01 	add.w	sl, sl, #1
 803d172:	9304      	str	r3, [sp, #16]
 803d174:	9307      	str	r3, [sp, #28]
 803d176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803d17a:	931a      	str	r3, [sp, #104]	; 0x68
 803d17c:	4654      	mov	r4, sl
 803d17e:	2205      	movs	r2, #5
 803d180:	f814 1b01 	ldrb.w	r1, [r4], #1
 803d184:	4851      	ldr	r0, [pc, #324]	; (803d2cc <_svfiprintf_r+0x1ec>)
 803d186:	f7e3 f82b 	bl	80201e0 <memchr>
 803d18a:	9a04      	ldr	r2, [sp, #16]
 803d18c:	b9d8      	cbnz	r0, 803d1c6 <_svfiprintf_r+0xe6>
 803d18e:	06d0      	lsls	r0, r2, #27
 803d190:	bf44      	itt	mi
 803d192:	2320      	movmi	r3, #32
 803d194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803d198:	0711      	lsls	r1, r2, #28
 803d19a:	bf44      	itt	mi
 803d19c:	232b      	movmi	r3, #43	; 0x2b
 803d19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803d1a2:	f89a 3000 	ldrb.w	r3, [sl]
 803d1a6:	2b2a      	cmp	r3, #42	; 0x2a
 803d1a8:	d015      	beq.n	803d1d6 <_svfiprintf_r+0xf6>
 803d1aa:	9a07      	ldr	r2, [sp, #28]
 803d1ac:	4654      	mov	r4, sl
 803d1ae:	2000      	movs	r0, #0
 803d1b0:	f04f 0c0a 	mov.w	ip, #10
 803d1b4:	4621      	mov	r1, r4
 803d1b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 803d1ba:	3b30      	subs	r3, #48	; 0x30
 803d1bc:	2b09      	cmp	r3, #9
 803d1be:	d94e      	bls.n	803d25e <_svfiprintf_r+0x17e>
 803d1c0:	b1b0      	cbz	r0, 803d1f0 <_svfiprintf_r+0x110>
 803d1c2:	9207      	str	r2, [sp, #28]
 803d1c4:	e014      	b.n	803d1f0 <_svfiprintf_r+0x110>
 803d1c6:	eba0 0308 	sub.w	r3, r0, r8
 803d1ca:	fa09 f303 	lsl.w	r3, r9, r3
 803d1ce:	4313      	orrs	r3, r2
 803d1d0:	9304      	str	r3, [sp, #16]
 803d1d2:	46a2      	mov	sl, r4
 803d1d4:	e7d2      	b.n	803d17c <_svfiprintf_r+0x9c>
 803d1d6:	9b03      	ldr	r3, [sp, #12]
 803d1d8:	1d19      	adds	r1, r3, #4
 803d1da:	681b      	ldr	r3, [r3, #0]
 803d1dc:	9103      	str	r1, [sp, #12]
 803d1de:	2b00      	cmp	r3, #0
 803d1e0:	bfbb      	ittet	lt
 803d1e2:	425b      	neglt	r3, r3
 803d1e4:	f042 0202 	orrlt.w	r2, r2, #2
 803d1e8:	9307      	strge	r3, [sp, #28]
 803d1ea:	9307      	strlt	r3, [sp, #28]
 803d1ec:	bfb8      	it	lt
 803d1ee:	9204      	strlt	r2, [sp, #16]
 803d1f0:	7823      	ldrb	r3, [r4, #0]
 803d1f2:	2b2e      	cmp	r3, #46	; 0x2e
 803d1f4:	d10c      	bne.n	803d210 <_svfiprintf_r+0x130>
 803d1f6:	7863      	ldrb	r3, [r4, #1]
 803d1f8:	2b2a      	cmp	r3, #42	; 0x2a
 803d1fa:	d135      	bne.n	803d268 <_svfiprintf_r+0x188>
 803d1fc:	9b03      	ldr	r3, [sp, #12]
 803d1fe:	1d1a      	adds	r2, r3, #4
 803d200:	681b      	ldr	r3, [r3, #0]
 803d202:	9203      	str	r2, [sp, #12]
 803d204:	2b00      	cmp	r3, #0
 803d206:	bfb8      	it	lt
 803d208:	f04f 33ff 	movlt.w	r3, #4294967295
 803d20c:	3402      	adds	r4, #2
 803d20e:	9305      	str	r3, [sp, #20]
 803d210:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 803d2dc <_svfiprintf_r+0x1fc>
 803d214:	7821      	ldrb	r1, [r4, #0]
 803d216:	2203      	movs	r2, #3
 803d218:	4650      	mov	r0, sl
 803d21a:	f7e2 ffe1 	bl	80201e0 <memchr>
 803d21e:	b140      	cbz	r0, 803d232 <_svfiprintf_r+0x152>
 803d220:	2340      	movs	r3, #64	; 0x40
 803d222:	eba0 000a 	sub.w	r0, r0, sl
 803d226:	fa03 f000 	lsl.w	r0, r3, r0
 803d22a:	9b04      	ldr	r3, [sp, #16]
 803d22c:	4303      	orrs	r3, r0
 803d22e:	3401      	adds	r4, #1
 803d230:	9304      	str	r3, [sp, #16]
 803d232:	f814 1b01 	ldrb.w	r1, [r4], #1
 803d236:	4826      	ldr	r0, [pc, #152]	; (803d2d0 <_svfiprintf_r+0x1f0>)
 803d238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803d23c:	2206      	movs	r2, #6
 803d23e:	f7e2 ffcf 	bl	80201e0 <memchr>
 803d242:	2800      	cmp	r0, #0
 803d244:	d038      	beq.n	803d2b8 <_svfiprintf_r+0x1d8>
 803d246:	4b23      	ldr	r3, [pc, #140]	; (803d2d4 <_svfiprintf_r+0x1f4>)
 803d248:	bb1b      	cbnz	r3, 803d292 <_svfiprintf_r+0x1b2>
 803d24a:	9b03      	ldr	r3, [sp, #12]
 803d24c:	3307      	adds	r3, #7
 803d24e:	f023 0307 	bic.w	r3, r3, #7
 803d252:	3308      	adds	r3, #8
 803d254:	9303      	str	r3, [sp, #12]
 803d256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803d258:	4433      	add	r3, r6
 803d25a:	9309      	str	r3, [sp, #36]	; 0x24
 803d25c:	e767      	b.n	803d12e <_svfiprintf_r+0x4e>
 803d25e:	fb0c 3202 	mla	r2, ip, r2, r3
 803d262:	460c      	mov	r4, r1
 803d264:	2001      	movs	r0, #1
 803d266:	e7a5      	b.n	803d1b4 <_svfiprintf_r+0xd4>
 803d268:	2300      	movs	r3, #0
 803d26a:	3401      	adds	r4, #1
 803d26c:	9305      	str	r3, [sp, #20]
 803d26e:	4619      	mov	r1, r3
 803d270:	f04f 0c0a 	mov.w	ip, #10
 803d274:	4620      	mov	r0, r4
 803d276:	f810 2b01 	ldrb.w	r2, [r0], #1
 803d27a:	3a30      	subs	r2, #48	; 0x30
 803d27c:	2a09      	cmp	r2, #9
 803d27e:	d903      	bls.n	803d288 <_svfiprintf_r+0x1a8>
 803d280:	2b00      	cmp	r3, #0
 803d282:	d0c5      	beq.n	803d210 <_svfiprintf_r+0x130>
 803d284:	9105      	str	r1, [sp, #20]
 803d286:	e7c3      	b.n	803d210 <_svfiprintf_r+0x130>
 803d288:	fb0c 2101 	mla	r1, ip, r1, r2
 803d28c:	4604      	mov	r4, r0
 803d28e:	2301      	movs	r3, #1
 803d290:	e7f0      	b.n	803d274 <_svfiprintf_r+0x194>
 803d292:	ab03      	add	r3, sp, #12
 803d294:	9300      	str	r3, [sp, #0]
 803d296:	462a      	mov	r2, r5
 803d298:	4b0f      	ldr	r3, [pc, #60]	; (803d2d8 <_svfiprintf_r+0x1f8>)
 803d29a:	a904      	add	r1, sp, #16
 803d29c:	4638      	mov	r0, r7
 803d29e:	f7fc fa79 	bl	8039794 <_printf_float>
 803d2a2:	1c42      	adds	r2, r0, #1
 803d2a4:	4606      	mov	r6, r0
 803d2a6:	d1d6      	bne.n	803d256 <_svfiprintf_r+0x176>
 803d2a8:	89ab      	ldrh	r3, [r5, #12]
 803d2aa:	065b      	lsls	r3, r3, #25
 803d2ac:	f53f af2c 	bmi.w	803d108 <_svfiprintf_r+0x28>
 803d2b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 803d2b2:	b01d      	add	sp, #116	; 0x74
 803d2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803d2b8:	ab03      	add	r3, sp, #12
 803d2ba:	9300      	str	r3, [sp, #0]
 803d2bc:	462a      	mov	r2, r5
 803d2be:	4b06      	ldr	r3, [pc, #24]	; (803d2d8 <_svfiprintf_r+0x1f8>)
 803d2c0:	a904      	add	r1, sp, #16
 803d2c2:	4638      	mov	r0, r7
 803d2c4:	f7fc fd0a 	bl	8039cdc <_printf_i>
 803d2c8:	e7eb      	b.n	803d2a2 <_svfiprintf_r+0x1c2>
 803d2ca:	bf00      	nop
 803d2cc:	0803ed04 	.word	0x0803ed04
 803d2d0:	0803ed0e 	.word	0x0803ed0e
 803d2d4:	08039795 	.word	0x08039795
 803d2d8:	0803d029 	.word	0x0803d029
 803d2dc:	0803ed0a 	.word	0x0803ed0a

0803d2e0 <_read_r>:
 803d2e0:	b538      	push	{r3, r4, r5, lr}
 803d2e2:	4d07      	ldr	r5, [pc, #28]	; (803d300 <_read_r+0x20>)
 803d2e4:	4604      	mov	r4, r0
 803d2e6:	4608      	mov	r0, r1
 803d2e8:	4611      	mov	r1, r2
 803d2ea:	2200      	movs	r2, #0
 803d2ec:	602a      	str	r2, [r5, #0]
 803d2ee:	461a      	mov	r2, r3
 803d2f0:	f7f4 fbcc 	bl	8031a8c <_read>
 803d2f4:	1c43      	adds	r3, r0, #1
 803d2f6:	d102      	bne.n	803d2fe <_read_r+0x1e>
 803d2f8:	682b      	ldr	r3, [r5, #0]
 803d2fa:	b103      	cbz	r3, 803d2fe <_read_r+0x1e>
 803d2fc:	6023      	str	r3, [r4, #0]
 803d2fe:	bd38      	pop	{r3, r4, r5, pc}
 803d300:	200009c4 	.word	0x200009c4
 803d304:	00000000 	.word	0x00000000

0803d308 <nan>:
 803d308:	ed9f 0b01 	vldr	d0, [pc, #4]	; 803d310 <nan+0x8>
 803d30c:	4770      	bx	lr
 803d30e:	bf00      	nop
 803d310:	00000000 	.word	0x00000000
 803d314:	7ff80000 	.word	0x7ff80000

0803d318 <__ascii_wctomb>:
 803d318:	b149      	cbz	r1, 803d32e <__ascii_wctomb+0x16>
 803d31a:	2aff      	cmp	r2, #255	; 0xff
 803d31c:	bf85      	ittet	hi
 803d31e:	238a      	movhi	r3, #138	; 0x8a
 803d320:	6003      	strhi	r3, [r0, #0]
 803d322:	700a      	strbls	r2, [r1, #0]
 803d324:	f04f 30ff 	movhi.w	r0, #4294967295
 803d328:	bf98      	it	ls
 803d32a:	2001      	movls	r0, #1
 803d32c:	4770      	bx	lr
 803d32e:	4608      	mov	r0, r1
 803d330:	4770      	bx	lr
	...

0803d334 <__assert_func>:
 803d334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 803d336:	4614      	mov	r4, r2
 803d338:	461a      	mov	r2, r3
 803d33a:	4b09      	ldr	r3, [pc, #36]	; (803d360 <__assert_func+0x2c>)
 803d33c:	681b      	ldr	r3, [r3, #0]
 803d33e:	4605      	mov	r5, r0
 803d340:	68d8      	ldr	r0, [r3, #12]
 803d342:	b14c      	cbz	r4, 803d358 <__assert_func+0x24>
 803d344:	4b07      	ldr	r3, [pc, #28]	; (803d364 <__assert_func+0x30>)
 803d346:	9100      	str	r1, [sp, #0]
 803d348:	e9cd 3401 	strd	r3, r4, [sp, #4]
 803d34c:	4906      	ldr	r1, [pc, #24]	; (803d368 <__assert_func+0x34>)
 803d34e:	462b      	mov	r3, r5
 803d350:	f000 f80e 	bl	803d370 <fiprintf>
 803d354:	f000 fa78 	bl	803d848 <abort>
 803d358:	4b04      	ldr	r3, [pc, #16]	; (803d36c <__assert_func+0x38>)
 803d35a:	461c      	mov	r4, r3
 803d35c:	e7f3      	b.n	803d346 <__assert_func+0x12>
 803d35e:	bf00      	nop
 803d360:	2000002c 	.word	0x2000002c
 803d364:	0803ed15 	.word	0x0803ed15
 803d368:	0803ed22 	.word	0x0803ed22
 803d36c:	0803ed50 	.word	0x0803ed50

0803d370 <fiprintf>:
 803d370:	b40e      	push	{r1, r2, r3}
 803d372:	b503      	push	{r0, r1, lr}
 803d374:	4601      	mov	r1, r0
 803d376:	ab03      	add	r3, sp, #12
 803d378:	4805      	ldr	r0, [pc, #20]	; (803d390 <fiprintf+0x20>)
 803d37a:	f853 2b04 	ldr.w	r2, [r3], #4
 803d37e:	6800      	ldr	r0, [r0, #0]
 803d380:	9301      	str	r3, [sp, #4]
 803d382:	f000 f871 	bl	803d468 <_vfiprintf_r>
 803d386:	b002      	add	sp, #8
 803d388:	f85d eb04 	ldr.w	lr, [sp], #4
 803d38c:	b003      	add	sp, #12
 803d38e:	4770      	bx	lr
 803d390:	2000002c 	.word	0x2000002c

0803d394 <memmove>:
 803d394:	4288      	cmp	r0, r1
 803d396:	b510      	push	{r4, lr}
 803d398:	eb01 0402 	add.w	r4, r1, r2
 803d39c:	d902      	bls.n	803d3a4 <memmove+0x10>
 803d39e:	4284      	cmp	r4, r0
 803d3a0:	4623      	mov	r3, r4
 803d3a2:	d807      	bhi.n	803d3b4 <memmove+0x20>
 803d3a4:	1e43      	subs	r3, r0, #1
 803d3a6:	42a1      	cmp	r1, r4
 803d3a8:	d008      	beq.n	803d3bc <memmove+0x28>
 803d3aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 803d3ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 803d3b2:	e7f8      	b.n	803d3a6 <memmove+0x12>
 803d3b4:	4402      	add	r2, r0
 803d3b6:	4601      	mov	r1, r0
 803d3b8:	428a      	cmp	r2, r1
 803d3ba:	d100      	bne.n	803d3be <memmove+0x2a>
 803d3bc:	bd10      	pop	{r4, pc}
 803d3be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 803d3c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 803d3c6:	e7f7      	b.n	803d3b8 <memmove+0x24>

0803d3c8 <_realloc_r>:
 803d3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803d3ca:	4607      	mov	r7, r0
 803d3cc:	4614      	mov	r4, r2
 803d3ce:	460e      	mov	r6, r1
 803d3d0:	b921      	cbnz	r1, 803d3dc <_realloc_r+0x14>
 803d3d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 803d3d6:	4611      	mov	r1, r2
 803d3d8:	f7fc b8e2 	b.w	80395a0 <_malloc_r>
 803d3dc:	b922      	cbnz	r2, 803d3e8 <_realloc_r+0x20>
 803d3de:	f7fc f88f 	bl	8039500 <_free_r>
 803d3e2:	4625      	mov	r5, r4
 803d3e4:	4628      	mov	r0, r5
 803d3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803d3e8:	f000 fa35 	bl	803d856 <_malloc_usable_size_r>
 803d3ec:	42a0      	cmp	r0, r4
 803d3ee:	d20f      	bcs.n	803d410 <_realloc_r+0x48>
 803d3f0:	4621      	mov	r1, r4
 803d3f2:	4638      	mov	r0, r7
 803d3f4:	f7fc f8d4 	bl	80395a0 <_malloc_r>
 803d3f8:	4605      	mov	r5, r0
 803d3fa:	2800      	cmp	r0, #0
 803d3fc:	d0f2      	beq.n	803d3e4 <_realloc_r+0x1c>
 803d3fe:	4631      	mov	r1, r6
 803d400:	4622      	mov	r2, r4
 803d402:	f7fc f867 	bl	80394d4 <memcpy>
 803d406:	4631      	mov	r1, r6
 803d408:	4638      	mov	r0, r7
 803d40a:	f7fc f879 	bl	8039500 <_free_r>
 803d40e:	e7e9      	b.n	803d3e4 <_realloc_r+0x1c>
 803d410:	4635      	mov	r5, r6
 803d412:	e7e7      	b.n	803d3e4 <_realloc_r+0x1c>

0803d414 <__sfputc_r>:
 803d414:	6893      	ldr	r3, [r2, #8]
 803d416:	3b01      	subs	r3, #1
 803d418:	2b00      	cmp	r3, #0
 803d41a:	b410      	push	{r4}
 803d41c:	6093      	str	r3, [r2, #8]
 803d41e:	da08      	bge.n	803d432 <__sfputc_r+0x1e>
 803d420:	6994      	ldr	r4, [r2, #24]
 803d422:	42a3      	cmp	r3, r4
 803d424:	db01      	blt.n	803d42a <__sfputc_r+0x16>
 803d426:	290a      	cmp	r1, #10
 803d428:	d103      	bne.n	803d432 <__sfputc_r+0x1e>
 803d42a:	f85d 4b04 	ldr.w	r4, [sp], #4
 803d42e:	f000 b94b 	b.w	803d6c8 <__swbuf_r>
 803d432:	6813      	ldr	r3, [r2, #0]
 803d434:	1c58      	adds	r0, r3, #1
 803d436:	6010      	str	r0, [r2, #0]
 803d438:	7019      	strb	r1, [r3, #0]
 803d43a:	4608      	mov	r0, r1
 803d43c:	f85d 4b04 	ldr.w	r4, [sp], #4
 803d440:	4770      	bx	lr

0803d442 <__sfputs_r>:
 803d442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803d444:	4606      	mov	r6, r0
 803d446:	460f      	mov	r7, r1
 803d448:	4614      	mov	r4, r2
 803d44a:	18d5      	adds	r5, r2, r3
 803d44c:	42ac      	cmp	r4, r5
 803d44e:	d101      	bne.n	803d454 <__sfputs_r+0x12>
 803d450:	2000      	movs	r0, #0
 803d452:	e007      	b.n	803d464 <__sfputs_r+0x22>
 803d454:	f814 1b01 	ldrb.w	r1, [r4], #1
 803d458:	463a      	mov	r2, r7
 803d45a:	4630      	mov	r0, r6
 803d45c:	f7ff ffda 	bl	803d414 <__sfputc_r>
 803d460:	1c43      	adds	r3, r0, #1
 803d462:	d1f3      	bne.n	803d44c <__sfputs_r+0xa>
 803d464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803d468 <_vfiprintf_r>:
 803d468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803d46c:	460d      	mov	r5, r1
 803d46e:	b09d      	sub	sp, #116	; 0x74
 803d470:	4614      	mov	r4, r2
 803d472:	4698      	mov	r8, r3
 803d474:	4606      	mov	r6, r0
 803d476:	b118      	cbz	r0, 803d480 <_vfiprintf_r+0x18>
 803d478:	6983      	ldr	r3, [r0, #24]
 803d47a:	b90b      	cbnz	r3, 803d480 <_vfiprintf_r+0x18>
 803d47c:	f7fb ff00 	bl	8039280 <__sinit>
 803d480:	4b89      	ldr	r3, [pc, #548]	; (803d6a8 <_vfiprintf_r+0x240>)
 803d482:	429d      	cmp	r5, r3
 803d484:	d11b      	bne.n	803d4be <_vfiprintf_r+0x56>
 803d486:	6875      	ldr	r5, [r6, #4]
 803d488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803d48a:	07d9      	lsls	r1, r3, #31
 803d48c:	d405      	bmi.n	803d49a <_vfiprintf_r+0x32>
 803d48e:	89ab      	ldrh	r3, [r5, #12]
 803d490:	059a      	lsls	r2, r3, #22
 803d492:	d402      	bmi.n	803d49a <_vfiprintf_r+0x32>
 803d494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803d496:	f7fb ffb6 	bl	8039406 <__retarget_lock_acquire_recursive>
 803d49a:	89ab      	ldrh	r3, [r5, #12]
 803d49c:	071b      	lsls	r3, r3, #28
 803d49e:	d501      	bpl.n	803d4a4 <_vfiprintf_r+0x3c>
 803d4a0:	692b      	ldr	r3, [r5, #16]
 803d4a2:	b9eb      	cbnz	r3, 803d4e0 <_vfiprintf_r+0x78>
 803d4a4:	4629      	mov	r1, r5
 803d4a6:	4630      	mov	r0, r6
 803d4a8:	f000 f960 	bl	803d76c <__swsetup_r>
 803d4ac:	b1c0      	cbz	r0, 803d4e0 <_vfiprintf_r+0x78>
 803d4ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803d4b0:	07dc      	lsls	r4, r3, #31
 803d4b2:	d50e      	bpl.n	803d4d2 <_vfiprintf_r+0x6a>
 803d4b4:	f04f 30ff 	mov.w	r0, #4294967295
 803d4b8:	b01d      	add	sp, #116	; 0x74
 803d4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803d4be:	4b7b      	ldr	r3, [pc, #492]	; (803d6ac <_vfiprintf_r+0x244>)
 803d4c0:	429d      	cmp	r5, r3
 803d4c2:	d101      	bne.n	803d4c8 <_vfiprintf_r+0x60>
 803d4c4:	68b5      	ldr	r5, [r6, #8]
 803d4c6:	e7df      	b.n	803d488 <_vfiprintf_r+0x20>
 803d4c8:	4b79      	ldr	r3, [pc, #484]	; (803d6b0 <_vfiprintf_r+0x248>)
 803d4ca:	429d      	cmp	r5, r3
 803d4cc:	bf08      	it	eq
 803d4ce:	68f5      	ldreq	r5, [r6, #12]
 803d4d0:	e7da      	b.n	803d488 <_vfiprintf_r+0x20>
 803d4d2:	89ab      	ldrh	r3, [r5, #12]
 803d4d4:	0598      	lsls	r0, r3, #22
 803d4d6:	d4ed      	bmi.n	803d4b4 <_vfiprintf_r+0x4c>
 803d4d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803d4da:	f7fb ff95 	bl	8039408 <__retarget_lock_release_recursive>
 803d4de:	e7e9      	b.n	803d4b4 <_vfiprintf_r+0x4c>
 803d4e0:	2300      	movs	r3, #0
 803d4e2:	9309      	str	r3, [sp, #36]	; 0x24
 803d4e4:	2320      	movs	r3, #32
 803d4e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 803d4ea:	f8cd 800c 	str.w	r8, [sp, #12]
 803d4ee:	2330      	movs	r3, #48	; 0x30
 803d4f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 803d6b4 <_vfiprintf_r+0x24c>
 803d4f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 803d4f8:	f04f 0901 	mov.w	r9, #1
 803d4fc:	4623      	mov	r3, r4
 803d4fe:	469a      	mov	sl, r3
 803d500:	f813 2b01 	ldrb.w	r2, [r3], #1
 803d504:	b10a      	cbz	r2, 803d50a <_vfiprintf_r+0xa2>
 803d506:	2a25      	cmp	r2, #37	; 0x25
 803d508:	d1f9      	bne.n	803d4fe <_vfiprintf_r+0x96>
 803d50a:	ebba 0b04 	subs.w	fp, sl, r4
 803d50e:	d00b      	beq.n	803d528 <_vfiprintf_r+0xc0>
 803d510:	465b      	mov	r3, fp
 803d512:	4622      	mov	r2, r4
 803d514:	4629      	mov	r1, r5
 803d516:	4630      	mov	r0, r6
 803d518:	f7ff ff93 	bl	803d442 <__sfputs_r>
 803d51c:	3001      	adds	r0, #1
 803d51e:	f000 80aa 	beq.w	803d676 <_vfiprintf_r+0x20e>
 803d522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803d524:	445a      	add	r2, fp
 803d526:	9209      	str	r2, [sp, #36]	; 0x24
 803d528:	f89a 3000 	ldrb.w	r3, [sl]
 803d52c:	2b00      	cmp	r3, #0
 803d52e:	f000 80a2 	beq.w	803d676 <_vfiprintf_r+0x20e>
 803d532:	2300      	movs	r3, #0
 803d534:	f04f 32ff 	mov.w	r2, #4294967295
 803d538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 803d53c:	f10a 0a01 	add.w	sl, sl, #1
 803d540:	9304      	str	r3, [sp, #16]
 803d542:	9307      	str	r3, [sp, #28]
 803d544:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 803d548:	931a      	str	r3, [sp, #104]	; 0x68
 803d54a:	4654      	mov	r4, sl
 803d54c:	2205      	movs	r2, #5
 803d54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 803d552:	4858      	ldr	r0, [pc, #352]	; (803d6b4 <_vfiprintf_r+0x24c>)
 803d554:	f7e2 fe44 	bl	80201e0 <memchr>
 803d558:	9a04      	ldr	r2, [sp, #16]
 803d55a:	b9d8      	cbnz	r0, 803d594 <_vfiprintf_r+0x12c>
 803d55c:	06d1      	lsls	r1, r2, #27
 803d55e:	bf44      	itt	mi
 803d560:	2320      	movmi	r3, #32
 803d562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803d566:	0713      	lsls	r3, r2, #28
 803d568:	bf44      	itt	mi
 803d56a:	232b      	movmi	r3, #43	; 0x2b
 803d56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803d570:	f89a 3000 	ldrb.w	r3, [sl]
 803d574:	2b2a      	cmp	r3, #42	; 0x2a
 803d576:	d015      	beq.n	803d5a4 <_vfiprintf_r+0x13c>
 803d578:	9a07      	ldr	r2, [sp, #28]
 803d57a:	4654      	mov	r4, sl
 803d57c:	2000      	movs	r0, #0
 803d57e:	f04f 0c0a 	mov.w	ip, #10
 803d582:	4621      	mov	r1, r4
 803d584:	f811 3b01 	ldrb.w	r3, [r1], #1
 803d588:	3b30      	subs	r3, #48	; 0x30
 803d58a:	2b09      	cmp	r3, #9
 803d58c:	d94e      	bls.n	803d62c <_vfiprintf_r+0x1c4>
 803d58e:	b1b0      	cbz	r0, 803d5be <_vfiprintf_r+0x156>
 803d590:	9207      	str	r2, [sp, #28]
 803d592:	e014      	b.n	803d5be <_vfiprintf_r+0x156>
 803d594:	eba0 0308 	sub.w	r3, r0, r8
 803d598:	fa09 f303 	lsl.w	r3, r9, r3
 803d59c:	4313      	orrs	r3, r2
 803d59e:	9304      	str	r3, [sp, #16]
 803d5a0:	46a2      	mov	sl, r4
 803d5a2:	e7d2      	b.n	803d54a <_vfiprintf_r+0xe2>
 803d5a4:	9b03      	ldr	r3, [sp, #12]
 803d5a6:	1d19      	adds	r1, r3, #4
 803d5a8:	681b      	ldr	r3, [r3, #0]
 803d5aa:	9103      	str	r1, [sp, #12]
 803d5ac:	2b00      	cmp	r3, #0
 803d5ae:	bfbb      	ittet	lt
 803d5b0:	425b      	neglt	r3, r3
 803d5b2:	f042 0202 	orrlt.w	r2, r2, #2
 803d5b6:	9307      	strge	r3, [sp, #28]
 803d5b8:	9307      	strlt	r3, [sp, #28]
 803d5ba:	bfb8      	it	lt
 803d5bc:	9204      	strlt	r2, [sp, #16]
 803d5be:	7823      	ldrb	r3, [r4, #0]
 803d5c0:	2b2e      	cmp	r3, #46	; 0x2e
 803d5c2:	d10c      	bne.n	803d5de <_vfiprintf_r+0x176>
 803d5c4:	7863      	ldrb	r3, [r4, #1]
 803d5c6:	2b2a      	cmp	r3, #42	; 0x2a
 803d5c8:	d135      	bne.n	803d636 <_vfiprintf_r+0x1ce>
 803d5ca:	9b03      	ldr	r3, [sp, #12]
 803d5cc:	1d1a      	adds	r2, r3, #4
 803d5ce:	681b      	ldr	r3, [r3, #0]
 803d5d0:	9203      	str	r2, [sp, #12]
 803d5d2:	2b00      	cmp	r3, #0
 803d5d4:	bfb8      	it	lt
 803d5d6:	f04f 33ff 	movlt.w	r3, #4294967295
 803d5da:	3402      	adds	r4, #2
 803d5dc:	9305      	str	r3, [sp, #20]
 803d5de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 803d6c4 <_vfiprintf_r+0x25c>
 803d5e2:	7821      	ldrb	r1, [r4, #0]
 803d5e4:	2203      	movs	r2, #3
 803d5e6:	4650      	mov	r0, sl
 803d5e8:	f7e2 fdfa 	bl	80201e0 <memchr>
 803d5ec:	b140      	cbz	r0, 803d600 <_vfiprintf_r+0x198>
 803d5ee:	2340      	movs	r3, #64	; 0x40
 803d5f0:	eba0 000a 	sub.w	r0, r0, sl
 803d5f4:	fa03 f000 	lsl.w	r0, r3, r0
 803d5f8:	9b04      	ldr	r3, [sp, #16]
 803d5fa:	4303      	orrs	r3, r0
 803d5fc:	3401      	adds	r4, #1
 803d5fe:	9304      	str	r3, [sp, #16]
 803d600:	f814 1b01 	ldrb.w	r1, [r4], #1
 803d604:	482c      	ldr	r0, [pc, #176]	; (803d6b8 <_vfiprintf_r+0x250>)
 803d606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 803d60a:	2206      	movs	r2, #6
 803d60c:	f7e2 fde8 	bl	80201e0 <memchr>
 803d610:	2800      	cmp	r0, #0
 803d612:	d03f      	beq.n	803d694 <_vfiprintf_r+0x22c>
 803d614:	4b29      	ldr	r3, [pc, #164]	; (803d6bc <_vfiprintf_r+0x254>)
 803d616:	bb1b      	cbnz	r3, 803d660 <_vfiprintf_r+0x1f8>
 803d618:	9b03      	ldr	r3, [sp, #12]
 803d61a:	3307      	adds	r3, #7
 803d61c:	f023 0307 	bic.w	r3, r3, #7
 803d620:	3308      	adds	r3, #8
 803d622:	9303      	str	r3, [sp, #12]
 803d624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803d626:	443b      	add	r3, r7
 803d628:	9309      	str	r3, [sp, #36]	; 0x24
 803d62a:	e767      	b.n	803d4fc <_vfiprintf_r+0x94>
 803d62c:	fb0c 3202 	mla	r2, ip, r2, r3
 803d630:	460c      	mov	r4, r1
 803d632:	2001      	movs	r0, #1
 803d634:	e7a5      	b.n	803d582 <_vfiprintf_r+0x11a>
 803d636:	2300      	movs	r3, #0
 803d638:	3401      	adds	r4, #1
 803d63a:	9305      	str	r3, [sp, #20]
 803d63c:	4619      	mov	r1, r3
 803d63e:	f04f 0c0a 	mov.w	ip, #10
 803d642:	4620      	mov	r0, r4
 803d644:	f810 2b01 	ldrb.w	r2, [r0], #1
 803d648:	3a30      	subs	r2, #48	; 0x30
 803d64a:	2a09      	cmp	r2, #9
 803d64c:	d903      	bls.n	803d656 <_vfiprintf_r+0x1ee>
 803d64e:	2b00      	cmp	r3, #0
 803d650:	d0c5      	beq.n	803d5de <_vfiprintf_r+0x176>
 803d652:	9105      	str	r1, [sp, #20]
 803d654:	e7c3      	b.n	803d5de <_vfiprintf_r+0x176>
 803d656:	fb0c 2101 	mla	r1, ip, r1, r2
 803d65a:	4604      	mov	r4, r0
 803d65c:	2301      	movs	r3, #1
 803d65e:	e7f0      	b.n	803d642 <_vfiprintf_r+0x1da>
 803d660:	ab03      	add	r3, sp, #12
 803d662:	9300      	str	r3, [sp, #0]
 803d664:	462a      	mov	r2, r5
 803d666:	4b16      	ldr	r3, [pc, #88]	; (803d6c0 <_vfiprintf_r+0x258>)
 803d668:	a904      	add	r1, sp, #16
 803d66a:	4630      	mov	r0, r6
 803d66c:	f7fc f892 	bl	8039794 <_printf_float>
 803d670:	4607      	mov	r7, r0
 803d672:	1c78      	adds	r0, r7, #1
 803d674:	d1d6      	bne.n	803d624 <_vfiprintf_r+0x1bc>
 803d676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803d678:	07d9      	lsls	r1, r3, #31
 803d67a:	d405      	bmi.n	803d688 <_vfiprintf_r+0x220>
 803d67c:	89ab      	ldrh	r3, [r5, #12]
 803d67e:	059a      	lsls	r2, r3, #22
 803d680:	d402      	bmi.n	803d688 <_vfiprintf_r+0x220>
 803d682:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803d684:	f7fb fec0 	bl	8039408 <__retarget_lock_release_recursive>
 803d688:	89ab      	ldrh	r3, [r5, #12]
 803d68a:	065b      	lsls	r3, r3, #25
 803d68c:	f53f af12 	bmi.w	803d4b4 <_vfiprintf_r+0x4c>
 803d690:	9809      	ldr	r0, [sp, #36]	; 0x24
 803d692:	e711      	b.n	803d4b8 <_vfiprintf_r+0x50>
 803d694:	ab03      	add	r3, sp, #12
 803d696:	9300      	str	r3, [sp, #0]
 803d698:	462a      	mov	r2, r5
 803d69a:	4b09      	ldr	r3, [pc, #36]	; (803d6c0 <_vfiprintf_r+0x258>)
 803d69c:	a904      	add	r1, sp, #16
 803d69e:	4630      	mov	r0, r6
 803d6a0:	f7fc fb1c 	bl	8039cdc <_printf_i>
 803d6a4:	e7e4      	b.n	803d670 <_vfiprintf_r+0x208>
 803d6a6:	bf00      	nop
 803d6a8:	0803e8bc 	.word	0x0803e8bc
 803d6ac:	0803e8dc 	.word	0x0803e8dc
 803d6b0:	0803e89c 	.word	0x0803e89c
 803d6b4:	0803ed04 	.word	0x0803ed04
 803d6b8:	0803ed0e 	.word	0x0803ed0e
 803d6bc:	08039795 	.word	0x08039795
 803d6c0:	0803d443 	.word	0x0803d443
 803d6c4:	0803ed0a 	.word	0x0803ed0a

0803d6c8 <__swbuf_r>:
 803d6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803d6ca:	460e      	mov	r6, r1
 803d6cc:	4614      	mov	r4, r2
 803d6ce:	4605      	mov	r5, r0
 803d6d0:	b118      	cbz	r0, 803d6da <__swbuf_r+0x12>
 803d6d2:	6983      	ldr	r3, [r0, #24]
 803d6d4:	b90b      	cbnz	r3, 803d6da <__swbuf_r+0x12>
 803d6d6:	f7fb fdd3 	bl	8039280 <__sinit>
 803d6da:	4b21      	ldr	r3, [pc, #132]	; (803d760 <__swbuf_r+0x98>)
 803d6dc:	429c      	cmp	r4, r3
 803d6de:	d12b      	bne.n	803d738 <__swbuf_r+0x70>
 803d6e0:	686c      	ldr	r4, [r5, #4]
 803d6e2:	69a3      	ldr	r3, [r4, #24]
 803d6e4:	60a3      	str	r3, [r4, #8]
 803d6e6:	89a3      	ldrh	r3, [r4, #12]
 803d6e8:	071a      	lsls	r2, r3, #28
 803d6ea:	d52f      	bpl.n	803d74c <__swbuf_r+0x84>
 803d6ec:	6923      	ldr	r3, [r4, #16]
 803d6ee:	b36b      	cbz	r3, 803d74c <__swbuf_r+0x84>
 803d6f0:	6923      	ldr	r3, [r4, #16]
 803d6f2:	6820      	ldr	r0, [r4, #0]
 803d6f4:	1ac0      	subs	r0, r0, r3
 803d6f6:	6963      	ldr	r3, [r4, #20]
 803d6f8:	b2f6      	uxtb	r6, r6
 803d6fa:	4283      	cmp	r3, r0
 803d6fc:	4637      	mov	r7, r6
 803d6fe:	dc04      	bgt.n	803d70a <__swbuf_r+0x42>
 803d700:	4621      	mov	r1, r4
 803d702:	4628      	mov	r0, r5
 803d704:	f7fb fd28 	bl	8039158 <_fflush_r>
 803d708:	bb30      	cbnz	r0, 803d758 <__swbuf_r+0x90>
 803d70a:	68a3      	ldr	r3, [r4, #8]
 803d70c:	3b01      	subs	r3, #1
 803d70e:	60a3      	str	r3, [r4, #8]
 803d710:	6823      	ldr	r3, [r4, #0]
 803d712:	1c5a      	adds	r2, r3, #1
 803d714:	6022      	str	r2, [r4, #0]
 803d716:	701e      	strb	r6, [r3, #0]
 803d718:	6963      	ldr	r3, [r4, #20]
 803d71a:	3001      	adds	r0, #1
 803d71c:	4283      	cmp	r3, r0
 803d71e:	d004      	beq.n	803d72a <__swbuf_r+0x62>
 803d720:	89a3      	ldrh	r3, [r4, #12]
 803d722:	07db      	lsls	r3, r3, #31
 803d724:	d506      	bpl.n	803d734 <__swbuf_r+0x6c>
 803d726:	2e0a      	cmp	r6, #10
 803d728:	d104      	bne.n	803d734 <__swbuf_r+0x6c>
 803d72a:	4621      	mov	r1, r4
 803d72c:	4628      	mov	r0, r5
 803d72e:	f7fb fd13 	bl	8039158 <_fflush_r>
 803d732:	b988      	cbnz	r0, 803d758 <__swbuf_r+0x90>
 803d734:	4638      	mov	r0, r7
 803d736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 803d738:	4b0a      	ldr	r3, [pc, #40]	; (803d764 <__swbuf_r+0x9c>)
 803d73a:	429c      	cmp	r4, r3
 803d73c:	d101      	bne.n	803d742 <__swbuf_r+0x7a>
 803d73e:	68ac      	ldr	r4, [r5, #8]
 803d740:	e7cf      	b.n	803d6e2 <__swbuf_r+0x1a>
 803d742:	4b09      	ldr	r3, [pc, #36]	; (803d768 <__swbuf_r+0xa0>)
 803d744:	429c      	cmp	r4, r3
 803d746:	bf08      	it	eq
 803d748:	68ec      	ldreq	r4, [r5, #12]
 803d74a:	e7ca      	b.n	803d6e2 <__swbuf_r+0x1a>
 803d74c:	4621      	mov	r1, r4
 803d74e:	4628      	mov	r0, r5
 803d750:	f000 f80c 	bl	803d76c <__swsetup_r>
 803d754:	2800      	cmp	r0, #0
 803d756:	d0cb      	beq.n	803d6f0 <__swbuf_r+0x28>
 803d758:	f04f 37ff 	mov.w	r7, #4294967295
 803d75c:	e7ea      	b.n	803d734 <__swbuf_r+0x6c>
 803d75e:	bf00      	nop
 803d760:	0803e8bc 	.word	0x0803e8bc
 803d764:	0803e8dc 	.word	0x0803e8dc
 803d768:	0803e89c 	.word	0x0803e89c

0803d76c <__swsetup_r>:
 803d76c:	4b32      	ldr	r3, [pc, #200]	; (803d838 <__swsetup_r+0xcc>)
 803d76e:	b570      	push	{r4, r5, r6, lr}
 803d770:	681d      	ldr	r5, [r3, #0]
 803d772:	4606      	mov	r6, r0
 803d774:	460c      	mov	r4, r1
 803d776:	b125      	cbz	r5, 803d782 <__swsetup_r+0x16>
 803d778:	69ab      	ldr	r3, [r5, #24]
 803d77a:	b913      	cbnz	r3, 803d782 <__swsetup_r+0x16>
 803d77c:	4628      	mov	r0, r5
 803d77e:	f7fb fd7f 	bl	8039280 <__sinit>
 803d782:	4b2e      	ldr	r3, [pc, #184]	; (803d83c <__swsetup_r+0xd0>)
 803d784:	429c      	cmp	r4, r3
 803d786:	d10f      	bne.n	803d7a8 <__swsetup_r+0x3c>
 803d788:	686c      	ldr	r4, [r5, #4]
 803d78a:	89a3      	ldrh	r3, [r4, #12]
 803d78c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803d790:	0719      	lsls	r1, r3, #28
 803d792:	d42c      	bmi.n	803d7ee <__swsetup_r+0x82>
 803d794:	06dd      	lsls	r5, r3, #27
 803d796:	d411      	bmi.n	803d7bc <__swsetup_r+0x50>
 803d798:	2309      	movs	r3, #9
 803d79a:	6033      	str	r3, [r6, #0]
 803d79c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 803d7a0:	81a3      	strh	r3, [r4, #12]
 803d7a2:	f04f 30ff 	mov.w	r0, #4294967295
 803d7a6:	e03e      	b.n	803d826 <__swsetup_r+0xba>
 803d7a8:	4b25      	ldr	r3, [pc, #148]	; (803d840 <__swsetup_r+0xd4>)
 803d7aa:	429c      	cmp	r4, r3
 803d7ac:	d101      	bne.n	803d7b2 <__swsetup_r+0x46>
 803d7ae:	68ac      	ldr	r4, [r5, #8]
 803d7b0:	e7eb      	b.n	803d78a <__swsetup_r+0x1e>
 803d7b2:	4b24      	ldr	r3, [pc, #144]	; (803d844 <__swsetup_r+0xd8>)
 803d7b4:	429c      	cmp	r4, r3
 803d7b6:	bf08      	it	eq
 803d7b8:	68ec      	ldreq	r4, [r5, #12]
 803d7ba:	e7e6      	b.n	803d78a <__swsetup_r+0x1e>
 803d7bc:	0758      	lsls	r0, r3, #29
 803d7be:	d512      	bpl.n	803d7e6 <__swsetup_r+0x7a>
 803d7c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 803d7c2:	b141      	cbz	r1, 803d7d6 <__swsetup_r+0x6a>
 803d7c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803d7c8:	4299      	cmp	r1, r3
 803d7ca:	d002      	beq.n	803d7d2 <__swsetup_r+0x66>
 803d7cc:	4630      	mov	r0, r6
 803d7ce:	f7fb fe97 	bl	8039500 <_free_r>
 803d7d2:	2300      	movs	r3, #0
 803d7d4:	6363      	str	r3, [r4, #52]	; 0x34
 803d7d6:	89a3      	ldrh	r3, [r4, #12]
 803d7d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 803d7dc:	81a3      	strh	r3, [r4, #12]
 803d7de:	2300      	movs	r3, #0
 803d7e0:	6063      	str	r3, [r4, #4]
 803d7e2:	6923      	ldr	r3, [r4, #16]
 803d7e4:	6023      	str	r3, [r4, #0]
 803d7e6:	89a3      	ldrh	r3, [r4, #12]
 803d7e8:	f043 0308 	orr.w	r3, r3, #8
 803d7ec:	81a3      	strh	r3, [r4, #12]
 803d7ee:	6923      	ldr	r3, [r4, #16]
 803d7f0:	b94b      	cbnz	r3, 803d806 <__swsetup_r+0x9a>
 803d7f2:	89a3      	ldrh	r3, [r4, #12]
 803d7f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 803d7f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 803d7fc:	d003      	beq.n	803d806 <__swsetup_r+0x9a>
 803d7fe:	4621      	mov	r1, r4
 803d800:	4630      	mov	r0, r6
 803d802:	f7fb fe27 	bl	8039454 <__smakebuf_r>
 803d806:	89a0      	ldrh	r0, [r4, #12]
 803d808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 803d80c:	f010 0301 	ands.w	r3, r0, #1
 803d810:	d00a      	beq.n	803d828 <__swsetup_r+0xbc>
 803d812:	2300      	movs	r3, #0
 803d814:	60a3      	str	r3, [r4, #8]
 803d816:	6963      	ldr	r3, [r4, #20]
 803d818:	425b      	negs	r3, r3
 803d81a:	61a3      	str	r3, [r4, #24]
 803d81c:	6923      	ldr	r3, [r4, #16]
 803d81e:	b943      	cbnz	r3, 803d832 <__swsetup_r+0xc6>
 803d820:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 803d824:	d1ba      	bne.n	803d79c <__swsetup_r+0x30>
 803d826:	bd70      	pop	{r4, r5, r6, pc}
 803d828:	0781      	lsls	r1, r0, #30
 803d82a:	bf58      	it	pl
 803d82c:	6963      	ldrpl	r3, [r4, #20]
 803d82e:	60a3      	str	r3, [r4, #8]
 803d830:	e7f4      	b.n	803d81c <__swsetup_r+0xb0>
 803d832:	2000      	movs	r0, #0
 803d834:	e7f7      	b.n	803d826 <__swsetup_r+0xba>
 803d836:	bf00      	nop
 803d838:	2000002c 	.word	0x2000002c
 803d83c:	0803e8bc 	.word	0x0803e8bc
 803d840:	0803e8dc 	.word	0x0803e8dc
 803d844:	0803e89c 	.word	0x0803e89c

0803d848 <abort>:
 803d848:	b508      	push	{r3, lr}
 803d84a:	2006      	movs	r0, #6
 803d84c:	f000 f834 	bl	803d8b8 <raise>
 803d850:	2001      	movs	r0, #1
 803d852:	f7f4 f911 	bl	8031a78 <_exit>

0803d856 <_malloc_usable_size_r>:
 803d856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 803d85a:	1f18      	subs	r0, r3, #4
 803d85c:	2b00      	cmp	r3, #0
 803d85e:	bfbc      	itt	lt
 803d860:	580b      	ldrlt	r3, [r1, r0]
 803d862:	18c0      	addlt	r0, r0, r3
 803d864:	4770      	bx	lr

0803d866 <_raise_r>:
 803d866:	291f      	cmp	r1, #31
 803d868:	b538      	push	{r3, r4, r5, lr}
 803d86a:	4604      	mov	r4, r0
 803d86c:	460d      	mov	r5, r1
 803d86e:	d904      	bls.n	803d87a <_raise_r+0x14>
 803d870:	2316      	movs	r3, #22
 803d872:	6003      	str	r3, [r0, #0]
 803d874:	f04f 30ff 	mov.w	r0, #4294967295
 803d878:	bd38      	pop	{r3, r4, r5, pc}
 803d87a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 803d87c:	b112      	cbz	r2, 803d884 <_raise_r+0x1e>
 803d87e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803d882:	b94b      	cbnz	r3, 803d898 <_raise_r+0x32>
 803d884:	4620      	mov	r0, r4
 803d886:	f000 f831 	bl	803d8ec <_getpid_r>
 803d88a:	462a      	mov	r2, r5
 803d88c:	4601      	mov	r1, r0
 803d88e:	4620      	mov	r0, r4
 803d890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 803d894:	f000 b818 	b.w	803d8c8 <_kill_r>
 803d898:	2b01      	cmp	r3, #1
 803d89a:	d00a      	beq.n	803d8b2 <_raise_r+0x4c>
 803d89c:	1c59      	adds	r1, r3, #1
 803d89e:	d103      	bne.n	803d8a8 <_raise_r+0x42>
 803d8a0:	2316      	movs	r3, #22
 803d8a2:	6003      	str	r3, [r0, #0]
 803d8a4:	2001      	movs	r0, #1
 803d8a6:	e7e7      	b.n	803d878 <_raise_r+0x12>
 803d8a8:	2400      	movs	r4, #0
 803d8aa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 803d8ae:	4628      	mov	r0, r5
 803d8b0:	4798      	blx	r3
 803d8b2:	2000      	movs	r0, #0
 803d8b4:	e7e0      	b.n	803d878 <_raise_r+0x12>
	...

0803d8b8 <raise>:
 803d8b8:	4b02      	ldr	r3, [pc, #8]	; (803d8c4 <raise+0xc>)
 803d8ba:	4601      	mov	r1, r0
 803d8bc:	6818      	ldr	r0, [r3, #0]
 803d8be:	f7ff bfd2 	b.w	803d866 <_raise_r>
 803d8c2:	bf00      	nop
 803d8c4:	2000002c 	.word	0x2000002c

0803d8c8 <_kill_r>:
 803d8c8:	b538      	push	{r3, r4, r5, lr}
 803d8ca:	4d07      	ldr	r5, [pc, #28]	; (803d8e8 <_kill_r+0x20>)
 803d8cc:	2300      	movs	r3, #0
 803d8ce:	4604      	mov	r4, r0
 803d8d0:	4608      	mov	r0, r1
 803d8d2:	4611      	mov	r1, r2
 803d8d4:	602b      	str	r3, [r5, #0]
 803d8d6:	f7f4 f8bf 	bl	8031a58 <_kill>
 803d8da:	1c43      	adds	r3, r0, #1
 803d8dc:	d102      	bne.n	803d8e4 <_kill_r+0x1c>
 803d8de:	682b      	ldr	r3, [r5, #0]
 803d8e0:	b103      	cbz	r3, 803d8e4 <_kill_r+0x1c>
 803d8e2:	6023      	str	r3, [r4, #0]
 803d8e4:	bd38      	pop	{r3, r4, r5, pc}
 803d8e6:	bf00      	nop
 803d8e8:	200009c4 	.word	0x200009c4

0803d8ec <_getpid_r>:
 803d8ec:	f7f4 b8ac 	b.w	8031a48 <_getpid>

0803d8f0 <_init>:
 803d8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803d8f2:	bf00      	nop
 803d8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803d8f6:	bc08      	pop	{r3}
 803d8f8:	469e      	mov	lr, r3
 803d8fa:	4770      	bx	lr

0803d8fc <_fini>:
 803d8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 803d8fe:	bf00      	nop
 803d900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803d902:	bc08      	pop	{r3}
 803d904:	469e      	mov	lr, r3
 803d906:	4770      	bx	lr
